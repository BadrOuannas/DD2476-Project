[{"method_name": "extractArray", "params": ["Array"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "Object", "snippet": "  protected Object extractArray(Array array) throws SQLException {    if (array == null) {      return null;    }    Object result = array.getArray();    array.free();    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ArrayTypeHandler.java", "stars": "15", "class": {"name": "ArrayTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "startGif", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startGif(File tmpPicPath) {        mTmpPath = tmpPicPath;        cancelTask();        mPicList.clear();        mTimerTask = new TaskLocal();        //\u9891\u7387\u53ef\u4ee5\u7a0d\u5fae\u63a7\u5236\u4e0b        mTimer.schedule(mTimerTask, 0, mFrequencyCount);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GifCreateHelper.java", "stars": "2", "class": {"name": "GifCreateHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stopGif", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stopGif(final File path) {        cancelTask();        mSaveShotBitmapSuccess = true;        new Thread(new Runnable() {            @Override            public void run() {                if (mPicList.size() > 2) {                    // inSampleSize  \u91c7\u6837\u7387\uff0c\u8d8a\u5927\u56fe\u7247\u8d8a\u5c0f\uff0c\u8d8a\u5927\u56fe\u7247\u8d8a\u6a21\u7cca\uff0c\u9700\u8981\u5904\u7406\u7684\u65f6\u957f\u8d8a\u77ed                    // scaleSize \u7f29\u51cf\u5c3a\u5bf8\u6bd4\u4f8b\uff0c\u5bf9\u751f\u6210\u7684\u622a\u56fe\u8fdb\u884c\u7f29\u51cf\uff0c\u8d8a\u5927\u56fe\u7247\u8d8a\u6a21\u7cca\uff0c\u9700\u8981\u5904\u7406\u7684\u65f6\u957f\u8d8a\u77ed                    createGif(path, mPicList, mDelay, mSampleSize, mScaleSize, mGSYVideoGifSaveListener);                } else {                    mGSYVideoGifSaveListener.result(false, null);                }            }        }).start();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GifCreateHelper.java", "stars": "2", "class": {"name": "GifCreateHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelTask", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cancelTask() {        if (mTimerTask != null) {            mTimerTask.cancel();            mTimerTask = null;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GifCreateHelper.java", "stars": "2", "class": {"name": "GifCreateHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startSaveBitmap", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startSaveBitmap() {        // \u4fdd\u5b58\u7684\u6587\u4ef6\u8def\u5f84\uff0c\u8bf7\u786e\u4fdd\u6587\u4ef6\u5939\u76ee\u5f55\u5df2\u7ecf\u521b\u5efa        File file = new File(mTmpPath, \"GSY-TMP-FRAME\" + System.currentTimeMillis() + \".tmp\");        mPlayer.saveFrame(file, new GSYVideoShotSaveListener() {            @Override            public void result(boolean success, final File file) {                mSaveShotBitmapSuccess = true;                if (success) {                    Debuger.printfError(\" SUCCESS CREATE FILE \" + file.getAbsolutePath());                    mPicList.add(file.getAbsolutePath());                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GifCreateHelper.java", "stars": "2", "class": {"name": "GifCreateHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createGif", "params": ["File", "List<String>", "int", "int", "int", "GSYVideoGifSaveListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void createGif(File file, List<String> pics, int delay, int inSampleSize, int scaleSize,                          final GSYVideoGifSaveListener gsyVideoGifSaveListener) {        ByteArrayOutputStream baos = new ByteArrayOutputStream();        AnimatedGifEncoder localAnimatedGifEncoder = new AnimatedGifEncoder();        localAnimatedGifEncoder.start(baos);//start        localAnimatedGifEncoder.setRepeat(0);//\u8bbe\u7f6e\u751f\u6210gif\u7684\u5f00\u59cb\u64ad\u653e\u65f6\u95f4\u30020\u4e3a\u7acb\u5373\u5f00\u59cb\u64ad\u653e        localAnimatedGifEncoder.setDelay(delay);        for (int i = 0; i < pics.size(); i++) {            BitmapFactory.Options options = new BitmapFactory.Options();            options.inSampleSize = inSampleSize;            options.inJustDecodeBounds = true; // \u5148\u83b7\u53d6\u539f\u5927\u5c0f            BitmapFactory.decodeFile(pics.get(i), options);            double w = (double) options.outWidth / scaleSize;            double h = (double) options.outHeight / scaleSize;            options.inJustDecodeBounds = false; // \u83b7\u53d6\u65b0\u7684\u5927\u5c0f            Bitmap bitmap = BitmapFactory.decodeFile(pics.get(i), options);            Bitmap pic = ThumbnailUtils.extractThumbnail(bitmap, (int) w, (int) h);            localAnimatedGifEncoder.addFrame(pic);            bitmap.recycle();            pic.recycle();            gsyVideoGifSaveListener.process(i + 1, pics.size());        }        localAnimatedGifEncoder.finish();//finish        try {            FileOutputStream fos = new FileOutputStream(file.getPath());            baos.writeTo(fos);            baos.flush();            fos.flush();            baos.close();            fos.close();        } catch (IOException e) {            e.printStackTrace();            gsyVideoGifSaveListener.result(false, file);            return;        }        gsyVideoGifSaveListener.result(true, file);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GifCreateHelper.java", "stars": "2", "class": {"name": "GifCreateHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void run() {            if (mSaveShotBitmapSuccess) {                mSaveShotBitmapSuccess = false;                startSaveBitmap();            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GifCreateHelper.java", "stars": "2", "class": {"name": "TaskLocal", "extends": "TimerTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "methodPointCut", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void methodPointCut() {}", "url": "https://raw.githubusercontent.com/he303954106/AOP_Demo/master/app/src/main/java/com/netease/aop/login/aspect/LoginCheckAspect.java", "stars": "2", "class": {"name": "LoginCheckAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "jointPotin", "params": ["ProceedingJoinPoint"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object jointPotin(ProceedingJoinPoint joinPoint) throws Throwable {        Context context = (Context) joinPoint.getThis();        if (true) { // \u4eceSharedPreferences\u4e2d\u8bfb\u53d6            Log.e(TAG, \"\u68c0\u6d4b\u5230\u5df2\u767b\u5f55\uff01\");            return joinPoint.proceed();        } else {            Log.e(TAG, \"\u68c0\u6d4b\u5230\u672a\u767b\u5f55\uff01\");            Toast.makeText(context, \"\u8bf7\u5148\u767b\u5f55\uff01\", Toast.LENGTH_SHORT).show();            context.startActivity(new Intent(context, LoginActivity.class));            return null; // \u4e0d\u518d\u6267\u884c\u65b9\u6cd5\uff08\u5207\u5165\u70b9\uff09        }    }", "url": "https://raw.githubusercontent.com/he303954106/AOP_Demo/master/app/src/main/java/com/netease/aop/login/aspect/LoginCheckAspect.java", "stars": "2", "class": {"name": "LoginCheckAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "prePrintBannerText", "params": ["PrintStream", "String", "String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "  public abstract void prePrintBannerText(PrintStream printStream, String bannerText, String bannerFont);  public abstract String setUpPadding(Integer strapLineSize);  public abstract void printTextAndVersion(PrintStream printStream, String padding);  @Override  public void printBanner(PrintStream printStream, String bannerText, String bannerFont) {    this.prePrintBannerText(printStream, bannerText, bannerFont);    final String padding = setUpPadding(Const.STRAP_LINE_SIZE);    this.printTextAndVersion(printStream, padding);  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/banner/BannerTemplate.java", "stars": "3", "class": {"name": "BannerTemplate", "extends": null, "implements": ["Banner"], "modifiers": ["public", "abstract"]}}, {"method_name": "setUpPadding", "params": ["Integer"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "String", "snippet": "  public abstract String setUpPadding(Integer strapLineSize);  public abstract void printTextAndVersion(PrintStream printStream, String padding);  @Override  public void printBanner(PrintStream printStream, String bannerText, String bannerFont) {    this.prePrintBannerText(printStream, bannerText, bannerFont);    final String padding = setUpPadding(Const.STRAP_LINE_SIZE);    this.printTextAndVersion(printStream, padding);  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/banner/BannerTemplate.java", "stars": "3", "class": {"name": "BannerTemplate", "extends": null, "implements": ["Banner"], "modifiers": ["public", "abstract"]}}, {"method_name": "printTextAndVersion", "params": ["PrintStream", "String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "  public abstract void printTextAndVersion(PrintStream printStream, String padding);  @Override  public void printBanner(PrintStream printStream, String bannerText, String bannerFont) {    this.prePrintBannerText(printStream, bannerText, bannerFont);    final String padding = setUpPadding(Const.STRAP_LINE_SIZE);    this.printTextAndVersion(printStream, padding);  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/banner/BannerTemplate.java", "stars": "3", "class": {"name": "BannerTemplate", "extends": null, "implements": ["Banner"], "modifiers": ["public", "abstract"]}}, {"method_name": "printBanner", "params": ["PrintStream", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void printBanner(PrintStream printStream, String bannerText, String bannerFont) {    this.prePrintBannerText(printStream, bannerText, bannerFont);    final String padding = setUpPadding(Const.STRAP_LINE_SIZE);    this.printTextAndVersion(printStream, padding);  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/banner/BannerTemplate.java", "stars": "3", "class": {"name": "BannerTemplate", "extends": null, "implements": ["Banner"], "modifiers": ["public", "abstract"]}}, {"method_name": "onPageScrolled", "params": ["int", "float", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {        float currentPositionOffsetSum = position + positionOffset;        boolean leftToRight = false;        if (mLastPositionOffsetSum <= currentPositionOffsetSum) {            leftToRight = true;        }        if (mScrollState != ScrollState.SCROLL_STATE_IDLE) {            if (currentPositionOffsetSum == mLastPositionOffsetSum) {                return;            }            int nextPosition = position + 1;            boolean normalDispatch = true;            if (positionOffset == 0.0f) {                if (leftToRight) {                    nextPosition = position - 1;                    normalDispatch = false;                }            }            for (int i = 0; i < mTotalCount; i++) {                if (i == position || i == nextPosition) {                    continue;                }                Float leavedPercent = mLeavedPercents.get(i, 0.0f);                if (leavedPercent != 1.0f) {                    dispatchOnLeave(i, 1.0f, leftToRight, true);                }            }            if (normalDispatch) {                if (leftToRight) {                    dispatchOnLeave(position, positionOffset, true, false);                    dispatchOnEnter(nextPosition, positionOffset, true, false);                } else {                    dispatchOnLeave(nextPosition, 1.0f - positionOffset, false, false);                    dispatchOnEnter(position, 1.0f - positionOffset, false, false);                }            } else {                dispatchOnLeave(nextPosition, 1.0f - positionOffset, true, false);                dispatchOnEnter(position, 1.0f - positionOffset, true, false);            }        } else {            for (int i = 0; i < mTotalCount; i++) {                if (i == mCurrentIndex) {                    continue;                }                boolean deselected = mDeselectedItems.get(i);                if (!deselected) {                    dispatchOnDeselected(i);                }                Float leavedPercent = mLeavedPercents.get(i, 0.0f);                if (leavedPercent != 1.0f) {                    dispatchOnLeave(i, 1.0f, false, true);                }            }            dispatchOnEnter(mCurrentIndex, 1.0f, false, true);            dispatchOnSelected(mCurrentIndex);        }        mLastPositionOffsetSum = currentPositionOffsetSum;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/NavigatorHelper.java", "stars": "1", "class": {"name": "NavigatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dispatchOnEnter", "params": ["int", "float", "boolean", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void dispatchOnEnter(int index, float enterPercent, boolean leftToRight, boolean force) {        if (mSkimOver || index == mCurrentIndex || mScrollState == ScrollState.SCROLL_STATE_DRAGGING || force) {            if (mNavigatorScrollListener != null) {                mNavigatorScrollListener.onEnter(index, mTotalCount, enterPercent, leftToRight);            }            mLeavedPercents.put(index, 1.0f - enterPercent);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/NavigatorHelper.java", "stars": "1", "class": {"name": "NavigatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dispatchOnLeave", "params": ["int", "float", "boolean", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void dispatchOnLeave(int index, float leavePercent, boolean leftToRight, boolean force) {        if (mSkimOver || index == mLastIndex || mScrollState == ScrollState.SCROLL_STATE_DRAGGING || ((index == mCurrentIndex - 1 || index == mCurrentIndex + 1) && mLeavedPercents.get(index, 0.0f) != 1.0f) || force) {            if (mNavigatorScrollListener != null) {                mNavigatorScrollListener.onLeave(index, mTotalCount, leavePercent, leftToRight);            }            mLeavedPercents.put(index, leavePercent);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/NavigatorHelper.java", "stars": "1", "class": {"name": "NavigatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dispatchOnSelected", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void dispatchOnSelected(int index) {        if (mNavigatorScrollListener != null) {            mNavigatorScrollListener.onSelected(index, mTotalCount);        }        mDeselectedItems.put(index, false);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/NavigatorHelper.java", "stars": "1", "class": {"name": "NavigatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dispatchOnDeselected", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void dispatchOnDeselected(int index) {        if (mNavigatorScrollListener != null) {            mNavigatorScrollListener.onDeselected(index, mTotalCount);        }        mDeselectedItems.put(index, true);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/NavigatorHelper.java", "stars": "1", "class": {"name": "NavigatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onPageSelected", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageSelected(int position) {        mLastIndex = mCurrentIndex;        mCurrentIndex = position;        dispatchOnSelected(mCurrentIndex);        for (int i = 0; i < mTotalCount; i++) {            if (i == mCurrentIndex) {                continue;            }            boolean deselected = mDeselectedItems.get(i);            if (!deselected) {                dispatchOnDeselected(i);            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/NavigatorHelper.java", "stars": "1", "class": {"name": "NavigatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onPageScrollStateChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageScrollStateChanged(int state) {        mScrollState = state;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/NavigatorHelper.java", "stars": "1", "class": {"name": "NavigatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNavigatorScrollListener", "params": ["OnNavigatorScrollListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNavigatorScrollListener(OnNavigatorScrollListener navigatorScrollListener) {        mNavigatorScrollListener = navigatorScrollListener;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/NavigatorHelper.java", "stars": "1", "class": {"name": "NavigatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSkimOver", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSkimOver(boolean skimOver) {        mSkimOver = skimOver;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/NavigatorHelper.java", "stars": "1", "class": {"name": "NavigatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTotalCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTotalCount() {        return mTotalCount;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/NavigatorHelper.java", "stars": "1", "class": {"name": "NavigatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTotalCount", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTotalCount(int totalCount) {        mTotalCount = totalCount;        mDeselectedItems.clear();        mLeavedPercents.clear();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/NavigatorHelper.java", "stars": "1", "class": {"name": "NavigatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentIndex", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentIndex() {        return mCurrentIndex;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/NavigatorHelper.java", "stars": "1", "class": {"name": "NavigatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScrollState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getScrollState() {        return mScrollState;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/NavigatorHelper.java", "stars": "1", "class": {"name": "NavigatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getModelDependencies", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<Identifier>", "snippet": "\tpublic Collection<Identifier> getModelDependencies() {\t\treturn Collections.emptySet();\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/model/CBTUnbakedModel.java", "stars": "3", "class": {"name": "CBTUnbakedModel", "extends": null, "implements": ["UnbakedModel"], "modifiers": ["public"]}}, {"method_name": "getTextureDependencies", "params": ["Function<Identifier,UnbakedModel>", "Set<Pair>"], "throws": null, "modifiers": ["public"], "return_type": "Collection<SpriteIdentifier>", "snippet": "\tpublic Collection<SpriteIdentifier> getTextureDependencies(Function<Identifier, UnbakedModel> unbakedModelGetter, Set<Pair<String, String>> unresolvedTextureReferences) {\t\tCollection<SpriteIdentifier> baseDeps = baseModel.getTextureDependencies(unbakedModelGetter, unresolvedTextureReferences);\t\tCollection<SpriteIdentifier> allDeps = new ArrayList<SpriteIdentifier>(baseDeps);\t\tfor(CTMConfig config : configs) {\t\t\tallDeps.addAll(config.getTileProvider().getIdsToLoad());\t\t}\t\treturn allDeps;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/model/CBTUnbakedModel.java", "stars": "3", "class": {"name": "CBTUnbakedModel", "extends": null, "implements": ["UnbakedModel"], "modifiers": ["public"]}}, {"method_name": "bake", "params": ["ModelLoader", "Function<SpriteIdentifier,Sprite>", "ModelBakeSettings", "Identifier"], "throws": null, "modifiers": ["public"], "return_type": "BakedModel", "snippet": "\tpublic BakedModel bake(ModelLoader loader, Function<SpriteIdentifier, Sprite> textureGetter, ModelBakeSettings rotationContainer, Identifier modelId) {\t\ttry {\t\t\tList<SpriteProvider> spriteProviders = new ArrayList<>();\t\t\tfor(CTMConfig config : configs) {\t\t\t\tspriteProviders.add(config.createSpriteProvider(config.getTileProvider().load(textureGetter)));\t\t\t}\t\t\treturn new CBTBakedModel(baseModel.bake(loader, textureGetter, rotationContainer, modelId), spriteProviders.toArray(new SpriteProvider[spriteProviders.size()]));\t\t\t//return config.createBakedModel(sprites, baseModel.bake(loader, textureGetter, rotationContainer, modelId));\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t\treturn null;\t\t}\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/model/CBTUnbakedModel.java", "stars": "3", "class": {"name": "CBTUnbakedModel", "extends": null, "implements": ["UnbakedModel"], "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughSandstoneStairsBlock.java", "stars": "2", "class": {"name": "RoughSandstoneStairsBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(RoughSandstoneStairsBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughSandstoneStairsBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "StairsBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughSandstoneStairsBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "StairsBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getCharContent", "params": ["boolean"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "CharSequence", "snippet": "    public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {        return content;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/processor/loader/JavaMemoryFileObject.java", "stars": "23", "class": {"name": "JavaMemoryFileObject", "extends": "SimpleJavaFileObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "onInterceptTouchEvent", "params": ["MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onInterceptTouchEvent(MotionEvent ev) {        // \u4e0d\u62e6\u622a\u8fd9\u4e2a\u4e8b\u4ef6        return false;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/NoScrollViewPager.java", "stars": "1", "class": {"name": "NoScrollViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onTouchEvent", "params": ["MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onTouchEvent(MotionEvent ev) {        // \u4e0d\u5904\u7406\u8fd9\u4e2a\u4e8b\u4ef6        return false;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/NoScrollViewPager.java", "stars": "1", "class": {"name": "NoScrollViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "executeKeyEvent", "params": ["KeyEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean executeKeyEvent(@NonNull KeyEvent event) {        // \u4e0d\u54cd\u5e94\u6309\u952e\u4e8b\u4ef6        return false;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/NoScrollViewPager.java", "stars": "1", "class": {"name": "NoScrollViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setCurrentItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCurrentItem(int item) {        boolean smoothScroll;        int currentItem = getCurrentItem();        if (currentItem == 0) {            // \u5982\u679c\u5f53\u524d\u662f\u7b2c\u4e00\u9875\uff0c\u53ea\u6709\u7b2c\u4e8c\u9875\u624d\u4f1a\u6709\u52a8\u753b            smoothScroll = item == currentItem + 1;        } else if (currentItem == getCount() - 1) {            // \u5982\u679c\u5f53\u524d\u662f\u6700\u540e\u4e00\u9875\uff0c\u53ea\u6709\u6700\u540e\u7b2c\u4e8c\u9875\u624d\u4f1a\u6709\u52a8\u753b            smoothScroll = item == currentItem - 1;        } else {            // \u5982\u679c\u5f53\u524d\u662f\u4e2d\u95f4\u9875\uff0c\u53ea\u6709\u76f8\u90bb\u9875\u624d\u4f1a\u6709\u52a8\u753b            smoothScroll = Math.abs(currentItem - item) == 1;        }        super.setCurrentItem(item, smoothScroll);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/NoScrollViewPager.java", "stars": "1", "class": {"name": "NoScrollViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        PagerAdapter adapter = getAdapter();        return adapter != null ? adapter.getCount() : 0;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/NoScrollViewPager.java", "stars": "1", "class": {"name": "NoScrollViewPager", "extends": "ViewPager", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getEmpresa", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEmpresa() {        return empresa;    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/ViajeIncentivo.java", "stars": "1", "class": {"name": "ViajeIncentivo", "extends": "Viaje", "implements": null, "modifiers": ["public"]}}, {"method_name": "setEmpresa", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEmpresa(String empresa) {        this.empresa = empresa;    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/ViajeIncentivo.java", "stars": "1", "class": {"name": "ViajeIncentivo", "extends": "Viaje", "implements": null, "modifiers": ["public"]}}, {"method_name": "descripcion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String descripcion() {        return \"Viaje incentivo que te envia la empresa \" + empresa;    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/ViajeIncentivo.java", "stars": "1", "class": {"name": "ViajeIncentivo", "extends": "Viaje", "implements": null, "modifiers": ["public"]}}, {"method_name": "cualquierMetodo2", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String cualquierMetodo2() {        return \"M\u00e9todo implementado en la clase hija viaje de incentivo\";    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/ViajeIncentivo.java", "stars": "1", "class": {"name": "ViajeIncentivo", "extends": "Viaje", "implements": null, "modifiers": ["public"]}}, {"method_name": "havePermission", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean havePermission(String appUser, String execUser) {        Integer result =  userExecUserDao.exists(appUser, execUser);        return result != null && result > 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecUserServiceImpl.java", "stars": "23", "class": {"name": "ExecUserServiceImpl", "extends": null, "implements": ["ExecUserService"], "modifiers": ["public"]}}, {"method_name": "getExecUserByAppUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getExecUserByAppUser(String appUser) {        return userExecUserDao.getExcUserByAppUser(appUser);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecUserServiceImpl.java", "stars": "23", "class": {"name": "ExecUserServiceImpl", "extends": null, "implements": ["ExecUserService"], "modifiers": ["public"]}}, {"method_name": "listExecUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ExecUser>", "snippet": "    public List<ExecUser> listExecUser() {        return execUserDao.listAll();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecUserServiceImpl.java", "stars": "23", "class": {"name": "ExecUserServiceImpl", "extends": null, "implements": ["ExecUserService"], "modifiers": ["public"]}}, {"method_name": "addExecUser", "params": ["ExecUser"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addExecUser(ExecUser execUser) {        execUserDao.insertOne(execUser);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecUserServiceImpl.java", "stars": "23", "class": {"name": "ExecUserServiceImpl", "extends": null, "implements": ["ExecUserService"], "modifiers": ["public"]}}, {"method_name": "selectExecUserByName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ExecUser", "snippet": "    public ExecUser selectExecUserByName(String execUser) {        return execUserDao.selectByName(execUser);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecUserServiceImpl.java", "stars": "23", "class": {"name": "ExecUserServiceImpl", "extends": null, "implements": ["ExecUserService"], "modifiers": ["public"]}}, {"method_name": "selectExecUser", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "ExecUser", "snippet": "    public ExecUser selectExecUser(Integer id) {        return execUserDao.selectOne(id);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecUserServiceImpl.java", "stars": "23", "class": {"name": "ExecUserServiceImpl", "extends": null, "implements": ["ExecUserService"], "modifiers": ["public"]}}, {"method_name": "deleteExecUser", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteExecUser(Integer id) {        execUserDao.deleteOne(id);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecUserServiceImpl.java", "stars": "23", "class": {"name": "ExecUserServiceImpl", "extends": null, "implements": ["ExecUserService"], "modifiers": ["public"]}}, {"method_name": "findExecUserPage", "params": ["ExecUserQuery"], "throws": null, "modifiers": ["public"], "return_type": "PageList<ExecUser>", "snippet": "    public PageList<ExecUser> findExecUserPage(ExecUserQuery query) {        long count = execUserDao.count(query);        int currentPage = query.getPage();        int pageSize = query.getPageSize();        PageList<ExecUser> pageList = new PageList<>(new Paginator(currentPage, pageSize, (int) count));        int offset = currentPage > 0 ? (currentPage - 1) * pageSize : 0;        List<ExecUser> result = execUserDao.findPage(query, new RowBounds(offset, pageSize));        pageList.setData(result);        return pageList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecUserServiceImpl.java", "stars": "23", "class": {"name": "ExecUserServiceImpl", "extends": null, "implements": ["ExecUserService"], "modifiers": ["public"]}}, {"method_name": "hasBoundNode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasBoundNode(String execUser) {        Integer result = execNodeUserDao.existExecUser(execUser);        return result != null && result > 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecUserServiceImpl.java", "stars": "23", "class": {"name": "ExecUserServiceImpl", "extends": null, "implements": ["ExecUserService"], "modifiers": ["public"]}}, {"method_name": "hasBoundAppUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasBoundAppUser(String execUser) {        Integer result = userExecUserDao.existsExecUser(execUser);        return result != null && result > 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecUserServiceImpl.java", "stars": "23", "class": {"name": "ExecUserServiceImpl", "extends": null, "implements": ["ExecUserService"], "modifiers": ["public"]}}, {"method_name": "read", "params": ["InputStream"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "GetRequest", "snippet": "    public static GetRequest read(InputStream inputStream) throws IOException {        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));        StringBuilder stringRequest = new StringBuilder();        String line;        while (!TextUtils.isEmpty(line = reader.readLine())) { // until new line (headers ending)            stringRequest.append(line).append('\\n');        }        return new GetRequest(stringRequest.toString());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/GetRequest.java", "stars": "2", "class": {"name": "GetRequest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "findRangeOffset", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "long", "snippet": "    private long findRangeOffset(String request) {        Matcher matcher = RANGE_HEADER_PATTERN.matcher(request);        if (matcher.find()) {            String rangeValue = matcher.group(1);            return Long.parseLong(rangeValue);        }        return -1;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/GetRequest.java", "stars": "2", "class": {"name": "GetRequest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "findUri", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String findUri(String request) {        Matcher matcher = URL_PATTERN.matcher(request);        if (matcher.find()) {            return matcher.group(1);        }        throw new IllegalArgumentException(\"Invalid request `\" + request + \"`: url not found!\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/GetRequest.java", "stars": "2", "class": {"name": "GetRequest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"GetRequest{\" +                \"rangeOffset=\" + rangeOffset +                \", partial=\" + partial +                \", uri='\" + uri + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/GetRequest.java", "stars": "2", "class": {"name": "GetRequest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        int bitmapWidth = bitmap.getWidth();        int bitmapHeight = bitmap.getHeight();        canvas.save();        matrix.reset();        matrix.postRotate(180, point1.x + bitmapWidth / 2, point1.y + bitmapHeight / 2);        canvas.concat(matrix);        canvas.drawBitmap(bitmap, point1.x, point1.y, paint);        canvas.restore();        canvas.save();        matrix.reset();        matrix.postRotate(45, point2.x + bitmapWidth / 2, point2.y + bitmapHeight / 2);        canvas.concat(matrix);        canvas.drawBitmap(bitmap, point2.x, point2.y, paint);        canvas.restore();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice09MatrixRotateView.java", "stars": "2", "class": {"name": "Practice09MatrixRotateView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tboolean x = 3 != 4 ;\t\tSystem.out.println(x);\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Buer.java", "stars": "2", "class": {"name": "Buer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIndex", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIndex(int index) {        mIndex.setValue(index);    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/ui/main/PageViewModel.java", "stars": "1", "class": {"name": "PageViewModel", "extends": "ViewModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "getText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LiveData<String>", "snippet": "    public LiveData<String> getText() {        return mText;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/ui/main/PageViewModel.java", "stars": "1", "class": {"name": "PageViewModel", "extends": "ViewModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatement", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Statement", "snippet": "    public Statement getStatement(String requestMapping) {        return statementMappingMap.get(requestMapping);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/Configuration.java", "stars": "13", "class": {"name": "Configuration", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "getStatementById", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Statement", "snippet": "    public Statement getStatementById(String id) {        return statementIdMap.get(id);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/Configuration.java", "stars": "13", "class": {"name": "Configuration", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "addStatement", "params": ["Statement"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addStatement(Statement statement) {        RequestMappingInfo requestMappingInfo = getRequestMappingInfo(statement);        if (StringUtils.isNotBlank(statement.getId())) {            // \u8bbe\u7f6eID\u4e0estatement\u7684\u6620\u5c04            statementIdMap.put(statement.getId(), statement);        }        if (requestMappingInfo == null) {            return;        }        // \u5982\u679c\u5df2\u7ecf\u6ce8\u518c\u8fc7\uff0c\u5219\u5148\u53d6\u6d88\u6ce8\u518c        if (statementMappingMap.containsKey(statement.getRequestMapping())) {            logger.debug(\"\u5237\u65b0\u63a5\u53e3:{}\", statement.getRequestMapping());            // \u53d6\u6d88\u6ce8\u518c            requestMappingHandlerMapping.unregisterMapping(requestMappingInfo);        }else{            logger.debug(\"\u6ce8\u518c\u63a5\u53e3:{}\", statement.getRequestMapping());        }        // \u6dfb\u52a0\u81f3\u7f13\u5b58        statementMappingMap.put(statement.getRequestMapping(), statement);        // \u6ce8\u518c\u63a5\u53e3        requestMappingHandlerMapping.registerMapping(requestMappingInfo,requestHandler,statement.isRequestBody() ? requestWithRequestBodyHandleMethod : requestHandleMethod);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/Configuration.java", "stars": "13", "class": {"name": "Configuration", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "getRequestMappingInfo", "params": ["Statement"], "throws": null, "modifiers": ["private"], "return_type": "RequestMappingInfo", "snippet": "    private RequestMappingInfo getRequestMappingInfo(Statement statement) {        String requestMapping = statement.getRequestMapping();        if (StringUtils.isBlank(requestMapping)) {            return null;        }        RequestMappingInfo.Builder builder = RequestMappingInfo.paths(requestMapping);        if (StringUtils.isNotBlank(statement.getRequestMethod())) {            RequestMethod requestMethod = RequestMethod.valueOf(statement.getRequestMethod().toUpperCase());            Assert.isNotNull(requestMethod, String.format(\"\u4e0d\u652f\u6301\u7684\u8bf7\u6c42\u65b9\u6cd5:%s\", statement.getRequestMethod()));            builder.methods(requestMethod);        }        return builder.build();    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/Configuration.java", "stars": "13", "class": {"name": "Configuration", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "setRequestMappingHandlerMapping", "params": ["RequestMappingHandlerMapping"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRequestMappingHandlerMapping(RequestMappingHandlerMapping requestMappingHandlerMapping) {        this.requestMappingHandlerMapping = requestMappingHandlerMapping;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/Configuration.java", "stars": "13", "class": {"name": "Configuration", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "setRequestHandler", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRequestHandler(Object requestHandler) {        this.requestHandler = requestHandler;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/Configuration.java", "stars": "13", "class": {"name": "Configuration", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "setRequestHandleMethod", "params": ["Method"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRequestHandleMethod(Method requestHandleMethod) {        this.requestHandleMethod = requestHandleMethod;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/Configuration.java", "stars": "13", "class": {"name": "Configuration", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "setXmlLocations", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setXmlLocations(String[] xmlLocations) {        this.xmlLocations = xmlLocations;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/Configuration.java", "stars": "13", "class": {"name": "Configuration", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "setEnableRefresh", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEnableRefresh(boolean enableRefresh) {        this.enableRefresh = enableRefresh;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/Configuration.java", "stars": "13", "class": {"name": "Configuration", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "setBanner", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBanner(boolean banner) {        this.banner = banner;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/Configuration.java", "stars": "13", "class": {"name": "Configuration", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "isThrowException", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isThrowException() {        return throwException;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/Configuration.java", "stars": "13", "class": {"name": "Configuration", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "setRequestWithRequestBodyHandleMethod", "params": ["Method"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRequestWithRequestBodyHandleMethod(Method requestWithRequestBodyHandleMethod) {        this.requestWithRequestBodyHandleMethod = requestWithRequestBodyHandleMethod;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/Configuration.java", "stars": "13", "class": {"name": "Configuration", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "setThrowException", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setThrowException(boolean throwException) {        this.throwException = throwException;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/Configuration.java", "stars": "13", "class": {"name": "Configuration", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "afterPropertiesSet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterPropertiesSet() {        if(this.banner){            System.out.println(\"  ____    ____    ____    ____    ____    ____    ____    ____  \");            System.out.println(\" / ___|  / ___|  / ___|  / ___|  / ___|  / ___|  / ___|  / ___| \");            System.out.println(\"\\\\___ \\\\  \\\\___ \\\\  \\\\___ \\\\  \\\\___ \\\\  \\\\___ \\\\  \\\\___ \\\\  \\\\___ \\\\  \\\\___ \\\\ \");            System.out.println(\"  ___) |  ___) |  ___) |  ___) |  ___) |  ___) |  ___) |  ___) |\");            System.out.println(\" |____/  |____/  |____/  |____/  |____/  |____/  |____/  |____/       \" + Configuration.class.getPackage().getImplementationVersion());        }        if(this.xmlLocations == null){            logger.error(\"ssssssss.xml-locations\u4e0d\u80fd\u4e3a\u7a7a\");        }else{            XmlFileLoader loader = new XmlFileLoader(xmlLocations, this);            loader.run();            // \u5982\u679c\u542f\u52a8\u5237\u65b0\u5219\u5b9a\u65f6\u91cd\u65b0\u52a0\u8f7d            if(enableRefresh){                logger.info(\"\u542f\u52a8\u81ea\u52a8\u5237\u65b0ssssssss\");                Executors.newScheduledThreadPool(1).scheduleAtFixedRate(loader,3,3, TimeUnit.SECONDS);            }        }    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/Configuration.java", "stars": "13", "class": {"name": "Configuration", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return description;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_immutable/ImmutablePOJO.java", "stars": "15", "class": {"name": "ImmutablePOJO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_immutable/ImmutablePOJO.java", "stars": "15", "class": {"name": "ImmutablePOJO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "shouldDemonstrateEqualsAndHashCodeForVariousCacheTypes", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldDemonstrateEqualsAndHashCodeForVariousCacheTypes() {    PerpetualCache cache = new PerpetualCache(\"test_cache\");    assertEquals(cache, cache);    assertEquals(cache, new SynchronizedCache(cache));    assertEquals(cache, new SerializedCache(cache));    assertEquals(cache, new LoggingCache(cache));    assertEquals(cache, new ScheduledCache(cache));    assertEquals(cache.hashCode(), new SynchronizedCache(cache).hashCode());    assertEquals(cache.hashCode(), new SerializedCache(cache).hashCode());    assertEquals(cache.hashCode(), new LoggingCache(cache).hashCode());    assertEquals(cache.hashCode(), new ScheduledCache(cache).hashCode());    Set<Cache> caches = new HashSet<>();    caches.add(cache);    caches.add(new SynchronizedCache(cache));    caches.add(new SerializedCache(cache));    caches.add(new LoggingCache(cache));    caches.add(new ScheduledCache(cache));    assertEquals(1, caches.size());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/BaseCacheTest.java", "stars": "15", "class": {"name": "BaseCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void destroy() {        mBeamManager.removeDiscoveryListener(mListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamDeviceAdapter.java", "stars": "4", "class": {"name": "BeamDeviceAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return mDevices.size();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamDeviceAdapter.java", "stars": "4", "class": {"name": "BeamDeviceAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ConnectableDevice", "snippet": "    public ConnectableDevice getItem(int position) {        return mDevices.get(mKeys.get(position));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamDeviceAdapter.java", "stars": "4", "class": {"name": "BeamDeviceAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getItemId(int position) {        return position;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamDeviceAdapter.java", "stars": "4", "class": {"name": "BeamDeviceAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView(int position, View convertView, ViewGroup parent) {        ViewHolder holder;        if (convertView == null) {            convertView = LayoutInflater.from(mContext).inflate(R.layout.casting_dialog_listitem, parent, false);            holder = new ViewHolder(convertView);            convertView.setTag(holder);        } else {            holder = (ViewHolder) convertView.getTag();        }        ConnectableDevice device = getItem(position);        int imgResource = R.drawable.ic_dlna;        String serviceText = \"\";        for (DeviceService service : device.getServices()) {            String addText = \"\";            if (service instanceof CastService) {                imgResource = R.drawable.ic_googlecast;                addText += \"Google Cast\";            } else if (service instanceof DLNAService) {                imgResource = R.drawable.ic_dlna;                addText += \"DLNA\";            } else if (service instanceof AirPlayService) {                imgResource = R.drawable.ic_airplay;                addText += \"AirPlay\";            } else if (service instanceof RokuService) {                imgResource = R.drawable.ic_dlna;                addText += \"Roku\";            } else if (service instanceof WebOSTVService) {                imgResource = R.drawable.ic_dlna;                addText += \"webOS TV\";            } else if (service instanceof NetcastTVService) {                imgResource = R.drawable.ic_dlna;                addText += \"Netcast\";            }            if (!addText.isEmpty()) {                if (serviceText.isEmpty()) {                    serviceText = addText;                } else {                    serviceText += \", \" + addText;                }            }        }        if (serviceText.isEmpty()) {            serviceText = \"Beaming Device\";        }        holder.icon.setImageResource(imgResource);        holder.text1.setText(device.getFriendlyName());        holder.text2.setText(serviceText);        return convertView;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamDeviceAdapter.java", "stars": "4", "class": {"name": "BeamDeviceAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCancel", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCancel (android.content.DialogInterface p0)\t{\t\tn_onCancel (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/android/support/v7/app/AlertDialog_IDialogInterfaceOnCancelListenerImplementor.java", "stars": "2", "class": {"name": "AlertDialog_IDialogInterfaceOnCancelListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onCancel", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onCancel (android.content.DialogInterface p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/android/support/v7/app/AlertDialog_IDialogInterfaceOnCancelListenerImplementor.java", "stars": "2", "class": {"name": "AlertDialog_IDialogInterfaceOnCancelListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/android/support/v7/app/AlertDialog_IDialogInterfaceOnCancelListenerImplementor.java", "stars": "2", "class": {"name": "AlertDialog_IDialogInterfaceOnCancelListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/android/support/v7/app/AlertDialog_IDialogInterfaceOnCancelListenerImplementor.java", "stars": "2", "class": {"name": "AlertDialog_IDialogInterfaceOnCancelListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "newBleConnector", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BleConnector", "snippet": "    public BleConnector newBleConnector() {        return new BleConnector(this);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addConnectGattCallback", "params": ["BleGattCallback"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void addConnectGattCallback(BleGattCallback callback) {        bleGattCallback = callback;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeConnectGattCallback", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void removeConnectGattCallback() {        bleGattCallback = null;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addNotifyCallback", "params": ["String", "BleNotifyCallback"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void addNotifyCallback(String uuid, BleNotifyCallback bleNotifyCallback) {        bleNotifyCallbackHashMap.put(uuid, bleNotifyCallback);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addIndicateCallback", "params": ["String", "BleIndicateCallback"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void addIndicateCallback(String uuid, BleIndicateCallback bleIndicateCallback) {        bleIndicateCallbackHashMap.put(uuid, bleIndicateCallback);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addWriteCallback", "params": ["String", "BleWriteCallback"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void addWriteCallback(String uuid, BleWriteCallback bleWriteCallback) {        bleWriteCallbackHashMap.put(uuid, bleWriteCallback);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addReadCallback", "params": ["String", "BleReadCallback"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void addReadCallback(String uuid, BleReadCallback bleReadCallback) {        bleReadCallbackHashMap.put(uuid, bleReadCallback);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeNotifyCallback", "params": ["String"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void removeNotifyCallback(String uuid) {        if (bleNotifyCallbackHashMap.containsKey(uuid))            bleNotifyCallbackHashMap.remove(uuid);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeIndicateCallback", "params": ["String"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void removeIndicateCallback(String uuid) {        if (bleIndicateCallbackHashMap.containsKey(uuid))            bleIndicateCallbackHashMap.remove(uuid);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeWriteCallback", "params": ["String"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void removeWriteCallback(String uuid) {        if (bleWriteCallbackHashMap.containsKey(uuid))            bleWriteCallbackHashMap.remove(uuid);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeReadCallback", "params": ["String"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void removeReadCallback(String uuid) {        if (bleReadCallbackHashMap.containsKey(uuid))            bleReadCallbackHashMap.remove(uuid);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clearCharacterCallback", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void clearCharacterCallback() {        if (bleNotifyCallbackHashMap != null)            bleNotifyCallbackHashMap.clear();        if (bleIndicateCallbackHashMap != null)            bleIndicateCallbackHashMap.clear();        if (bleWriteCallbackHashMap != null)            bleWriteCallbackHashMap.clear();        if (bleReadCallbackHashMap != null)            bleReadCallbackHashMap.clear();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addRssiCallback", "params": ["BleRssiCallback"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void addRssiCallback(BleRssiCallback callback) {        bleRssiCallback = callback;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeRssiCallback", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void removeRssiCallback() {        bleRssiCallback = null;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addMtuChangedCallback", "params": ["BleMtuChangedCallback"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void addMtuChangedCallback(BleMtuChangedCallback callback) {        bleMtuChangedCallback = callback;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeMtuChangedCallback", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void removeMtuChangedCallback() {        bleMtuChangedCallback = null;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDeviceKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDeviceKey() {        return bleDevice.getKey();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDevice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BleDevice", "snippet": "    public BleDevice getDevice() {        return bleDevice;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBluetoothGatt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BluetoothGatt", "snippet": "    public BluetoothGatt getBluetoothGatt() {        return bluetoothGatt;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "connect", "params": ["BleDevice", "boolean", "BleGattCallback"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "BluetoothGatt", "snippet": "    public synchronized BluetoothGatt connect(BleDevice bleDevice,                                              boolean autoConnect,                                              BleGattCallback callback) {        return connect(bleDevice, autoConnect, callback, 0);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "connect", "params": ["BleDevice", "boolean", "BleGattCallback", "int"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "BluetoothGatt", "snippet": "    public synchronized BluetoothGatt connect(BleDevice bleDevice,                                              boolean autoConnect,                                              BleGattCallback callback,                                              int connectRetryCount) {        BleLog.i(\"connect device: \" + bleDevice.getName()                + \"\\nmac: \" + bleDevice.getMac()                + \"\\nautoConnect: \" + autoConnect                + \"\\ncurrentThread: \" + Thread.currentThread().getId()                + \"\\nconnectCount:\" + (connectRetryCount + 1));        if (connectRetryCount == 0) {            this.connectRetryCount = 0;        }        addConnectGattCallback(callback);        lastState = LastState.CONNECT_CONNECTING;        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {            bluetoothGatt = bleDevice.getDevice().connectGatt(BleManager.getInstance().getContext(),                    autoConnect, coreGattCallback, TRANSPORT_LE);        } else {            bluetoothGatt = bleDevice.getDevice().connectGatt(BleManager.getInstance().getContext(),                    autoConnect, coreGattCallback);        }        if (bluetoothGatt != null) {            if (bleGattCallback != null) {                bleGattCallback.onStartConnect();            }            Message message = mainHandler.obtainMessage();            message.what = BleMsg.MSG_CONNECT_OVER_TIME;            mainHandler.sendMessageDelayed(message, BleManager.getInstance().getConnectOverTime());        } else {            disconnectGatt();            refreshDeviceCache();            closeBluetoothGatt();            lastState = LastState.CONNECT_FAILURE;            BleManager.getInstance().getMultipleBluetoothController().removeConnectingBle(BleBluetooth.this);            if (bleGattCallback != null)                bleGattCallback.onConnectFail(bleDevice, new OtherException(\"GATT connect exception occurred!\"));        }        return bluetoothGatt;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void disconnect() {        isActiveDisconnect = true;        disconnectGatt();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void destroy() {        lastState = LastState.CONNECT_IDLE;        disconnectGatt();        refreshDeviceCache();        closeBluetoothGatt();        removeConnectGattCallback();        removeRssiCallback();        removeMtuChangedCallback();        clearCharacterCallback();        mainHandler.removeCallbacksAndMessages(null);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disconnectGatt", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void disconnectGatt() {        if (bluetoothGatt != null) {            bluetoothGatt.disconnect();        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "refreshDeviceCache", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void refreshDeviceCache() {        try {            final Method refresh = BluetoothGatt.class.getMethod(\"refresh\");            if (refresh != null && bluetoothGatt != null) {                boolean success = (Boolean) refresh.invoke(bluetoothGatt);                BleLog.i(\"refreshDeviceCache, is success:  \" + success);            }        } catch (Exception e) {            BleLog.i(\"exception occur while refreshing device: \" + e.getMessage());            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "closeBluetoothGatt", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void closeBluetoothGatt() {        if (bluetoothGatt != null) {            bluetoothGatt.close();        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "BleBluetooth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleMessage", "params": ["Message"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void handleMessage(Message msg) {            switch (msg.what) {                case BleMsg.MSG_CONNECT_FAIL: {                    disconnectGatt();                    refreshDeviceCache();                    closeBluetoothGatt();                    if (connectRetryCount < BleManager.getInstance().getReConnectCount()) {                        BleLog.e(\"Connect fail, try reconnect \" + BleManager.getInstance().getReConnectInterval() + \" millisecond later\");                        ++connectRetryCount;                        Message message = mainHandler.obtainMessage();                        message.what = BleMsg.MSG_RECONNECT;                        mainHandler.sendMessageDelayed(message, BleManager.getInstance().getReConnectInterval());                    } else {                        lastState = LastState.CONNECT_FAILURE;                        BleManager.getInstance().getMultipleBluetoothController().removeConnectingBle(BleBluetooth.this);                        BleConnectStateParameter para = (BleConnectStateParameter) msg.obj;                        int status = para.getStatus();                        if (bleGattCallback != null)                            bleGattCallback.onConnectFail(bleDevice, new ConnectException(bluetoothGatt, status));                    }                }                break;                case BleMsg.MSG_DISCONNECTED: {                    lastState = LastState.CONNECT_DISCONNECT;                    BleManager.getInstance().getMultipleBluetoothController().removeBleBluetooth(BleBluetooth.this);                    disconnect();                    refreshDeviceCache();                    closeBluetoothGatt();                    removeRssiCallback();                    removeMtuChangedCallback();                    clearCharacterCallback();                    mainHandler.removeCallbacksAndMessages(null);                    BleConnectStateParameter para = (BleConnectStateParameter) msg.obj;                    boolean isActive = para.isActive();                    int status = para.getStatus();                    if (bleGattCallback != null)                        bleGattCallback.onDisConnected(isActive, bleDevice, bluetoothGatt, status);                }                break;                case BleMsg.MSG_RECONNECT: {                    connect(bleDevice, false, bleGattCallback, connectRetryCount);                }                break;                case BleMsg.MSG_CONNECT_OVER_TIME: {                    disconnectGatt();                    refreshDeviceCache();                    closeBluetoothGatt();                    lastState = LastState.CONNECT_FAILURE;                    BleManager.getInstance().getMultipleBluetoothController().removeConnectingBle(BleBluetooth.this);                    if (bleGattCallback != null)                        bleGattCallback.onConnectFail(bleDevice, new TimeoutException());                }                break;                case BleMsg.MSG_DISCOVER_SERVICES: {                    if (bluetoothGatt != null) {                        boolean discoverServiceResult = bluetoothGatt.discoverServices();                        if (!discoverServiceResult) {                            Message message = mainHandler.obtainMessage();                            message.what = BleMsg.MSG_DISCOVER_FAIL;                            mainHandler.sendMessage(message);                        }                    } else {                        Message message = mainHandler.obtainMessage();                        message.what = BleMsg.MSG_DISCOVER_FAIL;                        mainHandler.sendMessage(message);                    }                }                break;                case BleMsg.MSG_DISCOVER_FAIL: {                    disconnectGatt();                    refreshDeviceCache();                    closeBluetoothGatt();                    lastState = LastState.CONNECT_FAILURE;                    BleManager.getInstance().getMultipleBluetoothController().removeConnectingBle(BleBluetooth.this);                    if (bleGattCallback != null)                        bleGattCallback.onConnectFail(bleDevice,                                new OtherException(\"GATT discover services exception occurred!\"));                }                break;                case BleMsg.MSG_DISCOVER_SUCCESS: {                    lastState = LastState.CONNECT_CONNECTED;                    isActiveDisconnect = false;                    BleManager.getInstance().getMultipleBluetoothController().removeConnectingBle(BleBluetooth.this);                    BleManager.getInstance().getMultipleBluetoothController().addBleBluetooth(BleBluetooth.this);                    BleConnectStateParameter para = (BleConnectStateParameter) msg.obj;                    int status = para.getStatus();                    if (bleGattCallback != null)                        bleGattCallback.onConnectSuccess(bleDevice, bluetoothGatt, status);                }                break;                default:                    super.handleMessage(msg);                    break;            }        }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleBluetooth.java", "stars": "2", "class": {"name": "MainHandler", "extends": "Handler", "implements": null, "modifiers": ["private", "final"]}}, {"method_name": "onSizeChanged", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onSizeChanged(int w, int h, int oldw, int oldh) {        super.onSizeChanged(w, h, oldw, oldh);        mWidth = w * 9 / 10;        mHeight = h * 9 / 10;        mCircleRadius = mWidth / dp2px(4);        mCenterX = w / 2;        mCenterY = h / 2;        mRectF = new RectF(mCenterX - mCircleRadius, mCenterY + 0.6f * mCircleRadius,                mCenterX + mCircleRadius, mCenterY + 2.6f * mCircleRadius);        mBgRectF = new RectF(mCenterX - mWidth / 2 ,mCenterY - mHeight / 2 ,mCenterX + mWidth / 2, mCenterY + mHeight / 2);        mPath.moveTo(mCenterX - mCircleRadius, mCenterY + 1.8f * mCircleRadius);        mPath.lineTo(mCenterX - mCircleRadius, mCenterY - 1.8f * mCircleRadius);        mPath.lineTo(mCenterX + mCircleRadius, mCenterY);        mPath.close();        mPathMeasure.setPath(mPath, false);        mPathLength = mPathMeasure.getLength();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENPlayView.java", "stars": "2", "class": {"name": "ENPlayView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        canvas.drawCircle(mCenterX, mCenterY, mWidth / 2, mBgPaint);        if (mFraction < 0) {    //\u55f7~~ \u5f39\u6027\u90e8\u5206            canvas.drawLine(mCenterX + mCircleRadius, mCenterY - 1.6f * mCircleRadius + 10 * mCircleRadius * mFraction,                    mCenterX + mCircleRadius, mCenterY + 1.6f * mCircleRadius + 10 * mCircleRadius * mFraction, mPaint);            canvas.drawLine(mCenterX - mCircleRadius, mCenterY - 1.6f * mCircleRadius,                    mCenterX - mCircleRadius, mCenterY + 1.6f * mCircleRadius, mPaint);            canvas.drawArc(mBgRectF, -105 , 360 , false, mPaint);        } else if (mFraction <= 0.3) {  //\u55f7~~ \u53f3\u4fa7\u76f4\u7ebf\u548c\u4e0b\u65b9\u66f2\u7ebf            canvas.drawLine(mCenterX + mCircleRadius, mCenterY - 1.6f * mCircleRadius + mCircleRadius * 3.2f / 0.3f * mFraction,                    mCenterX + mCircleRadius, mCenterY + 1.6f * mCircleRadius, mPaint);            canvas.drawLine(mCenterX - mCircleRadius, mCenterY - 1.6f * mCircleRadius,                    mCenterX - mCircleRadius, mCenterY + 1.6f * mCircleRadius, mPaint);            if (mFraction != 0)                canvas.drawArc(mRectF, 0f, 180f / 0.3f * mFraction, false, mPaint);            canvas.drawArc(mBgRectF, -105 + 360 * mFraction, 360 * (1 - mFraction), false, mPaint);        } else if (mFraction <= 0.6) {  //\u55f7~~ \u4e0b\u65b9\u66f2\u7ebf\u548c\u4e09\u89d2\u5f62            canvas.drawArc(mRectF, 180f / 0.3f * (mFraction - 0.3f), 180 - 180f / 0.3f * (mFraction - 0.3f), false , mPaint);            mDstPath.reset();            //mDstPath.lineTo(0 ,0);            mPathMeasure.getSegment(0.02f * mPathLength, 0.38f * mPathLength + 0.42f * mPathLength / 0.3f * (mFraction - 0.3f) ,                    mDstPath, true);            canvas.drawPath(mDstPath, mPaint);            canvas.drawArc(mBgRectF, -105 + 360 * mFraction, 360 * (1 - mFraction), false, mPaint);        } else if (mFraction <= 0.8) {  //\u55f7~~ \u4e09\u89d2\u5f62            mDstPath.reset();            //mDstPath.lineTo(0 ,0);            mPathMeasure.getSegment(0.02f * mPathLength + 0.2f * mPathLength / 0.2f * (mFraction - 0.6f)                    , 0.8f * mPathLength + 0.2f * mPathLength / 0.2f * (mFraction - 0.6f) ,                    mDstPath, true);            canvas.drawPath(mDstPath, mPaint);            canvas.drawArc(mBgRectF, -105 + 360 * mFraction, 360 * (1 - mFraction), false, mPaint);        } else {    //\u55f7~~ \u5f39\u6027\u90e8\u5206            mDstPath.reset();            //mDstPath.lineTo(0 ,0);            mPathMeasure.getSegment(10 * mCircleRadius * (mFraction - 1)                    , mPathLength ,                    mDstPath, true);            canvas.drawPath(mDstPath, mPaint);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENPlayView.java", "stars": "2", "class": {"name": "ENPlayView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "play", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void play() {        if (mCurrentState == STATE_PLAY) {            return;        }        mCurrentState = STATE_PLAY;        ValueAnimator valueAnimator = ValueAnimator.ofFloat(1.f, 100.f);        valueAnimator.setDuration(mDuration);        valueAnimator.setInterpolator(new AnticipateInterpolator());        valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {            @Override            public void onAnimationUpdate(ValueAnimator valueAnimator) {                mFraction = 1 - valueAnimator.getAnimatedFraction();                invalidate();            }        });        if (!valueAnimator.isRunning()) {            valueAnimator.start();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENPlayView.java", "stars": "2", "class": {"name": "ENPlayView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "pause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pause() {        if (mCurrentState == STATE_PAUSE) {            return;        }        mCurrentState = STATE_PAUSE;        ValueAnimator valueAnimator = ValueAnimator.ofFloat(1.f, 100.f);        valueAnimator.setDuration(mDuration);        valueAnimator.setInterpolator(new AnticipateInterpolator());        valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {            @Override            public void onAnimationUpdate(ValueAnimator valueAnimator) {                mFraction = valueAnimator.getAnimatedFraction();                invalidate();            }        });        if (!valueAnimator.isRunning()) {            valueAnimator.start();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENPlayView.java", "stars": "2", "class": {"name": "ENPlayView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentState() {        return mCurrentState;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENPlayView.java", "stars": "2", "class": {"name": "ENPlayView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDuration", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDuration(int duration) {        mDuration = duration;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENPlayView.java", "stars": "2", "class": {"name": "ENPlayView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "dp2px", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int dp2px(int dp) {        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp,                getContext().getResources().getDisplayMetrics());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/moe/codeest/enviews/ENPlayView.java", "stars": "2", "class": {"name": "ENPlayView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadTriggerPlugins", "params": ["ServletContextHandler"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,TriggerPlugin>", "snippet": "  public Map<String, TriggerPlugin> loadTriggerPlugins(final ServletContextHandler root) {    /*     * TODO spyne: TriggerPluginLoader should not have any dependency on Azkaban Web Server     **/    final AzkabanWebServer azkabanWebServer = SERVICE_PROVIDER.getInstance(AzkabanWebServer.class);    final File triggerPluginPath = new File(this.pluginPath);    if (!triggerPluginPath.exists()) {      return new HashMap<>();    }    final Map<String, TriggerPlugin> installedTriggerPlugins =        new HashMap<>();    final ClassLoader parentLoader = AzkabanWebServer.class.getClassLoader();    final File[] pluginDirs = triggerPluginPath.listFiles();    final ArrayList<String> jarPaths = new ArrayList<>();    for (final File pluginDir : pluginDirs) {      if (!pluginDir.exists()) {        log.error(\"Error! Trigger plugin path \" + pluginDir.getPath()            + \" doesn't exist.\");        continue;      }      if (!pluginDir.isDirectory()) {        log.error(\"The plugin path \" + pluginDir + \" is not a directory.\");        continue;      }      // Load the conf directory      final File propertiesDir = new File(pluginDir, \"conf\");      Props pluginProps = null;      if (propertiesDir.exists() && propertiesDir.isDirectory()) {        final File propertiesFile = new File(propertiesDir, \"plugin.properties\");        final File propertiesOverrideFile =            new File(propertiesDir, \"override.properties\");        if (propertiesFile.exists()) {          if (propertiesOverrideFile.exists()) {            pluginProps =                PropsUtils.loadProps(null, propertiesFile,                    propertiesOverrideFile);          } else {            pluginProps = PropsUtils.loadProps(null, propertiesFile);          }        } else {          log.error(\"Plugin conf file \" + propertiesFile + \" not found.\");          continue;        }      } else {        log.error(\"Plugin conf path \" + propertiesDir + \" not found.\");        continue;      }      final String pluginName = pluginProps.getString(\"trigger.name\");      final List<String> extLibClasspath =          pluginProps.getStringList(\"trigger.external.classpaths\",              (List<String>) null);      final String pluginClass = pluginProps.getString(\"trigger.class\");      if (pluginClass == null) {        log.error(\"Trigger class is not set.\");      } else {        log.error(\"Plugin class \" + pluginClass);      }      URLClassLoader urlClassLoader = null;      final File libDir = new File(pluginDir, \"lib\");      if (libDir.exists() && libDir.isDirectory()) {        final File[] files = libDir.listFiles();        final ArrayList<URL> urls = new ArrayList<>();        for (int i = 0; i < files.length; ++i) {          try {            final URL url = files[i].toURI().toURL();            urls.add(url);          } catch (final MalformedURLException e) {            log.error(e);          }        }        if (extLibClasspath != null) {          for (final String extLib : extLibClasspath) {            try {              final File file = new File(pluginDir, extLib);              final URL url = file.toURI().toURL();              urls.add(url);            } catch (final MalformedURLException e) {              log.error(e);            }          }        }        urlClassLoader =            new URLClassLoader(urls.toArray(new URL[urls.size()]), parentLoader);      } else {        log.error(\"Library path \" + propertiesDir + \" not found.\");        continue;      }      Class<?> triggerClass = null;      try {        triggerClass = urlClassLoader.loadClass(pluginClass);      } catch (final ClassNotFoundException e) {        log.error(\"Class \" + pluginClass + \" not found.\");        continue;      }      final String source = FileIOUtils.getSourcePathFromClass(triggerClass);      log.info(\"Source jar \" + source);      jarPaths.add(\"jar:file:\" + source);      Constructor<?> constructor = null;      try {        constructor =            triggerClass.getConstructor(String.class, Props.class,                ServletContextHandler.class, AzkabanWebServer.class);      } catch (final NoSuchMethodException e) {        log.error(\"Constructor not found in \" + pluginClass);        continue;      }      Object obj = null;      try {        obj =            constructor.newInstance(pluginName, pluginProps, root,                azkabanWebServer);      } catch (final Exception e) {        log.error(e);      }      if (!(obj instanceof TriggerPlugin)) {        log.error(\"The object is not an TriggerPlugin\");        continue;      }      final TriggerPlugin plugin = (TriggerPlugin) obj;      installedTriggerPlugins.put(pluginName, plugin);    }    // Velocity needs the jar resource paths to be set.    final String jarResourcePath = StringUtils.join(jarPaths, \", \");    log.info(\"Setting jar resource path \" + jarResourcePath);    final VelocityEngine ve = azkabanWebServer.getVelocityEngine();    ve.addProperty(\"jar.resource.loader.path\", jarResourcePath);    return installedTriggerPlugins;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/TriggerPluginLoader.java", "stars": "18", "class": {"name": "TriggerPluginLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void test(){        StaticInner si = new StaticInner();        si.innerMethod();    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/javaMind/neibulei/staticN.java", "stars": "2", "class": {"name": "staticN", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        test();    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/javaMind/neibulei/staticN.java", "stars": "2", "class": {"name": "staticN", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "innerMethod", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void innerMethod(){            System.out.println(\"inner \" + shared);        }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/javaMind/neibulei/staticN.java", "stars": "2", "class": {"name": "StaticInner", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughRedSandstoneBlock.java", "stars": "2", "class": {"name": "RoughRedSandstoneBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["FMLCommonSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init(FMLCommonSetupEvent event) {\t\tfor (Biome biome : ForgeRegistries.BIOMES.getValues()) {\t\t\tboolean biomeCriteria = false;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"badlands\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"wooded_badlands_plateau\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"badlands_plateau\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"eroded_badlands\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"modified_wooded_badlands_plateau\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"modified_badlands_plateau\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (!biomeCriteria)\t\t\t\tcontinue;\t\t\tbiome.addFeature(GenerationStage.Decoration.UNDERGROUND_ORES, new OreFeature(OreFeatureConfig::deserialize) {\t\t\t\t@Override\t\t\t\tpublic boolean place(IWorld world, ChunkGenerator generator, Random rand, BlockPos pos, OreFeatureConfig config) {\t\t\t\t\tDimensionType dimensionType = world.getDimension().getType();\t\t\t\t\tboolean dimensionCriteria = false;\t\t\t\t\tif (dimensionType == DimensionType.OVERWORLD)\t\t\t\t\t\tdimensionCriteria = true;\t\t\t\t\tif (!dimensionCriteria)\t\t\t\t\t\treturn false;\t\t\t\t\treturn super.place(world, generator, rand, pos, config);\t\t\t\t}\t\t\t}.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create(\"roughredsandstone\", \"roughredsandstone\", blockAt -> {\t\t\t\tboolean blockCriteria = false;\t\t\t\tif (blockAt.getBlock() == Blocks.RED_SANDSTONE.getDefaultState().getBlock())\t\t\t\t\tblockCriteria = true;\t\t\t\treturn blockCriteria;\t\t\t}), block.getDefaultState(), 32)).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(32, 0, 0, 256))));\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughRedSandstoneBlock.java", "stars": "2", "class": {"name": "RoughRedSandstoneBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(RoughRedSandstoneBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughRedSandstoneBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughRedSandstoneBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setupSqlSessionFactory", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setupSqlSessionFactory() throws Exception {    DataSource dataSource = BaseDataTest.createUnpooledDataSource(\"org/apache/ibatis/type/jdbc.properties\");    TransactionFactory transactionFactory = new JdbcTransactionFactory();    Environment environment = new Environment(\"Production\", transactionFactory, dataSource);    Configuration configuration = new Configuration(environment);    configuration.addMapper(Mapper.class);    sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/type/ClobReaderTypeHandlerTest.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ClobReaderTypeHandlerTest.java", "stars": "15", "class": {"name": "ClobReaderTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    Reader reader = new StringReader(\"Hello\");    TYPE_HANDLER.setParameter(ps, 1, reader, null);    verify(ps).setClob(1, reader);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ClobReaderTypeHandlerTest.java", "stars": "15", "class": {"name": "ClobReaderTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    Reader reader = new StringReader(\"Hello\");    when(rs.getClob(\"column\")).thenReturn(clob);    when(clob.getCharacterStream()).thenReturn(reader);    assertEquals(reader, TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ClobReaderTypeHandlerTest.java", "stars": "15", "class": {"name": "ClobReaderTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getClob(\"column\")).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ClobReaderTypeHandlerTest.java", "stars": "15", "class": {"name": "ClobReaderTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getClob(1)).thenReturn(clob);    assertNull(TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ClobReaderTypeHandlerTest.java", "stars": "15", "class": {"name": "ClobReaderTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getClob(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ClobReaderTypeHandlerTest.java", "stars": "15", "class": {"name": "ClobReaderTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    Reader reader = new StringReader(\"Hello\");    when(cs.getClob(1)).thenReturn(clob);    when(clob.getCharacterStream()).thenReturn(reader);    assertEquals(reader, TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ClobReaderTypeHandlerTest.java", "stars": "15", "class": {"name": "ClobReaderTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getClob(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ClobReaderTypeHandlerTest.java", "stars": "15", "class": {"name": "ClobReaderTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "integrationTest", "params": [], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "  void integrationTest() throws IOException {    try (SqlSession session = sqlSessionFactory.openSession()) {      Mapper mapper = session.getMapper(Mapper.class);      // insert (Reader -> Clob)      {        ClobContent clobContent = new ClobContent();        clobContent.setId(1);        clobContent.setContent(new StringReader(\"Hello\"));        mapper.insert(clobContent);        session.commit();      }      // select (Clob -> Reader)      {        ClobContent clobContent = mapper.findOne(1);        assertThat(new BufferedReader(clobContent.getContent()).readLine()).isEqualTo(\"Hello\");      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ClobReaderTypeHandlerTest.java", "stars": "15", "class": {"name": "ClobReaderTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getId() {      return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ClobReaderTypeHandlerTest.java", "stars": "15", "class": {"name": "ClobContent", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(int id) {      this.id = id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ClobReaderTypeHandlerTest.java", "stars": "15", "class": {"name": "ClobContent", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getContent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Reader", "snippet": "    public Reader getContent() {      return content;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ClobReaderTypeHandlerTest.java", "stars": "15", "class": {"name": "ClobContent", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "setContent", "params": ["Reader"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setContent(Reader content) {      this.content = content;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ClobReaderTypeHandlerTest.java", "stars": "15", "class": {"name": "ClobContent", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getJobId() {        return jobId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setJobId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setJobId(Long jobId) {        this.jobId = jobId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTotalCosts", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double getTotalCosts() {        return totalCosts;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTotalCosts", "params": ["Double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTotalCosts(Double totalCosts) {        this.totalCosts = totalCosts;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getByteSpeedPerSecond", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getByteSpeedPerSecond() {        return byteSpeedPerSecond;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setByteSpeedPerSecond", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setByteSpeedPerSecond(Long byteSpeedPerSecond) {        this.byteSpeedPerSecond = byteSpeedPerSecond;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRecordSpeedPerSecond", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getRecordSpeedPerSecond() {        return recordSpeedPerSecond;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRecordSpeedPerSecond", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRecordSpeedPerSecond(Long recordSpeedPerSecond) {        this.recordSpeedPerSecond = recordSpeedPerSecond;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTotalReadRecords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getTotalReadRecords() {        return totalReadRecords;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTotalReadRecords", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTotalReadRecords(Long totalReadRecords) {        this.totalReadRecords = totalReadRecords;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTotalReadBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getTotalReadBytes() {        return totalReadBytes;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTotalReadBytes", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTotalReadBytes(Long totalReadBytes) {        this.totalReadBytes = totalReadBytes;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTotalErrorRecords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getTotalErrorRecords() {        return totalErrorRecords;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTotalErrorRecords", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTotalErrorRecords(Long totalErrorRecords) {        this.totalErrorRecords = totalErrorRecords;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTransformerTotalRecords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getTransformerTotalRecords() {        return transformerTotalRecords;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTransformerTotalRecords", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTransformerTotalRecords(Long transformerTotalRecords) {        this.transformerTotalRecords = transformerTotalRecords;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTransformerFailedRecords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getTransformerFailedRecords() {        return transformerFailedRecords;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTransformerFailedRecords", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTransformerFailedRecords(Long transformerFailedRecords) {        this.transformerFailedRecords = transformerFailedRecords;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTransformerFilterRecords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getTransformerFilterRecords() {        return transformerFilterRecords;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTransformerFilterRecords", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTransformerFilterRecords(Long transformerFilterRecords) {        this.transformerFilterRecords = transformerFilterRecords;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getCreateTime() {        return createTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTime(Date createTime) {        this.createTime = createTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/JobReport.java", "stars": "23", "class": {"name": "JobReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUpdateCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getUpdateCount() {    return updateList.size();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/CacheKey.java", "stars": "15", "class": {"name": "CacheKey", "extends": null, "implements": ["Cloneable", "Serializable"], "modifiers": ["public"]}}, {"method_name": "update", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void update(Object object) {    int baseHashCode = object == null ? 1 : ArrayUtil.hashCode(object);    count++;    checksum += baseHashCode;    baseHashCode *= count;    hashcode = multiplier * hashcode + baseHashCode;    updateList.add(object);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/CacheKey.java", "stars": "15", "class": {"name": "CacheKey", "extends": null, "implements": ["Cloneable", "Serializable"], "modifiers": ["public"]}}, {"method_name": "updateAll", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateAll(Object[] objects) {    for (Object o : objects) {      update(o);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/CacheKey.java", "stars": "15", "class": {"name": "CacheKey", "extends": null, "implements": ["Cloneable", "Serializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object object) {    if (this == object) {      return true;    }    if (!(object instanceof CacheKey)) {      return false;    }    final CacheKey cacheKey = (CacheKey) object;    if (hashcode != cacheKey.hashcode) {      return false;    }    if (checksum != cacheKey.checksum) {      return false;    }    if (count != cacheKey.count) {      return false;    }    for (int i = 0; i < updateList.size(); i++) {      Object thisObject = updateList.get(i);      Object thatObject = cacheKey.updateList.get(i);      if (!ArrayUtil.equals(thisObject, thatObject)) {        return false;      }    }    return true;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/CacheKey.java", "stars": "15", "class": {"name": "CacheKey", "extends": null, "implements": ["Cloneable", "Serializable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return hashcode;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/CacheKey.java", "stars": "15", "class": {"name": "CacheKey", "extends": null, "implements": ["Cloneable", "Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    StringJoiner returnValue = new StringJoiner(\":\");    returnValue.add(String.valueOf(hashcode));    returnValue.add(String.valueOf(checksum));    updateList.stream().map(ArrayUtil::toString).forEach(returnValue::add);    return returnValue.toString();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/CacheKey.java", "stars": "15", "class": {"name": "CacheKey", "extends": null, "implements": ["Cloneable", "Serializable"], "modifiers": ["public"]}}, {"method_name": "clone", "params": [], "throws": ["CloneNotSupportedException"], "modifiers": ["public"], "return_type": "CacheKey", "snippet": "  public CacheKey clone() throws CloneNotSupportedException {    CacheKey clonedCacheKey = (CacheKey) super.clone();    clonedCacheKey.updateList = new ArrayList<>(updateList);    return clonedCacheKey;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/CacheKey.java", "stars": "15", "class": {"name": "CacheKey", "extends": null, "implements": ["Cloneable", "Serializable"], "modifiers": ["public"]}}, {"method_name": "setProperties", "params": ["Properties"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setProperties(Properties properties) {    try {      InitialContext initCtx;      Properties env = getEnvProperties(properties);      if (env == null) {        initCtx = new InitialContext();      } else {        initCtx = new InitialContext(env);      }      if (properties.containsKey(INITIAL_CONTEXT)          && properties.containsKey(DATA_SOURCE)) {        Context ctx = (Context) initCtx.lookup(properties.getProperty(INITIAL_CONTEXT));        dataSource = (DataSource) ctx.lookup(properties.getProperty(DATA_SOURCE));      } else if (properties.containsKey(DATA_SOURCE)) {        dataSource = (DataSource) initCtx.lookup(properties.getProperty(DATA_SOURCE));      }    } catch (NamingException e) {      throw new DataSourceException(\"There was an error configuring JndiDataSourceTransactionPool. Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/jndi/JndiDataSourceFactory.java", "stars": "15", "class": {"name": "JndiDataSourceFactory", "extends": null, "implements": ["DataSourceFactory"], "modifiers": ["public"]}}, {"method_name": "getDataSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DataSource", "snippet": "  public DataSource getDataSource() {    return dataSource;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/jndi/JndiDataSourceFactory.java", "stars": "15", "class": {"name": "JndiDataSourceFactory", "extends": null, "implements": ["DataSourceFactory"], "modifiers": ["public"]}}, {"method_name": "getEnvProperties", "params": ["Properties"], "throws": null, "modifiers": ["private", "static"], "return_type": "Properties", "snippet": "  private static Properties getEnvProperties(Properties allProps) {    final String PREFIX = ENV_PREFIX;    Properties contextProperties = null;    for (Entry<Object, Object> entry : allProps.entrySet()) {      String key = (String) entry.getKey();      String value = (String) entry.getValue();      if (key.startsWith(PREFIX)) {        if (contextProperties == null) {          contextProperties = new Properties();        }        contextProperties.put(key.substring(PREFIX.length()), value);      }    }    return contextProperties;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/jndi/JndiDataSourceFactory.java", "stars": "15", "class": {"name": "JndiDataSourceFactory", "extends": null, "implements": ["DataSourceFactory"], "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() {        this.restGardenFieldMockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)            .apply(SecurityMockMvcConfigurers.springSecurity())            .build();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void createUser() {        user = new User();        user.setLogin(DEFAULT_LOGIN);        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setEmail(RandomStringUtils.randomAlphabetic(5) + DEFAULT_EMAIL);        user.setFirstName(DEFAULT_FIRSTNAME);        user.setLastName(DEFAULT_LASTNAME);        user.setBankAccountIBAN(DEFAULT_IBAN);        user.setStripeAccountVerified(true);        user = userRepository.saveAndFlush(user);        simpleUserDTO = simpleUserMapper.toDTO(user);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createGardenField", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createGardenField() throws Exception {        int databaseSizeBeforeCreate = gardenFieldRepository.findAll().size();        GardenFieldDTO gardenFieldDTO = createGardenFieldDTOWithoutOwner();        gardenFieldDTO.setOwner(simpleUserDTO);        restGardenFieldMockMvc.perform(post(\"/api/v1/gardenfields\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(gardenFieldDTO)))            .andExpect(status().isCreated());        List<GardenField> gardenFields = gardenFieldRepository.findAll();        assertThat(gardenFields).hasSize(databaseSizeBeforeCreate + 1);        GardenField testGardenField = gardenFields.get(gardenFields.size() - 1);        assertThat(testGardenField).isNotNull();        assertThat(testGardenField.getName()).isEqualTo(GARDEN_NAME);        assertThat(testGardenField.getSizeInM2()).isEqualTo(SIZE_IN_M2);        assertThat(testGardenField.getPricePerM2()).isEqualTo(PRICE_PER_M2);        assertThat(testGardenField.getLatitude()).isEqualTo(LATITUDE);        assertThat(testGardenField.getLongitude()).isEqualTo(LONGITUDE);        assertThat(testGardenField.getCity()).isEqualTo(CITY);        assertThat(testGardenField.getRoofed()).isEqualTo(ROOFED);        assertThat(testGardenField.getGlassHouse()).isEqualTo(GLASS_HOUSE);        assertThat(testGardenField.getHigh()).isEqualTo(HIGH);        assertThat(testGardenField.getElectricity()).isEqualTo(ELECTRICITY);        assertThat(testGardenField.getPhValue()).isEqualTo(PH_VALUE);        assertThat(testGardenField.getDescription()).isEqualTo(DESCRIPTION);        assertThat(testGardenField.getOwner()).isNotNull();        assertThat(testGardenField.getOwner().getId()).isEqualTo(simpleUserDTO.getId());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createGardenFieldUserNotStripeVerifiedShouldThrowException", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createGardenFieldUserNotStripeVerifiedShouldThrowException() throws Exception {        int databaseSizeBeforeCreate = gardenFieldRepository.findAll().size();        GardenFieldDTO gardenFieldDTO = createGardenFieldDTOWithoutOwner();        user.setStripeAccountVerified(false);        userRepository.saveAndFlush(user);        gardenFieldDTO.setOwner(simpleUserDTO);        assertThat(user.getStripeAccountVerified()).isFalse();        restGardenFieldMockMvc.perform(post(\"/api/v1/gardenfields\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(gardenFieldDTO)))            .andExpect(status().isForbidden());        List<GardenField> gardenFields = gardenFieldRepository.findAll();        assertThat(gardenFields).hasSize(databaseSizeBeforeCreate);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createGardenFieldOwnerIsNull", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createGardenFieldOwnerIsNull() throws Exception {        int databaseSizeBeforeCreate = gardenFieldRepository.findAll().size();        GardenFieldDTO gardenFieldDTO = createGardenFieldDTOWithoutOwner();        gardenFieldDTO.setOwner(null);        restGardenFieldMockMvc.perform(post(\"/api/v1/gardenfields\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(gardenFieldDTO)))            .andExpect(status().isCreated());        List<GardenField> gardenFields = gardenFieldRepository.findAll();        assertThat(gardenFields).hasSize(databaseSizeBeforeCreate + 1);        GardenField testGardenField = gardenFields.get(gardenFields.size() - 1);        assertThat(testGardenField).isNotNull();        assertThat(testGardenField.getName()).isEqualTo(GARDEN_NAME);        assertThat(testGardenField.getSizeInM2()).isEqualTo(SIZE_IN_M2);        assertThat(testGardenField.getPricePerM2()).isEqualTo(PRICE_PER_M2);        assertThat(testGardenField.getLatitude()).isEqualTo(LATITUDE);        assertThat(testGardenField.getLongitude()).isEqualTo(LONGITUDE);        assertThat(testGardenField.getCity()).isEqualTo(CITY);        assertThat(testGardenField.getRoofed()).isEqualTo(ROOFED);        assertThat(testGardenField.getGlassHouse()).isEqualTo(GLASS_HOUSE);        assertThat(testGardenField.getHigh()).isEqualTo(HIGH);        assertThat(testGardenField.getElectricity()).isEqualTo(ELECTRICITY);        assertThat(testGardenField.getPhValue()).isEqualTo(PH_VALUE);        assertThat(testGardenField.getDescription()).isEqualTo(DESCRIPTION);        assertThat(testGardenField.getOwner()).isNotNull();        assertThat(testGardenField.getOwner().getId()).isEqualTo(simpleUserDTO.getId());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createGardenFieldOwnerIdIsNull", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createGardenFieldOwnerIdIsNull() throws Exception {        int databaseSizeBeforeCreate = gardenFieldRepository.findAll().size();        GardenFieldDTO gardenFieldDTO = createGardenFieldDTOWithoutOwner();        gardenFieldDTO.setOwner(new SimpleUserDTO());        restGardenFieldMockMvc.perform(post(\"/api/v1/gardenfields\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(gardenFieldDTO)))            .andExpect(status().isBadRequest());        List<GardenField> gardenFields = gardenFieldRepository.findAll();        assertThat(gardenFields).hasSize(databaseSizeBeforeCreate);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createGardenFieldWithOtherOwner", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createGardenFieldWithOtherOwner() throws Exception {        int databaseSizeBeforeCreate = gardenFieldRepository.findAll().size();        GardenFieldDTO gardenFieldDTO = createGardenFieldDTOWithoutOwner();        SimpleUserDTO otherUser = new SimpleUserDTO();        otherUser.setId(simpleUserDTO.getId() + 1);        otherUser.setFirstName(\"Hans\");        otherUser.setLastName(\"Wurst\");        otherUser.setEmail(\"test@localhost.com\");        otherUser.setLogin(\"hansi\");        gardenFieldDTO.setOwner(otherUser);        restGardenFieldMockMvc.perform(post(\"/api/v1/gardenfields\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(gardenFieldDTO)))            .andExpect(status().isUnauthorized());        List<GardenField> gardenFields = gardenFieldRepository.findAll();        assertThat(gardenFields).hasSize(databaseSizeBeforeCreate);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createGardenFieldWithoutNecessaryFields", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createGardenFieldWithoutNecessaryFields() throws Exception {        int databaseSizeBeforeCreate = gardenFieldRepository.findAll().size();        GardenFieldDTO gardenFieldDTO = createGardenFieldDTOWithoutOwner();        gardenFieldDTO.setName(null);        gardenFieldDTO.setPricePerM2(null);        gardenFieldDTO.setSizeInM2(null);        restGardenFieldMockMvc.perform(post(\"/api/v1/gardenfields\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(gardenFieldDTO)))            .andExpect(status().isBadRequest());        List<GardenField> gardenFields = gardenFieldRepository.findAll();        assertThat(gardenFields).hasSize(databaseSizeBeforeCreate);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createGardenFieldWithSetId", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createGardenFieldWithSetId() throws Exception {        int databaseSizeBeforeCreate = gardenFieldRepository.findAll().size();        GardenFieldDTO gardenFieldDTO = createGardenFieldDTOWithoutOwner();        gardenFieldDTO.setId(100L);        restGardenFieldMockMvc.perform(post(\"/api/v1/gardenfields\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(gardenFieldDTO)))            .andExpect(status().isBadRequest());        List<GardenField> gardenFields = gardenFieldRepository.findAll();        assertThat(gardenFields).hasSize(databaseSizeBeforeCreate);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateGardenFieldName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateGardenFieldName() throws Exception {        GardenFieldDTO gardenFieldDTO = createGardenFieldDTOWithoutOwner();        gardenFieldDTO = gardenFieldService.createGardenField(gardenFieldDTO);        int databaseSizeAfterCreate = gardenFieldRepository.findAll().size();        gardenFieldDTO.setName(\"updatedName\");        restGardenFieldMockMvc.perform(put(\"/api/v1/gardenfields\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(gardenFieldDTO)))            .andExpect(status().isOk())            .andExpect(jsonPath(\"$.name\").value(is(\"updatedName\")));        List<GardenField> gardenFields = gardenFieldRepository.findAll();        assertThat(gardenFields.size()).isEqualTo(databaseSizeAfterCreate);        assertThat(gardenFields.get(0).getName()).isEqualTo(\"updatedName\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateGardenFieldOwner", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateGardenFieldOwner() throws Exception {        GardenFieldDTO gardenFieldDTO = createGardenFieldDTOWithoutOwner();        gardenFieldDTO = gardenFieldService.createGardenField(gardenFieldDTO);        gardenFieldDTO.setId(gardenFieldDTO.getId());        int databaseSizeAfterCreate = gardenFieldRepository.findAll().size();        User user = new User();        user.setLogin(DEFAULT_LOGIN + RandomStringUtils.randomAlphabetic(5));        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setEmail(RandomStringUtils.randomAlphabetic(5) + DEFAULT_EMAIL);        user.setFirstName(DEFAULT_FIRSTNAME);        user.setLastName(DEFAULT_LASTNAME);        user.setBankAccountIBAN(DEFAULT_IBAN);        SimpleUserDTO newSimpleUserDTO = simpleUserMapper.toDTO(userRepository.saveAndFlush(user));        gardenFieldDTO.setOwner(newSimpleUserDTO);        restGardenFieldMockMvc.perform(put(\"/api/v1/gardenfields\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(gardenFieldDTO)))            .andExpect(status().isOk())            .andExpect(jsonPath(\"$.owner.id\").value(is(Math.toIntExact(newSimpleUserDTO.getId()))));        List<GardenField> gardenFields = gardenFieldRepository.findAll();        assertThat(gardenFields.size()).isEqualTo(databaseSizeAfterCreate);        assertThat(gardenFields.get(0).getOwner().getId()).isEqualTo(Math.toIntExact(newSimpleUserDTO.getId()));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateGardenFieldWithoutNecessaryFields", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateGardenFieldWithoutNecessaryFields() throws Exception {        GardenFieldDTO gardenFieldDTO = createGardenFieldDTOWithoutOwner();        gardenFieldDTO = gardenFieldService.createGardenField(gardenFieldDTO);        gardenFieldDTO.setSizeInM2(null);        int databaseSizeAfterCreate = gardenFieldRepository.findAll().size();        restGardenFieldMockMvc.perform(put(\"/api/v1/gardenfields\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(gardenFieldDTO)))            .andExpect(status().isBadRequest());        List<GardenField> gardenFields = gardenFieldRepository.findAll();        assertThat(gardenFields.size()).isEqualTo(databaseSizeAfterCreate);        assertThat(gardenFields.get(0).getSizeInM2()).isEqualTo(SIZE_IN_M2);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllGardenFields", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllGardenFields() throws Exception {        createAndSaveGardenField(GARDEN_NAME);        createAndSaveGardenField(GARDEN_NAME + \"_2\");        restGardenFieldMockMvc.perform(get(\"/api/v1/gardenfields\")            .accept(MediaType.APPLICATION_JSON))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.content.[0].name\").value(is(GARDEN_NAME)))            .andExpect(jsonPath(\"$.content.[0].sizeInM2\").value(is(SIZE_IN_M2)))            .andExpect(jsonPath(\"$.content.[0].pricePerM2\").value(is(PRICE_PER_M2)))            .andExpect(jsonPath(\"$.content.[0].latitude\").value(is(LATITUDE)))            .andExpect(jsonPath(\"$.content.[0].longitude\").value(is(LONGITUDE)))            .andExpect(jsonPath(\"$.content.[0].city\").value(is(CITY)))            .andExpect(jsonPath(\"$.content.[0].roofed\").value(is(ROOFED)))            .andExpect(jsonPath(\"$.content.[0].glassHouse\").value(is(GLASS_HOUSE)))            .andExpect(jsonPath(\"$.content.[0].high\").value(is(HIGH)))            .andExpect(jsonPath(\"$.content.[0].water\").value(is(WATER)))            .andExpect(jsonPath(\"$.content.[0].electricity\").value(is(ELECTRICITY)))            .andExpect(jsonPath(\"$.content.[0].phValue\").value(is(PH_VALUE)))            .andExpect(jsonPath(\"$.content.[0].description\").value(is(DESCRIPTION)))            .andExpect(jsonPath(\"$.content.[0].owner.id\").value(is(Math.toIntExact(simpleUserDTO.getId()))))            .andExpect(jsonPath(\"$.content.[1].name\").value(is(GARDEN_NAME + \"_2\")))            .andExpect(jsonPath(\"$.content.[1].sizeInM2\").value(is(SIZE_IN_M2)))            .andExpect(jsonPath(\"$.content.[1].pricePerM2\").value(is(PRICE_PER_M2)))            .andExpect(jsonPath(\"$.content.[1].latitude\").value(is(LATITUDE)))            .andExpect(jsonPath(\"$.content.[1].longitude\").value(is(LONGITUDE)))            .andExpect(jsonPath(\"$.content.[1].city\").value(is(CITY)))            .andExpect(jsonPath(\"$.content.[1].roofed\").value(is(ROOFED)))            .andExpect(jsonPath(\"$.content.[1].glassHouse\").value(is(GLASS_HOUSE)))            .andExpect(jsonPath(\"$.content.[1].high\").value(is(HIGH)))            .andExpect(jsonPath(\"$.content.[1].water\").value(is(WATER)))            .andExpect(jsonPath(\"$.content.[1].electricity\").value(is(ELECTRICITY)))            .andExpect(jsonPath(\"$.content.[1].phValue\").value(is(PH_VALUE)))            .andExpect(jsonPath(\"$.content.[1].description\").value(is(DESCRIPTION)))            .andExpect(jsonPath(\"$.content.[1].owner.id\").value(is(Math.toIntExact(simpleUserDTO.getId()))));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findOneGardenField_Successful", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void findOneGardenField_Successful() throws Exception {        GardenField gardenField = createAndSaveGardenField(GARDEN_NAME);        restGardenFieldMockMvc.perform(get(\"/api/v1/gardenfields/{id}\", gardenField.getId())            .accept(MediaType.APPLICATION_JSON))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.name\").value(is(GARDEN_NAME)))            .andExpect(jsonPath(\"$.sizeInM2\").value(is(SIZE_IN_M2)))            .andExpect(jsonPath(\"$.pricePerM2\").value(is(PRICE_PER_M2)))            .andExpect(jsonPath(\"$.latitude\").value(is(LATITUDE)))            .andExpect(jsonPath(\"$.longitude\").value(is(LONGITUDE)))            .andExpect(jsonPath(\"$.city\").value(is(CITY)))            .andExpect(jsonPath(\"$.roofed\").value(is(ROOFED)))            .andExpect(jsonPath(\"$.glassHouse\").value(is(GLASS_HOUSE)))            .andExpect(jsonPath(\"$.high\").value(is(HIGH)))            .andExpect(jsonPath(\"$.water\").value(is(WATER)))            .andExpect(jsonPath(\"$.electricity\").value(is(ELECTRICITY)))            .andExpect(jsonPath(\"$.phValue\").value(is(PH_VALUE)))            .andExpect(jsonPath(\"$.owner.id\").value(is(Math.toIntExact(simpleUserDTO.getId()))));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findOneGardenField_NotFound", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void findOneGardenField_NotFound() throws Exception {        GardenField gardenField = createAndSaveGardenField(GARDEN_NAME);        restGardenFieldMockMvc.perform(get(\"/api/v1/gardenfields/{id}\", gardenField.getId() + 1)            .accept(MediaType.APPLICATION_JSON))            .andExpect(status().isNotFound());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteGardenField", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteGardenField() throws Exception {        GardenField gardenField = createAndSaveGardenField(GARDEN_NAME);        int databaseSizeBeforeDelete = gardenFieldRepository.findAll().size();        restGardenFieldMockMvc.perform(delete(\"/api/v1/gardenfields/{id}\", gardenField.getId())            .accept(TestUtil.APPLICATION_JSON_UTF8))            .andExpect(status().isNoContent());        List<GardenField> gardenFields = gardenFieldRepository.findAll();        assertThat(gardenFields).hasSize(databaseSizeBeforeDelete - 1);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteNonExistingGardenField", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteNonExistingGardenField() throws Exception {        int databaseSizeBeforeDelete = gardenFieldRepository.findAll().size();        restGardenFieldMockMvc.perform(delete(\"/api/v1/gardenfields/{id}\", 9999)            .accept(TestUtil.APPLICATION_JSON_UTF8))            .andExpect(status().isNoContent());        List<GardenField> gardenFields = gardenFieldRepository.findAll();        assertThat(gardenFields).hasSize(databaseSizeBeforeDelete);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGardenFieldBoundaries", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getGardenFieldBoundaries() throws Exception {        GardenField gardenField1 = createGardenField(\"Garden1\");        GardenField gardenField2 = createGardenField(\"Garden2\");        Double priceOne = 99.0;        Double priceTwo = 100.0;        Double sizeOne = 10.0;        Double sizeTwo = 11.0;        gardenField1.setPricePerM2(priceOne);        gardenField1.setSizeInM2(sizeOne);        gardenField2.setPricePerM2(priceTwo);        gardenField2.setSizeInM2(sizeTwo);        // calculate price per gardenfield (priceperm2 * sizeinm2 * 30)        Double priceOnePerMonth = priceOne * sizeOne * 30;        Double priceTwoPerMonth = priceTwo * sizeTwo * 30;        Double minPrice = priceOnePerMonth < priceTwoPerMonth ? priceOnePerMonth : priceTwoPerMonth;        Double maxPrice = priceOnePerMonth > priceTwoPerMonth ? priceOnePerMonth : priceTwoPerMonth;        gardenFieldRepository.save(gardenField1);        gardenFieldRepository.saveAndFlush(gardenField2);        restGardenFieldMockMvc.perform(get(\"/api/v1/gardenfields/filterBoundaries\")            .accept(MediaType.APPLICATION_JSON))            .andDo(MockMvcResultHandlers.print())            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.minPrice\").value(is(minPrice)))            .andExpect(jsonPath(\"$.maxPrice\").value(is(maxPrice)))            .andExpect(jsonPath(\"$.minSize\").value(is(sizeOne)))            .andExpect(jsonPath(\"$.maxSize\").value(is(sizeTwo)));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createGardenFieldDTOWithoutOwner", "params": [], "throws": null, "modifiers": ["private"], "return_type": "GardenFieldDTO", "snippet": "    private GardenFieldDTO createGardenFieldDTOWithoutOwner() {        GardenFieldDTO gardenFieldDTO = new GardenFieldDTO();        gardenFieldDTO.setName(GARDEN_NAME);        gardenFieldDTO.setSizeInM2(SIZE_IN_M2);        gardenFieldDTO.setPricePerM2(PRICE_PER_M2);        gardenFieldDTO.setLatitude(LATITUDE);        gardenFieldDTO.setLongitude(LONGITUDE);        gardenFieldDTO.setCity(CITY);        gardenFieldDTO.setRoofed(ROOFED);        gardenFieldDTO.setGlassHouse(GLASS_HOUSE);        gardenFieldDTO.setHigh(HIGH);        gardenFieldDTO.setWater(WATER);        gardenFieldDTO.setElectricity(ELECTRICITY);        gardenFieldDTO.setPhValue(PH_VALUE);        gardenFieldDTO.setDescription(DESCRIPTION);        return gardenFieldDTO;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLeasingsForGardenField", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getLeasingsForGardenField() throws Exception {        GardenField gardenField1 = createAndSaveGardenField(\"gardenField1\");        GardenField gardenField2 = createAndSaveGardenField(\"gardenField2\");        Leasing leasing1 = new Leasing();        leasing1.setUser(user);        leasing1.setGardenField(gardenField1);        leasing1.setFrom(Instant.now().plus(10, ChronoUnit.DAYS));        leasing1.setTo(Instant.now().plus(20, ChronoUnit.DAYS));        leasing1.setStatus(LeasingStatus.RESERVED);        leasing1.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing1);        Leasing leasing2 = new Leasing();        leasing2.setUser(user);        leasing2.setGardenField(gardenField2);        leasing2.setFrom(Instant.now().plus(21, ChronoUnit.DAYS));        leasing2.setTo(Instant.now().plus(30, ChronoUnit.DAYS));        leasing2.setStatus(LeasingStatus.RESERVED);        leasing2.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing2);        Leasing leasing3 = new Leasing();        leasing3.setUser(user);        leasing3.setGardenField(gardenField1);        leasing3.setFrom(Instant.now().plus(31, ChronoUnit.DAYS));        leasing3.setTo(Instant.now().plus(40, ChronoUnit.DAYS));        leasing3.setStatus(LeasingStatus.RESERVED);        leasing3.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing3);        assertThat(leasingRepository.findAll()).hasSize(3);        restGardenFieldMockMvc.perform(get(\"/api/v1/gardenfields/{gardenFieldId}/leasings\", gardenField1.getId()))            .andDo(MockMvcResultHandlers.print())            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.content.length()\").value(is(2)))            .andExpect(jsonPath(\"$.content.[0].id\").value(is(leasing1.getId().intValue())))            .andExpect(jsonPath(\"$.content.[1].id\").value(is(leasing3.getId().intValue())));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLeasingsForUserWithStatusFilter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getLeasingsForUserWithStatusFilter() throws Exception {        GardenField gardenField1 = createAndSaveGardenField(\"gardenField1\");        GardenField gardenField2 = createAndSaveGardenField(\"gardenField2\");        Leasing leasing1 = new Leasing();        leasing1.setUser(user);        leasing1.setGardenField(gardenField1);        leasing1.setFrom(Instant.now().plus(10, ChronoUnit.DAYS));        leasing1.setTo(Instant.now().plus(20, ChronoUnit.DAYS));        leasing1.setStatus(LeasingStatus.OPEN);        leasing1.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing1);        Leasing leasing2 = new Leasing();        leasing2.setUser(user);        leasing2.setGardenField(gardenField2);        leasing2.setFrom(Instant.now().plus(21, ChronoUnit.DAYS));        leasing2.setTo(Instant.now().plus(30, ChronoUnit.DAYS));        leasing2.setStatus(LeasingStatus.RESERVED);        leasing2.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing2);        Leasing leasing3 = new Leasing();        leasing3.setUser(user);        leasing3.setGardenField(gardenField1);        leasing3.setFrom(Instant.now().plus(31, ChronoUnit.DAYS));        leasing3.setTo(Instant.now().plus(40, ChronoUnit.DAYS));        leasing3.setStatus(LeasingStatus.RESERVED);        leasing3.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing3);        assertThat(leasingRepository.findAll()).hasSize(3);        restGardenFieldMockMvc.perform(get(\"/api/v1/gardenfields/{gardenFieldId}/leasings?leasingStatus=\" + LeasingStatus.OPEN.toString(), gardenField1.getId()))            .andDo(MockMvcResultHandlers.print())            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.content.length()\").value(is(1)))            .andExpect(jsonPath(\"$.content.[0].id\").value(is(leasing1.getId().intValue())));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLeasingsForUserWithTwoStatusFilter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getLeasingsForUserWithTwoStatusFilter() throws Exception {        GardenField gardenField1 = createAndSaveGardenField(\"gardenField1\");        Leasing leasing1 = new Leasing();        leasing1.setUser(user);        leasing1.setGardenField(gardenField1);        leasing1.setFrom(Instant.now().plus(10, ChronoUnit.DAYS));        leasing1.setTo(Instant.now().plus(20, ChronoUnit.DAYS));        leasing1.setStatus(LeasingStatus.OPEN);        leasing1.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing1);        Leasing leasing2 = new Leasing();        leasing2.setUser(user);        leasing2.setGardenField(gardenField1);        leasing2.setFrom(Instant.now().plus(21, ChronoUnit.DAYS));        leasing2.setTo(Instant.now().plus(30, ChronoUnit.DAYS));        leasing2.setStatus(LeasingStatus.RESERVED);        leasing2.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing2);        Leasing leasing3 = new Leasing();        leasing3.setUser(user);        leasing3.setGardenField(gardenField1);        leasing3.setFrom(Instant.now().plus(31, ChronoUnit.DAYS));        leasing3.setTo(Instant.now().plus(40, ChronoUnit.DAYS));        leasing3.setStatus(LeasingStatus.CANCELLED);        leasing3.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing3);        restGardenFieldMockMvc.perform(get(\"/api/v1/gardenfields/{gardenFieldId}/leasings?leasingStatus=\"            + LeasingStatus.OPEN.toString() + \"&leasingStatus=\" + LeasingStatus.CANCELLED.toString(), gardenField1.getId()))            .andDo(MockMvcResultHandlers.print())            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.content.length()\").value(is(2)))            .andExpect(jsonPath(\"$.content.[0].id\").value(is(leasing1.getId().intValue())))            .andExpect(jsonPath(\"$.content.[1].id\").value(is(leasing3.getId().intValue())));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLeasingsForUserWithStatusAndFromFilter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getLeasingsForUserWithStatusAndFromFilter() throws Exception {        GardenField gardenField1 = createAndSaveGardenField(\"gardenField1\");        Leasing leasing1 = new Leasing();        leasing1.setUser(user);        leasing1.setGardenField(gardenField1);        leasing1.setFrom(Instant.now().plus(10, ChronoUnit.DAYS));        leasing1.setTo(Instant.now().plus(20, ChronoUnit.DAYS));        leasing1.setStatus(LeasingStatus.OPEN);        leasing1.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing1);        Leasing leasing2 = new Leasing();        leasing2.setUser(user);        leasing2.setGardenField(gardenField1);        leasing2.setFrom(Instant.now().plus(21, ChronoUnit.DAYS));        leasing2.setTo(Instant.now().plus(30, ChronoUnit.DAYS));        leasing2.setStatus(LeasingStatus.OPEN);        leasing2.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing2);        Leasing leasing3 = new Leasing();        leasing3.setUser(user);        leasing3.setGardenField(gardenField1);        leasing3.setFrom(Instant.now().plus(31, ChronoUnit.DAYS));        leasing3.setTo(Instant.now().plus(40, ChronoUnit.DAYS));        leasing3.setStatus(LeasingStatus.OPEN);        leasing3.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing3);        restGardenFieldMockMvc.perform(get(\"/api/v1/gardenfields/{gardenFieldId}/leasings?leasingStatus=\"            + LeasingStatus.OPEN.toString() + \"&from=\" + leasing2.getFrom(), gardenField1.getId()))            .andDo(MockMvcResultHandlers.print())            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.content.length()\").value(is(2)))            .andExpect(jsonPath(\"$.content.[0].id\").value(is(leasing2.getId().intValue())))            .andExpect(jsonPath(\"$.content.[1].id\").value(is(leasing3.getId().intValue())));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLeasingsForUserWithStateFilter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getLeasingsForUserWithStateFilter() throws Exception {        GardenField gardenField1 = createAndSaveGardenField(\"gardenField1\");        GardenField gardenField2 = createAndSaveGardenField(\"gardenField2\");        Leasing leasing1 = new Leasing();        leasing1.setUser(user);        leasing1.setGardenField(gardenField1);        leasing1.setFrom(Instant.now().minus(20, ChronoUnit.DAYS));        leasing1.setTo(Instant.now().minus(10, ChronoUnit.DAYS));        leasing1.setStatus(LeasingStatus.OPEN);        leasing1.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing1);        Leasing leasing2 = new Leasing();        leasing2.setUser(user);        leasing2.setGardenField(gardenField2);        leasing2.setFrom(Instant.now().plus(21, ChronoUnit.DAYS));        leasing2.setTo(Instant.now().plus(30, ChronoUnit.DAYS));        leasing2.setStatus(LeasingStatus.RESERVED);        leasing2.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing2);        Leasing leasing3 = new Leasing();        leasing3.setUser(user);        leasing3.setGardenField(gardenField1);        leasing3.setFrom(Instant.now().plus(31, ChronoUnit.DAYS));        leasing3.setTo(Instant.now().plus(40, ChronoUnit.DAYS));        leasing3.setStatus(LeasingStatus.RESERVED);        leasing3.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.save(leasing3);        assertThat(leasingRepository.findAll()).hasSize(3);        restGardenFieldMockMvc.perform(get(\"/api/v1/gardenfields/{gardenFieldId}/leasings?state=\" + LeasingState.PAST.toString(), gardenField1.getId()))            .andDo(MockMvcResultHandlers.print())            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.content.length()\").value(is(1)))            .andExpect(jsonPath(\"$.content.[0].id\").value(is(leasing1.getId().intValue())));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createAndSaveGardenField", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "GardenField", "snippet": "    private GardenField createAndSaveGardenField(String gardenName) {        return gardenFieldRepository.saveAndFlush(createGardenField(gardenName));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createGardenField", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "GardenField", "snippet": "    private GardenField createGardenField(String gardenName) {        GardenField gardenField = new GardenField();        gardenField.setName(gardenName);        gardenField.setDescription(DESCRIPTION);        gardenField.setSizeInM2(SIZE_IN_M2);        gardenField.setPricePerM2(PRICE_PER_M2);        gardenField.setLatitude(LATITUDE);        gardenField.setLongitude(LONGITUDE);        gardenField.setCity(CITY);        gardenField.setRoofed(ROOFED);        gardenField.setGlassHouse(GLASS_HOUSE);        gardenField.setHigh(HIGH);        gardenField.setWater(WATER);        gardenField.setElectricity(ELECTRICITY);        gardenField.setPhValue(PH_VALUE);        gardenField.setOwner(user);        return gardenField;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createGardenFieldWithScriptShouldThrowInvalidException", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createGardenFieldWithScriptShouldThrowInvalidException() throws Exception {        GardenFieldDTO gardenFieldDTO = createGardenFieldDTOWithoutOwner();        gardenFieldDTO.setDescription(\"<script>alert('XSS')</script>\");        gardenFieldDTO.setOwner(simpleUserDTO);        restGardenFieldMockMvc.perform(post(\"/api/v1/gardenfields\")            .accept(TestUtil.APPLICATION_JSON_UTF8))            .andExpect(status().isBadRequest());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/GardenFieldControllerIT.java", "stars": "2", "class": {"name": "GardenFieldControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeProcedure", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void executeProcedure(java.util.HashMap<String, Object> dependencies) {\t\tif (dependencies.get(\"entity\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency entity for procedure RightClickedRose!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"x\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency x for procedure RightClickedRose!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"y\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency y for procedure RightClickedRose!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"z\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency z for procedure RightClickedRose!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"world\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency world for procedure RightClickedRose!\");\t\t\treturn;\t\t}\t\tEntity entity = (Entity) dependencies.get(\"entity\");\t\tint x = (int) dependencies.get(\"x\");\t\tint y = (int) dependencies.get(\"y\");\t\tint z = (int) dependencies.get(\"z\");\t\tWorld world = (World) dependencies.get(\"world\");\t\tif ((((entity instanceof LivingEntity) ? ((LivingEntity) entity).getHeldItemMainhand() : ItemStack.EMPTY)\t\t\t\t.getItem() == new ItemStack(Blocks.AIR, (int) (1)).getItem())) {\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.AIR.getDefaultState(), 3);\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.FLOWER_POT.getDefaultState(), 3);\t\t\tif (entity instanceof LivingEntity) {\t\t\t\tItemStack _setstack = new ItemStack(RoseBlock.block, (int) (1));\t\t\t\t_setstack.setCount((int) 1);\t\t\t\t((LivingEntity) entity).setHeldItem(Hand.MAIN_HAND, _setstack);\t\t\t\tif (entity instanceof ServerPlayerEntity)\t\t\t\t\t((ServerPlayerEntity) entity).inventory.markDirty();\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/RightClickedRoseProcedure.java", "stars": "2", "class": {"name": "RightClickedRoseProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u7a7a\u53c2\u6570\u6784\u9020\u65b9\u6cd5        StringBuilder bu1 = new StringBuilder();        System.out.println(\"bu1:\"+bu1);//bu1:\"\"        //\u5e26\u5b57\u7b26\u4e32\u7684\u6784\u9020\u65b9\u6cd5        StringBuilder bu2 = new StringBuilder(\"abc\");        System.out.println(\"bu2:\"+bu2);//bu2:abc    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/12.%E3%80%90Object%E7%B1%BB%E3%80%81%E5%B8%B8%E7%94%A8API%E3%80%91-%E7%AC%94%E8%AE%B0/code/01_API/src/com/itheima/demo06StringBuilder/Demo01StringBuilder.java", "stars": "2", "class": {"name": "Demo01StringBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return list.size();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListVideoAdapter.java", "stars": "2", "class": {"name": "ListVideoAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getItem(int position) {        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListVideoAdapter.java", "stars": "2", "class": {"name": "ListVideoAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getItemId(int position) {        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListVideoAdapter.java", "stars": "2", "class": {"name": "ListVideoAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView(final int position, View convertView, ViewGroup parent) {        final ViewHolder holder;        if (convertView == null) {            holder = new ViewHolder();            convertView = inflater.inflate(R.layout.list_video_item, null);            holder.videoContainer = (FrameLayout) convertView.findViewById(R.id.list_item_container);            holder.playerBtn = (ImageView) convertView.findViewById(R.id.list_item_btn);            holder.imageView = new ImageView(context);            convertView.setTag(holder);        } else {            holder = (ViewHolder) convertView.getTag();        }        //\u589e\u52a0\u5c01\u9762        holder.imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        holder.imageView.setImageResource(R.mipmap.xxx1);        smallVideoHelper.addVideoPlayer(position, holder.imageView, TAG, holder.videoContainer, holder.playerBtn);        holder.playerBtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                notifyDataSetChanged();                //listVideoUtil.setLoop(true);                smallVideoHelper.setPlayPositionAndTag(position, TAG);                //final String url = \"https://res.exexm.com/cw_145225549855002\";                final String url = \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";                gsySmallVideoHelperBuilder.setVideoTitle(\"title \" + position)                        .setUrl(url);                smallVideoHelper.startPlay();                //\u5fc5\u987b\u5728startPlay\u4e4b\u540e\u8bbe\u7f6e\u624d\u80fd\u751f\u6548                //smallVideoHelper.getGsyVideoPlayer().getTitleTextView().setVisibility(View.VISIBLE);            }        });        return convertView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListVideoAdapter.java", "stars": "2", "class": {"name": "ListVideoAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setRootView", "params": ["ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRootView(ViewGroup rootView) {        this.rootView = rootView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListVideoAdapter.java", "stars": "2", "class": {"name": "ListVideoAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "createUser", "params": ["UserDTO"], "throws": ["URISyntaxException"], "modifiers": ["public"], "return_type": "ResponseEntity<User>", "snippet": "    public ResponseEntity<User> createUser(@Valid @RequestBody UserDTO userDTO) throws URISyntaxException {        log.debug(\"REST request to save User : {}\", userDTO);        if (userDTO.getId() != null) {            throw new BadRequestAlertException(\"A new user cannot already have an ID\", \"userManagement\", \"idexists\");            // Lowercase the user login before comparing with database        } else if (userRepository.findOneByLogin(userDTO.getLogin().toLowerCase()).isPresent()) {            throw new LoginAlreadyUsedException();        } else if (userRepository.findOneByEmailIgnoreCase(userDTO.getEmail()).isPresent()) {            throw new EmailAlreadyUsedException();        } else {            User newUser = userService.createUser(userDTO);            mailService.sendCreationEmail(newUser);            return ResponseEntity                .created(new URI(\"/api/users/\" + newUser.getLogin()))                .headers(HeaderUtil.createAlert(applicationName, \"userManagement.created\", newUser.getLogin()))                .body(newUser);        }    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/UserResource.java", "stars": "2", "class": {"name": "UserResource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateUser", "params": ["UserDTO"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<UserDTO>", "snippet": "    public ResponseEntity<UserDTO> updateUser(@Valid @RequestBody UserDTO userDTO) {        log.debug(\"REST request to update User : {}\", userDTO);        Optional<User> existingUser = userRepository.findOneByEmailIgnoreCase(userDTO.getEmail());        if (existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))) {            throw new EmailAlreadyUsedException();        }        existingUser = userRepository.findOneByLogin(userDTO.getLogin().toLowerCase());        if (existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))) {            throw new LoginAlreadyUsedException();        }        Optional<UserDTO> updatedUser = userService.updateUser(userDTO);        return ResponseUtil.wrapOrNotFound(            updatedUser,            HeaderUtil.createAlert(applicationName, \"userManagement.updated\", userDTO.getLogin())        );    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/UserResource.java", "stars": "2", "class": {"name": "UserResource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllUsers", "params": ["Pageable"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<List>", "snippet": "    public ResponseEntity<List<UserDTO>> getAllUsers(Pageable pageable) {        final Page<UserDTO> page = userService.getAllManagedUsers(pageable);        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), page);        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/UserResource.java", "stars": "2", "class": {"name": "UserResource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAuthorities", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getAuthorities() {        return userService.getAuthorities();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/UserResource.java", "stars": "2", "class": {"name": "UserResource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<UserDTO>", "snippet": "    public ResponseEntity<UserDTO> getUser(@PathVariable String login) {        log.debug(\"REST request to get User : {}\", login);        return ResponseUtil.wrapOrNotFound(userService.getUserWithAuthoritiesByLogin(login).map(UserDTO::new));    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/UserResource.java", "stars": "2", "class": {"name": "UserResource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Void>", "snippet": "    public ResponseEntity<Void> deleteUser(@PathVariable String login) {        log.debug(\"REST request to delete User: {}\", login);        userService.deleteUser(login);        return ResponseEntity.noContent().headers(HeaderUtil.createAlert(applicationName, \"userManagement.deleted\", login)).build();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/UserResource.java", "stars": "2", "class": {"name": "UserResource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "search", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<User>", "snippet": "    public List<User> search(@PathVariable String query) {        return StreamSupport.stream(userSearchRepository.search(queryStringQuery(query)).spliterator(), false).collect(Collectors.toList());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/UserResource.java", "stars": "2", "class": {"name": "UserResource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "afterPropertiesSet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterPropertiesSet() {        // \u4e00\u4e9b\u9ed8\u8ba4\u5f00\u653e\u7684\u63a5\u53e3        excludePath.addAll(Arrays.asList(\"/error\", \"/actuator/**\"));        RequestMappingHandlerMapping mapping = applicationContext.getBean(RequestMappingHandlerMapping.class);        Map<RequestMappingInfo, HandlerMethod> map = mapping.getHandlerMethods();        // \u6536\u96c6 NotAuth \u6ce8\u89e3\u7684\u63a5\u53e3        map.keySet().forEach(info -> {            HandlerMethod handlerMethod = map.get(info);            Optional.ofNullable(AnnotationUtils.findAnnotation(handlerMethod.getMethod(), NotSwagger.class))                    .ifPresent(inner -> info.getPatternsCondition().getPatterns()                            .forEach(url -> excludePath.add(ReUtil.replaceAll(url, \"\\\\{(.*?)\\\\}\", \"*\"))));            Optional.ofNullable(AnnotationUtils.findAnnotation(handlerMethod.getBeanType(), NotSwagger.class))                    .ifPresent(inner -> info.getPatternsCondition().getPatterns()                            .forEach(url -> excludePath.add(ReUtil.replaceAll(url, \"\\\\{(.*?)\\\\}\", \"*\"))));        });        log.info(\"swagger exclude urls: {}\", excludePath);    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/swagger/SwaggerProperties.java", "stars": "6", "class": {"name": "SwaggerProperties", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/You.java", "stars": "1", "class": {"name": "You", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/You.java", "stars": "1", "class": {"name": "You", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/You.java", "stars": "1", "class": {"name": "You", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/You.java", "stars": "1", "class": {"name": "You", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getSurname", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSurname() {        return surname;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/You.java", "stars": "1", "class": {"name": "You", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setSurname", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSurname(String surname) {        this.surname = surname;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/You.java", "stars": "1", "class": {"name": "You", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getAge", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getAge() {        return age;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/You.java", "stars": "1", "class": {"name": "You", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setAge", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAge(int age) {        this.age = age;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/You.java", "stars": "1", "class": {"name": "You", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCity() {        return city;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/You.java", "stars": "1", "class": {"name": "You", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCity", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCity(String city) {        this.city = city;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/You.java", "stars": "1", "class": {"name": "You", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDesiredJobs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDesiredJobs() {        return desiredJobs;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/You.java", "stars": "1", "class": {"name": "You", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDesiredJobs", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDesiredJobs(String desiredJobs) {        this.desiredJobs = desiredJobs;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/You.java", "stars": "1", "class": {"name": "You", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString(){        return id+ \" \" + \"name: \" + name + \" surname: \" + surname + \" age: \" + age +  \" city: \" + city + \" desired job: \" + desiredJobs;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/You.java", "stars": "1", "class": {"name": "You", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "dispose", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dispose() {        this.removeAllObjects();    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/RoomObjectManager.java", "stars": "2", "class": {"name": "RoomObjectManager", "extends": null, "implements": ["IRoomObjectManager"], "modifiers": ["public"]}}, {"method_name": "getObject", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "IRoomObject", "snippet": "    public IRoomObject getObject(int id) {        return this.objects.get(id);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/RoomObjectManager.java", "stars": "2", "class": {"name": "RoomObjectManager", "extends": null, "implements": ["IRoomObjectManager"], "modifiers": ["public"]}}, {"method_name": "addObject", "params": ["int", "IRoomObject"], "throws": null, "modifiers": ["private"], "return_type": "IRoomObject", "snippet": "    private IRoomObject addObject(int id, IRoomObject object) {        IRoomObject existing = this.objects.get(id);        if(existing != null) {            object.dispose();            return null;        }        this.objects.put(id, object);        return object;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/RoomObjectManager.java", "stars": "2", "class": {"name": "RoomObjectManager", "extends": null, "implements": ["IRoomObjectManager"], "modifiers": ["public"]}}, {"method_name": "createObject", "params": ["int", "String"], "throws": null, "modifiers": ["public"], "return_type": "IRoomObject", "snippet": "    public IRoomObject createObject(int id, String type) {        return this.addObject(id, new RoomObject(id, type));    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/RoomObjectManager.java", "stars": "2", "class": {"name": "RoomObjectManager", "extends": null, "implements": ["IRoomObjectManager"], "modifiers": ["public"]}}, {"method_name": "removeObject", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeObject(int id) {        IRoomObject object = this.objects.remove(id);        if(object == null) return;        object.dispose();    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/RoomObjectManager.java", "stars": "2", "class": {"name": "RoomObjectManager", "extends": null, "implements": ["IRoomObjectManager"], "modifiers": ["public"]}}, {"method_name": "removeAllObjects", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeAllObjects() {        for(int id : this.objects.keySet()) {            IRoomObject object = this.objects.remove(id);            if(object != null) object.dispose();        }    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/RoomObjectManager.java", "stars": "2", "class": {"name": "RoomObjectManager", "extends": null, "implements": ["IRoomObjectManager"], "modifiers": ["public"]}}, {"method_name": "getObjects", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<Integer,IRoomObject>", "snippet": "    public Map<Integer, IRoomObject> getObjects() {        return this.objects;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/RoomObjectManager.java", "stars": "2", "class": {"name": "RoomObjectManager", "extends": null, "implements": ["IRoomObjectManager"], "modifiers": ["public"]}}, {"method_name": "peerRemove", "params": ["Map<String,String>", "InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void peerRemove(Map<String, String> removedPeerHostConfig, InitConfigEntity configEntity) {        // \u901a\u77e5\u79fb\u9664\u7684 peer \u8282\u70b9\u505c\u6b62\u5e76\u5220\u9664\u76f8\u5173\u6587\u4ef6        // log.info(\"\u79fb\u9664\u8282\u70b9\u505c\u6b62peer\u5bb9\u5668\");        log.info(\"Remove the node to stop the peer container\");        Map<String, List<String>> removeGroup = dockerConfigGen.groupHostByIp(removedPeerHostConfig);        String stopNodeFilePath = (this.initDir.endsWith(File.separator) ? this.initDir : this.initDir + File.separator) + \"template/stopNode.sh\";        for (String ip : removeGroup.keySet()) {            RemoveCmd peerRemoveCmd = updateService.createRemoveCmd(ip, removeGroup.get(ip), RoleEnum.PEER);            peerRemoveCmd.setPeerDomain(configEntity.getPeerDomain());            if (NetUtil.ipIsMine(ip)) {                try {                    FileUtils.copyFile(new File(stopNodeFilePath), new File(modeService.getInstallPath() + \"stopNode.sh\"));                } catch (Exception e) {                    // log.info(\"\u590d\u5236stopNode.sh\u53d1\u751f\u5f02\u5e38\");                    log.info(\"An exception occurred while copying the stopNode.sh file\");                    return;                }                updateService.removeNode(RoleEnum.PEER, peerRemoveCmd.getPeerDomain(), peerRemoveCmd.getHostNames(), peerRemoveCmd.getPorts());            } else {                String url = \"http://\" + ip + \":8080/v1/install/remove\";                do {                    try {                        String result = this.httpClient.sendFileAndJson(url, stopNodeFilePath, JSONObject.toJSONString(peerRemoveCmd));                        if (!StringUtils.isEmpty(result)) {                            HttpInstallResponse response = JSONObject.parseObject(result, HttpInstallResponse.class);                            if (ResponseCode.SUCCESS.getCode().equalsIgnoreCase(response.getCode())) {                                break;                            }                        }                        // log.warn(String.format(\"\u7ed9\u8282\u70b9 %s \u53d1\u9001\u79fb\u9664\u547d\u4ee4\u8fd4\u56de\u5931\u8d25\uff0c\u7a0d\u540e\u91cd\u8bd5\", ip));                        log.warn(String.format(\"Failed when sending delete command to node %s, try again later\", ip));                    } catch (Exception e) {                        // log.warn(String.format(\"\u7ed9\u8282\u70b9 %s \u53d1\u9001\u79fb\u9664\u547d\u4ee4\u5f02\u5e38\uff0c\u7a0d\u540e\u91cd\u8bd5\", ip), e);                        log.warn(String.format(\"An exception occurred while sending a remove command to node %s, try again later\", ip), e);                        e.printStackTrace();                    }                    try {                        Thread.sleep(5000);                    } catch (Exception e) {                        e.printStackTrace();                    }                } while (true);            }        }        //\u5c06\u4e3b\u8282\u70b9\u76f8\u5173\u8bc1\u4e66\u5220\u9664        // log.info(\"\u5c06\u4e3b\u8282\u70b9\u76f8\u5173\u8bc1\u4e66\u5220\u9664\");        log.info(\"Delete the certificate of the master node\");        fileService.removeCertFile(RoleEnum.PEER, configEntity, removedPeerHostConfig, true);        // \u66f4\u65b0\u672c\u5730\u6570\u636e\u5e93        // log.info(\"\u5c06\u5df2\u79fb\u9664\u7684 peer(s) \u8282\u70b9\u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664\");        log.info(\"Delete the removed peer(s) node from the database\");        // \u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664        for (String host : removedPeerHostConfig.keySet()) {            String ip = removedPeerHostConfig.get(host);            int index = ip.lastIndexOf(\":\");            String port = ip.substring(index + 1);            ip = ip.substring(0, index);            NodeDO nodeDO = new NodeDO();            nodeDO.setRole(RoleEnum.PEER);            nodeDO.setOrgMspId(configEntity.getOrgMSPID());            nodeDO.setHostName(host);            nodeDO.setIp(ip);            nodeDO.setPort(Integer.parseInt(port));            try {                this.checkPointDb.deleteNodeRecord(nodeDO);            } catch (SQLException e) {                // log.error(String.format(\"\u5c06\u8282\u70b9 %s \u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664\u5f02\u5e38\", host), e);                log.error(String.format(\"An exception occurred while deleting node %s from the database\", host), e);                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/PeerRemoveBiz.java", "stars": "7", "class": {"name": "PeerRemoveBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //3.\u521b\u5efaThread\u7c7b\u7684\u5b50\u7c7b\u5bf9\u8c61        MyThread mt = new MyThread();        //4.\u8c03\u7528Thread\u7c7b\u4e2d\u7684\u65b9\u6cd5start\u65b9\u6cd5,\u5f00\u542f\u65b0\u7684\u7ebf\u7a0b,\u6267\u884crun\u65b9\u6cd5        mt.start();        for (int i = 0; i <20 ; i++) {            System.out.println(\"main:\"+i);        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/05_ExceptionAndThread/src/com/itheima/demo06/Thread/Demo01Thread.java", "stars": "2", "class": {"name": "Demo01Thread", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startElement", "params": ["String", "String", "String", "Attributes"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void startElement(String uri, String localName, String qName, final Attributes attributes) throws SAXException {        if (qName.equalsIgnoreCase(APP)) {            final int index = attributes.getIndex(ID);            if ( index != -1 ) {                appInfo = new AppInfo() {{                    setId(attributes.getValue(index));                }};            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/roku/RokuApplicationListParser.java", "stars": "4", "class": {"name": "RokuApplicationListParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "endElement", "params": ["String", "String", "String"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void endElement(String uri, String localName, String qName) throws SAXException {        if (qName.equalsIgnoreCase(APP)) {            appInfo.setName(value);            appList.add(appInfo);        }        value = null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/roku/RokuApplicationListParser.java", "stars": "4", "class": {"name": "RokuApplicationListParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "characters", "params": ["char", "int", "int"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void characters(char[] ch, int start, int length) throws SAXException {        value = new String(ch, start, length);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/roku/RokuApplicationListParser.java", "stars": "4", "class": {"name": "RokuApplicationListParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getApplicationList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<AppInfo>", "snippet": "    public List<AppInfo> getApplicationList() {        return appList;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/roku/RokuApplicationListParser.java", "stars": "4", "class": {"name": "RokuApplicationListParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        File file = new File(\"/Users/chengcheng/Desktop/test/abc\");        getAllFile(file);    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/java2/File/FileFilter2.java", "stars": "2", "class": {"name": "FileFilter2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllFile", "params": ["File"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void getAllFile(File dir){        //System.out.println(dir);//\u6253\u5370\u88ab\u904d\u5386\u7684\u76ee\u5f55\u7ed3\u6784        //File[] files = dir.listFiles(new FileFilterImpl());//        File[] files = dir.listFiles(new FileFilter() {//            @Override//            public boolean accept(File pathname) {//                //\u8fc7\u6ee4\u89c4\u5219\uff0c\u662f\u6587\u4ef6\u5939\u6216\u8005.java\u7ed3\u5c3e\uff0c\u8fd4\u56detrue//                return pathname.isDirectory() || pathname.getName().toLowerCase().endsWith(\".java\");//            }//        });//        File[] files = dir.listFiles(new FilenameFilter() {//            @Override//            public boolean accept(File dir, String name) {//                //\u8fc7\u6ee4\u89c4\u5219\uff0c\u662f\u6587\u4ef6\u5939\u6216\u8005.java\u7ed3\u5c3e\uff0c\u8fd4\u56detrue//                return new File(dir, name).isDirectory() || name.toLowerCase().endsWith(\".java\");//            }//        });        //\u4f7f\u7528 Lambda \u8868\u8fbe\u5f0f\u4f18\u5316        File[] files = dir.listFiles((d, name)-> new File(d, name).isDirectory() || name.toLowerCase().endsWith(\".java\"));        for (File f : files){            //\u5224\u65ad\u662f\u5426\u6587\u4ef6\u5939            if(f.isDirectory()){                //\u662f\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u8c03\u7528\u81ea\u5df1                getAllFile(f);            }else{                System.out.println(f);            }        }    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/java2/File/FileFilter2.java", "stars": "2", "class": {"name": "FileFilter2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createProxyFactory", "params": [], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "  static void createProxyFactory() {    proxyFactory = new JavassistProxyFactory();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/loader/JavassistProxyTest.java", "stars": "15", "class": {"name": "JavassistProxyTest", "extends": "SerializableProxyTest", "implements": null, "modifiers": []}}, {"method_name": "shouldCreateAProxyForAPartiallyLoadedBean", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldCreateAProxyForAPartiallyLoadedBean() throws Exception {    ResultLoaderMap loader = new ResultLoaderMap();    loader.addLoader(\"id\", null, null);    Object proxy = proxyFactory.createProxy(author, loader, new Configuration(), new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>());    Author author2 = (Author) deserialize(serialize((Serializable) proxy));    assertTrue(author2 instanceof Proxy);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/loader/JavassistProxyTest.java", "stars": "15", "class": {"name": "JavassistProxyTest", "extends": "SerializableProxyTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFailCallingAnUnloadedProperty", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailCallingAnUnloadedProperty() {    // yes, it must go in uppercase    HashMap<String, ResultLoaderMap.LoadPair> unloadedProperties = new HashMap<> ();    unloadedProperties.put(\"ID\", null);    Author author2 = (Author) ((JavassistProxyFactory)proxyFactory).createDeserializationProxy(author, unloadedProperties, new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>());    Assertions.assertThrows(ExecutorException.class, author2::getId);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/loader/JavassistProxyTest.java", "stars": "15", "class": {"name": "JavassistProxyTest", "extends": "SerializableProxyTest", "implements": null, "modifiers": []}}, {"method_name": "shouldLetCallALoadedProperty", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldLetCallALoadedProperty() {    Author author2 = (Author) ((JavassistProxyFactory)proxyFactory).createDeserializationProxy(author, new HashMap<>(), new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>());    assertEquals(999, author2.getId());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/loader/JavassistProxyTest.java", "stars": "15", "class": {"name": "JavassistProxyTest", "extends": "SerializableProxyTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSerizalizeADeserlizaliedProxy", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldSerizalizeADeserlizaliedProxy() throws Exception {    Object proxy = ((JavassistProxyFactory)proxyFactory).createDeserializationProxy(author, new HashMap<> (), new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>());    Author author2 = (Author) deserialize(serialize((Serializable) proxy));    assertEquals(author, author2);    assertNotEquals(author.getClass(), author2.getClass());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/loader/JavassistProxyTest.java", "stars": "15", "class": {"name": "JavassistProxyTest", "extends": "SerializableProxyTest", "implements": null, "modifiers": []}}, {"method_name": "prepareTempDir", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void prepareTempDir() {    if (!this.tempDir.exists()) {      this.tempDir.mkdirs();    }    checkArgument(this.tempDir.isDirectory());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/StorageManager.java", "stars": "18", "class": {"name": "StorageManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "uploadProject", "params": ["Project", "int", "File", "User"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void uploadProject(      final Project project,      final int version,      final File localFile,      final User uploader) {    byte[] md5 = null;    if (!(this.storage instanceof DatabaseStorage)) {      md5 = computeHash(localFile);    }    final StorageMetadata metadata = new StorageMetadata(        project.getId(),        version,        uploader.getUserId(),        md5);    log.info(String.format(\"Adding archive to storage. Meta:%s File: %s[%d bytes]\",        metadata, localFile.getName(), localFile.length()));    String resourceId = null;    /* upload to storage */    resourceId = this.storage.put(metadata, localFile);    /* Add metadata to db */    // TODO spyne: remove hack. Database storage should go through the same flow    if (!(this.storage instanceof DatabaseStorage)) {      this.projectLoader.addProjectVersion(          project.getId(),          version,          localFile,          uploader.getUserId(),          requireNonNull(md5),          requireNonNull(resourceId)      );      log.info(String.format(\"Added project metadata to DB. Meta:%s File: %s[%d bytes] URI: %s\",          metadata, localFile.getName(), localFile.length(), resourceId));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/StorageManager.java", "stars": "18", "class": {"name": "StorageManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cleanupProjectArtifacts", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void cleanupProjectArtifacts(final int projectId) {    try {      this.storageCleaner.cleanupProjectArtifacts(projectId);    } catch (final Exception e) {      log.error(\"Error occured during cleanup. Ignoring and continuing...\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/StorageManager.java", "stars": "18", "class": {"name": "StorageManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "computeHash", "params": ["File"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "  private byte[] computeHash(final File localFile) {    final byte[] md5;    try {      md5 = Md5Hasher.md5Hash(localFile);    } catch (final IOException e) {      throw new StorageException(e);    }    return md5;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/StorageManager.java", "stars": "18", "class": {"name": "StorageManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectFile", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "ProjectFileHandler", "snippet": "  public ProjectFileHandler getProjectFile(final int projectId, final int version) {    log.info(        String.format(\"Fetching project file. project ID: %d version: %d\", projectId, version));    // TODO spyne: remove huge hack ! There should not be any special handling for Database Storage.    if (this.storage instanceof DatabaseStorage) {        return ((DatabaseStorage) this.storage).get(projectId, version);    } else {        /* Fetch meta data from db */        final ProjectFileHandler pfh = this.projectLoader.fetchProjectMetaData(projectId, version);        /* Fetch project file from storage and copy to local file */        final String resourceId = requireNonNull(pfh.getResourceId(),                String.format(\"URI is null. project ID: %d version: %d\",                        pfh.getProjectId(), pfh.getVersion()));        return getProjectFileFromFileSystem(pfh, () -> this.storage.get(resourceId));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/StorageManager.java", "stars": "18", "class": {"name": "StorageManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectFileFromFileSystem", "params": ["ProjectFileHandler", "CheckedSupplier<InputStream,IOException>"], "throws": null, "modifiers": ["private"], "return_type": "ProjectFileHandler", "snippet": "  private ProjectFileHandler getProjectFileFromFileSystem(ProjectFileHandler pfh, CheckedSupplier<InputStream, IOException> supplier) {    try (InputStream is = supplier.get()) {      final File file = createTempOutputFile(pfh);      /* Copy from storage to output stream */      try (FileOutputStream fos = new FileOutputStream(file)) {          IOUtils.copy(is, fos);      }      /* Validate checksum */      validateChecksum(file, pfh);      /* Attach file to handler */      pfh.setLocalFile(file);      return pfh;    } catch (final IOException e) {      throw new StorageException(e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/StorageManager.java", "stars": "18", "class": {"name": "StorageManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateChecksum", "params": ["File", "ProjectFileHandler"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void validateChecksum(final File file, final ProjectFileHandler pfh) throws IOException {    final byte[] hash = Md5Hasher.md5Hash(file);    checkState(Arrays.equals(pfh.getMd5Hash(), hash),        String.format(\"MD5 HASH Failed. project ID: %d version: %d Expected: %s Actual: %s\",            pfh.getProjectId(), pfh.getVersion(),            new String(pfh.getMd5Hash(), StandardCharsets.UTF_8),            new String(hash, StandardCharsets.UTF_8))    );  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/StorageManager.java", "stars": "18", "class": {"name": "StorageManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createTempOutputFile", "params": ["ProjectFileHandler"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "File", "snippet": "  private File createTempOutputFile(final ProjectFileHandler projectFileHandler)      throws IOException {    return File.createTempFile(        projectFileHandler.getFileName(),        String.valueOf(projectFileHandler.getVersion()), this.tempDir);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/StorageManager.java", "stars": "18", "class": {"name": "StorageManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setTitle(@StringRes int id) {            return setTitle(getString(id));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/PayPasswordDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setTitle", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setTitle(CharSequence title) {            mTitleView.setText(title);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/PayPasswordDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setSubTitle", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setSubTitle(@StringRes int id) {            return setSubTitle(getString(id));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/PayPasswordDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setSubTitle", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setSubTitle(CharSequence subTitle) {            mSubTitleView.setText(subTitle);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/PayPasswordDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setMoney", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setMoney(@StringRes int id) {            return setSubTitle(getString(id));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/PayPasswordDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setMoney", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setMoney(CharSequence money) {            mMoneyView.setText(money);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/PayPasswordDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setAutoDismiss", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setAutoDismiss(boolean dismiss) {            mAutoDismiss = dismiss;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/PayPasswordDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setListener", "params": ["OnListener"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setListener(OnListener listener) {            mListener = listener;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/PayPasswordDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onItemClick", "params": ["RecyclerView", "View", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onItemClick(RecyclerView recyclerView, View itemView, int position) {            switch (mAdapter.getItemViewType(position)) {                case KeyboardAdapter.TYPE_DELETE:                    // \u70b9\u51fb\u56de\u9000\u6309\u94ae\u5220\u9664                    if (mRecordList.size() != 0) {                        mRecordList.removeLast();                    }                    break;                case KeyboardAdapter.TYPE_EMPTY:                    // \u70b9\u51fb\u7a7a\u767d\u7684\u5730\u65b9\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c                    break;                default:                    // \u5224\u65ad\u5bc6\u7801\u662f\u5426\u5df2\u7ecf\u8f93\u5165\u5b8c\u6bd5                    if (mRecordList.size() < PasswordView.PASSWORD_COUNT) {                        // \u70b9\u51fb\u6570\u5b57\uff0c\u663e\u793a\u5728\u5bc6\u7801\u884c                        mRecordList.add(KEYBOARD_TEXT[position]);                    }                    // \u5224\u65ad\u5bc6\u7801\u662f\u5426\u5df2\u7ecf\u8f93\u5165\u5b8c\u6bd5                    if (mRecordList.size() == PasswordView.PASSWORD_COUNT) {                        if (mListener != null) {                            postDelayed(() -> {                                if (mAutoDismiss) {                                    dismiss();                                }                                // \u83b7\u53d6\u8f93\u5165\u7684\u652f\u4ed8\u5bc6\u7801                                StringBuilder password = new StringBuilder();                                for (String s : mRecordList) {                                    password.append(s);                                }                                mListener.onCompleted(getDialog(), password.toString());                            }, 300);                        }                    }                    break;            }            mPasswordView.setPassWordLength(mRecordList.size());        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/PayPasswordDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onClick(View v) {            if (v == mCloseView) {                if (mAutoDismiss) {                    dismiss();                }                if (mListener != null) {                    mListener.onCancel(getDialog());                }            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/PayPasswordDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "getItemViewType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getItemViewType(int position) {            switch (position) {                case 9:                    return TYPE_EMPTY;                case 11:                    return TYPE_DELETE;                default:                    return TYPE_NORMAL;            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/PayPasswordDialog.java", "stars": "1", "class": {"name": "KeyboardAdapter", "extends": "MyAdapter", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "MyAdapter", "snippet": "        public MyAdapter.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {            switch (viewType) {                case TYPE_DELETE:                    return new MyAdapter.SimpleHolder(R.layout.item_pay_password_delete);                case TYPE_EMPTY:                    return new MyAdapter.SimpleHolder(R.layout.item_pay_password_empty);                default:                    return new KeyboardAdapter.ViewHolder();            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/PayPasswordDialog.java", "stars": "1", "class": {"name": "KeyboardAdapter", "extends": "MyAdapter", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "generateDefaultLayoutManager", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "RecyclerView", "snippet": "        protected RecyclerView.LayoutManager generateDefaultLayoutManager(Context context) {            return new GridLayoutManager(getContext(), 3);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/PayPasswordDialog.java", "stars": "1", "class": {"name": "KeyboardAdapter", "extends": "MyAdapter", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "onBindView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void onBindView(int position) {                mTextView.setText(getItem(position));            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/PayPasswordDialog.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "MyAdapter", "implements": null, "modifiers": ["final"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() {        ClientForwardController clientForwardController = new ClientForwardController();        this.restMockMvc = MockMvcBuilders            .standaloneSetup(clientForwardController, new TestController())            .build();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/ClientForwardControllerIT.java", "stars": "2", "class": {"name": "ClientForwardControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBackendEndpoint", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getBackendEndpoint() throws Exception {        restMockMvc.perform(get(\"/test\"))            .andExpect(status().isOk())            .andExpect(content().contentTypeCompatibleWith(MediaType.TEXT_PLAIN_VALUE))            .andExpect(content().string(\"test\"));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/ClientForwardControllerIT.java", "stars": "2", "class": {"name": "ClientForwardControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClientEndpoint", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getClientEndpoint() throws Exception {        ResultActions perform = restMockMvc.perform(get(\"/non-existant-mapping\"));        perform            .andExpect(status().isOk())            .andExpect(forwardedUrl(\"/\"));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/ClientForwardControllerIT.java", "stars": "2", "class": {"name": "ClientForwardControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNestedClientEndpoint", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getNestedClientEndpoint() throws Exception {        restMockMvc.perform(get(\"/admin/user-management\"))            .andExpect(status().isOk())            .andExpect(forwardedUrl(\"/\"));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/ClientForwardControllerIT.java", "stars": "2", "class": {"name": "ClientForwardControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String test() {            return \"test\";        }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/ClientForwardControllerIT.java", "stars": "2", "class": {"name": "TestController", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPosition", "params": ["int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "Position", "snippet": "  private static Position getPosition(int pos, int[] lineStarts) {    int line = Arrays.binarySearch(lineStarts, pos);    if (line < 0) {      int insertion_point = -1 * line - 1;      line = insertion_point - 1;    }    return new Position(line, pos - lineStarts[line]);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/DocumentPositionCalculator.java", "stars": "3", "class": {"name": "DocumentPositionCalculator", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getLineStartPositions", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "int", "snippet": "  private static int[] getLineStartPositions(String text) {    ArrayList<Integer> lineStartPositions = new ArrayList<>();    lineStartPositions.add(0);    for (int i = 0; i < text.length(); i++) {      char c = text.charAt(i);      if (c == '\\r') {        if (i + 1 < text.length() && text.charAt(i + 1) == '\\n') {          i++;        }        lineStartPositions.add(i + 1);      } else if (c == '\\n') {        lineStartPositions.add(i + 1);      }    }    return lineStartPositions.stream().mapToInt(i -> i).toArray();  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/DocumentPositionCalculator.java", "stars": "3", "class": {"name": "DocumentPositionCalculator", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getPosition", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Position", "snippet": "  public Position getPosition(int pos) {    return getPosition(pos, lineStartPositions);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/DocumentPositionCalculator.java", "stars": "3", "class": {"name": "DocumentPositionCalculator", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getUserCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getUserCount() {        return userMap.size();    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageRoom.java", "stars": "2", "class": {"name": "StageRoom", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getUserList() {        List<String> users = new ArrayList<>();        for (Map.Entry<String, UserBo> kv : userMap.entrySet()) {            users.add(kv.getKey());        }        return users;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageRoom.java", "stars": "2", "class": {"name": "StageRoom", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "processMessage", "params": ["MessageDto", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void processMessage(MessageDto messageDto, String sendFrom) {        switch (messageDto.getMessageType()) {            case UPDATE_TANK_CONTROL:                processTankControl(messageDto, sendFrom);                break;            case UPDATE_TANK_FIRE:                processTankFire(sendFrom);                break;            default:                break;        }    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageRoom.java", "stars": "2", "class": {"name": "StageRoom", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "processTankFire", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void processTankFire(String sendFrom) {        if (!tankMap.containsKey(sendFrom)) {            return;        }        TankBo tankBo = tankMap.get(sendFrom);        AmmoBo ammo = tankBo.fire();        if (ammo == null) {            return;        }        //\u540c\u6b65\u6d88\u606f        sendRoomMessage(Collections.singletonList(ItemDto.convert(ammo)), MessageType.AMMO);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageRoom.java", "stars": "2", "class": {"name": "StageRoom", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void update() {        for (Map.Entry<String, TankBo> kv : tankMap.entrySet()) {            TankBo tankBo = kv.getValue();            if (tankBo.getActionType() == ActionType.RUN) {                double tankSpeed = tankBo.getType().getSpeed();                switch (tankBo.getOrientationType()) {                    case UP:                        tankBo.setY(tankBo.getY() - tankSpeed);                        break;                    case DOWN:                        tankBo.setY(tankBo.getY() + tankSpeed);                        break;                    case LEFT:                        tankBo.setX(tankBo.getX() - tankSpeed);                        break;                    case RIGHT:                        tankBo.setX(tankBo.getX() + tankSpeed);                        break;                    default:                        break;                }            }        }    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageRoom.java", "stars": "2", "class": {"name": "StageRoom", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void remove(String username) {        if (!userMap.containsKey(username)) {            return;        }        userMap.remove(username);        removeTankFromUserId(username);        if (getUserCount() == 0) {            return;        }        sendStatusAndMessage(username, true);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageRoom.java", "stars": "2", "class": {"name": "StageRoom", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "sendStatusAndMessage", "params": ["String", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendStatusAndMessage(String username, boolean leave) {        sendRoomMessage(getUserList(), MessageType.USERS);        String message;        if (leave) {            message = String.format(\"%s \u79bb\u5f00\u4e86\u623f\u95f4 %s,\u5f53\u524d\u623f\u95f4\u4eba\u6570: %d\", username, roomId, getUserCount());        } else {            message = String.format(\"%s \u52a0\u5165\u4e86\u623f\u95f4 %s,\u5f53\u524d\u623f\u95f4\u4eba\u6570: %d\", username, roomId, getUserCount());        }        messageService.sendMessage(new MessageDto(message, MessageType.SYSTEM_MESSAGE));    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageRoom.java", "stars": "2", "class": {"name": "StageRoom", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["UserBo", "TeamType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void add(UserBo userBo, TeamType teamType) {        userMap.put(userBo.getUsername(), userBo);        userBo.setRoomId(this.roomId);        userBo.setTeamType(teamType);        sendStatusAndMessage(userBo.getUsername(), false);        addNewTank(userBo.getUsername());        //\u901a\u77e5\u524d\u7aef\u6570\u636e\u4f20\u8f93\u5b8c\u6bd5        messageService.sendReady(userBo.getUsername());    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageRoom.java", "stars": "2", "class": {"name": "StageRoom", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "addNewTank", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addNewTank(String username) {        TankBo tankBo = new TankBo();        tankBo.setTankId(username);        tankBo.setType(TankTypeBo.getTankType(\"tank01\"));        tankBo.setX(100.0);        tankBo.setY(100.0);        tankMap.put(tankBo.getTankId(), tankBo);        //\u5373\u5c06\u5411\u6240\u6709\u4eba\u540c\u6b65\u4fe1\u606f        sendRoomMessage(getTankList(), MessageType.TANKS);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageRoom.java", "stars": "2", "class": {"name": "StageRoom", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTankList", "params": [], "throws": null, "modifiers": ["private"], "return_type": "List<ItemDto>", "snippet": "    private List<ItemDto> getTankList() {        List<ItemDto> tankDtoList = new ArrayList<>();        for (Map.Entry<String, TankBo> kv : tankMap.entrySet()) {            tankDtoList.add(ItemDto.convert(kv.getValue()));        }        return tankDtoList;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageRoom.java", "stars": "2", "class": {"name": "StageRoom", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "processTankControl", "params": ["MessageDto", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void processTankControl(MessageDto messageDto, String sendFrom) {        ItemDto request = ObjectUtil.readValue(messageDto.getMessage(), ItemDto.class);        if (request == null) {            return;        }        request.setId(sendFrom);        TankBo updateBo = updateTankControl(request);        if (updateBo == null) {            log.warn(\"can not update tank:{}, ignore it...\", sendFrom);            return;        }        ItemDto response = ItemDto.convert(updateBo);        sendRoomMessage(Collections.singletonList(response), MessageType.TANKS);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageRoom.java", "stars": "2", "class": {"name": "StageRoom", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateTankControl", "params": ["ItemDto"], "throws": null, "modifiers": ["private"], "return_type": "TankBo", "snippet": "    private TankBo updateTankControl(ItemDto tankDto) {        if (!tankMap.containsKey(tankDto.getId())) {            return null;        }        TankBo tankBo = tankMap.get(tankDto.getId());        //\u72b6\u6001\u53ea\u540c\u6b65\u671d\u5411\u548c\u79fb\u52a8\u547d\u4ee4        OrientationType orientationType = OrientationType.convert(tankDto.getOrientation());        if (orientationType != OrientationType.UNKNOWN) {            tankBo.setOrientationType(orientationType);        }        ActionType actionType = ActionType.convert(tankDto.getAction());        if (actionType != ActionType.UNKNOWN) {            tankBo.setActionType(actionType);        }        return tankBo;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageRoom.java", "stars": "2", "class": {"name": "StageRoom", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItems", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Material", "snippet": "\tpublic static Material[] getItems(String typeItem) {\t\t\t\t\tJSONArray arrTemp = (JSONArray) Principal.CONFIG.get(typeItem);\t\t\t    ArrayList<Material> materiais = new ArrayList<Material>();\t    \t\tfor (int i = 0; i < arrTemp.length(); i++) {\t\t\tmateriais.add(Material.getMaterial((String) arrTemp.get(i)));\t\t}\t\treturn materiais.toArray(new Material[0]);\t}", "url": "https://raw.githubusercontent.com/argoninc/Whitelist_Craft_Place/master/src/main/java/com/github/argoninc/Listener/WhitelistBlock.java", "stars": "2", "class": {"name": "WhitelistBlock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValidCraft", "params": ["Material"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isValidCraft(Material item) {\t\t\t\tMaterial[] proib = getItems(\"craft\");\t\t\t\tfor(Material m: proib) {\t\t\tif(item.equals(m)) { \t\t\t\treturn false;\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/argoninc/Whitelist_Craft_Place/master/src/main/java/com/github/argoninc/Listener/WhitelistBlock.java", "stars": "2", "class": {"name": "WhitelistBlock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValidPlace", "params": ["Material"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isValidPlace(Material item) {\t\t\t\tMaterial[] proib = getItems(\"place\");\t\t\t\tfor(Material m: proib) {\t\t\tif(item.equals(m)) { \t\t\t\treturn false;\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/argoninc/Whitelist_Craft_Place/master/src/main/java/com/github/argoninc/Listener/WhitelistBlock.java", "stars": "2", "class": {"name": "WhitelistBlock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValidUse", "params": ["Material"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isValidUse(Material item) {\t\t\t\tMaterial[] proib = getItems(\"use\");\t\t\t\tfor(Material m: proib) {\t\t\tif(item.equals(m)) { \t\t\t\treturn false;\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/argoninc/Whitelist_Craft_Place/master/src/main/java/com/github/argoninc/Listener/WhitelistBlock.java", "stars": "2", "class": {"name": "WhitelistBlock", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createQRCode", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Bitmap", "snippet": "    public static Bitmap createQRCode(String text) {        return createQRCode(text, 150);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/util/QRCodeUtil.java", "stars": "1", "class": {"name": "QRCodeUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createQRCode", "params": ["String", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Bitmap", "snippet": "    public static Bitmap createQRCode(String text, int size) {        try {            Hashtable<EncodeHintType, Object> hints = new Hashtable<>();            hints.put(EncodeHintType.CHARACTER_SET, \"utf-8\");            hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);            hints.put(EncodeHintType.MARGIN, 1);            BitMatrix bitMatrix = new QRCodeWriter().encode(text,                    BarcodeFormat.QR_CODE, size, size, hints);            int[] pixels = new int[size * size];            for (int y = 0; y < size; y++) {                for (int x = 0; x < size; x++) {                    if (bitMatrix.get(x, y)) {                        pixels[y * size + x] = 0xff000000;                    } else {                        pixels[y * size + x] = 0xffffffff;                    }                }            }            Bitmap bitmap = Bitmap.createBitmap(size, size,                    Bitmap.Config.ARGB_8888);            bitmap.setPixels(pixels, 0, size, 0, 0, size, size);            return bitmap;        } catch (WriterException e) {            e.printStackTrace();            return null;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/util/QRCodeUtil.java", "stars": "1", "class": {"name": "QRCodeUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createQRCodeWithLogo", "params": ["String", "Bitmap"], "throws": null, "modifiers": ["public", "static"], "return_type": "Bitmap", "snippet": "    public static Bitmap createQRCodeWithLogo(String text, Bitmap mBitmap) {        return createQRCodeWithLogo(text, 500, mBitmap);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/util/QRCodeUtil.java", "stars": "1", "class": {"name": "QRCodeUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createQRCodeWithLogo", "params": ["String", "int", "Bitmap"], "throws": null, "modifiers": ["public", "static"], "return_type": "Bitmap", "snippet": "    public static Bitmap createQRCodeWithLogo(String text, int size, Bitmap mBitmap) {        try {            IMAGE_HALFWIDTH = size / 10;            Hashtable<EncodeHintType, Object> hints = new Hashtable<>();            hints.put(EncodeHintType.CHARACTER_SET, \"utf-8\");            /*             * \u8bbe\u7f6e\u5bb9\u9519\u7ea7\u522b\uff0c\u9ed8\u8ba4\u4e3aErrorCorrectionLevel.L             * \u56e0\u4e3a\u4e2d\u95f4\u52a0\u5165logo\u6240\u4ee5\u5efa\u8bae\u4f60\u628a\u5bb9\u9519\u7ea7\u522b\u8c03\u81f3H,\u5426\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u8bc6\u522b\u4e0d\u4e86             */            hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);            //\u8bbe\u7f6e\u7a7a\u767d\u8fb9\u8ddd\u7684\u5bbd\u5ea6            hints.put(EncodeHintType.MARGIN, 1); //default is 4            // \u56fe\u50cf\u6570\u636e\u8f6c\u6362\uff0c\u4f7f\u7528\u4e86\u77e9\u9635\u8f6c\u6362            BitMatrix bitMatrix = new QRCodeWriter().encode(text,                    BarcodeFormat.QR_CODE, size, size, hints);            int width = bitMatrix.getWidth();//\u77e9\u9635\u9ad8\u5ea6            int height = bitMatrix.getHeight();//\u77e9\u9635\u5bbd\u5ea6            int halfW = width / 2;            int halfH = height / 2;            Matrix m = new Matrix();            float sx = (float) 2 * IMAGE_HALFWIDTH / mBitmap.getWidth();            float sy = (float) 2 * IMAGE_HALFWIDTH                    / mBitmap.getHeight();            m.setScale(sx, sy);            //\u8bbe\u7f6e\u7f29\u653e\u4fe1\u606f            //\u5c06logo\u56fe\u7247\u6309martix\u8bbe\u7f6e\u7684\u4fe1\u606f\u7f29\u653e            mBitmap = Bitmap.createBitmap(mBitmap, 0, 0,                    mBitmap.getWidth(), mBitmap.getHeight(), m, false);            int[] pixels = new int[size * size];            for (int y = 0; y < size; y++) {                for (int x = 0; x < size; x++) {                    if (x > halfW - IMAGE_HALFWIDTH && x < halfW + IMAGE_HALFWIDTH                            && y > halfH - IMAGE_HALFWIDTH                            && y < halfH + IMAGE_HALFWIDTH) {                        //\u8be5\u4f4d\u7f6e\u7528\u4e8e\u5b58\u653e\u56fe\u7247\u4fe1\u606f                        //\u8bb0\u5f55\u56fe\u7247\u6bcf\u4e2a\u50cf\u7d20\u4fe1\u606f                        pixels[y * width + x] = mBitmap.getPixel(x - halfW                                + IMAGE_HALFWIDTH, y - halfH + IMAGE_HALFWIDTH);                    } else {                        if (bitMatrix.get(x, y)) {                            pixels[y * size + x] = 0xff000000;                        } else {                            pixels[y * size + x] = 0xffffffff;                        }                    }                }            }            Bitmap bitmap = Bitmap.createBitmap(size, size,                    Bitmap.Config.ARGB_8888);            bitmap.setPixels(pixels, 0, size, 0, 0, size, size);            return bitmap;        } catch (WriterException e) {            e.printStackTrace();            return null;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/util/QRCodeUtil.java", "stars": "1", "class": {"name": "QRCodeUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createQRImage", "params": ["Context", "String", "Bitmap"], "throws": null, "modifiers": ["public", "static"], "return_type": "Bitmap", "snippet": "    public static Bitmap createQRImage(Context context, String data, Bitmap logoBm) {        try {            if (data == null || \"\".equals(data)) {                return null;            }            int widthPix = ((Activity) context).getWindowManager().getDefaultDisplay()                    .getWidth();            widthPix = widthPix / 5 * 3;            int heightPix = widthPix;            //\u914d\u7f6e\u53c2\u6570            Map<EncodeHintType, Object> hints = new HashMap<EncodeHintType, Object>();            hints.put(EncodeHintType.CHARACTER_SET, \"utf-8\");            //\u5bb9\u9519\u7ea7\u522b            hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);            //\u8bbe\u7f6e\u7a7a\u767d\u8fb9\u8ddd\u7684\u5bbd\u5ea6            hints.put(EncodeHintType.MARGIN, 1); //default is 4            // \u56fe\u50cf\u6570\u636e\u8f6c\u6362\uff0c\u4f7f\u7528\u4e86\u77e9\u9635\u8f6c\u6362            BitMatrix bitMatrix = new QRCodeWriter().encode(data, BarcodeFormat.QR_CODE, widthPix, heightPix, hints);            int[] pixels = new int[widthPix * heightPix];            // \u4e0b\u9762\u8fd9\u91cc\u6309\u7167\u4e8c\u7ef4\u7801\u7684\u7b97\u6cd5\uff0c\u9010\u4e2a\u751f\u6210\u4e8c\u7ef4\u7801\u7684\u56fe\u7247\uff0c            // \u4e24\u4e2afor\u5faa\u73af\u662f\u56fe\u7247\u6a2a\u5217\u626b\u63cf\u7684\u7ed3\u679c            for (int y = 0; y < heightPix; y++) {                for (int x = 0; x < widthPix; x++) {                    if (bitMatrix.get(x, y)) {                        pixels[y * widthPix + x] = 0xff000000;                    } else {                        pixels[y * widthPix + x] = 0xffffffff;                    }                }            }            // \u751f\u6210\u4e8c\u7ef4\u7801\u56fe\u7247\u7684\u683c\u5f0f\uff0c\u4f7f\u7528ARGB_8888            Bitmap bitmap = Bitmap.createBitmap(widthPix, heightPix, Bitmap.Config.ARGB_8888);            bitmap.setPixels(pixels, 0, widthPix, 0, 0, widthPix, heightPix);            if (logoBm != null) {                bitmap = addLogo(bitmap, logoBm);            }            return bitmap;            //\u5fc5\u987b\u4f7f\u7528compress\u65b9\u6cd5\u5c06bitmap\u4fdd\u5b58\u5230\u6587\u4ef6\u4e2d\u518d\u8fdb\u884c\u8bfb\u53d6\u3002\u76f4\u63a5\u8fd4\u56de\u7684bitmap\u662f\u6ca1\u6709\u4efb\u4f55\u538b\u7f29\u7684\uff0c\u5185\u5b58\u6d88\u8017\u5de8\u5927\uff01            //return bitmap != null && bitmap.compress(Bitmap.CompressFormat.JPEG, 100, new FileOutputStream(filePath));        } catch (Exception e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/util/QRCodeUtil.java", "stars": "1", "class": {"name": "QRCodeUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addLogo", "params": ["Bitmap", "Bitmap"], "throws": null, "modifiers": ["private", "static"], "return_type": "Bitmap", "snippet": "    private static Bitmap addLogo(Bitmap src, Bitmap logo) {        if (src == null) {            return null;        }        if (logo == null) {            return src;        }        //\u83b7\u53d6\u56fe\u7247\u7684\u5bbd\u9ad8        int srcWidth = src.getWidth();        int srcHeight = src.getHeight();        int logoWidth = logo.getWidth();        int logoHeight = logo.getHeight();        if (srcWidth == 0 || srcHeight == 0) {            return null;        }        if (logoWidth == 0 || logoHeight == 0) {            return src;        }        //logo\u5927\u5c0f\u4e3a\u4e8c\u7ef4\u7801\u6574\u4f53\u5927\u5c0f\u76841/5        float scaleFactor = srcWidth * 1.0f / 5 / logoWidth;        Bitmap bitmap = Bitmap.createBitmap(srcWidth, srcHeight, Bitmap.Config.ARGB_8888);        try {            Canvas canvas = new Canvas(bitmap);            canvas.drawBitmap(src, 0, 0, null);            canvas.scale(scaleFactor, scaleFactor, srcWidth / 2, srcHeight / 2);            canvas.drawBitmap(logo, (srcWidth - logoWidth) / 2, (srcHeight - logoHeight) / 2, null);            canvas.save();            canvas.restore();        } catch (Exception e) {            bitmap = null;            e.getStackTrace();        }        return bitmap;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/util/QRCodeUtil.java", "stars": "1", "class": {"name": "QRCodeUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "skip", "params": ["long"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long skip(long n) throws IOException {\t\tlong totalBytesSkipped = 0L;\t\twhile (totalBytesSkipped < n) {\t\t\tlong bytesSkipped = in.skip(n - totalBytesSkipped);\t\t\tif (bytesSkipped == 0L) {\t\t\t\tint by_te = read();\t\t\t\tif (by_te < 0) {\t\t\t\t\tbreak; // we reached EOF\t\t\t\t} else {\t\t\t\t\tbytesSkipped = 1; // we read one byte\t\t\t\t}\t\t\t}\t\t\ttotalBytesSkipped += bytesSkipped;\t\t}\t\treturn totalBytesSkipped;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/FlushedInputStream.java", "stars": "74", "class": {"name": "FlushedInputStream", "extends": "FilterInputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "modelMapper", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ModelMapper", "snippet": "\tpublic ModelMapper modelMapper() {\t\treturn new ModelMapper();\t\t\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/core/ModelMapperConfig.java", "stars": "2", "class": {"name": "ModelMapperConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchLogs", "params": ["int", "String", "int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "LogData", "snippet": "  public LogData fetchLogs(final int execId, final String name, final int attempt,      final int startByte,      final int length) throws ExecutorManagerException {    final FetchLogsHandler handler = new FetchLogsHandler(startByte, length + startByte);    try {      return this.dbOperator.query(FetchLogsHandler.FETCH_LOGS, handler,          execId, name, attempt, startByte, startByte + length);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching logs \" + execId          + \" : \" + name, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionLogsDao.java", "stars": "18", "class": {"name": "ExecutionLogsDao", "extends": null, "implements": ["ExecutionLogsAdapter"], "modifiers": ["public"]}}, {"method_name": "getJobLogMaxSize", "params": ["int", "String", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "Long", "snippet": "  public Long getJobLogMaxSize(int execId, String jobName, int attempt) throws ExecutorManagerException {    final JobLogsOffsetHandler handler = new JobLogsOffsetHandler();    try {      return this.dbOperator.query(JobLogsOffsetHandler.FETCH_LOGS_MAX_SIZE, handler,          execId, jobName, attempt);    } catch (final SQLException e) {      throw new ExecutorManagerException(String.format(\"Error fetching job log max size, execId: %d, job: %s, attempt: %d .\", execId, jobName, attempt), e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionLogsDao.java", "stars": "18", "class": {"name": "ExecutionLogsDao", "extends": null, "implements": ["ExecutionLogsAdapter"], "modifiers": ["public"]}}, {"method_name": "uploadLogFile", "params": ["int", "String", "int", "File"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void uploadLogFile(final int execId, final String name, final int attempt,                            final File... files) throws ExecutorManagerException {    final SQLTransaction<Integer> transaction = transOperator -> {      uploadLogFile(transOperator, execId, name, attempt, files, this.defaultEncodingType);      transOperator.getConnection().commit();      return 1;    };    try {      this.dbOperator.transaction(transaction);    } catch (final SQLException e) {      logger.error(\"uploadLogFile failed.\", e);      throw new ExecutorManagerException(\"uploadLogFile failed.\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionLogsDao.java", "stars": "18", "class": {"name": "ExecutionLogsDao", "extends": null, "implements": ["ExecutionLogsAdapter"], "modifiers": ["public"]}}, {"method_name": "uploadLogFile", "params": ["DatabaseTransOperator", "int", "String", "int", "File", "EncodingType"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void uploadLogFile(final DatabaseTransOperator transOperator, final int execId,      final String name,      final int attempt, final File[] files, final EncodingType encType)      throws SQLException {    // 50K buffer... if logs are greater than this, we chunk.    // However, we better prevent large log files from being uploaded somehow    final byte[] buffer = new byte[50 * 1024];    int pos = 0;    int length = buffer.length;    int startByte = 0;    try {      for (int i = 0; i < files.length; ++i) {        final File file = files[i];        final BufferedInputStream bufferedStream =            new BufferedInputStream(new FileInputStream(file));        try {          int size = bufferedStream.read(buffer, pos, length);          while (size >= 0) {            if (pos + size == buffer.length) {              // Flush here.              uploadLogPart(transOperator, execId, name, attempt, startByte,                  startByte + buffer.length, encType, buffer, buffer.length);              pos = 0;              length = buffer.length;              startByte += buffer.length;            } else {              // Usually end of file.              pos += size;              length = buffer.length - pos;            }            size = bufferedStream.read(buffer, pos, length);          }        } finally {          IOUtils.closeQuietly(bufferedStream);        }      }      // Final commit of buffer.      if (pos > 0) {        uploadLogPart(transOperator, execId, name, attempt, startByte, startByte            + pos, encType, buffer, pos);      }    } catch (final SQLException e) {      logger.error(\"Error writing log part.\", e);      throw new SQLException(\"Error writing log part\", e);    } catch (final IOException e) {      logger.error(\"Error chunking.\", e);      throw new SQLException(\"Error chunking\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionLogsDao.java", "stars": "18", "class": {"name": "ExecutionLogsDao", "extends": null, "implements": ["ExecutionLogsAdapter"], "modifiers": ["public"]}}, {"method_name": "removeExecutionLogsByTime", "params": ["long"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int removeExecutionLogsByTime(final long millis)      throws ExecutorManagerException {    final String DELETE_BY_TIME =        \"DELETE FROM execution_logs WHERE upload_time < ?\";    try {      return this.dbOperator.update(DELETE_BY_TIME, millis);    } catch (final SQLException e) {      logger.error(\"delete execution logs failed\", e);      throw new ExecutorManagerException(          \"Error deleting old execution_logs before \" + millis, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionLogsDao.java", "stars": "18", "class": {"name": "ExecutionLogsDao", "extends": null, "implements": ["ExecutionLogsAdapter"], "modifiers": ["public"]}}, {"method_name": "uploadLogPart", "params": ["DatabaseTransOperator", "int", "String", "int", "int", "int", "EncodingType", "byte", "int"], "throws": ["SQLException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void uploadLogPart(final DatabaseTransOperator transOperator, final int execId,      final String name,      final int attempt, final int startByte, final int endByte,      final EncodingType encType,      final byte[] buffer, final int length)      throws SQLException, IOException {    final String INSERT_EXECUTION_LOGS = \"INSERT INTO execution_logs \"        + \"(exec_id, name, attempt, enc_type, start_byte, end_byte, \"        + \"log, upload_time) VALUES (?,?,?,?,?,?,?,?)\";    byte[] buf = buffer;    if (encType == EncodingType.GZIP) {      buf = GZIPUtils.gzipBytes(buf, 0, length);    } else if (length < buf.length) {      buf = Arrays.copyOf(buffer, length);    }    transOperator.update(INSERT_EXECUTION_LOGS, execId, name, attempt,        encType.getNumVal(), startByte, startByte + length, buf, DateTime.now()            .getMillis());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionLogsDao.java", "stars": "18", "class": {"name": "ExecutionLogsDao", "extends": null, "implements": ["ExecutionLogsAdapter"], "modifiers": ["public"]}}, {"method_name": "fetchAllLogs", "params": ["int", "String", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "LogData", "snippet": "  public LogData fetchAllLogs(final int execId, final String name, final int attempt) throws ExecutorManagerException {    final FetchAllLogsHandler handler = new FetchAllLogsHandler();    try {      final LogData result =          this.dbOperator.query(FetchAllLogsHandler.FETCH_LOGS, handler, execId, name, attempt);      return result;    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching logs \" + execId          + \" : \" + name, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionLogsDao.java", "stars": "18", "class": {"name": "ExecutionLogsDao", "extends": null, "implements": ["ExecutionLogsAdapter"], "modifiers": ["public"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "LogData", "snippet": "    public LogData handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return null;      }      final ByteArrayOutputStream byteStream = new ByteArrayOutputStream();      do {        // int execId = rs.getInt(1);        // String name = rs.getString(2);        final int attempt = rs.getInt(3);        final EncodingType encType = EncodingType.fromInteger(rs.getInt(4));        final int startByte = rs.getInt(5);        final int endByte = rs.getInt(6);        final byte[] data = rs.getBytes(7);        final int offset =            this.startByte > startByte ? this.startByte - startByte : 0;        final int length =            this.endByte < endByte ? this.endByte - startByte - offset                : endByte - startByte - offset;        try {          byte[] buffer = data;          if (encType == EncodingType.GZIP) {            buffer = GZIPUtils.unGzipBytes(data);          }          byteStream.write(buffer, offset, length);        } catch (final IOException e) {          throw new SQLException(e);        }      } while (rs.next());      final byte[] buffer = byteStream.toByteArray();      final Pair<Integer, Integer> result =          FileIOUtils.getUtf8Range(buffer, 0, buffer.length);      return new LogData(this.startByte + result.getFirst(), result.getSecond(),          new String(buffer, result.getFirst(), result.getSecond(), StandardCharsets.UTF_8));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionLogsDao.java", "stars": "18", "class": {"name": "FetchLogsHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long handle(final ResultSet rs) throws SQLException {      Long maxSize = 0L;      if (!rs.next()) {        return maxSize;      }      do {        maxSize = rs.getLong(1);      } while (rs.next());      return maxSize;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionLogsDao.java", "stars": "18", "class": {"name": "JobLogsOffsetHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "LogData", "snippet": "    public LogData handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return null;      }      final ByteArrayOutputStream byteStream = new ByteArrayOutputStream();      do {        // int execId = rs.getInt(1);        // String name = rs.getString(2);        // final int attempt = rs.getInt(3);        final EncodingType encType = EncodingType.fromInteger(rs.getInt(4));        final int startByte = rs.getInt(5);        final int endByte = rs.getInt(6);        final byte[] data = rs.getBytes(7);        final int offset = 0;        final int length = endByte - startByte;        try {          byte[] buffer = data;          if (encType == EncodingType.GZIP) {            buffer = GZIPUtils.unGzipBytes(data);          }          byteStream.write(buffer, offset, length);        } catch (final IOException e) {          throw new SQLException(e);        }      } while (rs.next());      final byte[] buffer = byteStream.toByteArray();      final Pair<Integer, Integer> result =          FileIOUtils.getUtf8Range(buffer, 0, buffer.length);      return new LogData(result.getFirst(), result.getSecond(),          new String(buffer, result.getFirst(), result.getSecond(), StandardCharsets.UTF_8));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionLogsDao.java", "stars": "18", "class": {"name": "FetchAllLogsHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "getXmlLocations", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String[] getXmlLocations() {        return xmlLocations;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8Properties.java", "stars": "2", "class": {"name": "S8Properties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setXmlLocations", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setXmlLocations(String[] xmlLocations) {        this.xmlLocations = xmlLocations;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8Properties.java", "stars": "2", "class": {"name": "S8Properties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEnableRefresh", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEnableRefresh() {        return enableRefresh;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8Properties.java", "stars": "2", "class": {"name": "S8Properties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEnableRefresh", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEnableRefresh(boolean enableRefresh) {        this.enableRefresh = enableRefresh;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8Properties.java", "stars": "2", "class": {"name": "S8Properties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isMapUnderscoreToCamelCase", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isMapUnderscoreToCamelCase() {        return mapUnderscoreToCamelCase;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8Properties.java", "stars": "2", "class": {"name": "S8Properties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMapUnderscoreToCamelCase", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMapUnderscoreToCamelCase(boolean mapUnderscoreToCamelCase) {        this.mapUnderscoreToCamelCase = mapUnderscoreToCamelCase;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8Properties.java", "stars": "2", "class": {"name": "S8Properties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isBanner", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isBanner() {        return banner;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8Properties.java", "stars": "2", "class": {"name": "S8Properties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBanner", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBanner(boolean banner) {        this.banner = banner;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8Properties.java", "stars": "2", "class": {"name": "S8Properties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageConfig", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PageConfig", "snippet": "    public PageConfig getPageConfig() {        return pageConfig;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8Properties.java", "stars": "2", "class": {"name": "S8Properties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPageConfig", "params": ["PageConfig"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageConfig(PageConfig pageConfig) {        this.pageConfig = pageConfig;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8Properties.java", "stars": "2", "class": {"name": "S8Properties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isThrowException", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isThrowException() {        return throwException;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8Properties.java", "stars": "2", "class": {"name": "S8Properties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setThrowException", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setThrowException(boolean throwException) {        this.throwException = throwException;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss-spring-boot-starter/master/src/main/java/org/ssssssss/spring/boot/starter/S8Properties.java", "stars": "2", "class": {"name": "S8Properties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInformation", "params": ["ItemStack", "World"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String getInformation(ItemStack stack, World worldIn) {        return I18n.format(\"info.item.\" + registryName);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Item/PhaseItemBase.java", "stars": "2", "class": {"name": "PhaseItemBase", "extends": "Item", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInformationBrief", "params": ["ItemStack", "World"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String getInformationBrief(ItemStack stack, World worldIn) {        return I18n.format(\"info.item.brief.\" + registryName);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Item/PhaseItemBase.java", "stars": "2", "class": {"name": "PhaseItemBase", "extends": "Item", "implements": null, "modifiers": ["public"]}}, {"method_name": "addInformation", "params": ["ItemStack", "World", "List<String>", "ITooltipFlag"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void addInformation(ItemStack stack, @Nullable World worldIn, List<String> tooltip, ITooltipFlag flagIn) {        super.addInformation(stack, worldIn, tooltip, flagIn);        if (GuiScreen.isShiftKeyDown()) {            if (!getInformation(stack, worldIn).isEmpty()) {                tooltip.add(getInformation(stack, worldIn));            }        } else {            if (!getInformationBrief(stack, worldIn).isEmpty()) {                tooltip.add(getInformationBrief(stack, worldIn));            }            if (!getInformation(stack, worldIn).isEmpty())                tooltip.add(I18n.format(\"phase.help.shiftDown\"));        }    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Item/PhaseItemBase.java", "stars": "2", "class": {"name": "PhaseItemBase", "extends": "Item", "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetCurrentUserLogin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetCurrentUserLogin() {        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken(\"admin\", \"admin\"));        SecurityContextHolder.setContext(securityContext);        Optional<String> login = SecurityUtils.getCurrentUserLogin();        assertThat(login).contains(\"admin\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/security/SecurityUtilsUnitTest.java", "stars": "2", "class": {"name": "SecurityUtilsUnitTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testgetCurrentUserJWT", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testgetCurrentUserJWT() {        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken(\"admin\", \"token\"));        SecurityContextHolder.setContext(securityContext);        Optional<String> jwt = SecurityUtils.getCurrentUserJWT();        assertThat(jwt).contains(\"token\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/security/SecurityUtilsUnitTest.java", "stars": "2", "class": {"name": "SecurityUtilsUnitTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testIsAuthenticated", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testIsAuthenticated() {        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken(\"admin\", \"admin\"));        SecurityContextHolder.setContext(securityContext);        boolean isAuthenticated = SecurityUtils.isAuthenticated();        assertThat(isAuthenticated).isTrue();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/security/SecurityUtilsUnitTest.java", "stars": "2", "class": {"name": "SecurityUtilsUnitTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testAnonymousIsNotAuthenticated", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testAnonymousIsNotAuthenticated() {        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();        Collection<GrantedAuthority> authorities = new ArrayList<>();        authorities.add(new SimpleGrantedAuthority(AuthoritiesConstants.ANONYMOUS));        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken(\"anonymous\", \"anonymous\", authorities));        SecurityContextHolder.setContext(securityContext);        boolean isAuthenticated = SecurityUtils.isAuthenticated();        assertThat(isAuthenticated).isFalse();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/security/SecurityUtilsUnitTest.java", "stars": "2", "class": {"name": "SecurityUtilsUnitTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testIsCurrentUserInRole", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testIsCurrentUserInRole() {        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();        Collection<GrantedAuthority> authorities = new ArrayList<>();        authorities.add(new SimpleGrantedAuthority(AuthoritiesConstants.USER));        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken(\"user\", \"user\", authorities));        SecurityContextHolder.setContext(securityContext);        assertThat(SecurityUtils.isCurrentUserInRole(AuthoritiesConstants.USER)).isTrue();        assertThat(SecurityUtils.isCurrentUserInRole(AuthoritiesConstants.ADMIN)).isFalse();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/security/SecurityUtilsUnitTest.java", "stars": "2", "class": {"name": "SecurityUtilsUnitTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createData", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "AnyData", "snippet": "    public AnyData createData() throws Exception {        if (!isOk())            return null;        return new District(                nameField.getText(),                Integer.parseInt(villageCouncilsField.getText()),                adminCenterField.getText()        );    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/DistrictDlg.java", "stars": "2", "class": {"name": "DistrictDlg", "extends": "Dlg", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Throwable"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(String[] args) throws Throwable {    Runnable r = () ->{      System.out.println(\"Stopper job started...\");      while (! stop)  // Timing???        ;      System.out.println(\"Stopper job completed...\");    };    new Thread(r).start();    System.out.println(\"started...\");    Thread.sleep(1_000);    System.out.println(\"about to set stop flag...\");    stop = true;    System.out.println(\"Stop set to \"  + stop);  }", "url": "https://raw.githubusercontent.com/SimonHGR/safari-threads/master/src/main/java/runnables/Stopper.java", "stars": "3", "class": {"name": "Stopper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findAllCities", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ServiceMultiResult", "snippet": "    public ServiceMultiResult findAllCities() {        Optional<List<SupportAddress>> addressList = Optional.ofNullable(supportAddressRepository.findAllByLevel(SupportAddress.AddressLevel.CITY.getValue()));        List<SupportAddressDTO> list = addressList.orElse(Collections.emptyList()).stream()                .map(address -> modelMapper.map(address, SupportAddressDTO.class))                .collect(Collectors.toList());        return new ServiceMultiResult<>(list.size(), list);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/AddressServiceImpl.java", "stars": "3", "class": {"name": "AddressServiceImpl", "extends": null, "implements": ["AddressService"], "modifiers": ["public"]}}, {"method_name": "findAreaByBelongToAndLevel", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "ServiceMultiResult<SupportAddressDTO>", "snippet": "    public ServiceMultiResult<SupportAddressDTO> findAreaByBelongToAndLevel(String belongTo, String level) {        SupportAddress.AddressLevel levelEnum = SupportAddress.AddressLevel.of(level);        List<SupportAddressDTO> list = Optional.ofNullable(supportAddressRepository.findAllByBelongToAndLevel(belongTo, levelEnum.getValue()))                .orElse(Collections.emptyList())                .stream().map(address -> modelMapper.map(address, SupportAddressDTO.class))                .collect(Collectors.toList());        ;        return new ServiceMultiResult<>(list.size(), list);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/AddressServiceImpl.java", "stars": "3", "class": {"name": "AddressServiceImpl", "extends": null, "implements": ["AddressService"], "modifiers": ["public"]}}, {"method_name": "findAreaInEnName", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "ServiceMultiResult<SupportAddressDTO>", "snippet": "    public ServiceMultiResult<SupportAddressDTO> findAreaInEnName(List<String> enNameList) {        List<SupportAddressDTO> list = Optional.ofNullable(supportAddressRepository.findAllByEnNameIn(enNameList))                .orElse(Collections.emptyList())                .stream().map(item -> modelMapper.map(item, SupportAddressDTO.class))                .collect(Collectors.toList());        return new ServiceMultiResult<>(list.size(), list);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/AddressServiceImpl.java", "stars": "3", "class": {"name": "AddressServiceImpl", "extends": null, "implements": ["AddressService"], "modifiers": ["public"]}}, {"method_name": "findAllSubwayByCityEnName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ServiceMultiResult<SubwayDTO>", "snippet": "    public ServiceMultiResult<SubwayDTO> findAllSubwayByCityEnName(String cityEnName) {        List<SubwayDTO> subWayDtoList = Optional.ofNullable(subwayRepository.findAllByCityEnName(cityEnName))                .orElse(Collections.emptyList()).stream().map(subway -> modelMapper.map(subway, SubwayDTO.class)).collect(Collectors.toList());        return new ServiceMultiResult<>(subWayDtoList.size(), subWayDtoList);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/AddressServiceImpl.java", "stars": "3", "class": {"name": "AddressServiceImpl", "extends": null, "implements": ["AddressService"], "modifiers": ["public"]}}, {"method_name": "findAllSubwayStationBySubwayId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "ServiceMultiResult<SubwayStationDTO>", "snippet": "    public ServiceMultiResult<SubwayStationDTO> findAllSubwayStationBySubwayId(Long subwayId) {        List<SubwayStationDTO> subwayStationDTOList = Optional.ofNullable(subwayStationRepository                .getAllBySubwayId(subwayId)).orElse(Collections.emptyList()).stream()                .map(subwayStation -> modelMapper.map(subwayStation, SubwayStationDTO.class)).collect(Collectors.toList());        return new ServiceMultiResult<>(subwayStationDTOList.size(), subwayStationDTOList);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/AddressServiceImpl.java", "stars": "3", "class": {"name": "AddressServiceImpl", "extends": null, "implements": ["AddressService"], "modifiers": ["public"]}}, {"method_name": "findCityAndRegion", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Map<SupportAddress,SupportAddressDTO>", "snippet": "    public Map<SupportAddress.AddressLevel, SupportAddressDTO> findCityAndRegion(String cityEnName, String regionEnName) {        SupportAddress city = supportAddressRepository.findByEnNameAndLevel(cityEnName, SupportAddress.AddressLevel.CITY.getValue())                .orElseThrow(() -> new BusinessException(ApiResponseEnum.ADDRESS_CITY_NOT_FOUND));        SupportAddress region = supportAddressRepository.findByEnNameAndLevel(regionEnName, SupportAddress.AddressLevel.REGION.getValue())                .orElseThrow(() -> new BusinessException(ApiResponseEnum.ADDRESS_REGION_NOT_FOUND));        Map<SupportAddress.AddressLevel, SupportAddressDTO> map = new HashMap();        map.put(SupportAddress.AddressLevel.CITY, modelMapper.map(city, SupportAddressDTO.class));        map.put(SupportAddress.AddressLevel.REGION, modelMapper.map(region, SupportAddressDTO.class));        return map;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/AddressServiceImpl.java", "stars": "3", "class": {"name": "AddressServiceImpl", "extends": null, "implements": ["AddressService"], "modifiers": ["public"]}}, {"method_name": "findSubwayStation", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "SubwayStationDTO", "snippet": "    public SubwayStationDTO findSubwayStation(Long subwayStationId) {        SubwayStation subwayStation = subwayStationRepository.findById(subwayStationId).orElseThrow(() -> new BusinessException(ApiResponseEnum.SUBWAY_STATION_ERROR));        return modelMapper.map(subwayStation, SubwayStationDTO.class);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/AddressServiceImpl.java", "stars": "3", "class": {"name": "AddressServiceImpl", "extends": null, "implements": ["AddressService"], "modifiers": ["public"]}}, {"method_name": "findSubway", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "SubwayDTO", "snippet": "    public SubwayDTO findSubway(Long subwayId) {        Subway subway = subwayRepository.findById(subwayId).orElseThrow(() -> new BusinessException(ApiResponseEnum.SUBWAY_LINE_ERROR));        return modelMapper.map(subway, SubwayDTO.class);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/AddressServiceImpl.java", "stars": "3", "class": {"name": "AddressServiceImpl", "extends": null, "implements": ["AddressService"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        // TODO \u4ece\u767e\u5ea6\u6307\u6570\u83b7\u53d6cookie        String cookie = \"\";        BaiduIndexCore baiduIndexCore = new BaiduIndexCore(\"2020-1-31\", \"2020-3-9\", 928, cookie, new String[]{\"\u7f8e\u56fd\"});        System.out.println(baiduIndexCore.searchIndexRun());        System.out.println(baiduIndexCore.regionIndexRun());    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/spider/BaiduIndexCore.java", "stars": "13", "class": {"name": "BaiduIndexCore", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRegionApi", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getRegionApi() {        String api = \"\";        try {            api = String.format(BaiduApi.REGION_API, this.area, java.net.URLEncoder.encode(this.keyWord, \"UTF-8\"));            if (this.area != 0) {                api = api + \"&area=\" + this.area;            }        } catch (Exception e) {            logger.info(\"error:{}\", LogbackUtil.expection2Str(e));        }        if (StringUtils.isNotEmpty(this.startDate)) {            api = api + \"&startDate=\" + this.startDate;        }        if (StringUtils.isNotEmpty(this.endDate)) {            api = api + \"&endDate=\" + this.endDate;        }        return api;    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/spider/BaiduIndexCore.java", "stars": "13", "class": {"name": "BaiduIndexCore", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getKeyWordFormat", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getKeyWordFormat(String keyWord) {        return String.format(KEYWORD_FORMAT, keyWord);    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/spider/BaiduIndexCore.java", "stars": "13", "class": {"name": "BaiduIndexCore", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIndexApi", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getIndexApi() {        String api = \"\";        try {            List<String> results = new ArrayList<>();            String[] keyWords = this.keyWord.split(\",\");            for (String word : keyWords) {                results.add(getKeyWordFormat(word));            }            String keyWordStr = \"[\" + Joiner.on(\",\").join(results) + \"]\";            api = String.format(BaiduApi.INDEX_API, java.net.URLEncoder.encode(keyWordStr, \"UTF-8\")) + \"&area=\" + this.area;        } catch (Exception e) {            logger.info(\"error:{}\", LogbackUtil.expection2Str(e));        }        if (StringUtils.isNotEmpty(this.startDate)) {            api = api + \"&startDate=\" + this.startDate;        }        if (StringUtils.isNotEmpty(this.endDate)) {            api = api + \"&endDate=\" + this.endDate;        }        return api;    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/spider/BaiduIndexCore.java", "stars": "13", "class": {"name": "BaiduIndexCore", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "searchIndexRun", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String searchIndexRun() {        String data = \"\", ptbk;        try {            data = HttpHandle.doGet(getIndexApi(), null, cookie);            ptbk = JsonPath.read(HttpHandle.doGet(BaiduApi.INDEX_PTBK_API +                    JsonPath.read(data, \"data.uniqid\").toString(), null, cookie), \"data\").toString();            JSONArray userIndexes = JsonPath.read(data, \"$..userIndexes[*]\");            for (Object userIndex : userIndexes) {                String userIndexStr = FontUtil.chinaToUnicode(GsonUtil.gsonString(userIndex));                data = data.replace(userIndexStr, parseInfo(userIndexStr, ptbk));            }        } catch (Exception e) {            logger.error(\"baidu search index crawler error:{}\", LogbackUtil.expection2Str(e));        }        return data;    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/spider/BaiduIndexCore.java", "stars": "13", "class": {"name": "BaiduIndexCore", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "regionIndexRun", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String regionIndexRun() {        String data = \"\";        try {            data = HttpHandle.doGet(getRegionApi(), null, cookie);        } catch (Exception e) {            logger.error(\"baidu region index crawler error:{}\", LogbackUtil.expection2Str(e));        }        return data;    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/spider/BaiduIndexCore.java", "stars": "13", "class": {"name": "BaiduIndexCore", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseInfo", "params": ["String", "String"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "String", "snippet": "    private String parseInfo(String userIndex, String ptbk) throws Exception {        String all, pc, wise;        all = JsonPath.read(userIndex, \"all.data\").toString();        pc = JsonPath.read(userIndex, \"pc.data\").toString();        wise = JsonPath.read(userIndex, \"wise.data\").toString();        return userIndex.replace(all, decrypt(ptbk, all)).replace(pc, decrypt(ptbk, pc)).replace(wise, decrypt(ptbk, wise));    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/spider/BaiduIndexCore.java", "stars": "13", "class": {"name": "BaiduIndexCore", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "decrypt", "params": ["String", "String"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "String", "snippet": "    private String decrypt(String ptbk, String data) throws Exception {        StringBuilder result = new StringBuilder();        try {            List<String> ptbkSet = flatMap(ptbk);            List<String> dataSet = flatMap(data);            int ln = ptbkSet.size() / 2;            List<String> startSet = ptbkSet.subList(0, ln);            List<String> endSet = ptbkSet.subList(ln, ptbkSet.size());            Map<String, String> map = new HashMap<>(ln);            for (int index = 0; index < ln; index++) {                map.put(startSet.get(index), endSet.get(index));            }            for (String dataChar : dataSet) {                result.append(map.get(dataChar));            }        } catch (Exception e) {            throw new RuntimeException(\"decrypt \u7b97\u6cd5\u89e3\u5bc6\u5931\u8d25\uff01\uff01\");        }        return result.toString();    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/spider/BaiduIndexCore.java", "stars": "13", "class": {"name": "BaiduIndexCore", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "flatMap", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "    private List<String> flatMap(String ptbk) {        List<String> list = new ArrayList<>();        for (char aChar : ptbk.toCharArray()) {            list.add(String.valueOf(aChar));        }        return list;    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/spider/BaiduIndexCore.java", "stars": "13", "class": {"name": "BaiduIndexCore", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Timestamp", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Timestamp parameter, JdbcType jdbcType)      throws SQLException {    ps.setTimestamp(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/SqlTimestampTypeHandler.java", "stars": "15", "class": {"name": "SqlTimestampTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Timestamp", "snippet": "  public Timestamp getNullableResult(ResultSet rs, String columnName)      throws SQLException {    return rs.getTimestamp(columnName);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/SqlTimestampTypeHandler.java", "stars": "15", "class": {"name": "SqlTimestampTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Timestamp", "snippet": "  public Timestamp getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    return rs.getTimestamp(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/SqlTimestampTypeHandler.java", "stars": "15", "class": {"name": "SqlTimestampTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Timestamp", "snippet": "  public Timestamp getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    return cs.getTimestamp(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/SqlTimestampTypeHandler.java", "stars": "15", "class": {"name": "SqlTimestampTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getWeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getWeight() {        return weight;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Waste.java", "stars": "2", "class": {"name": "Waste", "extends": null, "implements": ["IWeight"], "modifiers": ["public"]}}, {"method_name": "setWeight", "params": ["float"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWeight(float weight) throws Exception {        if (weight < 20 || weight > 100)            throw new Exception(weight + \" is not correct weight.\\n\" +                    \"It should be in range from 20 to 100 kg.\");        this.weight = weight;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Waste.java", "stars": "2", "class": {"name": "Waste", "extends": null, "implements": ["IWeight"], "modifiers": ["public"]}}, {"method_name": "weight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float weight() {        return weight;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Waste.java", "stars": "2", "class": {"name": "Waste", "extends": null, "implements": ["IWeight"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Waste{\" +                \"weight=\" + weight +                '}';    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Waste.java", "stars": "2", "class": {"name": "Waste", "extends": null, "implements": ["IWeight"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getId() {        return id;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(String id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMalId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMalId() {        return malId;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setMalId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMalId(String malId) {        this.malId = malId;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTitle() {        return title;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitle(String title) {        this.title = title;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getYear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getYear() {        return year;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setYear", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setYear(String year) {        this.year = year;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSlug", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSlug() {        return slug;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSlug", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSlug(String slug) {        this.slug = slug;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getType() {        return type;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setType(String type) {        this.type = type;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNumSeasons", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getNumSeasons() {        return numSeasons;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNumSeasons", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNumSeasons(int numSeasons) {        this.numSeasons = numSeasons;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGenres", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getGenres() {        return genres;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setGenres", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGenres(List<String> genres) {        this.genres = genres;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getImages", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Images", "snippet": "    public Images getImages() {        return images;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setImages", "params": ["Images"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setImages(Images images) {        this.images = images;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRating", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Rating", "snippet": "    public Rating getRating() {        return rating;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setRating", "params": ["Rating"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRating(Rating rating) {        this.rating = rating;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/anime/Anime.java", "stars": "4", "class": {"name": "Anime", "extends": "ResponseItem", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        //\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf        int count = 0;        //\u8ba9\u5305\u5b50\u94fa\u4e00\u76f4\u751f\u4ea7\u5305\u5b50        while(true){            //\u5fc5\u987b\u540c\u65f6\u540c\u6b65\u6280\u672f\u4fdd\u8bc1\u4e24\u4e2a\u7ebf\u7a0b\u53ea\u80fd\u6709\u4e00\u4e2a\u5728\u6267\u884c            synchronized (bz){                //\u5bf9\u5305\u5b50\u7684\u72b6\u6001\u8fdb\u884c\u5224\u65ad                if(bz.flag==true){                    //\u5305\u5b50\u94fa\u8c03\u7528wait\u65b9\u6cd5\u8fdb\u5165\u7b49\u5f85\u72b6\u6001                    try {                        bz.wait();                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                }                //\u88ab\u5524\u9192\u4e4b\u540e\u6267\u884c,\u5305\u5b50\u94fa\u751f\u4ea7\u5305\u5b50                //\u589e\u52a0\u4e00\u4e9b\u8da3\u5473\u6027:\u4ea4\u66ff\u751f\u4ea7\u4e24\u79cd\u5305\u5b50                if(count%2==0){                    //\u751f\u4ea7 \u8584\u76ae\u4e09\u9c9c\u9985\u5305\u5b50                    bz.pi = \"\u8584\u76ae\";                    bz.xian = \"\u4e09\u9c9c\u9985\";                }else{                    //\u751f\u4ea7 \u51b0\u76ae \u725b\u8089\u5927\u8471\u9677                    bz.pi = \"\u51b0\u76ae\";                    bz.xian = \"\u725b\u8089\u5927\u8471\u9677\";                }                count++;                System.out.println(\"\u5305\u5b50\u94fa\u6b63\u5728\u751f\u4ea7:\"+bz.pi+bz.xian+\"\u5305\u5b50\");                //\u751f\u4ea7\u5305\u5b50\u9700\u89813\u79d2\u949f                try {                    Thread.sleep(3000);                } catch (InterruptedException e) {                    e.printStackTrace();                }                //\u5305\u5b50\u94fa\u751f\u4ea7\u597d\u4e86\u5305\u5b50                //\u4fee\u6539\u5305\u5b50\u7684\u72b6\u6001\u4e3atrue\u6709                bz.flag = true;                //\u5524\u9192\u5403\u8d27\u7ebf\u7a0b,\u8ba9\u5403\u8d27\u7ebf\u7a0b\u5403\u5305\u5b50                bz.notify();                System.out.println(\"\u5305\u5b50\u94fa\u5df2\u7ecf\u751f\u4ea7\u597d\u4e86:\"+bz.pi+bz.xian+\"\u5305\u5b50,\u5403\u8d27\u53ef\u4ee5\u5f00\u59cb\u5403\u4e86\");            }        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/18.%E3%80%90%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%91-%E7%AC%94%E8%AE%B0/code/07_ThreadAndLambda/src/com/itheima/demo01/WaitAndNotify/BaoZiPu.java", "stars": "2", "class": {"name": "BaoZiPu", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "toJson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toJson() {       return JSON.toJSONString(this);   }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/entity/BaseEntity.java", "stars": "7", "class": {"name": "BaseEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "abstract"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void reset();    /**     * CPU\u3092\u30db\u30fc\u30eb\u30c8\u3059\u308b\u3002     */    public abstract void halt();    /**     * CPU\u306bNMI\u3092\u5165\u529b\u3059\u308b\u3002     */    public abstract void nmi();    /**     * CPU\u306bIRQ\u3092\u5165\u529b\u3059\u308b\u3002     */    public abstract void irq();    /**     * CPU\u3092\u5c11\u306a\u304f\u3068\u3082\u6307\u5b9a\u306e\u30af\u30ed\u30c3\u30af\u6570\u3060\u3051\u5b9f\u884c\u3059\u308b\u3002     * \u547d\u4ee4\u5b9f\u884c\u4e2d\u306b\u6307\u5b9a\u3057\u305f\u30af\u30ed\u30c3\u30af\u6570\u3092\u8d85\u904e\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u547d\u4ee4\u306e\u5b9f\u884c\u306f\u5b8c\u4e86\u3055\u305b\u3001     * \u4f59\u5206\u306b\u5b9f\u884c\u3057\u305f\u30af\u30ed\u30c3\u30af\u6570\u3092\u8fd4\u3059\u3002     *     * @param clocks     * @return \u4f59\u5206\u306b\u5b9f\u884c\u3057\u305f\u30af\u30ed\u30c3\u30af\u6570     */    public abstract long execute(long clocks);}", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/CPU.java", "stars": "4", "class": {"name": "CPU", "extends": null, "implements": ["StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "halt", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void halt();    /**     * CPU\u306bNMI\u3092\u5165\u529b\u3059\u308b\u3002     */    public abstract void nmi();    /**     * CPU\u306bIRQ\u3092\u5165\u529b\u3059\u308b\u3002     */    public abstract void irq();    /**     * CPU\u3092\u5c11\u306a\u304f\u3068\u3082\u6307\u5b9a\u306e\u30af\u30ed\u30c3\u30af\u6570\u3060\u3051\u5b9f\u884c\u3059\u308b\u3002     * \u547d\u4ee4\u5b9f\u884c\u4e2d\u306b\u6307\u5b9a\u3057\u305f\u30af\u30ed\u30c3\u30af\u6570\u3092\u8d85\u904e\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u547d\u4ee4\u306e\u5b9f\u884c\u306f\u5b8c\u4e86\u3055\u305b\u3001     * \u4f59\u5206\u306b\u5b9f\u884c\u3057\u305f\u30af\u30ed\u30c3\u30af\u6570\u3092\u8fd4\u3059\u3002     *     * @param clocks     * @return \u4f59\u5206\u306b\u5b9f\u884c\u3057\u305f\u30af\u30ed\u30c3\u30af\u6570     */    public abstract long execute(long clocks);}", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/CPU.java", "stars": "4", "class": {"name": "CPU", "extends": null, "implements": ["StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "nmi", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void nmi();    /**     * CPU\u306bIRQ\u3092\u5165\u529b\u3059\u308b\u3002     */    public abstract void irq();    /**     * CPU\u3092\u5c11\u306a\u304f\u3068\u3082\u6307\u5b9a\u306e\u30af\u30ed\u30c3\u30af\u6570\u3060\u3051\u5b9f\u884c\u3059\u308b\u3002     * \u547d\u4ee4\u5b9f\u884c\u4e2d\u306b\u6307\u5b9a\u3057\u305f\u30af\u30ed\u30c3\u30af\u6570\u3092\u8d85\u904e\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u547d\u4ee4\u306e\u5b9f\u884c\u306f\u5b8c\u4e86\u3055\u305b\u3001     * \u4f59\u5206\u306b\u5b9f\u884c\u3057\u305f\u30af\u30ed\u30c3\u30af\u6570\u3092\u8fd4\u3059\u3002     *     * @param clocks     * @return \u4f59\u5206\u306b\u5b9f\u884c\u3057\u305f\u30af\u30ed\u30c3\u30af\u6570     */    public abstract long execute(long clocks);}", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/CPU.java", "stars": "4", "class": {"name": "CPU", "extends": null, "implements": ["StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "irq", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void irq();    /**     * CPU\u3092\u5c11\u306a\u304f\u3068\u3082\u6307\u5b9a\u306e\u30af\u30ed\u30c3\u30af\u6570\u3060\u3051\u5b9f\u884c\u3059\u308b\u3002     * \u547d\u4ee4\u5b9f\u884c\u4e2d\u306b\u6307\u5b9a\u3057\u305f\u30af\u30ed\u30c3\u30af\u6570\u3092\u8d85\u904e\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u547d\u4ee4\u306e\u5b9f\u884c\u306f\u5b8c\u4e86\u3055\u305b\u3001     * \u4f59\u5206\u306b\u5b9f\u884c\u3057\u305f\u30af\u30ed\u30c3\u30af\u6570\u3092\u8fd4\u3059\u3002     *     * @param clocks     * @return \u4f59\u5206\u306b\u5b9f\u884c\u3057\u305f\u30af\u30ed\u30c3\u30af\u6570     */    public abstract long execute(long clocks);}", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/CPU.java", "stars": "4", "class": {"name": "CPU", "extends": null, "implements": ["StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "execute", "params": ["long"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "long", "snippet": "    public abstract long execute(long clocks);}", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/CPU.java", "stars": "4", "class": {"name": "CPU", "extends": null, "implements": ["StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "dummy", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void dummy() {  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BatchExecutorTest.java", "stars": "15", "class": {"name": "BatchExecutorTest", "extends": "BaseExecutorTest", "implements": null, "modifiers": []}}, {"method_name": "createExecutor", "params": ["Transaction"], "throws": null, "modifiers": ["protected"], "return_type": "Executor", "snippet": "  protected Executor createExecutor(Transaction transaction) {    return new BatchExecutor(config, transaction);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BatchExecutorTest.java", "stars": "15", "class": {"name": "BatchExecutorTest", "extends": "BaseExecutorTest", "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_other);    }", "url": "https://raw.githubusercontent.com/he303954106/AOP_Demo/master/app/src/main/java/com/netease/aop/login/OtherActivity.java", "stars": "2", "class": {"name": "OtherActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["ServletConfig"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void init(final ServletConfig config) throws ServletException {    this.application =        (AzkabanServer) config.getServletContext()            .getAttribute(Constants.AZKABAN_SERVLET_CONTEXT_KEY);    if (this.application == null) {      throw new IllegalStateException(          \"No batch application is defined in the servlet context!\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AbstractServiceServlet.java", "stars": "18", "class": {"name": "AbstractServiceServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "writeJSON", "params": ["HttpServletResponse", "Object"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void writeJSON(final HttpServletResponse resp, final Object obj)      throws IOException {    resp.setContentType(JSON_MIME_TYPE);    final ObjectMapper mapper = new ObjectMapper();    final OutputStream stream = resp.getOutputStream();    mapper.writeValue(stream, obj);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AbstractServiceServlet.java", "stars": "18", "class": {"name": "AbstractServiceServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "hasParam", "params": ["HttpServletRequest", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasParam(final HttpServletRequest request, final String param) {    return request.getParameter(param) != null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AbstractServiceServlet.java", "stars": "18", "class": {"name": "AbstractServiceServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getParam", "params": ["HttpServletRequest", "String"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getParam(final HttpServletRequest request, final String name)      throws ServletException {    final String p = request.getParameter(name);    if (p == null) {      throw new ServletException(\"Missing required parameter '\" + name + \"'.\");    } else {      return p;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AbstractServiceServlet.java", "stars": "18", "class": {"name": "AbstractServiceServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getParam", "params": ["HttpServletRequest", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getParam(final HttpServletRequest request, final String name,      final String defaultVal) {    final String p = request.getParameter(name);    if (p == null) {      return defaultVal;    }    return p;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AbstractServiceServlet.java", "stars": "18", "class": {"name": "AbstractServiceServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getIntParam", "params": ["HttpServletRequest", "String"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getIntParam(final HttpServletRequest request, final String name)      throws ServletException {    final String p = getParam(request, name);    return Integer.parseInt(p);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AbstractServiceServlet.java", "stars": "18", "class": {"name": "AbstractServiceServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getIntParam", "params": ["HttpServletRequest", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getIntParam(final HttpServletRequest request, final String name,      final int defaultVal) {    if (hasParam(request, name)) {      try {        return getIntParam(request, name);      } catch (final Exception e) {        return defaultVal;      }    }    return defaultVal;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AbstractServiceServlet.java", "stars": "18", "class": {"name": "AbstractServiceServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLongParam", "params": ["HttpServletRequest", "String"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "long", "snippet": "  public long getLongParam(final HttpServletRequest request, final String name)      throws ServletException {    final String p = getParam(request, name);    return Long.parseLong(p);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AbstractServiceServlet.java", "stars": "18", "class": {"name": "AbstractServiceServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLongParam", "params": ["HttpServletRequest", "String", "long"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getLongParam(final HttpServletRequest request, final String name,      final long defaultVal) {    if (hasParam(request, name)) {      try {        return getLongParam(request, name);      } catch (final Exception e) {        return defaultVal;      }    }    return defaultVal;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AbstractServiceServlet.java", "stars": "18", "class": {"name": "AbstractServiceServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "preTrackingEventMethod", "params": [], "throws": null, "modifiers": ["synchronized", "protected"], "return_type": "void", "snippet": "  protected synchronized void preTrackingEventMethod() {    this.value = this.flowManager.getNumRunningFlows();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumRunningFlowMetric.java", "stars": "18", "class": {"name": "NumRunningFlowMetric", "extends": "TimeBasedReportingMetric", "implements": null, "modifiers": ["public"]}}, {"method_name": "postTrackingEventMethod", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void postTrackingEventMethod() {    // nothing to post process  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumRunningFlowMetric.java", "stars": "18", "class": {"name": "NumRunningFlowMetric", "extends": "TimeBasedReportingMetric", "implements": null, "modifiers": ["public"]}}, {"method_name": "onIndicateSuccess", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onIndicateSuccess();    public abstract void onIndicateFailure(BleException exception);    public abstract void onCharacteristicChanged(byte[] data);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleIndicateCallback.java", "stars": "2", "class": {"name": "BleIndicateCallback", "extends": "BleBaseCallback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onIndicateFailure", "params": ["BleException"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onIndicateFailure(BleException exception);    public abstract void onCharacteristicChanged(byte[] data);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleIndicateCallback.java", "stars": "2", "class": {"name": "BleIndicateCallback", "extends": "BleBaseCallback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onCharacteristicChanged", "params": ["byte"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onCharacteristicChanged(byte[] data);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleIndicateCallback.java", "stars": "2", "class": {"name": "BleIndicateCallback", "extends": "BleBaseCallback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getRequest", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HttpServletRequest", "snippet": "    public HttpServletRequest getRequest() {        return request;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/context/RequestContext.java", "stars": "13", "class": {"name": "RequestContext", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "addParameter", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addParameter(Object value) {        this.parameters.add(value);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/context/RequestContext.java", "stars": "13", "class": {"name": "RequestContext", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "getParameters", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Object>", "snippet": "    public List<Object> getParameters() {        return parameters;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/context/RequestContext.java", "stars": "13", "class": {"name": "RequestContext", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "evaluate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object evaluate(String expression) {        return engine.executeWrap(expression, this);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/context/RequestContext.java", "stars": "13", "class": {"name": "RequestContext", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRequestBody", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getRequestBody() {        return requestBody;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/context/RequestContext.java", "stars": "13", "class": {"name": "RequestContext", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "setRequestBody", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRequestBody(Object requestBody) {        this.requestBody = requestBody;        this.put(\"body\", this.requestBody);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/context/RequestContext.java", "stars": "13", "class": {"name": "RequestContext", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPathVariables", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "    public Map<String, String> getPathVariables() {        return pathVariables;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/context/RequestContext.java", "stars": "13", "class": {"name": "RequestContext", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRequestMapping", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRequestMapping() {        return requestMapping;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/context/RequestContext.java", "stars": "13", "class": {"name": "RequestContext", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRequestMethod", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRequestMethod() {        return requestMethod;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/context/RequestContext.java", "stars": "13", "class": {"name": "RequestContext", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatement", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Statement", "snippet": "    public Statement getStatement() {        return statement;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/context/RequestContext.java", "stars": "13", "class": {"name": "RequestContext", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatement", "params": ["Statement"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatement(Statement statement) {        this.statement = statement;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/context/RequestContext.java", "stars": "13", "class": {"name": "RequestContext", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/nested_query_cache/MapperConfig.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    createBlogDataSource();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nested_query_cache/NestedQueryCacheTest.java", "stars": "15", "class": {"name": "NestedQueryCacheTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "testThatNestedQueryItemsAreRetrievedFromCache", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testThatNestedQueryItemsAreRetrievedFromCache() {    final Author author;    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      final AuthorMapper authorMapper = sqlSession.getMapper(AuthorMapper.class);      author = authorMapper.selectAuthor(101);      // ensure that author is cached      final Author cachedAuthor = authorMapper.selectAuthor(101);      assertThat(author).isSameAs(cachedAuthor);    }    // open a new session    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      final BlogMapper blogMapper = sqlSession.getMapper(BlogMapper.class);      // ensure that nested author within blog is cached      assertThat(blogMapper.selectBlog(1).getAuthor()).isSameAs(author);      assertThat(blogMapper.selectBlogUsingConstructor(1).getAuthor()).isSameAs(author);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nested_query_cache/NestedQueryCacheTest.java", "stars": "15", "class": {"name": "NestedQueryCacheTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "testThatNestedQueryItemsAreRetrievedIfNotInCache", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testThatNestedQueryItemsAreRetrievedIfNotInCache() {    Author author;    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      final BlogMapper blogMapper = sqlSession.getMapper(BlogMapper.class);      author = blogMapper.selectBlog(1).getAuthor();      // ensure that nested author within blog is cached      assertNotNull(blogMapper.selectBlog(1).getAuthor(), \"blog author\");      assertNotNull(blogMapper.selectBlogUsingConstructor(1).getAuthor(), \"blog author\");    }    // open a new session    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      final AuthorMapper authorMapper = sqlSession.getMapper(AuthorMapper.class);      Author cachedAuthor = authorMapper.selectAuthor(101);      // ensure that nested author within blog is cached      assertThat(cachedAuthor).isSameAs(author);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nested_query_cache/NestedQueryCacheTest.java", "stars": "15", "class": {"name": "NestedQueryCacheTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "execute", "params": ["LibraryData"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute(LibraryData data) {        Objects.requireNonNull(data, LegalityCheck.LIBRARY_DATA_NULL_MESSAGE);        List<BookEntry> books = data.getBookData();        List<BookEntry> booksToRemove;        switch (this.savedChoice) {            case AUTHOR:                // Find books with the author name                booksToRemove = Utils.getBooksWithAuthor(books, this.savedString);                // remove the books                if (booksToRemove.isEmpty()) {                    System.out.println(\"0 books removed for author: \" + this.savedString);                    return;                }                Utils.removeBooks(books, booksToRemove);                System.out.println(booksToRemove.size() + \" books removed for author: \" + this.savedString);                break;            case TITLE:                booksToRemove = Utils.getBooksWithTitle(books, savedString);                if (booksToRemove.isEmpty()) {                    System.out.println(this.savedString + \": not found.\");                    return;                }                Utils.removeBooks(books, booksToRemove);                System.out.println(this.savedString + \": removed successfully.\");                break;        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/RemoveCmd.java", "stars": "6", "class": {"name": "RemoveCmd", "extends": "LibraryCommand", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseArguments", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean parseArguments(String argumentInput) {        Objects.requireNonNull(argumentInput, LegalityCheck.INPUT_ARGUMENT_NULL_MESSAGE);        // split the input arg by space        String[] strs = argumentInput.split(REMOVE_ARG_REGEX);        // must be more than two entries (option, string)        if (strs.length < 2) {            return false;        }        String option = strs[0];        StringBuilder str = new StringBuilder(new String());        // recombine the string        for (int i = 1; i < strs.length; i++) {            str.append(strs[i]).append(REMOVE_ARG_REGEX);        }        this.savedString = str.toString().trim();        switch (option) {            case REMOVE_BY_AUTHOR:                this.savedChoice = RemoveChoice.AUTHOR;                return true;            case REMOVE_BY_TITLE:                this.savedChoice = RemoveChoice.TITLE;                return true;            default:                return false;        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/RemoveCmd.java", "stars": "6", "class": {"name": "RemoveCmd", "extends": "LibraryCommand", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCode() {        return code;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/CreateChannelResult.java", "stars": "1", "class": {"name": "CreateChannelResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCode(int code) {        this.code = code;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/CreateChannelResult.java", "stars": "1", "class": {"name": "CreateChannelResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMsg() {        return msg;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/CreateChannelResult.java", "stars": "1", "class": {"name": "CreateChannelResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMsg(String msg) {        this.msg = msg;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/CreateChannelResult.java", "stars": "1", "class": {"name": "CreateChannelResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getData() {        return data;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/CreateChannelResult.java", "stars": "1", "class": {"name": "CreateChannelResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setData", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(String data) {        this.data = data;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/CreateChannelResult.java", "stars": "1", "class": {"name": "CreateChannelResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"CreateChannelResult{\" +                \"code=\" + code +                \", msg='\" + msg + '\\'' +                \", data='\" + data + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/CreateChannelResult.java", "stars": "1", "class": {"name": "CreateChannelResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_empty);        ButterKnife.bind(this);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/EmptyActivity.java", "stars": "2", "class": {"name": "EmptyActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onViewClicked", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onViewClicked() {        startActivity(new Intent(this, EmptyActivity.class));    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/EmptyActivity.java", "stars": "2", "class": {"name": "EmptyActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "convert", "params": ["StageRoom"], "throws": null, "modifiers": ["public", "static"], "return_type": "RoomDto", "snippet": "    public static RoomDto convert(StageRoom stageRoom) {        RoomDto roomDto = new RoomDto();        roomDto.setRoomId(stageRoom.getRoomId());        roomDto.setCreator(stageRoom.getCreator());        roomDto.setMapId(stageRoom.getMapId());        roomDto.setRoomType(stageRoom.getRoomType());        roomDto.setUserCount(stageRoom.getUserCount());        return roomDto;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/model/dto/RoomDto.java", "stars": "2", "class": {"name": "RoomDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInternal", "params": ["String"], "throws": null, "modifiers": [], "return_type": "Optional<CacheWrapper>", "snippet": "    Optional<CacheWrapper<String>> getInternal(String key) {        Assert.hasText(key, \"cache key must not be blank\");        return Optional.ofNullable(CACHE_CONTAINER.get(key));    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/cache/store/InMemoryCacheStore.java", "stars": "1", "class": {"name": "InMemoryCacheStore", "extends": "AbstractCacheStore", "implements": null, "modifiers": ["public"]}}, {"method_name": "putInternal", "params": ["String", "CacheWrapper<String>"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void putInternal(String key, CacheWrapper<String> cacheWrapper) {        CacheWrapper<String> res = CACHE_CONTAINER.put(key, cacheWrapper);        log.debug(\"put [{}], res=[{}]\", key, res);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/cache/store/InMemoryCacheStore.java", "stars": "1", "class": {"name": "InMemoryCacheStore", "extends": "AbstractCacheStore", "implements": null, "modifiers": ["public"]}}, {"method_name": "putInternalIfAbsent", "params": ["String", "CacheWrapper<String>"], "throws": null, "modifiers": [], "return_type": "Boolean", "snippet": "    Boolean putInternalIfAbsent(String key, CacheWrapper<String> cacheWrapper) {        lock.lock();        try {            Optional<CacheWrapper<String>> internal = getInternal(key);            if (internal.isPresent()) {                // key is present already                log.debug(\"failed put key [{}], because its present already\", key);                return false;            }            putInternal(key, cacheWrapper);            log.debug(\"succeeded put key [{}]\", key);            return true;        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/cache/store/InMemoryCacheStore.java", "stars": "1", "class": {"name": "InMemoryCacheStore", "extends": "AbstractCacheStore", "implements": null, "modifiers": ["public"]}}, {"method_name": "putAny", "params": ["String", "T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public <T> void putAny(String key, T value) {        try {            put(key, JsonUtil.objectToJson(value));        } catch (JsonProcessingException e) {            throw new ServiceException(\"Failed to convert \" + value + \" to json\", e);        }    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/cache/store/InMemoryCacheStore.java", "stars": "1", "class": {"name": "InMemoryCacheStore", "extends": "AbstractCacheStore", "implements": null, "modifiers": ["public"]}}, {"method_name": "putAny", "params": ["String", "T", "long", "TimeUnit"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public <T> void putAny(@NonNull String key, @NonNull T value, long timeout, @NonNull TimeUnit timeUnit) {        try {            put(key, JsonUtil.objectToJson(value), timeout, timeUnit);        } catch (JsonProcessingException e) {            throw new ServiceException(\"failed to convert \" + value + \" to json\", e);        }    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/cache/store/InMemoryCacheStore.java", "stars": "1", "class": {"name": "InMemoryCacheStore", "extends": "AbstractCacheStore", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAny", "params": ["String", "Class<T>"], "throws": null, "modifiers": ["public"], "return_type": "Optional<T>", "snippet": "    public <T> Optional<T> getAny(String key, Class<T> type) {        Assert.notNull(type, \"type must not be null\");        return get(key).map(value -> {            try {                return JsonUtil.jsonToObject(value, type);            } catch (IOException e) {                log.error(\"failed to convert json to type: \" + type.getName(), e);                return null;            }        });    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/cache/store/InMemoryCacheStore.java", "stars": "1", "class": {"name": "InMemoryCacheStore", "extends": "AbstractCacheStore", "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void delete(String key) {        CACHE_CONTAINER.remove(key);        log.debug(\"removed key: [{}]\", key);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/cache/store/InMemoryCacheStore.java", "stars": "1", "class": {"name": "InMemoryCacheStore", "extends": "AbstractCacheStore", "implements": null, "modifiers": ["public"]}}, {"method_name": "preDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void preDestroy() {        log.debug(\"cancelling all timer tasks\");        clear();    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/cache/store/InMemoryCacheStore.java", "stars": "1", "class": {"name": "InMemoryCacheStore", "extends": "AbstractCacheStore", "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void clear() {        CACHE_CONTAINER.clear();    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/cache/store/InMemoryCacheStore.java", "stars": "1", "class": {"name": "InMemoryCacheStore", "extends": "AbstractCacheStore", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseFlowOptions", "params": ["HttpServletRequest"], "throws": ["ServletException"], "modifiers": ["public", "static"], "return_type": "ExecutionOptions", "snippet": "  public static ExecutionOptions parseFlowOptions(final HttpServletRequest req)      throws ServletException {    final ExecutionOptions execOptions = new ExecutionOptions();    if (hasParam(req, \"failureAction\")) {      final String option = getParam(req, \"failureAction\");      if (option.equals(\"finishCurrent\")) {        execOptions.setFailureAction(FailureAction.FINISH_CURRENTLY_RUNNING);      } else if (option.equals(\"cancelImmediately\")) {        execOptions.setFailureAction(FailureAction.CANCEL_ALL);      } else if (option.equals(\"finishPossible\")) {        execOptions.setFailureAction(FailureAction.FINISH_ALL_POSSIBLE);      } else if (option.equals(\"failedPause\")) {        execOptions.setFailureAction(FailureAction.FAILED_PAUSE);      }    }    if (hasParam(req, \"failureEmailsOverride\")) {      final boolean override = getBooleanParam(req, \"failureEmailsOverride\", false);      execOptions.setFailureEmailsOverridden(override);    }    if (hasParam(req, \"successEmailsOverride\")) {      final boolean override = getBooleanParam(req, \"successEmailsOverride\", false);      execOptions.setSuccessEmailsOverridden(override);    }    if (hasParam(req, \"failureEmails\")) {      final String emails = getParam(req, \"failureEmails\");      if (!emails.isEmpty()) {        final String[] emailSplit = emails.split(\"\\\\s*,\\\\s*|\\\\s*;\\\\s*|\\\\s+\");        execOptions.setFailureEmails(Arrays.asList(emailSplit));      }    }    if (hasParam(req, \"successEmails\")) {      final String emails = getParam(req, \"successEmails\");      if (!emails.isEmpty()) {        final String[] emailSplit = emails.split(\"\\\\s*,\\\\s*|\\\\s*;\\\\s*|\\\\s+\");        execOptions.setSuccessEmails(Arrays.asList(emailSplit));      }    }    if (hasParam(req, \"notifyFailureFirst\")) {      execOptions.setNotifyOnFirstFailure(Boolean.parseBoolean(getParam(req,          \"notifyFailureFirst\")));    }    if (hasParam(req, \"notifyFailureLast\")) {      execOptions.setNotifyOnLastFailure(Boolean.parseBoolean(getParam(req,          \"notifyFailureLast\")));    }    String concurrentOption = getParam(req, \"concurrentOption\", \"skip\");    execOptions.setConcurrentOption(concurrentOption);    if (concurrentOption.equals(\"pipeline\")) {      final int pipelineLevel = getIntParam(req, \"pipelineLevel\");      execOptions.setPipelineLevel(pipelineLevel);    } else if (concurrentOption.equals(\"queue\")) {      // Not yet implemented      final int queueLevel = getIntParam(req, \"queueLevel\", 1);      execOptions.setPipelineLevel(queueLevel);    }    String mailCreator = DefaultMailCreator.DEFAULT_MAIL_CREATOR;    if (hasParam(req, \"mailCreator\")) {      mailCreator = getParam(req, \"mailCreator\");      execOptions.setMailCreator(mailCreator);    }    final Map<String, String> flowParamGroup = getParamGroup(req, \"flowOverride\");    execOptions.addAllFlowParameters(flowParamGroup);    if (hasParam(req, \"disabled\")) {      final String disabled = getParam(req, \"disabled\");      if (!disabled.isEmpty()) {        final List<Object> disabledList =            (List<Object>) JSONUtils.parseJSONFromStringQuiet(disabled);        execOptions.setDisabledJobs(disabledList);      }    }    return execOptions;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseFlowOptions", "params": ["JSONObject"], "throws": ["ServletException"], "modifiers": ["public", "static"], "return_type": "ExecutionOptions", "snippet": "  public static ExecutionOptions parseFlowOptions(final JSONObject jsonObject)          throws ServletException {    final ExecutionOptions execOptions = new ExecutionOptions();    if (jsonObject.containsKey(\"failureAction\")) {      final String option = jsonObject.getString(\"failureAction\");      if (option.equals(\"finishCurrent\")) {        execOptions.setFailureAction(FailureAction.FINISH_CURRENTLY_RUNNING);      } else if (option.equals(\"cancelImmediately\")) {        execOptions.setFailureAction(FailureAction.CANCEL_ALL);      } else if (option.equals(\"finishPossible\")) {        execOptions.setFailureAction(FailureAction.FINISH_ALL_POSSIBLE);      } else if (option.equals(\"failedPause\")) {        execOptions.setFailureAction(FailureAction.FAILED_PAUSE);      }    }    if (jsonObject.containsKey(\"failureEmailsOverride\")) {      final boolean override = (Boolean) jsonObject.getOrDefault(\"failureEmailsOverride\", false);      execOptions.setFailureEmailsOverridden(override);    }    if (jsonObject.containsKey(\"successEmailsOverride\")) {      final boolean override = (Boolean) jsonObject.getOrDefault(\"successEmailsOverride\", false);      execOptions.setSuccessEmailsOverridden(override);    }    if (jsonObject.containsKey(\"failureEmails\")) {      final String emails = jsonObject.getString(\"failureEmails\");      if (!emails.isEmpty()) {        final String[] emailSplit = emails.split(\"\\\\s*,\\\\s*|\\\\s*;\\\\s*|\\\\s+\");        execOptions.setFailureEmails(Arrays.asList(emailSplit));      }    }    if (jsonObject.containsKey(\"successEmails\")) {      final String emails = jsonObject.getString(\"successEmails\");      if (!emails.isEmpty()) {        final String[] emailSplit = emails.split(\"\\\\s*,\\\\s*|\\\\s*;\\\\s*|\\\\s+\");        execOptions.setSuccessEmails(Arrays.asList(emailSplit));      }    }    if (jsonObject.containsKey(\"notifyFailureFirst\")) {      execOptions.setNotifyOnFirstFailure(Boolean.parseBoolean(jsonObject.getString(              \"notifyFailureFirst\")));    }    if (jsonObject.containsKey(\"notifyFailureLast\")) {      execOptions.setNotifyOnLastFailure(Boolean.parseBoolean(jsonObject.getString(              \"notifyFailureLast\")));    }    String concurrentOption = (String) jsonObject.getOrDefault(\"concurrentOption\", \"skip\");    execOptions.setConcurrentOption(concurrentOption);    if (concurrentOption.equals(\"pipeline\")) {      final int pipelineLevel = jsonObject.getIntValue( \"pipelineLevel\");      execOptions.setPipelineLevel(pipelineLevel);    } else if (concurrentOption.equals(\"queue\")) {      // Not yet implemented      final int queueLevel = (Integer) jsonObject.getOrDefault( \"queueLevel\", 1);      execOptions.setPipelineLevel(queueLevel);    }    String mailCreator = DefaultMailCreator.DEFAULT_MAIL_CREATOR;    if (jsonObject.containsKey(\"mailCreator\")) {      mailCreator = jsonObject.getString(\"mailCreator\");      execOptions.setMailCreator(mailCreator);    }    final Map<String, String> flowParamGroup = (Map<String, String>) jsonObject.get(\"flowOverride\");    execOptions.addAllFlowParameters(flowParamGroup);    if (jsonObject.containsKey(\"disabled\")) {      final String disabled = jsonObject.getString(\"disabled\");      if (!disabled.isEmpty()) {        final List<Object> disabledList =                (List<Object>) JSONUtils.parseJSONFromStringQuiet(disabled);        execOptions.setDisabledJobs(disabledList);      }    }    return execOptions;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "filterAdminOnlyFlowParams", "params": ["ExecutionOptions", "User"], "throws": ["ExecutorManagerException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void filterAdminOnlyFlowParams(final ExecutionOptions options, final User user)                                               throws ExecutorManagerException {    if (options == null || options.getFlowParameters() == null) {      return;    }    final Map<String, String> params = options.getFlowParameters();    // is azkaban Admin    if (!hasPermission(user, Type.ADMIN)) {      params.remove(ExecutionOptions.FLOW_PRIORITY);      params.remove(ExecutionOptions.USE_EXECUTOR);    } else {      validateIntegerParam(params, ExecutionOptions.FLOW_PRIORITY);      validateIntegerParam(params, ExecutionOptions.USE_EXECUTOR);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateIntegerParam", "params": ["Map<String,String>", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean validateIntegerParam(final Map<String, String> params,      final String paramName) throws ExecutorManagerException {    if (params != null && params.containsKey(paramName)        && !StringUtils.isNumeric(params.get(paramName))) {      throw new ExecutorManagerException(paramName + \" should be an integer\");    }    return true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasPermission", "params": ["User", "Permission"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean hasPermission(final User user, final Permission.Type type) {    for (final String roleName : user.getRoles()) {      final Role role = user.getRoleMap().get(roleName);      if (role !=null && role.getPermission().isPermissionSet(type)          || role.getPermission().isPermissionSet(Permission.Type.ADMIN)) {        return true;      }    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasParam", "params": ["HttpServletRequest", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean hasParam(final HttpServletRequest request, final String param) {    return request.getParameter(param) != null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParam", "params": ["HttpServletRequest", "String"], "throws": ["ServletException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String getParam(final HttpServletRequest request, final String name)      throws ServletException {    final String p = StringEscapeUtils.unescapeHtml(request.getParameter(name));    if (p == null) {      throw new ServletException(\"Missing required parameter '\" + name + \"'.\");    } else {      return p;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParam", "params": ["HttpServletRequest", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String getParam(final HttpServletRequest request, final String name,      final String defaultVal) {    final String p = request.getParameter(name);    if (p == null) {      return defaultVal;    }    return p;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIntParam", "params": ["HttpServletRequest", "String"], "throws": ["ServletException"], "modifiers": ["public", "static"], "return_type": "int", "snippet": "  public static int getIntParam(final HttpServletRequest request, final String name)      throws ServletException {    final String p = getParam(request, name);    return Integer.parseInt(p);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIntParam", "params": ["HttpServletRequest", "String", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "  public static int getIntParam(final HttpServletRequest request, final String name,      final int defaultVal) {    if (hasParam(request, name)) {      try {        return getIntParam(request, name);      } catch (final Exception e) {        return defaultVal;      }    }    return defaultVal;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBooleanParam", "params": ["HttpServletRequest", "String"], "throws": ["ServletException"], "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean getBooleanParam(final HttpServletRequest request, final String name)      throws ServletException {    final String p = getParam(request, name);    return Boolean.parseBoolean(p);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBooleanParam", "params": ["HttpServletRequest", "String", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean getBooleanParam(final HttpServletRequest request,      final String name, final boolean defaultVal) {    if (hasParam(request, name)) {      try {        return getBooleanParam(request, name);      } catch (final Exception e) {        return defaultVal;      }    }    return defaultVal;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLongParam", "params": ["HttpServletRequest", "String"], "throws": ["ServletException"], "modifiers": ["public", "static"], "return_type": "long", "snippet": "  public static long getLongParam(final HttpServletRequest request, final String name)      throws ServletException {    final String p = getParam(request, name);    return Long.valueOf(p);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLongParam", "params": ["HttpServletRequest", "String", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "  public static long getLongParam(final HttpServletRequest request, final String name,      final long defaultVal) {    if (hasParam(request, name)) {      try {        return getLongParam(request, name);      } catch (final Exception e) {        return defaultVal;      }    }    return defaultVal;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParamGroup", "params": ["HttpServletRequest", "String"], "throws": ["ServletException"], "modifiers": ["public", "static"], "return_type": "Map<String,String>", "snippet": "  public static Map<String, String> getParamGroup(final HttpServletRequest request,      final String groupName) throws ServletException {    final Enumeration<String> enumerate = request.getParameterNames();    final String matchString = groupName + \"[\";    final HashMap<String, String> groupParam = new HashMap<>();    while (enumerate.hasMoreElements()) {      final String str = (String) enumerate.nextElement();      if (str.startsWith(matchString)) {        groupParam.put(str.substring(matchString.length(), str.length() - 1),            request.getParameter(str));      }    }    return groupParam;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseWebOptions", "params": ["ExecutionOptions"], "throws": ["ServletException"], "modifiers": ["public", "static"], "return_type": "Map<String,Object>", "snippet": "  public static Map<String, Object> parseWebOptions(final ExecutionOptions flowOptions)      throws ServletException {    final Map<String, Object> responseMap = new HashMap<>();    if (null != flowOptions.getFailureAction()) {      final FailureAction failureOption = flowOptions.getFailureAction();      if(failureOption.equals(FailureAction.FINISH_CURRENTLY_RUNNING)){        responseMap.put(\"failureAction\",\"finishCurrent\");      } else if (failureOption.equals(FailureAction.CANCEL_ALL)){        responseMap.put(\"failureAction\",\"cancelImmediately\");      } else if (failureOption.equals(FailureAction.FINISH_ALL_POSSIBLE)){        responseMap.put(\"failureAction\",\"finishPossible\");      } else if (failureOption.equals(FailureAction.FAILED_PAUSE)) {        responseMap.put(\"failureAction\", \"failedPause\");      }    }    responseMap.put(\"failureEmailsOverridden\", flowOptions.isFailureEmailsOverridden());    responseMap.put(\"successEmailsOverridden\", flowOptions.isSuccessEmailsOverridden());    if(null != flowOptions.getFailureEmails()){      responseMap.put(\"failureEmails\", flowOptions.getFailureEmails());    }    if(null != flowOptions.getSuccessEmails()){      responseMap.put(\"successEmails\", flowOptions.getSuccessEmails());    }    responseMap.put(\"notifyOnFirstFailure\", flowOptions.getNotifyOnFirstFailure());    responseMap.put(\"notifyOnLastFailure\", flowOptions.getNotifyOnLastFailure());    responseMap.put(\"concurrentOption\", flowOptions.getConcurrentOption());    if(null != flowOptions.getPipelineLevel()){      responseMap.put(\"pipelineLevel\", flowOptions.getPipelineLevel());    }    responseMap.put(\"mailCreator\", flowOptions.getMailCreator());    responseMap.put(\"flowParameters\", flowOptions.getFlowParameters());    responseMap.put(\"disabledJobs\", flowOptions.getDisabledJobs());    return responseMap;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseRequestToJsonObject", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public", "static"], "return_type": "JSONObject", "snippet": "  public static JSONObject parseRequestToJsonObject(final HttpServletRequest request) {    JSONObject json = null;    BufferedReader br = null;    try {      br = new BufferedReader(new InputStreamReader(request.getInputStream(),\"utf-8\"));      String line = null;      StringBuilder sb = new StringBuilder();      while((line = br.readLine()) != null){        sb.append(line);      }      json = JSONObject.parseObject(sb.toString());    } catch (IOException io){      logger.error(\"IOException: {}\" , io);    }finally {      try {        if(br != null){          br.close();        }      }catch (IOException io){        logger.error(\"IOException: {}\" , io);      }    }    return json;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java", "stars": "18", "class": {"name": "HttpRequestUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "exec", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String exec(HttpServletRequest req, HttpServletResponse resp) {\t\t// TODO Auto-generated method stub\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/controller/member/JoinForm.java", "stars": "2", "class": {"name": "JoinForm", "extends": null, "implements": ["ClsController"], "modifiers": ["public"]}}, {"method_name": "parse", "params": ["String", "Configuration", "Action"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void parse(String inputPath, Configuration parseConf, Action action) {        org.apache.hadoop.conf.Configuration configuration = fileSystem.getConf();        LOG.info(\"Start to parse HFile: [\" + inputPath + \"] in HBASEV1HFileParser\");        try (HFile.Reader reader = HFile.createReader(fileSystem, new Path(inputPath),                new CacheConfig(configuration), configuration)) {            HFileScanner scanner = reader.getScanner(true, true);            if(null == parseConf){                parseConf = Configuration.from(\"{}\");                for(String parseColumn : PARSE_COLUMNS){                    parseConf.set(parseColumn, true);                }            }            reader.loadFileInfo();            if(scanner.seekTo()) {                do {                    //Cell entity                    Cell cell = scanner.getKeyValue();                    List<String> sourceList = new ArrayList<>();                    parseConf.getKeys().forEach(configKey -> {                        switch(configKey){                            case Key.HFILE_PARSE_ROW_KEY:                                sourceList.add(new String(CellUtil.cloneRow(cell), encoding));                                break;                            case Key.HFILE_PARSE_FAMILY:                                sourceList.add(new String(CellUtil.cloneFamily(cell), encoding));                                break;                            case Key.HFIEL_PARSE_QUALIFIER:                                sourceList.add(new String(CellUtil.cloneQualifier(cell), encoding));                                break;                            case Key.HFILE_PARSE_VALUE:                                sourceList.add(new String(CellUtil.cloneValue(cell), encoding));                                break;                            case Key.HFILE_TIMESTAMP:                                sourceList.add(String.valueOf(cell.getTimestamp()));                                break;                        }                    });                    String[] sourceLine = new String[sourceList.size()];                    sourceList.toArray(sourceLine);                    action.process(sourceLine);                } while (scanner.next());            }        } catch (IOException e) {            String message = \"\u89e3\u6790\u8bfb\u53d6[\" + inputPath + \"]\";            throw DataXException.asDataXException(HdfsReaderErrorCode.READ_HFILE_ERROR, message, e);        }        //Ignore exception    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/hfile/HBASEV1HFileParser.java", "stars": "23", "class": {"name": "HBASEV1HFileParser", "extends": null, "implements": ["HFileParser"], "modifiers": ["public"]}}, {"method_name": "salvar", "params": ["Cliente"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void salvar(Cliente cliente) {        em.persist(cliente);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/ClienteDaoImpl.java", "stars": "2", "class": {"name": "ClienteDaoImpl", "extends": null, "implements": ["ClienteDao"], "modifiers": ["public"]}}, {"method_name": "recuperar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Cliente>", "snippet": "    public List<Cliente> recuperar() {        return em.createQuery(\"select c from Cliente c\", Cliente.class).getResultList();    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/ClienteDaoImpl.java", "stars": "2", "class": {"name": "ClienteDaoImpl", "extends": null, "implements": ["ClienteDao"], "modifiers": ["public"]}}, {"method_name": "recuperarPorId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Cliente", "snippet": "    public Cliente recuperarPorId(Integer id) {        return em.find(Cliente.class, id);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/ClienteDaoImpl.java", "stars": "2", "class": {"name": "ClienteDaoImpl", "extends": null, "implements": ["ClienteDao"], "modifiers": ["public"]}}, {"method_name": "atualizar", "params": ["Cliente"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void atualizar(Cliente cliente) {        em.merge(cliente);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/ClienteDaoImpl.java", "stars": "2", "class": {"name": "ClienteDaoImpl", "extends": null, "implements": ["ClienteDao"], "modifiers": ["public"]}}, {"method_name": "excluir", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void excluir(Integer id) {        em.remove(em.getReference(Cliente.class, id));    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/ClienteDaoImpl.java", "stars": "2", "class": {"name": "ClienteDaoImpl", "extends": null, "implements": ["ClienteDao"], "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "String", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType)      throws SQLException {    StringReader reader = new StringReader(parameter);    ps.setCharacterStream(i, reader, parameter.length());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/NClobTypeHandler.java", "stars": "15", "class": {"name": "NClobTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getNullableResult(ResultSet rs, String columnName)      throws SQLException {    Clob clob = rs.getClob(columnName);    return toString(clob);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/NClobTypeHandler.java", "stars": "15", "class": {"name": "NClobTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    Clob clob = rs.getClob(columnIndex);    return toString(clob);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/NClobTypeHandler.java", "stars": "15", "class": {"name": "NClobTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    Clob clob = cs.getClob(columnIndex);    return toString(clob);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/NClobTypeHandler.java", "stars": "15", "class": {"name": "NClobTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": ["Clob"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "String", "snippet": "  private String toString(Clob clob) throws SQLException {    return clob == null ? null : clob.getSubString(1, (int) clob.length());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/NClobTypeHandler.java", "stars": "15", "class": {"name": "NClobTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "setStrokeColor", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStrokeColor(int color) {        mStrokeColor = color;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/widget/StrokedTextView.java", "stars": "4", "class": {"name": "StrokedTextView", "extends": "TextView", "implements": null, "modifiers": ["public"]}}, {"method_name": "setStrokeWidth", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStrokeWidth(int unit, int size) {        Context c = getContext();        Resources r;        if (c == null)            r = Resources.getSystem();        else            r = c.getResources();        mStrokeWidth = TypedValue.applyDimension(unit, size, r.getDisplayMetrics());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/widget/StrokedTextView.java", "stars": "4", "class": {"name": "StrokedTextView", "extends": "TextView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        ColorStateList states = getTextColors();        getPaint().setStyle(Paint.Style.STROKE);        getPaint().setStrokeWidth(mStrokeWidth);        setTextColor(mStrokeColor);        super.onDraw(canvas);        getPaint().setStyle(Paint.Style.FILL);        setTextColor(states);        super.onDraw(canvas);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/widget/StrokedTextView.java", "stars": "4", "class": {"name": "StrokedTextView", "extends": "TextView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        covidViewModel = ViewModelProviders.of(this).get(CovidViewModel.class);        // Inflate the layout for this fragment        return inflater.inflate(R.layout.fragment_county_home, container, false);    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/CountyHome.java", "stars": "2", "class": {"name": "CountyHome", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onViewCreated", "params": ["View", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        totalCaseTV = view.findViewById(R.id.totalCaseTV);        totalRecoverTV = view.findViewById(R.id.totalRecoveredTV);        totalDeathsTV = view.findViewById(R.id.totalDeathsTV);        activeCaseTV = view.findViewById(R.id.totalActiveCase);        criticalCaseTV = view.findViewById(R.id.criticalCaseTV);        todayCaseTV = view.findViewById(R.id.todayCaseTV);        todayDeathTV = view.findViewById(R.id.todayDeathTV);        updateTV = view.findViewById(R.id.updateTV);        dataProgress = view.findViewById(R.id.dataProgress);        flagimage = view.findViewById(R.id.flagimage);        dataProgress.setVisibility(View.VISIBLE);        covidViewModel.getCountyWiseData(\"countries/Bangladesh\").observe(getActivity(), new Observer<CountryWiseCasePojo>() {            @Override            public void onChanged(CountryWiseCasePojo countryWiseCasePojo) {                if (0<countryWiseCasePojo.getUpdated())                {                    dataProgress.setVisibility(View.GONE);                }                totalCaseTV.setText(countryWiseCasePojo.getCases());                totalRecoverTV.setText(countryWiseCasePojo.getRecovered());                totalDeathsTV.setText(countryWiseCasePojo.getDeaths());                activeCaseTV.setText(countryWiseCasePojo.getActive());                criticalCaseTV.setText(countryWiseCasePojo.getCritical());                todayCaseTV.setText(countryWiseCasePojo.getTodayCases());                todayDeathTV.setText(countryWiseCasePojo.getTodayDeaths());                updateTV.setText(Utils.getDateFormat(countryWiseCasePojo.getUpdated()));                Picasso.get().load(countryWiseCasePojo.getCountryInfo().getFlag()).into(flagimage);            }        });    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/CountyHome.java", "stars": "2", "class": {"name": "CountyHome", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "testSoftDeletedEntityShouldNotBeRetrieved", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testSoftDeletedEntityShouldNotBeRetrieved() {        User user = new User();        user.setLogin(\"testlogin\");        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setEmail(RandomStringUtils.randomAlphabetic(5) + \"@test.com\");        user.setFirstName(\"test\");        user.setLastName(\"test\");        user.setBankAccountIBAN(DEFAULT_IBAN);        user = userRepository.saveAndFlush(user);        GardenField gardenField = new GardenField();        gardenField.setName(\"test field\");        gardenField.setCity(\"test city\");        gardenField.setLongitude(1.0);        gardenField.setLatitude(1.0);        gardenField.setOwner(user);        gardenField.setPricePerM2(1.0);        gardenField.setSizeInM2(10.0);        gardenFieldRepository.saveAndFlush(gardenField);        leasingRepository.deleteAll();        Leasing leasing = new Leasing();        leasing.from(Instant.now());        leasing.to(Instant.now().plusSeconds(10000));        leasing.status(LeasingStatus.OPEN);        leasing.setUser(user);        leasing.setGardenField(gardenField);        leasing.setPaymentSessionId(DEFAULT_PAYMENT_SESSION_ID);        leasingRepository.saveAndFlush(leasing);        assertThat(leasingRepository.findAll()).containsExactly(leasing);        leasing.setDeleted(Instant.now());        leasingRepository.saveAndFlush(leasing);        assertThat(leasingRepository.findAll()).isEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/LeasingRepositoryTest.java", "stars": "2", "class": {"name": "LeasingRepositoryTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["android", "android", "android"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.View onCreateView (android.view.LayoutInflater p0, android.view.ViewGroup p1, android.os.Bundle p2)\t{\t\treturn n_onCreateView (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellItemRenderer.java", "stars": "2", "class": {"name": "ShellItemRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onCreateView", "params": ["android", "android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.View n_onCreateView (android.view.LayoutInflater p0, android.view.ViewGroup p1, android.os.Bundle p2);\tpublic void onDestroy ()\t{\t\tn_onDestroy ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellItemRenderer.java", "stars": "2", "class": {"name": "ShellItemRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDestroy ()\t{\t\tn_onDestroy ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellItemRenderer.java", "stars": "2", "class": {"name": "ShellItemRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDestroy", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDestroy ();\tpublic boolean onNavigationItemSelected (android.view.MenuItem p0)\t{\t\treturn n_onNavigationItemSelected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellItemRenderer.java", "stars": "2", "class": {"name": "ShellItemRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onNavigationItemSelected", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onNavigationItemSelected (android.view.MenuItem p0)\t{\t\treturn n_onNavigationItemSelected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellItemRenderer.java", "stars": "2", "class": {"name": "ShellItemRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onNavigationItemSelected", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onNavigationItemSelected (android.view.MenuItem p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellItemRenderer.java", "stars": "2", "class": {"name": "ShellItemRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellItemRenderer.java", "stars": "2", "class": {"name": "ShellItemRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellItemRenderer.java", "stars": "2", "class": {"name": "ShellItemRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t  public void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.main);\t \t\taddListenerOnChkIos();\t\taddListenerOnButton();\t  }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/MyAndroidAppActivity/src/com/example/myandroidappactivity/MyAndroidAppActivity.java", "stars": "74", "class": {"name": "MyAndroidAppActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "addListenerOnChkIos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t  public void addListenerOnChkIos() {\t \t\tchkIos = (CheckBox) findViewById(R.id.chkIos);\t \t\tchkIos.setOnClickListener(new OnClickListener() {\t \t\t  @Override\t\t  public void onClick(View v) {\t                //is chkIos checked?\t\t\tif (((CheckBox) v).isChecked()) {\t\t\t\tToast.makeText(MyAndroidAppActivity.this,\t\t\t \t   \"Bro, try Android :)\", Toast.LENGTH_LONG).show();\t\t\t}\t \t\t  }\t\t});\t \t  }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/MyAndroidAppActivity/src/com/example/myandroidappactivity/MyAndroidAppActivity.java", "stars": "74", "class": {"name": "MyAndroidAppActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "addListenerOnButton", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t  public void addListenerOnButton() {\t \t\tchkIos = (CheckBox) findViewById(R.id.chkIos);\t\tchkAndroid = (CheckBox) findViewById(R.id.chkAndroid);\t\tchkWindows = (CheckBox) findViewById(R.id.chkWindows);\t\tchktry=(CheckBox) findViewById(R.id.chkhbid);\t\tbtnDisplay = (Button) findViewById(R.id.btnDisplay);\t\t\t \t\tbtnDisplay.setOnClickListener(new OnClickListener() {\t \t          //Run when button is clicked\t\t  @Override\t\t  public void onClick(View v) {\t \t\t\tStringBuffer result = new StringBuffer();\t\t\tresult.append(\"IPhone check : \").append(chkIos.isChecked());\t\t\tresult.append(\"\\nAndroid check : \").append(chkAndroid.isChecked());\t\t\tresult.append(\"\\nWindows Mobile check :\").append(chkWindows.isChecked());\t\t\tresult.append(\"\\nhbtry check:\").append(chktry.isChecked());\t\t\tToast.makeText(MyAndroidAppActivity.this, result.toString(),\t\t\t\t\tToast.LENGTH_LONG).show();\t \t\t  }\t\t});\t \t  }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/MyAndroidAppActivity/src/com/example/myandroidappactivity/MyAndroidAppActivity.java", "stars": "74", "class": {"name": "MyAndroidAppActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws Exception {\t\tnew SpringApplicationBuilder(Parent.class).child(SampleParentContextApplication.class).run(args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/main/java/smoketest/parent/SampleParentContextApplication.java", "stars": "47572", "class": {"name": "SampleParentContextApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fileReader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FileReadingMessageSource", "snippet": "\t\tpublic FileReadingMessageSource fileReader() {\t\t\tFileReadingMessageSource reader = new FileReadingMessageSource();\t\t\treader.setDirectory(this.serviceProperties.getInputDir());\t\t\treturn reader;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/main/java/smoketest/parent/SampleParentContextApplication.java", "stars": "47572", "class": {"name": "Parent", "extends": null, "implements": null, "modifiers": ["static", "protected"]}}, {"method_name": "inputChannel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DirectChannel", "snippet": "\t\tpublic DirectChannel inputChannel() {\t\t\treturn new DirectChannel();\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/main/java/smoketest/parent/SampleParentContextApplication.java", "stars": "47572", "class": {"name": "Parent", "extends": null, "implements": null, "modifiers": ["static", "protected"]}}, {"method_name": "outputChannel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DirectChannel", "snippet": "\t\tpublic DirectChannel outputChannel() {\t\t\treturn new DirectChannel();\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/main/java/smoketest/parent/SampleParentContextApplication.java", "stars": "47572", "class": {"name": "Parent", "extends": null, "implements": null, "modifiers": ["static", "protected"]}}, {"method_name": "fileWriter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FileWritingMessageHandler", "snippet": "\t\tpublic FileWritingMessageHandler fileWriter() {\t\t\tFileWritingMessageHandler writer = new FileWritingMessageHandler(this.serviceProperties.getOutputDir());\t\t\twriter.setExpectReply(false);\t\t\treturn writer;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/main/java/smoketest/parent/SampleParentContextApplication.java", "stars": "47572", "class": {"name": "Parent", "extends": null, "implements": null, "modifiers": ["static", "protected"]}}, {"method_name": "integrationFlow", "params": ["SampleEndpoint"], "throws": null, "modifiers": ["public"], "return_type": "IntegrationFlow", "snippet": "\t\tpublic IntegrationFlow integrationFlow(SampleEndpoint endpoint) {\t\t\treturn IntegrationFlows.from(fileReader(), new FixedRatePoller()).channel(inputChannel()).handle(endpoint)\t\t\t\t\t.channel(outputChannel()).handle(fileWriter()).get();\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/main/java/smoketest/parent/SampleParentContextApplication.java", "stars": "47572", "class": {"name": "Parent", "extends": null, "implements": null, "modifiers": ["static", "protected"]}}, {"method_name": "accept", "params": ["SourcePollingChannelAdapterSpec"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\t\tpublic void accept(SourcePollingChannelAdapterSpec spec) {\t\t\t\tspec.poller(Pollers.fixedRate(500));\t\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/main/java/smoketest/parent/SampleParentContextApplication.java", "stars": "47572", "class": {"name": "FixedRatePoller", "extends": null, "implements": ["Consumer"], "modifiers": ["private", "static"]}}, {"method_name": "gerarMelhorNotaPlataforma", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void gerarMelhorNotaPlataforma(){        String line = \"\";                               Map<String, Info> map = new TreeMap<>();                      File arq = new File(\"game-reviews.csv\");        SimpleReader file = new SimpleReader(arq.getAbsolutePath());        line = file.readLine();        line = file.readLine();                                      while (line != null) {            String[] col = line.split(\";\");                        String nomeJogo = col[0];            String platform = col[1]; //KEY            String score = col[3];                                                if (!map.containsKey(platform)) {                Info i = new Info();                i.nomeJogoMelhorScore = nomeJogo;                                i.melhorScore = Double.parseDouble(score);                                                               map.put(platform, i);                            }              else{                            if ( Double.parseDouble(score) >= map.get(platform).melhorScore ) {                                        Info novoMelhor = new Info();                                    novoMelhor.nomeJogoMelhorScore = nomeJogo;                    novoMelhor.melhorScore = Double.parseDouble(score);                                        map.replace(platform, novoMelhor);                                    }            }            line = file.readLine();        }                                Set<Map.Entry<String, Info>> set = map.entrySet();                set.forEach((result) -> {                                      System.out.println(\"Plataforma \" + result.getKey() +             \" | Melhor Jogo -> \"+result.getValue().nomeJogoMelhorScore +\" com nota \"+result.getValue().melhorScore);        });                            }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/GeradorLista/MelhorNotaPlataforma.java", "stars": "2", "class": {"name": "MelhorNotaPlataforma", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        // \u4f7f\u7528 Paint.setStrokeCap() \u6765\u8bbe\u7f6e\u7aef\u70b9\u5f62\u72b6        // \u7b2c\u4e00\u4e2a\uff1aBUTT        paint.setStrokeCap(Paint.Cap.BUTT);        canvas.drawLine(50, 50, 400, 50, paint);        // \u7b2c\u4e8c\u4e2a\uff1aROUND        paint.setStrokeCap(Paint.Cap.ROUND);        canvas.drawLine(50, 150, 400, 150, paint);        // \u7b2c\u4e09\u4e2a\uff1aSQUARE        paint.setStrokeCap(Paint.Cap.SQUARE);        canvas.drawLine(50, 250, 400, 250, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson2/Practice09StrokeCapView.java", "stars": "2", "class": {"name": "Practice09StrokeCapView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "handle", "params": ["WxMpXmlMessage", "Map<String,Object>", "WxMpService", "WxSessionManager"], "throws": null, "modifiers": ["public"], "return_type": "WxMpXmlOutMessage", "snippet": "  public WxMpXmlOutMessage handle(WxMpXmlMessage wxMessage,                                  Map<String, Object> context, WxMpService wxMpService,                                  WxSessionManager sessionManager) {    this.logger.info(\"\\n\u63a5\u6536\u5230\u8bf7\u6c42\u6d88\u606f\uff0c\u5185\u5bb9\uff1a{}\", JsonUtils.toJson(wxMessage));    return null;  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/handler/LogHandler.java", "stars": "2", "class": {"name": "LogHandler", "extends": "AbstractHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_projects_view);        findViews();        initLogic();    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/activity/ProjectsViewActivity.java", "stars": "4", "class": {"name": "ProjectsViewActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "findViews", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void findViews () {        recyclerView = findViewById(R.id.list);        toolbar = findViewById(R.id.toolbar);    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/activity/ProjectsViewActivity.java", "stars": "4", "class": {"name": "ProjectsViewActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initLogic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initLogic () {        setSupportActionBar(toolbar);        toolbar.setNavigationOnClickListener(v -> finish());        toolbar.setTitle(getIntent().getStringExtra(\"title\"));        arrayList = new Gson().fromJson(getIntent().getStringExtra(\"projects\"), new TypeToken<ArrayList<Project>>() {        }.getType());        new ThreadLoader(() -> {            recyclerView.setLayoutManager(new GridAutofitLayoutManager(ProjectsViewActivity.this, MathUtil.toDp(80, getApplicationContext())));            adapter = new ProjectsAdapter(arrayList, ProjectsViewActivity.this);        }, () -> recyclerView.setAdapter(adapter));    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/activity/ProjectsViewActivity.java", "stars": "4", "class": {"name": "ProjectsViewActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPage() {        return page;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/PageQuery.java", "stars": "23", "class": {"name": "PageQuery", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "setPage", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPage(int pageNo) {        this.page = pageNo;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/PageQuery.java", "stars": "23", "class": {"name": "PageQuery", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getPageSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPageSize() {        return pageSize;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/PageQuery.java", "stars": "23", "class": {"name": "PageQuery", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "setPageSize", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageSize(int pageSize) {        this.pageSize = pageSize;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/PageQuery.java", "stars": "23", "class": {"name": "PageQuery", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"page:\" + page + \",pageSize:\" + pageSize;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/PageQuery.java", "stars": "23", "class": {"name": "PageQuery", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "expection2Str", "params": ["Exception"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String expection2Str(Exception e) {        String result = e.getMessage() + \";\";        for (StackTraceElement stack : e.getStackTrace()) {            result += stack.toString() + \";\";        }        return result.substring(0, result.length() - 1).replaceAll(\"\\n\", \",\");    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/utils/LogbackUtil.java", "stars": "13", "class": {"name": "LogbackUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/ParentBean.java", "stars": "15", "class": {"name": "ParentBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/ParentBean.java", "stars": "15", "class": {"name": "ParentBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getValue() {    return value;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/ParentBean.java", "stars": "15", "class": {"name": "ParentBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValue", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setValue(String value) {    this.value = value;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/ParentBean.java", "stars": "15", "class": {"name": "ParentBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getChilds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Binome>", "snippet": "  public List<Binome<ChildBean, ChildBean>> getChilds() {    return childs;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/ParentBean.java", "stars": "15", "class": {"name": "ParentBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setChilds", "params": ["List<Binome>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setChilds(List<Binome<ChildBean, ChildBean>> childs) {    this.childs = childs;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/ParentBean.java", "stars": "15", "class": {"name": "ParentBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    StringBuilder sb = new StringBuilder(\"ParentBean [id=\" + id + \", value=\"        + value + \"]\\nChilds:\\n\");    for (Binome<ChildBean, ChildBean> binome : childs) {      sb.append(\"\\tChild : \").append(binome).append('\\n');    }    return sb.toString();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/ParentBean.java", "stars": "15", "class": {"name": "ParentBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toArticle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Article", "snippet": "    public Article toArticle() {        Article article = new Article();        if (this.getId() != null) {            article.setId(this.getId());        }        if (this.getAuthor() != null) {            article.setAuthor(this.getAuthor());        }        if (this.getContent() != null) {            article.setContent(this.getContent());        }        if (this.getContentMd() != null) {            article.setContentMd(this.getContentMd());        }        if (this.getCover() != null) {            article.setCover(this.getCover());        }        if (this.getCreateTime() != null) {            article.setCreateTime(this.getCreateTime());        }        if (this.getEditTime() != null) {            article.setEditTime(this.getEditTime());        }        if (this.getOrigin() != null) {            article.setOrigin(this.getOrigin());        }        if (this.getState() != null) {            article.setState(this.getState());        }        if (this.getSummary() != null) {            article.setSummary(this.getSummary());        }        if (this.getTitle() != null) {            article.setTitle(this.getTitle());        }        if (this.getType() != null) {            article.setType(this.getType());        }        if (this.getViews() != null) {            article.setViews(this.getViews());        }        return article;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/vo/ArticleTagsVO.java", "stars": "1", "class": {"name": "ArticleTagsVO", "extends": "Article", "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clear(boolean deallocate) {\t\tif (deallocate) regions = new long[1][LONGS_PER_REGION];\t\ttopRegion=0; topPointer=-1;\t\tnElements=0;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/SimpleStream.java", "stars": "2", "class": {"name": "SimpleStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deallocate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void deallocate() {\t\tint nRegions = regions.length;\t\tfor (int i=0; i<nRegions; i++) regions[i]=null;\t\tregions=null;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/SimpleStream.java", "stars": "2", "class": {"name": "SimpleStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nElements", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long nElements() {\t\treturn nElements;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/SimpleStream.java", "stars": "2", "class": {"name": "SimpleStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "push", "params": ["long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void push(long value) {\t\tif (topPointer==LONGS_PER_REGION-1) {\t\t\tint nRegions = regions.length;\t\t\tif (topRegion==nRegions-1) {\t\t\t\tlong[][] newRegions = new long[nRegions<<1][0];\t\t\t\tSystem.arraycopy(regions,0,newRegions,0,nRegions);\t\t\t\tregions=newRegions;\t\t\t}\t\t\ttopRegion++;\t\t\tregions[topRegion] = new long[LONGS_PER_REGION];\t\t\ttopPointer=0;\t\t}\t\telse topPointer++;\t\tregions[topRegion][topPointer]=value;\t\tnElements++;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/SimpleStream.java", "stars": "2", "class": {"name": "SimpleStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pop", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void pop() {\t\tnElements--;\t\tif (topPointer==0) {\t\t\tregions[topRegion]=null;\t\t\ttopRegion--;\t\t\ttopPointer=LONGS_PER_REGION-1;\t\t}\t\telse topPointer--;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/SimpleStream.java", "stars": "2", "class": {"name": "SimpleStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getElementAt", "params": ["long"], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long getElementAt(long i) {\t\tint pointer = (int)(i&Utils.shiftOnesRight[SIXTYFOUR_MINUS_LOG2_LONGS_PER_REGION]);\t\ti>>>=LOG2_LONGS_PER_REGION;\t\treturn regions[(int)i][pointer];\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/SimpleStream.java", "stars": "2", "class": {"name": "SimpleStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "binarySearch", "params": ["long", "long", "long"], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long binarySearch(long fromIndex, long toIndex, long key) {\t\tlong a, z, m, value;\t\ta=fromIndex;\t\tz=toIndex-1;\t\tdo {\t\t\tm=(z+a)>>1;\t\t\tvalue=getElementAt(m);\t\t\tif (key==value) {\t\t\t\tz=a=m;\t\t\t\tbreak;\t\t\t}\t\t\telse if (key<value) z=m-1;\t\t\telse a=m+1;\t\t}\t\twhile (z>a);\t\tif (a==z) return a;\t\telse return -1;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/SimpleStream.java", "stars": "2", "class": {"name": "SimpleStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onStartup", "params": ["ServletContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStartup(ServletContext servletContext) {        if (env.getActiveProfiles().length != 0) {            log.info(\"Web application configuration, using profiles: {}\", env.getActiveProfiles());        }        EnumSet<DispatcherType> disps = EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.ASYNC);        if (env.acceptsProfiles(Profiles.of(JHipsterConstants.SPRING_PROFILE_PRODUCTION))) {            initCachingHttpHeadersFilter(servletContext, disps);        }        log.info(\"Web application fully configured\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/WebConfigurer.java", "stars": "2", "class": {"name": "WebConfigurer", "extends": null, "implements": ["ServletContextInitializer", "WebServerFactoryCustomizer"], "modifiers": ["public"]}}, {"method_name": "customize", "params": ["WebServerFactory"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void customize(WebServerFactory server) {        setMimeMappings(server);        // When running in an IDE or with ./mvnw spring-boot:run, set location of the static web assets.        setLocationForStaticAssets(server);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/WebConfigurer.java", "stars": "2", "class": {"name": "WebConfigurer", "extends": null, "implements": ["ServletContextInitializer", "WebServerFactoryCustomizer"], "modifiers": ["public"]}}, {"method_name": "setMimeMappings", "params": ["WebServerFactory"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setMimeMappings(WebServerFactory server) {        if (server instanceof ConfigurableServletWebServerFactory) {            MimeMappings mappings = new MimeMappings(MimeMappings.DEFAULT);            // IE issue, see https://github.com/jhipster/generator-jhipster/pull/711            mappings.add(\"html\", MediaType.TEXT_HTML_VALUE + \";charset=\" + StandardCharsets.UTF_8.name().toLowerCase());            // CloudFoundry issue, see https://github.com/cloudfoundry/gorouter/issues/64            mappings.add(\"json\", MediaType.TEXT_HTML_VALUE + \";charset=\" + StandardCharsets.UTF_8.name().toLowerCase());            ConfigurableServletWebServerFactory servletWebServer = (ConfigurableServletWebServerFactory) server;            servletWebServer.setMimeMappings(mappings);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/WebConfigurer.java", "stars": "2", "class": {"name": "WebConfigurer", "extends": null, "implements": ["ServletContextInitializer", "WebServerFactoryCustomizer"], "modifiers": ["public"]}}, {"method_name": "setLocationForStaticAssets", "params": ["WebServerFactory"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setLocationForStaticAssets(WebServerFactory server) {        if (server instanceof ConfigurableServletWebServerFactory) {            ConfigurableServletWebServerFactory servletWebServer = (ConfigurableServletWebServerFactory) server;            File root;            String prefixPath = resolvePathPrefix();            root = new File(prefixPath + \"target/classes/static/\");            if (root.exists() && root.isDirectory()) {                servletWebServer.setDocumentRoot(root);            }        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/WebConfigurer.java", "stars": "2", "class": {"name": "WebConfigurer", "extends": null, "implements": ["ServletContextInitializer", "WebServerFactoryCustomizer"], "modifiers": ["public"]}}, {"method_name": "resolvePathPrefix", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String resolvePathPrefix() {        String fullExecutablePath;        try {            fullExecutablePath = decode(this.getClass().getResource(\"\").getPath(), StandardCharsets.UTF_8.name());        } catch (UnsupportedEncodingException e) {            /* try without decoding if this ever happens */            fullExecutablePath = this.getClass().getResource(\"\").getPath();        }        String rootPath = Paths.get(\".\").toUri().normalize().getPath();        String extractedPath = fullExecutablePath.replace(rootPath, \"\");        int extractionEndIndex = extractedPath.indexOf(\"target/\");        if (extractionEndIndex <= 0) {            return \"\";        }        return extractedPath.substring(0, extractionEndIndex);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/WebConfigurer.java", "stars": "2", "class": {"name": "WebConfigurer", "extends": null, "implements": ["ServletContextInitializer", "WebServerFactoryCustomizer"], "modifiers": ["public"]}}, {"method_name": "initCachingHttpHeadersFilter", "params": ["ServletContext", "EnumSet<DispatcherType>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initCachingHttpHeadersFilter(ServletContext servletContext,                                              EnumSet<DispatcherType> disps) {        log.debug(\"Registering Caching HTTP Headers Filter\");        FilterRegistration.Dynamic cachingHttpHeadersFilter =            servletContext.addFilter(\"cachingHttpHeadersFilter\",                new CachingHttpHeadersFilter(jHipsterProperties));        cachingHttpHeadersFilter.addMappingForUrlPatterns(disps, true, \"/i18n/*\");        cachingHttpHeadersFilter.addMappingForUrlPatterns(disps, true, \"/content/*\");        cachingHttpHeadersFilter.addMappingForUrlPatterns(disps, true, \"/app/*\");        cachingHttpHeadersFilter.setAsyncSupported(true);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/WebConfigurer.java", "stars": "2", "class": {"name": "WebConfigurer", "extends": null, "implements": ["ServletContextInitializer", "WebServerFactoryCustomizer"], "modifiers": ["public"]}}, {"method_name": "corsFilter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CorsFilter", "snippet": "    public CorsFilter corsFilter() {        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();        CorsConfiguration config = jHipsterProperties.getCors();        if (config.getAllowedOrigins() != null && !config.getAllowedOrigins().isEmpty()) {            log.debug(\"Registering CORS filter\");            source.registerCorsConfiguration(\"/api/v1/**\", config);            source.registerCorsConfiguration(\"/management/**\", config);            source.registerCorsConfiguration(\"/v2/api-docs\", config);        }        return new CorsFilter(source);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/WebConfigurer.java", "stars": "2", "class": {"name": "WebConfigurer", "extends": null, "implements": ["ServletContextInitializer", "WebServerFactoryCustomizer"], "modifiers": ["public"]}}, {"method_name": "enable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void enable() {        PLUGIN_PATH = getDataFolder().getAbsolutePath();        this.limitsManager = new LimitsManager(this);        this.commandManager = new PaperCommandManager(this);        this.commandManager.registerCommand(new LimitsCommand(getLimitsManager()));        load();    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/LimitsPlugin.java", "stars": "3", "class": {"name": "LimitsPlugin", "extends": "BasePlugin", "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void load() {        getLimitsManager().load();    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/LimitsPlugin.java", "stars": "3", "class": {"name": "LimitsPlugin", "extends": "BasePlugin", "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "disable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disable() {        getLimitsManager().unload();    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/LimitsPlugin.java", "stars": "3", "class": {"name": "LimitsPlugin", "extends": "BasePlugin", "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "serialize", "params": ["T"], "throws": ["SerializationException"], "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] serialize(T t) throws SerializationException {        if (t == null) {            return new byte[0];        }        return JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-main/src/main/java/com/cgb/bcpinstall/main/config/FastJson2JsonRedisSerializer.java", "stars": "7", "class": {"name": "FastJson2JsonRedisSerializer", "extends": null, "implements": ["RedisSerializer"], "modifiers": ["public"]}}, {"method_name": "deserialize", "params": ["byte"], "throws": ["SerializationException"], "modifiers": ["public"], "return_type": "T", "snippet": "    public T deserialize(byte[] bytes) throws SerializationException {        if (bytes == null || bytes.length <= 0) {            return null;        }        String str = new String(bytes, DEFAULT_CHARSET);        return (T) JSON.parseObject(str, clazz);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-main/src/main/java/com/cgb/bcpinstall/main/config/FastJson2JsonRedisSerializer.java", "stars": "7", "class": {"name": "FastJson2JsonRedisSerializer", "extends": null, "implements": ["RedisSerializer"], "modifiers": ["public"]}}, {"method_name": "newThread", "params": ["Runnable"], "throws": null, "modifiers": ["public"], "return_type": "Thread", "snippet": "    public Thread newThread(Runnable r) {        Thread thread = new Thread(group, r, namePrefix + threadNumber.getAndIncrement(), 0);        if (thread.isDaemon()) {            thread.setDaemon(false);        }        //\u8bbe\u7f6e\u7ebf\u7a0b\u4f18\u5148\u7ea7        if (thread.getPriority() != Thread.NORM_PRIORITY) {            thread.setPriority(Thread.NORM_PRIORITY);        }        return thread;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/logic/DefaultThreadFactory.java", "stars": "1", "class": {"name": "DefaultThreadFactory", "extends": null, "implements": ["ThreadFactory"], "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.activity_get_bit;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/GetBitActivity.java", "stars": "1", "class": {"name": "GetBitActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/GetBitActivity.java", "stars": "1", "class": {"name": "GetBitActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/GetBitActivity.java", "stars": "1", "class": {"name": "GetBitActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_lesson5);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson5Activity.java", "stars": "2", "class": {"name": "Lesson5Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "animTranslation", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void animTranslation(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.ANIM_TRANSLATE.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson5Activity.java", "stars": "2", "class": {"name": "Lesson5Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "animRotation", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void animRotation(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.ANIM_ROTATION.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson5Activity.java", "stars": "2", "class": {"name": "Lesson5Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "animScale", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void animScale(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.ANIM_SCALE.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson5Activity.java", "stars": "2", "class": {"name": "Lesson5Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "animAlpha", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void animAlpha(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.ANIM_ALPHA.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson5Activity.java", "stars": "2", "class": {"name": "Lesson5Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "animMultiProperties", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void animMultiProperties(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.ANIM_MULTI_PROPERTIES.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson5Activity.java", "stars": "2", "class": {"name": "Lesson5Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "animDuration", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void animDuration(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.ANIM_DURATION.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson5Activity.java", "stars": "2", "class": {"name": "Lesson5Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "animInterpolator", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void animInterpolator(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.ANIM_INTERPOLATOR.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson5Activity.java", "stars": "2", "class": {"name": "Lesson5Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "animObjectAnimator", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void animObjectAnimator(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.ANIM_OBJECT_ANIMATOR.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson5Activity.java", "stars": "2", "class": {"name": "Lesson5Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "setApplicationContext", "params": ["ApplicationContext"], "throws": ["BeansException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setApplicationContext(ApplicationContext app) throws BeansException {        applicationContext = app;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/spring/AppUtil.java", "stars": "23", "class": {"name": "AppUtil", "extends": null, "implements": ["ApplicationContextAware", "ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "onApplicationEvent", "params": ["WebServerInitializedEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onApplicationEvent(WebServerInitializedEvent webServerInitializedEvent) {        port = String.valueOf(webServerInitializedEvent.getWebServer().getPort());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/spring/AppUtil.java", "stars": "23", "class": {"name": "AppUtil", "extends": null, "implements": ["ApplicationContextAware", "ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "getBean", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object getBean(String name){        return applicationContext.getBean(name);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/spring/AppUtil.java", "stars": "23", "class": {"name": "AppUtil", "extends": null, "implements": ["ApplicationContextAware", "ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "getBean", "params": ["Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T getBean(Class<T> clazz){        return applicationContext.getBean(clazz);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/spring/AppUtil.java", "stars": "23", "class": {"name": "AppUtil", "extends": null, "implements": ["ApplicationContextAware", "ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "getBean", "params": ["String", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T getBean(String name, Class<T> clazz){        return applicationContext.getBean(name, clazz);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/spring/AppUtil.java", "stars": "23", "class": {"name": "AppUtil", "extends": null, "implements": ["ApplicationContextAware", "ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "getIpAndPort", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getIpAndPort(){        String ip = null;        try {            ip = Inet4Address.getLocalHost().getHostAddress();        } catch (UnknownHostException e) {            ip = \"127.0.0.1\";        }        return String.format(\"http://%s:%s\", ip, port);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/spring/AppUtil.java", "stars": "23", "class": {"name": "AppUtil", "extends": null, "implements": ["ApplicationContextAware", "ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "newFileName", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String newFileName(String originName){        String newName = UUID.randomUUID().toString().replace(\"-\", \"\");        if(StringUtils.isNotBlank(originName)){            int index = originName.lastIndexOf(\".\");            if(index >= 0){                newName += originName.substring(index);            }        }        return newName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/spring/AppUtil.java", "stars": "23", "class": {"name": "AppUtil", "extends": null, "implements": ["ApplicationContextAware", "ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "removeFile", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void removeFile(String source){        HttpURLConnection connection = null;        try{            if(source.startsWith(HTTP_HEADER)){                String ip;                try {                    ip = InetAddress.getLocalHost().getHostAddress();                } catch (UnknownHostException e) {                    ip = LOCAL_ADDR;                }                if(source.substring(HTTP_HEADER.length()).startsWith(ip)) {                    source = source.replace(ip, LOCAL_ADDR);                }                connection = (HttpURLConnection)new URL(source).openConnection();                connection.addRequestProperty(\"Cookie\",AuthConstraints.DEFAULT_SSO_COOKIE + \"=\"                        + System.getProperty(AuthConstraints.ENV_SERV_TOKEN));                connection.setRequestMethod(\"DELETE\");                connection.setConnectTimeout(2000);                connection.setReadTimeout(5000);                connection.setDoOutput(true);                connection.setDoOutput(true);                connection.connect();            }        }catch(IOException e){            throw new RuntimeException(e);        }finally{            if(null != connection){                connection.disconnect();            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/spring/AppUtil.java", "stars": "23", "class": {"name": "AppUtil", "extends": null, "implements": ["ApplicationContextAware", "ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "downloadFile", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void downloadFile(String source, String dst){        FileOutputStream out = null;        InputStream in = null;        try {            out = new FileOutputStream(dst);            if(source.startsWith(HTTP_HEADER)){                String ip;                try {                     ip = InetAddress.getLocalHost().getHostAddress();                } catch (UnknownHostException e) {                    ip = LOCAL_ADDR;                }                if(source.substring(HTTP_HEADER.length()).startsWith(ip)) {                    source = source.replace(ip, LOCAL_ADDR);                }                HttpURLConnection conn = null;                try {                    conn = (HttpURLConnection)new URL(source).openConnection();                    conn.addRequestProperty(\"Cookie\",AuthConstraints.DEFAULT_SSO_COOKIE + \"=\"                            + System.getProperty(AuthConstraints.ENV_SERV_TOKEN));                    logger.info(\"Cookie: \" + AuthConstraints.DEFAULT_SSO_COOKIE + \"=\"                            + System.getProperty(AuthConstraints.ENV_SERV_TOKEN));                    conn.setRequestMethod(\"GET\");                    conn.setConnectTimeout(2000);                    conn.setReadTimeout(5000);                    conn.setDoOutput(true);                    conn.setDoInput(true);                    conn.connect();                    in = conn.getInputStream();                    IOUtils.copy(in, out);                } finally{                    if(null != conn){                        conn.disconnect();                    }                }            }else{                try {                    in = new FileInputStream(dst);                    IOUtils.copy(in, out);                }finally {                    if(null != in){                        in.close();                    }                }            }        } catch (IOException e) {            throw new RuntimeException(e);        } finally{            if(null != out){                try {                    out.close();                } catch (IOException e) {                    logger.error(e.getMessage());                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/spring/AppUtil.java", "stars": "23", "class": {"name": "AppUtil", "extends": null, "implements": ["ApplicationContextAware", "ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "getCookieValue", "params": ["HttpServletRequest", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getCookieValue(HttpServletRequest request, String name){        Cookie[] cookies = request.getCookies();        if(null != cookies) {            for (Cookie cookie : cookies) {                if (cookie.getName().equals(name) && StringUtils.isNotBlank(cookie.getValue())) {                    return cookie.getValue();                }            }        }        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/spring/AppUtil.java", "stars": "23", "class": {"name": "AppUtil", "extends": null, "implements": ["ApplicationContextAware", "ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "isAjax", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isAjax(HttpServletRequest request){        return request.getHeader(\"X-Requested-With\") != null &&                \"XMLHttpRequest\".equals(request.getHeader(\"X-Requested-With\"));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/spring/AppUtil.java", "stars": "23", "class": {"name": "AppUtil", "extends": null, "implements": ["ApplicationContextAware", "ApplicationListener"], "modifiers": ["public"]}}, {"method_name": "getUiMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUiMessage(){        return this.uiMessage;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/exceptions/EndPointException.java", "stars": "23", "class": {"name": "EndPointException", "extends": "RuntimeException", "implements": null, "modifiers": ["public"]}}, {"method_name": "getArgs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object[] getArgs(){        return this.args;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/exceptions/EndPointException.java", "stars": "23", "class": {"name": "EndPointException", "extends": "RuntimeException", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnable() {        if (!Files.exists(BanWave.path)) {            try {                Files.createFile(BanWave.path);            } catch (IOException e) {                e.printStackTrace();            }        }        banned.clear();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/misc/BanWave.java", "stars": "12", "class": {"name": "BanWave", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUpdate", "params": ["UpdateEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpdate(UpdateEvent event) {        if (mode.equalsIgnoreCase(\"normal\")) {            for (final Object o : mc.world.getLoadedEntityList()) {                if (o instanceof EntityOtherPlayerMP) {                    final EntityOtherPlayerMP e = (EntityOtherPlayerMP) o;                    if (!timer.hasReached(banDelay * 100) || Mercury.INSTANCE.getFriendManager().isFriend(e.getName()) || e.getName() == mc.player.getName()) {                        continue;                    }                    if (banned.contains(e)) {                        continue;                    }                    if (message) {                        mc.player.sendChatMessage(\"/ban \" + e.getName() + \" \" + banMessage);                        System.out.println(\"banned \" + e.getName() + \" \" + banMessage);                    } else {                        mc.player.sendChatMessage(\"/ban \" + e.getName());                        System.out.println(\"banned \" + e.getName());                    }                    banned.add(e);                    timer.reset();                }            }        }        if (mode.equalsIgnoreCase(\"read\")) {            try {                if (Files.lines(path).count() <= 0) {                    ChatUtil.print(\"No names found in file \" + path.getFileName());                    return;                }                Files.lines(path).forEach(n -> {                    for (final Object o : mc.world.getLoadedEntityList()) {                        if (o instanceof EntityOtherPlayerMP) {                            final EntityOtherPlayerMP e = (EntityOtherPlayerMP) o;                            if (e.getName().equalsIgnoreCase(n)) {                                if (!timer.hasReached(banDelay * 100) || Mercury.INSTANCE.getFriendManager().isFriend(e.getName()) || e.getName() == mc.player.getName()) {                                    continue;                                }                                if (banned.contains(e)) {                                    continue;                                }                                if (message) {                                    mc.player.sendChatMessage(\"/ban \" + e.getName() + \" \" + banMessage);                                    System.out.println(\"banned \" + e.getName() + \" \" + banMessage);                                } else {                                    mc.player.sendChatMessage(\"/ban \" + e.getName());                                    System.out.println(\"banned \" + e.getName());                                }                                banned.add(e);                                timer.reset();                            }                        }                    }                });            } catch (IOException e) {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/misc/BanWave.java", "stars": "12", "class": {"name": "BanWave", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLanguageType", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getLanguageType() {        return languageType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/i18nutils/LoadJsonUtils.java", "stars": "18", "class": {"name": "LoadJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLanguageType", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setLanguageType(String languageType) {        LoadJsonUtils.languageType = languageType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/i18nutils/LoadJsonUtils.java", "stars": "18", "class": {"name": "LoadJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "transJson", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Map<String,String>", "snippet": "    public static Map<String,String> transJson(String fileName, String dataNode) {        Map<String, String> resultMap = new HashMap<>();        try {            String jsonStr = readFromTextFile(fileName);            JSONObject json = JSON.parseObject(jsonStr, JSONObject.class);            String data = json.getString(dataNode);            resultMap =  JSON.parseObject(data, Map.class);        } catch (Exception e) {            logger.error(\"Json File trans Failed, caused by:\" + e);        }        return resultMap;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/i18nutils/LoadJsonUtils.java", "stars": "18", "class": {"name": "LoadJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readFromTextFile", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String readFromTextFile(String fileName) throws IOException {        InputStream resourceAsStream = LoadJsonUtils.class.getResourceAsStream(fileName);        InputStreamReader reader = new InputStreamReader(resourceAsStream);        BufferedReader br = new BufferedReader(reader);        StringBuilder builder = new StringBuilder();        String line;        line = br.readLine();        while( line != null) {            builder.append(line);            line = br.readLine();        }        return builder.toString();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/i18nutils/LoadJsonUtils.java", "stars": "18", "class": {"name": "LoadJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void init(Context context) {        super.init(context);        post(new Runnable() {            @Override            public void run() {                gestureDetector = new GestureDetector(getContext().getApplicationContext(), new GestureDetector.SimpleOnGestureListener() {                    @Override                    public boolean onDoubleTap(MotionEvent e) {                        touchDoubleUp();                        return super.onDoubleTap(e);                    }                    @Override                    public boolean onSingleTapConfirmed(MotionEvent e) {                        if (!mChangePosition && !mChangeVolume && !mBrightness) {                            onClickUiToggle();                        }                        return super.onSingleTapConfirmed(e);                    }                    @Override                    public void onLongPress(MotionEvent e) {                        super.onLongPress(e);                    }                });            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/LandLayoutVideo.java", "stars": "2", "class": {"name": "LandLayoutVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLayoutId() {        if (mIfCurrentIsFullscreen) {            return R.layout.sample_video_land;        }        return R.layout.sample_video_normal;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/LandLayoutVideo.java", "stars": "2", "class": {"name": "LandLayoutVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateStartImage", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updateStartImage() {        if (mIfCurrentIsFullscreen) {            if(mStartButton instanceof  ImageView) {                ImageView imageView = (ImageView) mStartButton;                if (mCurrentState == CURRENT_STATE_PLAYING) {                    imageView.setImageResource(R.drawable.video_click_pause_selector);                } else if (mCurrentState == CURRENT_STATE_ERROR) {                    imageView.setImageResource(R.drawable.video_click_play_selector);                } else {                    imageView.setImageResource(R.drawable.video_click_play_selector);                }            }        } else {            super.updateStartImage();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/LandLayoutVideo.java", "stars": "2", "class": {"name": "LandLayoutVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getEnlargeImageRes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getEnlargeImageRes() {            return R.drawable.custom_enlarge;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/LandLayoutVideo.java", "stars": "2", "class": {"name": "LandLayoutVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getShrinkImageRes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getShrinkImageRes() {        return R.drawable.custom_shrink;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/LandLayoutVideo.java", "stars": "2", "class": {"name": "LandLayoutVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onInterceptTouchEvent", "params": ["MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onInterceptTouchEvent(MotionEvent ev) {        if (isLinkScroll && !isIfCurrentIsFullscreen()) {            getParent().requestDisallowInterceptTouchEvent(true);        }        return super.onInterceptTouchEvent(ev);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/LandLayoutVideo.java", "stars": "2", "class": {"name": "LandLayoutVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveNormalVideoShow", "params": ["View", "ViewGroup", "GSYVideoPlayer"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void resolveNormalVideoShow(View oldF, ViewGroup vp, GSYVideoPlayer gsyVideoPlayer) {        LandLayoutVideo landLayoutVideo = (LandLayoutVideo)gsyVideoPlayer;        landLayoutVideo.dismissProgressDialog();        landLayoutVideo.dismissVolumeDialog();        landLayoutVideo.dismissBrightnessDialog();        super.resolveNormalVideoShow(oldF, vp, gsyVideoPlayer);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/LandLayoutVideo.java", "stars": "2", "class": {"name": "LandLayoutVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setLinkScroll", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLinkScroll(boolean linkScroll) {        isLinkScroll = linkScroll;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/LandLayoutVideo.java", "stars": "2", "class": {"name": "LandLayoutVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadClass", "params": ["String", "boolean"], "throws": ["ClassNotFoundException"], "modifiers": ["synchronized", "protected"], "return_type": "Class<?>", "snippet": "  protected synchronized Class<?> loadClass(final String name, final boolean resolve)      throws ClassNotFoundException {    try {      // first we try to find a class inside the child classloader      return this.childClassLoader.findClass(name);    } catch (final ClassNotFoundException e) {      // didn't find it, try the parent      return super.loadClass(name, resolve);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/plugin/ParentLastURLClassLoader.java", "stars": "18", "class": {"name": "ParentLastURLClassLoader", "extends": "ClassLoader", "implements": null, "modifiers": ["public"]}}, {"method_name": "findClass", "params": ["String"], "throws": ["ClassNotFoundException"], "modifiers": ["public"], "return_type": "Class<?>", "snippet": "    public Class<?> findClass(final String name) throws ClassNotFoundException {      return super.findClass(name);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/plugin/ParentLastURLClassLoader.java", "stars": "18", "class": {"name": "FindClassClassLoader", "extends": "ClassLoader", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "findClass", "params": ["String"], "throws": ["ClassNotFoundException"], "modifiers": ["public"], "return_type": "Class<?>", "snippet": "    public Class<?> findClass(final String name) throws ClassNotFoundException {      try {        final Class<?> loaded = super.findLoadedClass(name);        if (loaded != null) {          return loaded;        }        // first try to use the URLClassLoader findClass        return super.findClass(name);      } catch (final ClassNotFoundException e) {        // if that fails, we ask our real parent classloader to load the class (we give up)        return this.realParent.loadClass(name);      }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/plugin/ParentLastURLClassLoader.java", "stars": "18", "class": {"name": "ChildURLClassLoader", "extends": "URLClassLoader", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return list.size();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getItem(int position) {        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getItemId(int position) {        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView(final int position, View convertView, ViewGroup parent) {        final ViewHolder holder;        if (convertView == null) {            holder = new ViewHolder();            convertView = inflater.inflate(R.layout.list_video_item_normal, null);            holder.gsyVideoPlayer = (SampleCoverVideo) convertView.findViewById(R.id.video_item_player);            convertView.setTag(holder);        } else {            holder = (ViewHolder) convertView.getTag();        }        //final String url = \"https://res.exexm.com/cw_145225549855002\";        final String urlH = \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";        final String urlV = \"http://7xjmzj.com1.z0.glb.clouddn.com/20171026175005_JObCxCE2.mp4\";        final String url = (position % 2 == 0) ? urlH : urlV;        //final String url = \"http://111.198.24.133:83/yyy_login_server/pic/YB059284/97778276040859/1.mp4\";        if (position % 2 == 0) {            holder.gsyVideoPlayer.loadCoverImage(url, R.mipmap.xxx1);        } else {            holder.gsyVideoPlayer.loadCoverImage(url, R.mipmap.xxx2);        }        //\u9632\u6b62\u9519\u4f4d\uff0c\u79bb\u5f00\u91ca\u653e        //holder.gsyVideoPlayer.initUIState();        //\u9ed8\u8ba4\u7f13\u5b58\u8def\u5f84        //\u4f7f\u7528lazy\u7684set\u53ef\u4ee5\u907f\u514d\u6ed1\u52a8\u5361\u7684\u60c5\u51b5\u5b58\u5728        holder.gsyVideoPlayer.setUpLazy(url, true, null, null, \"\u8fd9\u662ftitle\");        //holder.gsyVideoPlayer.setNeedShowWifiTip(false);        /************************\u4e0b\u65b9\u4e3a\u5176\u4ed6\u8def\u5f84************************************/        //\u5982\u679c\u4e00\u4e2a\u5217\u8868\u7684\u7f13\u5b58\u8def\u52b2\u90fd\u4e00\u4e00\u81f4        //holder.gsyVideoPlayer.setUp(url, true, new File(FileUtils.getTestPath()), \"\u8fd9\u662ftitle\");        /************************\u4e0b\u65b9\u4e3a\u5176\u4ed6\u8def\u5f84************************************/        //\u5982\u679c\u4e00\u4e2a\u5217\u8868\u91cc\u7684\u7f13\u5b58\u8def\u52b2\u4e0d\u4e00\u81f4        //int playPosition = GSYVideoManager.instance().getPlayPosition();        //\u907f\u514d\u5168\u5c4f\u8fd4\u56de\u7684\u65f6\u5019\u4e0d\u53ef\u7528\u4e86        /*if (playPosition < 0 || playPosition != position ||                !GSYVideoManager.instance().getPlayTag().equals(ListNormalAdapter.TAG)) {            holder.gsyVideoPlayer.initUIState();        }*/        //\u5982\u679c\u8bbe\u7f6e\u4e86\u70b9\u51fb\u5c01\u9762\u53ef\u4ee5\u64ad\u653e\uff0c\u5982\u679c\u7f13\u5b58\u5217\u8868\u8def\u5f84\u4e0d\u4e00\u81f4\uff0c\u8fd8\u9700\u8981\u8bbe\u7f6e\u5c01\u9762\u70b9\u51fb        /*holder.gsyVideoPlayer.setThumbPlay(true);        holder.gsyVideoPlayer.getStartButton().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //\u9700\u8981\u5207\u6362\u7f13\u5b58\u8def\u5f84\u7684                holder.gsyVideoPlayer.setUp(url, true, new File(FileUtils.getTestPath(), \"\"));                holder.gsyVideoPlayer.startPlayLogic();            }        });        holder.gsyVideoPlayer.getThumbImageViewLayout().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //\u9700\u8981\u5207\u6362\u7f13\u5b58\u8def\u5f84\u7684                holder.gsyVideoPlayer.setUp(url, true, new File(FileUtils.getTestPath(), \"\"));                holder.gsyVideoPlayer.startPlayLogic();            }        });*/        //\u589e\u52a0title        holder.gsyVideoPlayer.getTitleTextView().setVisibility(View.GONE);        //\u8bbe\u7f6e\u8fd4\u56de\u952e        holder.gsyVideoPlayer.getBackButton().setVisibility(View.GONE);        //\u8bbe\u7f6e\u5168\u5c4f\u6309\u952e\u529f\u80fd        holder.gsyVideoPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                resolveFullBtn(holder.gsyVideoPlayer);            }        });        holder.gsyVideoPlayer.setRotateViewAuto(!getListNeedAutoLand());        holder.gsyVideoPlayer.setLockLand(!getListNeedAutoLand());        holder.gsyVideoPlayer.setPlayTag(TAG);        holder.gsyVideoPlayer.setAutoFullWithSize(true);        holder.gsyVideoPlayer.setReleaseWhenLossAudio(false);        holder.gsyVideoPlayer.setShowFullAnimation(!getListNeedAutoLand());        holder.gsyVideoPlayer.setIsTouchWiget(false);        //\u5faa\u73af        //holder.gsyVideoPlayer.setLooping(true);        holder.gsyVideoPlayer.setNeedLockFull(true);        //holder.gsyVideoPlayer.setSpeed(2);        holder.gsyVideoPlayer.setPlayPosition(position);        holder.gsyVideoPlayer.setVideoAllCallBack(new GSYSampleCallBack() {            @Override            public void onClickStartIcon(String url, Object... objects) {                super.onClickStartIcon(url, objects);            }            @Override            public void onPrepared(String url, Object... objects) {                super.onPrepared(url, objects);                Debuger.printfLog(\"onPrepared\");                boolean full = holder.gsyVideoPlayer.getCurrentPlayer().isIfCurrentIsFullscreen();                if (!holder.gsyVideoPlayer.getCurrentPlayer().isIfCurrentIsFullscreen()) {                    GSYVideoManager.instance().setNeedMute(true);                }                if (holder.gsyVideoPlayer.getCurrentPlayer().isIfCurrentIsFullscreen()) {                   GSYVideoManager.instance().setLastListener(holder.gsyVideoPlayer);                }                curPlayer = (StandardGSYVideoPlayer) objects[1];                itemPlayer = holder.gsyVideoPlayer;                isPlay = true;                if (getListNeedAutoLand()) {                    //\u91cd\u529b\u5168\u5c4f\u5de5\u5177\u7c7b                    initOrientationUtils(holder.gsyVideoPlayer, full);                    ListNormalAdapter.this.onPrepared();                }            }            @Override            public void onQuitFullscreen(String url, Object... objects) {                super.onQuitFullscreen(url, objects);                isFull = false;                GSYVideoManager.instance().setNeedMute(true);                if (getListNeedAutoLand()) {                    ListNormalAdapter.this.onQuitFullscreen();                }            }            @Override            public void onEnterFullscreen(String url, Object... objects) {                super.onEnterFullscreen(url, objects);                GSYVideoManager.instance().setNeedMute(false);                isFull = true;                holder.gsyVideoPlayer.getCurrentPlayer().getTitleTextView().setText((String) objects[0]);            }            @Override            public void onAutoComplete(String url, Object... objects) {                super.onAutoComplete(url, objects);                curPlayer = null;                itemPlayer = null;                isPlay = false;                isFull = false;                if (getListNeedAutoLand()) {                    ListNormalAdapter.this.onAutoComplete();                }            }        });        return convertView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveFullBtn", "params": ["StandardGSYVideoPlayer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveFullBtn(final StandardGSYVideoPlayer standardGSYVideoPlayer) {        if (getListNeedAutoLand() && orientationUtils != null) {            resolveFull();        }        standardGSYVideoPlayer.startWindowFullscreen(context, false, true);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "clearCache", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearCache() {        if (curPlayer != null) {            curPlayer.getCurrentPlayer().clearCurrentCache();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "isFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFull() {        return isFull;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getListNeedAutoLand", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean getListNeedAutoLand() {        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "initOrientationUtils", "params": ["StandardGSYVideoPlayer", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initOrientationUtils(StandardGSYVideoPlayer standardGSYVideoPlayer, boolean full) {        orientationUtils = new OrientationUtils((Activity) context, standardGSYVideoPlayer);        //\u662f\u5426\u9700\u8981\u8ddf\u968f\u7cfb\u7edf\u65cb\u8f6c\u8bbe\u7f6e        //orientationUtils.setRotateWithSystem(false);        orientationUtils.setEnable(false);        orientationUtils.setIsLand((full) ? 1 : 0);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveFull", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveFull() {        if (getListNeedAutoLand() && orientationUtils != null) {            //\u76f4\u63a5\u6a2a\u5c4f            orientationUtils.resolveByClick();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onQuitFullscreen", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onQuitFullscreen() {        if (orientationUtils != null) {            orientationUtils.backToProtVideo();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAutoComplete", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAutoComplete() {        if (orientationUtils != null) {            orientationUtils.setEnable(false);            orientationUtils.releaseListener();            orientationUtils = null;        }        isPlay = false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPrepared", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPrepared() {        if (orientationUtils == null) {            return;        }        //\u5f00\u59cb\u64ad\u653e\u4e86\u624d\u80fd\u65cb\u8f6c\u548c\u5168\u5c4f        orientationUtils.setEnable(true);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onConfigurationChanged", "params": ["Activity", "Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConfigurationChanged(Activity activity, Configuration newConfig) {        //\u5982\u679c\u65cb\u8f6c\u4e86\u5c31\u5168\u5c4f        if (isPlay && itemPlayer != null && orientationUtils != null) {            itemPlayer.onConfigurationChanged(activity, newConfig, orientationUtils, false, true);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrientationUtils", "params": [], "throws": null, "modifiers": ["public"], "return_type": "OrientationUtils", "snippet": "    public OrientationUtils getOrientationUtils() {        return orientationUtils;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (orientationUtils != null) {            orientationUtils.backToProtVideo();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        if (isPlay && curPlayer != null) {            curPlayer.getCurrentPlayer().release();        }        if (orientationUtils != null) {            orientationUtils.releaseListener();            orientationUtils = null;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListNormalAdapter.java", "stars": "2", "class": {"name": "ListNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "convertToAuditEvent", "params": ["Iterable<PersistentAuditEvent>"], "throws": null, "modifiers": ["public"], "return_type": "List<AuditEvent>", "snippet": "    public List<AuditEvent> convertToAuditEvent(Iterable<PersistentAuditEvent> persistentAuditEvents) {        if (persistentAuditEvents == null) {            return Collections.emptyList();        }        List<AuditEvent> auditEvents = new ArrayList<>();        for (PersistentAuditEvent persistentAuditEvent : persistentAuditEvents) {            auditEvents.add(convertToAuditEvent(persistentAuditEvent));        }        return auditEvents;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/audit/AuditEventConverter.java", "stars": "2", "class": {"name": "AuditEventConverter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertToAuditEvent", "params": ["PersistentAuditEvent"], "throws": null, "modifiers": ["public"], "return_type": "AuditEvent", "snippet": "    public AuditEvent convertToAuditEvent(PersistentAuditEvent persistentAuditEvent) {        if (persistentAuditEvent == null) {            return null;        }        return new AuditEvent(persistentAuditEvent.getAuditEventDate(), persistentAuditEvent.getPrincipal(),            persistentAuditEvent.getAuditEventType(), convertDataToObjects(persistentAuditEvent.getData()));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/audit/AuditEventConverter.java", "stars": "2", "class": {"name": "AuditEventConverter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertDataToObjects", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> convertDataToObjects(Map<String, String> data) {        Map<String, Object> results = new HashMap<>();        if (data != null) {            for (Map.Entry<String, String> entry : data.entrySet()) {                results.put(entry.getKey(), entry.getValue());            }        }        return results;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/audit/AuditEventConverter.java", "stars": "2", "class": {"name": "AuditEventConverter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertDataToStrings", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "    public Map<String, String> convertDataToStrings(Map<String, Object> data) {        Map<String, String> results = new HashMap<>();        if (data != null) {            for (Map.Entry<String, Object> entry : data.entrySet()) {                // Extract the data that will be saved.                if (entry.getValue() instanceof WebAuthenticationDetails) {                    WebAuthenticationDetails authenticationDetails = (WebAuthenticationDetails) entry.getValue();                    results.put(\"remoteAddress\", authenticationDetails.getRemoteAddress());                    results.put(\"sessionId\", authenticationDetails.getSessionId());                } else {                    results.put(entry.getKey(), Objects.toString(entry.getValue()));                }            }        }        return results;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/audit/AuditEventConverter.java", "stars": "2", "class": {"name": "AuditEventConverter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["SqlSession", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object execute(SqlSession sqlSession, Object[] args) {    Object result;    switch (command.getType()) {      case INSERT: {        Object param = method.convertArgsToSqlCommandParam(args);        result = rowCountResult(sqlSession.insert(command.getName(), param));        break;      }      case UPDATE: {        Object param = method.convertArgsToSqlCommandParam(args);        result = rowCountResult(sqlSession.update(command.getName(), param));        break;      }      case DELETE: {        Object param = method.convertArgsToSqlCommandParam(args);        result = rowCountResult(sqlSession.delete(command.getName(), param));        break;      }      case SELECT:        if (method.returnsVoid() && method.hasResultHandler()) {          executeWithResultHandler(sqlSession, args);          result = null;        } else if (method.returnsMany()) {          result = executeForMany(sqlSession, args);        } else if (method.returnsMap()) {          result = executeForMap(sqlSession, args);        } else if (method.returnsCursor()) {          result = executeForCursor(sqlSession, args);        } else {          Object param = method.convertArgsToSqlCommandParam(args);          result = sqlSession.selectOne(command.getName(), param);          if (method.returnsOptional()              && (result == null || !method.getReturnType().equals(result.getClass()))) {            result = Optional.ofNullable(result);          }        }        break;      case FLUSH:        result = sqlSession.flushStatements();        break;      default:        throw new BindingException(\"Unknown execution method for: \" + command.getName());    }    if (result == null && method.getReturnType().isPrimitive() && !method.returnsVoid()) {      throw new BindingException(\"Mapper method '\" + command.getName()          + \" attempted to return null from a method with a primitive return type (\" + method.getReturnType() + \").\");    }    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MapperMethod", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rowCountResult", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "Object", "snippet": "  private Object rowCountResult(int rowCount) {    final Object result;    if (method.returnsVoid()) {      result = null;    } else if (Integer.class.equals(method.getReturnType()) || Integer.TYPE.equals(method.getReturnType())) {      result = rowCount;    } else if (Long.class.equals(method.getReturnType()) || Long.TYPE.equals(method.getReturnType())) {      result = (long)rowCount;    } else if (Boolean.class.equals(method.getReturnType()) || Boolean.TYPE.equals(method.getReturnType())) {      result = rowCount > 0;    } else {      throw new BindingException(\"Mapper method '\" + command.getName() + \"' has an unsupported return type: \" + method.getReturnType());    }    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MapperMethod", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeWithResultHandler", "params": ["SqlSession", "Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void executeWithResultHandler(SqlSession sqlSession, Object[] args) {    MappedStatement ms = sqlSession.getConfiguration().getMappedStatement(command.getName());    if (!StatementType.CALLABLE.equals(ms.getStatementType())        && void.class.equals(ms.getResultMaps().get(0).getType())) {      throw new BindingException(\"method \" + command.getName()          + \" needs either a @ResultMap annotation, a @ResultType annotation,\"          + \" or a resultType attribute in XML so a ResultHandler can be used as a parameter.\");    }    Object param = method.convertArgsToSqlCommandParam(args);    if (method.hasRowBounds()) {      RowBounds rowBounds = method.extractRowBounds(args);      sqlSession.select(command.getName(), param, rowBounds, method.extractResultHandler(args));    } else {      sqlSession.select(command.getName(), param, method.extractResultHandler(args));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MapperMethod", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeForMany", "params": ["SqlSession", "Object"], "throws": null, "modifiers": ["private"], "return_type": "Object", "snippet": "  private <E> Object executeForMany(SqlSession sqlSession, Object[] args) {    List<E> result;    Object param = method.convertArgsToSqlCommandParam(args);    if (method.hasRowBounds()) {      RowBounds rowBounds = method.extractRowBounds(args);      result = sqlSession.selectList(command.getName(), param, rowBounds);    } else {      result = sqlSession.selectList(command.getName(), param);    }    // issue #510 Collections & arrays support    if (!method.getReturnType().isAssignableFrom(result.getClass())) {      if (method.getReturnType().isArray()) {        return convertToArray(result);      } else {        return convertToDeclaredCollection(sqlSession.getConfiguration(), result);      }    }    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MapperMethod", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeForCursor", "params": ["SqlSession", "Object"], "throws": null, "modifiers": ["private"], "return_type": "Cursor<T>", "snippet": "  private <T> Cursor<T> executeForCursor(SqlSession sqlSession, Object[] args) {    Cursor<T> result;    Object param = method.convertArgsToSqlCommandParam(args);    if (method.hasRowBounds()) {      RowBounds rowBounds = method.extractRowBounds(args);      result = sqlSession.selectCursor(command.getName(), param, rowBounds);    } else {      result = sqlSession.selectCursor(command.getName(), param);    }    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MapperMethod", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertToDeclaredCollection", "params": ["Configuration", "List<E>"], "throws": null, "modifiers": ["private"], "return_type": "Object", "snippet": "  private <E> Object convertToDeclaredCollection(Configuration config, List<E> list) {    Object collection = config.getObjectFactory().create(method.getReturnType());    MetaObject metaObject = config.newMetaObject(collection);    metaObject.addAll(list);    return collection;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MapperMethod", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertToArray", "params": ["List<E>"], "throws": null, "modifiers": ["private"], "return_type": "Object", "snippet": "  private <E> Object convertToArray(List<E> list) {    Class<?> arrayComponentType = method.getReturnType().getComponentType();    Object array = Array.newInstance(arrayComponentType, list.size());    if (arrayComponentType.isPrimitive()) {      for (int i = 0; i < list.size(); i++) {        Array.set(array, i, list.get(i));      }      return array;    } else {      return list.toArray((E[])array);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MapperMethod", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeForMap", "params": ["SqlSession", "Object"], "throws": null, "modifiers": ["private"], "return_type": "Map<K,V>", "snippet": "  private <K, V> Map<K, V> executeForMap(SqlSession sqlSession, Object[] args) {    Map<K, V> result;    Object param = method.convertArgsToSqlCommandParam(args);    if (method.hasRowBounds()) {      RowBounds rowBounds = method.extractRowBounds(args);      result = sqlSession.selectMap(command.getName(), param, method.getMapKey(), rowBounds);    } else {      result = sqlSession.selectMap(command.getName(), param, method.getMapKey());    }    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MapperMethod", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "V", "snippet": "    public V get(Object key) {      if (!super.containsKey(key)) {        throw new BindingException(\"Parameter '\" + key + \"' not found. Available parameters are \" + keySet());      }      return super.get(key);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "ParamMap", "extends": "HashMap", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {      return name;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "SqlCommand", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SqlCommandType", "snippet": "    public SqlCommandType getType() {      return type;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "SqlCommand", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "resolveMappedStatement", "params": ["Class<?>", "String", "Class<?>", "Configuration"], "throws": null, "modifiers": ["private"], "return_type": "MappedStatement", "snippet": "    private MappedStatement resolveMappedStatement(Class<?> mapperInterface, String methodName,        Class<?> declaringClass, Configuration configuration) {      String statementId = mapperInterface.getName() + \".\" + methodName;      if (configuration.hasStatement(statementId)) {        return configuration.getMappedStatement(statementId);      } else if (mapperInterface.equals(declaringClass)) {        return null;      }      for (Class<?> superInterface : mapperInterface.getInterfaces()) {        if (declaringClass.isAssignableFrom(superInterface)) {          MappedStatement ms = resolveMappedStatement(superInterface, methodName,              declaringClass, configuration);          if (ms != null) {            return ms;          }        }      }      return null;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "SqlCommand", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "convertArgsToSqlCommandParam", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object convertArgsToSqlCommandParam(Object[] args) {      return paramNameResolver.getNamedParams(args);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MethodSignature", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "hasRowBounds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasRowBounds() {      return rowBoundsIndex != null;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MethodSignature", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "extractRowBounds", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "RowBounds", "snippet": "    public RowBounds extractRowBounds(Object[] args) {      return hasRowBounds() ? (RowBounds) args[rowBoundsIndex] : null;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MethodSignature", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "hasResultHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasResultHandler() {      return resultHandlerIndex != null;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MethodSignature", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "extractResultHandler", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "ResultHandler", "snippet": "    public ResultHandler extractResultHandler(Object[] args) {      return hasResultHandler() ? (ResultHandler) args[resultHandlerIndex] : null;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MethodSignature", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMapKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMapKey() {      return mapKey;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MethodSignature", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getReturnType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Class<?>", "snippet": "    public Class<?> getReturnType() {      return returnType;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MethodSignature", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "returnsMany", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean returnsMany() {      return returnsMany;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MethodSignature", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "returnsMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean returnsMap() {      return returnsMap;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MethodSignature", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "returnsVoid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean returnsVoid() {      return returnsVoid;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MethodSignature", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "returnsCursor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean returnsCursor() {      return returnsCursor;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MethodSignature", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "returnsOptional", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean returnsOptional() {      return returnsOptional;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MethodSignature", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getUniqueParamIndex", "params": ["Method", "Class<?>"], "throws": null, "modifiers": ["private"], "return_type": "Integer", "snippet": "    private Integer getUniqueParamIndex(Method method, Class<?> paramType) {      Integer index = null;      final Class<?>[] argTypes = method.getParameterTypes();      for (int i = 0; i < argTypes.length; i++) {        if (paramType.isAssignableFrom(argTypes[i])) {          if (index == null) {            index = i;          } else {            throw new BindingException(method.getName() + \" cannot have multiple \" + paramType.getSimpleName() + \" parameters\");          }        }      }      return index;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MethodSignature", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMapKey", "params": ["Method"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getMapKey(Method method) {      String mapKey = null;      if (Map.class.isAssignableFrom(method.getReturnType())) {        final MapKey mapKeyAnnotation = method.getAnnotation(MapKey.class);        if (mapKeyAnnotation != null) {          mapKey = mapKeyAnnotation.value();        }      }      return mapKey;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperMethod.java", "stars": "15", "class": {"name": "MethodSignature", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": ["Application"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void init(Application application) {        if (instance == null) {            instance = new Foreground();            application.registerActivityLifecycleCallbacks(instance);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/com/sjl/foreground/Foreground.java", "stars": "4", "class": {"name": "Foreground", "extends": null, "implements": ["Application"], "modifiers": ["public"]}}, {"method_name": "get", "params": ["Application"], "throws": null, "modifiers": ["public", "static"], "return_type": "Foreground", "snippet": "    public static Foreground get(Application application) {        if (instance == null) {            init(application);        }        return instance;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/com/sjl/foreground/Foreground.java", "stars": "4", "class": {"name": "Foreground", "extends": null, "implements": ["Application"], "modifiers": ["public"]}}, {"method_name": "get", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Foreground", "snippet": "    public static Foreground get() {        if (instance == null) {            throw new IllegalStateException(                    \"Foreground is not initialised - first invocation must use parameterised init/get\");        }        return instance;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/com/sjl/foreground/Foreground.java", "stars": "4", "class": {"name": "Foreground", "extends": null, "implements": ["Application"], "modifiers": ["public"]}}, {"method_name": "isForeground", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isForeground() {        return foreground;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/com/sjl/foreground/Foreground.java", "stars": "4", "class": {"name": "Foreground", "extends": null, "implements": ["Application"], "modifiers": ["public"]}}, {"method_name": "isBackground", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isBackground() {        return !foreground;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/com/sjl/foreground/Foreground.java", "stars": "4", "class": {"name": "Foreground", "extends": null, "implements": ["Application"], "modifiers": ["public"]}}, {"method_name": "addListener", "params": ["Listener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addListener(Listener listener) {        listeners.add(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/com/sjl/foreground/Foreground.java", "stars": "4", "class": {"name": "Foreground", "extends": null, "implements": ["Application"], "modifiers": ["public"]}}, {"method_name": "onActivityResumed", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityResumed(Activity activity) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/com/sjl/foreground/Foreground.java", "stars": "4", "class": {"name": "Foreground", "extends": null, "implements": ["Application"], "modifiers": ["public"]}}, {"method_name": "onActivityPaused", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityPaused(Activity activity) {        // if we're changing configurations we aren't going background so        // no need to schedule the check        if (!activity.isChangingConfigurations()) {            // don't prevent activity being gc'd            final WeakReference<Activity> ref = new WeakReference<>(activity);            handler.postDelayed(check = new Runnable() {                @Override                public void run() {                    onActivityCeased(ref.get());                }            }, CHECK_DELAY);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/com/sjl/foreground/Foreground.java", "stars": "4", "class": {"name": "Foreground", "extends": null, "implements": ["Application"], "modifiers": ["public"]}}, {"method_name": "onActivityStarted", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityStarted(Activity activity) {        current = activity;        // remove any scheduled checks since we're starting another activity        // we're definitely not going background        if (check != null) {            handler.removeCallbacks(check);        }        // check if we're becoming foreground and notify listeners        if (!foreground && (activity != null && !activity.isChangingConfigurations())) {            foreground = true;            Log.w(TAG, \"became foreground\");            listeners.each(becameForeground);        } else {            Log.i(TAG, \"still foreground\");        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/com/sjl/foreground/Foreground.java", "stars": "4", "class": {"name": "Foreground", "extends": null, "implements": ["Application"], "modifiers": ["public"]}}, {"method_name": "onActivityStopped", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityStopped(Activity activity) {        if (check != null) {            handler.removeCallbacks(check);        }        onActivityCeased(activity);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/com/sjl/foreground/Foreground.java", "stars": "4", "class": {"name": "Foreground", "extends": null, "implements": ["Application"], "modifiers": ["public"]}}, {"method_name": "onActivityCreated", "params": ["Activity", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityCreated(Activity activity, Bundle savedInstanceState) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/com/sjl/foreground/Foreground.java", "stars": "4", "class": {"name": "Foreground", "extends": null, "implements": ["Application"], "modifiers": ["public"]}}, {"method_name": "onActivitySaveInstanceState", "params": ["Activity", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivitySaveInstanceState(Activity activity, Bundle outState) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/com/sjl/foreground/Foreground.java", "stars": "4", "class": {"name": "Foreground", "extends": null, "implements": ["Application"], "modifiers": ["public"]}}, {"method_name": "onActivityDestroyed", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityDestroyed(Activity activity) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/com/sjl/foreground/Foreground.java", "stars": "4", "class": {"name": "Foreground", "extends": null, "implements": ["Application"], "modifiers": ["public"]}}, {"method_name": "onActivityCeased", "params": ["Activity"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onActivityCeased(Activity activity) {        if (foreground) {            if ((activity == current) && (activity != null && !activity.isChangingConfigurations())) {                foreground = false;                Log.w(TAG, \"went background\");                listeners.each(becameBackground);            } else {                Log.i(TAG, \"still foreground\");            }        } else {            Log.i(TAG, \"still background\");        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/com/sjl/foreground/Foreground.java", "stars": "4", "class": {"name": "Foreground", "extends": null, "implements": ["Application"], "modifiers": ["public"]}}, {"method_name": "add", "params": ["Listener"], "throws": null, "modifiers": ["public"], "return_type": "Binding", "snippet": "        public Binding add(Listener listener) {            final WeakReference<Listener> wr = new WeakReference<>(listener);            listeners.add(wr);            return new Binding() {                public void unbind() {                    listeners.remove(wr);                }            };        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/com/sjl/foreground/Foreground.java", "stars": "4", "class": {"name": "Listeners", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "each", "params": ["Callback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void each(Callback callback) {            for (Iterator<WeakReference<Listener>> it = listeners.iterator(); it.hasNext(); ) {                try {                    WeakReference<Listener> wr = it.next();                    Listener l = wr.get();                    if (l != null)                        callback.invoke(l);                    else                        it.remove();                } catch (Exception exc) {                    Log.e(TAG, \"Listener threw exception!\", exc);                }            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/com/sjl/foreground/Foreground.java", "stars": "4", "class": {"name": "Listeners", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "wechatUserCallback", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "    public Map<String,String> wechatUserCallback(@RequestParam(value = \"code\", required = false) String code, @SessionAttribute String user) {        logger.info(\"\u4ecesession \u4e2d\u53d6\u503c\uff1a\"+user);        Map<String, String> data = new HashMap<>();        data.put(\"name\", \"chad\");        return data;    }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/controller/DefineDataController.java", "stars": "2", "class": {"name": "DefineDataController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addCaioneData", "params": ["User", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseResult", "snippet": "    public  ResponseResult addCaioneData(@RequestBody User user, HttpServletRequest request){        ResponseResult responseResult = new ResponseResult();        try{            responseResult.setVo(null);            responseResult.setResult(ResponseCodes.Success.getCode(),ResponseCodes.Success.getMessage());        }catch (Exception e){            e.printStackTrace();            responseResult.setResult(ResponseCodes.UnKnownError.getCode(),ResponseCodes.UnKnownError.getMessage());        }        return responseResult;    }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/controller/DefineDataController.java", "stars": "2", "class": {"name": "DefineDataController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "create", "params": ["Context", "Uri"], "throws": null, "modifiers": ["public", "static"], "return_type": "MediaPlayer", "snippet": "    public static MediaPlayer create(Context context, Uri uri) {        return create (context, uri, null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "create", "params": ["Context", "Uri", "SurfaceHolder"], "throws": null, "modifiers": ["public", "static"], "return_type": "MediaPlayer", "snippet": "    public static MediaPlayer create(Context context, Uri uri, SurfaceHolder holder) {        return create(context, uri, holder, null, 0);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "create", "params": ["Context", "Uri", "SurfaceHolder", "AudioAttributes", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "MediaPlayer", "snippet": "    public static MediaPlayer create(Context context, Uri uri, SurfaceHolder holder,                                     AudioAttributes audioAttributes, int audioSessionId) {        MediaPlayer player = new MediaPlayer();        //player.setDataSource(context, uri); This throws exception, but not this create()        return player;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "create", "params": ["Context", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "MediaPlayer", "snippet": "    public static MediaPlayer create(Context context, int resid) {        return create(context, resid, null, 0);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "create", "params": ["Context", "int", "AudioAttributes", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "MediaPlayer", "snippet": "    public static MediaPlayer create(Context context, int resid,                                     AudioAttributes audioAttributes, int audioSessionId) {        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["Context", "Uri"], "throws": ["IOException", "IllegalArgumentException", "SecurityException", "IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(Context context, Uri uri)            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException {        setDataSource(context, uri, null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["Context", "Uri", "Map<String,String>"], "throws": ["IOException", "IllegalArgumentException", "SecurityException", "IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(Context context, Uri uri, Map<String, String> headers)            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException {        mCurrentMedia = new Media(mLibVLC, uri);        mMediaPlayer.setMedia(mCurrentMedia);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["String"], "throws": ["IOException", "IllegalArgumentException", "SecurityException", "IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(String path)            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException {        mCurrentMedia = new Media(mLibVLC, path);        mMediaPlayer.setMedia(mCurrentMedia);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["FileDescriptor"], "throws": ["IOException", "IllegalArgumentException", "IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(FileDescriptor fd)            throws IOException, IllegalArgumentException, IllegalStateException {        mCurrentMedia = new Media(mLibVLC, fd);        mMediaPlayer.setMedia(mCurrentMedia);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["FileDescriptor", "long", "long"], "throws": ["IOException", "IllegalArgumentException", "IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(FileDescriptor fd, long offset, long length)            throws IOException, IllegalArgumentException, IllegalStateException {        setDataSource(fd);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "prepare", "params": [], "throws": ["IOException", "IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void prepare() throws IOException, IllegalStateException {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "prepareAsync", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void prepareAsync() {        mCurrentMedia.addOption(\":video-paused\");        mMediaPlayer.play();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDisplay", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDisplay(SurfaceHolder sh) {        mMediaPlayer.getVLCVout().setVideoSurface(sh.getSurface(), sh);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSurface", "params": ["Surface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSurface(Surface surface) {        mMediaPlayer.getVLCVout().setVideoSurface(surface, null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVideoScalingMode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoScalingMode(int mode) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() throws IllegalStateException {        mMediaPlayer.play();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() throws IllegalStateException {        mMediaPlayer.stop();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pause", "params": [], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void pause() throws IllegalStateException {        // FIXME, this is toggling for now.        mMediaPlayer.pause();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setWakeMode", "params": ["Context", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWakeMode(Context context, int mode) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setScreenOnWhilePlaying", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setScreenOnWhilePlaying(boolean screenOn) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVideoWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoWidth() {        return -1;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVideoHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoHeight() {        return -1;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isPlaying", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isPlaying() {        return mMediaPlayer.isPlaying();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "seekTo", "params": ["int"], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void seekTo(int msec) throws IllegalStateException {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentPosition() {        return (int)mMediaPlayer.getTime();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDuration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getDuration() {        return (int)mMediaPlayer.getLength();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNextMediaPlayer", "params": ["MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNextMediaPlayer(MediaPlayer next) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release() {        mMediaPlayer.release();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reset() {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAudioStreamType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAudioStreamType(int streamtype) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAudioAttributes", "params": ["AudioAttributes"], "throws": ["IllegalArgumentException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAudioAttributes(AudioAttributes attributes) throws IllegalArgumentException {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLooping", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLooping(boolean looping) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isLooping", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isLooping() {        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVolume", "params": ["float", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVolume(float leftVolume, float rightVolume) {        mMediaPlayer.setVolume( (int)((leftVolume + rightVolume) * 100/2));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAudioSessionId", "params": ["int"], "throws": ["IllegalArgumentException", "IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAudioSessionId(int sessionId)  throws IllegalArgumentException, IllegalStateException {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAudioSessionId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getAudioSessionId() {        return 0;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "attachAuxEffect", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void attachAuxEffect(int effectId) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAuxEffectSendLevel", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAuxEffectSendLevel(float level) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTrackInfo", "params": [], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "TrackInfo", "snippet": "    public TrackInfo[] getTrackInfo() throws IllegalStateException {        //FIXME        TrackInfo trackInfo[] = new TrackInfo[1];        return trackInfo;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addTimedTextSource", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addTimedTextSource(String path, String mimeType) {        mMediaPlayer.setSubtitleFile(path);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addTimedTextSource", "params": ["Context", "Uri", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addTimedTextSource(Context context, Uri uri, String mimeType) {        mMediaPlayer.setSubtitleFile(uri.getPath());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addTimedTextSource", "params": ["FileDescriptor", "String"], "throws": ["IllegalArgumentException", "IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void addTimedTextSource(FileDescriptor fd, String mimeType)            throws IllegalArgumentException, IllegalStateException {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addTimedTextSource", "params": ["FileDescriptor", "long", "long", "String"], "throws": ["IllegalArgumentException", "IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void addTimedTextSource(FileDescriptor fd, long offset, long length, String mime)            throws IllegalArgumentException, IllegalStateException {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSelectedTrack", "params": ["int"], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSelectedTrack(int trackType) throws IllegalStateException {        return 0;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "selectTrack", "params": ["int"], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void selectTrack(int index) throws IllegalStateException {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deselectTrack", "params": ["int"], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void deselectTrack(int index) throws IllegalStateException {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "finalize", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void finalize() {}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnPreparedListener", "params": ["OnPreparedListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnPreparedListener(OnPreparedListener listener) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnCompletionListener", "params": ["OnCompletionListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnCompletionListener(OnCompletionListener listener) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnBufferingUpdateListener", "params": ["OnBufferingUpdateListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnBufferingUpdateListener(OnBufferingUpdateListener listener) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnSeekCompleteListener", "params": ["OnSeekCompleteListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnSeekCompleteListener(OnSeekCompleteListener listener) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnVideoSizeChangedListener", "params": ["OnVideoSizeChangedListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnVideoSizeChangedListener(OnVideoSizeChangedListener listener) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnTimedTextListener", "params": ["OnTimedTextListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnTimedTextListener(OnTimedTextListener listener) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnErrorListener", "params": ["OnErrorListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnErrorListener(OnErrorListener listener) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnInfoListener", "params": ["OnInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnInfoListener(OnInfoListener listener) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "MediaPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTrackType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getTrackType() {            return MEDIA_TRACK_TYPE_UNKNOWN;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "TrackInfo", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "static"]}}, {"method_name": "getLanguage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getLanguage() {            return  \"und\";        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "TrackInfo", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "static"]}}, {"method_name": "getFormat", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaFormat", "snippet": "        public MediaFormat getFormat() {            return null;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "TrackInfo", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "static"]}}, {"method_name": "describeContents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int describeContents() {            return 0;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "TrackInfo", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "static"]}}, {"method_name": "writeToParcel", "params": ["Parcel", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void writeToParcel(Parcel dest, int flags) {        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "TrackInfo", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "static"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String toString() {            return \"\";        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/MediaPlayer.java", "stars": "4", "class": {"name": "TrackInfo", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "static"]}}, {"method_name": "parseObject", "params": ["String", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "\tpublic static <T> T parseObject(String json, Class<T> clazz) {\t\ttry {\t\t\tT t = JSON.parseObject(json, clazz);\t\t\treturn t;\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseList", "params": ["String", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<T>", "snippet": "\tpublic static <T> List<T> parseList(String json, Class<T> clazz) {\t\ttry {\t\t\tList<T> list = JSON.parseArray(json, clazz);\t\t\treturn list;\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJson", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String toJson(Object object) {\t\ttry {\t\t\tString json = JSON.toJSONString(object, CONFIG, FEATURES);\t\t\treturn json;\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAsJSONObjectFromObject", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "JSONObject", "snippet": "\tpublic static JSONObject getAsJSONObjectFromObject(String json, String key) {\t\ttry {\t\t\tJSONObject jsonObject = JSON.parseObject(json);\t\t\treturn jsonObject.getJSONObject(key);\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAsJSONArrayFromObject", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "JSONArray", "snippet": "\tpublic static JSONArray getAsJSONArrayFromObject(String json, String key) {\t\ttry {\t\t\tJSONObject jsonObject = JSON.parseObject(json);\t\t\treturn jsonObject.getJSONArray(key);\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAsStringFromObject", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getAsStringFromObject(String json, String key) {\t\ttry {\t\t\tJSONObject jsonObject = JSON.parseObject(json);\t\t\treturn jsonObject.getString(key);\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAsIntegerFromObject", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Integer", "snippet": "\tpublic static Integer getAsIntegerFromObject(String json, String key) {\t\ttry {\t\t\tJSONObject jsonObject = JSON.parseObject(json);\t\t\treturn jsonObject.getInteger(key);\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAsLongFromObject", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "\tpublic static Long getAsLongFromObject(String json, String key) {\t\ttry {\t\t\tJSONObject jsonObject = JSON.parseObject(json);\t\t\treturn jsonObject.getLong(key);\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAsDoubleFromObject", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Double", "snippet": "\tpublic static Double getAsDoubleFromObject(String json, String key) {\t\ttry {\t\t\tJSONObject jsonObject = JSON.parseObject(json);\t\t\treturn jsonObject.getDouble(key);\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAsBooleanFromObject", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Boolean", "snippet": "\tpublic static Boolean getAsBooleanFromObject(String json, String key) {\t\ttry {\t\t\tJSONObject jsonObject = JSON.parseObject(json);\t\t\treturn jsonObject.getBoolean(key);\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAsShortFromObject", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Short", "snippet": "\tpublic static Short getAsShortFromObject(String json, String key) {\t\ttry {\t\t\tJSONObject jsonObject = JSON.parseObject(json);\t\t\treturn jsonObject.getShort(key);\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAsByteFromObject", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Byte", "snippet": "\tpublic static Byte getAsByteFromObject(String json, String key) {\t\ttry {\t\t\tJSONObject jsonObject = JSON.parseObject(json);\t\t\treturn jsonObject.getByte(key);\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAsObjectFromObject", "params": ["String", "String", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "\tpublic static <T> T getAsObjectFromObject(String json, String key, Class<T> clazz) {\t\ttry {\t\t\tJSONObject jsonObject = JSON.parseObject(json);\t\t\treturn jsonObject.getObject(key, clazz);\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAsListFromObject", "params": ["String", "String", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<T>", "snippet": "\tpublic static <T> List<T> getAsListFromObject(String json, String key, Class<T> clazz) {\t\ttry {\t\t\tJSONObject jsonObject = JSON.parseObject(json);\t\t\tJSONArray jsonArray = jsonObject.getJSONArray(key);\t\t\treturn jsonArray.toJavaList(clazz);\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJavaObject", "params": ["JSONObject", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "\tpublic static <T> T  toJavaObject(JSONObject jsonObject, Class<T> clazz) {\t\ttry {\t\t\tT t = jsonObject.toJavaObject(clazz);\t\t\treturn t;\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJavaList", "params": ["JSONArray", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<T>", "snippet": "\tpublic static <T> List<T> toJavaList(JSONArray jsonArray, Class<T> clazz) {\t\ttry {\t\t\tList<T> list = jsonArray.toJavaList(clazz);\t\t\treturn list;\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseJSONObject", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "JSONObject", "snippet": "\tpublic static JSONObject parseJSONObject(Object object) {\t\ttry {\t\t\treturn JSON.parseObject(toJson(object));\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseJSONArray", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "JSONArray", "snippet": "\tpublic static JSONArray parseJSONArray(Object object) {\t\ttry {\t\t\treturn JSON.parseArray(toJson(object));\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateAssignObject", "params": ["Object", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "\tpublic static <T> T generateAssignObject(Object source, Class<T> clazz) {\t\ttry {\t\t\tT t = toJavaObject(parseJSONObject(source), clazz);\t\t\treturn t;\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateAssignList", "params": ["Object", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<T>", "snippet": "\tpublic static <T> List<T> generateAssignList(Object source, Class<T> clazz) {\t\ttry {\t\t\tList<T> list = toJavaList(parseJSONArray(source), clazz);\t\t\treturn list;\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/FastJsonUtils.java", "stars": "3", "class": {"name": "FastJsonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    // Get setting keys.    PreferenceManager.setDefaultValues(this, R.xml.preferences, false);    sharedPref = PreferenceManager.getDefaultSharedPreferences(this);    keyprefResolution = getString(R.string.pref_resolution_key);    keyprefFps = getString(R.string.pref_fps_key);    keyprefVideoBitrateType = getString(R.string.pref_maxvideobitrate_key);    keyprefVideoBitrateValue = getString(R.string.pref_maxvideobitratevalue_key);    keyprefAudioBitrateType = getString(R.string.pref_startaudiobitrate_key);    keyprefAudioBitrateValue = getString(R.string.pref_startaudiobitratevalue_key);    keyprefRoomServerUrl = getString(R.string.pref_room_server_url_key);    keyprefRoom = getString(R.string.pref_room_key);    keyprefRoomList = getString(R.string.pref_room_list_key);    setContentView(R.layout.activity_connect);    roomEditText = findViewById(R.id.room_edittext);    roomEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {      @Override      public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {        if (i == EditorInfo.IME_ACTION_DONE) {          addFavoriteButton.performClick();          return true;        }        return false;      }    });    roomEditText.requestFocus();    roomListView = findViewById(R.id.room_listview);    roomListView.setEmptyView(findViewById(android.R.id.empty));    roomListView.setOnItemClickListener(roomListClickListener);    registerForContextMenu(roomListView);    ImageButton connectButton = findViewById(R.id.connect_button);    connectButton.setOnClickListener(connectListener);    addFavoriteButton = findViewById(R.id.add_favorite_button);    addFavoriteButton.setOnClickListener(addFavoriteListener);    requestPermissions();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean onCreateOptionsMenu(Menu menu) {    getMenuInflater().inflate(R.menu.connect_menu, menu);    return true;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateContextMenu", "params": ["ContextMenu", "View", "ContextMenu"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {    if (v.getId() == R.id.room_listview) {      AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) menuInfo;      menu.setHeaderTitle(roomList.get(info.position));      String[] menuItems = getResources().getStringArray(R.array.roomListContextMenu);      for (int i = 0; i < menuItems.length; i++) {        menu.add(Menu.NONE, i, i, menuItems[i]);      }    } else {      super.onCreateContextMenu(menu, v, menuInfo);    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onContextItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean onContextItemSelected(MenuItem item) {    if (item.getItemId() == REMOVE_FAVORITE_INDEX) {      AdapterView.AdapterContextMenuInfo info =          (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();      roomList.remove(info.position);      adapter.notifyDataSetChanged();      return true;    }    return super.onContextItemSelected(item);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onOptionsItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean onOptionsItemSelected(MenuItem item) {    // Handle presses on the action bar items.    if (item.getItemId() == R.id.action_settings) {      Intent intent = new Intent(this, SettingsActivity.class);      startActivity(intent);      return true;    } else if (item.getItemId() == R.id.action_loopback) {      connectToRoom(null, false, true, false, 0);      return true;    } else {      return super.onOptionsItemSelected(item);    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onPause() {    super.onPause();    String room = roomEditText.getText().toString();    String roomListJson = new JSONArray(roomList).toString();    SharedPreferences.Editor editor = sharedPref.edit();    editor.putString(keyprefRoom, room);    editor.putString(keyprefRoomList, roomListJson);    editor.commit();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onResume() {    super.onResume();    String room = sharedPref.getString(keyprefRoom, \"\");    roomEditText.setText(room);    roomList = new ArrayList<>();    String roomListJson = sharedPref.getString(keyprefRoomList, null);    if (roomListJson != null) {      try {        JSONArray jsonArray = new JSONArray(roomListJson);        for (int i = 0; i < jsonArray.length(); i++) {          roomList.add(jsonArray.get(i).toString());        }      } catch (JSONException e) {        Log.e(TAG, \"Failed to load room list: \" + e.toString());      }    }    adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, roomList);    roomListView.setAdapter(adapter);    if (adapter.getCount() > 0) {      roomListView.requestFocus();      roomListView.setItemChecked(0, true);    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onActivityResult", "params": ["int", "int", "Intent"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void onActivityResult(int requestCode, int resultCode, Intent data) {    if (requestCode == CONNECTION_REQUEST && commandLineRun) {      Log.d(TAG, \"Return: \" + resultCode);      setResult(resultCode);      commandLineRun = false;      finish();    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRequestPermissionsResult", "params": ["int", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onRequestPermissionsResult(      int requestCode, String[] permissions, int[] grantResults) {    if (requestCode == PERMISSION_REQUEST) {      String[] missingPermissions = getMissingPermissions();      if (missingPermissions.length != 0) {        // User didn't grant all the permissions. Warn that the application might not work        // correctly.        new AlertDialog.Builder(this)            .setMessage(R.string.missing_permissions_try_again)            .setPositiveButton(R.string.yes,                (dialog, id) -> {                  // User wants to try giving the permissions again.                  dialog.cancel();                  requestPermissions();                })            .setNegativeButton(R.string.no,                (dialog, id) -> {                  // User doesn't want to give the permissions.                  dialog.cancel();                  onPermissionsGranted();                })            .show();      } else {        // All permissions granted.        onPermissionsGranted();      }    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPermissionsGranted", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void onPermissionsGranted() {    // If an implicit VIEW intent is launching the app, go directly to that URL.    final Intent intent = getIntent();    if (\"android.intent.action.VIEW\".equals(intent.getAction()) && !commandLineRun) {      boolean loopback = intent.getBooleanExtra(CallActivity.EXTRA_LOOPBACK, false);      int runTimeMs = intent.getIntExtra(CallActivity.EXTRA_RUNTIME, 0);      boolean useValuesFromIntent =          intent.getBooleanExtra(CallActivity.EXTRA_USE_VALUES_FROM_INTENT, false);      String room = sharedPref.getString(keyprefRoom, \"\");      connectToRoom(room, true, loopback, useValuesFromIntent, runTimeMs);    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "requestPermissions", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void requestPermissions() {    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {      // Dynamic permissions are not required before Android M.      onPermissionsGranted();      return;    }    String[] missingPermissions = getMissingPermissions();    if (missingPermissions.length != 0) {      requestPermissions(missingPermissions, PERMISSION_REQUEST);    } else {      onPermissionsGranted();    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMissingPermissions", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String[] getMissingPermissions() {    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {      return new String[0];    }    PackageInfo info;    try {      info = getPackageManager().getPackageInfo(getPackageName(), PackageManager.GET_PERMISSIONS);    } catch (PackageManager.NameNotFoundException e) {      Log.w(TAG, \"Failed to retrieve permissions.\");      return new String[0];    }    if (info.requestedPermissions == null) {      Log.w(TAG, \"No requested permissions.\");      return new String[0];    }    ArrayList<String> missingPermissions = new ArrayList<>();    for (int i = 0; i < info.requestedPermissions.length; i++) {      if ((info.requestedPermissionsFlags[i] & PackageInfo.REQUESTED_PERMISSION_GRANTED) == 0) {        missingPermissions.add(info.requestedPermissions[i]);      }    }    Log.d(TAG, \"Missing permissions: \" + missingPermissions);    return missingPermissions.toArray(new String[missingPermissions.size()]);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "sharedPrefGetString", "params": ["int", "String", "int", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String sharedPrefGetString(      int attributeId, String intentName, int defaultId, boolean useFromIntent) {    String defaultValue = getString(defaultId);    if (useFromIntent) {      String value = getIntent().getStringExtra(intentName);      if (value != null) {        return value;      }      return defaultValue;    } else {      String attributeName = getString(attributeId);      return sharedPref.getString(attributeName, defaultValue);    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "sharedPrefGetBoolean", "params": ["int", "String", "int", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean sharedPrefGetBoolean(      int attributeId, String intentName, int defaultId, boolean useFromIntent) {    boolean defaultValue = Boolean.parseBoolean(getString(defaultId));    if (useFromIntent) {      return getIntent().getBooleanExtra(intentName, defaultValue);    } else {      String attributeName = getString(attributeId);      return sharedPref.getBoolean(attributeName, defaultValue);    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "sharedPrefGetInteger", "params": ["int", "String", "int", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int sharedPrefGetInteger(      int attributeId, String intentName, int defaultId, boolean useFromIntent) {    String defaultString = getString(defaultId);    int defaultValue = Integer.parseInt(defaultString);    if (useFromIntent) {      return getIntent().getIntExtra(intentName, defaultValue);    } else {      String attributeName = getString(attributeId);      String value = sharedPref.getString(attributeName, defaultString);      try {        return Integer.parseInt(value);      } catch (NumberFormatException e) {        Log.e(TAG, \"Wrong setting for: \" + attributeName + \":\" + value);        return defaultValue;      }    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "connectToRoom", "params": ["String", "boolean", "boolean", "boolean", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void connectToRoom(String roomId, boolean commandLineRun, boolean loopback,      boolean useValuesFromIntent, int runTimeMs) {    ConnectActivity.commandLineRun = commandLineRun;    // roomId is random for loopback.    if (loopback) {      roomId = Integer.toString((new Random()).nextInt(100000000));    }    String roomUrl = sharedPref.getString(        keyprefRoomServerUrl, getString(R.string.pref_room_server_url_default));    // Video call enabled flag.    boolean videoCallEnabled = sharedPrefGetBoolean(R.string.pref_videocall_key,        CallActivity.EXTRA_VIDEO_CALL, R.string.pref_videocall_default, useValuesFromIntent);    // Use screencapture option.    boolean useScreencapture = sharedPrefGetBoolean(R.string.pref_screencapture_key,        CallActivity.EXTRA_SCREENCAPTURE, R.string.pref_screencapture_default, useValuesFromIntent);    // Use Camera2 option.    boolean useCamera2 = sharedPrefGetBoolean(R.string.pref_camera2_key, CallActivity.EXTRA_CAMERA2,        R.string.pref_camera2_default, useValuesFromIntent);    // Get default codecs.    String videoCodec = sharedPrefGetString(R.string.pref_videocodec_key,        CallActivity.EXTRA_VIDEOCODEC, R.string.pref_videocodec_default, useValuesFromIntent);    String audioCodec = sharedPrefGetString(R.string.pref_audiocodec_key,        CallActivity.EXTRA_AUDIOCODEC, R.string.pref_audiocodec_default, useValuesFromIntent);    // Check HW codec flag.    boolean hwCodec = sharedPrefGetBoolean(R.string.pref_hwcodec_key,        CallActivity.EXTRA_HWCODEC_ENABLED, R.string.pref_hwcodec_default, useValuesFromIntent);    // Check Capture to texture.    boolean captureToTexture = sharedPrefGetBoolean(R.string.pref_capturetotexture_key,        CallActivity.EXTRA_CAPTURETOTEXTURE_ENABLED, R.string.pref_capturetotexture_default,        useValuesFromIntent);    // Check FlexFEC.    boolean flexfecEnabled = sharedPrefGetBoolean(R.string.pref_flexfec_key,        CallActivity.EXTRA_FLEXFEC_ENABLED, R.string.pref_flexfec_default, useValuesFromIntent);    // Check Disable Audio Processing flag.    boolean noAudioProcessing = sharedPrefGetBoolean(R.string.pref_noaudioprocessing_key,        CallActivity.EXTRA_NOAUDIOPROCESSING_ENABLED, R.string.pref_noaudioprocessing_default,        useValuesFromIntent);    boolean aecDump = sharedPrefGetBoolean(R.string.pref_aecdump_key,        CallActivity.EXTRA_AECDUMP_ENABLED, R.string.pref_aecdump_default, useValuesFromIntent);    boolean saveInputAudioToFile =        sharedPrefGetBoolean(R.string.pref_enable_save_input_audio_to_file_key,            CallActivity.EXTRA_SAVE_INPUT_AUDIO_TO_FILE_ENABLED,            R.string.pref_enable_save_input_audio_to_file_default, useValuesFromIntent);    // Check OpenSL ES enabled flag.    boolean useOpenSLES = sharedPrefGetBoolean(R.string.pref_opensles_key,        CallActivity.EXTRA_OPENSLES_ENABLED, R.string.pref_opensles_default, useValuesFromIntent);    // Check Disable built-in AEC flag.    boolean disableBuiltInAEC = sharedPrefGetBoolean(R.string.pref_disable_built_in_aec_key,        CallActivity.EXTRA_DISABLE_BUILT_IN_AEC, R.string.pref_disable_built_in_aec_default,        useValuesFromIntent);    // Check Disable built-in AGC flag.    boolean disableBuiltInAGC = sharedPrefGetBoolean(R.string.pref_disable_built_in_agc_key,        CallActivity.EXTRA_DISABLE_BUILT_IN_AGC, R.string.pref_disable_built_in_agc_default,        useValuesFromIntent);    // Check Disable built-in NS flag.    boolean disableBuiltInNS = sharedPrefGetBoolean(R.string.pref_disable_built_in_ns_key,        CallActivity.EXTRA_DISABLE_BUILT_IN_NS, R.string.pref_disable_built_in_ns_default,        useValuesFromIntent);    // Check Disable gain control    boolean disableWebRtcAGCAndHPF = sharedPrefGetBoolean(        R.string.pref_disable_webrtc_agc_and_hpf_key, CallActivity.EXTRA_DISABLE_WEBRTC_AGC_AND_HPF,        R.string.pref_disable_webrtc_agc_and_hpf_key, useValuesFromIntent);    // Get video resolution from settings.    int videoWidth = 0;    int videoHeight = 0;    if (useValuesFromIntent) {      videoWidth = getIntent().getIntExtra(CallActivity.EXTRA_VIDEO_WIDTH, 0);      videoHeight = getIntent().getIntExtra(CallActivity.EXTRA_VIDEO_HEIGHT, 0);    }    if (videoWidth == 0 && videoHeight == 0) {      String resolution =          sharedPref.getString(keyprefResolution, getString(R.string.pref_resolution_default));      String[] dimensions = resolution.split(\"[ x]+\");      if (dimensions.length == 2) {        try {          videoWidth = Integer.parseInt(dimensions[0]);          videoHeight = Integer.parseInt(dimensions[1]);        } catch (NumberFormatException e) {          videoWidth = 0;          videoHeight = 0;          Log.e(TAG, \"Wrong video resolution setting: \" + resolution);        }      }    }    // Get camera fps from settings.    int cameraFps = 0;    if (useValuesFromIntent) {      cameraFps = getIntent().getIntExtra(CallActivity.EXTRA_VIDEO_FPS, 0);    }    if (cameraFps == 0) {      String fps = sharedPref.getString(keyprefFps, getString(R.string.pref_fps_default));      String[] fpsValues = fps.split(\"[ x]+\");      if (fpsValues.length == 2) {        try {          cameraFps = Integer.parseInt(fpsValues[0]);        } catch (NumberFormatException e) {          cameraFps = 0;          Log.e(TAG, \"Wrong camera fps setting: \" + fps);        }      }    }    // Check capture quality slider flag.    boolean captureQualitySlider = sharedPrefGetBoolean(R.string.pref_capturequalityslider_key,        CallActivity.EXTRA_VIDEO_CAPTUREQUALITYSLIDER_ENABLED,        R.string.pref_capturequalityslider_default, useValuesFromIntent);    // Get video and audio start bitrate.    int videoStartBitrate = 0;    if (useValuesFromIntent) {      videoStartBitrate = getIntent().getIntExtra(CallActivity.EXTRA_VIDEO_BITRATE, 0);    }    if (videoStartBitrate == 0) {      String bitrateTypeDefault = getString(R.string.pref_maxvideobitrate_default);      String bitrateType = sharedPref.getString(keyprefVideoBitrateType, bitrateTypeDefault);      if (!bitrateType.equals(bitrateTypeDefault)) {        String bitrateValue = sharedPref.getString(            keyprefVideoBitrateValue, getString(R.string.pref_maxvideobitratevalue_default));        videoStartBitrate = Integer.parseInt(bitrateValue);      }    }    int audioStartBitrate = 0;    if (useValuesFromIntent) {      audioStartBitrate = getIntent().getIntExtra(CallActivity.EXTRA_AUDIO_BITRATE, 0);    }    if (audioStartBitrate == 0) {      String bitrateTypeDefault = getString(R.string.pref_startaudiobitrate_default);      String bitrateType = sharedPref.getString(keyprefAudioBitrateType, bitrateTypeDefault);      if (!bitrateType.equals(bitrateTypeDefault)) {        String bitrateValue = sharedPref.getString(            keyprefAudioBitrateValue, getString(R.string.pref_startaudiobitratevalue_default));        audioStartBitrate = Integer.parseInt(bitrateValue);      }    }    // Check statistics display option.    boolean displayHud = sharedPrefGetBoolean(R.string.pref_displayhud_key,        CallActivity.EXTRA_DISPLAY_HUD, R.string.pref_displayhud_default, useValuesFromIntent);    boolean tracing = sharedPrefGetBoolean(R.string.pref_tracing_key, CallActivity.EXTRA_TRACING,        R.string.pref_tracing_default, useValuesFromIntent);    // Check Enable RtcEventLog.    boolean rtcEventLogEnabled = sharedPrefGetBoolean(R.string.pref_enable_rtceventlog_key,        CallActivity.EXTRA_ENABLE_RTCEVENTLOG, R.string.pref_enable_rtceventlog_default,        useValuesFromIntent);    // Get datachannel options    boolean dataChannelEnabled = sharedPrefGetBoolean(R.string.pref_enable_datachannel_key,        CallActivity.EXTRA_DATA_CHANNEL_ENABLED, R.string.pref_enable_datachannel_default,        useValuesFromIntent);    boolean ordered = sharedPrefGetBoolean(R.string.pref_ordered_key, CallActivity.EXTRA_ORDERED,        R.string.pref_ordered_default, useValuesFromIntent);    boolean negotiated = sharedPrefGetBoolean(R.string.pref_negotiated_key,        CallActivity.EXTRA_NEGOTIATED, R.string.pref_negotiated_default, useValuesFromIntent);    int maxRetrMs = sharedPrefGetInteger(R.string.pref_max_retransmit_time_ms_key,        CallActivity.EXTRA_MAX_RETRANSMITS_MS, R.string.pref_max_retransmit_time_ms_default,        useValuesFromIntent);    int maxRetr =        sharedPrefGetInteger(R.string.pref_max_retransmits_key, CallActivity.EXTRA_MAX_RETRANSMITS,            R.string.pref_max_retransmits_default, useValuesFromIntent);    int id = sharedPrefGetInteger(R.string.pref_data_id_key, CallActivity.EXTRA_ID,        R.string.pref_data_id_default, useValuesFromIntent);    String protocol = sharedPrefGetString(R.string.pref_data_protocol_key,        CallActivity.EXTRA_PROTOCOL, R.string.pref_data_protocol_default, useValuesFromIntent);    // Start AppRTCMobile activity.    Log.d(TAG, \"Connecting to room \" + roomId + \" at URL \" + roomUrl);    if (validateUrl(roomUrl)) {      Uri uri = Uri.parse(roomUrl);      Intent intent = new Intent(this, CallActivity.class);      intent.setData(uri);      intent.putExtra(CallActivity.EXTRA_ROOMID, roomId);      intent.putExtra(CallActivity.EXTRA_LOOPBACK, loopback);      intent.putExtra(CallActivity.EXTRA_VIDEO_CALL, videoCallEnabled);      intent.putExtra(CallActivity.EXTRA_SCREENCAPTURE, useScreencapture);      intent.putExtra(CallActivity.EXTRA_CAMERA2, useCamera2);      intent.putExtra(CallActivity.EXTRA_VIDEO_WIDTH, videoWidth);      intent.putExtra(CallActivity.EXTRA_VIDEO_HEIGHT, videoHeight);      intent.putExtra(CallActivity.EXTRA_VIDEO_FPS, cameraFps);      intent.putExtra(CallActivity.EXTRA_VIDEO_CAPTUREQUALITYSLIDER_ENABLED, captureQualitySlider);      intent.putExtra(CallActivity.EXTRA_VIDEO_BITRATE, videoStartBitrate);      intent.putExtra(CallActivity.EXTRA_VIDEOCODEC, videoCodec);      intent.putExtra(CallActivity.EXTRA_HWCODEC_ENABLED, hwCodec);      intent.putExtra(CallActivity.EXTRA_CAPTURETOTEXTURE_ENABLED, captureToTexture);      intent.putExtra(CallActivity.EXTRA_FLEXFEC_ENABLED, flexfecEnabled);      intent.putExtra(CallActivity.EXTRA_NOAUDIOPROCESSING_ENABLED, noAudioProcessing);      intent.putExtra(CallActivity.EXTRA_AECDUMP_ENABLED, aecDump);      intent.putExtra(CallActivity.EXTRA_SAVE_INPUT_AUDIO_TO_FILE_ENABLED, saveInputAudioToFile);      intent.putExtra(CallActivity.EXTRA_OPENSLES_ENABLED, useOpenSLES);      intent.putExtra(CallActivity.EXTRA_DISABLE_BUILT_IN_AEC, disableBuiltInAEC);      intent.putExtra(CallActivity.EXTRA_DISABLE_BUILT_IN_AGC, disableBuiltInAGC);      intent.putExtra(CallActivity.EXTRA_DISABLE_BUILT_IN_NS, disableBuiltInNS);      intent.putExtra(CallActivity.EXTRA_DISABLE_WEBRTC_AGC_AND_HPF, disableWebRtcAGCAndHPF);      intent.putExtra(CallActivity.EXTRA_AUDIO_BITRATE, audioStartBitrate);      intent.putExtra(CallActivity.EXTRA_AUDIOCODEC, audioCodec);      intent.putExtra(CallActivity.EXTRA_DISPLAY_HUD, displayHud);      intent.putExtra(CallActivity.EXTRA_TRACING, tracing);      intent.putExtra(CallActivity.EXTRA_ENABLE_RTCEVENTLOG, rtcEventLogEnabled);      intent.putExtra(CallActivity.EXTRA_CMDLINE, commandLineRun);      intent.putExtra(CallActivity.EXTRA_RUNTIME, runTimeMs);      intent.putExtra(CallActivity.EXTRA_DATA_CHANNEL_ENABLED, dataChannelEnabled);      if (dataChannelEnabled) {        intent.putExtra(CallActivity.EXTRA_ORDERED, ordered);        intent.putExtra(CallActivity.EXTRA_MAX_RETRANSMITS_MS, maxRetrMs);        intent.putExtra(CallActivity.EXTRA_MAX_RETRANSMITS, maxRetr);        intent.putExtra(CallActivity.EXTRA_PROTOCOL, protocol);        intent.putExtra(CallActivity.EXTRA_NEGOTIATED, negotiated);        intent.putExtra(CallActivity.EXTRA_ID, id);      }      if (useValuesFromIntent) {        if (getIntent().hasExtra(CallActivity.EXTRA_VIDEO_FILE_AS_CAMERA)) {          String videoFileAsCamera =              getIntent().getStringExtra(CallActivity.EXTRA_VIDEO_FILE_AS_CAMERA);          intent.putExtra(CallActivity.EXTRA_VIDEO_FILE_AS_CAMERA, videoFileAsCamera);        }        if (getIntent().hasExtra(CallActivity.EXTRA_SAVE_REMOTE_VIDEO_TO_FILE)) {          String saveRemoteVideoToFile =              getIntent().getStringExtra(CallActivity.EXTRA_SAVE_REMOTE_VIDEO_TO_FILE);          intent.putExtra(CallActivity.EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, saveRemoteVideoToFile);        }        if (getIntent().hasExtra(CallActivity.EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH)) {          int videoOutWidth =              getIntent().getIntExtra(CallActivity.EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH, 0);          intent.putExtra(CallActivity.EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH, videoOutWidth);        }        if (getIntent().hasExtra(CallActivity.EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT)) {          int videoOutHeight =              getIntent().getIntExtra(CallActivity.EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT, 0);          intent.putExtra(CallActivity.EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT, videoOutHeight);        }      }      startActivityForResult(intent, CONNECTION_REQUEST);    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "validateUrl", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean validateUrl(String url) {    if (URLUtil.isHttpsUrl(url) || URLUtil.isHttpUrl(url)) {      return true;    }    new AlertDialog.Builder(this)        .setTitle(getText(R.string.invalid_url_title))        .setMessage(getString(R.string.invalid_url_text, url))        .setCancelable(false)        .setNeutralButton(R.string.ok,            new DialogInterface.OnClickListener() {              @Override              public void onClick(DialogInterface dialog, int id) {                dialog.cancel();              }            })        .create()        .show();    return false;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/ConnectActivity.java", "stars": "2", "class": {"name": "ConnectActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "method", "params": ["I"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void method(I i) {        System.out.println(i);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/13.%E3%80%90Collection%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/02_CollectionAndReflect/src/com/itheima/demo03/Generic/GenericInterfaceImpl2(1).java", "stars": "2", "class": {"name": "GenericInterfaceImpl2", "extends": null, "implements": ["GenericInterface"], "modifiers": ["public"]}}, {"method_name": "getSize", "params": ["File"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "\tprotected int getSize(File file) {\t\treturn 1;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/disc/impl/FileCountLimitedDiscCache.java", "stars": "74", "class": {"name": "FileCountLimitedDiscCache", "extends": "LimitedDiscCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources      .getResourceAsReader(\"org/apache/ibatis/submitted/resolution/cacherefs/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),      \"org/apache/ibatis/submitted/resolution/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/resolution/cacherefs/CacheRefsTest.java", "stars": "15", "class": {"name": "CacheRefsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      MapperB mapper = sqlSession.getMapper(MapperB.class);      User user = mapper.getUser(1);      Assertions.assertEquals(Integer.valueOf(1), user.getId());      Assertions.assertEquals(\"User1\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/resolution/cacherefs/CacheRefsTest.java", "stars": "15", "class": {"name": "CacheRefsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onReadSuccess", "params": ["byte"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onReadSuccess(byte[] data);    public abstract void onReadFailure(BleException exception);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleReadCallback.java", "stars": "2", "class": {"name": "BleReadCallback", "extends": "BleBaseCallback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onReadFailure", "params": ["BleException"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onReadFailure(BleException exception);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleReadCallback.java", "stars": "2", "class": {"name": "BleReadCallback", "extends": "BleBaseCallback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "fadeIn", "params": ["View"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void fadeIn(View v) {        if (v.getVisibility() == View.VISIBLE) return;        Animation fadeInAnim = AnimationUtils.loadAnimation(ButterApplication.getAppContext(), android.R.anim.fade_in);        v.setVisibility(View.VISIBLE);        v.startAnimation(fadeInAnim);        v.requestLayout(); // Force redraw    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/AnimUtils.java", "stars": "4", "class": {"name": "AnimUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fadeOut", "params": ["View"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void fadeOut(View v) {        if (v.getVisibility() == View.INVISIBLE) return;        Animation fadeOutAnim = AnimationUtils.loadAnimation(ButterApplication.getAppContext(), android.R.anim.fade_out);        v.startAnimation(fadeOutAnim);        v.setVisibility(View.INVISIBLE);        v.requestLayout(); // Force redraw    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/AnimUtils.java", "stars": "4", "class": {"name": "AnimUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/missing_id_property/Part.java", "stars": "15", "class": {"name": "Part", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "index", "params": ["Model"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String index(Model model) {        return index(model, 1);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/controller/ContentIndexController.java", "stars": "1", "class": {"name": "ContentIndexController", "extends": "ContentBaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "index", "params": ["Model", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String index(Model model, @PathVariable Integer page) {        PageParam pageParam = new PageParam();        pageParam.setPageNum(page);        pageParam.setPageSize(PAGE_SIZE);        PageResult pageResult = articleService.fndAllWithTagsByPage(pageParam);        Map<String, Object> map = new HashMap<>();        map.put(\"content\", pageResult.getContent());        map.put(\"totalPages\", pageResult.getTotalPages());        map.put(\"pageNum\", pageResult.getPageNum());        model.addAttribute(\"posts\", map);        return BASE_DIR + \"index\";    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/controller/ContentIndexController.java", "stars": "1", "class": {"name": "ContentIndexController", "extends": "ContentBaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "favicon", "params": ["HttpServletResponse"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void favicon(HttpServletResponse response) throws IOException {        response.sendRedirect(THEME_DIR + \"static/images/favicon.ico\");    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/controller/ContentIndexController.java", "stars": "1", "class": {"name": "ContentIndexController", "extends": "ContentBaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "version", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String version() {        return BeyondConst.BEYOND_VERSION;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/controller/ContentIndexController.java", "stars": "1", "class": {"name": "ContentIndexController", "extends": "ContentBaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "produceTask", "params": ["long"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void produceTask(long jobId) {        JobInfoController jobInfoController = SpringContext.getBean(JobInfoController.class);        JobInfoService jobInfoService = SpringContext.getBean(JobInfoService.class);        MessageSource messageSource = SpringContext.getBean(MessageSource.class);        try {            jobInfoController.scheduleRun(jobId);        }catch(Exception e){            JobInfo jobInfo = jobInfoService.get(jobId);            String message = null;            if(e instanceof EndPointException){                EndPointException ee = (EndPointException)e;                Locale locale = LocaleContextHolder.getLocale();                message = ee.getUiMessage();                try {                    message = messageSource.getMessage(ee.getUiMessage(), null, locale);                }catch(Exception ex){                    //Ignore                }                if(ee.getArgs() != null && ee.getArgs().length > 0){                    message = PatternInjectUtils.inject(message, ee.getArgs());                }            }else{                message = e.getMessage();            }            jobInfoService.sendInfoToAlarm(-1, jobId, TITLE_JOB_SCHEDULER_ERROR,                    PatternInjectUtils.inject(JOB_SCHEDULER_ERROR, new String[]{jobInfo.getJobName(), message},                            false, false, true));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/scheduler/cluster/bean/TaskUtil.java", "stars": "23", "class": {"name": "TaskUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateIncrParams", "params": ["JobInfo", "JobTask"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<JobTaskParams>", "snippet": "    public static List<JobTaskParams> generateIncrParams(JobInfo jobInfo, JobTask jobTask){        //Add increment timestamp parameters        List<JobTaskParams> paramsList = new ArrayList<>();        paramsList.add(new JobTaskParams(DefaultParams.Task.PARAM_INCR_BEGIN_TIME,                jobInfo.getLastTriggerTime() != null? String.valueOf(jobInfo.getLastTriggerTime().getTime()): \"0\"));        paramsList.add(new JobTaskParams(DefaultParams.Task.PARAM_INCR_END_TIME,                String.valueOf(jobTask.getTriggerTime().getTime())));        return paramsList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/scheduler/cluster/bean/TaskUtil.java", "stars": "23", "class": {"name": "TaskUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(SquareDelegate.measureWidth(widthMeasureSpec, heightMeasureSpec),                SquareDelegate.measureHeight(widthMeasureSpec, heightMeasureSpec));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/square/SquareButton.java", "stars": "1", "class": {"name": "SquareButton", "extends": "AppCompatButton", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "createProxy", "params": ["Object", "ResultLoaderMap", "Configuration", "ObjectFactory", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {    return EnhancedResultObjectProxyImpl.createProxy(target, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java", "stars": "15", "class": {"name": "CglibProxyFactory", "extends": null, "implements": ["ProxyFactory"], "modifiers": ["public"]}}, {"method_name": "createDeserializationProxy", "params": ["Object", "Map<String,ResultLoaderMap>", "ObjectFactory", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object createDeserializationProxy(Object target, Map<String, ResultLoaderMap.LoadPair> unloadedProperties, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {    return EnhancedDeserializationProxyImpl.createProxy(target, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java", "stars": "15", "class": {"name": "CglibProxyFactory", "extends": null, "implements": ["ProxyFactory"], "modifiers": ["public"]}}, {"method_name": "crateProxy", "params": ["Class<?>", "Callback", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["static"], "return_type": "Object", "snippet": "  static Object crateProxy(Class<?> type, Callback callback, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {    Enhancer enhancer = new Enhancer();    enhancer.setCallback(callback);    enhancer.setSuperclass(type);    try {      type.getDeclaredMethod(WRITE_REPLACE_METHOD);      // ObjectOutputStream will call writeReplace of objects returned by writeReplace      if (LogHolder.log.isDebugEnabled()) {        LogHolder.log.debug(WRITE_REPLACE_METHOD + \" method was found on bean \" + type + \", make sure it returns this\");      }    } catch (NoSuchMethodException e) {      enhancer.setInterfaces(new Class[]{WriteReplaceInterface.class});    } catch (SecurityException e) {      // nothing to do here    }    Object enhanced;    if (constructorArgTypes.isEmpty()) {      enhanced = enhancer.create();    } else {      Class<?>[] typesArray = constructorArgTypes.toArray(new Class[constructorArgTypes.size()]);      Object[] valuesArray = constructorArgs.toArray(new Object[constructorArgs.size()]);      enhanced = enhancer.create(typesArray, valuesArray);    }    return enhanced;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java", "stars": "15", "class": {"name": "CglibProxyFactory", "extends": null, "implements": ["ProxyFactory"], "modifiers": ["public"]}}, {"method_name": "createProxy", "params": ["Object", "ResultLoaderMap", "Configuration", "ObjectFactory", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {      final Class<?> type = target.getClass();      EnhancedResultObjectProxyImpl callback = new EnhancedResultObjectProxyImpl(type, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);      Object enhanced = crateProxy(type, callback, constructorArgTypes, constructorArgs);      PropertyCopier.copyBeanProperties(type, target, enhanced);      return enhanced;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java", "stars": "15", "class": {"name": "EnhancedResultObjectProxyImpl", "extends": null, "implements": ["MethodInterceptor"], "modifiers": ["private", "static"]}}, {"method_name": "intercept", "params": ["Object", "Method", "Object", "MethodProxy"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {      final String methodName = method.getName();      try {        synchronized (lazyLoader) {          if (WRITE_REPLACE_METHOD.equals(methodName)) {            Object original;            if (constructorArgTypes.isEmpty()) {              original = objectFactory.create(type);            } else {              original = objectFactory.create(type, constructorArgTypes, constructorArgs);            }            PropertyCopier.copyBeanProperties(type, enhanced, original);            if (lazyLoader.size() > 0) {              return new CglibSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);            } else {              return original;            }          } else {            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {                lazyLoader.loadAll();              } else if (PropertyNamer.isSetter(methodName)) {                final String property = PropertyNamer.methodToProperty(methodName);                lazyLoader.remove(property);              } else if (PropertyNamer.isGetter(methodName)) {                final String property = PropertyNamer.methodToProperty(methodName);                if (lazyLoader.hasLoader(property)) {                  lazyLoader.load(property);                }              }            }          }        }        return methodProxy.invokeSuper(enhanced, args);      } catch (Throwable t) {        throw ExceptionUtil.unwrapThrowable(t);      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java", "stars": "15", "class": {"name": "EnhancedResultObjectProxyImpl", "extends": null, "implements": ["MethodInterceptor"], "modifiers": ["private", "static"]}}, {"method_name": "createProxy", "params": ["Object", "Map<String,ResultLoaderMap>", "ObjectFactory", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object createProxy(Object target, Map<String, ResultLoaderMap.LoadPair> unloadedProperties, ObjectFactory objectFactory,            List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {      final Class<?> type = target.getClass();      EnhancedDeserializationProxyImpl callback = new EnhancedDeserializationProxyImpl(type, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);      Object enhanced = crateProxy(type, callback, constructorArgTypes, constructorArgs);      PropertyCopier.copyBeanProperties(type, target, enhanced);      return enhanced;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java", "stars": "15", "class": {"name": "EnhancedDeserializationProxyImpl", "extends": "AbstractEnhancedDeserializationProxy", "implements": ["MethodInterceptor"], "modifiers": ["private", "static"]}}, {"method_name": "intercept", "params": ["Object", "Method", "Object", "MethodProxy"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {      final Object o = super.invoke(enhanced, method, args);      return o instanceof AbstractSerialStateHolder ? o : methodProxy.invokeSuper(o, args);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java", "stars": "15", "class": {"name": "EnhancedDeserializationProxyImpl", "extends": "AbstractEnhancedDeserializationProxy", "implements": ["MethodInterceptor"], "modifiers": ["private", "static"]}}, {"method_name": "newSerialStateHolder", "params": ["Object", "Map<String,ResultLoaderMap>", "ObjectFactory", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["protected"], "return_type": "AbstractSerialStateHolder", "snippet": "    protected AbstractSerialStateHolder newSerialStateHolder(Object userBean, Map<String, ResultLoaderMap.LoadPair> unloadedProperties, ObjectFactory objectFactory,            List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {      return new CglibSerialStateHolder(userBean, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java", "stars": "15", "class": {"name": "EnhancedDeserializationProxyImpl", "extends": "AbstractEnhancedDeserializationProxy", "implements": ["MethodInterceptor"], "modifiers": ["private", "static"]}}, {"method_name": "setPlayManager", "params": ["Class<IPlayerManager>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setPlayManager(Class<? extends IPlayerManager> playManager) {        sPlayerManager = playManager;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/player/PlayerFactory.java", "stars": "2", "class": {"name": "PlayerFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlayManager", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "IPlayerManager", "snippet": "    public static IPlayerManager getPlayManager() {        if (sPlayerManager == null) {            sPlayerManager = IjkPlayerManager.class;        }        try {            return sPlayerManager.newInstance();        } catch (InstantiationException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/player/PlayerFactory.java", "stars": "2", "class": {"name": "PlayerFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFontsPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFontsPath() {        return fontsPath;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/item/SketchwareProjectResources.java", "stars": "4", "class": {"name": "SketchwareProjectResources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIconsPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getIconsPath() {        return iconsPath;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/item/SketchwareProjectResources.java", "stars": "4", "class": {"name": "SketchwareProjectResources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImagesPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getImagesPath() {        return imagesPath;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/item/SketchwareProjectResources.java", "stars": "4", "class": {"name": "SketchwareProjectResources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSoundsPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSoundsPath() {        return soundsPath;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/item/SketchwareProjectResources.java", "stars": "4", "class": {"name": "SketchwareProjectResources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFontsPath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFontsPath(String fontsPath) {        this.fontsPath = fontsPath;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/item/SketchwareProjectResources.java", "stars": "4", "class": {"name": "SketchwareProjectResources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIconsPath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIconsPath(String iconsPath) {        this.iconsPath = iconsPath;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/item/SketchwareProjectResources.java", "stars": "4", "class": {"name": "SketchwareProjectResources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setImagesPath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setImagesPath(String imagesPath) {        this.imagesPath = imagesPath;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/item/SketchwareProjectResources.java", "stars": "4", "class": {"name": "SketchwareProjectResources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSoundsPath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSoundsPath(String soundsPath) {        this.soundsPath = soundsPath;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/item/SketchwareProjectResources.java", "stars": "4", "class": {"name": "SketchwareProjectResources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "getSimpleName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSimpleName() {    return simpleName;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "setSimpleName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSimpleName(String simpleName) {    this.simpleName = simpleName;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "getClassSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "  public Long getClassSize() {    return classSize;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "setClassSize", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setClassSize(Long classSize) {    this.classSize = classSize;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "getImplInterfaces", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Class<?>", "snippet": "  public Class<?>[] getImplInterfaces() {    return implInterfaces;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "setImplInterfaces", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setImplInterfaces(Class<?>[] implInterfaces) {    this.implInterfaces = implInterfaces;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "getExtendsClass", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Class<?>", "snippet": "  public Class<?>[] getExtendsClass() {    return extendsClass;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "setExtendsClass", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setExtendsClass(Class<?>[] extendsClass) {    this.extendsClass = extendsClass;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "getFields", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Field", "snippet": "  public Field[] getFields() {    return fields;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "setFields", "params": ["Field"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFields(Field[] fields) {    this.fields = fields;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "getMethods", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Method", "snippet": "  public Method[] getMethods() {    return methods;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "setMethods", "params": ["Method"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMethods(Method[] methods) {    this.methods = methods;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "getInitMethod", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Method", "snippet": "  public Method[] getInitMethod() {    return initMethod;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "setInitMethod", "params": ["Method"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setInitMethod(Method[] initMethod) {    this.initMethod = initMethod;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object o) {    if (this == o) return true;    if (o == null || getClass() != o.getClass()) return false;    BeanDefinition that = (BeanDefinition) o;    return classSize.equals(that.classSize) &&            Objects.equals(name, that.name) &&            Objects.equals(simpleName, that.simpleName) &&            Arrays.equals(implInterfaces, that.implInterfaces) &&            Arrays.equals(extendsClass, that.extendsClass) &&            Arrays.equals(fields, that.fields) &&            Arrays.equals(methods, that.methods) &&            Arrays.equals(initMethod, that.initMethod);  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    int result = Objects.hash(name, simpleName, classSize);    result = 31 * result + Arrays.hashCode(implInterfaces);    result = 31 * result + Arrays.hashCode(extendsClass);    result = 31 * result + Arrays.hashCode(fields);    result = 31 * result + Arrays.hashCode(methods);    result = 31 * result + Arrays.hashCode(initMethod);    return result;  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/BeanDefinition.java", "stars": "2", "class": {"name": "BeanDefinition", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "final"]}}, {"method_name": "onViewRecycled", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onViewRecycled (android.support.v7.widget.RecyclerView.ViewHolder p0)\t{\t\tn_onViewRecycled (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemsViewAdapter_2.java", "stars": "2", "class": {"name": "ItemsViewAdapter_2", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onViewRecycled", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onViewRecycled (android.support.v7.widget.RecyclerView.ViewHolder p0);\tpublic void onBindViewHolder (android.support.v7.widget.RecyclerView.ViewHolder p0, int p1)\t{\t\tn_onBindViewHolder (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemsViewAdapter_2.java", "stars": "2", "class": {"name": "ItemsViewAdapter_2", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onBindViewHolder (android.support.v7.widget.RecyclerView.ViewHolder p0, int p1)\t{\t\tn_onBindViewHolder (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemsViewAdapter_2.java", "stars": "2", "class": {"name": "ItemsViewAdapter_2", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onBindViewHolder", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onBindViewHolder (android.support.v7.widget.RecyclerView.ViewHolder p0, int p1);\tpublic android.support.v7.widget.RecyclerView.ViewHolder onCreateViewHolder (android.view.ViewGroup p0, int p1)\t{\t\treturn n_onCreateViewHolder (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemsViewAdapter_2.java", "stars": "2", "class": {"name": "ItemsViewAdapter_2", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.support.v7.widget.RecyclerView.ViewHolder onCreateViewHolder (android.view.ViewGroup p0, int p1)\t{\t\treturn n_onCreateViewHolder (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemsViewAdapter_2.java", "stars": "2", "class": {"name": "ItemsViewAdapter_2", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onCreateViewHolder", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.support.v7.widget.RecyclerView.ViewHolder n_onCreateViewHolder (android.view.ViewGroup p0, int p1);\tpublic int getItemCount ()\t{\t\treturn n_getItemCount ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemsViewAdapter_2.java", "stars": "2", "class": {"name": "ItemsViewAdapter_2", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getItemCount ()\t{\t\treturn n_getItemCount ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemsViewAdapter_2.java", "stars": "2", "class": {"name": "ItemsViewAdapter_2", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getItemCount", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getItemCount ();\tpublic int getItemViewType (int p0)\t{\t\treturn n_getItemViewType (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemsViewAdapter_2.java", "stars": "2", "class": {"name": "ItemsViewAdapter_2", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getItemViewType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getItemViewType (int p0)\t{\t\treturn n_getItemViewType (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemsViewAdapter_2.java", "stars": "2", "class": {"name": "ItemsViewAdapter_2", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getItemViewType", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getItemViewType (int p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemsViewAdapter_2.java", "stars": "2", "class": {"name": "ItemsViewAdapter_2", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemsViewAdapter_2.java", "stars": "2", "class": {"name": "ItemsViewAdapter_2", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ItemsViewAdapter_2.java", "stars": "2", "class": {"name": "ItemsViewAdapter_2", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "send", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void send() {        processor.sendCommand(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommand.java", "stars": "4", "class": {"name": "ServiceCommand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCommandProcessor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ServiceCommandProcessor", "snippet": "    public ServiceCommandProcessor getCommandProcessor() {        return processor;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommand.java", "stars": "4", "class": {"name": "ServiceCommand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCommandProcessor", "params": ["ServiceCommandProcessor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCommandProcessor(ServiceCommandProcessor processor) {        this.processor = processor;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommand.java", "stars": "4", "class": {"name": "ServiceCommand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPayload", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getPayload() {        return payload;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommand.java", "stars": "4", "class": {"name": "ServiceCommand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPayload", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPayload(Object payload) {        this.payload = payload;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommand.java", "stars": "4", "class": {"name": "ServiceCommand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHttpMethod", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getHttpMethod() {        return httpMethod;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommand.java", "stars": "4", "class": {"name": "ServiceCommand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHttpMethod", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHttpMethod(String httpMethod) {        this.httpMethod = httpMethod;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommand.java", "stars": "4", "class": {"name": "ServiceCommand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTarget", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTarget() {         return target;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommand.java", "stars": "4", "class": {"name": "ServiceCommand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTarget", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTarget(String target) {        this.target = target;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommand.java", "stars": "4", "class": {"name": "ServiceCommand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRequestId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getRequestId() {        return requestId;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommand.java", "stars": "4", "class": {"name": "ServiceCommand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRequestId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRequestId(int requestId) {        this.requestId = requestId;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommand.java", "stars": "4", "class": {"name": "ServiceCommand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRequest", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HttpRequestBase", "snippet": "    public HttpRequestBase getRequest() {        if (target == null) {            throw new IllegalStateException(\"ServiceCommand has no target url\");        }        if (this.httpMethod.equalsIgnoreCase(TYPE_GET)) {            return new HttpGet(target);        } else if (this.httpMethod.equalsIgnoreCase(TYPE_POST)) {            return new HttpPost(target);        } else if (this.httpMethod.equalsIgnoreCase(TYPE_DEL)) {            return new HttpDelete(target);        } else if (this.httpMethod.equalsIgnoreCase(TYPE_PUT)) {            return new HttpPut(target);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommand.java", "stars": "4", "class": {"name": "ServiceCommand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResponseListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ResponseListener<Object>", "snippet": "    public ResponseListener<Object> getResponseListener() {        return responseListener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommand.java", "stars": "4", "class": {"name": "ServiceCommand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid contextLoads() {\t}", "url": "https://raw.githubusercontent.com/joshlong/security-jwt-fun/master/jwt-servlet/src/test/java/com/example/jwt/JwtApplicationTests.java", "stars": "4", "class": {"name": "JwtApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getLineNumber", "params": ["StringBuffer"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getLineNumber(StringBuffer buf) {        skipWhiteSpace(buf);        if (buf.length() == 0) {            return -1;        }        int index = 0;        while (Character.isDigit(buf.charAt(index))) {            index++;        }        if (index == 0) {            return -1;        }        else {            int number;            try {                number = Integer.parseInt(buf.substring(0, index));            }            catch (NumberFormatException e) {                return -1;            }            buf.delete(0, index);            return number;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/BasicTextFormatFile.java", "stars": "4", "class": {"name": "BasicTextFormatFile", "extends": "TextFormatFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "canonicalizeLine", "params": ["StringBuffer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void canonicalizeLine(StringBuffer buf) {        int index;        index = 0;        if (buf.length() == 0) {            return ;        }        while (index < buf.length() && Character.isWhitespace(buf.charAt(index))) {            index++;        }        if (index > 0) {            buf.delete(0, index);        }        index = buf.length() - 1;        while (index >= 0 && Character.isWhitespace(buf.charAt(index))) {            index--;        }        if ((buf.length() - 1) - index > 0) {            buf.delete(index + 1, buf.length());        }        for (int i = 0; i < buf.length(); i++) {            buf.setCharAt(i, Character.toUpperCase(buf.charAt(i)));        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/BasicTextFormatFile.java", "stars": "4", "class": {"name": "BasicTextFormatFile", "extends": "TextFormatFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "skipWhiteSpace", "params": ["StringBuffer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void skipWhiteSpace(StringBuffer buf) {        int index = 0;        while (index < buf.length() && Character.isWhitespace(buf.charAt(index))) {            index++;        }        if (index > 0) {            buf.delete(0, index);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/BasicTextFormatFile.java", "stars": "4", "class": {"name": "BasicTextFormatFile", "extends": "TextFormatFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "load_jr100", "params": ["MemorySystem"], "throws": null, "modifiers": ["public"], "return_type": "Program", "snippet": "    public Program load_jr100(MemorySystem ms) {        Program p = new Program(ms);        p.setName(\"\");        p.setBasicArea(true);        try (BufferedReader r = new BufferedReader(new FileReader(file))) {            String line;            int line_length;            StringBuffer buf = new StringBuffer();            int addr = JR100.ADDRESS_START_OF_BASIC_PROGRAM;            // int end_addr = ms.getEndAddress(MainRam.class);            int end_addr = 0x7fff;            while ((line = r.readLine()) != null) {                buf.replace(0, buf.length(), line);                canonicalizeLine(buf);                if (buf.length() == 0) {                    continue;                }                line_length = 0;                int line_number = getLineNumber(buf);                if (line_number == -1) {                    setErrorStatus(STATUS_INVALID_FORMAT, \"\u884c\u756a\u53f7\u304c\u3042\u308a\u307e\u305b\u3093\u3002\");                    return p;                }                else if (line_number < 1 || line_number > 32767) {                    setErrorStatus(STATUS_INVALID_FORMAT, \"\u884c\u756a\u53f7(\" + line_number + \")\u304c\u4e0d\u6b63\u3067\u3059\u3002\");                    return p;                }                skipWhiteSpace(buf);                ms.store16(addr, (short)(line_number & 0xffff));                line_length += 2;                addr += 2;                for (int i = 0; i < buf.length(); i++) {                    if (addr > end_addr) {                        setErrorStatus(STATUS_MEMORY_FULL, \"\u30e1\u30e2\u30ea\u304c\u3044\u3063\u3071\u3044\u3067\u3059\u3002\");                        return p;                    }                    byte data = (byte)(buf.charAt(i) & 0xff);                    if (buf.charAt(i) == '\\\\') {                        if (i + 2 < buf.length()) {                            try {                                data = (byte)(Integer.parseInt(buf.substring(i + 1, i + 3), 16) & 0xff);                                i += 2;                            }                            catch (NumberFormatException e) {                                setErrorStatus(STATUS_INVALID_FORMAT, \"\u4e0d\u6b63\u306a\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57(\\\\\" + buf.substring(i+1, i+3) + \")\u304c\u3042\u308a\u307e\u3059\u3002\\n\" + line);                                return p;                            }                        }                        else {                            setErrorStatus(STATUS_INVALID_FORMAT, \"\u884c\u672b\u306b\u9054\u3057\u307e\u3057\u305f\u3002\\n\" + line);                            return p;                        }                    }                    ms.store8(addr++, data);                    line_length++;                }                if (line_length > 72) {                    setErrorStatus(STATUS_INVALID_FORMAT, \"\u884c\u306e\u9577\u3055\u304c\u9577\u3059\u304e\u307e\u3059\u3002\\n\" + line);                    return p;                }                ms.store8(addr++, (byte)0x00);            }            if (addr + 3 > end_addr) {                setErrorStatus(STATUS_MEMORY_FULL, \"\u30e1\u30e2\u30ea\u304c\u3044\u3063\u3071\u3044\u3067\u3059\u3002\");                return p;            }            int end = addr + 1;            ms.store8(addr++, (byte)0xdf);            ms.store8(addr++, (byte)0xdf);  // BASIC\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u672b\u5c3e            ms.store8(addr++, (byte)0xdf);            ms.store8(0x0006, (byte)((end >> 8) & 0xff));            ms.store8(0x0007, (byte)(end & 0xff));            ms.store8(0x0008, (byte)(((end + 1) >> 8) & 0xff));            ms.store8(0x0009, (byte)((end + 1) & 0xff));            ms.store8(0x000a, (byte)(((end + 2) >> 8) & 0xff));            ms.store8(0x000b, (byte)((end + 2) & 0xff));            ms.store8(0x000c, (byte)(((end + 3) >> 8) & 0xff));            ms.store8(0x000d, (byte)((end + 3) & 0xff));        }        catch (FileNotFoundException e) {            setErrorStatus(STATUS_FILE_NOT_FOUND, e.getMessage());            return p;        }        catch (IOException e) {            setErrorStatus(STATUS_IO_ERROR, e.getMessage());            return p;        }        setErrorStatus(STATUS_SUCCESS, null);        return p;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/BasicTextFormatFile.java", "stars": "4", "class": {"name": "BasicTextFormatFile", "extends": "TextFormatFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "save_jr100", "params": ["Program", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void save_jr100(Program p, int version) {        MemorySystem ms = p.getMemorySystem();        try (BufferedWriter w = new BufferedWriter(new FileWriter(file))) {            int addr = JR100.ADDRESS_START_OF_BASIC_PROGRAM;            int end_addr = ms.getMemory(MainRam.class).getEndAddress();            int line_number = (ms.load16(addr) & 0xffff);            while (addr < end_addr && line_number != 0xdfdf) {                w.write(Integer.toString(line_number));                w.write(' ');                addr += 2;                int value;                while ((value = (ms.load8(addr) & 0xff)) != 0x00) {                    if (value >= 0x80) {                        w.write('\\\\');                        String hex = Integer.toHexString(value).toUpperCase();                        w.write(hex, hex.length() -2, 2);                    }                    else {                        w.write((char)value);                    }                    addr++;                }                w.write(System.getProperty(\"line.separator\"));                addr++;                line_number = (ms.load16(addr) & 0xffff);            }        }        catch (FileNotFoundException e) {            setErrorStatus(STATUS_FILE_NOT_FOUND, e.getMessage());            return;        }        catch (IOException e) {            setErrorStatus(STATUS_IO_ERROR, e.getMessage());            return;        }        setErrorStatus(STATUS_SUCCESS, null);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/BasicTextFormatFile.java", "stars": "4", "class": {"name": "BasicTextFormatFile", "extends": "TextFormatFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "newJob", "params": ["TriggerFiredBundle", "Scheduler"], "throws": ["SchedulerException"], "modifiers": ["public"], "return_type": "Job", "snippet": "  public Job newJob(final TriggerFiredBundle bundle, final Scheduler scheduler)      throws SchedulerException {    return (Job) this.injector.getInstance(bundle.getJobDetail()        .getJobClass());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/SchedulerJobFactory.java", "stars": "18", "class": {"name": "SchedulerJobFactory", "extends": null, "implements": ["JobFactory"], "modifiers": ["public"]}}, {"method_name": "isDebugEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isDebugEnabled() {    return log.isLoggable(Level.FINE);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdk14/Jdk14LoggingImpl.java", "stars": "15", "class": {"name": "Jdk14LoggingImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "isTraceEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isTraceEnabled() {    return log.isLoggable(Level.FINER);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdk14/Jdk14LoggingImpl.java", "stars": "15", "class": {"name": "Jdk14LoggingImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "error", "params": ["String", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(String s, Throwable e) {    log.log(Level.SEVERE, s, e);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdk14/Jdk14LoggingImpl.java", "stars": "15", "class": {"name": "Jdk14LoggingImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "error", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(String s) {    log.log(Level.SEVERE, s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdk14/Jdk14LoggingImpl.java", "stars": "15", "class": {"name": "Jdk14LoggingImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "debug", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void debug(String s) {    log.log(Level.FINE, s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdk14/Jdk14LoggingImpl.java", "stars": "15", "class": {"name": "Jdk14LoggingImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "trace", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void trace(String s) {    log.log(Level.FINER, s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdk14/Jdk14LoggingImpl.java", "stars": "15", "class": {"name": "Jdk14LoggingImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "warn", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void warn(String s) {    log.log(Level.WARNING, s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdk14/Jdk14LoggingImpl.java", "stars": "15", "class": {"name": "Jdk14LoggingImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_gh1551/ProductSku.java", "stars": "15", "class": {"name": "ProductSku", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(String id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_gh1551/ProductSku.java", "stars": "15", "class": {"name": "ProductSku", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getColor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getColor() {    return color;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_gh1551/ProductSku.java", "stars": "15", "class": {"name": "ProductSku", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setColor", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setColor(String color) {    this.color = color;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_gh1551/ProductSku.java", "stars": "15", "class": {"name": "ProductSku", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSize() {    return size;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_gh1551/ProductSku.java", "stars": "15", "class": {"name": "ProductSku", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSize", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSize(String size) {    this.size = size;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_gh1551/ProductSku.java", "stars": "15", "class": {"name": "ProductSku", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProductId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getProductId() {    return productId;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_gh1551/ProductSku.java", "stars": "15", "class": {"name": "ProductSku", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProductId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setProductId(String productId) {    this.productId = productId;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_gh1551/ProductSku.java", "stars": "15", "class": {"name": "ProductSku", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "service", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["ServletException", "IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void service(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException    {\t\tPrintWriter out=response.getWriter();\t\tresponse.setContentType(\"text/html\");\t\tString Q1=request.getParameter(\"Q1\");\t\tCookie cq1=new Cookie(\"Q1\",Q1);\t\tresponse.addCookie(cq1);\t\tString Q2=request.getParameter(\"Q2\");\t\tCookie cq2=new Cookie(\"Q2\",Q2);\t\tresponse.addCookie(cq2);\t\tString Q3=request.getParameter(\"Q3\");\t\tCookie cq3=new Cookie(\"Q3\",Q3);\t\tresponse.addCookie(cq3);\t\tString Q4=request.getParameter(\"Q4\");\t\tCookie cq4=new Cookie(\"Q4\",Q4);\t\tresponse.addCookie(cq4);\t\tString Q5=request.getParameter(\"Q5\");\t\tCookie cq5=new Cookie(\"Q5\",Q5);\t\tresponse.addCookie(cq5);\t\tout.print(\"<head><style>\");\t\tout.print(\"body{padding:0%;margin:0%;}\");\t\tout.print(\".button1{text-align:center;}\");\t\tout.print(\".next{background-color:green;color:white;width:10%;font-size:15px;border-radius:35%;padding:10px;}\");\t\tout.print(\".box form h1{padding:0%;margin:0%;}\");\t\tout.print(\"form{padding:0%;margin:0%;}\");\t\tout.print(\"table{padding-top:0%;}\");\t\tout.print(\".image{padding:0%;border-radius:15%;}\");out.print(\".box{background-color:pink;color:white;margin:5%;padding:5%;border-radius:15%;}\");\t\tout.print(\"</style></head>\");\t\tout.print(\"<body>\");\t\tout.print(\"<div class=\\\"box\\\">\");\t\tout.print(\"<form action=result.com method=post>\");\t\tout.print(\"<div class=\\\"image\\\"><img src=\\\"img.jfif\\\" width=\\\"100%\\\" height=\\\"30%\\\"></div>\");\t\tout.print(\"<h1 align=center>ExQuizMe</h1><br>\");\t\tout.print(\"<h1 align=center>Quiz On Java</h1>\");\t\tout.print(\"<table align=center><tr><td>\");\t\tout.print(\"<br><h3 align=left>Q6. Which of those allows duplicate elements?</h3>\");\t\tout.print(\"</td></tr><br>\");\t\tout.print(\"<tr><td><input type=radio name=Q6 value=option1>Set</td></tr>\");\t\tout.print(\"<tr><td><input type=radio name=Q6 value=option2>List</td></tr>\");\t\tout.print(\"<tr><td><input type=radio name=Q6 value=option3>All</td></tr>\");\t\tout.print(\"<tr><td><input type=radio name=Q6 value=option4>None of these</td></tr>\");\t\tout.print(\"<tr><td><br><h3 align=left>Q7 Which interface should be implemented for sorting on basis of many criteria\u2019s?</h3>\");        out.print(\"</td></tr><br>\");\t\tout.print(\"<tr><td><input type=radio name=Q7 value=option1>Comparator</td></tr>\");\t\tout.print(\"<tr><td><input type=radio name=Q7 value=option2>Comparable</td></tr>\");\t\tout.print(\"<tr><td><input type=radio name=Q7 value=option3>Serializable</td></tr>\");\t\tout.print(\"<tr><td><input type=radio name=Q7 value=option4>None of the above</td></tr>\");\t\tout.print(\"<tr><td><br><h3 align=left>Q8. What will be the output of the following code?</h3>\");\t\tout.print(\"</td></tr><br>\");\t\tout.print(\"<tr><td><div><img src=\\\"ques1.jpg\\\" width=\\\"60%\\\" height=\\\"60%\\\"></div></td></tr>\");\t\tout.print(\"<tr><td><input type=radio name=Q8 value=option1>Runtime Exception</td></tr>\");\t\tout.print(\"<tr><td><input type=radio name=Q8 value=option2>Compiletime Exception</td></tr>\");\t\tout.print(\"<tr><td><input type=radio name=Q8 value=option3>3</td></tr>\");\t\tout.print(\"<tr><td><input type=radio name=Q8 value=option4>3.0</td></tr>\");\t\tout.print(\"<tr><td><br><h3 align=left>Q9. Which of those doesn't have an index based structure?</h3>\");\t\tout.print(\"</td></tr><br>\");\t\tout.print(\"<tr><td><input type=radio name=Q9 value=option1>Set</td></tr>\");\t\tout.print(\"<tr><td><input type=radio name=Q9 value=option2>List</td></tr>\");\t\tout.print(\"<tr><td><input type=radio name=Q9 value=option3>Map</td></tr>\");\t\tout.print(\"<tr><td><input type=radio name=Q9 value=option4>All of the above</td></tr>\");\t\tout.print(\"<tr><td><br><h3 align=left>Q10. Which of the following is a marker interface?</h3>\");\t\tout.print(\"</td></tr><br>\");\t\tout.print(\"<tr><td><input type=radio name=Q10 value=option1>Runnable</td></tr>\");\t\tout.print(\"<tr><td><input type=radio name=Q10 value=option2>Serializable</td></tr>\");\t\tout.print(\"<tr><td><input type=radio name=Q10 value=option3>Comparable</td></tr>\");\t\tout.print(\"<tr><td><input type=radio name=Q10 value=option4>None of the above</td></tr>\");        \t\tout.print(\"<tr><td><br><br><div class=\\\"button1\\\"><input class=\\\"next\\\" type=submit value=Submit></div></td></tr>\");\t\tout.print(\"</table>\");  \t\tout.print(\"</form>\");\t\tout.print(\"</div>\");\t\tout.print(\"</body>\");\t}", "url": "https://raw.githubusercontent.com/SShivani/Online-Quiz-Project/master/WEB-INF/classes/SecondServlet.java", "stars": "2", "class": {"name": "SecondServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "   public View onCreateView(LayoutInflater inflater,      ViewGroup container, Bundle savedInstanceState) {      /**       * Inflate the layout for this fragment       */      return inflater.inflate(      R.layout.fragment_two, container, false);   }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/FragmentsTest/src/com/javacodegeeks/android/fragmentstest/FragmentTwo.java", "stars": "74", "class": {"name": "FragmentTwo", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onReceive", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onReceive(Context context, Intent intent) {\t\tSystem.out.println(\"AdminReciver : onReceive\");\t\tsuper.onReceive(context, intent);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/uninstallapp/src/com/example/uninstallapp/adminreciever.java", "stars": "74", "class": {"name": "adminreciever", "extends": "DeviceAdminReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDisableRequested", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "CharSequence", "snippet": "\tpublic CharSequence onDisableRequested(Context context, Intent intent) {\t\t// TODO Auto-generated method stub\t\treturn super.onDisableRequested(context, intent);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/uninstallapp/src/com/example/uninstallapp/adminreciever.java", "stars": "74", "class": {"name": "adminreciever", "extends": "DeviceAdminReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDisabled", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDisabled(Context context, Intent intent) {\t\t// TODO Auto-generated method stub\t\tsuper.onDisabled(context, intent);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/uninstallapp/src/com/example/uninstallapp/adminreciever.java", "stars": "74", "class": {"name": "adminreciever", "extends": "DeviceAdminReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEnabled", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onEnabled(Context context, Intent intent) {\t\t// TODO Auto-generated method stub\t\tsuper.onEnabled(context, intent);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/uninstallapp/src/com/example/uninstallapp/adminreciever.java", "stars": "74", "class": {"name": "adminreciever", "extends": "DeviceAdminReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPasswordChanged", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPasswordChanged(Context context, Intent intent) {\t\t// TODO Auto-generated method stub\t\tsuper.onPasswordChanged(context, intent);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/uninstallapp/src/com/example/uninstallapp/adminreciever.java", "stars": "74", "class": {"name": "adminreciever", "extends": "DeviceAdminReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPasswordExpiring", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPasswordExpiring(Context context, Intent intent) {\t\t// TODO Auto-generated method stub\t\tsuper.onPasswordExpiring(context, intent);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/uninstallapp/src/com/example/uninstallapp/adminreciever.java", "stars": "74", "class": {"name": "adminreciever", "extends": "DeviceAdminReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPasswordFailed", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPasswordFailed(Context context, Intent intent) {\t\t// TODO Auto-generated method stub\t\tsuper.onPasswordFailed(context, intent);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/uninstallapp/src/com/example/uninstallapp/adminreciever.java", "stars": "74", "class": {"name": "adminreciever", "extends": "DeviceAdminReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPasswordSucceeded", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPasswordSucceeded(Context context, Intent intent) {\t\t// TODO Auto-generated method stub\t\tsuper.onPasswordSucceeded(context, intent);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/uninstallapp/src/com/example/uninstallapp/adminreciever.java", "stars": "74", "class": {"name": "adminreciever", "extends": "DeviceAdminReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": ["Context", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void start(Context context, String code) {        Intent intent = new Intent(context, PasswordResetActivity.class);        intent.putExtra(IntentKey.CODE, code);        context.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PhoneResetActivity.java", "stars": "1", "class": {"name": "PhoneResetActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.activity_phone_reset;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PhoneResetActivity.java", "stars": "1", "class": {"name": "PhoneResetActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        InputTextHelper.with(this)                .addView(mPhoneView)                .addView(mCodeView)                .setMain(mCommitView)                .setListener(helper -> mPhoneView.getText().toString().length() == 11 && mCodeView.getText().toString().length() == 4)                .build();        setOnClickListener(R.id.cv_phone_reset_countdown, R.id.btn_phone_reset_commit);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PhoneResetActivity.java", "stars": "1", "class": {"name": "PhoneResetActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        mCode = getString(IntentKey.CODE);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PhoneResetActivity.java", "stars": "1", "class": {"name": "PhoneResetActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        switch (v.getId()) {            case R.id.cv_phone_reset_countdown:                // \u83b7\u53d6\u9a8c\u8bc1\u7801                if (mPhoneView.getText().toString().length() != 11) {                    toast(R.string.common_phone_input_error);                    return;                }                if (true) {                    toast(R.string.common_code_send_hint);                    mCountdownView.start();                    return;                }                // \u83b7\u53d6\u9a8c\u8bc1\u7801                EasyHttp.post(this)                        .api(new GetCodeApi()                        .setPhone(mPhoneView.getText().toString()))                        .request(new HttpCallback<HttpData<Void>>(this) {                            @Override                            public void onSucceed(HttpData<Void> data) {                                toast(R.string.common_code_send_hint);                                mCountdownView.start();                            }                        });                break;            case R.id.btn_phone_reset_commit:                if (true) {                    toast(R.string.phone_reset_commit_succeed);                    finish();                    return;                }                // \u66f4\u6362\u624b\u673a\u53f7                EasyHttp.post(this)                        .api(new PhoneApi()                        .setPreCode(mCode)                        .setPhone(mPhoneView.getText().toString())                        .setCode(mCodeView.getText().toString()))                        .request(new HttpCallback<HttpData<Void>>(this) {                            @Override                            public void onSucceed(HttpData<Void> data) {                                toast(R.string.phone_reset_commit_succeed);                                finish();                            }                        });                break;            default:                break;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PhoneResetActivity.java", "stars": "1", "class": {"name": "PhoneResetActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "configurationPropertiesValidator", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Validator", "snippet": "\tpublic static Validator configurationPropertiesValidator() {\t\treturn new SamplePropertiesValidator();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-property-validation/src/main/java/smoketest/propertyvalidation/SamplePropertyValidationApplication.java", "stars": "47572", "class": {"name": "SamplePropertyValidationApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "run", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run(String... args) {\t\tSystem.out.println(\"=========================================\");\t\tSystem.out.println(\"Sample host: \" + this.properties.getHost());\t\tSystem.out.println(\"Sample port: \" + this.properties.getPort());\t\tSystem.out.println(\"=========================================\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-property-validation/src/main/java/smoketest/propertyvalidation/SamplePropertyValidationApplication.java", "stars": "47572", "class": {"name": "SamplePropertyValidationApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tnew SpringApplicationBuilder(SamplePropertyValidationApplication.class).run(args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-property-validation/src/main/java/smoketest/propertyvalidation/SamplePropertyValidationApplication.java", "stars": "47572", "class": {"name": "SamplePropertyValidationApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.feed);\t\tfeedList = (ArrayList<Feed>) getIntent().getSerializableExtra(\"feed\");\t\tListView list = (ListView) findViewById(R.id.feedList);\t\tlist.setAdapter(new MyCustomAdapter(this, 0, feedList));\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/FeedActivity.java", "stars": "74", "class": {"name": "FeedActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getCount() {\t\t\treturn feeds.size();\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/FeedActivity.java", "stars": "74", "class": {"name": "MyCustomAdapter", "extends": "ArrayAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\t\tpublic View getView(int position, View convertView, ViewGroup parent) {\t\t\t// return super.getView(position, convertView, parent);\t\t\tfinal Feed bean = feeds.get(position);\t\t\tView row = mInflater.inflate(R.layout.feed_list, parent, false);\t\t\tTextView label = (TextView) row.findViewById(R.id.fName);\t\t\tTextView email = (TextView) row.findViewById(R.id.fMsg);\t\t\tTextView date = (TextView) row.findViewById(R.id.fDate);\t\t\tLog.d(\"Custom-UI\", \"From = \" + bean.getFrom());\t\t\tLog.d(\"Custom-UI\", \"Message = \" + bean.getMessage());\t\t\tLog.d(\"Custom-UI\", \"Screen Name = \" + bean.getScreenName());\t\t\tLog.d(\"Custom-UI\", \"Feed Id = \" + bean.getId());\t\t\tLog.d(\"Custom-UI\", \"Created At = \" + bean.getCreatedAt());\t\t\tlabel.setText(\"From : \" + bean.getFrom());\t\t\temail.setText(bean.getMessage());\t\t\tdate.setText(\" , Created At : \" + bean.getCreatedAt().toString());\t\t\treturn row;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/FeedActivity.java", "stars": "74", "class": {"name": "MyCustomAdapter", "extends": "ArrayAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "tankGame", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ModelAndView", "snippet": "    public ModelAndView tankGame() {        ModelAndView mav = new ModelAndView();        mav.setViewName(\"index\");        mav.getModel().put(\"name\", title);        return mav;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/controller/MainController.java", "stars": "2", "class": {"name": "MainController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "helloWorld", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ModelAndView", "snippet": "    public ModelAndView helloWorld() {        ModelAndView mav = new ModelAndView();        mav.setViewName(\"main\");        mav.getModel().put(\"name\", \"chat\");        return mav;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/controller/MainController.java", "stars": "2", "class": {"name": "MainController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "connect", "params": ["MessageDto", "SimpMessageHeaderAccessor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void connect(MessageDto messageDto, SimpMessageHeaderAccessor accessor) {        if (accessor.getUser() == null) {            return;        }        String username = accessor.getUser().getName();        gameService.receiveMessage(messageDto, username);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/controller/MainController.java", "stars": "2", "class": {"name": "MainController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "incrementAndGet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int incrementAndGet() {        return atomicInteger.incrementAndGet() & MASK;    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/schedule/lb/PositiveAtomicInteger.java", "stars": "3", "class": {"name": "PositiveAtomicInteger", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getAndIncrement", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getAndIncrement() {        return atomicInteger.getAndIncrement() & MASK;    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/schedule/lb/PositiveAtomicInteger.java", "stars": "3", "class": {"name": "PositiveAtomicInteger", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "addFormatters", "params": ["FormatterRegistry"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addFormatters(FormatterRegistry registry) {        DateTimeFormatterRegistrar registrar = new DateTimeFormatterRegistrar();        registrar.setUseIsoFormat(true);        registrar.registerFormatters(registry);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/DateTimeFormatConfiguration.java", "stars": "2", "class": {"name": "DateTimeFormatConfiguration", "extends": null, "implements": ["WebMvcConfigurer"], "modifiers": ["public"]}}, {"method_name": "onOffsetChanged", "params": ["AppBarLayout", "int"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void onOffsetChanged(AppBarLayout appBarLayout, int i) {        if (i == 0) {            if (mCurrentState != State.EXPANDED) {                onStateChanged(appBarLayout, State.EXPANDED);            }            mCurrentState = State.EXPANDED;        } else if (Math.abs(i) >= appBarLayout.getTotalScrollRange()) {            if (mCurrentState != State.COLLAPSED) {                onStateChanged(appBarLayout, State.COLLAPSED);            }            mCurrentState = State.COLLAPSED;        } else {            if (mCurrentState != State.IDLE) {                onStateChanged(appBarLayout, State.IDLE);            }            mCurrentState = State.IDLE;        }        appBarLayout.addOnOffsetChangedListener(this);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/AppBarStateChangeListener.java", "stars": "2", "class": {"name": "AppBarStateChangeListener", "extends": null, "implements": ["AppBarLayout"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStateChanged", "params": ["AppBarLayout", "State"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onStateChanged(AppBarLayout appBarLayout, State state);}", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/AppBarStateChangeListener.java", "stars": "2", "class": {"name": "AppBarStateChangeListener", "extends": null, "implements": ["AppBarLayout"], "modifiers": ["public", "abstract"]}}, {"method_name": "returnBoite", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int returnBoite(int x, int y) {\t\tif (x < 0 || x > 14 || y < 0 || y > 14)\t\t\treturn -1;\t\telse\t\t\treturn Plateau[x][y];\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Plateau.java", "stars": "4", "class": {"name": "Plateau", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "montrerPlateau", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void montrerPlateau() {\t\tSystem.out.println(\"\\t\\t\\tPlateau actuel! \\n\");\t\tfor (int i = 0; i < 15; ++i) {\t\t\tSystem.out.print(\"\\t{ \");\t\t\tfor (int j = 0; j < 14; ++j) {\t\t\t\tif (Plateau[i][j] > 5)\t\t\t\t\tSystem.out.print((char) Plateau[i][j] + \", \");\t\t\t\telse\t\t\t\t\tSystem.out.print(Plateau[i][j] + \", \");\t\t\t}\t\t\tif (Plateau[i][14] > 5)\t\t\t\tSystem.out.print((char) Plateau[i][14] + \" }\\n\");\t\t\telse\t\t\t\tSystem.out.print(Plateau[i][14] + \" }\\n\");\t\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Plateau.java", "stars": "4", "class": {"name": "Plateau", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "modifierPlateau", "params": ["int", "int", "int", "Boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void modifierPlateau(int[] mot, int xPos, int yPos, Boolean horizontal) {\t\tif (horizontal) { // Movement soulement dans le axis Y\t\t\tfor (int i = yPos; i < (yPos + mot.length); ++i) // Bouge de yPos \u0155 (yPos + taille de la mot)\t\t\t\tPlateau[xPos][i] = mot[i - yPos]; // Changer un a un les valeurs trouve dans le Plateau (string -> char\t\t\t\t\t\t\t\t\t\t\t\t\t// -> integer)\t\t} else { // Movement soulement dans le axis X\t\t\tfor (int i = xPos; i < (xPos + mot.length); ++i) // Bouge de xPos \u0155 (xPos + taille de la mot)\t\t\t\tPlateau[i][yPos] = mot[i - xPos];\t\t}\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Plateau.java", "stars": "4", "class": {"name": "Plateau", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tPlateau aux = new Plateau();\t\taux.montrerPlateau();\t\tint[] value = { 104, 101, 108, 108, 111 }; // \"hello\"\t\taux.modifierPlateau(value, 3, 2, false); // placer hello vertical a partir de la case (3,2)\t\taux.montrerPlateau();\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Plateau.java", "stars": "4", "class": {"name": "Plateau", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toInfosDemandeurUI_devrait_retourner_un_InfosDemandeurUI_a_partir_d_une_map_de_nb_masques_par_type_et_d_une_IdentiteDemandeurUI", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void toInfosDemandeurUI_devrait_retourner_un_InfosDemandeurUI_a_partir_d_une_map_de_nb_masques_par_type_et_d_une_IdentiteDemandeurUI() {        // Given        IdentiteDemandeurUI identiteDemandeurUI = IdentiteDemandeurUI.builder().build();        Map<TypeMasque, Integer> nbMasquesDistribuesParType = new HashMap<>();        nbMasquesDistribuesParType.put(TypeMasque.ADULTE_REUTILISABLE, 2);        nbMasquesDistribuesParType.put(TypeMasque.ENFANT_USAGE_UNIQUE, 3);        // When        InfosDemandeurUI infosDemandeurUI = infosDemandeurUiMapper.toInfosDemandeurUI(nbMasquesDistribuesParType, identiteDemandeurUI);        // Then        assertThat(infosDemandeurUI.getIdentite()).isEqualTo(identiteDemandeurUI);        assertThat(infosDemandeurUI.getNbMasquesAdulteReutilisableDejaDistribues()).isEqualTo(2);        assertThat(infosDemandeurUI.getNbMasquesAdulteUsageUniqueDejaDistribues()).isEqualTo(0);        assertThat(infosDemandeurUI.getNbMasquesEnfantReutilisableDejaDistribues()).isEqualTo(0);        assertThat(infosDemandeurUI.getNbMasquesEnfantUsageUniqueDejaDistribues()).isEqualTo(3);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/application/ui/data/InfosDemandeurUIMapperTest.java", "stars": "5", "class": {"name": "InfosDemandeurUIMapperTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getAzkabanURL", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getAzkabanURL() {    return this.scheme + \"://\" + this.clientHostname + \":\" + this.clientPortNumber;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "sendEmail", "params": ["List<String>", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void sendEmail(final List<String> emailList, final String subject, final String body) {    if (emailList != null && !emailList.isEmpty()) {      final EmailMessage message = super.createEmailMessage(subject, \"text/html\", emailList);      message.setBody(body);      sendEmail(message, true, \"email message \" + body);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnSla", "params": ["SlaOption", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnSla(final SlaOption slaOption, final String slaMessage) {    final String subject =        \"SLA violation for \" + getJobOrFlowName(slaOption) + \" on \" + getAzkabanName();    final List<String> emailList =        (List<String>) slaOption.getInfo().get(SlaOption.INFO_EMAIL_LIST);    logger.info(\"Sending SLA email \" + slaMessage);    sendEmail(emailList, subject, slaMessage);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnFirstError", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnFirstError(final ExecutableFlow flow) {    final EmailMessage message = this.messageCreator.createMessage();    final MailCreator mailCreator = getMailCreator(flow);    final boolean mailCreated = mailCreator.createFirstErrorMessage(flow, message, this.azkabanName,        this.scheme, this.clientHostname, this.clientPortNumber);    sendEmail(message, mailCreated,        \"first error email message for execution \" + flow.getExecutionId());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnError", "params": ["ExecutableFlow", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnError(final ExecutableFlow flow, final String... extraReasons) {    final EmailMessage message = this.messageCreator.createMessage();    final MailCreator mailCreator = getMailCreator(flow);    final boolean mailCreated = mailCreator.createErrorEmail(flow, message, this.azkabanName,        this.scheme, this.clientHostname, this.clientPortNumber, extraReasons);    sendEmail(message, mailCreated, \"error email message for execution \" + flow.getExecutionId());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnIMSRegistStart", "params": ["ExecutableFlow", "Map<String,Props>", "Logger"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnIMSRegistStart(ExecutableFlow exflow,Map<String, Props> sharedProps,Logger logger) throws Exception { }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnIMSRegistFinish", "params": ["ExecutableFlow", "Map<String,Props>", "Logger"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnIMSRegistFinish(ExecutableFlow exflow,Map<String, Props> sharedProps,Logger logger) throws Exception { }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnIMSRegistError", "params": ["ExecutableFlow", "Map<String,Props>", "Logger"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnIMSRegistError(ExecutableFlow exflow,Map<String, Props> sharedProps,Logger logger) throws Exception { }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnSuccess", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnSuccess(final ExecutableFlow flow) {    final EmailMessage message = this.messageCreator.createMessage();    final MailCreator mailCreator = getMailCreator(flow);    final boolean mailCreated = mailCreator.createSuccessEmail(flow, message, this.azkabanName,        this.scheme, this.clientHostname, this.clientPortNumber);    sendEmail(message, mailCreated, \"success email message for execution \" + flow.getExecutionId());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnFailedUpdate", "params": ["Executor", "List<ExecutableFlow>", "ExecutorManagerException"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnFailedUpdate(final Executor executor, List<ExecutableFlow> flows,      final ExecutorManagerException updateException) {    flows = flows.stream()        .filter(flow -> flow.getExecutionOptions() != null)        .filter(flow -> CollectionUtils.isNotEmpty(flow.getExecutionOptions().getFailureEmails()))        .collect(Collectors.toList());    // group by mail creator in case some flows use different creators    final ImmutableListMultimap<String, ExecutableFlow> creatorsToFlows = Multimaps        .index(flows, flow -> flow.getExecutionOptions().getMailCreator());    for (final String mailCreatorName : creatorsToFlows.keySet()) {      final ImmutableList<ExecutableFlow> creatorFlows = creatorsToFlows.get(mailCreatorName);      final MailCreator mailCreator = getMailCreator(mailCreatorName);      // group by recipients in case some flows have different failure email addresses      final ImmutableListMultimap<List<String>, ExecutableFlow> emailsToFlows = Multimaps          .index(creatorFlows, flow -> flow.getExecutionOptions().getFailureEmails());      for (final List<String> emailList : emailsToFlows.keySet()) {        sendFailedUpdateEmail(executor, updateException, mailCreator, emailsToFlows.get(emailList));      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "sendFailedUpdateEmail", "params": ["Executor", "ExecutorManagerException", "MailCreator", "ImmutableList<ExecutableFlow>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void sendFailedUpdateEmail(final Executor executor,      final ExecutorManagerException exception, final MailCreator mailCreator,      final ImmutableList<ExecutableFlow> flows) {    final EmailMessage message = this.messageCreator.createMessage();    final boolean mailCreated = mailCreator        .createFailedUpdateMessage(flows, executor, exception, message,            this.azkabanName, this.scheme, this.clientHostname, this.clientPortNumber);    final List<Integer> executionIds = Lists.transform(flows, ExecutableFlow::getExecutionId);    sendEmail(message, mailCreated, \"failed update email message for executions \" + executionIds);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "getMailCreator", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["private"], "return_type": "MailCreator", "snippet": "  private MailCreator getMailCreator(final ExecutableFlow flow) {    final String name = flow.getExecutionOptions().getMailCreator();    return getMailCreator(name);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "getMailCreator", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "MailCreator", "snippet": "  private MailCreator getMailCreator(final String name) {    final MailCreator mailCreator = DefaultMailCreator.getCreator(name);    logger.debug(\"ExecutorMailer using mail creator:\" + mailCreator.getClass().getCanonicalName());    return mailCreator;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "sendEmail", "params": ["EmailMessage", "boolean", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void sendEmail(final EmailMessage message, final boolean mailCreated,      final String operation) {    if (mailCreated) {      try {        message.sendEmail();        logger.info(\"Sent \" + operation);        this.commonMetrics.markSendEmailSuccess();      } catch (final Exception e) {        logger.error(\"Failed to send \" + operation, e);        if (!(e instanceof AddressException)) {          this.commonMetrics.markSendEmailFail();        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "getJobOrFlowName", "params": ["SlaOption"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getJobOrFlowName(final SlaOption slaOption) {    final String flowName = (String) slaOption.getInfo().get(SlaOption.INFO_FLOW_NAME);    final String jobName = (String) slaOption.getInfo().get(SlaOption.INFO_JOB_NAME);    if (org.apache.commons.lang.StringUtils.isNotBlank(jobName)) {      return flowName + \":\" + jobName;    } else {      return flowName;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnSla", "params": ["SlaOption", "ExecutableFlow"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnSla(SlaOption slaOption, ExecutableFlow exflow) throws Exception {    final EmailMessage message = this.messageCreator.createMessage();    final MailCreator mailCreator = getMailCreator(exflow);    final boolean mailCreated = mailCreator.createFirstErrorMessage(exflow, message, this.azkabanName,        this.scheme, this.clientHostname, this.clientPortNumber);    sendEmail(message, mailCreated,        \"first error email message for execution \" + exflow.getExecutionId());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnFinishSla", "params": ["SlaOption", "ExecutableFlow"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnFinishSla(SlaOption slaOption, ExecutableFlow exflow) throws Exception {    final EmailMessage message = this.messageCreator.createMessage();    final MailCreator mailCreator = getMailCreator(exflow);    final boolean mailCreated = mailCreator.createFirstErrorMessage(exflow, message, this.azkabanName,        this.scheme, this.clientHostname, this.clientPortNumber);    sendEmail(message, mailCreated,        \"first error email message for execution \" + exflow.getExecutionId());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnFlowPaused", "params": ["ExecutableFlow", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnFlowPaused(ExecutableFlow exflow, String nodePath) throws Exception {    throw new Exception(\"undefine...\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnFlowPausedSla", "params": ["SlaOption", "ExecutableFlow", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnFlowPausedSla(SlaOption slaOption, ExecutableFlow exflow, String nodePath) throws Exception {    throw new Exception(\"undefine...\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnCycleFlowInterrupt", "params": ["ExecutableFlow", "ExecutionCycle", "List<String>", "String", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnCycleFlowInterrupt(ExecutableFlow flow, ExecutionCycle cycleFlow, List<String> emails, String alertLevel, String... extraReasons) throws Exception {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Emailer.java", "stars": "18", "class": {"name": "Emailer", "extends": "AbstractMailer", "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "getGender", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getGender() {        return 0;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "isAnchor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAnchor() {        return false;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "isVip", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isVip() {        return false;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "videoCallCameraDefaultOpen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean videoCallCameraDefaultOpen() {        return false;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "getDiamondBalance", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getDiamondBalance() {        return 0;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "updateDiamondBalance", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateDiamondBalance(int balance) {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "getCallPricePer", "params": ["long", "FetchCallPriceListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getCallPricePer(long hostUid, FetchCallPriceListener listener) {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "getGiftSvgaPath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getGiftSvgaPath(String giftId) {        return null;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "getGiftIcon", "params": ["String", "DownloadGiftDrawableListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getGiftIcon(String giftId, DownloadGiftDrawableListener listener) {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "loadImage", "params": ["Context", "String", "ImageView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadImage(Context context, String path, ImageView view) {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "loadRoundedImage", "params": ["Context", "String", "ImageView", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadRoundedImage(Context context, String imgUrl, ImageView imageView, int corners) {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "startCallInviteSound", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startCallInviteSound(boolean isLoop) {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "stopCallInviteSound", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stopCallInviteSound() {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "showRechargeDialog", "params": ["Context", "long", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showRechargeDialog(Context context, long userId, long roomId) {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "showGiveGiftDialog", "params": ["Context", "long", "long", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showGiveGiftDialog(Context context, long userId, long roomId, String nickname, String avatar) {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "getVideoProfile", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoProfile() {        return 0;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "getUserId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getUserId() {        return 0;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "interceptVip", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void interceptVip() {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "interceptBalance", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void interceptBalance() {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "interceptNobleStar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void interceptNobleStar() {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "sendPrivateMessage", "params": ["String", "String", "String", "String", "Serializable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendPrivateMessage(String remoteUid, String remoteNickname, String remoteAvatar, String message, Serializable ext) {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "onCallConnected", "params": ["String", "Serializable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCallConnected(String channelId, Serializable serializable) {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "onCallActivityFinish", "params": ["long", "String", "String", "Serializable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCallActivityFinish(long remoteUid, String remoteNickname, String remoteAvatar, Serializable ext) {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/callapi/ICallServiceImpl.java", "stars": "1", "class": {"name": "ICallServiceImpl", "extends": null, "implements": ["ICallService"], "modifiers": ["public"]}}, {"method_name": "getInt", "params": ["TextField"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getInt(TextField input) {        String text = input.getText();        if (text.isBlank())            return Integer.parseInt(input.getPromptText());        var expression = new Expression(text);        if (!expression.checkSyntax())            return Integer.MIN_VALUE;        return (int) expression.calculate();    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab4/master/src/main/java/com/demkom58/nmlab4/FxMathFormUtil.java", "stars": "2", "class": {"name": "FxMathFormUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getDouble", "params": ["TextField"], "throws": null, "modifiers": ["public", "static"], "return_type": "double", "snippet": "    public static double getDouble(TextField input) {        String text = input.getText();        if (text.isBlank())            return Double.parseDouble(input.getPromptText());        var expression = new Expression(text);        if (!expression.checkSyntax())            return Double.MIN_VALUE;        return expression.calculate();    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab4/master/src/main/java/com/demkom58/nmlab4/FxMathFormUtil.java", "stars": "2", "class": {"name": "FxMathFormUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getFloat", "params": ["TextField"], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float getFloat(TextField input) {        String text = input.getText();        if (text.isBlank())            return Float.parseFloat(input.getPromptText());        var expression = new Expression(text);        if (!expression.checkSyntax())            return Float.MIN_VALUE;        return (float) expression.calculate();    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab4/master/src/main/java/com/demkom58/nmlab4/FxMathFormUtil.java", "stars": "2", "class": {"name": "FxMathFormUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setContext", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "RecommendationBuilder", "snippet": "    public RecommendationBuilder setContext(Context context) {        mContext = context;        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationBuilder.java", "stars": "4", "class": {"name": "RecommendationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "RecommendationBuilder", "snippet": "    public RecommendationBuilder setId(int id) {        mId = id;        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationBuilder.java", "stars": "4", "class": {"name": "RecommendationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPriority", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "RecommendationBuilder", "snippet": "    public RecommendationBuilder setPriority(int priority) {        mPriority = priority;        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationBuilder.java", "stars": "4", "class": {"name": "RecommendationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "RecommendationBuilder", "snippet": "    public RecommendationBuilder setTitle(String title) {        mTitle = title;        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationBuilder.java", "stars": "4", "class": {"name": "RecommendationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "RecommendationBuilder", "snippet": "    public RecommendationBuilder setDescription(String description) {        mDescription = description;        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationBuilder.java", "stars": "4", "class": {"name": "RecommendationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setImage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "RecommendationBuilder", "snippet": "    public RecommendationBuilder setImage(String uri) {        mImageUri = uri;        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationBuilder.java", "stars": "4", "class": {"name": "RecommendationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBackgroundContentUri", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "RecommendationBuilder", "snippet": "    public RecommendationBuilder setBackgroundContentUri(String uri) {        mBackgroundUri = uri;        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationBuilder.java", "stars": "4", "class": {"name": "RecommendationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIntent", "params": ["PendingIntent"], "throws": null, "modifiers": ["public"], "return_type": "RecommendationBuilder", "snippet": "    public RecommendationBuilder setIntent(PendingIntent intent) {        mIntent = intent;        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationBuilder.java", "stars": "4", "class": {"name": "RecommendationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSmallIcon", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "RecommendationBuilder", "snippet": "    public RecommendationBuilder setSmallIcon(int resourceId) {        mSmallIcon = resourceId;        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationBuilder.java", "stars": "4", "class": {"name": "RecommendationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Notification", "snippet": "    public Notification build() throws IOException {        if(VersionUtils.isLollipop()) {            Log.d(TAG, \"Building notification - \" + this.toString());            if (mNotificationManager == null) {                mNotificationManager = (NotificationManager) mContext                        .getSystemService(Context.NOTIFICATION_SERVICE);            }            Bundle extras = new Bundle();            if (mBackgroundUri != null) {                extras.putString(Notification.EXTRA_BACKGROUND_IMAGE_URI, mBackgroundUri);            }            Bitmap image = Picasso.get()                    .load(mImageUri)                    .resize((int) mContext.getResources().getDimension(R.dimen.card_width), (int) mContext.getResources().getDimension(R.dimen.card_height))                    .get();            Notification notification = new NotificationCompat.BigPictureStyle(                    new NotificationCompat.Builder(mContext)                            .setContentTitle(mTitle)                            .setContentText(mDescription)                            .setPriority(mPriority)                            .setLocalOnly(true)                            .setOngoing(true)                            .setColor(mContext.getResources().getColor(R.color.primary))                            .setCategory(Notification.CATEGORY_RECOMMENDATION)                            .setLargeIcon(image)                            .setSmallIcon(mSmallIcon)                            .setContentIntent(mIntent)                            .setExtras(extras))                    .build();            mNotificationManager.notify(mId, notification);            mNotificationManager = null;            return notification;        }        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationBuilder.java", "stars": "4", "class": {"name": "RecommendationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"RecommendationBuilder{\" +                \", mId=\" + mId +                \", mPriority=\" + mPriority +                \", mSmallIcon=\" + mSmallIcon +                \", mTitle='\" + mTitle + '\\'' +                \", mDescription='\" + mDescription + '\\'' +                \", mImageUri='\" + mImageUri + '\\'' +                \", mBackgroundUri='\" + mBackgroundUri + '\\'' +                \", mIntent=\" + mIntent +                '}';    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/service/recommendation/RecommendationBuilder.java", "stars": "4", "class": {"name": "RecommendationBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startSchedulers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startSchedulers(){        startTaskAliveChecker();        startTaskQueueRepair();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/scheduler/cluster/JobDynamicScheduler.java", "stars": "23", "class": {"name": "JobDynamicScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startTaskAliveChecker", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startTaskAliveChecker(){        String idKey = taskConf.getAliveSchedId();        int interval = taskConf.getAliveSchedInterval();        TriggerKey triggerKey = TriggerKey.triggerKey(idKey);        try {            if(!scheduler.checkExists(triggerKey)){                logger.info(\"Start a task alive checker, jobKey: [{}], triggerKey: [{}], interval in seconds: [{}]\",                        idKey, idKey, interval);                JobKey jobKey = new JobKey(idKey);                SimpleScheduleBuilder builder =SimpleScheduleBuilder.simpleSchedule();                builder.withIntervalInSeconds(interval).repeatForever();                Trigger trigger = TriggerBuilder.newTrigger().withIdentity(triggerKey)                        .withSchedule(builder).build();                Class<? extends Job> jobClass = TaskAliveCheckBean.class;                JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobKey)                        .usingJobData(SchedulerClusterConstants.ALIVE_CHECK_NUM, taskConf.getAliveSchedCheckNum())                        .build();                scheduler.scheduleJob(jobDetail, trigger);                logger.info(\"Start task alive checker succeed, jobKey: [{}], triggerKey: [{}]\", idKey, idKey);            }else{                Trigger.TriggerState state = scheduler.getTriggerState(triggerKey);                if(state == Trigger.TriggerState.ERROR){                    logger.error(\"SCHEDULER_ERROR,  jobKey:[{}], triggerKey: [{}] status: ERROR\", idKey, idKey);                    scheduler.resetTriggerFromErrorState(triggerKey);                    logger.info(\"Reset trigger task [{}] alive checker\", triggerKey);                }            }        } catch (SchedulerException e) {            logger.error(\"SCHEDULER_ERROR, jobKey:[{}], triggerKey: [{}], message: [{}]\", idKey, idKey, e.getMessage(), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/scheduler/cluster/JobDynamicScheduler.java", "stars": "23", "class": {"name": "JobDynamicScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startTaskQueueRepair", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startTaskQueueRepair(){        String idKey = taskQueueRepair.getQueueRepairSchedId();        int interval= taskQueueRepair.getQueueRepairInterval();        TriggerKey triggerKey = TriggerKey.triggerKey(idKey);        try{            if(!scheduler.checkExists(triggerKey)){                logger.info(\"Start a queue repair, jobKey:[{}], triggerKey:[{}], interval in seconds: [{}]\",                        idKey, idKey, interval);                JobKey jobKey = new JobKey(idKey);                SimpleScheduleBuilder builder =SimpleScheduleBuilder.simpleSchedule();                builder.withIntervalInSeconds(interval).repeatForever();                Trigger trigger = TriggerBuilder.newTrigger().withIdentity(triggerKey)                        .withSchedule(builder).build();                Class<? extends Job> jobClass = TaskQueueRepairBean.class;                JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobKey)                        .usingJobData(SchedulerClusterConstants.REPAIR_POLL_THRESHOLD, taskQueueRepair.getQueueRepairThreshold())                        .build();                scheduler.scheduleJob(jobDetail, trigger);                logger.info(\"Start a queue repair succeed, jobKey: [{}], triggerKey: [{}]\", idKey, idKey);            }else{                Trigger.TriggerState state = scheduler.getTriggerState(triggerKey);                if(state == Trigger.TriggerState.ERROR){                    logger.error(\"SCHEDULER_ERROR,  jobKey:[{}], triggerKey: [{}] status: ERROR\", idKey, idKey);                    scheduler.resetTriggerFromErrorState(triggerKey);                    logger.info(\"Reset trigger task [{}] alive checker\", triggerKey);                }            }        }catch (SchedulerException e) {            logger.error(\"SCHEDULER_ERROR, jobKey:[{}], triggerKey: [{}], message: [{}]\", idKey, idKey, e.getMessage(), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/scheduler/cluster/JobDynamicScheduler.java", "stars": "23", "class": {"name": "JobDynamicScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fillJobInfo", "params": ["JobInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void fillJobInfo(JobInfo jobInfo) {        // TriggerKey : name        String name = String.valueOf(jobInfo.getId());        TriggerKey triggerKey = TriggerKey.triggerKey(name);        try {            Trigger trigger = scheduler.getTrigger(triggerKey);            Trigger.TriggerState triggerState = scheduler.getTriggerState(triggerKey);            // parse params            if (trigger != null && trigger instanceof CronTriggerImpl) {                String cronExpression = ((CronTriggerImpl) trigger).getCronExpression();                jobInfo.setJobCorn(cronExpression);            }            if (triggerState != null) {                jobInfo.setJobStatus(triggerState.name());            }        } catch (SchedulerException e) {            logger.error(e.getMessage(), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/scheduler/cluster/JobDynamicScheduler.java", "stars": "23", "class": {"name": "JobDynamicScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkExists", "params": ["String"], "throws": ["SchedulerException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean checkExists(String jobName) throws SchedulerException {        TriggerKey triggerKey = TriggerKey.triggerKey(jobName);        return scheduler.checkExists(triggerKey);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/scheduler/cluster/JobDynamicScheduler.java", "stars": "23", "class": {"name": "JobDynamicScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addJob", "params": ["String", "String"], "throws": ["SchedulerException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean addJob(String jobName, String cronExpression) throws SchedulerException {        // TriggerKey : name + group        TriggerKey triggerKey = TriggerKey.triggerKey(jobName);        JobKey jobKey = new JobKey(jobName);        // TriggerKey valid if_exists        if (checkExists(jobName)) {            logger.info(\"AddJob fail, job already exist, jobName:[{}]\", jobName);            return false;        }        // CronTrigger : TriggerKey + cronExpression\t// withMisfireHandlingInstructionDoNothing \u5ffd\u7565\u6389\u8c03\u5ea6\u7ec8\u6b62\u8fc7\u7a0b\u4e2d\u5ffd\u7565\u7684\u8c03\u5ea6        CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(cronExpression).withMisfireHandlingInstructionDoNothing();        CronTrigger cronTrigger = TriggerBuilder.newTrigger().withIdentity(triggerKey).withSchedule(cronScheduleBuilder).build();        // JobDetail : jobClass        Class<? extends Job> jobClass = TaskProduceBean.class;        JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobKey).build();        // schedule : jobDetail + cronTrigger        Date date = scheduler.scheduleJob(jobDetail, cronTrigger);        logger.info(\"AddJob success, jobDetail:[{}], cronTrigger:[{}], date:[{}]\", jobDetail, cronTrigger, date);        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/scheduler/cluster/JobDynamicScheduler.java", "stars": "23", "class": {"name": "JobDynamicScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rescheduleJob", "params": ["String", "String"], "throws": ["SchedulerException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean rescheduleJob(String jobName, String cronExpression) throws SchedulerException {        // TriggerKey valid if_exists        if (!checkExists(jobName)) {            logger.info(\"RescheduleJob fail, job not exists, JobName:[{}]\", jobName);            return false;        }        // TriggerKey : name + group        TriggerKey triggerKey = TriggerKey.triggerKey(jobName);        CronTrigger oldTrigger = (CronTrigger) scheduler.getTrigger(triggerKey);        if (oldTrigger != null) {            // avoid repeat            String oldCron = oldTrigger.getCronExpression();            if (oldCron.equals(cronExpression)) {                return true;            }            // CronTrigger : TriggerKey + cronExpression            CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(cronExpression).withMisfireHandlingInstructionDoNothing();            oldTrigger = oldTrigger.getTriggerBuilder().withIdentity(triggerKey).withSchedule(cronScheduleBuilder).build();            // rescheduleJob            scheduler.rescheduleJob(triggerKey, oldTrigger);        } else {            // CronTrigger : TriggerKey + cronExpression            CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(cronExpression).withMisfireHandlingInstructionDoNothing();            CronTrigger cronTrigger = TriggerBuilder.newTrigger().withIdentity(triggerKey).withSchedule(cronScheduleBuilder).build();            // JobDetail-JobDataMap fresh            JobKey jobKey = new JobKey(jobName);            JobDetail jobDetail = scheduler.getJobDetail(jobKey);            // Trigger fresh            HashSet<Trigger> triggerSet = new HashSet<Trigger>();            triggerSet.add(cronTrigger);            scheduler.scheduleJob(jobDetail, triggerSet, true);        }        logger.info(\"ResumeJob success, JobName:[{}]\", jobName);        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/scheduler/cluster/JobDynamicScheduler.java", "stars": "23", "class": {"name": "JobDynamicScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeJob", "params": ["String"], "throws": ["SchedulerException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean removeJob(String jobName) throws SchedulerException {        // TriggerKey : name + group        TriggerKey triggerKey = TriggerKey.triggerKey(jobName);        boolean result = false;        if (checkExists(jobName)) {            result = scheduler.unscheduleJob(triggerKey);            logger.info(\"RemoveJob, triggerKey:[{}], result [{}]\", triggerKey, result);        }        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/scheduler/cluster/JobDynamicScheduler.java", "stars": "23", "class": {"name": "JobDynamicScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pauseJob", "params": ["String"], "throws": ["SchedulerException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean pauseJob(String jobName) throws SchedulerException {        // TriggerKey : name + group        TriggerKey triggerKey = TriggerKey.triggerKey(jobName);        boolean result = false;        if (checkExists(jobName)) {            scheduler.pauseTrigger(triggerKey);            result = true;            logger.info(\"pauseJob success, triggerKey:[{}]\", triggerKey);        } else {            logger.info(\"pauseJob fail, triggerKey:[{}]\", triggerKey);        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/scheduler/cluster/JobDynamicScheduler.java", "stars": "23", "class": {"name": "JobDynamicScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resumeJob", "params": ["String"], "throws": ["SchedulerException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean resumeJob(String jobName) throws SchedulerException {        // TriggerKey : name + group        TriggerKey triggerKey = TriggerKey.triggerKey(jobName);        boolean result = false;        if (checkExists(jobName)) {            Trigger.TriggerState state = scheduler.getTriggerState(triggerKey);            if(state == Trigger.TriggerState.ERROR){                scheduler.resetTriggerFromErrorState(triggerKey);            }            scheduler.resumeTrigger(triggerKey);            result = true;            logger.info(\"ResumeJob success, triggerKey:[{}]\", triggerKey);        } else {            logger.info(\"ResumeJob fail, triggerKey:[{}]\", triggerKey);        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/scheduler/cluster/JobDynamicScheduler.java", "stars": "23", "class": {"name": "JobDynamicScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "triggerJob", "params": ["String"], "throws": ["SchedulerException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean triggerJob(String jobName) throws SchedulerException {        // TriggerKey : name + group        JobKey jobKey = new JobKey(jobName);        boolean result = false;        if (checkExists(jobName)) {            JobDetail jobDetail = scheduler.getJobDetail(jobKey);            scheduler.triggerJob(jobKey);            result = true;            logger.info(\"RunJob success, jobKey:[{}]\", jobKey);        } else {            logger.info(\"RunJob fail, jobKey:[{}]\", jobKey);        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/scheduler/cluster/JobDynamicScheduler.java", "stars": "23", "class": {"name": "JobDynamicScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "applyDefaultValueOnXmlConfiguration", "params": [], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "  void applyDefaultValueOnXmlConfiguration() throws IOException {    Properties props = new Properties();    props.setProperty(PropertyParser.KEY_ENABLE_DEFAULT_VALUE, \"true\");    Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/global_variables_defaults/mybatis-config.xml\");    SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props);    Configuration configuration = factory.getConfiguration();    Assertions.assertThat(configuration.getJdbcTypeForNull()).isEqualTo(JdbcType.NULL);    Assertions.assertThat(((UnpooledDataSource) configuration.getEnvironment().getDataSource()).getUrl())            .isEqualTo(\"jdbc:hsqldb:mem:global_variables_defaults\");    Assertions.assertThat(configuration.getDatabaseId()).isEqualTo(\"hsql\");    Assertions.assertThat(((SupportClasses.CustomObjectFactory) configuration.getObjectFactory()).getProperties().getProperty(\"name\"))            .isEqualTo(\"default\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/global_variables_defaults/ConfigurationTest.java", "stars": "15", "class": {"name": "ConfigurationTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "applyPropertyValueOnXmlConfiguration", "params": [], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "  void applyPropertyValueOnXmlConfiguration() throws IOException {    Properties props = new Properties();    props.setProperty(PropertyParser.KEY_ENABLE_DEFAULT_VALUE, \"true\");    props.setProperty(\"settings.jdbcTypeForNull\", JdbcType.CHAR.name());    props.setProperty(\"db.name\", \"global_variables_defaults_custom\");    props.setProperty(\"productName.hsql\", \"Hsql\");    props.setProperty(\"objectFactory.name\", \"custom\");    Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/global_variables_defaults/mybatis-config.xml\");    SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props);    Configuration configuration = factory.getConfiguration();    Assertions.assertThat(configuration.getJdbcTypeForNull()).isEqualTo(JdbcType.CHAR);    Assertions.assertThat(((UnpooledDataSource) configuration.getEnvironment().getDataSource()).getUrl())            .isEqualTo(\"jdbc:hsqldb:mem:global_variables_defaults_custom\");    Assertions.assertThat(configuration.getDatabaseId()).isNull();    Assertions.assertThat(((SupportClasses.CustomObjectFactory) configuration.getObjectFactory()).getProperties().getProperty(\"name\"))            .isEqualTo(\"custom\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/global_variables_defaults/ConfigurationTest.java", "stars": "15", "class": {"name": "ConfigurationTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        Toolbar toolbar = findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        FloatingActionButton fab = findViewById(R.id.fab);        fab.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)                        .setAction(\"Action\", null).show();            }        });        DrawerLayout drawer = findViewById(R.id.drawer_layout);        NavigationView navigationView = findViewById(R.id.nav_view);        // Passing each menu ID as a set of Ids because each        // menu should be considered as top level destinations.        mAppBarConfiguration = new AppBarConfiguration.Builder(                R.id.nav_home, R.id.nav_gallery, R.id.nav_slideshow)                .setDrawerLayout(drawer)                .build();        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);        NavigationUI.setupActionBarWithNavController(this, navController, mAppBarConfiguration);        NavigationUI.setupWithNavController(navigationView, navController);    }", "url": "https://raw.githubusercontent.com/dahilu/BeautyOverview/master/app/src/main/java/com/example/beautyoverview/MainActivity.java", "stars": "1", "class": {"name": "MainActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.main, menu);        return true;    }", "url": "https://raw.githubusercontent.com/dahilu/BeautyOverview/master/app/src/main/java/com/example/beautyoverview/MainActivity.java", "stars": "1", "class": {"name": "MainActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSupportNavigateUp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onSupportNavigateUp() {        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);        return NavigationUI.navigateUp(navController, mAppBarConfiguration)                || super.onSupportNavigateUp();    }", "url": "https://raw.githubusercontent.com/dahilu/BeautyOverview/master/app/src/main/java/com/example/beautyoverview/MainActivity.java", "stars": "1", "class": {"name": "MainActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_video);        b1 = findViewById(R.id.b1);        pass_value = getIntent().getStringExtra(\"value\");        b1.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(VideoActivity.this,FirstActivity.class);                intent.putExtra(\"pass_value\",pass_value);                startActivity(intent);            }        });        vv1 = findViewById(R.id.vv1);        MediaController mediaController = new MediaController(this);        mediaController.setAnchorView(vv1);        Uri uri = Uri.parse(\"https://firebasestorage.googleapis.com/v0/b/splashapp-31e45.appspot.com/o/Coronavirus%20Myths%20vs%20Facts.mp4?alt=media&token=94d4d44c-bcb2-4b7e-b794-3f59eb96e85f\");        vv1.setVideoURI(uri);        vv1.setMediaController(mediaController);        vv1.start();    }", "url": "https://raw.githubusercontent.com/hashtrojans/SampleApp/master/app/src/main/java/com/expert/splashapp/VideoActivity.java", "stars": "1", "class": {"name": "VideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_lesson2);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawLinearGradientView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawLinearGradientView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.LINEAR_GRADIENT_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawRadialGradientView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawRadialGradientView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.RADIAL_GRADIENT_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawSweepGradientView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawSweepGradientView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.SWEEP_GRADIENT_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawBitmapShaderView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawBitmapShaderView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.BITMAP_SHADER_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawComposeShaderView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawComposeShaderView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.COMPOSE_SHADER_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawLightingColorFilterView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawLightingColorFilterView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.LIGHTING_COLOR_FILTER_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawColorMatrixColorFilterView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawColorMatrixColorFilterView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.COLOR_MATRIX_COLOR_FILTER_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawXfermodeView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawXfermodeView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.X_FER_MODE_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawStrokeCapView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawStrokeCapView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.STROKE_CAP_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawStrokeJoinView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawStrokeJoinView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.STROKE_JOIN_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawStrokeMiterView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawStrokeMiterView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.STOCK_MITER_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawPathEffectView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawPathEffectView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.PATH_EFFECT_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawShadowLayerView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawShadowLayerView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.SHADOW_LAYER_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawMaskFilterView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawMaskFilterView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.MASK_FILTER_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawFillPathView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawFillPathView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.FILL_PATH_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawTextPathView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawTextPathView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.TEXT_PATH_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson2Activity.java", "stars": "2", "class": {"name": "Lesson2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        // \u7528 Paint.setMaskFilter \u6765\u8bbe\u7f6e\u4e0d\u540c\u7684 BlurMaskFilter        // \u7b2c\u4e00\u4e2a\uff1aNORMAL \u5185\u5916\u90fd\u6a21\u7cca\u7ed8\u5236        paint.setMaskFilter(normalMaskFilter);        canvas.drawBitmap(bitmap, 100, 50, paint);        // \u7b2c\u4e8c\u4e2a\uff1aINNER  \u5185\u90e8\u6a21\u7cca\uff0c\u5916\u90e8\u4e0d\u7ed8\u5236        paint.setMaskFilter(innerMaskFilter);        canvas.drawBitmap(bitmap, bitmap.getWidth() + 200, 50, paint);        // \u7b2c\u4e09\u4e2a\uff1aOUTER  \u5185\u90e8\u4e0d\u7ed8\u5236\uff0c\u5916\u90e8\u6a21\u7cca        paint.setMaskFilter(outerMaskFilter);        canvas.drawBitmap(bitmap, 100, bitmap.getHeight() + 100, paint);        // \u7b2c\u56db\u4e2a\uff1aSOLID \u5185\u90e8\u6b63\u5e38\u7ed8\u5236\uff0c\u5916\u90e8\u6a21\u7cca        paint.setMaskFilter(solidMaskFilter);        canvas.drawBitmap(bitmap, bitmap.getWidth() + 200, bitmap.getHeight() + 100, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson2/Practice14MaskFilterView.java", "stars": "2", "class": {"name": "Practice14MaskFilterView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldNotCallNextOnClosedResultSet_SimpleResult", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldNotCallNextOnClosedResultSet_SimpleResult() throws Exception {    final Configuration config = new Configuration();    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    final MappedStatement ms = new MappedStatement.Builder(config, \"testSelect\",      new StaticSqlSource(config, \"some select statement\"), SqlCommandType.SELECT).resultMaps(        new ArrayList<ResultMap>() {          {            add(new ResultMap.Builder(config, \"testMap\", HashMap.class, new ArrayList<ResultMapping>() {              {                add(new ResultMapping.Builder(config, \"id\", \"id\", registry.getTypeHandler(Integer.class)).build());              }            }).build());          }        }).build();    final Executor executor = null;    final ParameterHandler parameterHandler = null;    final ResultHandler<?> resultHandler = null;    final BoundSql boundSql = null;    final RowBounds rowBounds = new RowBounds(5, 1);    final DefaultResultSetHandler resultSetHandler = new DefaultResultSetHandler(executor, ms, parameterHandler,      resultHandler, boundSql, rowBounds);    when(stmt.getResultSet()).thenReturn(rs);    when(rsmd.getColumnCount()).thenReturn(1);    when(rsmd.getColumnLabel(1)).thenReturn(\"id\");    when(rsmd.getColumnType(1)).thenReturn(Types.INTEGER);    when(rsmd.getColumnClassName(1)).thenReturn(Integer.class.getCanonicalName());    when(stmt.getConnection()).thenReturn(conn);    when(conn.getMetaData()).thenReturn(dbmd);    when(dbmd.supportsMultipleResultSets()).thenReturn(false); // for simplicity.    final List<Object> results = resultSetHandler.handleResultSets(stmt);    assertEquals(0, results.size());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandlerTest2.java", "stars": "15", "class": {"name": "DefaultResultSetHandlerTest2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldNotCallNextOnClosedResultSet_NestedResult", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldNotCallNextOnClosedResultSet_NestedResult() throws Exception {    final Configuration config = new Configuration();    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    final ResultMap nestedResultMap = new ResultMap.Builder(config, \"roleMap\", HashMap.class,      new ArrayList<ResultMapping>() {        {          add(new ResultMapping.Builder(config, \"role\", \"role\", registry.getTypeHandler(String.class))            .build());        }      }).build();    config.addResultMap(nestedResultMap);    final MappedStatement ms = new MappedStatement.Builder(config, \"selectPerson\",      new StaticSqlSource(config, \"select person...\"),      SqlCommandType.SELECT).resultMaps(        new ArrayList<ResultMap>() {          {            add(new ResultMap.Builder(config, \"personMap\", HashMap.class, new ArrayList<ResultMapping>() {              {                add(new ResultMapping.Builder(config, \"id\", \"id\", registry.getTypeHandler(Integer.class))                  .build());                add(new ResultMapping.Builder(config, \"roles\").nestedResultMapId(\"roleMap\").build());              }            }).build());          }        })        .resultOrdered(true)        .build();    final Executor executor = null;    final ParameterHandler parameterHandler = null;    final ResultHandler<?> resultHandler = null;    final BoundSql boundSql = null;    final RowBounds rowBounds = new RowBounds(5, 1);    final DefaultResultSetHandler resultSetHandler = new DefaultResultSetHandler(executor, ms, parameterHandler,      resultHandler, boundSql, rowBounds);    when(stmt.getResultSet()).thenReturn(rs);    when(rsmd.getColumnCount()).thenReturn(2);    when(rsmd.getColumnLabel(1)).thenReturn(\"id\");    when(rsmd.getColumnType(1)).thenReturn(Types.INTEGER);    when(rsmd.getColumnClassName(1)).thenReturn(Integer.class.getCanonicalName());    final List<Object> results = resultSetHandler.handleResultSets(stmt);    assertEquals(0, results.size());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandlerTest2.java", "stars": "15", "class": {"name": "DefaultResultSetHandlerTest2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "next", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean next() throws SQLException {      throwIfClosed();      return ++rowIndex < rows.size();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandlerTest2.java", "stars": "15", "class": {"name": "ImpatientResultSet", "extends": null, "implements": ["ResultSet"], "modifiers": ["abstract", "protected"]}}, {"method_name": "isClosed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isClosed() {      return rowIndex >= rows.size();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandlerTest2.java", "stars": "15", "class": {"name": "ImpatientResultSet", "extends": null, "implements": ["ResultSet"], "modifiers": ["abstract", "protected"]}}, {"method_name": "getString", "params": ["String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String getString(String columnLabel) throws SQLException {      throwIfClosed();      return (String) rows.get(rowIndex).get(columnLabel);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandlerTest2.java", "stars": "15", "class": {"name": "ImpatientResultSet", "extends": null, "implements": ["ResultSet"], "modifiers": ["abstract", "protected"]}}, {"method_name": "getInt", "params": ["String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int getInt(String columnLabel) throws SQLException {      throwIfClosed();      return (Integer) rows.get(rowIndex).get(columnLabel);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandlerTest2.java", "stars": "15", "class": {"name": "ImpatientResultSet", "extends": null, "implements": ["ResultSet"], "modifiers": ["abstract", "protected"]}}, {"method_name": "wasNull", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean wasNull() throws SQLException {      throwIfClosed();      return false;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandlerTest2.java", "stars": "15", "class": {"name": "ImpatientResultSet", "extends": null, "implements": ["ResultSet"], "modifiers": ["abstract", "protected"]}}, {"method_name": "getMetaData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ResultSetMetaData", "snippet": "    public ResultSetMetaData getMetaData() {      return rsmd;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandlerTest2.java", "stars": "15", "class": {"name": "ImpatientResultSet", "extends": null, "implements": ["ResultSet"], "modifiers": ["abstract", "protected"]}}, {"method_name": "getType", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int getType() throws SQLException {      throwIfClosed();      return ResultSet.TYPE_FORWARD_ONLY;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandlerTest2.java", "stars": "15", "class": {"name": "ImpatientResultSet", "extends": null, "implements": ["ResultSet"], "modifiers": ["abstract", "protected"]}}, {"method_name": "throwIfClosed", "params": [], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void throwIfClosed() throws SQLException {      if (rowIndex >= rows.size()) {        throw new SQLException(\"Invalid operation: result set is closed.\");      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandlerTest2.java", "stars": "15", "class": {"name": "ImpatientResultSet", "extends": null, "implements": ["ResultSet"], "modifiers": ["abstract", "protected"]}}, {"method_name": "resolve", "params": ["Function<ResourceResolver,T>"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public <T> T resolve(Function<ResourceResolver, T> function) {    try (ResourceResolver resolver = retrieveResourceResolver()) {      return function.apply(resolver);    } catch (LoginException e) {      LOG.error(\"Cannot create resource resolver for mapper service.\", e);      throw new StubsException(        \"Cannot create resource resolver for mapper service. Is service user mapper configured?\", e      );    }  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/util/ResolverAccessor.java", "stars": "8", "class": {"name": "ResolverAccessor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "consume", "params": ["Consumer<ResourceResolver>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void consume(Consumer<ResourceResolver> consumer) {    resolve(resolver -> {      consumer.accept(resolver);      return null;    });  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/util/ResolverAccessor.java", "stars": "8", "class": {"name": "ResolverAccessor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "retrieveResourceResolver", "params": [], "throws": ["LoginException"], "modifiers": ["private"], "return_type": "ResourceResolver", "snippet": "  private ResourceResolver retrieveResourceResolver() throws LoginException {    return factory.getServiceResourceResolver(singletonMap(SUBSERVICE, \"com.cognifide.aem.stubs\"));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/util/ResolverAccessor.java", "stars": "8", "class": {"name": "ResolverAccessor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "uploadFiles", "params": ["MultipartFile"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<ResponseMessage>", "snippet": "  public ResponseEntity<ResponseMessage> uploadFiles(@RequestParam(\"files\") MultipartFile[] files) {    String message = \"\";    try {      List<String> fileNames = new ArrayList<>();      Arrays.asList(files).stream().forEach(file -> {        storageService.save(file);        fileNames.add(file.getOriginalFilename());      });      message = \"Uploaded the files successfully: \" + fileNames;      return ResponseEntity.status(HttpStatus.OK).body(new ResponseMessage(message));    } catch (Exception e) {      message = \"Fail to upload files!\";      return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).body(new ResponseMessage(message));    }  }", "url": "https://raw.githubusercontent.com/bezkoder/spring-boot-upload-multiple-files/master/src/main/java/com/bezkoder/spring/files/uploadmultiple/controller/FilesController.java", "stars": "2", "class": {"name": "FilesController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getListFiles", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<List>", "snippet": "  public ResponseEntity<List<FileInfo>> getListFiles() {    List<FileInfo> fileInfos = storageService.loadAll().map(path -> {      String filename = path.getFileName().toString();      String url = MvcUriComponentsBuilder          .fromMethodName(FilesController.class, \"getFile\", path.getFileName().toString()).build().toString();      return new FileInfo(filename, url);    }).collect(Collectors.toList());    return ResponseEntity.status(HttpStatus.OK).body(fileInfos);  }", "url": "https://raw.githubusercontent.com/bezkoder/spring-boot-upload-multiple-files/master/src/main/java/com/bezkoder/spring/files/uploadmultiple/controller/FilesController.java", "stars": "2", "class": {"name": "FilesController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFile", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Resource>", "snippet": "  public ResponseEntity<Resource> getFile(@PathVariable String filename) {    Resource file = storageService.load(filename);    return ResponseEntity.ok()        .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=\\\"\" + file.getFilename() + \"\\\"\").body(file);  }", "url": "https://raw.githubusercontent.com/bezkoder/spring-boot-upload-multiple-files/master/src/main/java/com/bezkoder/spring/files/uploadmultiple/controller/FilesController.java", "stars": "2", "class": {"name": "FilesController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        user = new User();        user.setId(USER_ID);        user.setFirstName(FIRST_NAME);        user.setLastName(LAST_NAME);        userDTO = simpleUserMapper.toDTO(user);        when(userRepository.findById(USER_ID)).thenReturn(Optional.of(user));        gardenFieldDTO = new GardenFieldDTO();        gardenFieldDTO.setId(GARDEN_ID);        gardenFieldDTO.setName(GARDEN_NAME);        gardenFieldDTO.setDescription(DESCRIPTION);        gardenFieldDTO.setSizeInM2(SIZE_IN_M2);        gardenFieldDTO.setPricePerM2(PRICE_PER_M2);        gardenFieldDTO.setLatitude(LATITUDE);        gardenFieldDTO.setLongitude(LONGITUDE);        gardenFieldDTO.setCity(CITY);        gardenFieldDTO.setRoofed(ROOFED);        gardenFieldDTO.setGlassHouse(GLASS_HOUSE);        gardenFieldDTO.setHigh(HIGH);        gardenFieldDTO.setWater(WATER);        gardenFieldDTO.setElectricity(ELECTRICITY);        gardenFieldDTO.setPhValue(PH_VALUE);        gardenFieldDTO.setOwner(userDTO);        gardenField = new GardenField();        gardenField.setId(GARDEN_ID);        gardenField.setName(GARDEN_NAME);        gardenField.setDescription(DESCRIPTION);        gardenField.setSizeInM2(SIZE_IN_M2);        gardenField.setPricePerM2(PRICE_PER_M2);        gardenField.setLatitude(LATITUDE);        gardenField.setLongitude(LONGITUDE);        gardenField.setCity(CITY);        gardenField.setRoofed(ROOFED);        gardenField.setGlassHouse(GLASS_HOUSE);        gardenField.setHigh(HIGH);        gardenField.setWater(WATER);        gardenField.setElectricity(ELECTRICITY);        gardenField.setPhValue(PH_VALUE);        gardenField.setOwner(user);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/mapper/GardenFieldMapperIT.java", "stars": "2", "class": {"name": "GardenFieldMapperIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "map_shouldMapGardenFieldDTOToGardenField", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void map_shouldMapGardenFieldDTOToGardenField() {        GardenField gardenFieldEntity = gardenFieldMapper.toEntity(gardenFieldDTO);        assertThat(gardenFieldEntity).isNotNull();        assertThat(gardenFieldEntity.getId()).isEqualTo(GARDEN_ID);        assertThat(gardenFieldEntity.getName()).isEqualTo(GARDEN_NAME);        assertThat(gardenFieldEntity.getDescription()).isEqualTo(DESCRIPTION);        assertThat(gardenFieldEntity.getSizeInM2()).isEqualTo(SIZE_IN_M2);        assertThat(gardenFieldEntity.getPricePerM2()).isEqualTo(PRICE_PER_M2);        assertThat(gardenFieldEntity.getLatitude()).isEqualTo(LATITUDE);        assertThat(gardenFieldEntity.getLongitude()).isEqualTo(LONGITUDE);        assertThat(gardenFieldEntity.getCity()).isEqualTo(CITY);        assertThat(gardenFieldEntity.getRoofed()).isEqualTo(ROOFED);        assertThat(gardenFieldEntity.getGlassHouse()).isEqualTo(GLASS_HOUSE);        assertThat(gardenFieldEntity.getHigh()).isEqualTo(HIGH);        assertThat(gardenFieldEntity.getWater()).isEqualTo(WATER);        assertThat(gardenFieldEntity.getElectricity()).isEqualTo(ELECTRICITY);        assertThat(gardenFieldEntity.getPhValue()).isEqualTo(PH_VALUE);        assertThat(gardenFieldEntity.getOwner()).isEqualTo(user);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/mapper/GardenFieldMapperIT.java", "stars": "2", "class": {"name": "GardenFieldMapperIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "map_shouldMapGardenFieldToGardenFieldDTO", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void map_shouldMapGardenFieldToGardenFieldDTO() {        GardenFieldDTO gardenFieldDto = gardenFieldMapper.toDto(gardenField);        assertThat(gardenFieldDto).isNotNull();        assertThat(gardenFieldDto.getId()).isEqualTo(GARDEN_ID);        assertThat(gardenFieldDto.getName()).isEqualTo(GARDEN_NAME);        assertThat(gardenFieldDto.getDescription()).isEqualTo(DESCRIPTION);        assertThat(gardenFieldDto.getSizeInM2()).isEqualTo(SIZE_IN_M2);        assertThat(gardenFieldDto.getPricePerM2()).isEqualTo(PRICE_PER_M2);        assertThat(gardenFieldDto.getLatitude()).isEqualTo(LATITUDE);        assertThat(gardenFieldDto.getLongitude()).isEqualTo(LONGITUDE);        assertThat(gardenFieldDto.getCity()).isEqualTo(CITY);        assertThat(gardenFieldDto.getRoofed()).isEqualTo(ROOFED);        assertThat(gardenFieldDto.getGlassHouse()).isEqualTo(GLASS_HOUSE);        assertThat(gardenFieldDto.getHigh()).isEqualTo(HIGH);        assertThat(gardenFieldDto.getWater()).isEqualTo(WATER);        assertThat(gardenFieldDto.getElectricity()).isEqualTo(ELECTRICITY);        assertThat(gardenFieldDto.getPhValue()).isEqualTo(PH_VALUE);        assertThat(gardenFieldDto.getOwner()).isEqualTo(userDTO);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/mapper/GardenFieldMapperIT.java", "stars": "2", "class": {"name": "GardenFieldMapperIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "contentType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String contentType(){        return contentType;    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/URL.java", "stars": "2", "class": {"name": "URL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInputStream", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BufferedInputStream", "snippet": "    public BufferedInputStream getInputStream() {        if (StrUtil.isEmpty(filePath)) return null;        return new FileReader(filePath).getInputStream();    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/URL.java", "stars": "2", "class": {"name": "URL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "URL", "snippet": "    public URL add(String key, Object object) {        ctx.put(key, object);        return this;    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/URL.java", "stars": "2", "class": {"name": "URL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "content", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String content() {        if (Objects.isNull(context)) {            return null;        } else {            this.ctx.put(\"ctx\", this.context);            return Bored.env().getJetTemplateHelper().parse(context.getTemplatePath(), this.ctx);        }    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/URL.java", "stars": "2", "class": {"name": "URL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "out", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void out() {        var content = content();        this.fullFilePath = PathUtil.convertCorrectPath(this.fullFilePath);        if (StrUtil.isEmpty(content)) {            FileUtil.writeBytes(new FileReader(this.filePath).readBytes(), this.fullFilePath);        } else {            FileUtil.writeBytes(content.getBytes(CharsetUtil.CHARSET_UTF_8), this.fullFilePath);        }    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/URL.java", "stars": "2", "class": {"name": "URL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"URL{\" +                \"uri='\" + uri + '\\'' +                \", fullFilePath='\" + fullFilePath + '\\'' +                \", filePath='\" + filePath + '\\'' +                \", context=\" + context +                \", contentType='\" + contentType + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/URL.java", "stars": "2", "class": {"name": "URL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(SquareDelegate.measureWidth(widthMeasureSpec, heightMeasureSpec),                SquareDelegate.measureHeight(widthMeasureSpec, heightMeasureSpec));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/square/SquareImageView.java", "stars": "1", "class": {"name": "SquareImageView", "extends": "AppCompatImageView", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getKnownCodecList", "params": [], "throws": null, "modifiers": ["synchronized", "private", "static"], "return_type": "Map<String,Integer>", "snippet": "    private static synchronized Map<String, Integer> getKnownCodecList() {        if (sKnownCodecList != null)            return sKnownCodecList;        sKnownCodecList = new TreeMap<String, Integer>(                String.CASE_INSENSITIVE_ORDER);        // ----- Nvidia -----        // Tegra3        // Nexus 7 (2012)        // Tegra K1        // Nexus 9        sKnownCodecList.put(\"OMX.Nvidia.h264.decode\", RANK_TESTED);        sKnownCodecList.put(\"OMX.Nvidia.h264.decode.secure\", RANK_SECURE);        // ----- Intel -----        // Atom Z3735        // Teclast X98 Air        sKnownCodecList.put(\"OMX.Intel.hw_vd.h264\", RANK_TESTED + 1);        // Atom Z2560        // Dell Venue 7 3730        sKnownCodecList.put(\"OMX.Intel.VideoDecoder.AVC\", RANK_TESTED);        // ----- Qualcomm -----        // MSM8260        // Xiaomi MI 1S        sKnownCodecList.put(\"OMX.qcom.video.decoder.avc\", RANK_TESTED);        sKnownCodecList.put(\"OMX.ittiam.video.decoder.avc\", RANK_NO_SENSE);        // ----- Samsung -----        // Exynos 3110        // Nexus S        sKnownCodecList.put(\"OMX.SEC.avc.dec\", RANK_TESTED);        sKnownCodecList.put(\"OMX.SEC.AVC.Decoder\", RANK_TESTED - 1);        // OMX.SEC.avcdec doesn't reorder output pictures on GT-9100        sKnownCodecList.put(\"OMX.SEC.avcdec\", RANK_TESTED - 2);        sKnownCodecList.put(\"OMX.SEC.avc.sw.dec\", RANK_SOFTWARE);        // Exynos 5 ?        sKnownCodecList.put(\"OMX.Exynos.avc.dec\", RANK_TESTED);        sKnownCodecList.put(\"OMX.Exynos.AVC.Decoder\", RANK_TESTED - 1);        // ------ Huawei hisilicon ------        // Kirin 910, Mali 450 MP        // Huawei HONOR 3C (H30-L01)        sKnownCodecList.put(\"OMX.k3.video.decoder.avc\", RANK_TESTED);        // Kirin 920, Mali T624        // Huawei HONOR 6        sKnownCodecList.put(\"OMX.IMG.MSVDX.Decoder.AVC\", RANK_TESTED);        // ----- TI -----        // TI OMAP4460        // Galaxy Nexus        sKnownCodecList.put(\"OMX.TI.DUCATI1.VIDEO.DECODER\", RANK_TESTED);        // ------ RockChip ------        // Youku TVBox        sKnownCodecList.put(\"OMX.rk.video_decoder.avc\", RANK_TESTED);        // ------ AMLogic -----        // MiBox1, 1s, 2        sKnownCodecList.put(\"OMX.amlogic.avc.decoder.awesome\", RANK_TESTED);        // ------ Marvell ------        // Lenovo A788t        sKnownCodecList.put(\"OMX.MARVELL.VIDEO.HW.CODA7542DECODER\", RANK_TESTED);        sKnownCodecList.put(\"OMX.MARVELL.VIDEO.H264DECODER\", RANK_SOFTWARE);        // ----- TODO: need test -----        sKnownCodecList.remove(\"OMX.Action.Video.Decoder\");        sKnownCodecList.remove(\"OMX.allwinner.video.decoder.avc\");        sKnownCodecList.remove(\"OMX.BRCM.vc4.decoder.avc\");        sKnownCodecList.remove(\"OMX.brcm.video.h264.hw.decoder\");        sKnownCodecList.remove(\"OMX.brcm.video.h264.decoder\");        sKnownCodecList.remove(\"OMX.cosmo.video.decoder.avc\");        sKnownCodecList.remove(\"OMX.duos.h264.decoder\");        sKnownCodecList.remove(\"OMX.hantro.81x0.video.decoder\");        sKnownCodecList.remove(\"OMX.hantro.G1.video.decoder\");        sKnownCodecList.remove(\"OMX.hisi.video.decoder\");        sKnownCodecList.remove(\"OMX.LG.decoder.video.avc\");        sKnownCodecList.remove(\"OMX.MS.AVC.Decoder\");        sKnownCodecList.remove(\"OMX.RENESAS.VIDEO.DECODER.H264\");        sKnownCodecList.remove(\"OMX.RTK.video.decoder\");        sKnownCodecList.remove(\"OMX.sprd.h264.decoder\");        sKnownCodecList.remove(\"OMX.ST.VFM.H264Dec\");        sKnownCodecList.remove(\"OMX.vpu.video_decoder.avc\");        sKnownCodecList.remove(\"OMX.WMT.decoder.avc\");        // Really ?        sKnownCodecList.remove(\"OMX.bluestacks.hw.decoder\");        // ---------------        // Useless codec        // ----- google -----        sKnownCodecList.put(\"OMX.google.h264.decoder\", RANK_SOFTWARE);        sKnownCodecList.put(\"OMX.google.h264.lc.decoder\", RANK_SOFTWARE);        // ----- huawei k920 -----        sKnownCodecList.put(\"OMX.k3.ffmpeg.decoder\", RANK_SOFTWARE);        sKnownCodecList.put(\"OMX.ffmpeg.video.decoder\", RANK_SOFTWARE);        // ----- unknown -----        sKnownCodecList.put(\"OMX.sprd.soft.h264.decoder\", RANK_SOFTWARE);        return sKnownCodecList;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaCodecInfo.java", "stars": "2", "class": {"name": "IjkMediaCodecInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setupCandidate", "params": ["MediaCodecInfo", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "IjkMediaCodecInfo", "snippet": "    public static IjkMediaCodecInfo setupCandidate(MediaCodecInfo codecInfo,            String mimeType) {        if (codecInfo == null                || Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN)            return null;        String name = codecInfo.getName();        if (TextUtils.isEmpty(name))            return null;        name = name.toLowerCase(Locale.US);        int rank = RANK_NO_SENSE;        if (!name.startsWith(\"omx.\")) {            rank = RANK_NON_STANDARD;        } else if (name.startsWith(\"omx.pv\")) {            rank = RANK_SOFTWARE;        } else if (name.startsWith(\"omx.google.\")) {            rank = RANK_SOFTWARE;        } else if (name.startsWith(\"omx.ffmpeg.\")) {            rank = RANK_SOFTWARE;        } else if (name.startsWith(\"omx.k3.ffmpeg.\")) {            rank = RANK_SOFTWARE;        } else if (name.startsWith(\"omx.avcodec.\")) {            rank = RANK_SOFTWARE;        } else if (name.startsWith(\"omx.ittiam.\")) {            // unknown codec in qualcomm SoC            rank = RANK_NO_SENSE;        } else if (name.startsWith(\"omx.mtk.\")) {            // 1. MTK only works on 4.3 and above            // 2. MTK works on MIUI 6 (4.2.1)            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2)                rank = RANK_NO_SENSE;            else                rank = RANK_TESTED;        } else {            Integer knownRank = getKnownCodecList().get(name);            if (knownRank != null) {                rank = knownRank;            } else {                try {                    CodecCapabilities cap = codecInfo                            .getCapabilitiesForType(mimeType);                    if (cap != null)                        rank = RANK_ACCEPTABLE;                    else                        rank = RANK_LAST_CHANCE;                } catch (Throwable e) {                    rank = RANK_LAST_CHANCE;                }            }        }        IjkMediaCodecInfo candidate = new IjkMediaCodecInfo();        candidate.mCodecInfo = codecInfo;        candidate.mRank = rank;        candidate.mMimeType = mimeType;        return candidate;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaCodecInfo.java", "stars": "2", "class": {"name": "IjkMediaCodecInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dumpProfileLevels", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dumpProfileLevels(String mimeType) {        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN)            return;        try {            CodecCapabilities caps = mCodecInfo                    .getCapabilitiesForType(mimeType);            int maxProfile = 0;            int maxLevel = 0;            if (caps != null) {                if (caps.profileLevels != null) {                    for (CodecProfileLevel profileLevel : caps.profileLevels) {                        if (profileLevel == null)                            continue;                        maxProfile = Math.max(maxProfile, profileLevel.profile);                        maxLevel = Math.max(maxLevel, profileLevel.level);                    }                }            }            Log.i(TAG,                    String.format(Locale.US, \"%s\",                            getProfileLevelName(maxProfile, maxLevel)));        } catch (Throwable e) {            Log.i(TAG, \"profile-level: exception\");        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaCodecInfo.java", "stars": "2", "class": {"name": "IjkMediaCodecInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProfileLevelName", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getProfileLevelName(int profile, int level) {        return String.format(Locale.US, \" %s Profile Level %s (%d,%d)\",                getProfileName(profile), getLevelName(level), profile, level);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaCodecInfo.java", "stars": "2", "class": {"name": "IjkMediaCodecInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProfileName", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getProfileName(int profile) {        switch (profile) {        case CodecProfileLevel.AVCProfileBaseline:            return \"Baseline\";        case CodecProfileLevel.AVCProfileMain:            return \"Main\";        case CodecProfileLevel.AVCProfileExtended:            return \"Extends\";        case CodecProfileLevel.AVCProfileHigh:            return \"High\";        case CodecProfileLevel.AVCProfileHigh10:            return \"High10\";        case CodecProfileLevel.AVCProfileHigh422:            return \"High422\";        case CodecProfileLevel.AVCProfileHigh444:            return \"High444\";        default:            return \"Unknown\";        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaCodecInfo.java", "stars": "2", "class": {"name": "IjkMediaCodecInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLevelName", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getLevelName(int level) {        switch (level) {        case CodecProfileLevel.AVCLevel1:            return \"1\";        case CodecProfileLevel.AVCLevel1b:            return \"1b\";        case CodecProfileLevel.AVCLevel11:            return \"11\";        case CodecProfileLevel.AVCLevel12:            return \"12\";        case CodecProfileLevel.AVCLevel13:            return \"13\";        case CodecProfileLevel.AVCLevel2:            return \"2\";        case CodecProfileLevel.AVCLevel21:            return \"21\";        case CodecProfileLevel.AVCLevel22:            return \"22\";        case CodecProfileLevel.AVCLevel3:            return \"3\";        case CodecProfileLevel.AVCLevel31:            return \"31\";        case CodecProfileLevel.AVCLevel32:            return \"32\";        case CodecProfileLevel.AVCLevel4:            return \"4\";        case CodecProfileLevel.AVCLevel41:            return \"41\";        case CodecProfileLevel.AVCLevel42:            return \"42\";        case CodecProfileLevel.AVCLevel5:            return \"5\";        case CodecProfileLevel.AVCLevel51:            return \"51\";        case 65536: // CodecProfileLevel.AVCLevel52:            return \"52\";        default:            return \"0\";        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaCodecInfo.java", "stars": "2", "class": {"name": "IjkMediaCodecInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCallBack", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CallBack", "snippet": "    public CallBack getCallBack() {        return callBack;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/EventMessage.java", "stars": "7", "class": {"name": "EventMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCallBack", "params": ["CallBack"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCallBack(CallBack callBack) {        this.callBack = callBack;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/EventMessage.java", "stars": "7", "class": {"name": "EventMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getArg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getArg() {        return arg;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/EventMessage.java", "stars": "7", "class": {"name": "EventMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setArg", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setArg(int arg) {        this.arg = arg;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/EventMessage.java", "stars": "7", "class": {"name": "EventMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEvent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEvent() {        return event;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/EventMessage.java", "stars": "7", "class": {"name": "EventMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEvent", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEvent(String event) {        this.event = event;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/EventMessage.java", "stars": "7", "class": {"name": "EventMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getMsg() {        return msg;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/EventMessage.java", "stars": "7", "class": {"name": "EventMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEventExeption", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PostEventExeption", "snippet": "    public PostEventExeption getEventExeption() {        return eventExeption;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/EventMessage.java", "stars": "7", "class": {"name": "EventMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEventExeption", "params": ["PostEventExeption"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEventExeption(PostEventExeption eventExeption) {        this.eventExeption = eventExeption;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/EventMessage.java", "stars": "7", "class": {"name": "EventMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMsg", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMsg(T msg) {        this.msg = msg;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/EventMessage.java", "stars": "7", "class": {"name": "EventMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLoginUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLoginUser() {        return loginUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/auth/domain/UserPasswordToken.java", "stars": "23", "class": {"name": "UserPasswordToken", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLoginUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLoginUser(String loginUser) {        this.loginUser = loginUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/auth/domain/UserPasswordToken.java", "stars": "23", "class": {"name": "UserPasswordToken", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLoginPwd", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLoginPwd() {        return loginPwd;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/auth/domain/UserPasswordToken.java", "stars": "23", "class": {"name": "UserPasswordToken", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLoginPwd", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLoginPwd(String loginPwd) {        this.loginPwd = loginPwd;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/auth/domain/UserPasswordToken.java", "stars": "23", "class": {"name": "UserPasswordToken", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getCreateTime() {        return createTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTime(Date createTime) {        this.createTime = createTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getStatus() {        return status;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatus(int status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getQid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getQid() {        return qid;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setQid", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setQid(Integer qid) {        this.qid = qid;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEnqTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getEnqTime() {        return enqTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEnqTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEnqTime(Date enqTime) {        this.enqTime = enqTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getVersion() {        return version;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVersion", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVersion(Integer version) {        this.version = version;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPollTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getPollTime() {        return pollTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPollTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPollTime(Date pollTime) {        this.pollTime = pollTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEnqCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getEnqCount() {        return enqCount;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEnqCount", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEnqCount(Integer enqCount) {        this.enqCount = enqCount;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDelayTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getDelayTime() {        return delayTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDelayTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDelayTime(Date delayTime) {        this.delayTime = delayTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDelayCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getDelayCount() {        return delayCount;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDelayCount", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDelayCount(Integer delayCount) {        this.delayCount = delayCount;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/QueueElement.java", "stars": "23", "class": {"name": "QueueElement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        canvas.save();        canvas.translate(100, 100);        // MITER \u503c\uff1a1        paint.setStrokeMiter(1);        canvas.drawPath(path, paint);        canvas.translate(300, 0);        // MITER \u503c\uff1a2        paint.setStrokeMiter(2);        canvas.drawPath(path, paint);        canvas.translate(300, 0);        // MITER \u503c\uff1a5        paint.setStrokeMiter(5);        canvas.drawPath(path, paint);        canvas.restore();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson2/Practice11StrokeMiterView.java", "stars": "2", "class": {"name": "Practice11StrokeMiterView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "createSecurityContext", "params": ["WithUnauthenticatedMockUser"], "throws": null, "modifiers": ["public"], "return_type": "SecurityContext", "snippet": "        public SecurityContext createSecurityContext(WithUnauthenticatedMockUser annotation) {            return SecurityContextHolder.createEmptyContext();        }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/WithUnauthenticatedMockUser.java", "stars": "2", "class": {"name": "Factory", "extends": null, "implements": ["WithSecurityContextFactory"], "modifiers": []}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void init(Context context) {        if (getActivityContext() != null) {            this.mContext = getActivityContext();        } else {            this.mContext = context;        }        initInflate(mContext);        mTextureViewContainer = (ViewGroup) findViewById(R.id.surface_container);        mStartButton = findViewById(R.id.start);        if (isInEditMode())            return;        mScreenWidth = getActivityContext().getResources().getDisplayMetrics().widthPixels;        mScreenHeight = getActivityContext().getResources().getDisplayMetrics().heightPixels;        mAudioManager = (AudioManager) getActivityContext().getApplicationContext().getSystemService(Context.AUDIO_SERVICE);        mStartButton = findViewById(com.shuyu.gsyvideoplayer.R.id.start);        mStartButton.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                clickStartIcon();            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/FloatingVideo.java", "stars": "2", "class": {"name": "FloatingVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLayoutId() {        return R.layout.layout_floating_video;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/FloatingVideo.java", "stars": "2", "class": {"name": "FloatingVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "startPrepare", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void startPrepare() {        if (getGSYVideoManager().listener() != null) {            getGSYVideoManager().listener().onCompletion();        }        getGSYVideoManager().setListener(this);        getGSYVideoManager().setPlayTag(mPlayTag);        getGSYVideoManager().setPlayPosition(mPlayPosition);        mAudioManager.requestAudioFocus(onAudioFocusChangeListener, AudioManager.STREAM_MUSIC, AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);        //((Activity) getActivityContext()).getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        mBackUpPlayingBufferState = -1;        getGSYVideoManager().prepare(mUrl, mMapHeadData, mLooping, mSpeed, mCache, mCachePath, null);        setStateAndUi(CURRENT_STATE_PREPAREING);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/FloatingVideo.java", "stars": "2", "class": {"name": "FloatingVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAutoCompletion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAutoCompletion() {        setStateAndUi(CURRENT_STATE_AUTO_COMPLETE);        mSaveChangeViewTIme = 0;        if (mTextureViewContainer.getChildCount() > 0) {            mTextureViewContainer.removeAllViews();        }        if (!mIfCurrentIsFullscreen)            getGSYVideoManager().setLastListener(null);        mAudioManager.abandonAudioFocus(onAudioFocusChangeListener);        //((Activity) getActivityContext()).getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        releaseNetWorkState();        if (mVideoAllCallBack != null && isCurrentMediaListener()) {            Debuger.printfLog(\"onAutoComplete\");            mVideoAllCallBack.onAutoComplete(mOriginUrl, mTitle, this);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/FloatingVideo.java", "stars": "2", "class": {"name": "FloatingVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCompletion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCompletion() {        //make me normal first        setStateAndUi(CURRENT_STATE_NORMAL);        mSaveChangeViewTIme = 0;        if (mTextureViewContainer.getChildCount() > 0) {            mTextureViewContainer.removeAllViews();        }        if (!mIfCurrentIsFullscreen) {            getGSYVideoManager().setListener(null);            getGSYVideoManager().setLastListener(null);        }        getGSYVideoManager().setCurrentVideoHeight(0);        getGSYVideoManager().setCurrentVideoWidth(0);        mAudioManager.abandonAudioFocus(onAudioFocusChangeListener);        //((Activity) getActivityContext()).getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        releaseNetWorkState();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/FloatingVideo.java", "stars": "2", "class": {"name": "FloatingVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getActivityContext", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Context", "snippet": "    protected Context getActivityContext() {        return getContext();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/FloatingVideo.java", "stars": "2", "class": {"name": "FloatingVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "isShowNetConfirm", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isShowNetConfirm() {        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/FloatingVideo.java", "stars": "2", "class": {"name": "FloatingVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "showWifiDialog", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void showWifiDialog() {        if (!NetworkUtils.isAvailable(mContext)) {            //Toast.makeText(mContext, getResources().getString(R.string.no_net), Toast.LENGTH_LONG).show();            startPlayLogic();            return;        }        AlertDialog.Builder builder = new AlertDialog.Builder(getActivityContext());        builder.setMessage(getResources().getString(com.shuyu.gsyvideoplayer.R.string.tips_not_wifi));        builder.setPositiveButton(getResources().getString(com.shuyu.gsyvideoplayer.R.string.tips_not_wifi_confirm), new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();                startPlayLogic();            }        });        builder.setNegativeButton(getResources().getString(com.shuyu.gsyvideoplayer.R.string.tips_not_wifi_cancel), new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();            }        });        AlertDialog alertDialog =  builder.create();        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            alertDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY);        } else {            alertDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);        }        alertDialog.show();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/FloatingVideo.java", "stars": "2", "class": {"name": "FloatingVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataStatsCountry", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<DataStats>", "snippet": "    public List<DataStats> getDataStatsCountry() {        return DataStatsCountry;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/GlobalVar.java", "stars": "2", "class": {"name": "GlobalVar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataStatsCountry", "params": ["List<DataStats>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataStatsCountry(List<DataStats> dataStatsCountry) {        DataStatsCountry = dataStatsCountry;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/GlobalVar.java", "stars": "2", "class": {"name": "GlobalVar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "GlobalVar", "snippet": "    public static GlobalVar getInstance() {        return instance;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/GlobalVar.java", "stars": "2", "class": {"name": "GlobalVar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setInstance", "params": ["GlobalVar"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setInstance(GlobalVar instance) {        GlobalVar.instance = instance;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/GlobalVar.java", "stars": "2", "class": {"name": "GlobalVar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataStatsSummary", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<DataStats>", "snippet": "    public List<DataStats> getDataStatsSummary() {        return DataStatsSummary;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/GlobalVar.java", "stars": "2", "class": {"name": "GlobalVar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataStatsSummary", "params": ["List<DataStats>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataStatsSummary(List<DataStats> dataStatsSummary) {        DataStatsSummary = dataStatsSummary;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/GlobalVar.java", "stars": "2", "class": {"name": "GlobalVar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataStatsGlobal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DataStats", "snippet": "    public DataStats getDataStatsGlobal() {        return DataStatsGlobal;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/GlobalVar.java", "stars": "2", "class": {"name": "GlobalVar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataStatsGlobal", "params": ["DataStats"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataStatsGlobal(DataStats dataStatsGlobal) {        DataStatsGlobal = dataStatsGlobal;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/GlobalVar.java", "stars": "2", "class": {"name": "GlobalVar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutStatisticHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLayoutStatisticHeight() {        return layoutStatisticHeight;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/GlobalVar.java", "stars": "2", "class": {"name": "GlobalVar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLayoutStatisticHeight", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLayoutStatisticHeight(int layoutStatisticHeight) {        this.layoutStatisticHeight = layoutStatisticHeight;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/GlobalVar.java", "stars": "2", "class": {"name": "GlobalVar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProviderType", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "int", "snippet": "    public abstract int getProviderType();    @Override    public int describeContents() {        return 0;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/models/Media.java", "stars": "4", "class": {"name": "Media", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "abstract"]}}, {"method_name": "describeContents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int describeContents() {        return 0;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/models/Media.java", "stars": "4", "class": {"name": "Media", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "abstract"]}}, {"method_name": "writeToParcel", "params": ["Parcel", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void writeToParcel(Parcel dest, int flags) {        dest.writeString(videoId);        dest.writeString(imdbId);        dest.writeString(title);        dest.writeString(year);        dest.writeString(genre);        dest.writeString(rating);        dest.writeInt(isMovie ? 1 : 2);        dest.writeString(image);        dest.writeString(fullImage);        dest.writeString(headerImage);        dest.writeInt(color);        if (subtitles != null) {            dest.writeInt(subtitles.size());            for (Map.Entry<String, String> entry : subtitles.entrySet()) {                dest.writeString(entry.getKey());                dest.writeString(entry.getValue());            }        } else {            dest.writeInt(0);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/models/Media.java", "stars": "4", "class": {"name": "Media", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "abstract"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return String.format(Locale.US,\"{\\nVideo ID: %s\\n\" +                        \"imdbID: %s\\n\" +                        \"title: %s\\n\" +                        \"Year: %s\\n\" +                        \"Genre: %s\\n\" +                        \"Rating: %s\\n\" +                        \"Is Movie: %s\\n\" +                        \"Image: %s\\n\" +                        \"Full Image: %s\\n\" +                        \"Header Image: %s\\n\" +                        \"Subtitles: %s\\n\" +                        \"Color: %d\\n}\",         videoId,         imdbId,         title,         year,         genre,         rating,         isMovie,         image,         fullImage,         headerImage,         subtitles,         color);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/models/Media.java", "stars": "4", "class": {"name": "Media", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getUrl() {            return url;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/models/Media.java", "stars": "4", "class": {"name": "Torrent", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "static"]}}, {"method_name": "setUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setUrl(String url) {            this.url = url;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/models/Media.java", "stars": "4", "class": {"name": "Torrent", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "static"]}}, {"method_name": "getSeeds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "        public Integer getSeeds() {            return seeds;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/models/Media.java", "stars": "4", "class": {"name": "Torrent", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "static"]}}, {"method_name": "setSeeds", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setSeeds(Integer seeds) {            this.seeds = seeds;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/models/Media.java", "stars": "4", "class": {"name": "Torrent", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "static"]}}, {"method_name": "getPeers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "        public Integer getPeers() {            return peers;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/models/Media.java", "stars": "4", "class": {"name": "Torrent", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "static"]}}, {"method_name": "setPeers", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setPeers(Integer peers) {            this.peers = peers;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/models/Media.java", "stars": "4", "class": {"name": "Torrent", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "static"]}}, {"method_name": "getHash", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getHash() {            return hash;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/models/Media.java", "stars": "4", "class": {"name": "Torrent", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "static"]}}, {"method_name": "setHash", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setHash(String hash) {            this.hash = hash;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/models/Media.java", "stars": "4", "class": {"name": "Torrent", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "static"]}}, {"method_name": "describeContents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int describeContents() {            return 0;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/models/Media.java", "stars": "4", "class": {"name": "Torrent", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "static"]}}, {"method_name": "writeToParcel", "params": ["Parcel", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void writeToParcel(Parcel dest, int flags) {            dest.writeString(url);            dest.writeInt(seeds);            dest.writeInt(peers);            dest.writeString(hash);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/models/Media.java", "stars": "4", "class": {"name": "Torrent", "extends": null, "implements": ["Parcelable"], "modifiers": ["public", "static"]}}, {"method_name": "onPacket", "params": ["PacketEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPacket(PacketEvent event) {        if (event.getType().equals(PacketEvent.Type.OUTGOING)) {            if (sprint && event.getPacket() instanceof CPacketEntityAction) {                final CPacketEntityAction packet = (CPacketEntityAction) event.getPacket();                if (packet.getAction() == CPacketEntityAction.Action.START_SPRINTING || packet.getAction() == CPacketEntityAction.Action.STOP_SPRINTING) {                    event.setCancelled(true);                }            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/player/AntiHunger.java", "stars": "12", "class": {"name": "AntiHunger", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUpdate", "params": ["UpdateEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpdate(UpdateEvent event) {        if (Mercury.INSTANCE.getModuleManager().find(Flight.class).isEnabled() && (Flight.mode.equalsIgnoreCase(\"packet\") || Flight.mode.equalsIgnoreCase(\"packet2\")))            return;        event.getLocation().setOnGround(false);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/player/AntiHunger.java", "stars": "12", "class": {"name": "AntiHunger", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "newThread", "params": ["Runnable"], "throws": null, "modifiers": ["public"], "return_type": "Thread", "snippet": "  public Thread newThread(Runnable runnable) {    return new Thread(runnable, prefix + \"thread-\" + threadNumber.intValue());  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/MonitorThreadFactory.java", "stars": "3", "class": {"name": "MonitorThreadFactory", "extends": null, "implements": ["ThreadFactory"], "modifiers": ["public"]}}, {"method_name": "createActiveCode", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String createActiveCode() {\t\treturn UUID.randomUUID().toString();\t}", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/utils/ActiveCodeUtils.java", "stars": "10", "class": {"name": "ActiveCodeUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "display", "params": ["Bitmap", "ImageView", "LoadedFrom"], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "\tpublic Bitmap display(Bitmap bitmap, ImageView imageView, LoadedFrom loadedFrom) {\t\t// Do nothing\t\treturn bitmap;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/display/FakeBitmapDisplayer.java", "stars": "74", "class": {"name": "FakeBitmapDisplayer", "extends": null, "implements": ["BitmapDisplayer"], "modifiers": ["public", "final"]}}, {"method_name": "load_jr100", "params": ["MemorySystem"], "throws": null, "modifiers": ["public"], "return_type": "Program", "snippet": "    public Program load_jr100(MemorySystem ms) {        Program p = new Program(ms);        p.setName(\"\");        p.setBasicArea(false);        try (BufferedReader r = new BufferedReader(new FileReader(file))) {            String line;            String prev_line;            int addr = 0;            boolean file_head = true;            int start_addr = 0;            StringTokenizer tokens;            LineState state;            int checksum;            state = LineState.HEAD;            prev_line = null;            while ((line = r.readLine()) != null) {                if (state != LineState.HEAD && state != LineState.VALUE) {                    setErrorStatus(STATUS_INVALID_FORMAT, \"\u4e0d\u6b63\u306a\u884c\u3067\u3059\u3002\" + prev_line);                    return p;                }                tokens = new StringTokenizer(line);                if (tokens.countTokens() == 0) {                    continue;                }                state = LineState.ADDR;                checksum = 0;                while (tokens.hasMoreTokens()) {                    String t = tokens.nextToken();                    byte value;                    try {                        switch (state) {                        case ADDR:                            if (t.equals(\"#\")) {                                while (tokens.hasMoreTokens()) {                                    tokens.nextToken();                                }                                state = LineState.HEAD;                            }                            else if (t.equals(\":\")) {                                setErrorStatus(STATUS_NO_ADDRESS, \"\u30a2\u30c9\u30ec\u30b9\u304c\u3042\u308a\u307e\u305b\u3093\u3002\");                                return p;                            }                            else {                                if (file_head) {                                    addr = (Integer.parseInt(t, 16) & 0xffff);                                    start_addr = addr;                                    file_head = false;                                }                                else {                                    int prev_addr = addr - 1;                                    addr = (Integer.parseInt(t, 16) & 0xffff);                                    if (addr - prev_addr > 1) {                                        p.addAddressRegion(start_addr, prev_addr);                                        start_addr = addr;                                    }                                }                                state = LineState.VALUE;                            }                            break;                        case VALUE:                            if (t.equals(\"#\")) {                                while (tokens.hasMoreTokens()) {                                    ;                                }                                state = LineState.HEAD;                            }                            else if (t.equals(\":\")) {                                state = LineState.CHECKSUM;                            }                            else {                                value = (byte)(Integer.parseInt(t, 16) & 0xff);                                ms.store8(addr, value);                                checksum += (value & 0xff);                                addr = ((addr + 1) & 0xffff);                            }                            break;                        case CHECKSUM:                            if (t.equals(\"#\")) {                                setErrorStatus(STATUS_INVALID_FORMAT, \"\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u304c\u3042\u308a\u307e\u305b\u3093\u3002\");                                return p;                            }                            else if (t.equals(\":\")) {                                setErrorStatus(STATUS_INVALID_FORMAT, \"\u4e0d\u6b63\u306a\u6587\u5b57\u304c\u3042\u308a\u307e\u3059\u3002\");                                return p;                            }                            else {                                if ((checksum & 0xff) != (Integer.parseInt(t, 16) & 0xff)) {                                    String s = String.format(\"\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u30a8\u30e9\u30fc(%02X)\\n\", (checksum & 0xff));                                    setErrorStatus(STATUS_CHECK_SUM_ERROR, s + line);                                    return p;                                }                                checksum = 0;                                state = LineState.HEAD;                            }                            break;                        default:                            throw new AssertionError(\"invalid state\");                        }                    }                    catch (NumberFormatException e) {                        setErrorStatus(STATUS_INVALID_FORMAT, \"\u6570\u5024\u304c\u4e0d\u6b63\u3067\u3059\u3002: \" + t);                        return p;                    }                }                prev_line = line;            }            if (state != LineState.HEAD && state != LineState.VALUE) {                setErrorStatus(STATUS_INVALID_FORMAT, \"\u4e0d\u6b63\u306a\u884c\u3067\u3059\u3002\\n\" + prev_line);                return p;            }            if (!file_head && addr > start_addr) {                p.addAddressRegion(start_addr, addr - 1);            }        }        catch (FileNotFoundException e) {            setErrorStatus(STATUS_FILE_NOT_FOUND, e.getMessage());            return p;        }        catch (IOException e) {            setErrorStatus(STATUS_IO_ERROR, e.getMessage());            return p;        }        setErrorStatus(STATUS_SUCCESS, null);        return p;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/BinaryTextFormatFile.java", "stars": "4", "class": {"name": "BinaryTextFormatFile", "extends": "TextFormatFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "dumpRegion", "params": ["PrintStream", "MemorySystem", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void dumpRegion(PrintStream s, MemorySystem ms, int start, int end) {        int sum = 0;        if (start % 16 != 0) {            s.printf(\"%04X \", start);        }        for (int a = start; a <= end; a++) {            if (a % 16 == 0) {                s.printf(\"%04X \", a);            }            int value = (ms.load8(a) & 0xff);            s.printf(\"%02X \", value);            sum += value;            if (a % 16 == 15) {                s.printf(\": %02X\", (sum & 0xff));                s.println();                sum = 0;            }        }        if (end % 16 != 15) {            s.printf(\": %02X\", (sum & 0xff));            s.println();        }        s.printf(\"\\n\");    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/BinaryTextFormatFile.java", "stars": "4", "class": {"name": "BinaryTextFormatFile", "extends": "TextFormatFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "save_jr100", "params": ["Program", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void save_jr100(Program p, int version) {        MemorySystem ms = p.getMemorySystem();        ArrayList<AddressRegion> regions = p.getAllAddressRegions();        try (PrintStream s = new PrintStream(file)) {            if (p.hasBasicArea()) {                dumpRegion(s, ms, JR100.ADDRESS_START_OF_BASIC_PROGRAM, ms.load16(JR100.WORKAREA_END_OF_BASIC_PROGRAM));            }            for (AddressRegion r : regions) {                dumpRegion(s, ms, r.getStartAddress(), r.getEndAddress());            }        }        catch (FileNotFoundException e) {            setErrorStatus(STATUS_FILE_NOT_FOUND, e.getMessage());            return;        }        setErrorStatus(STATUS_SUCCESS, null);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/BinaryTextFormatFile.java", "stars": "4", "class": {"name": "BinaryTextFormatFile", "extends": "TextFormatFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "scriptsSucceeded", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int scriptsSucceeded() {    return scriptsTotal - scriptsFailed;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/StubReload.java", "stars": "8", "class": {"name": "StubReload", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "mappingsSucceeded", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int mappingsSucceeded() {    return mappingsTotal - mappingsFailed;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/StubReload.java", "stars": "8", "class": {"name": "StubReload", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "scriptsPercent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String scriptsPercent() {    return formatPercent((double) (scriptsSucceeded()) / ((double) scriptsTotal));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/StubReload.java", "stars": "8", "class": {"name": "StubReload", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "mappingsPercent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String mappingsPercent() {    return formatPercent((double) (mappingsSucceeded()) / ((double) mappingsTotal));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/StubReload.java", "stars": "8", "class": {"name": "StubReload", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "formatPercent", "params": ["double"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String formatPercent(double value) {    return NumberFormat.getPercentInstance(Locale.US).format(value);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/StubReload.java", "stars": "8", "class": {"name": "StubReload", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "duration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String duration() {    return DurationFormatUtils.formatDurationHMS(System.currentTimeMillis() - startedAt);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/StubReload.java", "stars": "8", "class": {"name": "StubReload", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "summary", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String summary() {    return String.format(\"AEM Stubs reloaded in %s | Mappings: %s/%s=%s | Scripts: %s/%s=%s\",      duration(),      mappingsSucceeded(), mappingsTotal, mappingsPercent(),      scriptsSucceeded(), scriptsTotal, scriptsPercent()    );  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/StubReload.java", "stars": "8", "class": {"name": "StubReload", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return summary();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/StubReload.java", "stars": "8", "class": {"name": "StubReload", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "apply", "params": ["Project"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void apply(Project project) {\t\tproject.getPlugins().withType(JavaBasePlugin.class, (java) -> configureDependencyManagement(project));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/InternalDependencyManagementPlugin.java", "stars": "47572", "class": {"name": "InternalDependencyManagementPlugin", "extends": null, "implements": ["Plugin"], "modifiers": ["public"]}}, {"method_name": "configureDependencyManagement", "params": ["Project"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void configureDependencyManagement(Project project) {\t\tConfigurationContainer configurations = project.getConfigurations();\t\tConfiguration dependencyManagement = configurations.create(\"internalDependencyManagement\", (configuration) -> {\t\t\tconfiguration.setVisible(false);\t\t\tconfiguration.setCanBeConsumed(false);\t\t\tconfiguration.setCanBeResolved(false);\t\t});\t\tconfigurations.matching((configuration) -> configuration.getName().endsWith(\"Classpath\"))\t\t\t\t.all((configuration) -> configuration.extendsFrom(dependencyManagement));\t\tDependency springBootParent = project.getDependencies().enforcedPlatform(project.getDependencies()\t\t\t\t.project(Collections.singletonMap(\"path\", \":spring-boot-project:spring-boot-parent\")));\t\tdependencyManagement.getDependencies().add(springBootParent);\t\tproject.getPlugins().withType(OptionalDependenciesPlugin.class, (optionalDependencies) -> configurations\t\t\t\t.getByName(OptionalDependenciesPlugin.OPTIONAL_CONFIGURATION_NAME).extendsFrom(dependencyManagement));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/InternalDependencyManagementPlugin.java", "stars": "47572", "class": {"name": "InternalDependencyManagementPlugin", "extends": null, "implements": ["Plugin"], "modifiers": ["public"]}}, {"method_name": "initReceiverTimes", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initReceiverTimes(){        todayStartTime = DateFormatUtils.format(new Date(), \"yyyy-MM-dd 00:00:00\");        todayEndTime = DateFormatUtils.format(new Date(), \"yyyy-MM-dd 23:59:59\");        allStartTime = DateFormatUtils.format(new Date(), \"10000-01-01  00:00:00\");        allEndTime = DateFormatUtils.format(new Date(), \"9999-12-31  23:59:59\");        nowStartTime = DateFormatUtils.format(new Date(), \"yyyy-MM-dd HH:mm:ss\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/eventcheck/DefaultEventcheckReceiver.java", "stars": "18", "class": {"name": "DefaultEventcheckReceiver", "extends": "AbstractEventCheckReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "reciveMsg", "params": ["int", "Properties", "Logger"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean reciveMsg(int jobId, Properties props, Logger log) {        Long startTime = System.currentTimeMillis();        Long currentTime = startTime;        Double doubleWaitTime = Double.valueOf(waitTime) * 3600 * 1000;        Long waitTime = Long.valueOf(doubleWaitTime.longValue());        int queryFrequency = Integer.valueOf(query_frequency);        if(wait_for_time!=null && props.containsKey(EventChecker.WAIT_FOR_TIME)){            waitForTime(log,waitTime);        }        log.info(\"-------------------------------------- waiting time(unit\uff1amillisecond) : \" + waitTime);        log.info(\"-------------------------------------- Number of query frequency in waiting time  : \" + queryFrequency);        Long sleepTime = waitTime / queryFrequency;        if(sleepTime < 60000L){            log.info(\"your setting is less than the minimum polling time(60s), the system will automatically set it to 60s\");            sleepTime = 60000L;        }        boolean result = false;        while ((currentTime - startTime) <= waitTime) {            boolean flag = false;            try{                //step1                //\u8fd9\u91cc\u8ba9\u7ebf\u7a0b\u968f\u673a\u4f11\u77200\u52301\u79d2\uff0c\u9632\u6b62\u591a\u4e2areceiver\u5728\u540c\u4e00\u65f6\u523b\u91cd\u590d\u66f4\u65b0event_status;                Thread.sleep(new Random().nextInt(1000));                String lastMsgId = getOffset(jobId,props,log);                String[] executeType = createExecuteType(jobId,props,log,lastMsgId);                if(executeType!=null && executeType.length ==3){                    //step2                    String[] consumedMsgInfo = getMsg(props, log,executeType);                    if(consumedMsgInfo!=null && consumedMsgInfo.length == 4){                        //step3                        flag = updateMsgOffset(jobId,props,log,consumedMsgInfo,lastMsgId);                    }else if (trigger_time != null && !\"\".equals(trigger_time.trim())){                        flag = autoTrigger(log,props);                    }                }else{                    log.error(\"executeType error {} \" + Arrays.toString(executeType));                    return result;                }                int i = 1 ;                String azkabanPid = \"0\";                while(i < 5){                    azkabanPid = ShellUtils.getPPid(ShellUtils.getPid());                    if(\"1\".equals(azkabanPid)){                        i++;                        Thread.sleep(new Random().nextInt(1000));                    }else{                        break;                    }                }                if (\"1\".equals(azkabanPid)) {                    throw new RuntimeException(\"Azkaban-exec has been terminated\uff01\");                }            }catch (Exception e){                log.error(\"EventChecker failed to receive the message {}\" + e);                return result;            }            if (flag) {                result = flag;                break;            }            try {                Thread.sleep(sleepTime);            } catch (InterruptedException e) {                throw new RuntimeException(\"An exception occurred in the waiting for rotation training\uff01\" + e);            }            currentTime = System.currentTimeMillis();        }        if (!result) {            throw new RuntimeException(\"EventChecker receives the message timeout\uff01\");        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/eventcheck/DefaultEventcheckReceiver.java", "stars": "18", "class": {"name": "DefaultEventcheckReceiver", "extends": "AbstractEventCheckReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "createExecuteType", "params": ["int", "Properties", "Logger", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String[] createExecuteType(int jobId, Properties props, Logger log,String lastMsgId){        boolean receiveTodayFlag = (null != receiveToday && \"true\".equals(receiveToday.trim().toLowerCase()));        boolean afterSendFlag = (null != afterSend && \"true\".equals(afterSend.trim().toLowerCase()));        String[] executeType = null;        try {            if (\"0\".equals(lastMsgId)){                if(receiveTodayFlag){                    if(afterSendFlag){                        executeType = new String[]{nowStartTime,todayEndTime,\"0\"};                    }else{                        executeType = new String[]{todayStartTime,todayEndTime,\"0\"};                    }                }else{                    if(afterSendFlag){                        executeType = new String[]{nowStartTime,allEndTime,\"0\"};                    }else{                        executeType = new String[]{allStartTime,allEndTime,\"0\"};                    }                }            }else{                if(receiveTodayFlag){                    if(afterSendFlag){                        executeType = new String[]{nowStartTime,todayEndTime,lastMsgId};                    }else{                        executeType = new String[]{todayStartTime,todayEndTime,lastMsgId};                    }                }else{                    if(afterSendFlag){                        executeType = new String[]{nowStartTime,allEndTime,lastMsgId};                    }else{                        executeType = new String[]{allStartTime,allEndTime,lastMsgId};                    }                }            }        }catch(Exception e){            log.error(\"create executeType failed {}\" + e);        }        return executeType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/eventcheck/DefaultEventcheckReceiver.java", "stars": "18", "class": {"name": "DefaultEventcheckReceiver", "extends": "AbstractEventCheckReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "waitForTime", "params": ["Logger", "Long"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void waitForTime(Logger log,Long waitTime){        String waitForTime = wait_for_time;        String formatWaitForTime = DateFormatUtils.format(new Date(),\"yyyy-MM-dd \" + waitForTime + \":00\");        DateFormat fmt =new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");        Date targetWaitTime = null;        try {            targetWaitTime = fmt.parse(formatWaitForTime);        } catch (ParseException e) {            log.error(\"parse date failed {}\" + e);        }        log.info(\"It will success at a specified time: \" + targetWaitTime);        long wt = targetWaitTime.getTime() - System.currentTimeMillis();        if(wt > 0){            //wt must less than wait.time            if(wt <= waitTime){                log.info(\"EventChecker will wait \"+ wt + \" milliseconds before starting execution\");                try {                    Thread.sleep(wt);                } catch (InterruptedException e) {                    throw new RuntimeException(\"EventChecker throws an exception during the waiting time {}\"+e);                }            }else{                throw new RuntimeException(\"The waiting time from Job starttime to wait.for.time\"+ wt +\"(ms) greater than wait.time , unreasonable setting\uff01\");            }        }else{            log.info(\"EventChecker has reached the specified time\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/eventcheck/DefaultEventcheckReceiver.java", "stars": "18", "class": {"name": "DefaultEventcheckReceiver", "extends": "AbstractEventCheckReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "autoTrigger", "params": ["Logger", "Properties"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean autoTrigger(Logger log,Properties props){        String formatTriggerTime = DateFormatUtils.format(new Date(),\"yyyy-MM-dd \" + trigger_time + \":00\");        DateFormat fmt =new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");        Date targetTriggerTime = null;        try {            targetTriggerTime = fmt.parse(formatTriggerTime);        } catch (ParseException e) {            log.error(\"parse date failed {}\" + e);        }        long wt = targetTriggerTime.getTime() - System.currentTimeMillis();        if(wt < 0){            log.info(\"EventChecker has reached the automatic trigger time point:\" + targetTriggerTime);            if (null == trigger_param) {                props.put(EventChecker.MSG, \"NULL\");            } else {                props.put(EventChecker.MSG, trigger_param);            }            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/eventcheck/DefaultEventcheckReceiver.java", "stars": "18", "class": {"name": "DefaultEventcheckReceiver", "extends": "AbstractEventCheckReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSystem.out.println(\"Package's main method execute!\");\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/package_/Package.java", "stars": "2", "class": {"name": "Package", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "openSession", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void openSession(String aConfig) throws Exception {    final String resource = \"org/apache/ibatis/submitted/inline_association_with_dot/ibatis-\" + aConfig + \".xml\";    try (Reader batisConfigReader = Resources.getResourceAsReader(resource)) {      SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(batisConfigReader);      BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),              \"org/apache/ibatis/submitted/inline_association_with_dot/create.sql\");      sqlSession = sqlSessionFactory.openSession();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/inline_association_with_dot/InlineCollectionWithDotTest.java", "stars": "15", "class": {"name": "InlineCollectionWithDotTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "closeSession", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void closeSession() {    if (sqlSession != null) {      sqlSession.close();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/inline_association_with_dot/InlineCollectionWithDotTest.java", "stars": "15", "class": {"name": "InlineCollectionWithDotTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "selectElementValueInContainerUsingInline", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void selectElementValueInContainerUsingInline()  throws Exception {    openSession(\"inline\");    Element myElement = sqlSession.getMapper(ElementMapperUsingInline.class).selectElement();    assertEquals(\"value\", myElement.getElement().getElement().getValue());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/inline_association_with_dot/InlineCollectionWithDotTest.java", "stars": "15", "class": {"name": "InlineCollectionWithDotTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "selectElementValueInContainerUsingSubMap", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void selectElementValueInContainerUsingSubMap() throws Exception {   openSession(\"submap\");   Element myElement = sqlSession.getMapper(ElementMapperUsingSubMap.class).selectElement();   assertEquals(\"value\", myElement.getElement().getElement().getValue());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/inline_association_with_dot/InlineCollectionWithDotTest.java", "stars": "15", "class": {"name": "InlineCollectionWithDotTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "cast", "params": ["Class<?>", "Type", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "Object", "snippet": "    protected Object cast(Class<?> target, Type[] neededGenerics, Object value) {        List<Object> values = new ArrayList<>();        Collection raw = (Collection) value;        for (Object obj : raw) {            values.add(ConfigUtil.smartCast(neededGenerics[0], obj));        }        return values;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/ListTypeConversion.java", "stars": "3", "class": {"name": "ListTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "isApplicable", "params": ["Class<?>", "Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isApplicable(Class<?> target, Object value) {        return target.equals(List.class) && value instanceof Collection;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/ListTypeConversion.java", "stars": "3", "class": {"name": "ListTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "getParametersRequired", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getParametersRequired() {        return 1;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/ListTypeConversion.java", "stars": "3", "class": {"name": "ListTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "onJoin", "params": ["PlayerJoinEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onJoin(PlayerJoinEvent event) {        executorService.execute(() -> {            Player player = event.getPlayer();            UUID uniqueId = player.getUniqueId();            VipPlayer vipPlayer = vipPlayerRepository.find(uniqueId);            if (vipPlayer == null) vipPlayer = new VipPlayer(uniqueId);            vipPlayerCache.insert(uniqueId, vipPlayer);        });    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/listener/TrafficListener.java", "stars": "2", "class": {"name": "TrafficListener", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "onQuit", "params": ["PlayerQuitEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onQuit(PlayerQuitEvent event) {        executorService.execute(() -> {            Player player = event.getPlayer();            UUID uniqueId = player.getUniqueId();            VipPlayer vipPlayer = vipPlayerCache.find(uniqueId);            vipPlayerRepository.insert(uniqueId, vipPlayer);            vipPlayerCache.delete(uniqueId);        });    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/listener/TrafficListener.java", "stars": "2", "class": {"name": "TrafficListener", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "getExpr", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Expr", "snippet": "\tpublic Expr getExpr() {\t\treturn expr;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmEXPR.java", "stars": "3", "class": {"name": "StmEXPR", "extends": "Stm", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result;\t\tresult = expr.generateCode();\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmEXPR.java", "stars": "3", "class": {"name": "StmEXPR", "extends": "Stm", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn expr.toString();\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmEXPR.java", "stars": "3", "class": {"name": "StmEXPR", "extends": "Stm", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmEXPR.java", "stars": "3", "class": {"name": "StmEXPR", "extends": "Stm", "implements": null, "modifiers": ["public"]}}, {"method_name": "addAllWhenGeneratorsIsNullShouldThrowException", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid addAllWhenGeneratorsIsNullShouldThrowException() {\t\tassertThatIllegalArgumentException().isThrownBy(() -> {\t\t\tList<ExitCodeGenerator> generators = null;\t\t\tnew ExitCodeGenerators().addAll(generators);\t\t}).withMessageContaining(\"Generators must not be null\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ExitCodeGeneratorsTests.java", "stars": "47572", "class": {"name": "ExitCodeGeneratorsTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "addWhenGeneratorIsNullShouldThrowException", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid addWhenGeneratorIsNullShouldThrowException() {\t\tassertThatIllegalArgumentException().isThrownBy(() -> new ExitCodeGenerators().add(null))\t\t\t\t.withMessageContaining(\"Generator must not be null\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ExitCodeGeneratorsTests.java", "stars": "47572", "class": {"name": "ExitCodeGeneratorsTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getExitCodeWhenNoGeneratorsShouldReturnZero", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid getExitCodeWhenNoGeneratorsShouldReturnZero() {\t\tassertThat(new ExitCodeGenerators().getExitCode()).isEqualTo(0);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ExitCodeGeneratorsTests.java", "stars": "47572", "class": {"name": "ExitCodeGeneratorsTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getExitCodeWhenGeneratorThrowsShouldReturnOne", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid getExitCodeWhenGeneratorThrowsShouldReturnOne() {\t\tExitCodeGenerator generator = mock(ExitCodeGenerator.class);\t\tgiven(generator.getExitCode()).willThrow(new IllegalStateException());\t\tExitCodeGenerators generators = new ExitCodeGenerators();\t\tgenerators.add(generator);\t\tassertThat(generators.getExitCode()).isEqualTo(1);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ExitCodeGeneratorsTests.java", "stars": "47572", "class": {"name": "ExitCodeGeneratorsTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getExitCodeWhenAllNegativeShouldReturnLowestValue", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid getExitCodeWhenAllNegativeShouldReturnLowestValue() {\t\tExitCodeGenerators generators = new ExitCodeGenerators();\t\tgenerators.add(mockGenerator(-1));\t\tgenerators.add(mockGenerator(-3));\t\tgenerators.add(mockGenerator(-2));\t\tassertThat(generators.getExitCode()).isEqualTo(-3);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ExitCodeGeneratorsTests.java", "stars": "47572", "class": {"name": "ExitCodeGeneratorsTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getExitCodeWhenAllPositiveShouldReturnHighestValue", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid getExitCodeWhenAllPositiveShouldReturnHighestValue() {\t\tExitCodeGenerators generators = new ExitCodeGenerators();\t\tgenerators.add(mockGenerator(1));\t\tgenerators.add(mockGenerator(3));\t\tgenerators.add(mockGenerator(2));\t\tassertThat(generators.getExitCode()).isEqualTo(3);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ExitCodeGeneratorsTests.java", "stars": "47572", "class": {"name": "ExitCodeGeneratorsTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getExitCodeWhenUsingExitCodeExceptionMapperShouldCallMapper", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid getExitCodeWhenUsingExitCodeExceptionMapperShouldCallMapper() {\t\tExitCodeGenerators generators = new ExitCodeGenerators();\t\tException e = new IOException();\t\tgenerators.add(e, mockMapper(IllegalStateException.class, 1));\t\tgenerators.add(e, mockMapper(IOException.class, 2));\t\tgenerators.add(e, mockMapper(UnsupportedOperationException.class, 3));\t\tassertThat(generators.getExitCode()).isEqualTo(2);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ExitCodeGeneratorsTests.java", "stars": "47572", "class": {"name": "ExitCodeGeneratorsTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "mockGenerator", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "ExitCodeGenerator", "snippet": "\tprivate ExitCodeGenerator mockGenerator(int exitCode) {\t\tExitCodeGenerator generator = mock(ExitCodeGenerator.class);\t\tgiven(generator.getExitCode()).willReturn(exitCode);\t\treturn generator;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ExitCodeGeneratorsTests.java", "stars": "47572", "class": {"name": "ExitCodeGeneratorsTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "mockMapper", "params": ["Class<?>", "int"], "throws": null, "modifiers": ["private"], "return_type": "ExitCodeExceptionMapper", "snippet": "\tprivate ExitCodeExceptionMapper mockMapper(Class<?> exceptionType, int exitCode) {\t\treturn (exception) -> {\t\t\tif (exceptionType.isInstance(exception)) {\t\t\t\treturn exitCode;\t\t\t}\t\t\treturn 0;\t\t};\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ExitCodeGeneratorsTests.java", "stars": "47572", "class": {"name": "ExitCodeGeneratorsTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_third);    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/app/src/main/java/com/wkp/pageeventdemo/ThirdActivity.java", "stars": "1", "class": {"name": "ThirdActivity", "extends": "EventAppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initPageStickEvent", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean initPageStickEvent() {        addPageStickEvent(MainActivity.class);        return true;    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/app/src/main/java/com/wkp/pageeventdemo/ThirdActivity.java", "stars": "1", "class": {"name": "ThirdActivity", "extends": "EventAppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStickEvent", "params": ["Event"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onStickEvent(@NonNull Event event) {        int eventType = event.getEventType();        Bundle eventParams = event.getEventParams();        if (eventType == Constants.STICK_EVENT_FIRST) {            String string = eventParams.getString(Constants.STICK_EVENT_PARAM_FIRST);            Toast.makeText(this, string, Toast.LENGTH_SHORT).show();            return true;        } else if (eventType == Constants.STICK_EVENT_SECOND) {            String string = eventParams.getString(Constants.STICK_EVENT_PARAM_SECOND);            Toast.makeText(this, string, Toast.LENGTH_SHORT).show();        }        return super.onStickEvent(event);    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/app/src/main/java/com/wkp/pageeventdemo/ThirdActivity.java", "stars": "1", "class": {"name": "ThirdActivity", "extends": "EventAppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "startSecond", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startSecond(View view) {        startActivity(new Intent(this, SecondActivity.class));    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/app/src/main/java/com/wkp/pageeventdemo/ThirdActivity.java", "stars": "1", "class": {"name": "ThirdActivity", "extends": "EventAppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getUuid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUuid() {        return uuid;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setUuid", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUuid(String uuid) {        this.uuid = uuid;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getRole", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRole() {        return role;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setRole", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRole(String role) {        this.role = role;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getEmail", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEmail() {        return email;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setEmail", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEmail(String email) {        this.email = email;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPassword() {        return password;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPassword(String password) {        this.password = password;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getFirstName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFirstName() {        return firstName;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setFirstName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFirstName(String firstName) {        this.firstName = firstName;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getLastName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLastName() {        return lastName;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setLastName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLastName(String lastName) {        this.lastName = lastName;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getMobilePhone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMobilePhone() {        return mobilePhone;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setMobilePhone", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMobilePhone(String mobilePhone) {        this.mobilePhone = mobilePhone;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getLastLoginAt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ZonedDateTime", "snippet": "    public ZonedDateTime getLastLoginAt() {        return lastLoginAt;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setLastLoginAt", "params": ["ZonedDateTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLastLoginAt(ZonedDateTime lastLoginAt) {        this.lastLoginAt = lastLoginAt;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getSalt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSalt() {        return salt;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setSalt", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSalt(String salt) {        this.salt = salt;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object obj) {        return new EqualsBuilder().append(this, obj).isEquals();    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        return new HashCodeBuilder().append(this).hashCode();    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return ToStringBuilder.reflectionToString(this, ToStringStyle.MULTI_LINE_STYLE);    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/UserEntity.java", "stars": "2", "class": {"name": "UserEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    Configuration configuration = new Configuration();    Environment environment = new Environment(\"development\", new JdbcTransactionFactory(),        PgContainer.getUnpooledDataSource());    configuration.setEnvironment(environment);    configuration.addMapper(InsertMapper.class);    sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),        \"org/apache/ibatis/submitted/keycolumn/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keycolumn/InsertTest.java", "stars": "15", "class": {"name": "InsertTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testInsertAnnotated", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testInsertAnnotated() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      InsertMapper mapper = sqlSession.getMapper(InsertMapper.class);      Name name = new Name();      name.setFirstName(\"Fred\");      name.setLastName(\"Flintstone\");      int rows = mapper.insertNameAnnotated(name);      assertNotNull(name.getId());      assertEquals(1, rows);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keycolumn/InsertTest.java", "stars": "15", "class": {"name": "InsertTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testInsertMapped", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testInsertMapped() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      InsertMapper mapper = sqlSession.getMapper(InsertMapper.class);      Name name = new Name();      name.setFirstName(\"Fred\");      name.setLastName(\"Flintstone\");      int rows = mapper.insertNameMapped(name);      assertNotNull(name.getId());      assertEquals(1, rows);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keycolumn/InsertTest.java", "stars": "15", "class": {"name": "InsertTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testInsertMappedBatch", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testInsertMappedBatch() {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) {      InsertMapper mapper = sqlSession.getMapper(InsertMapper.class);      Name name = new Name();      name.setFirstName(\"Fred\");      name.setLastName(\"Flintstone\");      mapper.insertNameMapped(name);      Name name2 = new Name();      name2.setFirstName(\"Wilma\");      name2.setLastName(\"Flintstone\");      mapper.insertNameMapped(name2);      List<BatchResult> batchResults = sqlSession.flushStatements();      assertNotNull(name.getId());      assertNotNull(name2.getId());      assertEquals(1, batchResults.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keycolumn/InsertTest.java", "stars": "15", "class": {"name": "InsertTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getHeight() {        return height;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab3/src/main/java/com/demkom58/lab3/model/Triangle.java", "stars": "2", "class": {"name": "Triangle", "extends": "AbstractForm", "implements": null, "modifiers": ["public"]}}, {"method_name": "setHeight", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHeight(float height) {        this.height = height;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab3/src/main/java/com/demkom58/lab3/model/Triangle.java", "stars": "2", "class": {"name": "Triangle", "extends": "AbstractForm", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSide", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getSide() {        return side;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab3/src/main/java/com/demkom58/lab3/model/Triangle.java", "stars": "2", "class": {"name": "Triangle", "extends": "AbstractForm", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSide", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSide(float side) {        this.side = side;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab3/src/main/java/com/demkom58/lab3/model/Triangle.java", "stars": "2", "class": {"name": "Triangle", "extends": "AbstractForm", "implements": null, "modifiers": ["public"]}}, {"method_name": "volume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float volume() {        return (float) ((Math.pow(side, 2) / 4d) * Math.sqrt(3)) * height;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab3/src/main/java/com/demkom58/lab3/model/Triangle.java", "stars": "2", "class": {"name": "Triangle", "extends": "AbstractForm", "implements": null, "modifiers": ["public"]}}, {"method_name": "weight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float weight() {        return volume() * wood.getDensity();    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab3/src/main/java/com/demkom58/lab3/model/Triangle.java", "stars": "2", "class": {"name": "Triangle", "extends": "AbstractForm", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Triangle{\" +                \"wood=\" + getWood() +                \", side=\" + side +                \", height=\" + height +                '}';    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab3/src/main/java/com/demkom58/lab3/model/Triangle.java", "stars": "2", "class": {"name": "Triangle", "extends": "AbstractForm", "implements": null, "modifiers": ["public"]}}, {"method_name": "cast", "params": ["Class<?>", "Type", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "Object", "snippet": "    protected Object cast(Class<?> target, Type[] neededGenerics, Object value) {        return value.toString();    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/StringTypeConversion.java", "stars": "3", "class": {"name": "StringTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "isApplicable", "params": ["Class<?>", "Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isApplicable(Class<?> target, Object value) {        return String.class.isAssignableFrom(target);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/StringTypeConversion.java", "stars": "3", "class": {"name": "StringTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "getParametersRequired", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getParametersRequired() {        return 0;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/StringTypeConversion.java", "stars": "3", "class": {"name": "StringTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": ["Context", "Map<String,String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "ExoSourceManager", "snippet": "    public static ExoSourceManager newInstance(Context context, @Nullable Map<String, String> mapHeadData) {        return new ExoSourceManager(context, mapHeadData);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMediaSource", "params": ["String", "boolean", "boolean", "boolean", "File", "String"], "throws": null, "modifiers": ["public"], "return_type": "MediaSource", "snippet": "    public MediaSource getMediaSource(String dataSource, boolean preview, boolean cacheEnable, boolean isLooping, File cacheDir, @Nullable String overrideExtension) {        MediaSource mediaSource = null;        if (sExoMediaSourceInterceptListener != null) {            mediaSource = sExoMediaSourceInterceptListener.getMediaSource(dataSource, preview, cacheEnable, isLooping, cacheDir);        }        if (mediaSource != null) {            return mediaSource;        }        mDataSource = dataSource;        Uri contentUri = Uri.parse(dataSource);        int contentType = inferContentType(dataSource, overrideExtension);        if (\"android.resource\".equals(contentUri.getScheme())) {            DataSpec dataSpec = new DataSpec(contentUri);            final RawResourceDataSource rawResourceDataSource = new RawResourceDataSource(mAppContext);            try {                rawResourceDataSource.open(dataSpec);            } catch (RawResourceDataSource.RawResourceDataSourceException e) {                e.printStackTrace();            }            DataSource.Factory factory = new DataSource.Factory() {                @Override                public DataSource createDataSource() {                    return rawResourceDataSource;                }            };            return new ProgressiveMediaSource.Factory(                    factory).createMediaSource(contentUri);        }        switch (contentType) {            case C.TYPE_SS:                mediaSource = new SsMediaSource.Factory(                        new DefaultSsChunkSource.Factory(getDataSourceFactoryCache(mAppContext, cacheEnable, preview, cacheDir)),                        new DefaultDataSourceFactory(mAppContext, null,                                getHttpDataSourceFactory(mAppContext, preview))).createMediaSource(contentUri);                break;            case C.TYPE_DASH:                mediaSource = new DashMediaSource.Factory(new DefaultDashChunkSource.Factory(getDataSourceFactoryCache(mAppContext, cacheEnable, preview, cacheDir)),                        new DefaultDataSourceFactory(mAppContext, null,                                getHttpDataSourceFactory(mAppContext, preview))).createMediaSource(contentUri);                break;            case C.TYPE_HLS:                mediaSource = new HlsMediaSource.Factory(getDataSourceFactoryCache(mAppContext, cacheEnable, preview, cacheDir)).createMediaSource(contentUri);                break;            case TYPE_RTMP:                RtmpDataSourceFactory rtmpDataSourceFactory = new RtmpDataSourceFactory(null);                mediaSource = new ProgressiveMediaSource.Factory(rtmpDataSourceFactory,                        new DefaultExtractorsFactory())                        .createMediaSource(contentUri);                break;            case C.TYPE_OTHER:            default:                mediaSource = new ProgressiveMediaSource.Factory(getDataSourceFactoryCache(mAppContext, cacheEnable,                        preview, cacheDir), new DefaultExtractorsFactory())                        .createMediaSource(contentUri);                break;        }        if (isLooping) {            return new LoopingMediaSource(mediaSource);        }        return mediaSource;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setExoMediaSourceInterceptListener", "params": ["ExoMediaSourceInterceptListener"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setExoMediaSourceInterceptListener(ExoMediaSourceInterceptListener exoMediaSourceInterceptListener) {        sExoMediaSourceInterceptListener = exoMediaSourceInterceptListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resetExoMediaSourceInterceptListener", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void resetExoMediaSourceInterceptListener() {        sExoMediaSourceInterceptListener = null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExoMediaSourceInterceptListener", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ExoMediaSourceInterceptListener", "snippet": "    public static ExoMediaSourceInterceptListener getExoMediaSourceInterceptListener() {        return sExoMediaSourceInterceptListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "inferContentType", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int inferContentType(String fileName, @Nullable String overrideExtension) {        fileName = Util.toLowerInvariant(fileName);        if (fileName.startsWith(\"rtmp:\")) {            return TYPE_RTMP;        } else {            return inferContentType(Uri.parse(fileName), overrideExtension);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "inferContentType", "params": ["Uri", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int inferContentType(Uri uri, @Nullable String overrideExtension) {        return Util.inferContentType(uri, overrideExtension);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCacheSingleInstance", "params": ["Context", "File"], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "Cache", "snippet": "    public static synchronized Cache getCacheSingleInstance(Context context, File cacheDir) {        String dirs = context.getCacheDir().getAbsolutePath();        if (cacheDir != null) {            dirs = cacheDir.getAbsolutePath();        }        if (mCache == null) {            String path = dirs + File.separator + \"exo\";            boolean isLocked = SimpleCache.isCacheFolderLocked(new File(path));            if (!isLocked) {                mCache = new SimpleCache(new File(path), new LeastRecentlyUsedCacheEvictor(DEFAULT_MAX_SIZE));            }        }        return mCache;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release() {        isCached = false;        if (mCache != null) {            try {                mCache.release();                mCache = null;            } catch (Exception e) {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clearCache", "params": ["Context", "File", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void clearCache(Context context, File cacheDir, String url) {        try {            Cache cache = getCacheSingleInstance(context, cacheDir);            if (!TextUtils.isEmpty(url)) {                if (cache != null) {                    CacheUtil.remove(cache, CacheUtil.generateKey(Uri.parse(url)));                }            } else {                if (cache != null) {                    for (String key : cache.getKeys()) {                        CacheUtil.remove(cache, key);                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cachePreView", "params": ["Context", "File", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean cachePreView(Context context, File cacheDir, String url) {        return resolveCacheState(getCacheSingleInstance(context, cacheDir), url);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hadCached", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hadCached() {        return isCached;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSkipSSLChain", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isSkipSSLChain() {        return sSkipSSLChain;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSkipSSLChain", "params": ["boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setSkipSSLChain(boolean skipSSLChain) {        sSkipSSLChain = skipSSLChain;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHttpReadTimeout", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getHttpReadTimeout() {        return sHttpReadTimeout;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHttpReadTimeout", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setHttpReadTimeout(int httpReadTimeout) {        ExoSourceManager.sHttpReadTimeout = httpReadTimeout;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHttpConnectTimeout", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getHttpConnectTimeout() {        return sHttpConnectTimeout;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHttpConnectTimeout", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setHttpConnectTimeout(int httpConnectTimeout) {        ExoSourceManager.sHttpConnectTimeout = httpConnectTimeout;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataSourceFactoryCache", "params": ["Context", "boolean", "boolean", "File"], "throws": null, "modifiers": ["private"], "return_type": "DataSource", "snippet": "    private DataSource.Factory getDataSourceFactoryCache(Context context, boolean cacheEnable, boolean preview, File cacheDir) {        if (cacheEnable) {            Cache cache = getCacheSingleInstance(context, cacheDir);            if (cache != null) {                isCached = resolveCacheState(cache, mDataSource);                return new CacheDataSourceFactory(cache, getDataSourceFactory(context, preview), CacheDataSource.FLAG_IGNORE_CACHE_ON_ERROR);            }        }        return getDataSourceFactory(context, preview);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataSourceFactory", "params": ["Context", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "DataSource", "snippet": "    private DataSource.Factory getDataSourceFactory(Context context, boolean preview) {        return new DefaultDataSourceFactory(context, preview ? null : new DefaultBandwidthMeter(),                getHttpDataSourceFactory(context, preview));    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHttpDataSourceFactory", "params": ["Context", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "DataSource", "snippet": "    private DataSource.Factory getHttpDataSourceFactory(Context context, boolean preview) {        int connectTimeout = GSYExoHttpDataSource.DEFAULT_CONNECT_TIMEOUT_MILLIS;        int readTimeout = GSYExoHttpDataSource.DEFAULT_READ_TIMEOUT_MILLIS;        if (sHttpConnectTimeout > 0) {            connectTimeout = sHttpConnectTimeout;        }        if (sHttpReadTimeout > 0) {            readTimeout = sHttpReadTimeout;        }        boolean allowCrossProtocolRedirects = false;        if (mMapHeadData != null && mMapHeadData.size() > 0) {            allowCrossProtocolRedirects = \"true\".equals(mMapHeadData.get(\"allowCrossProtocolRedirects\"));        }        if (sSkipSSLChain) {            GSYExoHttpDataSourceFactory dataSourceFactory = new GSYExoHttpDataSourceFactory(Util.getUserAgent(context,                    TAG), preview ? null : new DefaultBandwidthMeter.Builder(mAppContext).build(),                    connectTimeout,                    readTimeout, allowCrossProtocolRedirects);            if (mMapHeadData != null && mMapHeadData.size() > 0) {                for (Map.Entry<String, String> header : mMapHeadData.entrySet()) {                    dataSourceFactory.getDefaultRequestProperties().set(header.getKey(), header.getValue());                }            }            return dataSourceFactory;        }        DefaultHttpDataSourceFactory dataSourceFactory = new DefaultHttpDataSourceFactory(Util.getUserAgent(context,                TAG), preview ? null : new DefaultBandwidthMeter.Builder(mAppContext).build(),                connectTimeout,                readTimeout, allowCrossProtocolRedirects);        if (mMapHeadData != null && mMapHeadData.size() > 0) {            for (Map.Entry<String, String> header : mMapHeadData.entrySet()) {                dataSourceFactory.getDefaultRequestProperties().set(header.getKey(), header.getValue());            }        }        return dataSourceFactory;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveCacheState", "params": ["Cache", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean resolveCacheState(Cache cache, String url) {        boolean isCache = true;        if (!TextUtils.isEmpty(url)) {            String key = CacheUtil.generateKey(Uri.parse(url));            if (!TextUtils.isEmpty(key)) {                NavigableSet<CacheSpan> cachedSpans = cache.getCachedSpans(key);                if (cachedSpans.size() == 0) {                    isCache = false;                } else {                    long contentLength = cache.getContentMetadata(key).get(ContentMetadata.KEY_CONTENT_LENGTH, C.LENGTH_UNSET);                    long currentLength = 0;                    for (CacheSpan cachedSpan : cachedSpans) {                        currentLength += cache.getCachedLength(key, cachedSpan.position, cachedSpan.length);                    }                    isCache = currentLength >= contentLength;                }            } else {                isCache = false;            }        }        return isCache;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoSourceManager.java", "stars": "2", "class": {"name": "ExoSourceManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loginFtpServer", "params": ["FtpConnParams"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loginFtpServer(FtpConnParams connParams) {        JSch jsch = new JSch();        try {            if(StringUtils.isNotBlank(connParams.getPrvKeyPath())){                jsch.addIdentity(connParams.getPrvKeyPath());            }            this.session = jsch.getSession(connParams.getUsername(), connParams.getHost(),                    connParams.getPort());            if (this.session == null) {                throw DataXException                        .asDataXException(FtpWriterErrorCode.FAIL_LOGIN,                                \"\u521b\u5efaftp\u8fde\u63a5this.session\u5931\u8d25,\u65e0\u6cd5\u901a\u8fc7sftp\u4e0e\u670d\u52a1\u5668\u5efa\u7acb\u94fe\u63a5\uff0c\u8bf7\u68c0\u67e5\u4e3b\u673a\u540d\u548c\u7528\u6237\u540d\u662f\u5426\u6b63\u786e.\");            }            if(StringUtils.isNotBlank(connParams.getPassword())){                this.session.setPassword((String) CryptoUtils.string2Object(connParams.getPassword()));            }            Properties config = new Properties();            config.put(\"StrictHostKeyChecking\", \"no\");            config.put(\"PreferredAuthentications\", \"publickey,password\");            this.session.setConfig(config);            this.session.setTimeout(connParams.getTimeout());            this.session.connect();            this.channelSftp = (ChannelSftp) this.session.openChannel(\"sftp\");            this.channelSftp.connect();        } catch (JSchException | ClassNotFoundException | IOException e) {            if (null != e.getCause()) {                String cause = e.getCause().toString();                String unknownHostException = \"java.net.UnknownHostException: \"                        + connParams.getHost();                String illegalArgumentException = \"java.lang.IllegalArgumentException: port out of range:\"                        + connParams.getPort();                String wrongPort = \"java.net.ConnectException: Connection refused\";                if (unknownHostException.equals(cause)) {                    String message = String                            .format(\"\u8bf7\u786e\u8ba4ftp\u670d\u52a1\u5668\u5730\u5740\u662f\u5426\u6b63\u786e\uff0c\u65e0\u6cd5\u8fde\u63a5\u5230\u5730\u5740\u4e3a: [%s] \u7684ftp\u670d\u52a1\u5668, errorMessage:%s\",                                    connParams.getHost(), e.getMessage());                    LOG.error(message);                    throw DataXException.asDataXException(                            FtpWriterErrorCode.FAIL_LOGIN, message, e);                } else if (illegalArgumentException.equals(cause)                        || wrongPort.equals(cause)) {                    String message = String.format(                            \"\u8bf7\u786e\u8ba4\u8fde\u63a5ftp\u670d\u52a1\u5668\u7aef\u53e3\u662f\u5426\u6b63\u786e\uff0c\u9519\u8bef\u7684\u7aef\u53e3: [%s], errorMessage:%s\",                            connParams.getPort(), e.getMessage());                    LOG.error(message);                    throw DataXException.asDataXException(                            FtpWriterErrorCode.FAIL_LOGIN, message, e);                }else{                    String message = \"cannot login to the sftp server, please check your configuration of connecting\";                    LOG.error(message);                    throw DataXException.asDataXException(FtpWriterErrorCode.FAIL_LOGIN, message, e);                }            } else {                String message = String                        .format(\"\u4e0eftp\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\u5931\u8d25,\u8bf7\u68c0\u67e5\u4e3b\u673a\u3001\u7528\u6237\u540d\u3001\u5bc6\u7801\u662f\u5426\u6b63\u786e, host:%s, port:%s, username:%s, errorMessage:%s\",                                connParams.getHost(), connParams.getPort(), connParams.getUsername(), e.getMessage());                LOG.error(message);                throw DataXException.asDataXException(                        FtpWriterErrorCode.FAIL_LOGIN, message);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/SftpHelperImpl.java", "stars": "23", "class": {"name": "SftpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "logoutFtpServer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void logoutFtpServer() {        if (this.channelSftp != null) {            this.channelSftp.disconnect();            this.channelSftp = null;        }        if (this.session != null) {            this.session.disconnect();            this.session = null;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/SftpHelperImpl.java", "stars": "23", "class": {"name": "SftpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "mkdir", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mkdir(String directoryPath) {        boolean isDirExist = false;        try {            SftpATTRS sftpATTRS = this.channelSftp.lstat(directoryPath);            isDirExist = sftpATTRS.isDir();        } catch (SftpException e) {            if (e.getMessage().toLowerCase().equals(FILE_NOT_EXIST_)) {                LOG.warn(String.format(                        \"\u60a8\u7684\u914d\u7f6e\u9879path:[%s]\u4e0d\u5b58\u5728\uff0c\u5c06\u5c1d\u8bd5\u8fdb\u884c\u76ee\u5f55\u521b\u5efa, errorMessage:%s\",                        directoryPath, e.getMessage()), e);                isDirExist = false;            }        }        if (!isDirExist) {            try {                // warn \u68c0\u67e5mkdir -p                this.channelSftp.mkdir(directoryPath);            } catch (SftpException e) {                String message = String                        .format(\"\u521b\u5efa\u76ee\u5f55:%s\u65f6\u53d1\u751fI/O\u5f02\u5e38,\u8bf7\u786e\u8ba4\u4e0eftp\u670d\u52a1\u5668\u7684\u8fde\u63a5\u6b63\u5e38,\u62e5\u6709\u76ee\u5f55\u521b\u5efa\u6743\u9650, errorMessage:%s\",                                directoryPath, e.getMessage());                LOG.error(message, e);                throw DataXException                        .asDataXException(                                FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION,                                message, e);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/SftpHelperImpl.java", "stars": "23", "class": {"name": "SftpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "mkDirRecursive", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mkDirRecursive(String directoryPath) {        boolean isDirExist = false;        try {            SftpATTRS sftpATTRS = this.channelSftp.lstat(directoryPath);            isDirExist = sftpATTRS.isDir();        } catch (SftpException e) {            if (e.getMessage().toLowerCase().equals(FILE_NOT_EXIST_)) {                LOG.warn(String.format(                        \"\u60a8\u7684\u914d\u7f6e\u9879path:[%s]\u4e0d\u5b58\u5728\uff0c\u5c06\u5c1d\u8bd5\u8fdb\u884c\u76ee\u5f55\u521b\u5efa, errorMessage:%s\",                        directoryPath, e.getMessage()), e);                isDirExist = false;            }        }        if (!isDirExist) {            StringBuilder dirPath = new StringBuilder();            dirPath.append(IOUtils.DIR_SEPARATOR_UNIX);            String[] dirSplit = StringUtils.split(directoryPath, IOUtils.DIR_SEPARATOR_UNIX);            try {                // ftp server\u4e0d\u652f\u6301\u9012\u5f52\u521b\u5efa\u76ee\u5f55,\u53ea\u80fd\u4e00\u7ea7\u4e00\u7ea7\u521b\u5efa                for (String dirName : dirSplit) {                    if(StringUtils.isNotBlank(dirName)) {                        dirPath.append(dirName);                        mkDirSingleHierarchy(dirPath.toString());                        dirPath.append(IOUtils.DIR_SEPARATOR_UNIX);                    }                }            } catch (SftpException e) {                String message = String                        .format(\"\u521b\u5efa\u76ee\u5f55:%s\u65f6\u53d1\u751fI/O\u5f02\u5e38,\u8bf7\u786e\u8ba4\u4e0eftp\u670d\u52a1\u5668\u7684\u8fde\u63a5\u6b63\u5e38,\u62e5\u6709\u76ee\u5f55\u521b\u5efa\u6743\u9650, errorMessage:%s\",                                directoryPath, e.getMessage());                LOG.error(message, e);                throw DataXException                        .asDataXException(                                FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION,                                message, e);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/SftpHelperImpl.java", "stars": "23", "class": {"name": "SftpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "mkDirSingleHierarchy", "params": ["String"], "throws": ["SftpException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean mkDirSingleHierarchy(String directoryPath) throws SftpException {        boolean isDirExist = false;        try {            SftpATTRS sftpATTRS = this.channelSftp.lstat(directoryPath);            isDirExist = sftpATTRS.isDir();        } catch (SftpException e) {            if (!isDirExist) {                LOG.info(String.format(\"\u6b63\u5728\u9010\u7ea7\u521b\u5efa\u76ee\u5f55 [%s]\", directoryPath));                this.channelSftp.mkdir(directoryPath);                return true;            }        }        if (!isDirExist) {            LOG.info(String.format(\"\u6b63\u5728\u9010\u7ea7\u521b\u5efa\u76ee\u5f55 [%s]\", directoryPath));            this.channelSftp.mkdir(directoryPath);        }        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/SftpHelperImpl.java", "stars": "23", "class": {"name": "SftpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "getOutputStream", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "OutputStream", "snippet": "    public OutputStream getOutputStream(String filePath) {        try {            String parentDir = filePath.substring(0,                    StringUtils.lastIndexOf(filePath, IOUtils.DIR_SEPARATOR));            this.channelSftp.cd(parentDir);            this.printWorkingDirectory();            OutputStream writeOutputStream = this.channelSftp.put(filePath,                    ChannelSftp.APPEND);            String message = String.format(                    \"\u6253\u5f00FTP\u6587\u4ef6[%s]\u83b7\u53d6\u5199\u51fa\u6d41\u65f6\u51fa\u9519,\u8bf7\u786e\u8ba4\u6587\u4ef6%s\u6709\u6743\u9650\u521b\u5efa\uff0c\u6709\u6743\u9650\u5199\u51fa\u7b49\", filePath,                    filePath);            if (null == writeOutputStream) {                throw DataXException.asDataXException(                        FtpWriterErrorCode.OPEN_FILE_ERROR, message);            }            return writeOutputStream;        } catch (SftpException e) {            String message = String.format(                    \"\u5199\u51fa\u6587\u4ef6[%s] \u65f6\u51fa\u9519,\u8bf7\u786e\u8ba4\u6587\u4ef6%s\u6709\u6743\u9650\u5199\u51fa, errorMessage:%s\", filePath,                    filePath, e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(                    FtpWriterErrorCode.OPEN_FILE_ERROR, message);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/SftpHelperImpl.java", "stars": "23", "class": {"name": "SftpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "getRemoteFileContent", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRemoteFileContent(String filePath) {        try {            this.completePendingCommand();            this.printWorkingDirectory();            String parentDir = filePath.substring(0,                    StringUtils.lastIndexOf(filePath, IOUtils.DIR_SEPARATOR));            this.channelSftp.cd(parentDir);            this.printWorkingDirectory();            ByteArrayOutputStream outputStream = new ByteArrayOutputStream(22);            this.channelSftp.get(filePath, outputStream);            String result = outputStream.toString();            IOUtils.closeQuietly(outputStream);            return result;        } catch (SftpException e) {            String message = String.format(                    \"\u5199\u51fa\u6587\u4ef6[%s] \u65f6\u51fa\u9519,\u8bf7\u786e\u8ba4\u6587\u4ef6%s\u6709\u6743\u9650\u5199\u51fa, errorMessage:%s\", filePath,                    filePath, e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(                    FtpWriterErrorCode.OPEN_FILE_ERROR, message);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/SftpHelperImpl.java", "stars": "23", "class": {"name": "SftpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "getAllFilesInDir", "params": ["String", "String", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "    public Set<String> getAllFilesInDir(String dir, String prefixFileName, boolean recurse, boolean fullFileName) {        Set<String> allFilesWithPointedPrefix = new HashSet<String>();        try {            @SuppressWarnings(\"rawtypes\")            Vector allFiles = this.channelSftp.ls(dir);            LOG.debug(String.format(\"ls: %s\", JSON.toJSONString(allFiles,                    SerializerFeature.UseSingleQuotes)));            StringBuilder dirBuilder = new StringBuilder(dir);            if(!dirBuilder.toString().endsWith(String.valueOf(IOUtils.DIR_SEPARATOR))){                dirBuilder.append(IOUtils.DIR_SEPARATOR);            }            for (Object allFile : allFiles) {                LsEntry le = (LsEntry) allFile;                String strName = le.getFilename();                if(hasPrefixFileName(strName, prefixFileName)){                    if (\".\".equals(strName) || \"..\".equals(strName)) {                        continue;                    }                    if(fullFileName){                        allFilesWithPointedPrefix.add(dirBuilder.toString() + strName);                    }else{                        allFilesWithPointedPrefix.add(strName);                    }                    if (this.channelSftp.stat(dir + IOUtils.DIR_SEPARATOR + strName).isDir()) {                        if (recurse) {                            String parent = dirBuilder.toString() + strName;                            Set<String> childWithPrefixFiles = getAllFilesInDir(parent, prefixFileName, true, fullFileName);                            for (String childWithPrefixFile : childWithPrefixFiles) {                                if(fullFileName){                                    allFilesWithPointedPrefix.add(parent + IOUtils.DIR_SEPARATOR + childWithPrefixFile);                                }else {                                    allFilesWithPointedPrefix.add(strName + IOUtils.DIR_SEPARATOR + childWithPrefixFile);                                }                            }                        }                    }                }            }        } catch (SftpException e) {            String message = String                    .format(\"\u83b7\u53d6path:[%s] \u4e0b\u6587\u4ef6\u5217\u8868\u65f6\u53d1\u751fI/O\u5f02\u5e38,\u8bf7\u786e\u8ba4\u4e0eftp\u670d\u52a1\u5668\u7684\u8fde\u63a5\u6b63\u5e38,\u62e5\u6709\u76ee\u5f55ls\u6743\u9650, errorMessage:%s\",                            dir, e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(                    FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);        }        return allFilesWithPointedPrefix;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/SftpHelperImpl.java", "stars": "23", "class": {"name": "SftpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "deleteFiles", "params": ["Set<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteFiles(Set<String> filesToDelete) {        String eachFile = null;        try {            for (String each : filesToDelete) {                eachFile = each;                if(!this.channelSftp.stat(each).isDir()) {                    LOG.info(String.format(\"delete file [%s].\", each));                    this.channelSftp.rm(each);                }else{                    Set<String> subFiles = getAllFilesInDir(each, \"\", false, true);                    deleteFiles(subFiles);                    LOG.info(String.format(\"delete empty directory [%s]\", each));                    this.channelSftp.rmdir(each);                }            }        } catch (SftpException e) {            String message = String.format(                    \"\u5220\u9664\u6587\u4ef6:[%s] \u65f6\u53d1\u751f\u5f02\u5e38,\u8bf7\u786e\u8ba4\u6307\u5b9a\u6587\u4ef6\u6709\u5220\u9664\u6743\u9650,\u4ee5\u53ca\u7f51\u7edc\u4ea4\u4e92\u6b63\u5e38, errorMessage:%s\",                    eachFile, e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(                    FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/SftpHelperImpl.java", "stars": "23", "class": {"name": "SftpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "printWorkingDirectory", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void printWorkingDirectory() {        try {            LOG.info(String.format(\"current working directory:%s\",                    this.channelSftp.pwd()));        } catch (Exception e) {            LOG.warn(String.format(\"printWorkingDirectory error:%s\",                    e.getMessage()));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/SftpHelperImpl.java", "stars": "23", "class": {"name": "SftpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "completePendingCommand", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void completePendingCommand() {    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/SftpHelperImpl.java", "stars": "23", "class": {"name": "SftpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "rename", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void rename(String srcPath, String destPath) {        try {            this.channelSftp.rename(srcPath, destPath);        } catch (SftpException e) {            String message = String.format(\"rename srcPath:%s to destPath:%s error, message:%s ,please check your internet connection\",                    srcPath, destPath, e.getMessage());            LOG.error(message);           throw DataXException.asDataXException(FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/SftpHelperImpl.java", "stars": "23", "class": {"name": "SftpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "moveToDirectory", "params": ["List<String>", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void moveToDirectory(List<String> srcPaths, String destDirPath) {        try {            mkdir(destDirPath);            for (String srcPath : srcPaths) {                SftpATTRS sftpATTRS = this.channelSftp.lstat(srcPath);                if(sftpATTRS.isDir()) {                    if(srcPath.endsWith(String.valueOf(IOUtils.DIR_SEPARATOR_UNIX))){                        srcPath = srcPath.substring(0, srcPath.length() - 1);                    }                    Set<String> moveFiles = getAllFilesInDir(srcPath, \"\", false, true);                    moveToDirectory(new ArrayList<>(moveFiles),                            UnstructuredStorageWriterUtil.buildFilePath(destDirPath,                                    srcPath.substring(srcPath.lastIndexOf(IOUtils.DIR_SEPARATOR_UNIX)), \"\"));                }else{                    rename(srcPath, UnstructuredStorageWriterUtil.buildFilePath(destDirPath,                            srcPath.substring(srcPath.lastIndexOf(IOUtils.DIR_SEPARATOR_UNIX)), \"\"));                }            }        }catch(SftpException e){        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/SftpHelperImpl.java", "stars": "23", "class": {"name": "SftpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "isFileExist", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFileExist(String filePath) {        boolean isExitFlag = false;        try{            SftpATTRS sftpATTRS = channelSftp.lstat(filePath);            if(sftpATTRS.getSize() >= 0){                isExitFlag = true;            }        }catch(SftpException e){            if (!FILE_NOT_EXIST_.equals(e.getMessage().toLowerCase())) {                String message = String.format(\"\u83b7\u53d6\u6587\u4ef6\uff1a[%s] \u5c5e\u6027\u65f6\u53d1\u751fI/O\u5f02\u5e38,\u8bf7\u786e\u8ba4\u4e0eftp\u670d\u52a1\u5668\u7684\u8fde\u63a5\u6b63\u5e38\", filePath);                LOG.error(message);                throw DataXException.asDataXException(FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);            }        }        return isExitFlag;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/SftpHelperImpl.java", "stars": "23", "class": {"name": "SftpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "hasPrefixFileName", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean hasPrefixFileName(String originalName, String prefixFileName){        if(StringUtils.isBlank(prefixFileName)){            return true;        }        return originalName != null && originalName.startsWith(prefixFileName);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/SftpHelperImpl.java", "stars": "23", "class": {"name": "SftpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "setup", "params": ["Map", "Object", "Member", "String"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object setup(Map context, Object target, Member member, String propertyName) {    Object result = null;    if (isAccessible(context, target, member, propertyName)) {      AccessibleObject accessible = (AccessibleObject) member;      if (!accessible.isAccessible()) {        result = Boolean.FALSE;        accessible.setAccessible(true);      }    }    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/OgnlMemberAccess.java", "stars": "15", "class": {"name": "OgnlMemberAccess", "extends": null, "implements": ["MemberAccess"], "modifiers": []}}, {"method_name": "restore", "params": ["Map", "Object", "Member", "String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void restore(Map context, Object target, Member member, String propertyName,      Object state) {    // Flipping accessible flag is not thread safe. See #1648  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/OgnlMemberAccess.java", "stars": "15", "class": {"name": "OgnlMemberAccess", "extends": null, "implements": ["MemberAccess"], "modifiers": []}}, {"method_name": "isAccessible", "params": ["Map", "Object", "Member", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isAccessible(Map context, Object target, Member member, String propertyName) {    return canControlMemberAccessible;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/OgnlMemberAccess.java", "stars": "15", "class": {"name": "OgnlMemberAccess", "extends": null, "implements": ["MemberAccess"], "modifiers": []}}, {"method_name": "channelRead", "params": ["ChannelHandlerContext", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void channelRead(ChannelHandlerContext ctx, Object msg) {    log.info(\"server channelRead..\");    log.info(ctx.channel().remoteAddress() + \"->Server : {}\", msg.toString());  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitorServerHandler.java", "stars": "3", "class": {"name": "NettyMonitorServerHandler", "extends": "ChannelInboundHandlerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "exceptionCaught", "params": ["ChannelHandlerContext", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {    cause.printStackTrace();    ctx.close();  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitorServerHandler.java", "stars": "3", "class": {"name": "NettyMonitorServerHandler", "extends": "ChannelInboundHandlerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": ["long", "long", "String", "Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "TaskConfiguration", "snippet": "    public TaskConfiguration build(long jobId, long taskId, String jobConfig, Map<String, Object> params) {        //Work directory        String workDir = WorkSpace.createLocalDirIfNotExist(execConfig.getJobLogDir(), jobId, taskId);        //Render time placeholder in job configuration        String taskConfig;        try {            if (null != params.get(DefaultParams.Task.PARAM_DATE)) {                long time = Long.parseLong(String.valueOf(params.get(DefaultParams.Task.PARAM_DATE)));                taskConfig = JobUtils.render(jobConfig, time);            } else {                taskConfig = JobUtils.render(jobConfig);            }            //Parse to task configuration            TaskConfiguration configuration = TaskConfiguration.from(taskConfig);            injectDataSourceParam(workDir, configuration, READER_PARAM_PATH, 0);            injectDataSourceParam(workDir, configuration, WRITER_PARAM_PATH, 1);            //Inject increment parameters            injectIncrementParam(configuration, params, READER_PARAM_PATH);            LOG.info(\"Task configuration {}\" + configuration.toJson());            return configuration;        } catch (RuntimeException e){            WorkSpace.deleteLocalSpace(workDir);            throw e;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/datax/DataxTaskConfigBuilder.java", "stars": "23", "class": {"name": "DataxTaskConfigBuilder", "extends": "AbstractTaskConfigBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "injectIncrementParam", "params": ["TaskConfiguration", "Map<String,Object>", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void injectIncrementParam(TaskConfiguration configuration, Map<String, Object> taskParams, String name){        if(taskParams.containsKey(DefaultParams.Task.PARAM_INCR_BEGIN_TIME)){            configuration.set(StringUtils.join(new String[]{name, DefaultParams.Task.PARAM_INCR_BEGIN_TIME}, SPLIT_CHAR),                    taskParams.getOrDefault(DefaultParams.Task.PARAM_INCR_BEGIN_TIME, 0));        }        if(taskParams.containsKey(DefaultParams.Task.PARAM_INCR_END_TIME)){            configuration.set(StringUtils.join(new String[]{name, DefaultParams.Task.PARAM_INCR_END_TIME}, SPLIT_CHAR),                    taskParams.getOrDefault(DefaultParams.Task.PARAM_INCR_END_TIME, 0));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/datax/DataxTaskConfigBuilder.java", "stars": "23", "class": {"name": "DataxTaskConfigBuilder", "extends": "AbstractTaskConfigBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "injectDataSourceParam", "params": ["String", "TaskConfiguration", "String", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void injectDataSourceParam(String workDir, TaskConfiguration configuration,                                       String path, int position){        HttpClientUtil httpClientUtil = HttpClientUtil.getHttpClientUtil();        super.injectDataSourceParamToConf(callBackService, configuration, path);        String authType = configuration                .getString(StringUtils.join(new String[]{path, Constants.PARAM_AUTH_TYPE}, SPLIT_CHAR),\"\");        String[] urlKeysToSearch = new String[]{};        if(AuthType.KERBERS.equals(authType)){            urlKeysToSearch = new String[]{Constants.PARAM_KB_FILE_PATH};        }else if(AuthType.KEYFILE.equals(authType)){            urlKeysToSearch = new String[]{Constants.PARAM_KEY_FILE_PATH};        }else if(StringUtils.isBlank(authType)){            //If auth type is null or empty, means that the job configuration doesn't have the data source id,            // In order to find url key, search all possibilities            urlKeysToSearch = new String[]{Constants.PARAM_KB_FILE_PATH, Constants.PARAM_KEY_FILE_PATH};        }        //Search key path        for(String searchKey : urlKeysToSearch){            List<String> keyPaths = TaskConfiguration.searchKeyPaths(configuration, path, searchKey);            if(!keyPaths.isEmpty()){                String absKeyPath = StringUtils.join(new String[]{path, keyPaths.get(0)}, SPLIT_CHAR);                String url = configuration.getString(absKeyPath);                if(StringUtils.isNotBlank(url)){                    String localPath = downloadAuthFile(httpClientUtil, url, workDir, position);                    configuration.set(absKeyPath, localPath);                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/datax/DataxTaskConfigBuilder.java", "stars": "23", "class": {"name": "DataxTaskConfigBuilder", "extends": "AbstractTaskConfigBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "downloadAuthFile", "params": ["HttpClientUtil", "String", "String", "int"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String downloadAuthFile(HttpClientUtil httpClientUtil, String url,                                    String workDir, int position){        String localPath = workDir + IOUtils.DIR_SEPARATOR_UNIX +                Constants.AUTH_FILE_NAME + position;        httpClientUtil.downLoad(url, localPath);        return localPath;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/datax/DataxTaskConfigBuilder.java", "stars": "23", "class": {"name": "DataxTaskConfigBuilder", "extends": "AbstractTaskConfigBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "SequenceDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "SequenceDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "SequenceDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "SequenceDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "SequenceDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "SequenceDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "SequenceDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "SequenceDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "SequenceDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "SequenceDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIsNull() {            addCriterion(\"name is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIsNotNull() {            addCriterion(\"name is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameEqualTo(String value) {            addCriterion(\"name =\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotEqualTo(String value) {            addCriterion(\"name <>\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameGreaterThan(String value) {            addCriterion(\"name >\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameGreaterThanOrEqualTo(String value) {            addCriterion(\"name >=\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLessThan(String value) {            addCriterion(\"name <\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLessThanOrEqualTo(String value) {            addCriterion(\"name <=\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLike(String value) {            addCriterion(\"name like\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotLike(String value) {            addCriterion(\"name not like\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIn(List<String> values) {            addCriterion(\"name in\", values, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotIn(List<String> values) {            addCriterion(\"name not in\", values, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameBetween(String value1, String value2) {            addCriterion(\"name between\", value1, value2, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotBetween(String value1, String value2) {            addCriterion(\"name not between\", value1, value2, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCurrentValueIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCurrentValueIsNull() {            addCriterion(\"current_value is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCurrentValueIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCurrentValueIsNotNull() {            addCriterion(\"current_value is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCurrentValueEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCurrentValueEqualTo(Integer value) {            addCriterion(\"current_value =\", value, \"currentValue\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCurrentValueNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCurrentValueNotEqualTo(Integer value) {            addCriterion(\"current_value <>\", value, \"currentValue\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCurrentValueGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCurrentValueGreaterThan(Integer value) {            addCriterion(\"current_value >\", value, \"currentValue\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCurrentValueGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCurrentValueGreaterThanOrEqualTo(Integer value) {            addCriterion(\"current_value >=\", value, \"currentValue\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCurrentValueLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCurrentValueLessThan(Integer value) {            addCriterion(\"current_value <\", value, \"currentValue\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCurrentValueLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCurrentValueLessThanOrEqualTo(Integer value) {            addCriterion(\"current_value <=\", value, \"currentValue\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCurrentValueIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCurrentValueIn(List<Integer> values) {            addCriterion(\"current_value in\", values, \"currentValue\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCurrentValueNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCurrentValueNotIn(List<Integer> values) {            addCriterion(\"current_value not in\", values, \"currentValue\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCurrentValueBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCurrentValueBetween(Integer value1, Integer value2) {            addCriterion(\"current_value between\", value1, value2, \"currentValue\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCurrentValueNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCurrentValueNotBetween(Integer value1, Integer value2) {            addCriterion(\"current_value not between\", value1, value2, \"currentValue\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStepIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStepIsNull() {            addCriterion(\"step is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStepIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStepIsNotNull() {            addCriterion(\"step is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStepEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStepEqualTo(Integer value) {            addCriterion(\"step =\", value, \"step\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStepNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStepNotEqualTo(Integer value) {            addCriterion(\"step <>\", value, \"step\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStepGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStepGreaterThan(Integer value) {            addCriterion(\"step >\", value, \"step\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStepGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStepGreaterThanOrEqualTo(Integer value) {            addCriterion(\"step >=\", value, \"step\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStepLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStepLessThan(Integer value) {            addCriterion(\"step <\", value, \"step\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStepLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStepLessThanOrEqualTo(Integer value) {            addCriterion(\"step <=\", value, \"step\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStepIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStepIn(List<Integer> values) {            addCriterion(\"step in\", values, \"step\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStepNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStepNotIn(List<Integer> values) {            addCriterion(\"step not in\", values, \"step\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStepBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStepBetween(Integer value1, Integer value2) {            addCriterion(\"step between\", value1, value2, \"step\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStepNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStepNotBetween(Integer value1, Integer value2) {            addCriterion(\"step not between\", value1, value2, \"step\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, 100d, null);    verify(ps).setDouble(1, 100d);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DoubleTypeHandlerTest.java", "stars": "15", "class": {"name": "DoubleTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getDouble(\"column\")).thenReturn(100d);    assertEquals(Double.valueOf(100d), TYPE_HANDLER.getResult(rs, \"column\"));    when(rs.getDouble(\"column\")).thenReturn(0d);    assertEquals(Double.valueOf(0d), TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DoubleTypeHandlerTest.java", "stars": "15", "class": {"name": "DoubleTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getDouble(\"column\")).thenReturn(0d);    when(rs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DoubleTypeHandlerTest.java", "stars": "15", "class": {"name": "DoubleTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getDouble(1)).thenReturn(100d);    assertEquals(Double.valueOf(100d), TYPE_HANDLER.getResult(rs, 1));    when(rs.getDouble(1)).thenReturn(0d);    assertEquals(Double.valueOf(0d), TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DoubleTypeHandlerTest.java", "stars": "15", "class": {"name": "DoubleTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getDouble(1)).thenReturn(0d);    when(rs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DoubleTypeHandlerTest.java", "stars": "15", "class": {"name": "DoubleTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getDouble(1)).thenReturn(100d);    assertEquals(Double.valueOf(100d), TYPE_HANDLER.getResult(cs, 1));    when(cs.getDouble(1)).thenReturn(0d);    assertEquals(Double.valueOf(0d), TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DoubleTypeHandlerTest.java", "stars": "15", "class": {"name": "DoubleTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getDouble(1)).thenReturn(0d);    when(cs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DoubleTypeHandlerTest.java", "stars": "15", "class": {"name": "DoubleTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.main);\t\t// Adapter initialization\t\tadapter = new SocialAuthAdapter(new ResponseListener());\t\t// Set title\t\ttitle = (TextView) findViewById(R.id.textview);\t\ttitle.setText(R.string.app_name);\t\tlistview = (ListView) findViewById(R.id.listview);\t\tlistview.setAdapter(new CustomAdapter(this, adapter));\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "CustomUI", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "Events", "params": ["int", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void Events(int position, final String provider) {\t\tswitch (position) {\t\tcase 0: // Code to print user profile details for all providers\t\t{\t\t\tmDialog.show();\t\t\tadapter.getUserProfileAsync(new ProfileDataListener());\t\t\tbreak;\t\t}\t\tcase 1: {\t\t\t// Get Contacts for FourSquare , Google\t\t\t// Dismiss Dialog for Runkeeper and SalesForce\t\t\t// Update Status for rest of providers\t\t\tif (provider.equalsIgnoreCase(\"foursquare\") || provider.equalsIgnoreCase(\"google\")) {\t\t\t\tmDialog.show();\t\t\t\tadapter.getContactListAsync(new ContactDataListener());\t\t\t} else if (provider.equalsIgnoreCase(\"runkeeper\") || provider.equalsIgnoreCase(\"salesforce\")\t\t\t\t\t|| provider.equalsIgnoreCase(\"googleplus\")) {\t\t\t\tdialog.dismiss();\t\t\t} else {\t\t\t\t// Code to Post Message for all providers\t\t\t\tfinal Dialog msgDialog = new Dialog(CustomUI.this);\t\t\t\tmsgDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\t\t\t\tmsgDialog.setContentView(R.layout.dialog);\t\t\t\tTextView dialogTitle = (TextView) msgDialog.findViewById(R.id.dialogTitle);\t\t\t\tdialogTitle.setText(\"Share Update\");\t\t\t\tfinal EditText edit = (EditText) msgDialog.findViewById(R.id.editTxt);\t\t\t\tButton update = (Button) msgDialog.findViewById(R.id.update);\t\t\t\tmsgDialog.show();\t\t\t\tupdate.setOnClickListener(new OnClickListener() {\t\t\t\t\t@Override\t\t\t\t\tpublic void onClick(View v) {\t\t\t\t\t\tmsgDialog.dismiss();\t\t\t\t\t\tadapter.updateStatus(edit.getText().toString(), new MessageListener(), false);\t\t\t\t\t}\t\t\t\t});\t\t\t}\t\t\tbreak;\t\t}\t\tcase 2: {\t\t\t// Dismiss Dialog for FourSquare , Google\t\t\t// Get Contacts for rest of providers\t\t\tif (provider.equalsIgnoreCase(\"foursquare\") || provider.equalsIgnoreCase(\"google\")) {\t\t\t\t// Close Dialog\t\t\t\tdialog.dismiss();\t\t\t} else {\t\t\t\t// Get Contacts for Remaining Providers\t\t\t\tmDialog.show();\t\t\t\tadapter.getContactListAsync(new ContactDataListener());\t\t\t}\t\t\tbreak;\t\t}\t\tcase 3: {\t\t\t// Get Feeds : For Facebook , Twitter Only\t\t\t// Dismiss Dialog for rest of providers\t\t\tif (provider.equalsIgnoreCase(\"facebook\") || provider.equalsIgnoreCase(\"twitter\")\t\t\t\t\t|| provider.equalsIgnoreCase(\"linkedin\")) {\t\t\t\tmDialog.show();\t\t\t\tadapter.getFeedsAsync(new FeedDataListener());\t\t\t} else {\t\t\t\tdialog.dismiss();\t\t\t}\t\t\tbreak;\t\t}\t\tcase 4: {\t\t\t// Upload Image for Facebook and Twitter\t\t\tif (provider.equalsIgnoreCase(\"facebook\") || provider.equalsIgnoreCase(\"twitter\")) {\t\t\t\t// Code to Post Message for all providers\t\t\t\tfinal Dialog imgDialog = new Dialog(CustomUI.this);\t\t\t\timgDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\t\t\t\timgDialog.setContentView(R.layout.dialog);\t\t\t\timgDialog.setCancelable(true);\t\t\t\tTextView dialogTitle = (TextView) imgDialog.findViewById(R.id.dialogTitle);\t\t\t\tdialogTitle.setText(\"Share Image\");\t\t\t\tfinal EditText edit = (EditText) imgDialog.findViewById(R.id.editTxt);\t\t\t\tButton update = (Button) imgDialog.findViewById(R.id.update);\t\t\t\tupdate.setVisibility(View.INVISIBLE);\t\t\t\tButton getImage = (Button) imgDialog.findViewById(R.id.loadImage);\t\t\t\tgetImage.setVisibility(View.VISIBLE);\t\t\t\timgDialog.show();\t\t\t\tgetImage.setOnClickListener(new OnClickListener() {\t\t\t\t\t@Override\t\t\t\t\tpublic void onClick(View v) {\t\t\t\t\t\t// Taking image from phone gallery\t\t\t\t\t\tIntent photoPickerIntent = new Intent(Intent.ACTION_PICK);\t\t\t\t\t\tphotoPickerIntent.setType(\"image/*\");\t\t\t\t\t\tstartActivityForResult(photoPickerIntent, SELECT_PHOTO);\t\t\t\t\t\tif (bitmap != null) {\t\t\t\t\t\t\tmDialog.show();\t\t\t\t\t\t\ttry {\t\t\t\t\t\t\t\tadapter.uploadImageAsync(edit.getText().toString(), \"icon.png\", bitmap, 0,\t\t\t\t\t\t\t\t\t\tnew UploadImageListener());\t\t\t\t\t\t\t} catch (Exception e) {\t\t\t\t\t\t\t\te.printStackTrace();\t\t\t\t\t\t\t}\t\t\t\t\t\t}\t\t\t\t\t\timgDialog.dismiss();\t\t\t\t\t}\t\t\t\t});\t\t\t} else if (provider.equalsIgnoreCase(\"linkedin\")) {\t\t\t\t// get Job and Education information\t\t\t\tmDialog.show();\t\t\t\tadapter.getCareerAsync(new CareerListener());\t\t\t} else {\t\t\t\tdialog.dismiss();\t\t\t}\t\t\tbreak;\t\t}\t\tcase 5: {\t\t\t// Get Albums for Facebook and Twitter\t\t\tif (provider.equalsIgnoreCase(\"facebook\") || provider.equalsIgnoreCase(\"twitter\")) {\t\t\t\tmDialog.show();\t\t\t\tadapter.getAlbumsAsync(new AlbumDataListener());\t\t\t} else {\t\t\t\tdialog.dismiss();\t\t\t}\t\t\tbreak;\t\t}\t\tcase 6: {\t\t\t// For share text with link preview\t\t\tif (provider.equalsIgnoreCase(\"facebook\")) {\t\t\t\tadapter.updateStory(\t\t\t\t\t\t\"Hello SocialAuth Android\" + System.currentTimeMillis(),\t\t\t\t\t\t\"Google SDK for Android\",\t\t\t\t\t\t\"Build great social apps and get more installs.\",\t\t\t\t\t\t\"The Facebook SDK for Android makes it easier and faster to develop Facebook integrated Android apps.\",\t\t\t\t\t\t\"https://www.facebook.com\", \"http://carbonfreepress.gr/images/facebook.png\",\t\t\t\t\t\tnew MessageListener());\t\t\t} else {\t\t\t\tdialog.dismiss();\t\t\t}\t\t\tbreak;\t\t}\t\tcase 7: {\t\t\t// Dismiss Dialog\t\t\tdialog.dismiss();\t\t\tbreak;\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "CustomUI", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onActivityResult", "params": ["int", "int", "Intent"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onActivityResult(int requestCode, int resultCode, Intent imageReturnedIntent) {\t\tsuper.onActivityResult(requestCode, resultCode, imageReturnedIntent);\t\tswitch (requestCode) {\t\tcase SELECT_PHOTO:\t\t\tif (resultCode == RESULT_OK) {\t\t\t\tUri selectedImage = imageReturnedIntent.getData();\t\t\t\tInputStream imageStream;\t\t\t\ttry {\t\t\t\t\timageStream = getContentResolver().openInputStream(selectedImage);\t\t\t\t\tbitmap = BitmapFactory.decodeStream(imageStream);\t\t\t\t} catch (FileNotFoundException e) {\t\t\t\t\te.printStackTrace();\t\t\t\t}\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "CustomUI", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onComplete", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onComplete(Bundle values) {\t\t\tLog.d(\"Custom-UI\", \"Successful\");\t\t\t// Changing Sign In Text to Sign Out\t\t\tView v = listview.getChildAt(pos - listview.getFirstVisiblePosition());\t\t\tTextView pText = (TextView) v.findViewById(R.id.signstatus);\t\t\tpText.setText(\"Sign Out\");\t\t\t// Get the provider\t\t\tproviderName = values.getString(SocialAuthAdapter.PROVIDER);\t\t\tLog.d(\"Custom-UI\", \"providername = \" + providerName);\t\t\tToast.makeText(CustomUI.this, providerName + \" connected\", Toast.LENGTH_SHORT).show();\t\t\tint res = getResources().getIdentifier(providerName + \"_array\", \"array\", CustomUI.this.getPackageName());\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(CustomUI.this);\t\t\tbuilder.setTitle(\"Select Options\");\t\t\tbuilder.setCancelable(true);\t\t\tbuilder.setIcon(android.R.drawable.ic_menu_more);\t\t\tmDialog = new ProgressDialog(CustomUI.this);\t\t\tmDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\t\t\tmDialog.setMessage(\"Loading...\");\t\t\tbuilder.setSingleChoiceItems(new DialogAdapter(CustomUI.this, R.layout.provider_options, getResources()\t\t\t\t\t.getStringArray(res)), 0, new DialogInterface.OnClickListener() {\t\t\t\t@Override\t\t\t\tpublic void onClick(DialogInterface dialog, int item) {\t\t\t\t\tEvents(item, providerName);\t\t\t\t\tdialog.dismiss();\t\t\t\t}\t\t\t});\t\t\tdialog = builder.create();\t\t\tdialog.show();\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "ResponseListener", "extends": null, "implements": ["DialogListener"], "modifiers": ["private", "final"]}}, {"method_name": "onError", "params": ["SocialAuthError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onError(SocialAuthError error) {\t\t\tLog.d(\"Custom-UI\", \"Error\");\t\t\terror.printStackTrace();\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "ResponseListener", "extends": null, "implements": ["DialogListener"], "modifiers": ["private", "final"]}}, {"method_name": "onCancel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onCancel() {\t\t\tLog.d(\"Custom-UI\", \"Cancelled\");\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "ResponseListener", "extends": null, "implements": ["DialogListener"], "modifiers": ["private", "final"]}}, {"method_name": "onBack", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onBack() {\t\t\tLog.d(\"Custom-UI\", \"Dialog Closed by pressing Back Key\");\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "ResponseListener", "extends": null, "implements": ["DialogListener"], "modifiers": ["private", "final"]}}, {"method_name": "onExecute", "params": ["String", "Profile"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onExecute(String provider, Profile t) {\t\t\tLog.d(\"Custom-UI\", \"Receiving Data\");\t\t\tmDialog.dismiss();\t\t\tProfile profileMap = t;\t\t\tIntent intent = new Intent(CustomUI.this, ProfileActivity.class);\t\t\tintent.putExtra(\"provider\", provider);\t\t\tintent.putExtra(\"profile\", profileMap);\t\t\tstartActivity(intent);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "ProfileDataListener", "extends": null, "implements": ["SocialAuthListener"], "modifiers": ["private", "final"]}}, {"method_name": "onError", "params": ["SocialAuthError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onError(SocialAuthError e) {\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "ProfileDataListener", "extends": null, "implements": ["SocialAuthListener"], "modifiers": ["private", "final"]}}, {"method_name": "onExecute", "params": ["String", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onExecute(String provider, Integer t) {\t\t\tInteger status = t;\t\t\tif (status.intValue() == 200 || status.intValue() == 201 || status.intValue() == 204)\t\t\t\tToast.makeText(CustomUI.this, \"Message posted on\" + provider, Toast.LENGTH_LONG).show();\t\t\telse\t\t\t\tToast.makeText(CustomUI.this, \"Message not posted\" + provider, Toast.LENGTH_LONG).show();\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "MessageListener", "extends": null, "implements": ["SocialAuthListener"], "modifiers": ["private", "final"]}}, {"method_name": "onError", "params": ["SocialAuthError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onError(SocialAuthError e) {\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "MessageListener", "extends": null, "implements": ["SocialAuthListener"], "modifiers": ["private", "final"]}}, {"method_name": "onExecute", "params": ["String", "List<Album>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onExecute(String provider, List<Album> t) {\t\t\tLog.d(\"Custom-UI\", \"Receiving Data\");\t\t\tmDialog.dismiss();\t\t\tList<Album> albumList = t;\t\t\tIntent intent = new Intent(CustomUI.this, AlbumActivity.class);\t\t\tintent.putExtra(\"album\", (Serializable) albumList);\t\t\tstartActivity(intent);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "AlbumDataListener", "extends": null, "implements": ["SocialAuthListener"], "modifiers": ["private", "final"]}}, {"method_name": "onError", "params": ["SocialAuthError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onError(SocialAuthError e) {\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "AlbumDataListener", "extends": null, "implements": ["SocialAuthListener"], "modifiers": ["private", "final"]}}, {"method_name": "onExecute", "params": ["String", "List<Contact>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onExecute(String provider, List<Contact> t) {\t\t\tLog.d(\"Custom-UI\", \"Receiving Data\");\t\t\tmDialog.dismiss();\t\t\tList<Contact> contactsList = t;\t\t\tIntent intent = new Intent(CustomUI.this, ContactActivity.class);\t\t\tintent.putExtra(\"provider\", provider);\t\t\tintent.putExtra(\"contact\", (Serializable) contactsList);\t\t\tstartActivity(intent);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "ContactDataListener", "extends": null, "implements": ["SocialAuthListener"], "modifiers": ["private", "final"]}}, {"method_name": "onError", "params": ["SocialAuthError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onError(SocialAuthError e) {\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "ContactDataListener", "extends": null, "implements": ["SocialAuthListener"], "modifiers": ["private", "final"]}}, {"method_name": "onExecute", "params": ["String", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onExecute(String provider, Integer t) {\t\t\tmDialog.dismiss();\t\t\tInteger status = t;\t\t\tLog.d(\"Custom-UI\", String.valueOf(status));\t\t\tToast.makeText(CustomUI.this, \"Image Uploaded\", Toast.LENGTH_SHORT).show();\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "UploadImageListener", "extends": null, "implements": ["SocialAuthListener"], "modifiers": ["private", "final"]}}, {"method_name": "onError", "params": ["SocialAuthError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onError(SocialAuthError e) {\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "UploadImageListener", "extends": null, "implements": ["SocialAuthListener"], "modifiers": ["private", "final"]}}, {"method_name": "onExecute", "params": ["String", "List<Feed>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onExecute(String provider, List<Feed> t) {\t\t\tLog.d(\"Custom-UI\", \"Receiving Data\");\t\t\tmDialog.dismiss();\t\t\tList<Feed> feedList = t;\t\t\tIntent intent = new Intent(CustomUI.this, FeedActivity.class);\t\t\tintent.putExtra(\"feed\", (Serializable) feedList);\t\t\tstartActivity(intent);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "FeedDataListener", "extends": null, "implements": ["SocialAuthListener"], "modifiers": ["private", "final"]}}, {"method_name": "onError", "params": ["SocialAuthError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onError(SocialAuthError e) {\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "FeedDataListener", "extends": null, "implements": ["SocialAuthListener"], "modifiers": ["private", "final"]}}, {"method_name": "onExecute", "params": ["String", "Career"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onExecute(String provider, Career t) {\t\t\tLog.d(\"Custom-UI\", \"Receiving Data\");\t\t\tmDialog.dismiss();\t\t\tCareer careerMap = t;\t\t\tIntent intent = new Intent(CustomUI.this, CareerActivity.class);\t\t\tintent.putExtra(\"provider\", provider);\t\t\tintent.putExtra(\"career\", careerMap);\t\t\tstartActivity(intent);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "CareerListener", "extends": null, "implements": ["SocialAuthListener"], "modifiers": ["private", "final"]}}, {"method_name": "onError", "params": ["SocialAuthError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onError(SocialAuthError e) {\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "CareerListener", "extends": null, "implements": ["SocialAuthListener"], "modifiers": ["private", "final"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getCount() {\t\t\treturn options.length;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "DialogAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\t\tpublic Object getItem(int position) {\t\t\treturn position;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "DialogAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\t\tpublic long getItemId(int position) {\t\t\treturn position;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "DialogAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\t\tpublic View getView(final int position, View convertView, ViewGroup parent) {\t\t\t// A ViewHolder keeps references to children views to avoid\t\t\t// unneccessary\t\t\t// calls to findViewById() on each row.\t\t\tViewHolder holder;\t\t\t// When convertView is not null, we can reuse it directly, there is\t\t\t// no\t\t\t// need to reinflate it. We only inflate a new View when the\t\t\t// convertView\t\t\t// supplied by ListView is null.\t\t\tif (convertView == null) {\t\t\t\tconvertView = mInflater.inflate(R.layout.provider_options, null);\t\t\t\t// Creates a ViewHolder and store references to the two children\t\t\t\t// views\t\t\t\t// we want to bind data to.\t\t\t\tholder = new ViewHolder();\t\t\t\tholder.text = (TextView) convertView.findViewById(R.id.providerText);\t\t\t\tholder.icon = (ImageView) convertView.findViewById(R.id.provider);\t\t\t\tconvertView.setTag(holder);\t\t\t} else {\t\t\t\t// Get the ViewHolder back to get fast access to the TextView\t\t\t\t// and the ImageView.\t\t\t\tholder = (ViewHolder) convertView.getTag();\t\t\t}\t\t\tString drawables[] = ctx.getResources().getStringArray(R.array.drawable_array);\t\t\tmIcon = ctx.getResources().getDrawable(\t\t\t\t\tctx.getResources().getIdentifier(drawables[position], \"drawable\", ctx.getPackageName()));\t\t\t// Bind the data efficiently with the holder\t\t\tholder.text.setText(options[position]);\t\t\tif (options[position].equalsIgnoreCase(\"career\"))\t\t\t\tholder.icon.setImageResource(R.drawable.career);\t\t\telse\t\t\t\tholder.icon.setImageDrawable(mIcon);\t\t\treturn convertView;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CustomUI.java", "stars": "74", "class": {"name": "DialogAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRoleId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getRoleId() {    return roleId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WtssRole.java", "stars": "18", "class": {"name": "WtssRole", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRoleId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRoleId(int roleId) {    this.roleId = roleId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WtssRole.java", "stars": "18", "class": {"name": "WtssRole", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRoleName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getRoleName() {    return roleName;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WtssRole.java", "stars": "18", "class": {"name": "WtssRole", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRoleName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRoleName(String roleName) {    this.roleName = roleName;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WtssRole.java", "stars": "18", "class": {"name": "WtssRole", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPermissionsIds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getPermissionsIds() {    return permissionsIds;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WtssRole.java", "stars": "18", "class": {"name": "WtssRole", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPermissionsIds", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPermissionsIds(String permissionsIds) {    this.permissionsIds = permissionsIds;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WtssRole.java", "stars": "18", "class": {"name": "WtssRole", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getDescription() {    return description;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WtssRole.java", "stars": "18", "class": {"name": "WtssRole", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDescription(String description) {    this.description = description;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WtssRole.java", "stars": "18", "class": {"name": "WtssRole", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getCreateTime() {    return createTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WtssRole.java", "stars": "18", "class": {"name": "WtssRole", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCreateTime(long createTime) {    this.createTime = createTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WtssRole.java", "stars": "18", "class": {"name": "WtssRole", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUpdateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getUpdateTime() {    return updateTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WtssRole.java", "stars": "18", "class": {"name": "WtssRole", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUpdateTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUpdateTime(long updateTime) {    this.updateTime = updateTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WtssRole.java", "stars": "18", "class": {"name": "WtssRole", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"WtssRole{\" +        \"roleId=\" + roleId +        \", roleName='\" + roleName + '\\'' +        \", permissionsIds='\" + permissionsIds + '\\'' +        \", description='\" + description + '\\'' +        \", createTime='\" + createTime + '\\'' +        \", updateTime='\" + updateTime + '\\'' +        '}';  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WtssRole.java", "stars": "18", "class": {"name": "WtssRole", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAttachedToWindow ()\t{\t\tn_onAttachedToWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/NavigationRenderer.java", "stars": "2", "class": {"name": "NavigationRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onAttachedToWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAttachedToWindow ();\tpublic void onDetachedFromWindow ()\t{\t\tn_onDetachedFromWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/NavigationRenderer.java", "stars": "2", "class": {"name": "NavigationRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDetachedFromWindow ()\t{\t\tn_onDetachedFromWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/NavigationRenderer.java", "stars": "2", "class": {"name": "NavigationRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDetachedFromWindow ();\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/NavigationRenderer.java", "stars": "2", "class": {"name": "NavigationRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/NavigationRenderer.java", "stars": "2", "class": {"name": "NavigationRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/NavigationRenderer.java", "stars": "2", "class": {"name": "NavigationRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/NavigationRenderer.java", "stars": "2", "class": {"name": "NavigationRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/NavigationRenderer.java", "stars": "2", "class": {"name": "NavigationRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "put", "params": ["K", "V"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean put(K key, V value) {\t\t// Search equal key and remove this entry\t\tsynchronized (cache) {\t\t\tK keyToRemove = null;\t\t\tfor (K cacheKey : cache.keys()) {\t\t\t\tif (keyComparator.compare(key, cacheKey) == 0) {\t\t\t\t\tkeyToRemove = cacheKey;\t\t\t\t\tbreak;\t\t\t\t}\t\t\t}\t\t\tif (keyToRemove != null) {\t\t\t\tcache.remove(keyToRemove);\t\t\t}\t\t}\t\treturn cache.put(key, value);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/FuzzyKeyMemoryCache.java", "stars": "74", "class": {"name": "FuzzyKeyMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "get", "params": ["K"], "throws": null, "modifiers": ["public"], "return_type": "V", "snippet": "\tpublic V get(K key) {\t\treturn cache.get(key);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/FuzzyKeyMemoryCache.java", "stars": "74", "class": {"name": "FuzzyKeyMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "remove", "params": ["K"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void remove(K key) {\t\tcache.remove(key);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/FuzzyKeyMemoryCache.java", "stars": "74", "class": {"name": "FuzzyKeyMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clear() {\t\tcache.clear();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/FuzzyKeyMemoryCache.java", "stars": "74", "class": {"name": "FuzzyKeyMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "keys", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<K>", "snippet": "\tpublic Collection<K> keys() {\t\treturn cache.keys();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/FuzzyKeyMemoryCache.java", "stars": "74", "class": {"name": "FuzzyKeyMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "notFoundController_devrait_toujours_lever_une_NotFoundException_et_afficher_la_page_erreur_404", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void notFoundController_devrait_toujours_lever_une_NotFoundException_et_afficher_la_page_erreur_404() throws Exception {        // Given When Then        mockMvc.perform(MockMvcRequestBuilders.get(\"/error\"))                .andExpect(view().name(\"erreur-404\"))                .andExpect(status().isNotFound())                .andExpect(content().string(containsString(\"404\")));    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/application/ui/NotFoundControllerTest.java", "stars": "5", "class": {"name": "NotFoundControllerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getOperandString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOperandString() {        switch (mode) {        case MODE_INDEXED:            return String.format(\"$%02x,X,#$%02x\", (operand & 0x00ff), ((operand & 0xff00) >> 8));        default:            return super.getOperandString();        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/OIM.java", "stars": "4", "class": {"name": "OIM", "extends": "NonBranchInstruction", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["Context", "AttributeSet"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init(Context context, AttributeSet attrs) {        //\u6297\u952f\u9f7f\u548c\u4f4d\u56fe\u6ee4\u6ce2        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.FILTER_BITMAP_FLAG);        //\u8bfb\u53d6xml\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e        if (attrs != null) {            TypedArray array = context.obtainStyledAttributes(attrs, R.styleable.SeniorEditText);            //\u83b7\u53d6\u6e05\u9664\u56fe\u6807\u8d44\u6e90            clear_res_id = array.getResourceId(R.styleable.SeniorEditText_clearDrawable, R.mipmap.clear);            //\u83b7\u53d6\u53ef\u89c1\u56fe\u6807\u8d44\u6e90            visible_res_id = array.getResourceId(R.styleable.SeniorEditText_visibleDrawable, R.mipmap.eye_open);            //\u83b7\u53d6\u4e0d\u53ef\u89c1\u56fe\u6807\u8d44\u6e90            invisible_res_id = array.getResourceId(R.styleable.SeniorEditText_invisibleDrawable, R.mipmap.eye_close);            //\u53ef\u89c1\u56fe\u6807\u6309\u94ae\u9ed8\u8ba4\u5bbd            visible_res_width = array.getDimensionPixelSize(R.styleable.SeniorEditText_visibleDrawableWidth, dp2px(context,24));            //\u53ef\u89c1\u56fe\u6807\u6309\u94ae\u9ed8\u8ba4\u5185\u8fb9\u8ddd            visible_res_padding = array.getDimensionPixelSize(R.styleable.SeniorEditText_visibleDrawableSpacing, dp2px(context,5));            //\u8f93\u5165\u6846\u8fb9\u6846\u6837\u5f0f            edit_border_style = array.getString(R.styleable.SeniorEditText_editFrameStyle);            //\u8f93\u5165\u6846\u8fb9\u6846\u989c\u8272            edit_border_color = array.getColor(R.styleable.SeniorEditText_editFrameColor, DEFAULT_STYLE_COLOR);            array.recycle();        }        //\u521d\u59cb\u5316\u6309\u94ae\u663e\u793a\u7684Bitmap        clear_bitmap = createBitmap(context, clear_res_id, R.mipmap.clear);        visible_bitmap = createBitmap(context, visible_res_id, R.mipmap.eye_open);        invisible_bitmap = createBitmap(context, invisible_res_id, R.mipmap.eye_close);        //\u5982\u679c\u81ea\u5b9a\u4e49\uff0c\u5219\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u503c\uff0c\u5426\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c        if (visible_res_padding == 0) {            visible_res_padding = dp2px(context,5);        }        if (visible_res_width == 0) {            visible_res_width = dp2px(context,24);        }        //\u7ed9\u6587\u5b57\u8bbe\u7f6e\u4e00\u4e2apadding\uff0c\u907f\u514d\u6587\u5b57\u548c\u6309\u94ae\u91cd\u53e0\u4e86        mTextPaddingRight = visible_res_padding * 4 + visible_res_width * 2;        //\u6309\u94ae\u51fa\u73b0\u548c\u6d88\u5931\u7684\u52a8\u753b        show_animator = ValueAnimator.ofFloat(1f, 0f).setDuration(ANIMATOR_TIME);        dismiss_animator = ValueAnimator.ofFloat(0f, 1f).setDuration(ANIMATOR_TIME);        //\u662f\u5426\u662f\u5bc6\u7801\u6837\u5f0f        show_password_image_isShow = getInputType() == (InputType.TYPE_TEXT_VARIATION_PASSWORD | InputType.TYPE_CLASS_TEXT);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);        //\u8bbe\u7f6e\u53f3\u5185\u8fb9\u8ddd, \u9632\u6b62\u6e05\u9664\u6309\u94ae\u548c\u6587\u5b57\u91cd\u53e0        setPadding(getPaddingLeft(), getPaddingTop(), mTextPaddingRight, getPaddingBottom());    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        mPaint.setStyle(Paint.Style.STROKE);        //\u4f7f\u7528\u81ea\u5b9a\u4e49\u989c\u8272\u3002\u5982\u672a\u5b9a\u4e49\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u989c\u8272        if (edit_border_color != -1) {            mPaint.setColor(edit_border_color);        } else {            mPaint.setColor(DEFAULT_STYLE_COLOR);        }        //\u63a7\u4ef6\u83b7\u53d6\u7126\u70b9\u65f6\uff0c\u52a0\u7c97\u8fb9\u6846        if (isFocused()) {            mPaint.setStrokeWidth(DEFAULT_FOCUSED_STROKE_WIDTH);        } else {            mPaint.setStrokeWidth(DEFAULT_UNFOCUSED_STROKE_WIDTH);        }        //\u7ed8\u5236\u8fb9\u6846        drawBorder(canvas);        //\u7ed8\u5236\u6e05\u7a7a\u548c\u660e\u6587\u663e\u793a\u6309\u94ae        drawButtons(canvas);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawBorder", "params": ["Canvas"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void drawBorder(Canvas canvas) {        int width = getWidth();        int height = getHeight();        switch (edit_border_style) {            //\u77e9\u5f62\u6837\u5f0f            case STYLE_RECT:                setBackground(null);                canvas.drawRect(0, 0, width, height, mPaint);                break;            //\u5706\u89d2\u77e9\u5f62\u6837\u5f0f            case STYLE_ROUND_RECT:                setBackground(null);                float roundRectLineWidth = 0;                if (isFocused()) {                    roundRectLineWidth = DEFAULT_FOCUSED_STROKE_WIDTH / 2;                } else {                    roundRectLineWidth = DEFAULT_UNFOCUSED_STROKE_WIDTH / 2;                }                mPaint.setStrokeWidth(roundRectLineWidth);                if (Build.VERSION.SDK_INT >= 21) {                    canvas.drawRoundRect(                            roundRectLineWidth / 2, roundRectLineWidth / 2, width - roundRectLineWidth / 2, height - roundRectLineWidth / 2,                            DEFAULT_ROUND_RADIUS, DEFAULT_ROUND_RADIUS,                            mPaint);                } else {                    canvas.drawRoundRect(                            new RectF(roundRectLineWidth / 2, roundRectLineWidth / 2, width - roundRectLineWidth / 2, height - roundRectLineWidth / 2),                            DEFAULT_ROUND_RADIUS, DEFAULT_ROUND_RADIUS,                            mPaint);                }                break;            //\u534a\u77e9\u5f62\u6837\u5f0f            case STYLE_HALF_RECT:                setBackground(null);                canvas.drawLine(0, height, width, height, mPaint);                canvas.drawLine(0, height / 2, 0, height, mPaint);                canvas.drawLine(width, height / 2, width, height, mPaint);                break;            //\u52a8\u753b\u7279\u6548\u6837\u5f0f            case STYLE_ANIMATOR:                setBackground(null);                if (isAnimatorRunning) {                    canvas.drawLine(width / 2 - mAnimatorProgress, height, width / 2 + mAnimatorProgress, height, mPaint);                    if (mAnimatorProgress == width / 2) {                        isAnimatorRunning = false;                    }                } else {                    canvas.drawLine(0, height, width, height, mPaint);                }                break;            default:                break;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawButtons", "params": ["Canvas"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void drawButtons(Canvas canvas) {        if (clear_image_isShow) {            //\u64ad\u653e\u6309\u94ae\u51fa\u73b0\u7684\u52a8\u753b            if (dismiss_animator.isRunning()) {                float scale = (float) dismiss_animator.getAnimatedValue();                drawClearButton(scale, canvas);                if (show_password_image_isShow) {                    drawVisibleButton(scale, canvas, dismiss_password_image_isShow);                }                invalidate();                //\u7ed8\u5236\u9759\u6001\u7684\u6309\u94ae            } else {                drawClearButton(1, canvas);                if (show_password_image_isShow) {                    drawVisibleButton(1, canvas, dismiss_password_image_isShow);                }            }        } else {            //\u64ad\u653e\u6309\u94ae\u6d88\u5931\u7684\u52a8\u753b            if (show_animator.isRunning()) {                float scale = (float) show_animator.getAnimatedValue();                drawClearButton(scale, canvas);                if (show_password_image_isShow) {                    drawVisibleButton(scale, canvas, dismiss_password_image_isShow);                }                invalidate();            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawClearButton", "params": ["float", "Canvas"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void drawClearButton(float scale, Canvas canvas) {        int right = (int) (getWidth() + getScrollX() - visible_res_padding - visible_res_width * (1f - scale) / 2f);        int left = (int) (getWidth() + getScrollX() - visible_res_padding - visible_res_width * (scale + (1f - scale) / 2f));        int top = (int) ((getHeight() - visible_res_width * scale) / 2);        int bottom = (int) (top + visible_res_width * scale);        Rect rect = new Rect(left, top, right, bottom);        canvas.drawBitmap(clear_bitmap, null, rect, mPaint);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawVisibleButton", "params": ["float", "Canvas", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void drawVisibleButton(float scale, Canvas canvas, boolean isVisible) {        int right = (int) (getWidth() + getScrollX() - visible_res_padding * 3 - visible_res_width - visible_res_width * (1f - scale) / 2f);        int left = (int) (getWidth() + getScrollX() - visible_res_padding * 3 - visible_res_width - visible_res_width * (scale + (1f - scale) / 2f));        int top = (int) ((getHeight() - visible_res_width * scale) / 2);        int bottom = (int) (top + visible_res_width * scale);        Rect rect = new Rect(left, top, right, bottom);        if (isVisible) {            canvas.drawBitmap(visible_bitmap, null, rect, mPaint);        } else {            canvas.drawBitmap(invisible_bitmap, null, rect, mPaint);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "startVisibleAnimator", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startVisibleAnimator() {        endAllAnimator();        dismiss_animator.start();        invalidate();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "startGoneAnimator", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startGoneAnimator() {        endAllAnimator();        show_animator.start();        invalidate();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "endAllAnimator", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void endAllAnimator() {        show_animator.end();        dismiss_animator.end();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "onFocusChanged", "params": ["boolean", "int", "Rect"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect) {        super.onFocusChanged(focused, direction, previouslyFocusedRect);        //\u64ad\u653e\u6309\u94ae\u51fa\u73b0\u548c\u6d88\u5931\u52a8\u753b        if (focused && getText().length() > 0) {            if (!clear_image_isShow) {                clear_image_isShow = true;                startVisibleAnimator();            }        } else {            if (clear_image_isShow) {                clear_image_isShow = false;                startGoneAnimator();            }        }        //\u5b9e\u73b0\u52a8\u753b\u7279\u6548\u6837\u5f0f        if (focused && edit_border_style.equals(STYLE_ANIMATOR)) {            isAnimatorRunning = true;            mAnimator = ObjectAnimator.ofInt(this, BORDER_PROGRESS, 0, getWidth() / 2);            mAnimator.setDuration(ANIMATOR_TIME);            mAnimator.start();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "setBorderProgress", "params": ["int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setBorderProgress(int borderProgress) {        mAnimatorProgress = borderProgress;        postInvalidate();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBorderProgress", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getBorderProgress() {        return mAnimatorProgress;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "onTextChanged", "params": ["CharSequence", "int", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onTextChanged(CharSequence text, int start, int lengthBefore, int lengthAfter) {        super.onTextChanged(text, start, lengthBefore, lengthAfter);        if (text.length() > 0 && isFocused()) {            if (!clear_image_isShow) {                clear_image_isShow = true;                startVisibleAnimator();            }        } else {            if (clear_image_isShow) {                clear_image_isShow = false;                startGoneAnimator();            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "onTouchEvent", "params": ["MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onTouchEvent(MotionEvent event) {        if (event.getAction() == MotionEvent.ACTION_UP) {            boolean clearTouched =                    (getWidth() - visible_res_padding - visible_res_width < event.getX())                            && (event.getX() < getWidth() - visible_res_padding)                            && isFocused();            boolean visibleTouched =                    (getWidth() - visible_res_padding * 3 - visible_res_width * 2 < event.getX())                            && (event.getX() < getWidth() - visible_res_padding * 3 - visible_res_width)                            && show_password_image_isShow && isFocused();            if (clearTouched) {                setError(null);                setText(\"\");                return true;            } else if (visibleTouched) {                if (dismiss_password_image_isShow) {                    dismiss_password_image_isShow = false;                    setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD | InputType.TYPE_CLASS_TEXT);                    setSelection(getText().length());                    invalidate();                } else {                    dismiss_password_image_isShow = true;                    setInputType(InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD);                    setSelection(getText().length());                    invalidate();                }                return true;            }        }        return super.onTouchEvent(event);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "startShakeAnimation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startShakeAnimation() {        if (getAnimation() == null) {            setAnimation(shakeAnimation(4));        }        startAnimation(getAnimation());    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "shakeAnimation", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "Animation", "snippet": "    private Animation shakeAnimation(int counts) {        Animation translateAnimation = new TranslateAnimation(0, 10, 0, 0);        translateAnimation.setInterpolator(new CycleInterpolator(counts));        translateAnimation.setDuration(500);        return translateAnimation;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "createBitmap", "params": ["Context", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "Bitmap", "snippet": "    private Bitmap createBitmap(Context context, int resId, int defResId) {        if (resId != 0) {            return BitmapFactory.decodeResource(context.getResources(), resId);        } else {            return BitmapFactory.decodeResource(context.getResources(), defResId);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "dp2px", "params": ["Context", "float"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int dp2px(Context context, float dpValue){        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dpValue,context.getResources().getDisplayMetrics());    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/SeniorEditText.java", "stars": "1", "class": {"name": "SeniorEditText", "extends": "AppCompatEditText", "implements": null, "modifiers": ["public"]}}, {"method_name": "Renting", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void Renting() {        System.out.println(\"\u623f\u4e1c\u79df\u623f\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/proxy/staticproxy/Landlord.java", "stars": "2", "class": {"name": "Landlord", "extends": null, "implements": ["Rent"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/NpeCountry.java", "stars": "15", "class": {"name": "NpeCountry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/NpeCountry.java", "stars": "15", "class": {"name": "NpeCountry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCountryname", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCountryname() {    return countryname;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/NpeCountry.java", "stars": "15", "class": {"name": "NpeCountry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCountryname", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCountryname(String countryname) {    this.countryname = countryname;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/NpeCountry.java", "stars": "15", "class": {"name": "NpeCountry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCountrycode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCountrycode() {    return countrycode;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/NpeCountry.java", "stars": "15", "class": {"name": "NpeCountry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCountrycode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCountrycode(String countrycode) {    this.countrycode = countrycode;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/NpeCountry.java", "stars": "15", "class": {"name": "NpeCountry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object o) {    if (this == o) {      return true;    }    if (o == null || getClass() != o.getClass()) {      return false;    }    NpeCountry other = (NpeCountry) o;    // throws NPE when id is null    return id.equals(other.id);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/NpeCountry.java", "stars": "15", "class": {"name": "NpeCountry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    // throws NPE when id is null    return id.hashCode();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/NpeCountry.java", "stars": "15", "class": {"name": "NpeCountry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onUpdate", "params": ["UpdateEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpdate(UpdateEvent event) {        if (mc.player == null) {            target = null;        }        if (event.getTiming().equals(EventTiming.PRE)) {            targets = getTargets();            if (!targets.isEmpty()) {                target = targets.get(0);                BlockPos pos = new BlockPos(target.posX, target.posY, target.posZ);                    //Vec3d vec = AngleUtil.resolveBestHitVec(target, 3, walls);                    //BlockPos aimPos = new BlockPos(target.posX, target.posY - 1, target.posZ);                    if (canPlace()) {                        float[] rotation = AngleUtil.getRotationFromPosition(pos.getX() + 0.5, pos.getZ() + 0.5, pos.add(0, 0, 0).getY() - mc.player.getEyeHeight());                        event.getRotation().setYaw(!silent ? mc.player.rotationYaw = (rotation[0]) : rotation[0]);                        event.getRotation().setPitch(!silent ? mc.player.rotationPitch = rotation[1] : rotation[1]);                        int lastSlot;                        int slot;                        if (InventoryUtil.getItemSlot(mc.player.inventoryContainer, Item.getItemById(30)) < 36 && replenish) {                            InventoryUtil.swap(InventoryUtil.getItemSlot(mc.player.inventoryContainer, Item.getItemById(30)), 44);                        }                        slot = InventoryUtil.getItemSlotInHotbar(Item.getItemById(30));                        lastSlot = mc.player.inventory.currentItem;                        mc.player.inventory.currentItem = slot;                        mc.playerController.updateController();                        if (placeTimer.hasReached(1000 / speed)) {                            for (final EnumFacing side : EnumFacing.values()) {                                final BlockPos neighbor = pos.offset(side);                                if (canBeClicked(neighbor)) {                                    place(neighbor, side.getOpposite());                                }                            }                            placeTimer.reset();                        }                        mc.player.inventory.currentItem = lastSlot;                        mc.playerController.updateController();                    }            } else if (target != null)                target = null;        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/AutoWeb.java", "stars": "12", "class": {"name": "AutoWeb", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "canBeClicked", "params": ["BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean canBeClicked(final BlockPos pos) {        return mc.world.getBlockState(pos).getBlock().canCollideCheck(mc.world.getBlockState(pos), false);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/AutoWeb.java", "stars": "12", "class": {"name": "AutoWeb", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "place", "params": ["BlockPos", "EnumFacing"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void place(BlockPos pos, EnumFacing direction) {        if (swing) {            mc.player.swingArm(mc.player.getActiveHand());        } else {            mc.player.connection.sendPacket(new CPacketAnimation(EnumHand.MAIN_HAND));        }        mc.player.connection.sendPacket(new CPacketPlayerTryUseItemOnBlock(pos, direction, EnumHand.MAIN_HAND, 0.0F, 0.0F, 0.0F));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/AutoWeb.java", "stars": "12", "class": {"name": "AutoWeb", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "canPlace", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean canPlace() {        return InventoryUtil.getItemCount(mc.player.inventoryContainer, Item.getItemById(30)) != 0;        }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/AutoWeb.java", "stars": "12", "class": {"name": "AutoWeb", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTargets", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<EntityLivingBase>", "snippet": "    public List<EntityLivingBase> getTargets() {        List<EntityLivingBase> targets = new ArrayList<>();        for (Object o : mc.world.getLoadedEntityList()) {            if (o instanceof EntityLivingBase) {                EntityLivingBase entity = (EntityLivingBase) o;                if (doesQualify(entity)) {                    targets.add(entity);                }            }        }        targets.sort((o1, o2) -> {            float[] rot1 = AngleUtil.getRotations(o1);            float[] rot2 = AngleUtil.getRotations(o2);            return Float.compare(rot2[0], rot1[0]);        });        return targets;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/AutoWeb.java", "stars": "12", "class": {"name": "AutoWeb", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "doesQualify", "params": ["EntityLivingBase"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean doesQualify(EntityLivingBase entity) {        final double d = reach;        BlockPos pos = new BlockPos(entity.posX, entity.posY, entity.posZ);        final boolean freecam = Mercury.INSTANCE.getModuleManager().find(Freecam.class).isEnabled() && entity != Freecam.entity;        return entity != null && !(mc.world.getBlockState(pos).getBlock() instanceof BlockWeb) && entity.onGround && entity.isEntityAlive() && AngleUtil.isEntityInFov(entity, fov)                && entity.isEntityAlive() && entity.getHealth() > 0.0f && entity != mc.player                && ((entity instanceof EntityPlayer && players) || ((entity instanceof EntityAnimal                || entity instanceof EntityMob || entity instanceof EntitySlime || entity instanceof EntityVillager) && mobs))                && entity.getDistanceSq(mc.player) <= d * d                && (!entity.isInvisible() || invisibles) && !Mercury.INSTANCE.getFriendManager().isFriend(entity.getName())                && (!entity.isInvisible() || invisibles);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/AutoWeb.java", "stars": "12", "class": {"name": "AutoWeb", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "index", "params": ["Model"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String index(Model model) {\t\tMap<String, Object> dashboardMap = xxlJobService.dashboardInfo();\t\tmodel.addAllAttributes(dashboardMap);\t\treturn \"index\";\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/IndexController.java", "stars": "1", "class": {"name": "IndexController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "chartInfo", "params": ["Date", "Date"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<Map>", "snippet": "\tpublic ReturnT<Map<String, Object>> chartInfo(Date startDate, Date endDate) {        ReturnT<Map<String, Object>> chartInfo = xxlJobService.chartInfo(startDate, endDate);        return chartInfo;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/IndexController.java", "stars": "1", "class": {"name": "IndexController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toLogin", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toLogin(HttpServletRequest request, HttpServletResponse response) {\t\tif (loginService.ifLogin(request, response) != null) {\t\t\treturn \"redirect:/\";\t\t}\t\treturn \"login\";\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/IndexController.java", "stars": "1", "class": {"name": "IndexController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loginDo", "params": ["HttpServletRequest", "HttpServletResponse", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "\tpublic ReturnT<String> loginDo(HttpServletRequest request, HttpServletResponse response, String userName, String password, String ifRemember){\t\tboolean ifRem = (ifRemember!=null && ifRemember.trim().length()>0 && \"on\".equals(ifRemember))?true:false;\t\treturn loginService.login(request, response, userName, password, ifRem);\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/IndexController.java", "stars": "1", "class": {"name": "IndexController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "logout", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "\tpublic ReturnT<String> logout(HttpServletRequest request, HttpServletResponse response){\t\treturn loginService.logout(request, response);\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/IndexController.java", "stars": "1", "class": {"name": "IndexController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "help", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String help() {\t\t/*if (!PermissionInterceptor.ifLogin(request)) {\t\t\treturn \"redirect:/toLogin\";\t\t}*/\t\treturn \"help\";\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/IndexController.java", "stars": "1", "class": {"name": "IndexController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initBinder", "params": ["WebDataBinder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initBinder(WebDataBinder binder) {\t\tSimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\t\tdateFormat.setLenient(false);\t\tbinder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/IndexController.java", "stars": "1", "class": {"name": "IndexController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAsObject", "params": ["FacesContext", "UIComponent", "String"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\t\tpublic Object getAsObject(FacesContext context, UIComponent component, String value) {\t\t\tif (value == null || value.isEmpty()) {\t\t\t\treturn null;\t\t\t}\t\t\treturn dao.buscarPorId(new Long(value));\t\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/converter/ClienteConverter.java", "stars": "1", "class": {"name": "ClienteConverter", "extends": null, "implements": ["Converter"], "modifiers": ["public"]}}, {"method_name": "getAsString", "params": ["FacesContext", "UIComponent", "Object"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String getAsString(FacesContext context, UIComponent component, Object value) {\t\t\tif (value == null) {\t\t\t\treturn null;\t\t\t}\t\t\tCliente cliente = (Cliente) value;\t\t\tif (cliente.getId() == null) {\t\t\t\treturn null;\t\t\t}\t// ta dizendo q a categoria \u00e9 representada pelo id\t\t\treturn cliente.getId().toString();\t\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/converter/ClienteConverter.java", "stars": "1", "class": {"name": "ClienteConverter", "extends": null, "implements": ["Converter"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_register);        mAuth = FirebaseAuth.getInstance();        email=findViewById(R.id.editText);        pass=findViewById(R.id.editText2);        phone=findViewById(R.id.phoneno);        username=findViewById(R.id.username);    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/register.java", "stars": "2", "class": {"name": "register", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "login", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void login(View v){        AlphaAnimation buttonClick = new AlphaAnimation(1F, 0.8F);        v.startAnimation(buttonClick);        Vibrator vv = (Vibrator) getApplicationContext().getSystemService(Context.VIBRATOR_SERVICE);        vv.vibrate(100);        if(username.getText().toString().equals(\"\")||phone.getText().toString().equals(\"\")||email.getText().toString().equals(\"\"))        {            Toast.makeText(getApplicationContext(),\"NULL CREDENTISLD :(\",Toast.LENGTH_SHORT).show();        }        else        {            mAuth.createUserWithEmailAndPassword(email.getText().toString(),pass.getText().toString()).addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {                @Override                public void onComplete(@NonNull Task<AuthResult> task) {                    if(task.isSuccessful()){                        Toast.makeText(getApplicationContext(),\"Successfully Registered\",Toast.LENGTH_SHORT).show();                        String na=username.getText().toString();                        DatabaseReference dref=fb.getReference(\"Users\");                        dref.child(na).child(\"Phone_number\").setValue(phone.getText().toString());                        dref.child(na).child(\"E_mail\").setValue(email.getText().toString());                        DatabaseReference dd=fb.getReference(\"Phonenumbers\");                        dd.child(phone.getText().toString()).setValue(username.getText().toString());                        Intent i = new Intent(getApplicationContext(),login.class);                        startActivity(i);                        finishAffinity();                    }                    else{                        Toast.makeText(getApplicationContext(),\"ERROR IN CREATING ACCOUNT\",Toast.LENGTH_SHORT).show();                    }                }            });        }        }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/register.java", "stars": "2", "class": {"name": "register", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        super.init();        if (Mercury.INSTANCE.getPropertyManager().getPropertiesFromObject(module) != null) {            float offsetY = getH();            for (IProperty property : Mercury.INSTANCE.getPropertyManager().getPropertiesFromObject(module)) {                if (property.getValue() instanceof Boolean) {                    getSubComponents().add(new BooleanComponent((BooleanProperty) property, getX(), getY(),0, offsetY, getW(), getH()));                    offsetY += 15;                }                if (property.getValue() instanceof Number) {                    getSubComponents().add(new NumberComponent((NumberProperty) property, getX(), getY(),0, offsetY, getW(), getH()));                    offsetY += 15;                }                if (property instanceof ModeStringProperty) {                    getSubComponents().add(new ModeComponent((ModeStringProperty) property, getX(), getY(),0, offsetY, getW(), getH()));                    offsetY += 15;                }            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/ModuleComponent.java", "stars": "12", "class": {"name": "ModuleComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "moved", "params": ["float", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void moved(float x, float y) {        super.moved(x, y);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/ModuleComponent.java", "stars": "12", "class": {"name": "ModuleComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawScreen", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawScreen(int mx, int my, float partialTicks) {        final boolean hovered = MouseUtil.withinBounds(mx, my, getX(), getY(), getW(), getH());        RenderUtil.drawRect2(getX(), getY(), getW(), getH(), hovered ? new Color(0, 0, 0, 200).getRGB() : (this.module.isEnabled() ? new Color(5, 5, 5, 200).getRGB() : new Color(14, 14, 14, 200).getRGB()));        if (this.module.isEnabled()) {            RenderUtil.drawRect2(getX(), getY(), 1, getH(), Color.CYAN.darker().getRGB());        }        try {            if (!Mercury.INSTANCE.getPropertyManager().getPropertiesFromObject(this.module).isEmpty()) {                Menu.font.drawStringWithShadow(this.isExtended() ? \"-\" : \"+\", (getX() + getW() - 10), getY() + getH() / 2 - Menu.font.getHeight() / 2, new Color(200, 200, 200, 255).getRGB());            }        }        catch (Exception ex) {}        Menu.font.drawStringWithShadow(isBinding() ? \"Press a key...\" : getLabel(), getX() + getW() / 2 - Menu.font.getStringWidth(isBinding() ? \"Press a key...\" : getLabel()) / 2, getY() + getH() / 2 - Menu.font.getHeight() / 2, module.isEnabled() ? -1 : 0xff707070);        if (hovered) {            if (!this.module.getDescription().equals(\"\") && descTimer.hasReached(1000)) {                Menu.font.drawCenteredStringWithShadow(module.getDescription(), mx + 4, my - 5, -1);            }        } else {            descTimer.reset();        }        if (isExtended())            super.drawScreen(mx, my, partialTicks);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/ModuleComponent.java", "stars": "12", "class": {"name": "ModuleComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "mouseClicked", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mouseClicked(int mx, int my, int button) {        final boolean hovered = MouseUtil.withinBounds(mx, my, getX(), getY(), getW(), getH());        switch (button) {            case 0:                if (hovered && !isBinding())                    module.setEnabled(!module.isEnabled());                break;            case 1:                if (hovered && !getSubComponents().isEmpty())                    setExtended(!isExtended());                break;            case 2:                if (hovered)                    setBinding(!isBinding());                break;            default:                break;        }        if (isExtended())            super.mouseClicked(mx, my, button);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/ModuleComponent.java", "stars": "12", "class": {"name": "ModuleComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "mouseReleased", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mouseReleased(int x, int y, int button) {        if (isExtended())            super.mouseReleased(x, y, button);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/ModuleComponent.java", "stars": "12", "class": {"name": "ModuleComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "keyTyped", "params": ["char", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void keyTyped(char character, int key) {        super.keyTyped(character, key);        if (isBinding() && module instanceof Module) {            module.setBind(key == Keyboard.KEY_ESCAPE || key == Keyboard.KEY_SPACE || key == Keyboard.KEY_DELETE ? Keyboard.KEY_NONE : key);            ChatUtil.print(\"Bound \" + getLabel() + \" to \" + Keyboard.getKeyName(module.getBind()));            setBinding(false);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/ModuleComponent.java", "stars": "12", "class": {"name": "ModuleComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "getModule", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Module", "snippet": "    public Module getModule() {        return module;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/ModuleComponent.java", "stars": "12", "class": {"name": "ModuleComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "isExtended", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isExtended() {        return extended;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/ModuleComponent.java", "stars": "12", "class": {"name": "ModuleComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "setExtended", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExtended(boolean extended) {        this.extended = extended;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/ModuleComponent.java", "stars": "12", "class": {"name": "ModuleComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "isBinding", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isBinding() {        return binding;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/ModuleComponent.java", "stars": "12", "class": {"name": "ModuleComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "setBinding", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBinding(boolean binding) {        this.binding = binding;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/ModuleComponent.java", "stars": "12", "class": {"name": "ModuleComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "setMyContentView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setMyContentView() {        mDataBinding = DataBindingUtil.setContentView(this, getLayoutResId());    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/base/DataBindBaseActivity.java", "stars": "2", "class": {"name": "DataBindBaseActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "run", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void run() throws Exception {    HadoopConfigurationInjector.prepareResourcesToInject(getJobProps(),        getWorkingDirectory());    if (shouldProxy && obtainTokens) {      userToProxy = getJobProps().getString(USER_TO_PROXY);      getLog().info(\"Need to proxy. Getting tokens.\");      // get tokens in to a file, and put the location in props      Props props = new Props();      props.putAll(getJobProps());      props.putAll(getSysProps());      tokenFile =          HadoopJobUtils              .getHadoopTokens(hadoopSecurityManager, props, getLog());      getJobProps().put(\"env.\" + HADOOP_TOKEN_FILE_LOCATION,          tokenFile.getAbsolutePath());    }    // If we enable dynamic resource allocation or node labeling in jobtype property,    // then set proper env var for client wrapper(HadoopSecureSparkWrapper) to modify spark job conf    // before calling spark-submit to enforce every spark job uses dynamic allocation or node labeling    if (getSysProps().getBoolean(SPARK_DYNAMIC_RES_JOBTYPE_PROPERTY, Boolean.FALSE)) {      getJobProps().put(\"env.\" + SPARK_DYNAMIC_RES_ENV_VAR, Boolean.TRUE.toString());    }    if (getSysProps().getBoolean(SPARK_NODE_LABELING_JOBTYPE_PROPERTY, Boolean.FALSE)) {      getJobProps().put(\"env.\" + SPARK_NODE_LABELING_ENV_VAR, Boolean.TRUE.toString());    }    if (getSysProps().getBoolean(SPARK_AUTO_NODE_LABELING_JOBTYPE_PROPERTY, Boolean.FALSE)) {      String desiredNodeLabel = getSysProps().get(SPARK_DESIRED_NODE_LABEL_JOBTYPE_PROPERTY);      String minMemVcoreRatio = getSysProps().get(SPARK_MIN_MEM_VCORE_RATIO_JOBTYPE_PROPERTY);      if (desiredNodeLabel == null || minMemVcoreRatio == null) {        throw new RuntimeException(SPARK_DESIRED_NODE_LABEL_JOBTYPE_PROPERTY + \" and \" +            SPARK_MIN_MEM_VCORE_RATIO_JOBTYPE_PROPERTY + \" must be configured when \" +            SPARK_AUTO_NODE_LABELING_JOBTYPE_PROPERTY + \" is set to true.\");      }      if (!NumberUtils.isNumber(minMemVcoreRatio)) {        throw new RuntimeException(SPARK_MIN_MEM_VCORE_RATIO_JOBTYPE_PROPERTY + \" is configured as \" +            minMemVcoreRatio + \", but it must be a number.\");      }      getJobProps().put(\"env.\" + SPARK_AUTO_NODE_LABELING_ENV_VAR, Boolean.TRUE.toString());      getJobProps().put(\"env.\" + SPARK_DESIRED_NODE_LABEL_ENV_VAR, desiredNodeLabel);      getJobProps().put(\"env.\" + SPARK_MIN_MEM_VCORE_RATIO_ENV_VAR, minMemVcoreRatio);    }    try {      super.run();    } catch (Throwable t) {      t.printStackTrace();      getLog().error(\"caught error running the job\");      throw new Exception(t);    } finally {      if (tokenFile != null) {        HadoopJobUtils.cancelHadoopTokens(hadoopSecurityManager, userToProxy,            tokenFile, getLog());        if (tokenFile.exists()) {          tokenFile.delete();        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSparkJob.java", "stars": "18", "class": {"name": "HadoopSparkJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJavaClass", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getJavaClass() {    return HADOOP_SECURE_SPARK_WRAPPER;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSparkJob.java", "stars": "18", "class": {"name": "HadoopSparkJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJVMArguments", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getJVMArguments() {    String args = super.getJVMArguments();    String typeUserGlobalJVMArgs =        getJobProps().getString(HadoopJobUtils.JOBTYPE_GLOBAL_JVM_ARGS, null);    if (typeUserGlobalJVMArgs != null) {      args += \" \" + typeUserGlobalJVMArgs;    }    String typeSysGlobalJVMArgs =        getSysProps().getString(HadoopJobUtils.JOBTYPE_GLOBAL_JVM_ARGS, null);    if (typeSysGlobalJVMArgs != null) {      args += \" \" + typeSysGlobalJVMArgs;    }    String typeUserJVMArgs =        getJobProps().getString(HadoopJobUtils.JOBTYPE_JVM_ARGS, null);    if (typeUserJVMArgs != null) {      args += \" \" + typeUserJVMArgs;    }    String typeSysJVMArgs =        getSysProps().getString(HadoopJobUtils.JOBTYPE_JVM_ARGS, null);    if (typeSysJVMArgs != null) {      args += \" \" + typeSysJVMArgs;    }    String typeUserJVMArgs2 =        getJobProps().getString(HadoopJobUtils.JVM_ARGS, null);    if (typeUserJVMArgs != null) {      args += \" \" + typeUserJVMArgs2;    }    String typeSysJVMArgs2 =        getSysProps().getString(HadoopJobUtils.JVM_ARGS, null);    if (typeSysJVMArgs != null) {      args += \" \" + typeSysJVMArgs2;    }    if (shouldProxy) {      info(\"Setting up secure proxy info for child process\");      String secure;      secure =          \" -D\" + HadoopSecurityManager.USER_TO_PROXY + \"=\"              + getJobProps().getString(HadoopSecurityManager.USER_TO_PROXY);      String extraToken =          getSysProps().getString(HadoopSecurityManager.OBTAIN_BINARY_TOKEN,              \"false\");      if (extraToken != null) {        secure +=            \" -D\" + HadoopSecurityManager.OBTAIN_BINARY_TOKEN + \"=\"                + extraToken;      }      info(\"Secure settings = \" + secure);      args += secure;    } else {      info(\"Not setting up secure proxy info for child process\");    }    return args;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSparkJob.java", "stars": "18", "class": {"name": "HadoopSparkJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMainArguments", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getMainArguments() {    // Build the main() arguments for HadoopSecureSparkWrapper, which are then    // passed to spark-submit    return testableGetMainArguments(jobProps, getWorkingDirectory(), getLog());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSparkJob.java", "stars": "18", "class": {"name": "HadoopSparkJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "testableGetMainArguments", "params": ["Props", "String", "Logger"], "throws": null, "modifiers": ["static"], "return_type": "String", "snippet": "  static String testableGetMainArguments(Props jobProps, String workingDir,      Logger log) {    // if we ever need to recreate a failure scenario in the test case    log.debug(jobProps);    log.debug(workingDir);    List<String> argList = new ArrayList<String>();    // special case handling for DRIVER_JAVA_OPTIONS    argList.add(SparkJobArg.DRIVER_JAVA_OPTIONS.sparkParamName);    StringBuilder driverJavaOptions = new StringBuilder();    // note the default java opts are communicated through the hadoop conf and    // added in the    // HadoopSecureSparkWrapper    if (jobProps.containsKey(SparkJobArg.DRIVER_JAVA_OPTIONS.azPropName)) {      driverJavaOptions.append(\" \"          + jobProps.getString(SparkJobArg.DRIVER_JAVA_OPTIONS.azPropName));    }    argList.add(driverJavaOptions.toString());    // Note that execution_jar and params must appear in order, and as the last    // 2 params    // Because of the position they are specified in the SparkJobArg class, this    // should not be an    // issue    for (SparkJobArg sparkJobArg : SparkJobArg.values()) {      if (!sparkJobArg.needSpecialTreatment) {        handleStandardArgument(jobProps, argList, sparkJobArg);      } else if (sparkJobArg.equals(SparkJobArg.SPARK_JARS)) {        sparkJarsHelper(jobProps, workingDir, log, argList);      } else if (sparkJobArg.equals(SparkJobArg.SPARK_CONF_PREFIX)) {        sparkConfPrefixHelper(jobProps, argList);      } else if (sparkJobArg.equals(SparkJobArg.DRIVER_JAVA_OPTIONS)) {        // do nothing because already handled above      } else if (sparkJobArg.equals(SparkJobArg.SPARK_FLAG_PREFIX)) {        sparkFlagPrefixHelper(jobProps, argList);      } else if (sparkJobArg.equals(SparkJobArg.EXECUTION_JAR)) {        executionJarHelper(jobProps, workingDir, log, argList);      } else if (sparkJobArg.equals(SparkJobArg.PARAMS)) {        paramsHelper(jobProps, argList);      } else if (sparkJobArg.equals(SparkJobArg.SPARK_VERSION)) {        // do nothing since this arg is not a spark-submit argument        // it is only used in getClassPaths() below      }    }    return StringUtils        .join((Collection<String>) argList, SparkJobArg.delimiter);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSparkJob.java", "stars": "18", "class": {"name": "HadoopSparkJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "paramsHelper", "params": ["Props", "List<String>"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void paramsHelper(Props jobProps, List<String> argList) {    if (jobProps.containsKey(SparkJobArg.PARAMS.azPropName)) {      String params = jobProps.getString(SparkJobArg.PARAMS.azPropName);      String[] paramsList = params.split(\" \");      for (String s : paramsList) {        argList.add(s);      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSparkJob.java", "stars": "18", "class": {"name": "HadoopSparkJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "executionJarHelper", "params": ["Props", "String", "Logger", "List<String>"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void executionJarHelper(Props jobProps, String workingDir,      Logger log, List<String> argList) {    if (jobProps.containsKey(SparkJobArg.EXECUTION_JAR.azPropName)) {      String executionJarName =          HadoopJobUtils.resolveExecutionJarName(workingDir,              jobProps.getString(SparkJobArg.EXECUTION_JAR.azPropName), log);      argList.add(executionJarName);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSparkJob.java", "stars": "18", "class": {"name": "HadoopSparkJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "sparkFlagPrefixHelper", "params": ["Props", "List<String>"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void sparkFlagPrefixHelper(Props jobProps, List<String> argList) {    for (Entry<String, String> entry : jobProps.getMapByPrefix(        SparkJobArg.SPARK_FLAG_PREFIX.azPropName).entrySet()) {      if (\"true\".equalsIgnoreCase(entry.getValue()))        argList.add(SparkJobArg.SPARK_FLAG_PREFIX.sparkParamName            + entry.getKey());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSparkJob.java", "stars": "18", "class": {"name": "HadoopSparkJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "sparkJarsHelper", "params": ["Props", "String", "Logger", "List<String>"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void sparkJarsHelper(Props jobProps, String workingDir,      Logger log, List<String> argList) {    String propSparkJars =        jobProps.getString(SparkJobArg.SPARK_JARS.azPropName, \"\");    String jarList =        HadoopJobUtils            .resolveWildCardForJarSpec(workingDir, propSparkJars, log);    if (jarList.length() > 0) {      argList.add(SparkJobArg.SPARK_JARS.sparkParamName);      argList.add(jarList);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSparkJob.java", "stars": "18", "class": {"name": "HadoopSparkJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "sparkConfPrefixHelper", "params": ["Props", "List<String>"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void sparkConfPrefixHelper(Props jobProps, List<String> argList) {    for (Entry<String, String> entry : jobProps.getMapByPrefix(        SparkJobArg.SPARK_CONF_PREFIX.azPropName).entrySet()) {      argList.add(SparkJobArg.SPARK_CONF_PREFIX.sparkParamName);      String sparkConfKeyVal =          String.format(\"%s=%s\", entry.getKey(), entry.getValue());      argList.add(sparkConfKeyVal);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSparkJob.java", "stars": "18", "class": {"name": "HadoopSparkJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleStandardArgument", "params": ["Props", "List<String>", "SparkJobArg"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void handleStandardArgument(Props jobProps,      List<String> argList, SparkJobArg sparkJobArg) {    if (jobProps.containsKey(sparkJobArg.azPropName)) {      argList.add(sparkJobArg.sparkParamName);      argList.add(jobProps.getString(sparkJobArg.azPropName));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSparkJob.java", "stars": "18", "class": {"name": "HadoopSparkJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getClassPaths", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "List<String>", "snippet": "  protected List<String> getClassPaths() {    // The classpath for the process that runs HadoopSecureSparkWrapper    String pluginDir = getSysProps().get(\"plugin.dir\");    List<String> classPath = super.getClassPaths();    classPath.add(getSourcePathFromClass(Props.class));    classPath.add(getSourcePathFromClass(HadoopSecureHiveWrapper.class));    classPath.add(getSourcePathFromClass(HadoopSecurityManager.class));    classPath.add(HadoopConfigurationInjector.getPath(getJobProps(),        getWorkingDirectory()));    List<String> typeClassPath =        getSysProps().getStringList(\"jobtype.classpath\", null, \",\");    info(\"Adding jobtype.classpath: \" + typeClassPath);    if (typeClassPath != null) {      // fill in this when load this jobtype      for (String jar : typeClassPath) {        File jarFile = new File(jar);        if (!jarFile.isAbsolute()) {          jarFile = new File(pluginDir + File.separatorChar + jar);        }        File tempFile = jarFile.getAbsoluteFile();        if (!classPath.contains(tempFile.getPath())) {          classPath.add(tempFile.getPath());        }      }    }    // Decide spark home/conf and append Spark classpath for the client.    String[] sparkHomeConf = getSparkHomeConf();    classPath.add(sparkHomeConf[0] + \"/jars/*\");    classPath.add(sparkHomeConf[1]);    List<String> typeGlobalClassPath =        getSysProps().getStringList(\"jobtype.global.classpath\", null, \",\");    info(\"Adding jobtype.global.classpath: \" + typeGlobalClassPath);    if (typeGlobalClassPath != null) {      for (String jar : typeGlobalClassPath) {        if (!classPath.contains(jar)) {          classPath.add(jar);        }      }    }    info(\"Final classpath: \" + classPath);    return classPath;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSparkJob.java", "stars": "18", "class": {"name": "HadoopSparkJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSparkHomeConf", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String[] getSparkHomeConf() {    String sparkHome = null;    String sparkConf = null;    // If user has specified version in job property. e.g. spark.version=1.6.0    String jobSparkVer = getJobProps().get(SparkJobArg.SPARK_VERSION.azPropName);    if (jobSparkVer != null) {      info(\"This job sets spark version: \" + jobSparkVer);      // Spark jobtype supports this version through plugin's jobtype config      // e.g. spark.1.6.0.home=/path_to_spark/ in commonprivate.properties      sparkHome = getSysProps().get(\"spark.\" + jobSparkVer + \".home\");      if (sparkHome != null) {        sparkConf = getSysProps().get(\"spark.\" + jobSparkVer + \".conf\");        if (sparkConf == null) {          sparkConf = sparkHome + \"/conf\";        }        info(\"Using job specific spark: \" + sparkHome + \" and conf: \" + sparkConf);        // Override the SPARK_HOME SPARK_CONF_DIR env for HadoopSecureSparkWrapper process(spark client)        getJobProps().put(\"env.\" + SPARK_HOME_ENV_VAR, sparkHome);        getJobProps().put(\"env.\" + SPARK_CONF_DIR_ENV_VAR, sparkConf);      } else {        info(\"The spark version \" + jobSparkVer +\" is not supported. Using system default.\");      }    }    // User job doesn't give spark.version    if (sparkHome == null) {      // Use default spark.home. Configured in the jobtype plugin's config      sparkHome = getSysProps().get(\"spark.home\");      if (sparkHome == null) {        // Use system default SPARK_HOME env        sparkHome = System.getenv(SPARK_HOME_ENV_VAR);      }      sparkConf = (System.getenv(SPARK_CONF_DIR_ENV_VAR) != null) ?        System.getenv(SPARK_CONF_DIR_ENV_VAR) : (sparkHome + \"/conf\");      info(\"Using system default spark: \" + sparkHome + \" and conf: \" + sparkConf);    }    if (sparkHome == null) {      throw new RuntimeException(\"SPARK is not available on the azkaban machine.\");    } else {      File homeDir = new File(sparkHome);      if (!homeDir.exists()) {        throw new RuntimeException(\"SPARK home dir does not exist.\");      }      File confDir = new File(sparkConf);      if (!confDir.exists()) {        error(\"SPARK conf dir does not exist. Will use SPARK_HOME/conf as default.\");        sparkConf = sparkHome + \"/conf\";      }      File defaultSparkConf = new File(sparkConf + \"/spark-defaults.conf\");      if (!defaultSparkConf.exists()) {        throw new RuntimeException(\"Default Spark config file spark-defaults.conf cannot\"            + \" be found at \" + defaultSparkConf);      }    }    return new String[]{sparkHome, sparkConf};  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSparkJob.java", "stars": "18", "class": {"name": "HadoopSparkJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSourcePathFromClass", "params": ["Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String getSourcePathFromClass(Class<?> containedClass) {    File file =        new File(containedClass.getProtectionDomain().getCodeSource()            .getLocation().getPath());    if (!file.isDirectory() && file.getName().endsWith(\".class\")) {      String name = containedClass.getName();      StringTokenizer tokenizer = new StringTokenizer(name, \".\");      while (tokenizer.hasMoreTokens()) {        tokenizer.nextElement();        file = file.getParentFile();      }      return file.getPath();    } else {      return containedClass.getProtectionDomain().getCodeSource().getLocation()          .getPath();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSparkJob.java", "stars": "18", "class": {"name": "HadoopSparkJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "cancel", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancel() throws InterruptedException {    super.cancel();    info(\"Cancel called.  Killing the Spark job on the cluster\");    String azExecId = jobProps.getString(CommonJobProperties.EXEC_ID);    final String logFilePath =        String.format(\"%s/_job.%s.%s.log\", getWorkingDirectory(), azExecId,            getId());    info(\"log file path is: \" + logFilePath);    HadoopJobUtils.proxyUserKillAllSpawnedHadoopJobs(logFilePath, jobProps,        tokenFile, getLog());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSparkJob.java", "stars": "18", "class": {"name": "HadoopSparkJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "calculate", "params": ["double", "double", "double", "int", "DoubleUnaryOperator"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String calculate(double searched, double start, double end, int n, DoubleUnaryOperator function) throws Exception {        validate(searched, start, end, n);        var points = arrayPoints(start, end, n, function);        var xs = points.getKey();        var ys = points.getValue();        var length = points.getKey().length;        double xAvg = Arrays.stream(xs).average().orElse(Double.NaN);        double yAvg = Arrays.stream(ys).average().orElse(Double.NaN);        double x2Avg = Arrays.stream(xs).map(a -> a * a).average().orElse(Double.NaN);        double x3Avg = Arrays.stream(xs).map(a -> a * a * a).average().orElse(Double.NaN);        double x4Avg = Arrays.stream(xs).map(a -> a * a * a * a).average().orElse(Double.NaN);        double xyAvg = 0.0;        for (int i = 0; i < length; ++i)            xyAvg += xs[i] * ys[i];        xyAvg /= length;        double x2yAvg = 0.0;        for (int i = 0; i < length; ++i)            x2yAvg += xs[i] * xs[i] * ys[i];        x2yAvg /= length;        double sxx = x2Avg - xAvg * xAvg;        double sxy = xyAvg - xAvg * yAvg;        double sxx2 = x3Avg - xAvg * x2Avg;        double sx2x2 = x4Avg - x2Avg * x2Avg;        double sx2y = x2yAvg - x2Avg * yAvg;        double b = (sxy * sx2x2 - sx2y * sxx2) / (sxx * sx2x2 - sxx2 * sxx2);        double c = (sx2y * sxx - sxy * sxx2) / (sxx * sx2x2 - sxx2 * sxx2);        double a = yAvg - b * xAvg - c * x2Avg;        DoubleUnaryOperator y = (double x) -> a + b * x + c * x * x;        return \"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \" + y.applyAsDouble(searched);    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/nmlab6/regression/LsQuadraticRegression.java", "stars": "2", "class": {"name": "LsQuadraticRegression", "extends": null, "implements": ["Regression"], "modifiers": ["public"]}}, {"method_name": "getCellTypeFromChar", "params": ["char"], "throws": null, "modifiers": ["private"], "return_type": "CellType", "snippet": "    private CellType getCellTypeFromChar(char cellChar) {        switch (cellChar) {        case '#':        case 'x':            return CellType.WALL;        case ' ':        case '.':        case 'o':            return CellType.FLOOR;        default:            throw new RuntimeException(\"Unrecognised cell type: \" + cellChar);        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Grid.java", "stars": "15", "class": {"name": "Grid", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cellHasPellet", "params": ["char"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean cellHasPellet(char cellChar) {        switch (cellChar) {        case '#':        case 'x':        case ' ':            return false;        case '.':        case 'o':            return true;        default:            throw new RuntimeException(\"Unrecognised cell type: \" + cellChar);        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Grid.java", "stars": "15", "class": {"name": "Grid", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["Coord"], "throws": null, "modifiers": ["public"], "return_type": "Cell", "snippet": "    public Cell get(Coord coord) {        return get(coord.x, coord.y);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Grid.java", "stars": "15", "class": {"name": "Grid", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Cell", "snippet": "    public Cell get(int x, int y) {        return cells.getOrDefault(new Coord(x, y), Cell.NO_CELL);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Grid.java", "stars": "15", "class": {"name": "Grid", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNeighbours", "params": ["Coord"], "throws": null, "modifiers": ["public"], "return_type": "List<Coord>", "snippet": "    public List<Coord> getNeighbours(Coord pos) {        return Arrays            .stream(Config.ADJACENCY)            .map(delta -> getCoordNeighbour(pos, delta))            .filter(Optional::isPresent)            .map(Optional::get)            .collect(Collectors.toList());    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Grid.java", "stars": "15", "class": {"name": "Grid", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCoordNeighbour", "params": ["Coord", "Coord"], "throws": null, "modifiers": ["public"], "return_type": "Optional<Coord>", "snippet": "    public Optional<Coord> getCoordNeighbour(Coord pos, Coord delta) {        Coord n = pos.add(delta);        if (Config.MAP_WRAPS) {            n = new Coord((n.x + width) % width, n.y);            }        if (get(n) != Cell.NO_CELL) {            return Optional.of(n);        }        return Optional.empty();    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Grid.java", "stars": "15", "class": {"name": "Grid", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "calculateDistance", "params": ["Coord", "Coord"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int calculateDistance(Coord a, Coord b) {        int dv = Math.abs(a.y - b.y);        int dh = Math.min(            Math.abs(a.x - b.x),            Math.min(a.x + width - b.x, b.x + width - a.x)        );        return dv + dh;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Grid.java", "stars": "15", "class": {"name": "Grid", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getWidth() {        return width;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Grid.java", "stars": "15", "class": {"name": "Grid", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getHeight() {        return height;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Grid.java", "stars": "15", "class": {"name": "Grid", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCells", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<Coord,Cell>", "snippet": "    public Map<Coord, Cell> getCells() {        return cells;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Grid.java", "stars": "15", "class": {"name": "Grid", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllPellets", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Coord>", "snippet": "    public List<Coord> getAllPellets() {        return cells.entrySet().stream().filter(e -> e.getValue().hasPellet()).map(e -> e.getKey()).collect(Collectors.toList());    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Grid.java", "stars": "15", "class": {"name": "Grid", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllCherries", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Coord>", "snippet": "    public List<Coord> getAllCherries() {        return cells.entrySet().stream().filter(e -> e.getValue().hasCherry()).map(e -> e.getKey()).collect(Collectors.toList());    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Grid.java", "stars": "15", "class": {"name": "Grid", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": ["Context", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void start(Context context, String phone, String code) {        Intent intent = new Intent(context, PasswordResetActivity.class);        intent.putExtra(IntentKey.PHONE, phone);        intent.putExtra(IntentKey.CODE, code);        context.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PasswordResetActivity.java", "stars": "1", "class": {"name": "PasswordResetActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.activity_password_reset;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PasswordResetActivity.java", "stars": "1", "class": {"name": "PasswordResetActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        InputTextHelper.with(this)                .addView(mPasswordView1)                .addView(mPasswordView2)                .setMain(mCommitView)                .setListener(helper -> mPasswordView1.getText().toString().length() >= 6 &&                        mPasswordView1.getText().toString().equals(mPasswordView2.getText().toString()))                .build();        setOnClickListener(R.id.btn_password_reset_commit);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PasswordResetActivity.java", "stars": "1", "class": {"name": "PasswordResetActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        mPhone = getString(IntentKey.PHONE);        mCode = getString(IntentKey.CODE);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PasswordResetActivity.java", "stars": "1", "class": {"name": "PasswordResetActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        if (v.getId() == R.id.btn_password_reset_commit) {            if (true) {                toast(R.string.password_reset_success);                finish();                return;            }            // \u91cd\u7f6e\u5bc6\u7801            EasyHttp.post(this)                    .api(new PasswordApi()                    .setPhone(mPhone)                    .setCode(mCode)                    .setPassword(mPasswordView1.getText().toString()))                    .request(new HttpCallback<HttpData<Void>>(this) {                        @Override                        public void onSucceed(HttpData<Void> data) {                            toast(R.string.password_reset_success);                            finish();                        }                    });        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PasswordResetActivity.java", "stars": "1", "class": {"name": "PasswordResetActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/IndicatorViewRenderer.java", "stars": "2", "class": {"name": "IndicatorViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/IndicatorViewRenderer.java", "stars": "2", "class": {"name": "IndicatorViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "sayHello", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sayHello() {        System.out.println(\"Hello \u6211\u662fMan!\");    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/24.%E3%80%90Stream%E6%B5%81%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%91%E7%AC%94%E8%AE%B0/code/13_StreamAndMethodReference/src/com/itheima/demo07/SuperMethodReference/Man.java", "stars": "2", "class": {"name": "Man", "extends": "Human", "implements": null, "modifiers": ["public"]}}, {"method_name": "method", "params": ["Greetable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void method(Greetable g){        g.greet();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/24.%E3%80%90Stream%E6%B5%81%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%91%E7%AC%94%E8%AE%B0/code/13_StreamAndMethodReference/src/com/itheima/demo07/SuperMethodReference/Man.java", "stars": "2", "class": {"name": "Man", "extends": "Human", "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void show(){        //\u8c03\u7528method\u65b9\u6cd5,\u65b9\u6cd5\u7684\u53c2\u6570Greetable\u662f\u4e00\u4e2a\u51fd\u6570\u5f0f\u63a5\u53e3,\u6240\u4ee5\u53ef\u4ee5\u4f20\u9012Lambda        /*method(()->{            //\u521b\u5efa\u7236\u7c7bHuman\u5bf9\u8c61            Human h = new Human();            //\u8c03\u7528\u7236\u7c7b\u7684sayHello\u65b9\u6cd5            h.sayHello();        });*/        //\u56e0\u4e3a\u6709\u5b50\u7236\u7c7b\u5173\u7cfb,\u6240\u4ee5\u5b58\u5728\u7684\u4e00\u4e2a\u5173\u952e\u5b57super,\u4ee3\u8868\u7236\u7c7b,\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528super\u8c03\u7528\u7236\u7c7b\u7684\u6210\u5458\u65b9\u6cd5       /* method(()->{            super.sayHello();        });*/      /*           \u4f7f\u7528super\u5f15\u7528\u7c7b\u7684\u6210\u5458\u65b9\u6cd5           super\u662f\u5df2\u7ecf\u5b58\u5728\u7684           \u7236\u7c7b\u7684\u6210\u5458\u65b9\u6cd5sayHello\u4e5f\u662f\u5df2\u7ecf\u5b58\u5728\u7684           \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528super\u5f15\u7528\u7236\u7c7b\u7684\u6210\u5458\u65b9\u6cd5       */      method(super::sayHello);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/24.%E3%80%90Stream%E6%B5%81%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%91%E7%AC%94%E8%AE%B0/code/13_StreamAndMethodReference/src/com/itheima/demo07/SuperMethodReference/Man.java", "stars": "2", "class": {"name": "Man", "extends": "Human", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        new Man().show();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/24.%E3%80%90Stream%E6%B5%81%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%91%E7%AC%94%E8%AE%B0/code/13_StreamAndMethodReference/src/com/itheima/demo07/SuperMethodReference/Man.java", "stars": "2", "class": {"name": "Man", "extends": "Human", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPid", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String getPid() {    return ManagementFactory.getRuntimeMXBean().getName().split(\"@\")[0];  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/utils/SystemInfoUtils.java", "stars": "3", "class": {"name": "SystemInfoUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getJvmStartUpTime", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "  public static long getJvmStartUpTime() {    return ManagementFactory.getRuntimeMXBean().getStartTime();  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/utils/SystemInfoUtils.java", "stars": "3", "class": {"name": "SystemInfoUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getHostName", "params": [], "throws": ["UnknownHostException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String getHostName() throws UnknownHostException {    return InetAddress.getLocalHost().getHostName();  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/utils/SystemInfoUtils.java", "stars": "3", "class": {"name": "SystemInfoUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getAvailableProcessors", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Integer", "snippet": "  public static Integer getAvailableProcessors() {    return Runtime.getRuntime().availableProcessors();  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/utils/SystemInfoUtils.java", "stars": "3", "class": {"name": "SystemInfoUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isCancelled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isCancelled() {        return this.cancelled;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/events/NitroEvent.java", "stars": "2", "class": {"name": "NitroEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCancelled", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCancelled(boolean flag) {        this.cancelled = flag;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/events/NitroEvent.java", "stars": "2", "class": {"name": "NitroEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDragStart", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onDragStart (android.view.View p0, android.support.v13.view.DragStartHelper p1)\t{\t\treturn n_onDragStart (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v13/view/DragStartHelper_OnDragStartListenerImplementor.java", "stars": "2", "class": {"name": "DragStartHelper_OnDragStartListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDragStart", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onDragStart (android.view.View p0, android.support.v13.view.DragStartHelper p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v13/view/DragStartHelper_OnDragStartListenerImplementor.java", "stars": "2", "class": {"name": "DragStartHelper_OnDragStartListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v13/view/DragStartHelper_OnDragStartListenerImplementor.java", "stars": "2", "class": {"name": "DragStartHelper_OnDragStartListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v13/view/DragStartHelper_OnDragStartListenerImplementor.java", "stars": "2", "class": {"name": "DragStartHelper_OnDragStartListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        handleMessageQueue();    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/logic/MessageWorkerData.java", "stars": "1", "class": {"name": "MessageWorkerData", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "handleMessageQueue", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleMessageQueue() {        DataPacket dataPacket = requestMessageData.getDataPacket();        Map<Integer, Handler> handlerLocalMap = BaseLocalMemory.baseLocalMemory.getHandlerLocalMap();        Handler handler = handlerLocalMap.get(dataPacket.getCmd());        handler.handlerMessage(requestMessageData);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/logic/MessageWorkerData.java", "stars": "1", "class": {"name": "MessageWorkerData", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "SettingsFragment", "snippet": "    public static SettingsFragment newInstance() {        SettingsFragment fragment = new SettingsFragment();        return fragment;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/settings/SettingsFragment.java", "stars": "1", "class": {"name": "SettingsFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/settings/SettingsFragment.java", "stars": "1", "class": {"name": "SettingsFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        View root = inflater.inflate(R.layout.fragment_settings, container, false);        // Server name        serverNameInput = root.findViewById(R.id.serverNameInput);        if (CredentialsManager.getInstance().hasServerName()) {            serverNameInput.setText(CredentialsManager.getInstance().getServerName());        }        setServerNameButton = root.findViewById(R.id.setServerNameButton);        setServerNameButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                try {                    CredentialsManager.getInstance().saveServerName(serverNameInput.getText().toString());                    IPManager.getInstance().setServerName(CredentialsManager.getInstance().getServerName());                } catch (IOException e) {                    e.printStackTrace();                }            }        });        // Credentials dialog        setServerCredentialsButton = root.findViewById(R.id.setServerCredentialsButton);        setServerCredentialsButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                CredentialsDialog credentialsDialog = new CredentialsDialog();                credentialsDialog.show(getActivity().getSupportFragmentManager(), \"Credentials\");            }        });        return root;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/settings/SettingsFragment.java", "stars": "1", "class": {"name": "SettingsFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseXml", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Element", "snippet": "    public static Element parseXml(String xml)    {        Document document = null;        //        StringReader sr = new StringReader(xml);        SAXReader saxReader = new SAXReader();        try        {            document = saxReader.read(sr);        }        catch (DocumentException e)        {            LOG.error(\"\u89e3\u6790\u5931\u8d25\", e);        }        return null == document ? null : document.getRootElement();    }", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/utils/XmlUtil.java", "stars": "29", "class": {"name": "XmlUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getText", "params": ["Element", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getText(Element em, String tag)    {        if (null == em)        {            return null;        }        Element e = em.element(tag);        //        return null == e ? null : e.getText();    }", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/utils/XmlUtil.java", "stars": "29", "class": {"name": "XmlUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listNodes", "params": ["Element", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<Map>", "snippet": "    public static List<Map<String, Object>> listNodes(Element node, String nodeName)    {        if (null == node)        {            return null;        }        // \u521d\u59cb\u5316\u8fd4\u56de        List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();        // \u9996\u5148\u83b7\u53d6\u5f53\u524d\u8282\u70b9\u7684\u6240\u6709\u5c5e\u6027\u8282\u70b9        List<Attribute> list = node.attributes();        Map<String, Object> map = null;        // \u904d\u5386\u5c5e\u6027\u8282\u70b9        for (Attribute attribute : list)        {            if (nodeName.equals(node.getName()))            {                if (null == map)                {                    map = new HashMap<String, Object>();                    listMap.add(map);                }                // \u53d6\u5230\u7684\u8282\u70b9\u5c5e\u6027\u653e\u5230map\u4e2d                map.put(attribute.getName(), attribute.getValue());            }        }        // \u904d\u5386\u5f53\u524d\u8282\u70b9\u4e0b\u7684\u6240\u6709\u8282\u70b9 \uff0cnodeName \u8981\u89e3\u6790\u7684\u8282\u70b9\u540d\u79f0        // \u4f7f\u7528\u9012\u5f52        Iterator<Element> iterator = node.elementIterator();        while (iterator.hasNext())        {            Element e = iterator.next();            listMap.addAll(listNodes(e, nodeName));        }        return listMap;    }", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/utils/XmlUtil.java", "stars": "29", "class": {"name": "XmlUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Type", "snippet": "    public Type getType() {        return type;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Ability.java", "stars": "15", "class": {"name": "Ability", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["Type"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setType(Type type) {        this.type = type;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Ability.java", "stars": "15", "class": {"name": "Ability", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCooldown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCooldown() {        return cooldown;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Ability.java", "stars": "15", "class": {"name": "Ability", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCooldown", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCooldown(int cooldown) {        this.cooldown = cooldown;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Ability.java", "stars": "15", "class": {"name": "Ability", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tickCooldown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void tickCooldown() {        if (cooldown > 0) {            cooldown--;        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Ability.java", "stars": "15", "class": {"name": "Ability", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStackInSlot", "params": ["int", "ItemStack"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStackInSlot(int slot, @Nonnull ItemStack stack) {        inv.setStackInSlot(slot, stack);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemColliculus/InventoryColliculus.java", "stars": "2", "class": {"name": "InventoryColliculus", "extends": null, "implements": ["IItemHandlerModifiable"], "modifiers": ["public"]}}, {"method_name": "getSlots", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSlots() {        return inv.getSlots();    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemColliculus/InventoryColliculus.java", "stars": "2", "class": {"name": "InventoryColliculus", "extends": null, "implements": ["IItemHandlerModifiable"], "modifiers": ["public"]}}, {"method_name": "getStackInSlot", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "    public ItemStack getStackInSlot(int slot) {        return inv.getStackInSlot(slot);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemColliculus/InventoryColliculus.java", "stars": "2", "class": {"name": "InventoryColliculus", "extends": null, "implements": ["IItemHandlerModifiable"], "modifiers": ["public"]}}, {"method_name": "insertItem", "params": ["int", "ItemStack", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "    public ItemStack insertItem(int slot, @Nonnull ItemStack stack, boolean simulate) {        return inv.insertItem(slot, stack, simulate);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemColliculus/InventoryColliculus.java", "stars": "2", "class": {"name": "InventoryColliculus", "extends": null, "implements": ["IItemHandlerModifiable"], "modifiers": ["public"]}}, {"method_name": "extractItem", "params": ["int", "int", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "    public ItemStack extractItem(int slot, int amount, boolean simulate) {        return inv.extractItem(slot, amount, simulate);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemColliculus/InventoryColliculus.java", "stars": "2", "class": {"name": "InventoryColliculus", "extends": null, "implements": ["IItemHandlerModifiable"], "modifiers": ["public"]}}, {"method_name": "getSlotLimit", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSlotLimit(int slot) {        return inv.getSlotLimit(slot);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemColliculus/InventoryColliculus.java", "stars": "2", "class": {"name": "InventoryColliculus", "extends": null, "implements": ["IItemHandlerModifiable"], "modifiers": ["public"]}}, {"method_name": "getSupportCities", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ApiResponse", "snippet": "    public ApiResponse getSupportCities(){        ServiceMultiResult<SupportAddressDTO> cities = addressService.findAllCities();        return ApiResponse.ofSuccess(cities);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/web/controller/house/AddressController.java", "stars": "3", "class": {"name": "AddressController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSupportRegionsByBelongTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ApiResponse", "snippet": "    public ApiResponse getSupportRegionsByBelongTo(@PathVariable String cityEnName){        ServiceMultiResult<SupportAddressDTO> result = addressService.findAreaByBelongToAndLevel(cityEnName, SupportAddress.AddressLevel.REGION.getValue());        return ApiResponse.ofSuccess(result);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/web/controller/house/AddressController.java", "stars": "3", "class": {"name": "AddressController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubwaysByCityEnName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ApiResponse", "snippet": "    public ApiResponse getSubwaysByCityEnName(@PathVariable String cityEnName){        ServiceMultiResult<SubwayDTO> result = addressService.findAllSubwayByCityEnName(cityEnName);        return ApiResponse.ofSuccess(result);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/web/controller/house/AddressController.java", "stars": "3", "class": {"name": "AddressController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubwayStationsBySubwayId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "ApiResponse", "snippet": "    public ApiResponse getSubwayStationsBySubwayId(@PathVariable Long subwayId){        ServiceMultiResult<SubwayStationDTO> result = addressService.findAllSubwayStationBySubwayId(subwayId);        return ApiResponse.ofSuccess(result);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/web/controller/house/AddressController.java", "stars": "3", "class": {"name": "AddressController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLog", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getLog(Context context) {        if (!TextUtils.isEmpty(log)) {            return log;        }        log = getFilesDir(context, LOG).getAbsolutePath();        return log;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/utils/FileUtil.java", "stars": "2", "class": {"name": "FileUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSdCardExist", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isSdCardExist() {        return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/utils/FileUtil.java", "stars": "2", "class": {"name": "FileUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isLackPermission", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "Boolean", "snippet": "    public static Boolean isLackPermission(Context context) {        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.M                && (ContextCompat                .checkSelfPermission(context, Manifest.permission.WRITE_EXTERNAL_STORAGE)                != PackageManager.PERMISSION_GRANTED                || ContextCompat                .checkSelfPermission(context, Manifest.permission.READ_EXTERNAL_STORAGE)                != PackageManager.PERMISSION_GRANTED);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/utils/FileUtil.java", "stars": "2", "class": {"name": "FileUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFilesDir", "params": ["Context", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "File", "snippet": "    private static File getFilesDir(Context context, String tag) {        // if (isLackPermission(context) || !isSdCardExist()) {        //     return context.getFilesDir();        // } else {        //     File file = context.getExternalFilesDir(tag);        //     if (file == null) {        //         return context.getFilesDir();        //     } else {        //         return file;        //     }        // }        return context.getExternalFilesDir(tag);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/utils/FileUtil.java", "stars": "2", "class": {"name": "FileUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteFile", "params": ["File", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void deleteFile(File file, boolean isDeleteDirect) {        if (file == null) {            return;        }        if (file.isDirectory()) {            File[] files = file.listFiles();            for (File f : files) {                deleteFile(f, isDeleteDirect);            }            if (isDeleteDirect) {                file.delete();            }        } else if (file.exists()) {            file.delete();        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/utils/FileUtil.java", "stars": "2", "class": {"name": "FileUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOS", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "OperatingSystem", "snippet": "\tpublic static OperatingSystem getOS() {\t\tString osName = System.getProperty(\"os.name\").toLowerCase();\t\tif(osName.contains(\"nix\") || osName.contains(\"nux\") || osName.contains(\"aix\") || osName.contains(\"sunos\")) {\t\t\treturn OperatingSystem.LINUXLIKE;\t\t}\t\telse if(osName.contains(\"win\")) {\t\t\treturn OperatingSystem.WINDOWS;\t\t}\t\telse if(osName.contains(\"mac\")) {\t\t\treturn OperatingSystem.MAC;\t\t}\t\treturn OperatingSystem.OTHER;\t}", "url": "https://raw.githubusercontent.com/TheKodeToad/DiffUI/master/src/main/java/me/thekodetoad/diffui/utils/Utils.java", "stars": "1", "class": {"name": "Utils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHomeDirectory", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "File", "snippet": "\tpublic static File getHomeDirectory() {\t\treturn new File(System.getProperty(\"user.home\"));\t}", "url": "https://raw.githubusercontent.com/TheKodeToad/DiffUI/master/src/main/java/me/thekodetoad/diffui/utils/Utils.java", "stars": "1", "class": {"name": "Utils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "set", "params": ["String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void set(String key, Object value) {        Map<String, Object> map = threadLocal.get();        if (null == map) {            map = new HashMap<String, Object>();            threadLocal.set(map);        }        map.put(key, value);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/context/RequestContextHandler.java", "stars": "7", "class": {"name": "RequestContextHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object get(String key) {        Map<String, Object> map = threadLocal.get();        if (null == map) {            map = new HashMap<String, Object>();            threadLocal.set(map);        }        return map.get(key);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/context/RequestContextHandler.java", "stars": "7", "class": {"name": "RequestContextHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCurrentUserName", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setCurrentUserName(String userName) {        set(LoginConstant.CURRENT_USER_NAME, userName);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/context/RequestContextHandler.java", "stars": "7", "class": {"name": "RequestContextHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCurrentUserId", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setCurrentUserId(String id) {        set(LoginConstant.CURRENT_USER_ID, id);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/context/RequestContextHandler.java", "stars": "7", "class": {"name": "RequestContextHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCurrentUserToken", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setCurrentUserToken(String token) {        set(LoginConstant.CURRENT_USER_TOKEN, token);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/context/RequestContextHandler.java", "stars": "7", "class": {"name": "RequestContextHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "object2String", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String object2String(Object value) {        return value == null ? null : value.toString();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/context/RequestContextHandler.java", "stars": "7", "class": {"name": "RequestContextHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void remove() {        threadLocal.remove();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/context/RequestContextHandler.java", "stars": "7", "class": {"name": "RequestContextHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRequestHandler", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void testRequestHandler() throws InterruptedException {            RequestContextHandler.set(\"name\", \"xiaozhun\");            new Thread(() -> {                RequestContextHandler.set(\"name\", \"tyrant\");                try {                    Thread.sleep(3000);                } catch (InterruptedException e) {                    e.printStackTrace();                    log.error(e.toString());                }                assertEquals(RequestContextHandler.get(\"name\"), \"tyrant\");                logger.info(\"thread one done\");            }).start();            new Thread(() -> {                RequestContextHandler.set(\"name\", \"batman\");                assertEquals(RequestContextHandler.get(\"name\"), \"batman\");                logger.info(\"thread two done\");            }).start();            Thread.sleep(5000);            assertEquals(RequestContextHandler.get(\"name\"), \"xiaozhun\");            logger.info(\"main thread done\");        }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/context/RequestContextHandler.java", "stars": "7", "class": {"name": "UnitTest", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "TestUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void TestUser() {            RequestContextHandler.setCurrentUserId(111 + \"\");            assertEquals(RequestContextHandler.get(LoginConstant.CURRENT_USER_ID), \"xiao-id\");            RequestContextHandler.setCurrentUserName(\"xiao-name\");            assertEquals(RequestContextHandler.get(LoginConstant.CURRENT_USER_NAME), \"xiao-name\");            RequestContextHandler.setCurrentUserToken(\"xiao-token\");            assertEquals(RequestContextHandler.get(LoginConstant.CURRENT_USER_TOKEN), \"xiao-token\");        }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/context/RequestContextHandler.java", "stars": "7", "class": {"name": "UnitTest", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onAttachedToWindow() {        super.onAttachedToWindow();        durationSb = (SeekBar) findViewById(R.id.durationSb);        durationValueTv = (TextView) findViewById(R.id.durationValueTv);        durationValueTv.setText(getContext().getString(R.string.ms_with_value, duration));        durationSb.setMax(10);        durationSb.setProgress(1);        durationSb.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {            @Override            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {                duration = progress * 300;                durationValueTv.setText(getContext().getString(R.string.ms_with_value, duration));            }            @Override            public void onStartTrackingTouch(SeekBar seekBar) {            }            @Override            public void onStopTrackingTouch(SeekBar seekBar) {            }        });        animateBt = (Button) findViewById(R.id.animateBt);        imageView = (ImageView) findViewById(R.id.imageView);        animateBt.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                // TODO \u5728\u8fd9\u91cc\u5904\u7406\u70b9\u51fb\u4e8b\u4ef6\uff0c\u6267\u884c\u52a8\u753b\u3002\u8bb0\u5f97\u4f7f\u7528 `setDuration(duration)` \u6765\u8bbe\u7f6e\u52a8\u753b\u7684\u65f6\u957f\u3002                imageView.animate().setDuration(duration).rotationX(360f);            }        });    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson5/Practice06Duration.java", "stars": "2", "class": {"name": "Practice06Duration", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, new byte[] { 1, 2, 3 }, null);    verify(ps).setBinaryStream(Mockito.eq(1), Mockito.any(InputStream.class), Mockito.eq(3));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BlobTypeHandlerTest.java", "stars": "15", "class": {"name": "BlobTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getBlob(\"column\")).thenReturn(blob);    when(blob.length()).thenReturn(3l);    when(blob.getBytes(1, 3)).thenReturn(new byte[] { 1, 2, 3 });    assertArrayEquals(new byte[] { 1, 2, 3 }, TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BlobTypeHandlerTest.java", "stars": "15", "class": {"name": "BlobTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getBlob(\"column\")).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BlobTypeHandlerTest.java", "stars": "15", "class": {"name": "BlobTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getBlob(1)).thenReturn(blob);    when(blob.length()).thenReturn(3l);    when(blob.getBytes(1, 3)).thenReturn(new byte[] { 1, 2, 3 });    assertArrayEquals(new byte[] { 1, 2, 3 }, TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BlobTypeHandlerTest.java", "stars": "15", "class": {"name": "BlobTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getBlob(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BlobTypeHandlerTest.java", "stars": "15", "class": {"name": "BlobTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getBlob(1)).thenReturn(blob);    when(blob.length()).thenReturn(3l);    when(blob.getBytes(1, 3)).thenReturn(new byte[] { 1, 2, 3 });    assertArrayEquals(new byte[] { 1, 2, 3 }, TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BlobTypeHandlerTest.java", "stars": "15", "class": {"name": "BlobTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getBlob(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BlobTypeHandlerTest.java", "stars": "15", "class": {"name": "BlobTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.ac_image_pager);\t\tBundle bundle = getIntent().getExtras();\t\tString[] imageUrls = bundle.getStringArray(Extra.IMAGES);\t\tint pagerPosition = bundle.getInt(Extra.IMAGE_POSITION, 0);\t\tif (savedInstanceState != null) {\t\t\tpagerPosition = savedInstanceState.getInt(STATE_POSITION);\t\t}\t\toptions = new DisplayImageOptions.Builder()\t\t\t.showImageForEmptyUri(R.drawable.ic_empty)\t\t\t.showImageOnFail(R.drawable.ic_error)\t\t\t.resetViewBeforeLoading(true)\t\t\t.cacheOnDisc(true)\t\t\t.imageScaleType(ImageScaleType.EXACTLY)\t\t\t.bitmapConfig(Bitmap.Config.RGB_565)\t\t\t.displayer(new FadeInBitmapDisplayer(300))\t\t\t.build();\t\tpager = (ViewPager) findViewById(R.id.pager);\t\tpager.setAdapter(new ImagePagerAdapter(imageUrls));\t\tpager.setCurrentItem(pagerPosition);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImagePagerActivity.java", "stars": "74", "class": {"name": "ImagePagerActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSaveInstanceState", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onSaveInstanceState(Bundle outState) {\t\toutState.putInt(STATE_POSITION, pager.getCurrentItem());\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImagePagerActivity.java", "stars": "74", "class": {"name": "ImagePagerActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "destroyItem", "params": ["ViewGroup", "int", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void destroyItem(ViewGroup container, int position, Object object) {\t\t\t((ViewPager) container).removeView((View) object);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImagePagerActivity.java", "stars": "74", "class": {"name": "ImagePagerAdapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "finishUpdate", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void finishUpdate(View container) {\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImagePagerActivity.java", "stars": "74", "class": {"name": "ImagePagerAdapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getCount() {\t\t\treturn images.length;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImagePagerActivity.java", "stars": "74", "class": {"name": "ImagePagerAdapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "instantiateItem", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\t\tpublic Object instantiateItem(ViewGroup view, int position) {\t\t\tView imageLayout = inflater.inflate(R.layout.item_pager_image, view, false);\t\t\tImageView imageView = (ImageView) imageLayout.findViewById(R.id.image);\t\t\tfinal ProgressBar spinner = (ProgressBar) imageLayout.findViewById(R.id.loading);\t\t\timageLoader.displayImage(images[position], imageView, options, new SimpleImageLoadingListener() {\t\t\t\t@Override\t\t\t\tpublic void onLoadingStarted(String imageUri, View view) {\t\t\t\t\tspinner.setVisibility(View.VISIBLE);\t\t\t\t}\t\t\t\t@Override\t\t\t\tpublic void onLoadingFailed(String imageUri, View view, FailReason failReason) {\t\t\t\t\tString message = null;\t\t\t\t\tswitch (failReason.getType()) {\t\t\t\t\t\tcase IO_ERROR:\t\t\t\t\t\t\tmessage = \"Input/Output error\";\t\t\t\t\t\t\tbreak;\t\t\t\t\t\tcase DECODING_ERROR:\t\t\t\t\t\t\tmessage = \"Image can't be decoded\";\t\t\t\t\t\t\tbreak;\t\t\t\t\t\tcase NETWORK_DENIED:\t\t\t\t\t\t\tmessage = \"Downloads are denied\";\t\t\t\t\t\t\tbreak;\t\t\t\t\t\tcase OUT_OF_MEMORY:\t\t\t\t\t\t\tmessage = \"Out Of Memory error\";\t\t\t\t\t\t\tbreak;\t\t\t\t\t\tcase UNKNOWN:\t\t\t\t\t\t\tmessage = \"Unknown error\";\t\t\t\t\t\t\tbreak;\t\t\t\t\t}\t\t\t\t\tToast.makeText(ImagePagerActivity.this, message, Toast.LENGTH_SHORT).show();\t\t\t\t\tspinner.setVisibility(View.GONE);\t\t\t\t}\t\t\t\t@Override\t\t\t\tpublic void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\t\t\t\t\tspinner.setVisibility(View.GONE);\t\t\t\t}\t\t\t});\t\t\t((ViewPager) view).addView(imageLayout, 0);\t\t\treturn imageLayout;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImagePagerActivity.java", "stars": "74", "class": {"name": "ImagePagerAdapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "isViewFromObject", "params": ["View", "Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean isViewFromObject(View view, Object object) {\t\t\treturn view.equals(object);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImagePagerActivity.java", "stars": "74", "class": {"name": "ImagePagerAdapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "restoreState", "params": ["Parcelable", "ClassLoader"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void restoreState(Parcelable state, ClassLoader loader) {\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImagePagerActivity.java", "stars": "74", "class": {"name": "ImagePagerAdapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "saveState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Parcelable", "snippet": "\t\tpublic Parcelable saveState() {\t\t\treturn null;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImagePagerActivity.java", "stars": "74", "class": {"name": "ImagePagerAdapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "startUpdate", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void startUpdate(View container) {\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImagePagerActivity.java", "stars": "74", "class": {"name": "ImagePagerAdapter", "extends": "PagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "OnSuccess", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void OnSuccess();    public abstract void OnFail();}", "url": "https://raw.githubusercontent.com/islammohsen/FirebaseDao/master/firbasedao/src/main/java/com/example/firbasedao/Listeners/TaskListener.java", "stars": "2", "class": {"name": "TaskListener", "extends": "AbstractEventListener", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "OnFail", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void OnFail();}", "url": "https://raw.githubusercontent.com/islammohsen/FirebaseDao/master/firbasedao/src/main/java/com/example/firbasedao/Listeners/TaskListener.java", "stars": "2", "class": {"name": "TaskListener", "extends": "AbstractEventListener", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isNotNull", "params": ["Object", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void isNotNull(Object value, String message) {        if (value == null) {            throw new S8Exception(message);        }    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/utils/Assert.java", "stars": "13", "class": {"name": "Assert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isTrue", "params": ["boolean", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void isTrue(boolean value, String message) {        if (!value) {            throw new S8Exception(message);        }    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/utils/Assert.java", "stars": "13", "class": {"name": "Assert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isNotBlank", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void isNotBlank(String value, String message) {        if (StringUtils.isBlank(value)) {            throw new S8Exception(message);        }    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/utils/Assert.java", "stars": "13", "class": {"name": "Assert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isNotBlanks", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void isNotBlanks(String message, String... values) {        if (values != null) {            for (String value : values) {                isNotBlank(value, message);            }        }    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/utils/Assert.java", "stars": "13", "class": {"name": "Assert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CommandType", "snippet": "\tpublic CommandType getType() {\t\treturn type;\t}", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/LibraryCommand.java", "stars": "6", "class": {"name": "LibraryCommand", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "execute", "params": ["LibraryData"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "\tpublic abstract void execute(LibraryData data);\t/**\t * Parses the given command arguments and initialised necessary\t * parameters. In this default version, a blank argument is expected.\t * \t * Subclasses should override this method for more specific argument\t * parsing.\t * \t * @param argumentInput argument input for this command\t * @return true if the given argument is blank, false otherwise     * @throws NullPointerException if the given argumentInput is null.\t */\tprotected boolean parseArguments(String argumentInput) {\t\tObjects.requireNonNull(argumentInput, \"Given input argument must not be null.\");\t\treturn argumentInput.isBlank();\t}", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/LibraryCommand.java", "stars": "6", "class": {"name": "LibraryCommand", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "parseArguments", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean parseArguments(String argumentInput) {\t\tObjects.requireNonNull(argumentInput, \"Given input argument must not be null.\");\t\treturn argumentInput.isBlank();\t}", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/LibraryCommand.java", "stars": "6", "class": {"name": "LibraryCommand", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "maxArea", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int maxArea(int[] height) {        int max = -1;        for(int i = 0, j = height.length - 1; i < j; ) {            max = Math.max(max, (j - i) * Math.min(height[i], height[j]));            if(height[i] < height[j]) {                i ++;            } else {                j --;            }        }        return max;    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/ContainerWithMostWater.java", "stars": "1", "class": {"name": "ContainerWithMostWater", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dirtRabbit", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> dirtRabbit(String type) throws IOException {        return null;    }", "url": "https://raw.githubusercontent.com/chengxy-nds/delayqueue/master/src/main/java/com/chengxy/delayqueue/controller/RabbitController.java", "stars": "7", "class": {"name": "RabbitController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["SQLiteDatabase"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(SQLiteDatabase db) {        checkNotNull(db);        db.execSQL(CREATE_SQL);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/sourcestorage/DatabaseSourceInfoStorage.java", "stars": "2", "class": {"name": "DatabaseSourceInfoStorage", "extends": "SQLiteOpenHelper", "implements": ["SourceInfoStorage"], "modifiers": []}}, {"method_name": "onUpgrade", "params": ["SQLiteDatabase", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {        throw new IllegalStateException(\"Should not be called. There is no any migration\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/sourcestorage/DatabaseSourceInfoStorage.java", "stars": "2", "class": {"name": "DatabaseSourceInfoStorage", "extends": "SQLiteOpenHelper", "implements": ["SourceInfoStorage"], "modifiers": []}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "SourceInfo", "snippet": "    public SourceInfo get(String url) {        checkNotNull(url);        Cursor cursor = null;        try {            cursor = getReadableDatabase().query(TABLE, ALL_COLUMNS, COLUMN_URL + \"=?\", new String[]{url}, null, null, null);            return cursor == null || !cursor.moveToFirst() ? null : convert(cursor);        } finally {            if (cursor != null) {                cursor.close();            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/sourcestorage/DatabaseSourceInfoStorage.java", "stars": "2", "class": {"name": "DatabaseSourceInfoStorage", "extends": "SQLiteOpenHelper", "implements": ["SourceInfoStorage"], "modifiers": []}}, {"method_name": "put", "params": ["String", "SourceInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void put(String url, SourceInfo sourceInfo) {        checkAllNotNull(url, sourceInfo);        SourceInfo sourceInfoFromDb = get(url);        boolean exist = sourceInfoFromDb != null;        ContentValues contentValues = convert(sourceInfo);        if (exist) {            getWritableDatabase().update(TABLE, contentValues, COLUMN_URL + \"=?\", new String[]{url});        } else {            getWritableDatabase().insert(TABLE, null, contentValues);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/sourcestorage/DatabaseSourceInfoStorage.java", "stars": "2", "class": {"name": "DatabaseSourceInfoStorage", "extends": "SQLiteOpenHelper", "implements": ["SourceInfoStorage"], "modifiers": []}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release() {        close();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/sourcestorage/DatabaseSourceInfoStorage.java", "stars": "2", "class": {"name": "DatabaseSourceInfoStorage", "extends": "SQLiteOpenHelper", "implements": ["SourceInfoStorage"], "modifiers": []}}, {"method_name": "convert", "params": ["Cursor"], "throws": null, "modifiers": ["private"], "return_type": "SourceInfo", "snippet": "    private SourceInfo convert(Cursor cursor) {        return new SourceInfo(                cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_URL)),                cursor.getLong(cursor.getColumnIndexOrThrow(COLUMN_LENGTH)),                cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_MIME))        );    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/sourcestorage/DatabaseSourceInfoStorage.java", "stars": "2", "class": {"name": "DatabaseSourceInfoStorage", "extends": "SQLiteOpenHelper", "implements": ["SourceInfoStorage"], "modifiers": []}}, {"method_name": "convert", "params": ["SourceInfo"], "throws": null, "modifiers": ["private"], "return_type": "ContentValues", "snippet": "    private ContentValues convert(SourceInfo sourceInfo) {        ContentValues values = new ContentValues();        values.put(COLUMN_URL, sourceInfo.url);        values.put(COLUMN_LENGTH, sourceInfo.length);        values.put(COLUMN_MIME, sourceInfo.mime);        return values;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/sourcestorage/DatabaseSourceInfoStorage.java", "stars": "2", "class": {"name": "DatabaseSourceInfoStorage", "extends": "SQLiteOpenHelper", "implements": ["SourceInfoStorage"], "modifiers": []}}, {"method_name": "append", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void append(final T line) {    if (this.lines.size() < this.size) {      this.lines.add(line);    } else {      this.lines.set(this.start, line);      this.start = (this.start + 1) % this.size;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/commons/CircularBuffer.java", "stars": "18", "class": {"name": "CircularBuffer", "extends": null, "implements": ["Iterable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"[\" + Joiner.on(\", \").join(this.lines) + \"]\";  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/commons/CircularBuffer.java", "stars": "18", "class": {"name": "CircularBuffer", "extends": null, "implements": ["Iterable"], "modifiers": ["public"]}}, {"method_name": "iterator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Iterator<T>", "snippet": "  public Iterator<T> iterator() {    if (this.start == 0) {      return this.lines.iterator();    } else {      return Iterators.concat(this.lines.subList(this.start, this.lines.size()).iterator(),          this.lines.subList(0, this.start).iterator());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/commons/CircularBuffer.java", "stars": "18", "class": {"name": "CircularBuffer", "extends": null, "implements": ["Iterable"], "modifiers": ["public"]}}, {"method_name": "getMaxSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getMaxSize() {    return this.size;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/commons/CircularBuffer.java", "stars": "18", "class": {"name": "CircularBuffer", "extends": null, "implements": ["Iterable"], "modifiers": ["public"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getSize() {    return this.lines.size();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/commons/CircularBuffer.java", "stars": "18", "class": {"name": "CircularBuffer", "extends": null, "implements": ["Iterable"], "modifiers": ["public"]}}, {"method_name": "build", "params": ["long", "long", "String", "Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "TaskConfiguration", "snippet": "    public TaskConfiguration build(long jobId, long taskId, String jobConfig, Map<String, Object> taskParams) {        String taskConfJson;        if(null != taskParams.get(DefaultParams.Task.PARAM_DATE)){            long time = Long.parseLong(String.valueOf(taskParams.get(DefaultParams.Task.PARAM_DATE)));            taskConfJson = JobUtils.render(jobConfig, time);        }else{            taskConfJson = JobUtils.render(jobConfig);        }        TaskConfiguration taskConfig = TaskConfiguration.from(taskConfJson);        Map<String, String> optionMap = new TreeMap<>(                String::compareTo        );        injectDataSourceParamToConf(callBackService, taskConfig, READER_PARAM_PATH);        injectDataSourceParamToConf(callBackService, taskConfig, WRITER_PARAM_PATH);        StringBuilder builder =  new StringBuilder();        parseTaskConfig(taskConfig, \"\", TOOL_PARAM_PATH, optionMap);        if(optionMap.size() !=  1){            throw new IllegalArgumentException(\"Cannot find the SQOOP Tool option: [\" + Json.toJson(optionMap.toString(), null) +\"]\");        }        optionMap.forEach((key, value) -> builder.append(\" \").append(value).append(\" \"));        optionMap.clear();        parseTaskConfig(taskConfig, READER_PARAM_PATH, OPTION_KEY_PATTERN, optionMap);        parseTaskConfig(taskConfig, WRITER_PARAM_PATH, OPTION_KEY_PATTERN, optionMap);        parseTaskConfig(taskConfig, SETTINGS_PARAM_PATH, OPTION_KEY_PATTERN, optionMap);        taskParams.forEach((key, value) ->{            if(key.matches(OPTION_KEY_PATTERN)){                optionMap.put(key, String.valueOf(value));            }        });        try {            String password = optionMap.get(\"--password\");            if (StringUtils.isNotBlank(password)) {                optionMap.put(\"--password\", String.valueOf(CryptoUtils.string2Object(password)));            }        }catch(Exception e){            //ignore        }        optionMap.forEach((key, value) -> builder.append(\" \").append(key).append(\" \").append(value).append(\" \"));        taskConfig.set(CONFIG_COMMAND, builder.toString());        return taskConfig;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopTaskConfigBuilder.java", "stars": "23", "class": {"name": "SqoopTaskConfigBuilder", "extends": "AbstractTaskConfigBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseTaskConfig", "params": ["TaskConfiguration", "String", "String", "Map<String,String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void parseTaskConfig(TaskConfiguration jobConfig, String path, String pattern,                                 Map<String, String> optionMap){        TaskConfiguration subConf = jobConfig.getConfiguration(path);        Set<String> keys = subConf.getKeys(1);        keys.forEach(key ->{            if(key.trim().matches(pattern)){                String jsonStr = subConf.getString(key, \"{}\").trim();                List<SqoopOptionVo> sqoopOptionVos = new ArrayList<>();                if(jsonStr.startsWith(\"[\") && jsonStr.endsWith(\"]\")){                     sqoopOptionVos = Json.fromJson(jsonStr, SqoopOptionVo.class);                }else {                     sqoopOptionVos.add(Json.fromJson(jsonStr, SqoopOptionVo.class));                }                assert sqoopOptionVos != null;                sqoopOptionVos.forEach(sqoopOptionVo -> {                    assert sqoopOptionVo != null;                    Pair<String, String> option = parseToOption(key, sqoopOptionVo, subConf);                    if(StringUtils.isNotBlank(option.getLeft())){                        optionMap.put(option.getLeft(), option.getRight());                    }                });            }        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopTaskConfigBuilder.java", "stars": "23", "class": {"name": "SqoopTaskConfigBuilder", "extends": "AbstractTaskConfigBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseToOption", "params": ["String", "SqoopOptionVo", "TaskConfiguration"], "throws": null, "modifiers": ["private"], "return_type": "Pair<String,String>", "snippet": "    private Pair<String, String> parseToOption(String optionName, SqoopOptionVo sqoopOptionVo, TaskConfiguration configuration){        if(StringUtils.isNotBlank(sqoopOptionVo.getName())){            //replace option name            optionName = sqoopOptionVo.getName();        }        MutablePair<String, String> option = new MutablePair<>();        Map<String, String> relateMap = sqoopOptionVo.getCondition();        for(Map.Entry<String, String> entry : relateMap.entrySet()){            String value = configuration.getString(entry.getKey());            boolean match = (StringUtils.isBlank(value) && StringUtils.isBlank(entry.getValue())) ||                    (StringUtils.isNotBlank(value) && value.matches(entry.getValue()));            if(match){                continue;            }            return option;        }        String value = sqoopOptionVo.getValue();        if(StringUtils.isNotBlank(value)){            Map<String, Object> params = sqoopOptionVo.getParams();            Matcher matcher = OPTION_PARAM_PATTERN.matcher(value);            StringBuffer sb = new StringBuffer();            while (matcher.find()) {                Object paramValue = params.getOrDefault(matcher.group(1), \"\");                String result;                if(paramValue instanceof List){                    result = StringUtils.join((List)paramValue, \",\");                }else if (paramValue instanceof Map){                    result = Json.toJson(paramValue, null);                }else{                    result = String.valueOf(paramValue);                }                if (StringUtils.isNotBlank(result)) {                    matcher.appendReplacement(sb, result);                } else {                    matcher.appendReplacement(sb, \"\");                }            }            matcher.appendTail(sb);            value = sb.toString();        }        if(StringUtils.isNotBlank(value) || sqoopOptionVo.isRequire()){            option.setLeft(optionName);            option.setRight(StringUtils.isBlank(value)?\"\":value);        }        return option;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopTaskConfigBuilder.java", "stars": "23", "class": {"name": "SqoopTaskConfigBuilder", "extends": "AbstractTaskConfigBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "receive", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void receive();    //\u53d1\u9001\u6d88\u606f    public abstract void send();    public void setMediator(Mediator mediator) {        this.mediator = mediator;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/mediator/Colleague.java", "stars": "2", "class": {"name": "Colleague", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "send", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void send();    public void setMediator(Mediator mediator) {        this.mediator = mediator;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/mediator/Colleague.java", "stars": "2", "class": {"name": "Colleague", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setMediator", "params": ["Mediator"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMediator(Mediator mediator) {        this.mediator = mediator;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/mediator/Colleague.java", "stars": "2", "class": {"name": "Colleague", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "handleEvent", "params": ["Event"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void handleEvent(final Event event) {    if (event.getType() == EventType.JOB_FINISHED && Status.FAILED        .equals(event.getData().getStatus())) {      this.value = this.value + 1;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumFailedJobMetric.java", "stars": "18", "class": {"name": "NumFailedJobMetric", "extends": "TimeBasedReportingMetric", "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "preTrackingEventMethod", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void preTrackingEventMethod() {    // Nothing to finalize before tracking event  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumFailedJobMetric.java", "stars": "18", "class": {"name": "NumFailedJobMetric", "extends": "TimeBasedReportingMetric", "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "postTrackingEventMethod", "params": [], "throws": null, "modifiers": ["synchronized", "protected"], "return_type": "void", "snippet": "  protected synchronized void postTrackingEventMethod() {    this.value = 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumFailedJobMetric.java", "stars": "18", "class": {"name": "NumFailedJobMetric", "extends": "TimeBasedReportingMetric", "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "getStatusIconIndex", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getStatusIconIndex() {        Minecraft.getMinecraft().getTextureManager()                .bindTexture(new ResourceLocation(\"phase:textures/effect/icons_potion.png\"));        return super.getStatusIconIndex();    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Potion/PotionPhase.java", "stars": "2", "class": {"name": "PotionPhase", "extends": "Potion", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateBox", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateBox() {        this.boxX += this.velX;        if(this.boxX + this.boxWidth > 500) {            this.boxX = 500 - this.boxWidth;            this.velX = Math.abs(this.velX) * -1;        }        if(this.boxX < 0) {            this.boxX = 0;            this.velX = Math.abs(this.velX);        }        this.boxY += this.velY;        this.onFloor = false;        if(this.boxY + this.boxHeight > 500) {            this.boxY = 500 - this.boxHeight;            this.velY = Math.abs(this.velY) * -1;            this.onFloor = true;        }        if(this.boxY < 0) {            this.boxY = 0;            this.velY = Math.abs(this.velY) * 0.5f;        }        velY += gravity;    }", "url": "https://raw.githubusercontent.com/MiladFarazian/Bound/master/JavaProcessing/src/BouncingBox.java", "stars": "1", "class": {"name": "BouncingBox", "extends": "MyFirstProject", "implements": null, "modifiers": ["public"]}}, {"method_name": "touchingPlayer", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean touchingPlayer(int playerX) {        if(( (playerX + 30 < this.boxX + this.boxWidth && playerX +30 > this.boxX) || (playerX < this.boxX + this.boxWidth && playerX > this.boxX))  && this.boxY + this.boxHeight > 470) {            return (true);        } else {            return (false);        }    }", "url": "https://raw.githubusercontent.com/MiladFarazian/Bound/master/JavaProcessing/src/BouncingBox.java", "stars": "1", "class": {"name": "BouncingBox", "extends": "MyFirstProject", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldShake", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean shouldShake() {        return onFloor;    }", "url": "https://raw.githubusercontent.com/MiladFarazian/Bound/master/JavaProcessing/src/BouncingBox.java", "stars": "1", "class": {"name": "BouncingBox", "extends": "MyFirstProject", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState)\t{\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.endless);\t\tdatasource = Datasource.getInstance();\t\tfooterView = ((LayoutInflater) this.getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.footer_loadmore, null, false);\t\tgetListView().addFooterView(footerView, null, false);\t\tsetListAdapter(new CustomArrayAdapter(this, datasource.getData(0, PAGESIZE)));\t\tgetListView().removeFooterView(footerView);\t\tgetListView().setOnScrollListener(new OnScrollListener()\t\t{\t\t\t@Override\t\t\tpublic void onScrollStateChanged(AbsListView arg0, int arg1)\t\t\t{\t\t\t\t// nothing here\t\t\t}\t\t\t@Override\t\t\tpublic void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount)\t\t\t{\t\t\t\t\t\t\t\tif (load(firstVisibleItem, visibleItemCount, totalItemCount))\t\t\t\t{\t\t\t\t\tloading = true;\t\t\t\t\tfooterView.findViewById(R.id.buttonLoadMore).setVisibility(View.VISIBLE);\t\t\t\t\tfooterView.findViewById(R.id.progressBar1).setVisibility(View.GONE);\t\t\t\t\tgetListView().addFooterView(footerView, null, false);\t\t\t\t}\t\t\t}\t\t});\t\tupdateDisplayingTextView();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/activities/LoadMoreListViewActivity.java", "stars": "74", "class": {"name": "LoadMoreListViewActivity", "extends": "AbstractListViewActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadMore", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void loadMore(View view)\t{\t\tfooterView.findViewById(R.id.buttonLoadMore).setVisibility(View.GONE);\t\tfooterView.findViewById(R.id.progressBar1).setVisibility(View.VISIBLE);\t\t(new LoadNextPage()).execute(\"\");\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/activities/LoadMoreListViewActivity.java", "stars": "74", "class": {"name": "LoadMoreListViewActivity", "extends": "AbstractListViewActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRender", "params": ["Render2DEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRender(Render2DEvent eventRender) {        if (mc.gameSettings.showDebugInfo || mc.currentScreen instanceof GuiHud) return;        final ScaledResolution scaledResolution = new ScaledResolution(mc);        Mercury.INSTANCE.getHudManager().getValues().forEach(hudComponent -> {            if (hudComponent.getX() < 0) {                hudComponent.setX(0);            }            if (hudComponent.getX() + hudComponent.getW() > new ScaledResolution(Minecraft.getMinecraft()).getScaledWidth()) {                hudComponent.setX(new ScaledResolution(Minecraft.getMinecraft()).getScaledWidth() - hudComponent.getW());            }            if (hudComponent.getY() < 0) {                hudComponent.setY(0);            }            if (hudComponent.getY() + hudComponent.getH() > new ScaledResolution(Minecraft.getMinecraft()).getScaledHeight()) {                hudComponent.setY(new ScaledResolution(Minecraft.getMinecraft()).getScaledHeight() - hudComponent.getH());            }            if (hudComponent.isShown()) hudComponent.onDraw(new ScaledResolution(mc));        });    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/persistent/HUD.java", "stars": "12", "class": {"name": "HUD", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onScreenResize", "params": ["ResizeEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onScreenResize(ResizeEvent event) {        Mercury.INSTANCE.getHudManager().getValues().forEach(hudComponent -> {            if (hudComponent.isShown()) {                hudComponent.onResize(event.getSr());            }        });    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/persistent/HUD.java", "stars": "12", "class": {"name": "HUD", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onFullScreen", "params": ["FullScreenEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onFullScreen(FullScreenEvent event) {        Mercury.INSTANCE.getHudManager().getValues().forEach(hudComponent -> {            if (hudComponent.isShown()) {                hudComponent.onFullScreen(event.getWidth(), event.getHeight());            }        });    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/persistent/HUD.java", "stars": "12", "class": {"name": "HUD", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u8c03\u7528invokeCook\u65b9\u6cd5,\u53c2\u6570\u662fCook\u63a5\u53e3,\u4f20\u9012Cook\u63a5\u53e3\u7684\u533f\u540d\u5185\u90e8\u7c7b\u5bf9\u8c61        invokeCook(new Cook() {            @Override            public void makeFood() {                System.out.println(\"\u5403\u996d\u4e86\");            }        });        //\u4f7f\u7528Lambda\u8868\u8fbe\u5f0f,\u7b80\u5316\u533f\u540d\u5185\u90e8\u7c7b\u7684\u4e66\u5199        invokeCook(()->{            System.out.println(\"\u5403\u996d\u4e86\");        });        //\u4f18\u5316\u7701\u7565Lambda        invokeCook(()-> System.out.println(\"\u5403\u996d\u4e86\"));    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/18.%E3%80%90%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%91-%E7%AC%94%E8%AE%B0/code/07_ThreadAndLambda/src/com/itheima/demo04/Lambda/Demo01Cook.java", "stars": "2", "class": {"name": "Demo01Cook", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "invokeCook", "params": ["Cook"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void invokeCook(Cook cook){        cook.makeFood();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/18.%E3%80%90%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%91-%E7%AC%94%E8%AE%B0/code/07_ThreadAndLambda/src/com/itheima/demo04/Lambda/Demo01Cook.java", "stars": "2", "class": {"name": "Demo01Cook", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildHuffmanCodes", "params": ["float", "boolean", "int"], "throws": null, "modifiers": ["private", "final"], "return_type": "int", "snippet": "\tprivate final int buildHuffmanCodes(float[] frequencies, boolean[][] codes, int[] codeLengths) {\t\tint i, j, leafQueueFront, nodeQueueFront, nodeQueueBack, address, node, child, maxCodeLength;\t\tfloat nodeFrequency;\t\tint[] stack, sortedAlphabet;\t\tfloat[] sortedFrequencies, nodeFrequencies;\t\tlong[] tmpArray;\t\t// Sorting alphabet by frequency\t\ttmpArray = new long[alphabetLength];\t\tfor (i=0; i<alphabetLength; i++) tmpArray[i]=(((long)Float.floatToIntBits(frequencies[i]))<<32)|alphabet[i];\t\tArrays.sort(tmpArray);\t\tsortedAlphabet = new int[alphabetLength];\t\tsortedFrequencies = new float[alphabetLength];\t\tfor (i=0; i<alphabetLength; i++) {\t\t\tsortedFrequencies[i]=Float.intBitsToFloat((int)((tmpArray[i]&Utils.shiftOnesLeft[32])>>>32));\t\t\tsortedAlphabet[i]=(int)(tmpArray[i]&Utils.shiftOnesRight[32]);\t\t}\t\ttmpArray=null;\t\t// Building tree topology\t\tleftChild = new int[alphabetLength-1];\t\trightChild = new int[alphabetLength-1];\t\tnodeParent = new int[alphabetLength-1];\t\tfor (i=0; i<alphabetLength-1; i++) nodeParent[i]=-1;\t\tleafParent = new int[alphabetLength];\t\tfor (i=0; i<alphabetLength; i++) leafParent[i]=-1;\t\tnodeFrequencies = new float[alphabetLength-1];\t\tfor (i=0; i<alphabetLength-1; i++) nodeFrequencies[i]=1f;\t\tnodeQueueFront=0; nodeQueueBack=0; leafQueueFront=0;\t\twhile (alphabetLength-leafQueueFront+nodeQueueBack-nodeQueueFront>1) {\t\t\tnodeFrequency=0f;\t\t\tif (leafQueueFront<alphabetLength && sortedFrequencies[leafQueueFront]<nodeFrequencies[nodeQueueFront]) {\t\t\t\taddress=Arrays.binarySearch(alphabet,sortedAlphabet[leafQueueFront]);\t\t\t\tleftChild[nodeQueueBack]=-1-address;\t\t\t\tleafParent[address]=nodeQueueBack;\t\t\t\tnodeFrequency=sortedFrequencies[leafQueueFront];\t\t\t\tleafQueueFront++;\t\t\t}\t\t\telse {\t\t\t\taddress=nodeQueueFront;\t\t\t\tleftChild[nodeQueueBack]=address;\t\t\t\tnodeParent[address]=nodeQueueBack;\t\t\t\tnodeFrequency=nodeFrequencies[nodeQueueFront];\t\t\t\tnodeQueueFront++;\t\t\t}\t\t\tif (leafQueueFront<alphabetLength && sortedFrequencies[leafQueueFront]<nodeFrequencies[nodeQueueFront]) {\t\t\t\taddress=Arrays.binarySearch(alphabet,sortedAlphabet[leafQueueFront]);\t\t\t\trightChild[nodeQueueBack]=-1-address;\t\t\t\tleafParent[address]=nodeQueueBack;\t\t\t\tnodeFrequency+=sortedFrequencies[leafQueueFront];\t\t\t\tleafQueueFront++;\t\t\t}\t\t\telse {\t\t\t\taddress=nodeQueueFront;\t\t\t\trightChild[nodeQueueBack]=address;\t\t\t\tnodeParent[address]=nodeQueueBack;\t\t\t\tnodeFrequency+=nodeFrequencies[nodeQueueFront];\t\t\t\tnodeQueueFront++;\t\t\t}\t\t\tnodeFrequencies[nodeQueueBack]=nodeFrequency;\t\t\tnodeQueueBack++;\t\t}\t\tsortedAlphabet=null;\t\tsortedFrequencies=null;\t\tnodeFrequencies=null;\t\t// Assigning codes\t\tfor (i=0; i<alphabetLength; i++) {\t\t\tcodeLengths[i]=0;\t\t\tnode=leafParent[i];\t\t\tchild=-1-i;\t\t\twhile (node!=-1) {\t\t\t\tif (child==rightChild[node]) codes[i][codeLengths[i]]=true;\t\t\t\tcodeLengths[i]++;\t\t\t\tchild=node;\t\t\t\tnode=nodeParent[node];\t\t\t}\t\t}\t\t// Returning the length of the longest code\t\tmaxCodeLength=0;\t\tfor (i=0; i<alphabetLength; i++) {\t\t\tif (codeLengths[i]>maxCodeLength) maxCodeLength=codeLengths[i];\t\t}\t\treturn maxCodeLength;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/HuffmanWaveletTree.java", "stars": "2", "class": {"name": "HuffmanWaveletTree", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "access", "params": ["long"], "throws": null, "modifiers": ["public", "final"], "return_type": "int", "snippet": "\tpublic final int access(long position) {\t\tif (alphabetLength==1) return alphabet[0];\t\tint node = alphabetLength-2;\t\tlong effectivePosition;\t\twhile (node>=0) {\t\t\teffectivePosition=(position/64)*64 + (64-(position%64)-1);\t\t\tif (rankDataStructures[node].bitVector.getElementAt(effectivePosition)==0) {\t\t\t\tposition-=rankDataStructures[node].rank(position);\t\t\t\tnode=leftChild[node];\t\t\t\tif (node<0) return alphabet[-1-node];\t\t\t}\t\t\telse {\t\t\t\tposition=rankDataStructures[node].rank(position);\t\t\t\tnode=rightChild[node];\t\t\t\tif (node<0) return alphabet[-1-node];\t\t\t}\t\t}\t\treturn -1;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/HuffmanWaveletTree.java", "stars": "2", "class": {"name": "HuffmanWaveletTree", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "multirank", "params": ["int", "int", "long", "long", "long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void multirank(int fullAlphabetLength, int nPositions, long[][] stack, long[][] output, long[] ones) {\t\tint i, j, currentBlock, lastBlock, node, address;\t\t// Characters that do not belong to $alphabet$ are already handled by the\t\t// assumption that all cells of $output$ are zero.\t\t// Handling characters that belong to $alphabet$\t\tif (alphabetLength==1) {\t\t\tfor (j=0; j<nPositions; j++) output[alphabet[0]][j]=stack[0][j+1];\t\t\treturn;\t\t}\t\tstack[0][0]=alphabetLength-2;\t\tcurrentBlock=0; lastBlock=0;\t\twhile (currentBlock<=lastBlock) {\t\t\tnode=(int)stack[currentBlock][0];\t\t\tfor (i=0; i<nPositions; i++) ones[i]=rankDataStructures[node].rank(stack[currentBlock][1+i]);\t\t\taddress=leftChild[node];\t\t\tif (address<0) {\t\t\t\tfor (i=0; i<nPositions; i++) output[alphabet[-1-address]][i]=stack[currentBlock][1+i]-ones[i];\t\t\t}\t\t\telse {\t\t\t\tlastBlock++;\t\t\t\tstack[lastBlock][0]=address;\t\t\t\tfor (i=0; i<nPositions; i++) stack[lastBlock][1+i]=stack[currentBlock][1+i]-ones[i];\t\t\t}\t\t\taddress=rightChild[node];\t\t\tif (address<0) System.arraycopy(ones,0,output[alphabet[-1-address]],0,nPositions);\t\t\telse {\t\t\t\tlastBlock++;\t\t\t\tstack[lastBlock][0]=address;\t\t\t\tSystem.arraycopy(ones,0,stack[lastBlock],1,nPositions);\t\t\t}\t\t\tcurrentBlock++;\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/HuffmanWaveletTree.java", "stars": "2", "class": {"name": "HuffmanWaveletTree", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "print", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void print() {\t\tSystem.out.print(\"leftChild: \");\t\tfor (int i=0; i<alphabetLength-1; i++) System.out.print(leftChild[i]+\" \");\t\tSystem.out.println();\t\tSystem.out.print(\"rightChild: \");\t\tfor (int i=0; i<alphabetLength-1; i++) System.out.print(rightChild[i]+\" \");\t\tSystem.out.println();\t\tSystem.out.print(\"nodeParent: \");\t\tfor (int i=0; i<alphabetLength-1; i++) System.out.print(nodeParent[i]+\" \");\t\tSystem.out.println();\t\tSystem.out.print(\"leafParent: \");\t\tfor (int i=0; i<alphabetLength; i++) System.out.print(leafParent[i]+\" \");\t\tSystem.out.println();\t\tSystem.out.println(\"bitvectors: \");\t\tfor (int i=0; i<alphabetLength-1; i++) {\t\t\trankDataStructures[i].bitVector.printBits(); System.out.println();\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/HuffmanWaveletTree.java", "stars": "2", "class": {"name": "HuffmanWaveletTree", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setParameter", "params": ["PreparedStatement", "int", "String", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setParameter(PreparedStatement ps, int i, String parameter,      JdbcType jdbcType) throws SQLException {    ps.setString(i, trim(parameter));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/StringTrimmingTypeHandler.java", "stars": "15", "class": {"name": "StringTrimmingTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getResult(ResultSet rs, String columnName) throws SQLException {    return trim(rs.getString(columnName));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/StringTrimmingTypeHandler.java", "stars": "15", "class": {"name": "StringTrimmingTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getResult(ResultSet rs, int columnIndex) throws SQLException {    return trim(rs.getString(columnIndex));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/StringTrimmingTypeHandler.java", "stars": "15", "class": {"name": "StringTrimmingTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getResult(CallableStatement cs, int columnIndex)      throws SQLException {    return trim(cs.getString(columnIndex));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/StringTrimmingTypeHandler.java", "stars": "15", "class": {"name": "StringTrimmingTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "trim", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String trim(String s) {    if (s == null) {      return null;    } else {      return s.trim();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/StringTrimmingTypeHandler.java", "stars": "15", "class": {"name": "StringTrimmingTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "musicnotfoundException", "params": ["MusicNotFoundException", "WebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<ErrorResponse>", "snippet": "    public ResponseEntity<ErrorResponse> musicnotfoundException(MusicNotFoundException exc, WebRequest request) {        return new ResponseEntity<ErrorResponse>(                new ErrorResponse().code(exc.getCode()).message(exc.getErrorMessage()), HttpStatus.NOT_FOUND        );    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/src/main/java/com/upgrad/musichoster/api/exception/RestExceptionHandler.java", "stars": "2", "class": {"name": "RestExceptionHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "usernotsignedinException", "params": ["UserNotSignedInException", "WebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<ErrorResponse>", "snippet": "    public ResponseEntity<ErrorResponse> usernotsignedinException(UserNotSignedInException exc, WebRequest request) {        return new ResponseEntity<ErrorResponse>(                new ErrorResponse().code(exc.getCode()).message(exc.getErrorMessage()), HttpStatus.UNAUTHORIZED        );    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/src/main/java/com/upgrad/musichoster/api/exception/RestExceptionHandler.java", "stars": "2", "class": {"name": "RestExceptionHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unauthorizedException", "params": ["UnauthorizedException", "WebRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<ErrorResponse>", "snippet": "    public ResponseEntity<ErrorResponse> unauthorizedException(UnauthorizedException exc, WebRequest request) {        return new ResponseEntity<ErrorResponse>(                new ErrorResponse().code(exc.getCode()).message(exc.getErrorMessage()), HttpStatus.FORBIDDEN        );    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/src/main/java/com/upgrad/musichoster/api/exception/RestExceptionHandler.java", "stars": "2", "class": {"name": "RestExceptionHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onProximitySensorChangedState", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void onProximitySensorChangedState() {    if (!useSpeakerphone.equals(SPEAKERPHONE_AUTO)) {      return;    }    // The proximity sensor should only be activated when there are exactly two    // available audio devices.    if (audioDevices.size() == 2 && audioDevices.contains(AppRTCAudioManager.AudioDevice.EARPIECE)        && audioDevices.contains(AppRTCAudioManager.AudioDevice.SPEAKER_PHONE)) {      if (proximitySensor.sensorReportsNearState()) {        // Sensor reports that a \"handset is being held up to a person's ear\",        // or \"something is covering the light sensor\".        setAudioDeviceInternal(AppRTCAudioManager.AudioDevice.EARPIECE);      } else {        // Sensor reports that a \"handset is removed from a person's ear\", or        // \"the light sensor is no longer covered\".        setAudioDeviceInternal(AppRTCAudioManager.AudioDevice.SPEAKER_PHONE);      }    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "AppRTCAudioManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "create", "params": ["Context"], "throws": null, "modifiers": ["static"], "return_type": "AppRTCAudioManager", "snippet": "  static AppRTCAudioManager create(Context context) {    return new AppRTCAudioManager(context);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "AppRTCAudioManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": ["AudioManagerEvents"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void start(AudioManagerEvents audioManagerEvents) {    Log.d(TAG, \"start\");    ThreadUtils.checkIsOnMainThread();    if (amState == AudioManagerState.RUNNING) {      Log.e(TAG, \"AudioManager is already active\");      return;    }    // TODO(henrika): perhaps call new method called preInitAudio() here if UNINITIALIZED.    Log.d(TAG, \"AudioManager starts...\");    this.audioManagerEvents = audioManagerEvents;    amState = AudioManagerState.RUNNING;    // Store current audio state so we can restore it when stop() is called.    savedAudioMode = audioManager.getMode();    savedIsSpeakerPhoneOn = audioManager.isSpeakerphoneOn();    savedIsMicrophoneMute = audioManager.isMicrophoneMute();    hasWiredHeadset = hasWiredHeadset();    // Create an AudioManager.OnAudioFocusChangeListener instance.    audioFocusChangeListener = new AudioManager.OnAudioFocusChangeListener() {      // Called on the listener to notify if the audio focus for this listener has been changed.      // The |focusChange| value indicates whether the focus was gained, whether the focus was lost,      // and whether that loss is transient, or whether the new focus holder will hold it for an      // unknown amount of time.      // TODO(henrika): possibly extend support of handling audio-focus changes. Only contains      // logging for now.      @Override      public void onAudioFocusChange(int focusChange) {        final String typeOfChange;        switch (focusChange) {          case AudioManager.AUDIOFOCUS_GAIN:            typeOfChange = \"AUDIOFOCUS_GAIN\";            break;          case AudioManager.AUDIOFOCUS_GAIN_TRANSIENT:            typeOfChange = \"AUDIOFOCUS_GAIN_TRANSIENT\";            break;          case AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE:            typeOfChange = \"AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE\";            break;          case AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK:            typeOfChange = \"AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK\";            break;          case AudioManager.AUDIOFOCUS_LOSS:            typeOfChange = \"AUDIOFOCUS_LOSS\";            break;          case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:            typeOfChange = \"AUDIOFOCUS_LOSS_TRANSIENT\";            break;          case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:            typeOfChange = \"AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK\";            break;          default:            typeOfChange = \"AUDIOFOCUS_INVALID\";            break;        }        Log.d(TAG, \"onAudioFocusChange: \" + typeOfChange);      }    };    // Request audio playout focus (without ducking) and install listener for changes in focus.    int result = audioManager.requestAudioFocus(audioFocusChangeListener,        AudioManager.STREAM_VOICE_CALL, AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);    if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {      Log.d(TAG, \"Audio focus request granted for VOICE_CALL streams\");    } else {      Log.e(TAG, \"Audio focus request failed\");    }    // Start by setting MODE_IN_COMMUNICATION as default audio mode. It is    // required to be in this mode when playout and/or recording starts for    // best possible VoIP performance.    audioManager.setMode(AudioManager.MODE_IN_COMMUNICATION);    // Always disable microphone mute during a WebRTC call.    setMicrophoneMute(false);    // Set initial device states.    userSelectedAudioDevice = AudioDevice.NONE;    selectedAudioDevice = AudioDevice.NONE;    audioDevices.clear();    // Initialize and start Bluetooth if a BT device is available or initiate    // detection of new (enabled) BT devices.    bluetoothManager.start();    // Do initial selection of audio device. This setting can later be changed    // either by adding/removing a BT or wired headset or by covering/uncovering    // the proximity sensor.    updateAudioDeviceState();    // Register receiver for broadcast intents related to adding/removing a    // wired headset.    registerReceiver(wiredHeadsetReceiver, new IntentFilter(Intent.ACTION_HEADSET_PLUG));    Log.d(TAG, \"AudioManager started\");  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "AppRTCAudioManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void stop() {    Log.d(TAG, \"stop\");    ThreadUtils.checkIsOnMainThread();    if (amState != AudioManagerState.RUNNING) {      Log.e(TAG, \"Trying to stop AudioManager in incorrect state: \" + amState);      return;    }    amState = AudioManagerState.UNINITIALIZED;    unregisterReceiver(wiredHeadsetReceiver);    bluetoothManager.stop();    // Restore previously stored audio states.    setSpeakerphoneOn(savedIsSpeakerPhoneOn);    setMicrophoneMute(savedIsMicrophoneMute);    audioManager.setMode(savedAudioMode);    // Abandon audio focus. Gives the previous focus owner, if any, focus.    audioManager.abandonAudioFocus(audioFocusChangeListener);    audioFocusChangeListener = null;    Log.d(TAG, \"Abandoned audio focus for VOICE_CALL streams\");    if (proximitySensor != null) {      proximitySensor.stop();      proximitySensor = null;    }    audioManagerEvents = null;    Log.d(TAG, \"AudioManager stopped\");  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "AppRTCAudioManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAudioDeviceInternal", "params": ["AudioDevice"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setAudioDeviceInternal(AudioDevice device) {    Log.d(TAG, \"setAudioDeviceInternal(device=\" + device + \")\");    AppRTCUtils.assertIsTrue(audioDevices.contains(device));    switch (device) {      case SPEAKER_PHONE:        setSpeakerphoneOn(true);        break;      case EARPIECE:        setSpeakerphoneOn(false);        break;      case WIRED_HEADSET:        setSpeakerphoneOn(false);        break;      case BLUETOOTH:        setSpeakerphoneOn(false);        break;      default:        Log.e(TAG, \"Invalid audio device selection\");        break;    }    selectedAudioDevice = device;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "AppRTCAudioManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDefaultAudioDevice", "params": ["AudioDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDefaultAudioDevice(AudioDevice defaultDevice) {    ThreadUtils.checkIsOnMainThread();    switch (defaultDevice) {      case SPEAKER_PHONE:        defaultAudioDevice = defaultDevice;        break;      case EARPIECE:        if (hasEarpiece()) {          defaultAudioDevice = defaultDevice;        } else {          defaultAudioDevice = AudioDevice.SPEAKER_PHONE;        }        break;      default:        Log.e(TAG, \"Invalid default audio device selection\");        break;    }    Log.d(TAG, \"setDefaultAudioDevice(device=\" + defaultAudioDevice + \")\");    updateAudioDeviceState();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "AppRTCAudioManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "selectAudioDevice", "params": ["AudioDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void selectAudioDevice(AudioDevice device) {    ThreadUtils.checkIsOnMainThread();    if (!audioDevices.contains(device)) {      Log.e(TAG, \"Can not select \" + device + \" from available \" + audioDevices);    }    userSelectedAudioDevice = device;    updateAudioDeviceState();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "AppRTCAudioManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAudioDevices", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<AudioDevice>", "snippet": "  public Set<AudioDevice> getAudioDevices() {    ThreadUtils.checkIsOnMainThread();    return Collections.unmodifiableSet(new HashSet<>(audioDevices));  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "AppRTCAudioManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSelectedAudioDevice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AudioDevice", "snippet": "  public AudioDevice getSelectedAudioDevice() {    ThreadUtils.checkIsOnMainThread();    return selectedAudioDevice;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "AppRTCAudioManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerReceiver", "params": ["BroadcastReceiver", "IntentFilter"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {    apprtcContext.registerReceiver(receiver, filter);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "AppRTCAudioManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unregisterReceiver", "params": ["BroadcastReceiver"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void unregisterReceiver(BroadcastReceiver receiver) {    apprtcContext.unregisterReceiver(receiver);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "AppRTCAudioManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSpeakerphoneOn", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setSpeakerphoneOn(boolean on) {    boolean wasOn = audioManager.isSpeakerphoneOn();    if (wasOn == on) {      return;    }    audioManager.setSpeakerphoneOn(on);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "AppRTCAudioManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMicrophoneMute", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setMicrophoneMute(boolean on) {    boolean wasMuted = audioManager.isMicrophoneMute();    if (wasMuted == on) {      return;    }    audioManager.setMicrophoneMute(on);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "AppRTCAudioManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasEarpiece", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean hasEarpiece() {    return apprtcContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_TELEPHONY);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "AppRTCAudioManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasWiredHeadset", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean hasWiredHeadset() {    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {      return audioManager.isWiredHeadsetOn();    } else {      final AudioDeviceInfo[] devices = audioManager.getDevices(AudioManager.GET_DEVICES_ALL);      for (AudioDeviceInfo device : devices) {        final int type = device.getType();        if (type == AudioDeviceInfo.TYPE_WIRED_HEADSET) {          Log.d(TAG, \"hasWiredHeadset: found wired headset\");          return true;        } else if (type == AudioDeviceInfo.TYPE_USB_DEVICE) {          Log.d(TAG, \"hasWiredHeadset: found USB audio device\");          return true;        }      }      return false;    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "AppRTCAudioManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateAudioDeviceState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateAudioDeviceState() {    ThreadUtils.checkIsOnMainThread();    Log.d(TAG, \"--- updateAudioDeviceState: \"            + \"wired headset=\" + hasWiredHeadset + \", \"            + \"BT state=\" + bluetoothManager.getState());    Log.d(TAG, \"Device status: \"            + \"available=\" + audioDevices + \", \"            + \"selected=\" + selectedAudioDevice + \", \"            + \"user selected=\" + userSelectedAudioDevice);    // Check if any Bluetooth headset is connected. The internal BT state will    // change accordingly.    // TODO(henrika): perhaps wrap required state into BT manager.    if (bluetoothManager.getState() == AppRTCBluetoothManager.State.HEADSET_AVAILABLE        || bluetoothManager.getState() == AppRTCBluetoothManager.State.HEADSET_UNAVAILABLE        || bluetoothManager.getState() == AppRTCBluetoothManager.State.SCO_DISCONNECTING) {      bluetoothManager.updateDevice();    }    // Update the set of available audio devices.    Set<AudioDevice> newAudioDevices = new HashSet<>();    if (bluetoothManager.getState() == AppRTCBluetoothManager.State.SCO_CONNECTED        || bluetoothManager.getState() == AppRTCBluetoothManager.State.SCO_CONNECTING        || bluetoothManager.getState() == AppRTCBluetoothManager.State.HEADSET_AVAILABLE) {      newAudioDevices.add(AudioDevice.BLUETOOTH);    }    if (hasWiredHeadset) {      // If a wired headset is connected, then it is the only possible option.      newAudioDevices.add(AudioDevice.WIRED_HEADSET);    } else {      // No wired headset, hence the audio-device list can contain speaker      // phone (on a tablet), or speaker phone and earpiece (on mobile phone).      newAudioDevices.add(AudioDevice.SPEAKER_PHONE);      if (hasEarpiece()) {        newAudioDevices.add(AudioDevice.EARPIECE);      }    }    // Store state which is set to true if the device list has changed.    boolean audioDeviceSetUpdated = !audioDevices.equals(newAudioDevices);    // Update the existing audio device set.    audioDevices = newAudioDevices;    // Correct user selected audio devices if needed.    if (bluetoothManager.getState() == AppRTCBluetoothManager.State.HEADSET_UNAVAILABLE        && userSelectedAudioDevice == AudioDevice.BLUETOOTH) {      // If BT is not available, it can't be the user selection.      userSelectedAudioDevice = AudioDevice.NONE;    }    if (hasWiredHeadset && userSelectedAudioDevice == AudioDevice.SPEAKER_PHONE) {      // If user selected speaker phone, but then plugged wired headset then make      // wired headset as user selected device.      userSelectedAudioDevice = AudioDevice.WIRED_HEADSET;    }    if (!hasWiredHeadset && userSelectedAudioDevice == AudioDevice.WIRED_HEADSET) {      // If user selected wired headset, but then unplugged wired headset then make      // speaker phone as user selected device.      userSelectedAudioDevice = AudioDevice.SPEAKER_PHONE;    }    // Need to start Bluetooth if it is available and user either selected it explicitly or    // user did not select any output device.    boolean needBluetoothAudioStart =        bluetoothManager.getState() == AppRTCBluetoothManager.State.HEADSET_AVAILABLE        && (userSelectedAudioDevice == AudioDevice.NONE               || userSelectedAudioDevice == AudioDevice.BLUETOOTH);    // Need to stop Bluetooth audio if user selected different device and    // Bluetooth SCO connection is established or in the process.    boolean needBluetoothAudioStop =        (bluetoothManager.getState() == AppRTCBluetoothManager.State.SCO_CONNECTED            || bluetoothManager.getState() == AppRTCBluetoothManager.State.SCO_CONNECTING)        && (userSelectedAudioDevice != AudioDevice.NONE               && userSelectedAudioDevice != AudioDevice.BLUETOOTH);    if (bluetoothManager.getState() == AppRTCBluetoothManager.State.HEADSET_AVAILABLE        || bluetoothManager.getState() == AppRTCBluetoothManager.State.SCO_CONNECTING        || bluetoothManager.getState() == AppRTCBluetoothManager.State.SCO_CONNECTED) {      Log.d(TAG, \"Need BT audio: start=\" + needBluetoothAudioStart + \", \"              + \"stop=\" + needBluetoothAudioStop + \", \"              + \"BT state=\" + bluetoothManager.getState());    }    // Start or stop Bluetooth SCO connection given states set earlier.    if (needBluetoothAudioStop) {      bluetoothManager.stopScoAudio();      bluetoothManager.updateDevice();    }    if (needBluetoothAudioStart && !needBluetoothAudioStop) {      // Attempt to start Bluetooth SCO audio (takes a few second to start).      if (!bluetoothManager.startScoAudio()) {        // Remove BLUETOOTH from list of available devices since SCO failed.        audioDevices.remove(AudioDevice.BLUETOOTH);        audioDeviceSetUpdated = true;      }    }    // Update selected audio device.    final AudioDevice newAudioDevice;    if (bluetoothManager.getState() == AppRTCBluetoothManager.State.SCO_CONNECTED) {      // If a Bluetooth is connected, then it should be used as output audio      // device. Note that it is not sufficient that a headset is available;      // an active SCO channel must also be up and running.      newAudioDevice = AudioDevice.BLUETOOTH;    } else if (hasWiredHeadset) {      // If a wired headset is connected, but Bluetooth is not, then wired headset is used as      // audio device.      newAudioDevice = AudioDevice.WIRED_HEADSET;    } else {      // No wired headset and no Bluetooth, hence the audio-device list can contain speaker      // phone (on a tablet), or speaker phone and earpiece (on mobile phone).      // |defaultAudioDevice| contains either AudioDevice.SPEAKER_PHONE or AudioDevice.EARPIECE      // depending on the user's selection.      newAudioDevice = defaultAudioDevice;    }    // Switch to new device but only if there has been any changes.    if (newAudioDevice != selectedAudioDevice || audioDeviceSetUpdated) {      // Do the required device switch.      setAudioDeviceInternal(newAudioDevice);      Log.d(TAG, \"New device status: \"              + \"available=\" + audioDevices + \", \"              + \"selected=\" + newAudioDevice);      if (audioManagerEvents != null) {        // Notify a listening client that audio device has been changed.        audioManagerEvents.onAudioDeviceChanged(selectedAudioDevice, audioDevices);      }    }    Log.d(TAG, \"--- updateAudioDeviceState done\");  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "AppRTCAudioManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onReceive", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onReceive(Context context, Intent intent) {      int state = intent.getIntExtra(\"state\", STATE_UNPLUGGED);      int microphone = intent.getIntExtra(\"microphone\", HAS_NO_MIC);      String name = intent.getStringExtra(\"name\");      Log.d(TAG, \"WiredHeadsetReceiver.onReceive\" + AppRTCUtils.getThreadInfo() + \": \"              + \"a=\" + intent.getAction() + \", s=\"              + (state == STATE_UNPLUGGED ? \"unplugged\" : \"plugged\") + \", m=\"              + (microphone == HAS_MIC ? \"mic\" : \"no mic\") + \", n=\" + name + \", sb=\"              + isInitialStickyBroadcast());      hasWiredHeadset = (state == STATE_PLUGGED);      updateAudioDeviceState();    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCAudioManager.java", "stars": "2", "class": {"name": "WiredHeadsetReceiver", "extends": "BroadcastReceiver", "implements": null, "modifiers": ["private"]}}, {"method_name": "getFromReader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Record", "snippet": "    public Record getFromReader() {        if (shutdown) {            throw DataXException.asDataXException(CommonErrorCode.SHUT_DOWN_TASK, \"\");        }        Record record = this.recordChannel.pull();        return (record instanceof TerminateRecord ? null : record);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/exchanger/RecordExchanger.java", "stars": "23", "class": {"name": "RecordExchanger", "extends": "TransformerExchanger", "implements": ["RecordSender", "RecordReceiver"], "modifiers": ["public"]}}, {"method_name": "createRecord", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Record", "snippet": "    public Record createRecord() {        try {            return RECORD_CLASS.newInstance();        } catch (Exception e) {            throw DataXException.asDataXException(                    FrameworkErrorCode.CONFIG_ERROR, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/exchanger/RecordExchanger.java", "stars": "23", "class": {"name": "RecordExchanger", "extends": "TransformerExchanger", "implements": ["RecordSender", "RecordReceiver"], "modifiers": ["public"]}}, {"method_name": "sendToWriter", "params": ["Record"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendToWriter(Record record) {        if (shutdown) {            throw DataXException.asDataXException(CommonErrorCode.SHUT_DOWN_TASK, \"\");        }        record = doTransformer(record);        if (record == null) {            return;        }        this.recordChannel.push(record);        //\u548cchannel\u7684\u7edf\u8ba1\u4fdd\u6301\u540c\u6b65        doStat();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/exchanger/RecordExchanger.java", "stars": "23", "class": {"name": "RecordExchanger", "extends": "TransformerExchanger", "implements": ["RecordSender", "RecordReceiver"], "modifiers": ["public"]}}, {"method_name": "flush", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void flush() {    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/exchanger/RecordExchanger.java", "stars": "23", "class": {"name": "RecordExchanger", "extends": "TransformerExchanger", "implements": ["RecordSender", "RecordReceiver"], "modifiers": ["public"]}}, {"method_name": "terminate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void terminate() {        if (shutdown) {            throw DataXException.asDataXException(CommonErrorCode.SHUT_DOWN_TASK, \"\");        }        this.recordChannel.pushTerminate(TerminateRecord.get());        //\u548cchannel\u7684\u7edf\u8ba1\u4fdd\u6301\u540c\u6b65        doStat();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/exchanger/RecordExchanger.java", "stars": "23", "class": {"name": "RecordExchanger", "extends": "TransformerExchanger", "implements": ["RecordSender", "RecordReceiver"], "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shutdown() {        shutdown = true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/exchanger/RecordExchanger.java", "stars": "23", "class": {"name": "RecordExchanger", "extends": "TransformerExchanger", "implements": ["RecordSender", "RecordReceiver"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUp() throws Exception {    this.queryRunner = mock(QueryRunner.class);    this.conn = this.datasource.getConnection();    final DataSource mockDataSource = mock(this.datasource.getClass());    when(this.queryRunner.getDataSource()).thenReturn(mockDataSource);    when(mockDataSource.getConnection()).thenReturn(this.conn);    this.dbOperator = new DatabaseOperator(this.queryRunner);    list.add(index_1);    list.add(index_2);    // valid query returns correct value    when(this.queryRunner.query(\"select * from blah where ? = ?\", this.handler, \"id\", 2))        .thenReturn(index_2);    // If select an non-existing entry, handler returns 0.    when(this.queryRunner.query(\"select * from blah where ? = ?\", this.handler, \"id\", 3))        .thenReturn(0);    //If typos, throw Exceptions.    doThrow(SQLException.class).when(this.queryRunner)        .query(\"sele * from blah where ? = ?\", this.handler, \"id\", 2);    doAnswer(invocation -> {      index_1 = 26;      return 1;    }).when(this.queryRunner).update(\"update blah set ? = ?\", \"1\", 26);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/test/java/azkaban/db/DatabaseOperatorTest.java", "stars": "18", "class": {"name": "DatabaseOperatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testValidQuery", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testValidQuery() throws Exception {    final int res = this.dbOperator.query(\"select * from blah where ? = ?\", this.handler, \"id\", 2);    Assert.assertEquals(15, res);    verify(this.queryRunner).query(\"select * from blah where ? = ?\", this.handler, \"id\", 2);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/test/java/azkaban/db/DatabaseOperatorTest.java", "stars": "18", "class": {"name": "DatabaseOperatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testInvalidQuery", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testInvalidQuery() throws Exception {    final int res = this.dbOperator.query(\"select * from blah where ? = ?\", this.handler, \"id\", 3);    Assert.assertEquals(0, res);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/test/java/azkaban/db/DatabaseOperatorTest.java", "stars": "18", "class": {"name": "DatabaseOperatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testTypoSqlStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testTypoSqlStatement() throws Exception {    System.out.println(\"testTypoSqlStatement\");    this.dbOperator.query(\"sele * from blah where ? = ?\", this.handler, \"id\", 2);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/test/java/azkaban/db/DatabaseOperatorTest.java", "stars": "18", "class": {"name": "DatabaseOperatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testTransaction", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testTransaction() throws Exception {    when(this.queryRunner.update(this.conn, \"update blah set ? = ?\", \"1\", 26)).thenReturn(1);    when(this.queryRunner.query(this.conn, \"select * from blah where ? = ?\", this.handler, \"id\", 1))        .thenReturn(26);    final SQLTransaction<Integer> transaction = transOperator -> {      transOperator.update(\"update blah set ? = ?\", \"1\", 26);      return transOperator.query(\"select * from blah where ? = ?\", this.handler, \"id\", 1);    };    final int res = this.dbOperator.transaction(transaction);    Assert.assertEquals(26, res);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/test/java/azkaban/db/DatabaseOperatorTest.java", "stars": "18", "class": {"name": "DatabaseOperatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testValidUpdate", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testValidUpdate() throws Exception {    final int res = this.dbOperator.update(\"update blah set ? = ?\", \"1\", 26);    // 1 row is affected    Assert.assertEquals(1, res);    Assert.assertEquals(26, index_1);    verify(this.queryRunner).update(\"update blah set ? = ?\", \"1\", 26);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/test/java/azkaban/db/DatabaseOperatorTest.java", "stars": "18", "class": {"name": "DatabaseOperatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testInvalidUpdate", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testInvalidUpdate() throws Exception {    final int res = this.dbOperator.update(\"update blah set ? = ?\", \"3\", 26);    // 0 row is affected    Assert.assertEquals(0, res);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/test/java/azkaban/db/DatabaseOperatorTest.java", "stars": "18", "class": {"name": "DatabaseOperatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"DependencyInstanceConfigImpl{\" +        \"props=\" + this.props +        '}';  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/DependencyInstanceConfigImpl.java", "stars": "18", "class": {"name": "DependencyInstanceConfigImpl", "extends": null, "implements": ["DependencyInstanceConfig"], "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String get(final String key) {    return this.props.get(key);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/DependencyInstanceConfigImpl.java", "stars": "18", "class": {"name": "DependencyInstanceConfigImpl", "extends": null, "implements": ["DependencyInstanceConfig"], "modifiers": ["public"]}}, {"method_name": "getPullToRefreshScrollDirection", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "Orientation", "snippet": "\tpublic final Orientation getPullToRefreshScrollDirection() {\t\treturn Orientation.HORIZONTAL;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshHorizontalScrollView.java", "stars": "74", "class": {"name": "PullToRefreshHorizontalScrollView", "extends": "PullToRefreshBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "createRefreshableView", "params": ["Context", "AttributeSet"], "throws": null, "modifiers": ["protected"], "return_type": "HorizontalScrollView", "snippet": "\tprotected HorizontalScrollView createRefreshableView(Context context, AttributeSet attrs) {\t\tHorizontalScrollView scrollView;\t\tif (VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD) {\t\t\tscrollView = new InternalHorizontalScrollViewSDK9(context, attrs);\t\t} else {\t\t\tscrollView = new HorizontalScrollView(context, attrs);\t\t}\t\tscrollView.setId(R.id.scrollview);\t\treturn scrollView;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshHorizontalScrollView.java", "stars": "74", "class": {"name": "PullToRefreshHorizontalScrollView", "extends": "PullToRefreshBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "isReadyForPullStart", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean isReadyForPullStart() {\t\treturn mRefreshableView.getScrollX() == 0;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshHorizontalScrollView.java", "stars": "74", "class": {"name": "PullToRefreshHorizontalScrollView", "extends": "PullToRefreshBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "isReadyForPullEnd", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean isReadyForPullEnd() {\t\tView scrollViewChild = mRefreshableView.getChildAt(0);\t\tif (null != scrollViewChild) {\t\t\treturn mRefreshableView.getScrollX() >= (scrollViewChild.getWidth() - getWidth());\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshHorizontalScrollView.java", "stars": "74", "class": {"name": "PullToRefreshHorizontalScrollView", "extends": "PullToRefreshBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "overScrollBy", "params": ["int", "int", "int", "int", "int", "int", "int", "int", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\t\tprotected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,\t\t\t\tint scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {\t\t\tfinal boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,\t\t\t\t\tscrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);\t\t\t// Does all of the hard work...\t\t\tOverscrollHelper.overScrollBy(PullToRefreshHorizontalScrollView.this, deltaX, scrollX, deltaY, scrollY,\t\t\t\t\tgetScrollRange(), isTouchEvent);\t\t\treturn returnValue;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshHorizontalScrollView.java", "stars": "74", "class": {"name": "InternalHorizontalScrollViewSDK9", "extends": "HorizontalScrollView", "implements": null, "modifiers": ["final"]}}, {"method_name": "getScrollRange", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "\t\tprivate int getScrollRange() {\t\t\tint scrollRange = 0;\t\t\tif (getChildCount() > 0) {\t\t\t\tView child = getChildAt(0);\t\t\t\tscrollRange = Math.max(0, child.getWidth() - (getWidth() - getPaddingLeft() - getPaddingRight()));\t\t\t}\t\t\treturn scrollRange;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshHorizontalScrollView.java", "stars": "74", "class": {"name": "InternalHorizontalScrollViewSDK9", "extends": "HorizontalScrollView", "implements": null, "modifiers": ["final"]}}, {"method_name": "getField", "params": ["Object", "String"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object getField (Object obj, String name) {\t\tClass cls = obj instanceof Class ? (Class)obj : obj.getClass();\t\tMap<String, Field> fields = fieldCache.get(cls);\t\tif (fields == null) {\t\t\tfields = new ConcurrentHashMap<String, Field>();\t\t\tfieldCache.put(cls, fields);\t\t}\t\tField field = fields.get(name);\t\tif (field == null) {\t\t\ttry {\t\t\t\tfield = cls.getDeclaredField(name);\t\t\t\tfield.setAccessible(true);\t\t\t\tfields.put(name, field);\t\t\t} catch (Throwable t) {\t\t\t\t// fall through, try super classes\t\t\t}\t\t\tif (field == null) {\t\t\t\tClass parentClass = cls.getSuperclass();\t\t\t\twhile (parentClass != Object.class && parentClass != null) {\t\t\t\t\ttry {\t\t\t\t\t\tfield = parentClass.getDeclaredField(name);\t\t\t\t\t\tfield.setAccessible(true);\t\t\t\t\t\tfields.put(name, field);\t\t\t\t\t} catch (NoSuchFieldException e) {\t\t\t\t\t\t// fall through\t\t\t\t\t}\t\t\t\t\tparentClass = parentClass.getSuperclass();\t\t\t\t}\t\t\t}\t\t}\t\treturn field;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/JavaReflection.java", "stars": "13", "class": {"name": "JavaReflection", "extends": "AbstractReflection", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFieldValue", "params": ["Object", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object getFieldValue (Object obj, Object field) {\t\tField javaField = (Field)field;\t\ttry {\t\t\treturn javaField.get(obj);\t\t} catch (Throwable e) {\t\t\tthrow new RuntimeException(\"Couldn't get value of field '\" + javaField.getName() + \"' from object of type '\" + obj.getClass().getSimpleName() + \"'\");\t\t}\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/JavaReflection.java", "stars": "13", "class": {"name": "JavaReflection", "extends": "AbstractReflection", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerExtensionClass", "params": ["Class<?>", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void registerExtensionClass(Class<?> target,Class<?> clazz){\t\tMethod[] methods = clazz.getDeclaredMethods();\t\tif(methods != null){\t\t\tMap<String, List<Method>> cachedMethodMap = extensionmethodCache.get(target);\t\t\tif(cachedMethodMap == null){\t\t\t\tcachedMethodMap = new HashMap<>();\t\t\t\textensionmethodCache.put(target,cachedMethodMap);\t\t\t}\t\t\tfor (Method method : methods) {\t\t\t\tif(Modifier.isStatic(method.getModifiers()) && method.getParameterCount() > 0){\t\t\t\t\tList<Method> cachedList = cachedMethodMap.get(method.getName());\t\t\t\t\tif(cachedList == null){\t\t\t\t\t\tcachedList = new ArrayList<>();\t\t\t\t\t\tcachedMethodMap.put(method.getName(), cachedList);\t\t\t\t\t}\t\t\t\t\tcachedList.add(method);\t\t\t\t}\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/JavaReflection.java", "stars": "13", "class": {"name": "JavaReflection", "extends": "AbstractReflection", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExtensionMethod", "params": ["Object", "String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object getExtensionMethod(Object obj, String name, Object... arguments) {\t\tClass<?> cls = obj instanceof Class ? (Class<?>)obj : obj.getClass();\t\tif(cls.isArray()){\t\t\tcls = Object[].class;\t\t}\t\treturn getExtensionMethod(cls,name,arguments);\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/JavaReflection.java", "stars": "13", "class": {"name": "JavaReflection", "extends": "AbstractReflection", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExtensionMethod", "params": ["Class<?>", "String", "Object"], "throws": null, "modifiers": ["private"], "return_type": "Object", "snippet": "\tprivate Object getExtensionMethod(Class<?> cls, String name, Object... arguments) {\t\tif(cls == null){\t\t\tcls = Object.class;\t\t}\t\tMap<String, List<Method>> methodMap = extensionmethodCache.get(cls);\t\tif(methodMap != null){\t\t\tList<Method> methodList = methodMap.get(name);\t\t\tif(methodList != null){\t\t\t\tClass<?>[] parameterTypes = new Class[arguments.length + 1];\t\t\t\tparameterTypes[0] = cls;\t\t\t\tfor (int i = 0; i < arguments.length; i++) {\t\t\t\t\tparameterTypes[i + 1] = arguments[i] == null ? null : arguments[i].getClass();\t\t\t\t}\t\t\t\treturn findMethod(methodList, parameterTypes);\t\t\t}\t\t}\t\tif(cls != Object.class){\t\t\tClass<?>[] interfaces = cls.getInterfaces();\t\t\tif(interfaces != null){\t\t\t\tfor (Class<?> clazz : interfaces) {\t\t\t\t\tObject method = getExtensionMethod(clazz,name,arguments);\t\t\t\t\tif(method != null){\t\t\t\t\t\treturn method;\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t\treturn getExtensionMethod(cls.getSuperclass(),name,arguments);\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/JavaReflection.java", "stars": "13", "class": {"name": "JavaReflection", "extends": "AbstractReflection", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMethod", "params": ["Object", "String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object getMethod (Object obj, String name, Object... arguments) {\t\tClass<?> cls = obj instanceof Class ? (Class<?>)obj : obj.getClass();\t\tMap<MethodSignature, Method> methods = methodCache.get(cls);\t\tif (methods == null) {\t\t\tmethods = new ConcurrentHashMap<MethodSignature, Method>();\t\t\tmethodCache.put(cls, methods);\t\t}\t\tClass<?>[] parameterTypes = new Class[arguments.length];\t\tfor (int i = 0; i < arguments.length; i++) {\t\t\tparameterTypes[i] = arguments[i] == null ? null : arguments[i].getClass();\t\t}\t\tJavaReflection.MethodSignature signature = new MethodSignature(name, parameterTypes);\t\tMethod method = methods.get(signature);\t\tif (method == null) {\t\t\ttry {\t\t\t\tif (name == null) {\t\t\t\t\tmethod = findApply(cls);\t\t\t\t} else {\t\t\t\t\tmethod = findMethod(cls, name, parameterTypes);\t\t\t\t\tif(method == null && parameterTypes != null){\t\t\t\t\t\tmethod = findMethod(cls, name, new Class<?>[]{Object[].class});\t\t\t\t\t}\t\t\t\t}\t\t\t\tmethod.setAccessible(true);\t\t\t\tmethods.put(signature, method);\t\t\t} catch (Throwable e) {\t\t\t\t// fall through\t\t\t}\t\t\tif (method == null) {\t\t\t\tClass<?> parentClass = cls.getSuperclass();\t\t\t\twhile (parentClass != Object.class && parentClass != null) {\t\t\t\t\ttry {\t\t\t\t\t\tif (name == null) {                            method = findApply(parentClass);                        } else {\t\t\t\t\t\t\tmethod = findMethod(parentClass, name, parameterTypes);\t\t\t\t\t\t}\t\t\t\t\t\tmethod.setAccessible(true);\t\t\t\t\t\tmethods.put(signature, method);\t\t\t\t\t} catch (Throwable e) {\t\t\t\t\t\t// fall through\t\t\t\t\t}\t\t\t\t\tparentClass = parentClass.getSuperclass();\t\t\t\t}\t\t\t}\t\t}\t\treturn method;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/JavaReflection.java", "stars": "13", "class": {"name": "JavaReflection", "extends": "AbstractReflection", "implements": null, "modifiers": ["public"]}}, {"method_name": "findApply", "params": ["Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "Method", "snippet": "\tprivate static Method findApply (Class<?> cls) {\t\tfor (Method method : cls.getDeclaredMethods()) {\t\t\tif (\"apply\".equals(method.getName())) {                return method;            }\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/JavaReflection.java", "stars": "13", "class": {"name": "JavaReflection", "extends": "AbstractReflection", "implements": null, "modifiers": ["public"]}}, {"method_name": "findMethod", "params": ["List<Method>", "Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "Method", "snippet": "\tprivate static Method findMethod (List<Method> methods, Class<?>[] parameterTypes) {\t\tMethod foundMethod = null;\t\tint foundScore = 0;\t\tfor (Method method : methods) {\t\t\t// Check if the types match.\t\t\tClass<?>[] otherTypes = method.getParameterTypes();\t\t\tif(parameterTypes.length != otherTypes.length){\t\t\t\tcontinue;\t\t\t}\t\t\tboolean match = true;\t\t\tint score = 0;\t\t\tfor (int ii = 0, nn = parameterTypes.length; ii < nn; ii++) {\t\t\t\tClass<?> type = parameterTypes[ii];\t\t\t\tClass<?> otherType = otherTypes[ii];\t\t\t\tif (!otherType.isAssignableFrom(type)) {\t\t\t\t\tscore++;\t\t\t\t\tif (!isPrimitiveAssignableFrom(type, otherType)) {\t\t\t\t\t\tscore++;\t\t\t\t\t\tif (!isCoercible(type, otherType)) {\t\t\t\t\t\t\tmatch = false;\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t} else {\t\t\t\t\t\t\tscore++;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}else if(type == null && otherType.isPrimitive()){\t\t\t\t\tmatch = false;\t\t\t\t\tbreak;\t\t\t\t}\t\t\t}\t\t\tif (match) {\t\t\t\tif (foundMethod == null) {\t\t\t\t\tfoundMethod = method;\t\t\t\t\tfoundScore = score;\t\t\t\t} else {\t\t\t\t\tif (score < foundScore) {\t\t\t\t\t\tfoundScore = score;\t\t\t\t\t\tfoundMethod = method;\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}\t\treturn foundMethod;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/JavaReflection.java", "stars": "13", "class": {"name": "JavaReflection", "extends": "AbstractReflection", "implements": null, "modifiers": ["public"]}}, {"method_name": "findMethod", "params": ["Class<?>", "String", "Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "Method", "snippet": "\tprivate static Method findMethod (Class<?> cls, String name, Class<?>[] parameterTypes) {\t\tMethod[] methods = cls.getDeclaredMethods();\t\tList<Method> methodList = new ArrayList<>();\t\tfor (int i = 0, n = methods.length; i < n; i++) {\t\t\tMethod method = methods[i];\t\t\t// if neither name or parameter list size match, bail on this method\t\t\tif (!method.getName().equals(name)) {                continue;            }\t\t\tif (method.getParameterTypes().length != parameterTypes.length) {                continue;            }\t\t\tmethodList.add(method);\t\t}\t\treturn findMethod(methodList,parameterTypes);\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/JavaReflection.java", "stars": "13", "class": {"name": "JavaReflection", "extends": "AbstractReflection", "implements": null, "modifiers": ["public"]}}, {"method_name": "isPrimitiveAssignableFrom", "params": ["Class<?>", "Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "\tprivate static boolean isPrimitiveAssignableFrom (Class<?> from, Class<?> to) {\t\tif ((from == Boolean.class || from == boolean.class) && (to == boolean.class || to == Boolean.class)) {            return true;        }\t\tif ((from == Integer.class || from == int.class) && (to == int.class || to == Integer.class)) {            return true;        }\t\tif ((from == Float.class || from == float.class) && (to == float.class || to == Float.class)) {            return true;        }\t\tif ((from == Double.class || from == double.class) && (to == double.class || to == Double.class)) {            return true;        }\t\tif ((from == Byte.class || from == byte.class) && (to == byte.class || to == Byte.class)) {            return true;        }\t\tif ((from == Short.class || from == short.class) && (to == short.class || to == Short.class)) {            return true;        }\t\tif ((from == Long.class || from == long.class) && (to == long.class || to == Long.class)) {            return true;        }\t\tif ((from == Character.class || from == char.class) && (to == char.class || to == Character.class)) {            return true;        }\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/JavaReflection.java", "stars": "13", "class": {"name": "JavaReflection", "extends": "AbstractReflection", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStringTypes", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String[] getStringTypes(Object[] objects){\t\tString[] parameterTypes = new String[objects == null ? 0: objects.length];\t\tif(objects != null){\t\t\tfor(int i=0,len = objects.length;i<len;i++){\t\t\t\tObject value = objects[i];\t\t\t\tparameterTypes[i] = value == null ? \"null\" : value.getClass().getSimpleName();\t\t\t}\t\t}\t\treturn parameterTypes;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/JavaReflection.java", "stars": "13", "class": {"name": "JavaReflection", "extends": "AbstractReflection", "implements": null, "modifiers": ["public"]}}, {"method_name": "isCoercible", "params": ["Class<?>", "Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "\tprivate static boolean isCoercible (Class<?> from, Class<?> to) {\t\tif (from == Integer.class || from == int.class) {\t\t\treturn to == float.class || to == Float.class || to == double.class || to == Double.class || to == long.class || to == Long.class;\t\t}\t\tif (from == Float.class || from == float.class) {\t\t\treturn to == double.class || to == Double.class;\t\t}\t\tif (from == Double.class || from == double.class) {\t\t\treturn false;\t\t}\t\tif (from == Character.class || from == char.class) {\t\t\treturn to == int.class || to == Integer.class || to == float.class || to == Float.class || to == double.class || to == Double.class || to == long.class\t\t\t\t|| to == Long.class;\t\t}\t\tif (from == Byte.class || from == byte.class) {\t\t\treturn to == int.class || to == Integer.class || to == float.class || to == Float.class || to == double.class || to == Double.class || to == long.class\t\t\t\t|| to == Long.class || to == short.class || to == Short.class;\t\t}\t\tif (from == Short.class || from == short.class) {\t\t\treturn to == int.class || to == Integer.class || to == float.class || to == Float.class || to == double.class || to == Double.class || to == long.class\t\t\t\t|| to == Long.class;\t\t}\t\tif (from == Long.class || from == long.class) {\t\t\treturn to == float.class || to == Float.class || to == double.class || to == Double.class;\t\t}\t\tif(from == int[].class || from == Integer[].class){\t\t\treturn to == Object[].class || to == float[].class || to == Float[].class || to == double[].class || to == Double[].class || to == long[].class || to == Long[].class;\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/JavaReflection.java", "stars": "13", "class": {"name": "JavaReflection", "extends": "AbstractReflection", "implements": null, "modifiers": ["public"]}}, {"method_name": "callMethod", "params": ["Object", "Object", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object callMethod (Object obj, Object method, Object... arguments) {\t\tMethod javaMethod = (Method)method;\t\ttry {\t\t\treturn javaMethod.invoke(obj, arguments);\t\t} catch (Throwable t) {\t\t\tthrow new RuntimeException(\"Couldn't call method '\" + javaMethod.getName() + \"' with arguments '\" + Arrays.toString(arguments)\t\t\t\t+ \"' on object of type '\" + obj.getClass().getSimpleName() + \"'.\", t);\t\t}\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/JavaReflection.java", "stars": "13", "class": {"name": "JavaReflection", "extends": "AbstractReflection", "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int hashCode () {\t\t\treturn hashCode;\t\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/JavaReflection.java", "stars": "13", "class": {"name": "MethodSignature", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean equals (Object obj) {\t\t\tif (this == obj) {                return true;            }\t\t\tif (obj == null) {                return false;            }\t\t\tif (getClass() != obj.getClass()) {                return false;            }\t\t\tJavaReflection.MethodSignature other = (JavaReflection.MethodSignature)obj;\t\t\tif (name == null) {\t\t\t\tif (other.name != null) {                    return false;                }\t\t\t} else if (!name.equals(other.name)) {                return false;            }\t\t\tif (!Arrays.equals(parameters, other.parameters)) {                return false;            }\t\t\treturn true;\t\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/interpreter/JavaReflection.java", "stars": "13", "class": {"name": "MethodSignature", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "connect", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void connect() throws IOException {        if (getDoInput()) {            InputStream in = mResolver.openInputStream(mUri);            mInputStream = new ContentURLConnectionInputStream(in);        }        if (getDoOutput()) {            OutputStream out = mResolver.openOutputStream(mUri, \"rwt\");            mOutputStream = new ContentURLConnectionOutputStream(out);        }        mConnected = true;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/ContentURLConnection.java", "stars": "74", "class": {"name": "ContentURLConnection", "extends": "URLConnection", "implements": null, "modifiers": []}}, {"method_name": "getInputStream", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "InputStream", "snippet": "    public InputStream getInputStream() throws IOException {        if (mInputStreamClosed) {            throw new IllegalStateException(\"Closed\");        }        if (!mConnected) {            connect();        }        return mInputStream;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/ContentURLConnection.java", "stars": "74", "class": {"name": "ContentURLConnection", "extends": "URLConnection", "implements": null, "modifiers": []}}, {"method_name": "getOutputStream", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "OutputStream", "snippet": "    public OutputStream getOutputStream() throws IOException {        if (mOutputStreamClosed) {            throw new IllegalStateException(\"Closed\");        }        if (!mConnected) {            connect();        }        return mOutputStream;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/ContentURLConnection.java", "stars": "74", "class": {"name": "ContentURLConnection", "extends": "URLConnection", "implements": null, "modifiers": []}}, {"method_name": "getContent", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getContent() throws IOException {        if (!mConnected) {            connect();        }        return super.getContent();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/ContentURLConnection.java", "stars": "74", "class": {"name": "ContentURLConnection", "extends": "URLConnection", "implements": null, "modifiers": []}}, {"method_name": "getContentType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getContentType() {        return mResolver.getType(mUri);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/ContentURLConnection.java", "stars": "74", "class": {"name": "ContentURLConnection", "extends": "URLConnection", "implements": null, "modifiers": []}}, {"method_name": "getContentLength", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getContentLength() {        try {            AssetFileDescriptor fd = mResolver.openAssetFileDescriptor(mUri, \"r\");            long length = fd.getLength();            if (length <= 0 && length <= Integer.MAX_VALUE) {                return (int) length;            }        } catch (IOException e) {        }        return -1;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/ContentURLConnection.java", "stars": "74", "class": {"name": "ContentURLConnection", "extends": "URLConnection", "implements": null, "modifiers": []}}, {"method_name": "close", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void close() throws IOException {            super.close();            mInputStreamClosed = true;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/ContentURLConnection.java", "stars": "74", "class": {"name": "ContentURLConnectionInputStream", "extends": "FilterInputStream", "implements": null, "modifiers": ["private"]}}, {"method_name": "close", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void close() throws IOException {            super.close();            mOutputStreamClosed = true;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/ContentURLConnection.java", "stars": "74", "class": {"name": "ContentURLConnectionOutputStream", "extends": "FilterOutputStream", "implements": null, "modifiers": ["private"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/PromoModel.java", "stars": "1", "class": {"name": "PromoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/PromoModel.java", "stars": "1", "class": {"name": "PromoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/PromoModel.java", "stars": "1", "class": {"name": "PromoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/PromoModel.java", "stars": "1", "class": {"name": "PromoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getItemId() {        return itemId;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/PromoModel.java", "stars": "1", "class": {"name": "PromoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setItemId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setItemId(Integer itemId) {        this.itemId = itemId;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/PromoModel.java", "stars": "1", "class": {"name": "PromoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPromoItemPrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal getPromoItemPrice() {        return promoItemPrice;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/PromoModel.java", "stars": "1", "class": {"name": "PromoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPromoItemPrice", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPromoItemPrice(BigDecimal promoItemPrice) {        this.promoItemPrice = promoItemPrice;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/PromoModel.java", "stars": "1", "class": {"name": "PromoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DateTime", "snippet": "    public DateTime getStartDate() {        return startDate;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/PromoModel.java", "stars": "1", "class": {"name": "PromoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStartDate", "params": ["DateTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStartDate(DateTime startDate) {        this.startDate = startDate;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/PromoModel.java", "stars": "1", "class": {"name": "PromoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEndDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DateTime", "snippet": "    public DateTime getEndDate() {        return endDate;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/PromoModel.java", "stars": "1", "class": {"name": "PromoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEndDate", "params": ["DateTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEndDate(DateTime endDate) {        this.endDate = endDate;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/PromoModel.java", "stars": "1", "class": {"name": "PromoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getStatus() {        return status;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/PromoModel.java", "stars": "1", "class": {"name": "PromoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatus(Integer status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/model/PromoModel.java", "stars": "1", "class": {"name": "PromoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPixelsFromDp", "params": ["Context", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getPixelsFromDp(Context context, int dp) {        Resources r = context.getResources();        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, r.getDisplayMetrics());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PixelUtils.java", "stars": "4", "class": {"name": "PixelUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPixelsFromSp", "params": ["Context", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getPixelsFromSp(Context context, int sp) {        Resources r = context.getResources();        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, sp, r.getDisplayMetrics());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PixelUtils.java", "stars": "4", "class": {"name": "PixelUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "changeDrawableColor", "params": ["Context", "Integer", "Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "Drawable", "snippet": "    public static Drawable changeDrawableColor(Context context, Integer resId, Integer color) {        Drawable drawable = ContextCompat.getDrawable(context, resId).mutate();        drawable.setColorFilter(new PorterDuffColorFilter(color, PorterDuff.Mode.MULTIPLY));        return drawable;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PixelUtils.java", "stars": "4", "class": {"name": "PixelUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatusBarHeight", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getStatusBarHeight(Context context) {        int statusBarHeight = 0;        Resources resources = context.getResources();        int resourceId = resources.getIdentifier(\"status_bar_height\", \"dimen\", \"android\");        if (resourceId > 0) {            statusBarHeight = resources.getDimensionPixelSize(resourceId);        }        return statusBarHeight;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PixelUtils.java", "stars": "4", "class": {"name": "PixelUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNavigationBarHeight", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getNavigationBarHeight(Context context) {        int navigationBarHeight = 0;        boolean hasBackKey = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK);        boolean hasHomeKey = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_HOME);        if (!hasBackKey && !hasHomeKey) {            // 99% sure there is a navigation bar            Resources resources = context.getResources();            int resourceId = resources.getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\");            if (resourceId > 0) {                navigationBarHeight = resources.getDimensionPixelSize(resourceId);            }        }        return navigationBarHeight;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PixelUtils.java", "stars": "4", "class": {"name": "PixelUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScreenWidth", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getScreenWidth(Context context) {        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);        Display display = wm.getDefaultDisplay();        Point size = new Point();        display.getSize(size);        return size.x;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PixelUtils.java", "stars": "4", "class": {"name": "PixelUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScreenHeight", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getScreenHeight(Context context) {        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);        Display display = wm.getDefaultDisplay();        Point size = new Point();        display.getSize(size);        return size.y;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PixelUtils.java", "stars": "4", "class": {"name": "PixelUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScreenDensity", "params": ["Context"], "throws": null, "modifiers": ["private", "static"], "return_type": "float", "snippet": "    private static float getScreenDensity(Context context) {        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);        Display display = wm.getDefaultDisplay();        DisplayMetrics metrics = new DisplayMetrics();        display.getMetrics(metrics);        return metrics.density;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PixelUtils.java", "stars": "4", "class": {"name": "PixelUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "screenIsPortrait", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean screenIsPortrait(Context context) {        return context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PixelUtils.java", "stars": "4", "class": {"name": "PixelUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isTablet", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isTablet(Context context) {        int widthPixels = getScreenWidth(context);        float density = getScreenDensity(context);        int dpi = (int) (widthPixels / density);        return dpi > TABLET_MIN_DP_WEIGHT;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PixelUtils.java", "stars": "4", "class": {"name": "PixelUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    Configuration configuration = new Configuration();    Environment environment = new Environment(\"development\", new JdbcTransactionFactory(),        PgContainer.getUnpooledDataSource());    configuration.setEnvironment(environment);    configuration.addMapper(OrdersMapper.class);    sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),        \"org/apache/ibatis/submitted/refcursor/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/refcursor/RefCursorTest.java", "stars": "15", "class": {"name": "RefCursorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testRefCursor1", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testRefCursor1() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      OrdersMapper mapper = sqlSession.getMapper(OrdersMapper.class);      Map<String, Object> parameter = new HashMap<>();      parameter.put(\"orderId\", 1);      mapper.getOrder1(parameter);      assertNotNull(parameter.get(\"order\"));      @SuppressWarnings(\"unchecked\")      List<Order> orders = (List<Order>) parameter.get(\"order\");      assertEquals(1, orders.size());      Order order = orders.get(0);      assertEquals(3, order.getDetailLines().size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/refcursor/RefCursorTest.java", "stars": "15", "class": {"name": "RefCursorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testRefCursor2", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testRefCursor2() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      OrdersMapper mapper = sqlSession.getMapper(OrdersMapper.class);      Map<String, Object> parameter = new HashMap<>();      parameter.put(\"orderId\", 1);      mapper.getOrder2(parameter);      assertNotNull(parameter.get(\"order\"));      @SuppressWarnings(\"unchecked\")      List<Order> orders = (List<Order>) parameter.get(\"order\");      assertEquals(1, orders.size());      Order order = orders.get(0);      assertEquals(3, order.getDetailLines().size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/refcursor/RefCursorTest.java", "stars": "15", "class": {"name": "RefCursorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldUseResultHandlerOnOutputParam", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUseResultHandlerOnOutputParam() {    class OrderResultHandler implements ResultHandler<Order> {      private List<Order> orders = new ArrayList<>();      @Override      public void handleResult(ResultContext<? extends Order> resultContext) {        Order order = resultContext.getResultObject();        order.setCustomerName(\"Anonymous\");        orders.add(order);      }      List<Order> getResult() {        return orders;      }    }    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      OrdersMapper mapper = sqlSession.getMapper(OrdersMapper.class);      OrderResultHandler handler = new OrderResultHandler();      Map<String, Object> parameter = new HashMap<>();      parameter.put(\"orderId\", 1);      mapper.getOrder3(parameter, handler);      assertNull(parameter.get(\"order\"));      assertEquals(3, parameter.get(\"detailCount\"));      assertEquals(\"Anonymous\", handler.getResult().get(0).getCustomerName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/refcursor/RefCursorTest.java", "stars": "15", "class": {"name": "RefCursorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldNullResultSetNotCauseNpe", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldNullResultSetNotCauseNpe() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      OrdersMapper mapper = sqlSession.getMapper(OrdersMapper.class);      Map<String, Object> parameter = new HashMap<>();      parameter.put(\"orderId\", 99);      mapper.getOrder3(parameter, resultContext -> {        // won't be used      });      assertEquals(0, parameter.get(\"detailCount\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/refcursor/RefCursorTest.java", "stars": "15", "class": {"name": "RefCursorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "handleResult", "params": ["ResultContext<Order>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "      public void handleResult(ResultContext<? extends Order> resultContext) {        Order order = resultContext.getResultObject();        order.setCustomerName(\"Anonymous\");        orders.add(order);      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/refcursor/RefCursorTest.java", "stars": "15", "class": {"name": "OrderResultHandler", "extends": null, "implements": ["ResultHandler"], "modifiers": []}}, {"method_name": "getResult", "params": [], "throws": null, "modifiers": [], "return_type": "List<Order>", "snippet": "      List<Order> getResult() {        return orders;      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/refcursor/RefCursorTest.java", "stars": "15", "class": {"name": "OrderResultHandler", "extends": null, "implements": ["ResultHandler"], "modifiers": []}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\tpublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\t\tView view = inflater.inflate(R.layout.fragment_pink, container, false);\t\treturn view;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ViewPagerDemo/src/pl/looksok/viewpagerdemo/FragmentPink.java", "stars": "74", "class": {"name": "FragmentPink", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_web_detail);        ButterKnife.bind(this);        backupRendType = GSYVideoType.getRenderType();        //\u8bbe\u7f6e\u4e3aSurface\u64ad\u653e\u6a21\u5f0f\uff0c\u6ce8\u610f\u6b64\u8bbe\u7f6e\u662f\u5168\u5c40\u7684        GSYVideoType.setRenderType(GSYVideoType.SUFRACE);        resolveNormalVideoUI();        initVideoBuilderMode();        webPlayer.setLockClickListener(new LockClickListener() {            @Override            public void onClick(View view, boolean lock) {                if (orientationUtils != null) {                    //\u914d\u5408\u4e0b\u65b9\u7684onConfigurationChanged                    orientationUtils.setEnable(!lock);                    webPlayer.getCurrentPlayer().setRotateViewAuto(!lock);                }            }        });        WebSettings settings = webView.getSettings();        settings.setJavaScriptEnabled(true);        webView.loadUrl(\"https://www.baidu.com\");        orientationUtils.setRotateWithSystem(false);        webTopLayout.setOnScrollChangeListener(new NestedScrollView.OnScrollChangeListener() {            @Override            public void onScrollChange(NestedScrollView v, int scrollX, int scrollY, int oldScrollX, int oldScrollY) {                if (!webPlayer.isIfCurrentIsFullscreen() && scrollY >= 0 && isPlay) {                    if (scrollY > webPlayer.getHeight()) {                        //\u5982\u679c\u662f\u5c0f\u7a97\u53e3\u5c31\u4e0d\u9700\u8981\u5904\u7406                        if (!isSmall) {                            isSmall = true;                            int size = CommonUtil.dip2px(WebDetailActivity.this, 150);                            webPlayer.showSmallVideo(new Point(size, size), true, true);                            orientationUtils.setEnable(false);                        }                    } else {                        if (isSmall) {                            isSmall = false;                            orientationUtils.setEnable(true);                            //\u5fc5\u987b                            webTopLayoutVideo.postDelayed(new Runnable() {                                @Override                                public void run() {                                    webPlayer.hideSmallVideo();                                }                            }, 50);                        }                    }                    webTopLayoutVideo.setTranslationY((scrollY <= webTopLayoutVideo.getHeight()) ? -scrollY : -webTopLayoutVideo.getHeight());                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/WebDetailActivity.java", "stars": "2", "class": {"name": "WebDetailActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        //\u8bbe\u7f6e\u4e3aGL\u64ad\u653e\u6a21\u5f0f\uff0c\u624d\u80fd\u652f\u6301\u6ee4\u955c\uff0c\u6ce8\u610f\u6b64\u8bbe\u7f6e\u662f\u5168\u5c40\u7684        GSYVideoType.setRenderType(backupRendType);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/WebDetailActivity.java", "stars": "2", "class": {"name": "WebDetailActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGSYVideoPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StandardGSYVideoPlayer", "snippet": "    public StandardGSYVideoPlayer getGSYVideoPlayer() {        return webPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/WebDetailActivity.java", "stars": "2", "class": {"name": "WebDetailActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGSYVideoOptionBuilder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder getGSYVideoOptionBuilder() {        String url = \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";        //String url = \"https://d131x7vzzf85jg.cloudfront.net/upload/documents/paper/b2/61/00/00/20160420_115018_b544.mp4\";        //\u589e\u52a0\u5c01\u9762\u3002\u5185\u7f6e\u5c01\u9762\u53ef\u53c2\u8003SampleCoverVideo        ImageView imageView = new ImageView(this);        loadCover(imageView, url);        return new GSYVideoOptionBuilder()                .setThumbImageView(imageView)                .setUrl(url)                .setCacheWithPlay(false)                .setRotateWithSystem(false)                .setVideoTitle(\"\u6d4b\u8bd5\u89c6\u9891\")                .setIsTouchWiget(true)                .setRotateViewAuto(false)                .setLockLand(false)                .setShowFullAnimation(false)                .setNeedLockFull(true);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/WebDetailActivity.java", "stars": "2", "class": {"name": "WebDetailActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "clickForFullScreen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clickForFullScreen() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/WebDetailActivity.java", "stars": "2", "class": {"name": "WebDetailActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDetailOrientationRotateAuto", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean getDetailOrientationRotateAuto() {        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/WebDetailActivity.java", "stars": "2", "class": {"name": "WebDetailActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadCover", "params": ["ImageView", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void loadCover(ImageView imageView, String url) {        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        imageView.setImageResource(R.mipmap.xxx1);        Glide.with(this.getApplicationContext())                .setDefaultRequestOptions(                        new RequestOptions()                                .frame(3000000)                                .centerCrop()                                .error(R.mipmap.xxx2)                                .placeholder(R.mipmap.xxx1))                .load(url)                .into(imageView);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/WebDetailActivity.java", "stars": "2", "class": {"name": "WebDetailActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveNormalVideoUI", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveNormalVideoUI() {        //\u589e\u52a0title        webPlayer.getTitleTextView().setVisibility(View.GONE);        webPlayer.getBackButton().setVisibility(View.GONE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/WebDetailActivity.java", "stars": "2", "class": {"name": "WebDetailActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "readAt", "params": ["long", "byte", "int", "int"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int readAt(long position, byte[] buffer, int offset, int size) throws IOException {        if(position + 1 >= mMediaBytes.length){            return -1;        }        int length;        if(position + size < mMediaBytes.length){            length = size;        }else{            length = (int) (mMediaBytes.length - position);            if(length > buffer.length)                length = buffer.length ;            length--;        }        System.arraycopy(mMediaBytes, (int) position, buffer, offset, length);        return length;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/RawDataSourceProvider.java", "stars": "2", "class": {"name": "RawDataSourceProvider", "extends": null, "implements": ["IMediaDataSource"], "modifiers": ["public"]}}, {"method_name": "getSize", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "long", "snippet": "    public long getSize() throws IOException {        long length  = mDescriptor.getLength();        if(mMediaBytes == null){            InputStream inputStream = mDescriptor.createInputStream();            mMediaBytes = readBytes(inputStream);        }        return length;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/RawDataSourceProvider.java", "stars": "2", "class": {"name": "RawDataSourceProvider", "extends": null, "implements": ["IMediaDataSource"], "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void close() throws IOException {        if(mDescriptor != null)            mDescriptor.close();        mDescriptor = null;        mMediaBytes = null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/RawDataSourceProvider.java", "stars": "2", "class": {"name": "RawDataSourceProvider", "extends": null, "implements": ["IMediaDataSource"], "modifiers": ["public"]}}, {"method_name": "readBytes", "params": ["InputStream"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte[] readBytes(InputStream inputStream) throws IOException {        ByteArrayOutputStream byteBuffer = new ByteArrayOutputStream();        int bufferSize = 1024;        byte[] buffer = new byte[bufferSize];        int len = 0;        while ((len = inputStream.read(buffer)) != -1) {            byteBuffer.write(buffer, 0, len);        }        return byteBuffer.toByteArray();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/RawDataSourceProvider.java", "stars": "2", "class": {"name": "RawDataSourceProvider", "extends": null, "implements": ["IMediaDataSource"], "modifiers": ["public"]}}, {"method_name": "create", "params": ["Context", "Uri"], "throws": null, "modifiers": ["public", "static"], "return_type": "RawDataSourceProvider", "snippet": "    public static RawDataSourceProvider create(Context context, Uri uri){        try {            AssetFileDescriptor fileDescriptor = context.getApplicationContext().getContentResolver().openAssetFileDescriptor(uri, \"r\");            return new RawDataSourceProvider(fileDescriptor);        } catch (FileNotFoundException e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/RawDataSourceProvider.java", "stars": "2", "class": {"name": "RawDataSourceProvider", "extends": null, "implements": ["IMediaDataSource"], "modifiers": ["public"]}}, {"method_name": "init", "params": ["FilterConfig"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init(FilterConfig filterConfig) throws ServletException {\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/filter/filtroAutorizacao.java", "stars": "1", "class": {"name": "filtroAutorizacao", "extends": null, "implements": ["Filter"], "modifiers": ["public"]}}, {"method_name": "doFilter", "params": ["ServletRequest", "ServletResponse", "FilterChain"], "throws": ["IOException", "ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\t\t\tthrows IOException, ServletException {\t\tHttpServletRequest req = (HttpServletRequest) request;\t\tHttpServletResponse res = (HttpServletResponse) response;        HttpSession session = req.getSession(false);\t\t        String reqURI = req.getRequestURI();                        if(reqURI.endsWith(\"/login.xhtml\") || reqURI.contains(\"javax.faces.resource\") || (session != null && session.getAttribute(\"UsuarioLogado\") != null)) {        \t\t\tchain.doFilter(request, response);\t\t        }else {\t\t\tres.sendRedirect(req.getContextPath() + \"/login.xhtml\");\t\t}\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/filter/filtroAutorizacao.java", "stars": "1", "class": {"name": "filtroAutorizacao", "extends": null, "implements": ["Filter"], "modifiers": ["public"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void destroy() {\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/filter/filtroAutorizacao.java", "stars": "1", "class": {"name": "filtroAutorizacao", "extends": null, "implements": ["Filter"], "modifiers": ["public"]}}, {"method_name": "authorize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void authorize() {    if (this.isSecurityEnabled) {      try {        login(this.keytabPrincipal, this.keytabPath);      } catch (final IOException e) {        log.error(e);        throw new AzkabanException(String.format(            \"Error: Unable to authorize to Hadoop. Principal: %s Keytab: %s\", this.keytabPrincipal,            this.keytabPath));      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/HdfsAuth.java", "stars": "18", "class": {"name": "HdfsAuth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "login", "params": ["String", "String"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void login(final String keytabPrincipal, final String keytabPath) throws IOException {    if (this.loggedInUser == null) {      log.info(          String.format(\"Logging in using Principal: %s Keytab: %s\", keytabPrincipal, keytabPath));      UserGroupInformation.loginUserFromKeytab(keytabPrincipal, keytabPath);      this.loggedInUser = UserGroupInformation.getLoginUser();      log.info(String.format(\"User %s logged in.\", this.loggedInUser));    } else {      log.info(String.format(\"User %s already logged in. Refreshing TGT\", this.loggedInUser));      this.loggedInUser.checkTGTAndReloginFromKeytab();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/HdfsAuth.java", "stars": "18", "class": {"name": "HdfsAuth", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStackInSlot", "params": ["int", "ItemStack"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStackInSlot(int slot, @Nonnull ItemStack stack) {        inv.setStackInSlot(slot, stack);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemMatrix/InventoryMatrix.java", "stars": "2", "class": {"name": "InventoryMatrix", "extends": null, "implements": ["IItemHandlerModifiable"], "modifiers": ["public"]}}, {"method_name": "getSlots", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSlots() {        return inv.getSlots();    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemMatrix/InventoryMatrix.java", "stars": "2", "class": {"name": "InventoryMatrix", "extends": null, "implements": ["IItemHandlerModifiable"], "modifiers": ["public"]}}, {"method_name": "getStackInSlot", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "    public ItemStack getStackInSlot(int slot) {        return inv.getStackInSlot(slot);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemMatrix/InventoryMatrix.java", "stars": "2", "class": {"name": "InventoryMatrix", "extends": null, "implements": ["IItemHandlerModifiable"], "modifiers": ["public"]}}, {"method_name": "insertItem", "params": ["int", "ItemStack", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "    public ItemStack insertItem(int slot, @Nonnull ItemStack stack, boolean simulate) {        return inv.insertItem(slot, stack, simulate);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemMatrix/InventoryMatrix.java", "stars": "2", "class": {"name": "InventoryMatrix", "extends": null, "implements": ["IItemHandlerModifiable"], "modifiers": ["public"]}}, {"method_name": "extractItem", "params": ["int", "int", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "    public ItemStack extractItem(int slot, int amount, boolean simulate) {        return ItemStack.EMPTY;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemMatrix/InventoryMatrix.java", "stars": "2", "class": {"name": "InventoryMatrix", "extends": null, "implements": ["IItemHandlerModifiable"], "modifiers": ["public"]}}, {"method_name": "getSlotLimit", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSlotLimit(int slot) {        return inv.getSlotLimit(slot);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemMatrix/InventoryMatrix.java", "stars": "2", "class": {"name": "InventoryMatrix", "extends": null, "implements": ["IItemHandlerModifiable"], "modifiers": ["public"]}}, {"method_name": "getServiceName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getServiceName() {        return ID;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "discoveryFilter", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "DiscoveryFilter", "snippet": "    public static DiscoveryFilter discoveryFilter() {        return new DiscoveryFilter(ID, \"Chromecast\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "setApplicationID", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setApplicationID(String id) {        applicationID = id;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getApplicationID", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getApplicationID() {        return applicationID;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getPriorityLevel", "params": ["Class<CapabilityMethods>"], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getPriorityLevel(Class<? extends CapabilityMethods> clazz) {        if (clazz.equals(MediaPlayer.class)) {            return getMediaPlayerCapabilityLevel();        }        else if (clazz.equals(MediaControl.class)) {            return getMediaControlCapabilityLevel();        }        else if (clazz.equals(VolumeControl.class)) {            return getVolumeControlCapabilityLevel();        }        else if (clazz.equals(WebAppLauncher.class)) {            return getWebAppLauncherCapabilityLevel();        }        return CapabilityPriorityLevel.NOT_SUPPORTED;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "connect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void connect() {        if (connected && mApiClient != null &&                mApiClient.isConnecting() && mApiClient.isConnected())            return;        if (castDevice == null) {            this.castDevice = (CastDevice) getServiceDescription().getDevice();        }        if (mApiClient == null) {            mApiClient = createApiClient();            mApiClient.connect();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "createApiClient", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "GoogleApiClient", "snippet": "    protected GoogleApiClient createApiClient() {        Cast.CastOptions.Builder apiOptionsBuilder = Cast.CastOptions                .builder(castDevice, mCastClientListener);        return new GoogleApiClient.Builder(DiscoveryManager.getInstance().getContext())                .addApi(Cast.API, apiOptionsBuilder.build())                .addConnectionCallbacks(mConnectionCallbacks)                .addOnConnectionFailedListener(mConnectionFailedListener)                .build();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnect() {        if (!connected)            return;        connected = false;        mWaitingForReconnect = false;        detachMediaPlayer();        if (!commandQueue.isEmpty())            commandQueue.clear();        if (mApiClient != null && mApiClient.isConnected()) {            Cast.CastApi.leaveApplication(mApiClient);            mApiClient.disconnect();        }        mApiClient = null;        Util.runOnUI(new Runnable() {            @Override            public void run() {                if (getListener() != null) {                    getListener().onDisconnect(CastService.this, null);                }            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getMediaControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaControl", "snippet": "    public MediaControl getMediaControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getMediaControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getMediaControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "play", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void play(final ResponseListener<Object> listener) {        ConnectionListener connectionListener = new ConnectionListener() {            @Override            public void onConnected() {                try {                    mMediaPlayer.play(mApiClient);                    Util.postSuccess(listener, null);                } catch (Exception e) {                    Util.postError(listener, new ServiceCommandError(0, \"Unable to play\", null));                }            }        };        runCommand(connectionListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "pause", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pause(final ResponseListener<Object> listener) {        ConnectionListener connectionListener = new ConnectionListener() {            @Override            public void onConnected() {                try {                    mMediaPlayer.pause(mApiClient);                    Util.postSuccess(listener, null);                } catch (Exception e) {                    Util.postError(listener, new ServiceCommandError(0, \"Unable to pause\", null));                }            }        };        runCommand(connectionListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "stop", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop(final ResponseListener<Object> listener) {        ConnectionListener connectionListener = new ConnectionListener() {            @Override            public void onConnected() {                try {                    mMediaPlayer.stop(mApiClient);                    Util.postSuccess(listener, null);                } catch (Exception e) {                    Util.postError(listener, new ServiceCommandError(0, \"Unable to stop\", null));                }            }        };        runCommand(connectionListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "rewind", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void rewind(ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "fastForward", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void fastForward(ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "previous", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void previous(ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "next", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void next(ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "seek", "params": ["long", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void seek(final long position, final ResponseListener<Object> listener) {        if (mMediaPlayer == null || mMediaPlayer.getMediaStatus() == null) {            Util.postError(listener, new ServiceCommandError(0, \"There is no media currently available\", null));            return;        }        ConnectionListener connectionListener = new ConnectionListener() {            @Override            public void onConnected() {                try {                    mMediaPlayer.seek(mApiClient, position, RemoteMediaPlayer.RESUME_STATE_UNCHANGED).setResultCallback(                            new ResultCallback<MediaChannelResult>() {                                @Override                                public void onResult(MediaChannelResult result) {                                    Status status = result.getStatus();                                    if (status.isSuccess()) {                                        Util.postSuccess(listener, null);                                    } else {                                        Util.postError(listener, new ServiceCommandError(status.getStatusCode(), status.getStatusMessage(), status));                                    }                                }                            });                } catch (Exception e) {                    Util.postError(listener, new ServiceCommandError(0, \"Unable to seek\", null));                }            }        };        runCommand(connectionListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getDuration", "params": ["DurationListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getDuration(final DurationListener listener) {        if (mMediaPlayer != null && mMediaPlayer.getMediaStatus() != null) {            Util.postSuccess(listener, mMediaPlayer.getStreamDuration());        }        else {            Util.postError(listener, new ServiceCommandError(0, \"There is no media currently available\", null));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getPosition", "params": ["PositionListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getPosition(final PositionListener listener) {        if (mMediaPlayer != null && mMediaPlayer.getMediaStatus() != null) {            Util.postSuccess(listener, mMediaPlayer.getApproximateStreamPosition());        }        else {            Util.postError(listener, new ServiceCommandError(0, \"There is no media currently available\", null));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getMediaPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaPlayer", "snippet": "    public MediaPlayer getMediaPlayer() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getMediaPlayerCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getMediaPlayerCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getMediaInfo", "params": ["MediaInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getMediaInfo(MediaInfoListener listener) {        if (mMediaPlayer == null)            return;        if (mMediaPlayer.getMediaInfo() != null) {            String url = mMediaPlayer.getMediaInfo().getContentId();            String mimeType = mMediaPlayer.getMediaInfo().getContentType();            MediaMetadata metadata = mMediaPlayer.getMediaInfo().getMetadata();            String title = null;            String description = null;            ArrayList<ImageInfo> list = null;            if (metadata != null) {                title = metadata.getString(MediaMetadata.KEY_TITLE);                description =  metadata.getString(MediaMetadata.KEY_SUBTITLE);                if (metadata.getImages() != null && metadata.getImages().size() > 0) {                    String iconUrl = metadata.getImages().get(0).getUrl().toString();                    list = new ArrayList<ImageInfo>();                    list.add(new ImageInfo(iconUrl));                }            }            MediaInfo info = new MediaInfo(url, mimeType, title, description, list);            Util.postSuccess(listener, info);        }        else {            Util.postError(listener, new ServiceCommandError(0, \"Media Info is null\", null));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "subscribeMediaInfo", "params": ["MediaInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<MediaInfoListener>", "snippet": "    public ServiceSubscription<MediaInfoListener> subscribeMediaInfo(            MediaInfoListener listener) {        URLServiceSubscription<MediaInfoListener> request = new URLServiceSubscription<MediaInfoListener>(this, \"info\", null, null);        request.addListener(listener);        addSubscription(request);        return request;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "attachMediaPlayer", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void attachMediaPlayer() {        if (mMediaPlayer != null) {            return;        }        mMediaPlayer = createMediaPlayer();        mMediaPlayer.setOnStatusUpdatedListener(new RemoteMediaPlayer.OnStatusUpdatedListener() {            @Override            public void onStatusUpdated() {                if (subscriptions.size() > 0) {                    for (URLServiceSubscription<?> subscription: subscriptions) {                        if (subscription.getTarget().equalsIgnoreCase(PLAY_STATE)) {                            for (int i = 0; i < subscription.getListeners().size(); i++) {                                @SuppressWarnings(\"unchecked\")                                ResponseListener<Object> listener = (ResponseListener<Object>) subscription.getListeners().get(i);                                if (mMediaPlayer != null && mMediaPlayer.getMediaStatus() != null) {                                    PlayStateStatus status = PlayStateStatus.convertPlayerStateToPlayStateStatus(mMediaPlayer.getMediaStatus().getPlayerState());                                    Util.postSuccess(listener, status);                                }                            }                        }                    }                }            }        });        mMediaPlayer.setOnMetadataUpdatedListener(new RemoteMediaPlayer.OnMetadataUpdatedListener() {            @Override            public void onMetadataUpdated() {                if (subscriptions.size() > 0) {                    for (URLServiceSubscription<?> subscription : subscriptions) {                        if (subscription.getTarget().equalsIgnoreCase(\"info\")) {                            for (int i = 0; i < subscription.getListeners().size(); i++) {                                MediaInfoListener listener = (MediaInfoListener) subscription.getListeners().get(i);                                getMediaInfo(listener);                            }                        }                    }                }            }        });        if (mApiClient != null) {            try {                Cast.CastApi.setMessageReceivedCallbacks(mApiClient, mMediaPlayer.getNamespace(),                        mMediaPlayer);            } catch (Exception e) {                Log.w(Util.T, \"Exception while creating media channel\", e);            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "createMediaPlayer", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "RemoteMediaPlayer", "snippet": "    protected RemoteMediaPlayer createMediaPlayer() {        return new RemoteMediaPlayer();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "detachMediaPlayer", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void detachMediaPlayer() {        if ((mMediaPlayer != null) && (mApiClient != null)) {            try {                Cast.CastApi.removeMessageReceivedCallbacks(mApiClient,                        mMediaPlayer.getNamespace());            } catch (IOException e) {                Log.w(Util.T, \"Exception while launching application\", e);            }        }        mMediaPlayer = null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "displayImage", "params": ["String", "String", "String", "String", "String", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayImage(String url, String mimeType, String title,                             String description, String iconSrc, LaunchListener listener) {        MediaMetadata mMediaMetadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_PHOTO);        mMediaMetadata.putString(MediaMetadata.KEY_TITLE, title);        mMediaMetadata.putString(MediaMetadata.KEY_SUBTITLE, description);        if (iconSrc != null) {            Uri iconUri = Uri.parse(iconSrc);            WebImage image = new WebImage(iconUri, 100, 100);            mMediaMetadata.addImage(image);        }        com.google.android.gms.cast.MediaInfo mediaInformation = new com.google.android.gms.cast.MediaInfo.Builder(url)                .setContentType(mimeType)                .setStreamType(com.google.android.gms.cast.MediaInfo.STREAM_TYPE_NONE)                .setMetadata(mMediaMetadata)                .setStreamDuration(0)                .setCustomData(null)                .build();        playMedia(mediaInformation, applicationID, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "displayImage", "params": ["MediaInfo", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayImage(MediaInfo mediaInfo, LaunchListener listener) {        String mediaUrl = null;        String mimeType = null;        String title = null;        String desc = null;        String iconSrc = null;        if (mediaInfo != null) {            mediaUrl = mediaInfo.getUrl();            mimeType = mediaInfo.getMimeType();            title = mediaInfo.getTitle();            desc = mediaInfo.getDescription();            if (mediaInfo.getImages() != null && mediaInfo.getImages().size() > 0) {                ImageInfo imageInfo = mediaInfo.getImages().get(0);                iconSrc = imageInfo.getUrl();            }        }        displayImage(mediaUrl, mimeType, title, desc, iconSrc, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["String", "String", "String", "String", "String", "String", "boolean", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playMedia(String url, String subsUrl, String mimeType, String title,                          String description, String iconSrc, boolean shouldLoop,                          LaunchListener listener) {        MediaMetadata mMediaMetadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);        mMediaMetadata.putString(MediaMetadata.KEY_TITLE, title);        mMediaMetadata.putString(MediaMetadata.KEY_SUBTITLE, description);        if (iconSrc != null) {            Uri iconUri = Uri.parse(iconSrc);            WebImage image = new WebImage(iconUri, 100, 100);            mMediaMetadata.addImage(image);        }        List<MediaTrack> mediaTracks = new ArrayList<>();        if(subsUrl != null) {            MediaTrack subtitle = new MediaTrack.Builder(1, MediaTrack.TYPE_TEXT)                    .setName(\"Subtitle\")                    .setSubtype(MediaTrack.SUBTYPE_SUBTITLES)                    .setContentId(subsUrl)                    .setContentType(\"text/vtt\")                    .setLanguage(\"en\")                    .build();            mediaTracks.add(subtitle);        }        com.google.android.gms.cast.MediaInfo mediaInformation = new com.google.android.gms.cast.MediaInfo.Builder(url)                .setContentType(mimeType)                .setStreamType(com.google.android.gms.cast.MediaInfo.STREAM_TYPE_BUFFERED)                .setMetadata(mMediaMetadata)                .setStreamDuration(1000)                .setCustomData(null)                .setMediaTracks(mediaTracks)                .build();        playMedia(mediaInformation, applicationID, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["String", "String", "String", "String", "String", "boolean", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playMedia(String url, String mimeType, String title,                          String description, String iconSrc, boolean shouldLoop,                          LaunchListener listener) {        playMedia(url, null, mimeType, title, description, iconSrc, shouldLoop, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["MediaInfo", "boolean", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playMedia(MediaInfo mediaInfo, boolean shouldLoop, LaunchListener listener) {        String mediaUrl = null;        String subsUrl = null;        String mimeType = null;        String title = null;        String desc = null;        String iconSrc = null;        if (mediaInfo != null) {            mediaUrl = mediaInfo.getUrl();            subsUrl = mediaInfo.getSubsUrl();            mimeType = mediaInfo.getMimeType();            title = mediaInfo.getTitle();            desc = mediaInfo.getDescription();            if (mediaInfo.getImages() != null && mediaInfo.getImages().size() > 0) {                ImageInfo imageInfo = mediaInfo.getImages().get(0);                iconSrc = imageInfo.getUrl();            }        }        playMedia(mediaUrl, subsUrl, mimeType, title, desc, iconSrc, shouldLoop, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["com", "String", "LaunchListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void playMedia(final com.google.android.gms.cast.MediaInfo mediaInformation, final String mediaAppId, final LaunchListener listener) {        final ApplicationConnectionResultCallback webAppLaunchCallback = new ApplicationConnectionResultCallback(new LaunchWebAppListener() {            @Override            public void onSuccess(final WebAppSession webAppSession) {                ConnectionListener connectionListener = new ConnectionListener() {                    @Override                    public void onConnected() {                        try {                            mMediaPlayer.load(mApiClient, mediaInformation, true).setResultCallback(new ResultCallback<RemoteMediaPlayer.MediaChannelResult>() {                                @Override                                public void onResult(MediaChannelResult result) {                                    Status status = result.getStatus();                                    if (status.isSuccess()) {                                        webAppSession.launchSession.setSessionType(LaunchSessionType.Media);                                        // White text, black outline, no background                                        TextTrackStyle textTrackStyle = new TextTrackStyle();                                        textTrackStyle.setForegroundColor(Color.parseColor(\"#FFFFFFFF\"));                                        textTrackStyle.setBackgroundColor(Color.parseColor(\"#01000000\"));                                        textTrackStyle.setWindowType(TextTrackStyle.WINDOW_TYPE_NONE);                                        textTrackStyle.setEdgeType(TextTrackStyle.EDGE_TYPE_OUTLINE);                                        textTrackStyle.setEdgeColor(Color.BLACK);                                        textTrackStyle.setFontGenericFamily(TextTrackStyle.FONT_FAMILY_SANS_SERIF);                                        mMediaPlayer.setTextTrackStyle(mApiClient, textTrackStyle);                                        mMediaPlayer.setActiveMediaTracks(mApiClient, new long[]{1});                                        Util.postSuccess(listener, new MediaLaunchObject(webAppSession.launchSession, CastService.this));                                    }                                    else {                                        Util.postError(listener, new ServiceCommandError(status.getStatusCode(), status.getStatusMessage(), status));                                    }                                }                            });                        } catch (Exception e) {                            Util.postError(listener, new ServiceCommandError(0, \"Unable to load\", null));                        }                    }                };                runCommand(connectionListener);            }            @Override            public void onFailure(ServiceCommandError error) {                Util.postError(listener, error);            }        });        launchingAppId = mediaAppId;        ConnectionListener connectionListener = new ConnectionListener() {            @Override            public void onConnected() {                boolean relaunchIfRunning = false;                try {                    if (Cast.CastApi.getApplicationStatus(mApiClient) == null || (!mediaAppId.equals(currentAppId))) {                        relaunchIfRunning = true;                    }                    LaunchOptions options = new LaunchOptions();                    options.setRelaunchIfRunning(relaunchIfRunning);                    Cast.CastApi.launchApplication(mApiClient, mediaAppId, options).setResultCallback(webAppLaunchCallback);                } catch (Exception e) {                    Util.postError(listener, new ServiceCommandError(0, \"Unable to launch\", null));                }            }        };        runCommand(connectionListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "closeMedia", "params": ["LaunchSession", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void closeMedia(final LaunchSession launchSession, final ResponseListener<Object> listener) {        ConnectionListener connectionListener = new ConnectionListener() {            @Override            public void onConnected() {                try {                    Cast.CastApi.stopApplication(mApiClient, launchSession.getSessionId()).setResultCallback(new ResultCallback<Status>() {                        @Override                        public void onResult(Status result) {                            if (result.isSuccess()) {                                Util.postSuccess(listener, result);                            } else {                                Util.postError(listener, new ServiceCommandError(result.getStatusCode(), result.getStatusMessage(), result));                            }                        }                    });                } catch (Exception e) {                    Util.postError(listener, new ServiceCommandError(0, \"Unable to stop\", null));                }            }        };        runCommand(connectionListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getWebAppLauncher", "params": [], "throws": null, "modifiers": ["public"], "return_type": "WebAppLauncher", "snippet": "    public WebAppLauncher getWebAppLauncher() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getWebAppLauncherCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getWebAppLauncherCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "launchWebApp", "params": ["String", "WebAppSession"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchWebApp(String webAppId, WebAppSession.LaunchListener listener) {        launchWebApp(webAppId, true, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "launchWebApp", "params": ["String", "boolean", "WebAppSession"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchWebApp(final String webAppId, final boolean relaunchIfRunning, final WebAppSession.LaunchListener listener) {        launchingAppId = webAppId;        final LaunchWebAppListener launchWebAppListener = new LaunchWebAppListener() {            @Override            public void onSuccess(WebAppSession webAppSession) {                Util.postSuccess(listener, webAppSession);            }            @Override            public void onFailure(ServiceCommandError error) {                Util.postError(listener, error);            }        };        ConnectionListener connectionListener = new ConnectionListener() {            @Override            public void onConnected() {                // TODO Workaround, for some reason, if relaunchIfRunning is false, launchApplication returns 2005 error and cannot launch.                try {                    if (relaunchIfRunning == false) {                        Cast.CastApi.joinApplication(mApiClient).setResultCallback(new ResultCallback<Cast.ApplicationConnectionResult>() {                            @Override                            public void onResult(ApplicationConnectionResult result) {                                if (result.getStatus().isSuccess() &&                                        result.getApplicationMetadata() != null &&                                        result.getApplicationMetadata().getName() != null &&                                        result.getApplicationMetadata().getApplicationId().equals(webAppId)) {                                    ApplicationMetadata applicationMetadata = result.getApplicationMetadata();                                    currentAppId = applicationMetadata.getApplicationId();                                    LaunchSession launchSession = LaunchSession.launchSessionForAppId(applicationMetadata.getApplicationId());                                    launchSession.setAppName(applicationMetadata.getName());                                    launchSession.setSessionId(result.getSessionId());                                    launchSession.setSessionType(LaunchSessionType.WebApp);                                    launchSession.setService(CastService.this);                                    CastWebAppSession webAppSession = new CastWebAppSession(launchSession, CastService.this);                                    webAppSession.setMetadata(applicationMetadata);                                    sessions.put(applicationMetadata.getApplicationId(), webAppSession);                                    Util.postSuccess(listener, webAppSession);                                } else {                                    LaunchOptions options = new LaunchOptions();                                    options.setRelaunchIfRunning(true);                                    try {                                        Cast.CastApi.launchApplication(mApiClient, webAppId, options).setResultCallback(                                                new ApplicationConnectionResultCallback(launchWebAppListener));                                    } catch (Exception e) {                                        Util.postError(listener, new ServiceCommandError(0, \"Unable to launch\", null));                                    }                                }                            }                        });                    }                    else {                        LaunchOptions options = new LaunchOptions();                        options.setRelaunchIfRunning(relaunchIfRunning);                        Cast.CastApi.launchApplication(mApiClient, webAppId, options).setResultCallback(                                new ApplicationConnectionResultCallback(launchWebAppListener)                        );                    }                } catch (Exception e) {                    Util.postError(listener, new ServiceCommandError(0, \"Unable to launch\", null));                }            }        };        runCommand(connectionListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "launchWebApp", "params": ["String", "JSONObject", "WebAppSession"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchWebApp(String webAppId, JSONObject params, WebAppSession.LaunchListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "launchWebApp", "params": ["String", "JSONObject", "boolean", "WebAppSession"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchWebApp(String webAppId, JSONObject params, boolean relaunchIfRunning, WebAppSession.LaunchListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "requestStatus", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void requestStatus(final ResponseListener<Object> listener) {        try {            mMediaPlayer                    .requestStatus(mApiClient)                    .setResultCallback(                            new ResultCallback<RemoteMediaPlayer.MediaChannelResult>() {                                @Override                                public void onResult(MediaChannelResult result) {                                    if (result.getStatus().isSuccess()) {                                        Util.postSuccess(listener, result);                                    }                                    else {                                        Util.postError(listener, new ServiceCommandError(0, \"Failed to request status\", result));                                    }                                }                            });        } catch (Exception e) {            Util.postError(listener, new ServiceCommandError(0, \"There is no media currently available\", null));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "joinApplication", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void joinApplication(final ResponseListener<Object> listener) {        ConnectionListener connectionListener = new ConnectionListener() {            @Override            public void onConnected() {                try {                    Cast.CastApi.joinApplication(mApiClient).setResultCallback(new ResultCallback<Cast.ApplicationConnectionResult>() {                        @Override                        public void onResult(ApplicationConnectionResult result) {                            if (result.getStatus().isSuccess()) {                                // TODO: Maybe there is better way to check current cast device is showing backdrop, but for now, if chromecast is showing backdrop, then requestStatus would never response.                                if (result.getApplicationMetadata() != null &&                                        result.getApplicationMetadata().getName() != null &&                                        !result.getApplicationMetadata().getName().equals(\"Backdrop\") &&                                        mMediaPlayer != null && mApiClient != null) {                                    mMediaPlayer.requestStatus(mApiClient).setResultCallback(                                            new ResultCallback<RemoteMediaPlayer.MediaChannelResult>() {                                                @Override                                                public void onResult(MediaChannelResult result) {                                                    Util.postSuccess(listener, result);                                                }                                            });                                }                                else {                                    Util.postSuccess(listener, result);                                }                            }                            else {                                Util.postError(listener, new ServiceCommandError(0, \"Failed to join application\", result));                            }                        }                    });                } catch (Exception e) {                    Util.postError(listener, new ServiceCommandError(0, \"Unable to join\", null));                }            }        };        runCommand(connectionListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "joinWebApp", "params": ["LaunchSession", "WebAppSession"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void joinWebApp(final LaunchSession webAppLaunchSession, final WebAppSession.LaunchListener listener) {        final ApplicationConnectionResultCallback webAppLaunchCallback = new ApplicationConnectionResultCallback(new LaunchWebAppListener() {            @Override            public void onSuccess(final WebAppSession webAppSession) {                webAppSession.connect(new ResponseListener<Object>() {                    @Override                    public void onSuccess(Object object) {                        requestStatus(new ResponseListener<Object>() {                            @Override                            public void onSuccess(Object object) {                                Util.postSuccess(listener, webAppSession);                            }                            @Override                            public void onError(ServiceCommandError error) {                                // we sent success, because join is already succeeded.                                Util.postSuccess(listener, webAppSession);                            }                        });                    }                    @Override                    public void onError(ServiceCommandError error) {                        Util.postError(listener, error);                    }                });            }            @Override            public void onFailure(ServiceCommandError error) {                Util.postError(listener, error);            }        });        launchingAppId = webAppLaunchSession.getAppId();        ConnectionListener connectionListener = new ConnectionListener() {            @Override            public void onConnected() {                try {                    Cast.CastApi.joinApplication(mApiClient, webAppLaunchSession.getAppId()).setResultCallback(webAppLaunchCallback);                } catch (Exception e) {                    Util.postError(listener, new ServiceCommandError(0, \"Unable to join\", null));                }            }        };        runCommand(connectionListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "joinWebApp", "params": ["String", "WebAppSession"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void joinWebApp(String webAppId, WebAppSession.LaunchListener listener) {        LaunchSession launchSession = LaunchSession.launchSessionForAppId(webAppId);        launchSession.setSessionType(LaunchSessionType.WebApp);        launchSession.setService(this);        joinWebApp(launchSession, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "closeWebApp", "params": ["LaunchSession", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void closeWebApp(LaunchSession launchSession, final ResponseListener<Object> listener) {        ConnectionListener connectionListener = new ConnectionListener() {            @Override            public void onConnected() {                try {                    Cast.CastApi.stopApplication(mApiClient).setResultCallback(new ResultCallback<Status>() {                        @Override                        public void onResult(Status status) {                            if (status.isSuccess()) {                                Util.postSuccess(listener, null);                            }                            else {                                Util.postError(listener, new ServiceCommandError(status.getStatusCode(), status.getStatusMessage(), status));                            }                        }                    });                } catch (Exception e) {                    Util.postError(listener, new ServiceCommandError(0, \"Unable to stop\", null));                }            }        };        runCommand(connectionListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "pinWebApp", "params": ["String", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pinWebApp(String webAppId, ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "unPinWebApp", "params": ["String", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unPinWebApp(String webAppId, ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "isWebAppPinned", "params": ["String", "WebAppPinStatusListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void isWebAppPinned(String webAppId, WebAppPinStatusListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "subscribeIsWebAppPinned", "params": ["String", "WebAppPinStatusListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<WebAppPinStatusListener>", "snippet": "    public ServiceSubscription<WebAppPinStatusListener> subscribeIsWebAppPinned(            String webAppId, WebAppPinStatusListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getVolumeControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "VolumeControl", "snippet": "    public VolumeControl getVolumeControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getVolumeControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getVolumeControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "volumeUp", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void volumeUp(final ResponseListener<Object> listener) {        getVolume(new VolumeListener() {            @Override            public void onSuccess(final Float volume) {                if (volume >= 1.0) {                    Util.postSuccess(listener, null);                }                else {                    float newVolume = (float)(volume + 0.01);                    if (newVolume > 1.0)                        newVolume = (float)1.0;                    setVolume(newVolume, listener);                    Util.postSuccess(listener, null);                }            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "volumeDown", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void volumeDown(final ResponseListener<Object> listener) {        getVolume(new VolumeListener() {            @Override            public void onSuccess(final Float volume) {                if (volume <= 0.0) {                    Util.postSuccess(listener, null);                }                else {                    float newVolume = (float)(volume - 0.01);                    if (newVolume < 0.0)                        newVolume = (float)0.0;                    setVolume(newVolume, listener);                    Util.postSuccess(listener, null);                }            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "setVolume", "params": ["float", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVolume(final float volume, final ResponseListener<Object> listener) {        ConnectionListener connectionListener = new ConnectionListener() {            @Override            public void onConnected() {                try {                    Cast.CastApi.setVolume(mApiClient, volume);                    Util.postSuccess(listener, null);                } catch (Exception e) {                    Util.postError(listener, new ServiceCommandError(0, \"setting volume level failed\", null));                }            }        };        runCommand(connectionListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getVolume", "params": ["VolumeListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getVolume(VolumeListener listener) {        Util.postSuccess(listener, currentVolumeLevel);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "setMute", "params": ["boolean", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMute(final boolean isMute, final ResponseListener<Object> listener) {        ConnectionListener connectionListener = new ConnectionListener() {            @Override            public void onConnected() {                try {                    Cast.CastApi.setMute(mApiClient, isMute);                    Util.postSuccess(listener, null);                } catch (Exception e) {                    Util.postError(listener, new ServiceCommandError(0, \"setting mute status failed\", null));                }            }        };        runCommand(connectionListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getMute", "params": ["MuteListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getMute(final MuteListener listener) {        Util.postSuccess(listener, currentMuteStatus);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "subscribeVolume", "params": ["VolumeListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<VolumeListener>", "snippet": "    public ServiceSubscription<VolumeListener> subscribeVolume(VolumeListener listener) {        URLServiceSubscription<VolumeListener> request = new URLServiceSubscription<VolumeListener>(this, CAST_SERVICE_VOLUME_SUBSCRIPTION_NAME, null, null);        request.addListener(listener);        addSubscription(request);        return request;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "subscribeMute", "params": ["MuteListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<MuteListener>", "snippet": "    public ServiceSubscription<MuteListener> subscribeMute(MuteListener listener) {        URLServiceSubscription<MuteListener> request = new URLServiceSubscription<MuteListener>(this, CAST_SERVICE_MUTE_SUBSCRIPTION_NAME, null, null);        request.addListener(listener);        addSubscription(request);        return request;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "updateCapabilities", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updateCapabilities() {        List<String> capabilities = new ArrayList<String>();        Collections.addAll(capabilities, MediaPlayer.Capabilities);        Collections.addAll(capabilities, VolumeControl.Capabilities);        capabilities.add(Play);        capabilities.add(Pause);        capabilities.add(Stop);        capabilities.add(Duration);        capabilities.add(Seek);        capabilities.add(Position);        capabilities.add(PlayState);        capabilities.add(Subtitles_Vtt);        capabilities.add(PlayState_Subscribe);        capabilities.add(WebAppLauncher.Launch);        capabilities.add(Message_Send);        capabilities.add(Message_Receive);        capabilities.add(Message_Send_JSON);        capabilities.add(Message_Receive_JSON);        capabilities.add(WebAppLauncher.Connect);        capabilities.add(WebAppLauncher.Disconnect);        capabilities.add(WebAppLauncher.Join);        capabilities.add(WebAppLauncher.Close);        setCapabilities(capabilities);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getPlayState", "params": ["PlayStateListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getPlayState(PlayStateListener listener) {        if (mMediaPlayer != null && mMediaPlayer.getMediaStatus() != null) {            PlayStateStatus status = PlayStateStatus.convertPlayerStateToPlayStateStatus(mMediaPlayer.getMediaStatus().getPlayerState());            Util.postSuccess(listener, status);        }        else {            Util.postError(listener, new ServiceCommandError(0, \"There is no media currently available\", null));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getApiClient", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GoogleApiClient", "snippet": "    public GoogleApiClient getApiClient() {        return mApiClient;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "isConnectable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnectable() {        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "isConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnected() {        return connected;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "subscribePlayState", "params": ["PlayStateListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<PlayStateListener>", "snippet": "    public ServiceSubscription<PlayStateListener> subscribePlayState(PlayStateListener listener) {        URLServiceSubscription<PlayStateListener> request = new URLServiceSubscription<PlayStateListener>(this, PLAY_STATE, null, null);        request.addListener(listener);        addSubscription(request);        return request;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "addSubscription", "params": ["URLServiceSubscription<?>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addSubscription(URLServiceSubscription<?> subscription) {        subscriptions.add(subscription);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "unsubscribe", "params": ["URLServiceSubscription<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unsubscribe(URLServiceSubscription<?> subscription) {        subscriptions.remove(subscription);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "getSubscriptions", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<URLServiceSubscription>", "snippet": "    public List<URLServiceSubscription<?>> getSubscriptions() {        return subscriptions;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "setSubscriptions", "params": ["List<URLServiceSubscription>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSubscriptions(List<URLServiceSubscription<?>> subscriptions) {        this.subscriptions = subscriptions;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "runCommand", "params": ["ConnectionListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void runCommand(ConnectionListener connectionListener) {        if (mApiClient != null && mApiClient.isConnected()) {            connectionListener.onConnected();        }        else {            connect();            commandQueue.add(connectionListener);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl", "VolumeControl", "WebAppLauncher"], "modifiers": ["public"]}}, {"method_name": "onApplicationDisconnected", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onApplicationDisconnected(int statusCode) {            Log.d(Util.T, \"Cast.Listener.onApplicationDisconnected: \" + statusCode);            if (currentAppId == null)                return;            CastWebAppSession webAppSession = sessions.get(currentAppId);            if (webAppSession == null)                return;            webAppSession.handleAppClose();            currentAppId = null;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastListener", "extends": "Cast", "implements": null, "modifiers": ["private"]}}, {"method_name": "onApplicationStatusChanged", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onApplicationStatusChanged() {            ConnectionListener connectionListener = new ConnectionListener() {                @Override                public void onConnected() {                    if (mApiClient != null) {                        ApplicationMetadata applicationMetadata = Cast.CastApi.getApplicationMetadata(mApiClient);                        if (applicationMetadata != null)                            currentAppId = applicationMetadata.getApplicationId();                    }                }            };            runCommand(connectionListener);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastListener", "extends": "Cast", "implements": null, "modifiers": ["private"]}}, {"method_name": "onVolumeChanged", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onVolumeChanged() {            ConnectionListener connectionListener = new ConnectionListener() {                @Override                public void onConnected() {                    try {                        currentVolumeLevel = (float) Cast.CastApi.getVolume(mApiClient);                        currentMuteStatus = Cast.CastApi.isMute(mApiClient);                    } catch (Exception e) {                        e.printStackTrace();                    }                    if (subscriptions.size() > 0) {                        for (URLServiceSubscription<?> subscription: subscriptions) {                            if (subscription.getTarget().equals(CAST_SERVICE_VOLUME_SUBSCRIPTION_NAME)) {                                for (int i = 0; i < subscription.getListeners().size(); i++) {                                    @SuppressWarnings(\"unchecked\")                                    ResponseListener<Object> listener = (ResponseListener<Object>) subscription.getListeners().get(i);                                    Util.postSuccess(listener, currentVolumeLevel);                                }                            }                            else if (subscription.getTarget().equals(CAST_SERVICE_MUTE_SUBSCRIPTION_NAME)) {                                for (int i = 0; i < subscription.getListeners().size(); i++) {                                    @SuppressWarnings(\"unchecked\")                                    ResponseListener<Object> listener = (ResponseListener<Object>) subscription.getListeners().get(i);                                    Util.postSuccess(listener, currentMuteStatus);                                }                            }                        }                    }                }            };            runCommand(connectionListener);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "CastListener", "extends": "Cast", "implements": null, "modifiers": ["private"]}}, {"method_name": "onConnectionSuspended", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onConnectionSuspended(final int cause) {            Log.d(Util.T, \"ConnectionCallbacks.onConnectionSuspended\");            mWaitingForReconnect = true;            detachMediaPlayer();        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "ConnectionCallbacks", "extends": null, "implements": ["GoogleApiClient"], "modifiers": ["private"]}}, {"method_name": "onConnected", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onConnected(Bundle connectionHint) {            Log.d(Util.T, \"ConnectionCallbacks.onConnected, wasWaitingForReconnect: \" + mWaitingForReconnect);            attachMediaPlayer();            if (mApiClient != null) {                Cast.CastApi.joinApplication(mApiClient).setResultCallback(new ResultCallback<Cast.ApplicationConnectionResult>() {                    @Override                    public void onResult(ApplicationConnectionResult result) {                        if (result.getStatus().isSuccess()) {                            // TODO: Maybe there is better way to check current cast device is showing backdrop, but for now, if chromecast is showing backdrop, then requestStatus would never response.                            if (result.getApplicationMetadata() != null &&                                    result.getApplicationMetadata().getName() != null &&                                    !result.getApplicationMetadata().getName().equals(\"Backdrop\") &&                                    mMediaPlayer != null && mApiClient != null) {                                mMediaPlayer.requestStatus(mApiClient).setResultCallback(                                        new ResultCallback<RemoteMediaPlayer.MediaChannelResult>() {                                            @Override                                            public void onResult(MediaChannelResult result) {                                                joinFinished();                                            }                                        });                            }                            else {                                joinFinished();                            }                        }                        else {                            joinFinished();                        }                    }                });            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "ConnectionCallbacks", "extends": null, "implements": ["GoogleApiClient"], "modifiers": ["private"]}}, {"method_name": "joinFinished", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void joinFinished() {            if (mWaitingForReconnect) {                mWaitingForReconnect = false;            }            else {                connected = true;                reportConnected(true);            }            if (!commandQueue.isEmpty()) {                for (ConnectionListener listener : commandQueue) {                    listener.onConnected();                    commandQueue.remove(listener);                }            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "ConnectionCallbacks", "extends": null, "implements": ["GoogleApiClient"], "modifiers": ["private"]}}, {"method_name": "onConnectionFailed", "params": ["ConnectionResult"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onConnectionFailed(final ConnectionResult result) {            Log.d(Util.T, \"ConnectionFailedListener.onConnectionFailed \" + (result != null ? result: \"\"));            detachMediaPlayer();            connected = false;            mWaitingForReconnect = false;            mApiClient = null;            Util.runOnUI(new Runnable() {                @Override                public void run() {                    if (listener != null) {                        ServiceCommandError error = new ServiceCommandError(result.getErrorCode(), \"Failed to connect to Google Cast device\", result);                        listener.onConnectionFailure(CastService.this, error);                    }                }            });        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "ConnectionFailedListener", "extends": null, "implements": ["GoogleApiClient"], "modifiers": ["private"]}}, {"method_name": "onResult", "params": ["ApplicationConnectionResult"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onResult(ApplicationConnectionResult result) {            Status status = result.getStatus();            if (status.isSuccess()) {                ApplicationMetadata applicationMetadata = result.getApplicationMetadata();                currentAppId = applicationMetadata.getApplicationId();                LaunchSession launchSession = LaunchSession.launchSessionForAppId(applicationMetadata.getApplicationId());                launchSession.setAppName(applicationMetadata.getName());                launchSession.setSessionId(result.getSessionId());                launchSession.setSessionType(LaunchSessionType.WebApp);                launchSession.setService(CastService.this);                CastWebAppSession webAppSession = new CastWebAppSession(launchSession, CastService.this);                webAppSession.setMetadata(applicationMetadata);                sessions.put(applicationMetadata.getApplicationId(), webAppSession);                if (listener != null) {                    listener.onSuccess(webAppSession);                }                launchingAppId = null;            }            else {                if (listener != null) {                    listener.onFailure(new ServiceCommandError(status.getStatusCode(), status.getStatusMessage(), status));                }            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/google_cast/src/com/connectsdk/service/CastService.java", "stars": "4", "class": {"name": "ApplicationConnectionResultCallback", "extends": null, "implements": ["ResultCallback"], "modifiers": ["private"]}}, {"method_name": "getPasswordAuthentication", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "PasswordAuthentication", "snippet": "    protected PasswordAuthentication getPasswordAuthentication() {           return new PasswordAuthentication(user, password);       }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/sendemail/src/com/example/sendemail/GmailSender.java", "stars": "74", "class": {"name": "GmailSender", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "sendMail", "params": ["String", "String", "String", "String"], "throws": ["Exception"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void sendMail(String subject, String body, String sender, String recipients) throws Exception {           try{        MimeMessage message = new MimeMessage(session);           DataHandler handler = new DataHandler(new ByteArrayDataSource(body.getBytes(), \"text/plain\"));           message.setSender(new InternetAddress(sender));           message.setSubject(subject);           message.setDataHandler(handler);           if (recipients.indexOf(',') > 0)               message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipients));           else              message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipients));           Transport.send(message);           }catch(Exception e){        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/sendemail/src/com/example/sendemail/GmailSender.java", "stars": "74", "class": {"name": "GmailSender", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setType(String type) {               this.type = type;           }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/sendemail/src/com/example/sendemail/GmailSender.java", "stars": "74", "class": {"name": "ByteArrayDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getContentType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getContentType() {               if (type == null)                   return \"application/octet-stream\";               else                  return type;           }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/sendemail/src/com/example/sendemail/GmailSender.java", "stars": "74", "class": {"name": "ByteArrayDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getInputStream", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "InputStream", "snippet": "        public InputStream getInputStream() throws IOException {               return new ByteArrayInputStream(data);           }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/sendemail/src/com/example/sendemail/GmailSender.java", "stars": "74", "class": {"name": "ByteArrayDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getName() {               return \"ByteArrayDataSource\";           }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/sendemail/src/com/example/sendemail/GmailSender.java", "stars": "74", "class": {"name": "ByteArrayDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getOutputStream", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "OutputStream", "snippet": "        public OutputStream getOutputStream() throws IOException {               throw new IOException(\"Not Supported\");           }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/sendemail/src/com/example/sendemail/GmailSender.java", "stars": "74", "class": {"name": "ByteArrayDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(        \"org/apache/ibatis/submitted/use_actual_param_name/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),        \"org/apache/ibatis/submitted/use_actual_param_name/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/use_actual_param_name/UseActualParamNameTest.java", "stars": "15", "class": {"name": "UseActualParamNameTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSingleParamBeReferencedByAnyName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSingleParamBeReferencedByAnyName() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUserById(1);      assertNotNull(user);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/use_actual_param_name/UseActualParamNameTest.java", "stars": "15", "class": {"name": "UseActualParamNameTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldMultipleParamsBeReferencedByActualNames", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldMultipleParamsBeReferencedByActualNames() {//    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {//      Mapper mapper = sqlSession.getMapper(Mapper.class);//      User user = mapper.getUserByIdAndName(1, \"User1\");//      assertNotNull(user);//    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/use_actual_param_name/UseActualParamNameTest.java", "stars": "15", "class": {"name": "UseActualParamNameTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSoleListParamBeReferencedByImplicitName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSoleListParamBeReferencedByImplicitName() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<User> users = mapper.getUsersByIdList(Arrays.asList(1, 2));      assertEquals(2, users.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/use_actual_param_name/UseActualParamNameTest.java", "stars": "15", "class": {"name": "UseActualParamNameTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldListParamBeReferencedByActualNameIfAnotherParamExists", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldListParamBeReferencedByActualNameIfAnotherParamExists() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<User> users = mapper.getUsersByIdListAndName(Arrays.asList(1, 2), null);      assertEquals(2, users.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/use_actual_param_name/UseActualParamNameTest.java", "stars": "15", "class": {"name": "UseActualParamNameTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onNotifySuccess", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onNotifySuccess();    public abstract void onNotifyFailure(BleException exception);    public abstract void onCharacteristicChanged(byte[] data);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleNotifyCallback.java", "stars": "2", "class": {"name": "BleNotifyCallback", "extends": "BleBaseCallback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onNotifyFailure", "params": ["BleException"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onNotifyFailure(BleException exception);    public abstract void onCharacteristicChanged(byte[] data);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleNotifyCallback.java", "stars": "2", "class": {"name": "BleNotifyCallback", "extends": "BleBaseCallback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onCharacteristicChanged", "params": ["byte"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onCharacteristicChanged(byte[] data);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleNotifyCallback.java", "stars": "2", "class": {"name": "BleNotifyCallback", "extends": "BleBaseCallback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "shouldTestDataTypeOfGenericMethod", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldTestDataTypeOfGenericMethod() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    MetaClass meta = MetaClass.forClass(GenericConcrete.class, reflectorFactory);    assertEquals(Long.class, meta.getGetterType(\"id\"));    assertEquals(Long.class, meta.getSetterType(\"id\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/MetaClassTest.java", "stars": "15", "class": {"name": "MetaClassTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldThrowReflectionExceptionGetGetterType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldThrowReflectionExceptionGetGetterType() {    try {      ReflectorFactory reflectorFactory = new DefaultReflectorFactory();      MetaClass meta = MetaClass.forClass(RichType.class, reflectorFactory);      meta.getGetterType(\"aString\");      org.junit.jupiter.api.Assertions.fail(\"should have thrown ReflectionException\");    } catch (ReflectionException expected) {      assertEquals(\"There is no getter for property named \\'aString\\' in \\'class org.apache.ibatis.domain.misc.RichType\\'\", expected.getMessage());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/MetaClassTest.java", "stars": "15", "class": {"name": "MetaClassTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldCheckGetterExistance", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCheckGetterExistance() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    MetaClass meta = MetaClass.forClass(RichType.class, reflectorFactory);    assertTrue(meta.hasGetter(\"richField\"));    assertTrue(meta.hasGetter(\"richProperty\"));    assertTrue(meta.hasGetter(\"richList\"));    assertTrue(meta.hasGetter(\"richMap\"));    assertTrue(meta.hasGetter(\"richList[0]\"));    assertTrue(meta.hasGetter(\"richType\"));    assertTrue(meta.hasGetter(\"richType.richField\"));    assertTrue(meta.hasGetter(\"richType.richProperty\"));    assertTrue(meta.hasGetter(\"richType.richList\"));    assertTrue(meta.hasGetter(\"richType.richMap\"));    assertTrue(meta.hasGetter(\"richType.richList[0]\"));    assertEquals(\"richType.richProperty\", meta.findProperty(\"richType.richProperty\", false));    assertFalse(meta.hasGetter(\"[0]\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/MetaClassTest.java", "stars": "15", "class": {"name": "MetaClassTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldCheckSetterExistance", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCheckSetterExistance() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    MetaClass meta = MetaClass.forClass(RichType.class, reflectorFactory);    assertTrue(meta.hasSetter(\"richField\"));    assertTrue(meta.hasSetter(\"richProperty\"));    assertTrue(meta.hasSetter(\"richList\"));    assertTrue(meta.hasSetter(\"richMap\"));    assertTrue(meta.hasSetter(\"richList[0]\"));    assertTrue(meta.hasSetter(\"richType\"));    assertTrue(meta.hasSetter(\"richType.richField\"));    assertTrue(meta.hasSetter(\"richType.richProperty\"));    assertTrue(meta.hasSetter(\"richType.richList\"));    assertTrue(meta.hasSetter(\"richType.richMap\"));    assertTrue(meta.hasSetter(\"richType.richList[0]\"));    assertFalse(meta.hasSetter(\"[0]\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/MetaClassTest.java", "stars": "15", "class": {"name": "MetaClassTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldCheckTypeForEachGetter", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCheckTypeForEachGetter() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    MetaClass meta = MetaClass.forClass(RichType.class, reflectorFactory);    assertEquals(String.class, meta.getGetterType(\"richField\"));    assertEquals(String.class, meta.getGetterType(\"richProperty\"));    assertEquals(List.class, meta.getGetterType(\"richList\"));    assertEquals(Map.class, meta.getGetterType(\"richMap\"));    assertEquals(List.class, meta.getGetterType(\"richList[0]\"));    assertEquals(RichType.class, meta.getGetterType(\"richType\"));    assertEquals(String.class, meta.getGetterType(\"richType.richField\"));    assertEquals(String.class, meta.getGetterType(\"richType.richProperty\"));    assertEquals(List.class, meta.getGetterType(\"richType.richList\"));    assertEquals(Map.class, meta.getGetterType(\"richType.richMap\"));    assertEquals(List.class, meta.getGetterType(\"richType.richList[0]\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/MetaClassTest.java", "stars": "15", "class": {"name": "MetaClassTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldCheckTypeForEachSetter", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCheckTypeForEachSetter() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    MetaClass meta = MetaClass.forClass(RichType.class, reflectorFactory);    assertEquals(String.class, meta.getSetterType(\"richField\"));    assertEquals(String.class, meta.getSetterType(\"richProperty\"));    assertEquals(List.class, meta.getSetterType(\"richList\"));    assertEquals(Map.class, meta.getSetterType(\"richMap\"));    assertEquals(List.class, meta.getSetterType(\"richList[0]\"));    assertEquals(RichType.class, meta.getSetterType(\"richType\"));    assertEquals(String.class, meta.getSetterType(\"richType.richField\"));    assertEquals(String.class, meta.getSetterType(\"richType.richProperty\"));    assertEquals(List.class, meta.getSetterType(\"richType.richList\"));    assertEquals(Map.class, meta.getSetterType(\"richType.richMap\"));    assertEquals(List.class, meta.getSetterType(\"richType.richList[0]\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/MetaClassTest.java", "stars": "15", "class": {"name": "MetaClassTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldCheckGetterAndSetterNames", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCheckGetterAndSetterNames() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    MetaClass meta = MetaClass.forClass(RichType.class, reflectorFactory);    assertEquals(5, meta.getGetterNames().length);    assertEquals(5, meta.getSetterNames().length);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/MetaClassTest.java", "stars": "15", "class": {"name": "MetaClassTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFindPropertyName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFindPropertyName() {    ReflectorFactory reflectorFactory = new DefaultReflectorFactory();    MetaClass meta = MetaClass.forClass(RichType.class, reflectorFactory);    assertEquals(\"richField\", meta.findProperty(\"RICHfield\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/MetaClassTest.java", "stars": "15", "class": {"name": "MetaClassTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "linksEndpointShouldBeAvailable", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid linksEndpointShouldBeAvailable() {\t\tResponseEntity<String> entity = new TestRestTemplate(\"user\", getPassword())\t\t\t\t.getForEntity(\"http://localhost:\" + this.managementPort + \"/\", String.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).contains(\"\\\"_links\\\"\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jersey/src/test/java/smoketest/jersey/JerseyDifferentPortSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "JerseyDifferentPortSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "\tprivate String getPassword() {\t\treturn \"password\";\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jersey/src/test/java/smoketest/jersey/JerseyDifferentPortSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "JerseyDifferentPortSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getMappedStatement", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MappedStatement", "snippet": "  public MappedStatement getMappedStatement() {    return mappedStatement;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BatchResult.java", "stars": "15", "class": {"name": "BatchResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSql", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSql() {    return sql;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BatchResult.java", "stars": "15", "class": {"name": "BatchResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParameterObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getParameterObject() {    return parameterObjects.get(0);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BatchResult.java", "stars": "15", "class": {"name": "BatchResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParameterObjects", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Object>", "snippet": "  public List<Object> getParameterObjects() {    return parameterObjects;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BatchResult.java", "stars": "15", "class": {"name": "BatchResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUpdateCounts", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int[] getUpdateCounts() {    return updateCounts;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BatchResult.java", "stars": "15", "class": {"name": "BatchResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUpdateCounts", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUpdateCounts(int[] updateCounts) {    this.updateCounts = updateCounts;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BatchResult.java", "stars": "15", "class": {"name": "BatchResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addParameterObject", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addParameterObject(Object parameterObject) {    this.parameterObjects.add(parameterObject);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BatchResult.java", "stars": "15", "class": {"name": "BatchResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "play", "params": ["String", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<String>", "snippet": "\tpublic ResponseEntity<String> play(@PathVariable String deviceId,@PathVariable String channelId, String startTime,  String endTime){\t\t\t\tDevice device = storager.queryVideoDevice(deviceId);\t\tString ssrc = cmder.playStreamCmd(device, channelId);\t\t\t\tif (logger.isDebugEnabled()) {\t\t\tlogger.debug(String.format(\"\u8bbe\u5907\u9884\u89c8 API\u8c03\u7528\uff0cdeviceId\uff1a%s \uff0cchannelId\uff1a%s\",deviceId, channelId));\t\t\tlogger.debug(\"\u8bbe\u5907\u9884\u89c8 API\u8c03\u7528\uff0cssrc\uff1a\"+ssrc+\",ZLMedia streamId:\"+Integer.toHexString(Integer.parseInt(ssrc)));\t\t}\t\t\t\tif(ssrc!=null) {\t\t\treturn new ResponseEntity<String>(ssrc,HttpStatus.OK);\t\t} else {\t\t\tlogger.warn(\"\u8bbe\u5907\u9884\u89c8API\u8c03\u7528\u5931\u8d25\uff01\");\t\t\treturn new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);\t\t}\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/vmanager/playback/PlaybackController.java", "stars": "29", "class": {"name": "PlaybackController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mostrarNumerosPares", "params": ["Double", "Double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mostrarNumerosPares(Double numeroUno, Double numeroDos){     this.numeroUno=numeroUno;     this.numeroUno=numeroDos;           for(double a=numeroUno;numeroUno<=numeroDos;numeroUno++){               if(numeroUno%2==0){                 System.out.println(\"Numero:\"+numeroUno);                  }                    }    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/numerosParesEimpares.java", "stars": "2", "class": {"name": "numerosParesEimpares", "extends": "numeros", "implements": null, "modifiers": ["public"]}}, {"method_name": "mostrarNumerosIPares", "params": ["Double", "Double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "     public void mostrarNumerosIPares(Double numeroUno, Double numeroDos){     this.numeroUno=numeroUno;     this.numeroUno=numeroDos;           for(double a=numeroUno;numeroUno<=numeroDos;numeroUno++){               if(numeroUno%2==1){                 System.out.println(\"Numero:\"+numeroUno);                  }                    }    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/numerosParesEimpares.java", "stars": "2", "class": {"name": "numerosParesEimpares", "extends": "numeros", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLibOptions", "params": ["Context", "boolean", "String", "boolean", "String", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "ArrayList<String>", "snippet": "    public static ArrayList<String> getLibOptions(Context context, boolean timeStreching, String subtitlesEncoding, boolean frameSkip, String chroma, boolean verboseMode) {        final SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(context);        ArrayList<String> options = new ArrayList<>(50);        int deblocking = getDeblocking(-1);        int networkCaching = pref.getInt(\"network_caching_value\", 0);        if (networkCaching > 60000)            networkCaching = 60000;        else if (networkCaching < 0)            networkCaching = 0;        /* CPU intensive plugin, setting for slow devices */        options.add(timeStreching ? \"--audio-time-stretch\" : \"--no-audio-time-stretch\");        options.add(\"--avcodec-skiploopfilter\");        options.add(\"\" + deblocking);        options.add(\"--avcodec-skip-frame\");        options.add(frameSkip ? \"2\" : \"0\");        options.add(\"--avcodec-skip-idct\");        options.add(frameSkip ? \"2\" : \"0\");        options.add(\"--subsdec-encoding\");        options.add(subtitlesEncoding);        options.add(\"--stats\");        /* XXX: why can't the default be fine ? #7792 */        if (networkCaching > 0)            options.add(\"--network-caching=\" + networkCaching);        options.add(\"--androidwindow-chroma\");        options.add(chroma != null && chroma.length() > 0 ? chroma : \"RV32\");        options.add(verboseMode ? \"-vvv\" : \"-vv\");        return options;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vlc/VLCOptions.java", "stars": "4", "class": {"name": "VLCOptions", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAout", "params": ["SharedPreferences"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getAout(SharedPreferences pref) {        int aout = -1;        try {            aout = Integer.parseInt(pref.getString(\"aout\", \"-1\"));        } catch (NumberFormatException ignored) {}        final HWDecoderUtil.AudioOutput hwaout = HWDecoderUtil.getAudioOutputFromDevice();        if (hwaout == HWDecoderUtil.AudioOutput.AUDIOTRACK || hwaout == HWDecoderUtil.AudioOutput.OPENSLES)            aout = hwaout == HWDecoderUtil.AudioOutput.OPENSLES ? AOUT_OPENSLES : AOUT_AUDIOTRACK;        return aout == AOUT_OPENSLES ? \"opensles_android\" : \"android_audiotrack\";    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vlc/VLCOptions.java", "stars": "4", "class": {"name": "VLCOptions", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDeblocking", "params": ["int"], "throws": null, "modifiers": ["private", "static"], "return_type": "int", "snippet": "    private static int getDeblocking(int deblocking) {        int ret = deblocking;        if (deblocking < 0) {            /**             * Set some reasonable sDeblocking defaults:             *             * Skip all (4) for armv6 and MIPS by default             * Skip non-ref (1) for all armv7 more than 1.2 Ghz and more than 2 cores             * Skip non-key (3) for all devices that don't meet anything above             */            VLCUtil.MachineSpecs m = VLCUtil.getMachineSpecs();            if (m == null)                return ret;            if ((m.hasArmV6 && !(m.hasArmV7)) || m.hasMips)                ret = 4;            else if (m.frequency >= 1200 && m.processors > 2)                ret = 1;            else if (m.bogoMIPS >= 1200 && m.processors > 2) {                ret = 1;                Log.d(TAG, \"Used bogoMIPS due to lack of frequency info\");            } else                ret = 3;        } else if (deblocking > 4) { // sanity check            ret = 3;        }        return ret;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vlc/VLCOptions.java", "stars": "4", "class": {"name": "VLCOptions", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMediaOptions", "params": ["Media", "Context", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setMediaOptions(Media media, Context context, int flags) {        boolean noHardwareAcceleration = (flags & MEDIA_NO_HWACCEL) != 0;        boolean noVideo = (flags & MEDIA_VIDEO) == 0;        final boolean paused = (flags & MEDIA_PAUSED) != 0;        int hardwareAcceleration = HW_ACCELERATION_DISABLED;        if (!noHardwareAcceleration) {            try {                hardwareAcceleration = PrefUtils.get(context, Prefs.HW_ACCELERATION, HW_ACCELERATION_AUTOMATIC);            } catch (NumberFormatException ignored) {}        }        if (hardwareAcceleration == HW_ACCELERATION_DISABLED)            media.setHWDecoderEnabled(false, false);        else if (hardwareAcceleration == HW_ACCELERATION_FULL || hardwareAcceleration == HW_ACCELERATION_DECODING) {            media.setHWDecoderEnabled(true, true);            if (hardwareAcceleration == HW_ACCELERATION_DECODING) {                media.addOption(\":no-mediacodec-dr\");                media.addOption(\":no-omxil-dr\");            }        } /* else automatic: use default options */        if (noVideo)            media.addOption(\":no-video\");        if (paused)            media.addOption(\":start-paused\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vlc/VLCOptions.java", "stars": "4", "class": {"name": "VLCOptions", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onReceive", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onReceive (android.content.Context p0, android.content.Intent p1)\t{\t\tn_onReceive (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PowerSaveModeBroadcastReceiver.java", "stars": "2", "class": {"name": "PowerSaveModeBroadcastReceiver", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onReceive", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onReceive (android.content.Context p0, android.content.Intent p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PowerSaveModeBroadcastReceiver.java", "stars": "2", "class": {"name": "PowerSaveModeBroadcastReceiver", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PowerSaveModeBroadcastReceiver.java", "stars": "2", "class": {"name": "PowerSaveModeBroadcastReceiver", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PowerSaveModeBroadcastReceiver.java", "stars": "2", "class": {"name": "PowerSaveModeBroadcastReceiver", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "pageInfo2PageResult", "params": ["PageInfo<?>"], "throws": null, "modifiers": ["public", "static"], "return_type": "PageResult", "snippet": "    public static PageResult pageInfo2PageResult(PageInfo<?> pageInfo) {        PageResult pageResult = new PageResult();        pageResult.setPageNum(pageInfo.getPageNum());        pageResult.setPageSize(pageInfo.getPageSize());        pageResult.setTotalSize(pageInfo.getTotal());        pageResult.setTotalPages(pageInfo.getPages());        pageResult.setContent(pageInfo.getList());        return pageResult;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/util/PageUtil.java", "stars": "1", "class": {"name": "PageUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserQQ", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUserQQ() {        return userQQ;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/teamMember.java", "stars": "2", "class": {"name": "teamMember", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUserQQ", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUserQQ(String userQQ) {        this.userQQ = userQQ;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/teamMember.java", "stars": "2", "class": {"name": "teamMember", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isPower", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isPower() {        return power;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/teamMember.java", "stars": "2", "class": {"name": "teamMember", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPower", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPower(boolean power) {        this.power = power;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/teamMember.java", "stars": "2", "class": {"name": "teamMember", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/teamMember.java", "stars": "2", "class": {"name": "teamMember", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/teamMember.java", "stars": "2", "class": {"name": "teamMember", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/teamMember.java", "stars": "2", "class": {"name": "teamMember", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/teamMember.java", "stars": "2", "class": {"name": "teamMember", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"teamMember{\" +                \"userQQ='\" + userQQ + '\\'' +                \", power=\" + power +                \", id='\" + id + '\\'' +                \", name='\" + name + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/teamMember.java", "stars": "2", "class": {"name": "teamMember", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run() {\t\tgetPid();\t\tif(p == null) {\t\t\tthrow new RuntimeException(\"Properties is null. Can't continue\");\t\t}\t\tif (checkParamMap(p, MSGTYPE)) {\t\t\tthrow new RuntimeException(\"parameter \" + MSGTYPE + \" can not be blank.\");\t\t}\t\tif (checkParamMap(p, TOPIC)) {\t\t\tthrow new RuntimeException(\"parameter \" + TOPIC + \" can not be blank.\");\t\t}\t\telse{\t\t\tString topic= p.getProperty(TOPIC);\t\t\tif(!topic.matches(\"[^_]*_[^_]*_[^_]*\")){\t\t\t\tthrow new RuntimeException(\"Error format of topic parameter. Accept: XX_XX_XX.\");\t\t\t}\t\t}\t\tif (checkParamMap(p, MSGNAME)) {\t\t\tthrow new RuntimeException(\"parameter \" + MSGNAME + \" can not be blank.\");\t\t}\t\twbDao = WBEventCheckerDao.getInstance();\t\tint execId=Integer.parseInt(jobId);\t\tboolean success=false;\t\tif(p.getProperty(MSGTYPE).equals(\"RECEIVE\")){\t\t\tif (checkParamMap(p, RECEIVER)) {\t\t\t    throw new RuntimeException(\"parameter \" + RECEIVER + \" can not be blank.\");\t\t\t}else{\t\t\t\tString receiver= p.getProperty(RECEIVER);\t\t\t\tif(!receiver.matches(\"[^@]*@[^@]*@[^@]*\")){\t\t\t\t\tthrow new RuntimeException(\"Error format of receiver parameter. Accept: XX@XX@XX.\");\t\t\t\t}\t\t\t}\t\t\tcheckTimeParam(p,WAIT_FOR_TIME);\t\t\tString userTime = checkTimeParamMap(p, USER_TIME);\t\t\tif(StringUtils.isNotEmpty(userTime)){\t\t\t\tp.put(USER_TIME, userTime);\t\t\t}\t\t\tsuccess = wbDao.reciveMsg(execId, p, logger);\t\t\tif(!success) {\t\t\t\tthrow new RuntimeException(\"Failed Receive message.\");\t\t\t}\t\t}else if(p.getProperty(MSGTYPE).equals(\"SEND\")){\t\t\tif (checkParamMap(p, SENDER)) {\t\t\t\tthrow new RuntimeException(\"parameter \" + SENDER + \" can not be blank.\");\t\t\t}else{\t\t\t\tString sender= p.getProperty(SENDER);\t\t\t\tif(!sender.matches(\"[^@]*@[^@]*@[^@]*\")){\t\t\t\t\tthrow new RuntimeException(\"Error format of  sender parameter. Accept: XX@XX@XX.\");\t\t\t\t}\t\t\t}//\t\t\tif (checkParamMap(p, MSG)) {//\t\t\t\tthrow new RuntimeException(\"Must specify a \" + MSG//\t\t\t\t          + \" key and value.\");//\t\t\t}\t\t\tif(p.containsKey(MSG) && StringUtils.isNotEmpty(p.getProperty(MSG)) && p.getProperty(MSG).length() > 250){\t\t    \tthrow new RuntimeException(\"parameter \" + MSG + \" length less than 250 !\");\t\t    }\t\t\tsuccess = wbDao.sendMsg(execId, p, logger);\t\t\tif(!success) {\t\t\t\tthrow new RuntimeException(\"Failed Send message.\");\t\t\t}\t\t}else{\t\t\t  throw new RuntimeException(\"Please input correct parameter of msg.type, Select RECEIVE Or SEND.\");\t\t}\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/EventChecker.java", "stars": "18", "class": {"name": "EventChecker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobGeneratedProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "\tpublic Props getJobGeneratedProperties(){\t\tProps props = new Props();\t\tString msgBody=p.getProperty(MSG, \"{}\");\t\tString saveKey=p.getProperty(SAVE_KEY,\"msg.body\");\t    props.put(saveKey, msgBody);\t    logger.info(\"Output msg body: \"+msgBody);\t    return props;\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/EventChecker.java", "stars": "18", "class": {"name": "EventChecker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cancel", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void cancel() throws InterruptedException {\t\tAbstractEventCheck.closeDruidDataSource();\t\tthrow new RuntimeException(\"Kill this eventchecker.\");\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/EventChecker.java", "stars": "18", "class": {"name": "EventChecker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkParamMap", "params": ["Properties", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean checkParamMap(Properties p, String key){\t    boolean checkFlag = false;\t    if(!p.containsKey(key)){//\u5224\u65ad\u53c2\u6570\u662f\u5426\u5b58\u5728\t        throw new RuntimeException(\"parameter \" + key + \" is Empty.\");\t    }\t    if(p.containsKey(key)){//\u5224\u65ad\u53c2\u6570\u662f\u5426\u4e3a\u7a7a\u5b57\u7b26\u4e32\t\t    if(StringUtils.isEmpty(p.getProperty(key))){\t        checkFlag = true;\t      }\t    }\t    if(!MSG.equals(key) && StringUtils.contains(p.getProperty(key), \" \")){\t\t\tthrow new RuntimeException(\"parameter \" + key + \" can not contains space !\");\t\t}\t    if(!checkNoStandardStr(p.getProperty(key))){\t    \tthrow new RuntimeException(\"parameter \" + key + \" Accept letter and number and _@- only.\");\t    }\t    if(p.getProperty(key).length() > 45){\t    \tthrow new RuntimeException(\"parameter \" + key + \" length less than 45 !\");\t    }\t    return checkFlag;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/EventChecker.java", "stars": "18", "class": {"name": "EventChecker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkNoStandardStr", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean checkNoStandardStr(String param){        Pattern pattern = Pattern.compile(\"[a-zA-Z_0-9@\\\\-]+\");        Matcher matcher = pattern.matcher(param);        return matcher.matches();\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/EventChecker.java", "stars": "18", "class": {"name": "EventChecker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkTimeParam", "params": ["Properties", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void checkTimeParam(Properties p, String key){\t\tif(p.containsKey(key)){\t\t\tString waitForTime= p.getProperty(key);\t\t\tif(!waitForTime.matches(\"^(0?[0-9]|1[0-9]|2[0-3]):(0?[0-9]|[1-5][0-9])$\")){\t\t\t\tthrow new RuntimeException(\"Parameter \" + key + \" Time format error ! For example: HH:mm\");\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/EventChecker.java", "stars": "18", "class": {"name": "EventChecker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkTimeParamMap", "params": ["Properties", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "\tprivate String checkTimeParamMap(Properties p, String key){\t    if(p.containsKey(key)){\t    \tString userTime = p.getProperty(key);\t    \tPattern ptime = Pattern.compile(\"^([1][7-9][0-9][0-9]|[2][0][0-9][0-9])(\\\\-)([0][1-9]|[1][0-2])(\\\\-)([0-2][1-9]|[3][0-1])(\\\\s)([0-1][0-9]|[2][0-3])(:)([0-5][0-9])(:)([0-5][0-9])$\");\t        Matcher m = ptime.matcher(userTime);\t        if(!m.matches()){\t        \tthrow new RuntimeException(\"Parameter \" + key + \" Time format error ! For example: yyyy-MM-dd HH:mm:ss\");\t        }\t\t    return userTime;\t    }else{\t    \treturn null;\t    }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/EventChecker.java", "stars": "18", "class": {"name": "EventChecker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPid", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "\tprivate String getPid(){\t\t// get name representing the running Java virtual machine.\t\tString name = ManagementFactory.getRuntimeMXBean().getName();\t\tSystem.out.println(name);\t\t// get pid\t\tString pid = name.split(\"@\")[0];\t\tlogger.info(\"EventCheck Pid is:\" + pid);\t\treturn pid;\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/EventChecker.java", "stars": "18", "class": {"name": "EventChecker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tProperties p = new Properties();\t\tp.put(\"azkaban.flow.execid\",\"111\");\t\tp.put(\"msg.type\",\"RECEIVE\");\t\tp.put(\"msg.receiver\",\"project@job@vv\");\t\tp.put(\"msg.topic\",\"bdp_new_test\");\t\tp.put(\"msg.name\",\"TestCheck\");\t\tp.put(\"msg.savekey\",\"msg.body\");\t\tp.put(\"query.frequency\",\"60\");\t\tp.put(\"wait.time\",\"1\");\t\tp.put(\"msg.rece.today\",\"true\");\t\tp.put(\"msg.after.send\",\"true\");\t\tp.put(\"auto.trigger.time\",\"12:50:45\");\t\tp.put(\"auto.trigger.param\",\"\");//\t\tp.put(\"wait.for.time\",\"22:00\");//\t\tp.put(\"msg.type\",\"SEND\");//\t\tp.put(\"msg.sender\",\"project@job@vv\");//\t\tp.put(\"msg.topic\",\"bdp_new_test\");//\t\tp.put(\"msg.name\",\"TestCheck\");//\t\tp.put(\"msg.body\",\"msg.body\");\t\tp.put(\"msg.eventchecker.jdo.option.name\",\"msg\");\t\tp.put(\"msg.eventchecker.jdo.option.url\",\"jdbc:mysql://10.255.0.76:3306/wtss_qyh_test?useUnicode=true&characterEncoding=UTF-8\");\t\tp.put(\"msg.eventchecker.jdo.option.username\",\"root\");\t\tp.put(\"msg.eventchecker.jdo.option.password\",\"YmRwI3Jvb3RAMjAxOQ==\");\t\tEventChecker ec = new EventChecker(\"AA\",p);\t\tec.run();\t}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/util/EventChecker.java", "stars": "18", "class": {"name": "EventChecker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate() {        super.onCreate();        if (LeakCanary.isInAnalyzerProcess(this)) {            // This process is dedicated to LeakCanary for heap analysis.            // You should not init your app in this process.            return;        }        LeakCanary.install(this);        //GSYVideoType.enableMediaCodec();        //GSYVideoType.enableMediaCodecTexture();        //PlayerFactory.setPlayManager(Exo2PlayerManager.class);//EXO\u6a21\u5f0f        //ExoSourceManager.setSkipSSLChain(true);        //PlayerFactory.setPlayManager(SystemPlayerManager.class);//\u7cfb\u7edf\u6a21\u5f0f        //PlayerFactory.setPlayManager(IjkPlayerManager.class);//ijk\u6a21\u5f0f        //CacheFactory.setCacheManager(ExoPlayerCacheManager.class);//exo\u7f13\u5b58\u6a21\u5f0f\uff0c\u652f\u6301m3u8\uff0c\u53ea\u652f\u6301exo        //CacheFactory.setCacheManager(ProxyCacheManager.class);//\u4ee3\u7406\u7f13\u5b58\u6a21\u5f0f\uff0c\u652f\u6301\u6240\u6709\u6a21\u5f0f\uff0c\u4e0d\u652f\u6301m3u8\u7b49        //GSYVideoType.setShowType(GSYVideoType.SCREEN_MATCH_FULL);        //GSYVideoType.setShowType(GSYVideoType.SCREEN_TYPE_FULL);        //GSYVideoType.setShowType(GSYVideoType.SCREEN_MATCH_FULL);        //GSYVideoType.setShowType(GSYVideoType.SCREEN_TYPE_CUSTOM);        //GSYVideoType.setScreenScaleRatio(9.0f/16);        //GSYVideoType.setRenderType(GSYVideoType.SUFRACE);        //GSYVideoType.setRenderType(GSYVideoType.GLSURFACE);        //IjkPlayerManager.setLogLevel(IjkMediaPlayer.IJK_LOG_SILENT);        /*ExoSourceManager.setExoMediaSourceInterceptListener(new ExoMediaSourceInterceptListener() {            @Override            public MediaSource getMediaSource(String dataSource, boolean preview, boolean cacheEnable, boolean isLooping, File cacheDir) {                Uri contentUri = Uri.parse(dataSource);                int contentType = inferContentType(dataSource);                switch (contentType) {                    case C.TYPE_HLS:                        return new HlsMediaSource.Factory(CustomSourceTag.getDataSourceFactory(GSYApplication.this.getApplicationContext(), preview)).createMediaSource(contentUri);                }                return null;            }        });*/        /*GSYVideoManager.instance().setPlayerInitSuccessListener(new IPlayerInitSuccessListener() {            ///\u64ad\u653e\u5668\u521d\u59cb\u5316\u6210\u679c\u56de\u8c03            @Override            public void onPlayerInitSuccess(IMediaPlayer player, GSYModel model) {                if (player instanceof IjkExo2MediaPlayer) {                    ((IjkExo2MediaPlayer) player).setTrackSelector(new DefaultTrackSelector());                    ((IjkExo2MediaPlayer) player).setLoadControl(new DefaultLoadControl());                }            }        });*/    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/GSYApplication.java", "stars": "2", "class": {"name": "GSYApplication", "extends": "MultiDexApplication", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //Person\u7c7b\u7ee7\u627f\u4e86Object\u7c7b,\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528Object\u7c7b\u7684hashCode\u65b9\u6cd5        Person p1 = new Person();        int h1 = p1.hashCode();        System.out.println(h1);//1967205423  | 1        Person p2 = new Person();        int h2 = p2.hashCode();        System.out.println(h2);//42121758   |  1        /*            toString\u65b9\u6cd5\u7684\u6e90\u7801:                return getClass().getName() + \"@\" + Integer.toHexString(hashCode());         */        System.out.println(p1);//com.itheima.demo03.hashCode.Person@75412c2f        System.out.println(p2);//com.itheima.demo03.hashCode.Person@282ba1e        System.out.println(p1==p2);//false        /*            String\u7c7b\u7684\u54c8\u5e0c\u503c                String\u7c7b\u91cd\u5199Obejct\u7c7b\u7684hashCode\u65b9\u6cd5         */        String s1 = new String(\"abc\");        String s2 = new String(\"abc\");        System.out.println(s1.hashCode());//96354        System.out.println(s2.hashCode());//96354        System.out.println(\"\u91cd\u5730\".hashCode());//1179395        System.out.println(\"\u901a\u8bdd\".hashCode());//1179395    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/14.%E3%80%90List%E3%80%81Set%E3%80%91-%E7%AC%94%E8%AE%B0/code/03_ListAndSet/src/com/itheima/demo03/hashCode/Demo01HashCode.java", "stars": "2", "class": {"name": "Demo01HashCode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "supports", "params": ["MethodParameter", "Class<HttpMessageConverter>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean supports(@NonNull MethodParameter returnType,                            @NonNull Class<? extends HttpMessageConverter<?>> converterType) {        return true;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/advice/ResponseAdvice.java", "stars": "2", "class": {"name": "ResponseAdvice", "extends": null, "implements": ["ResponseBodyAdvice"], "modifiers": ["public"]}}, {"method_name": "beforeBodyWrite", "params": ["Object", "MethodParameter", "MediaType", "Class<HttpMessageConverter>", "ServerHttpRequest", "ServerHttpResponse"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object beforeBodyWrite(Object body,                                  @NonNull MethodParameter returnType,                                  @NonNull MediaType selectedContentType,                                  @NonNull Class<? extends HttpMessageConverter<?>> selectedConverterType,                                  @NonNull ServerHttpRequest request,                                  @NonNull ServerHttpResponse response) {        //\u53ef\u4ee5\u7528request.getURI().getPath().startsWith\u6765\u8fdb\u884c\u4f8b\u5916\u8fc7\u6ee4        if (body instanceof ResultDto) {            return body;        }        return new ResultDto(body);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/advice/ResponseAdvice.java", "stars": "2", "class": {"name": "ResponseAdvice", "extends": null, "implements": ["ResponseBodyAdvice"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        HashMap<String,String> map = new HashMap<>();        map.put(\"a\",\"a\");        map.put(\"c\",\"c\");        map.put(\"b\",\"b\");        map.put(\"a\",\"d\");        System.out.println(map);// key\u4e0d\u5141\u8bb8\u91cd\u590d,\u65e0\u5e8f {a=d, b=b, c=c}        LinkedHashMap<String,String> linked = new LinkedHashMap<>();        linked.put(\"a\",\"a\");        linked.put(\"c\",\"c\");        linked.put(\"b\",\"b\");        linked.put(\"a\",\"d\");        System.out.println(linked);// key\u4e0d\u5141\u8bb8\u91cd\u590d,\u6709\u5e8f {a=d, c=c, b=b}    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/15.%E3%80%90Map%E3%80%91-%E7%AC%94%E8%AE%B0/code/04_Map/src/com/itheima/demo03/Map/Demo01LinkedHashMap.java", "stars": "2", "class": {"name": "Demo01LinkedHashMap", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "forward", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String forward() {        return \"forward:/\";    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/ClientForwardController.java", "stars": "2", "class": {"name": "ClientForwardController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["URL", "ResourceBundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initialize(URL arg0, ResourceBundle arg1) {\t\t\t\tmouseentered.setBrightness(-0.5);\t\tmouseexit.setBrightness(0.0);\t\t\t\t\t\tcheckbyph.setOnMouseClicked(event -> clicked(event));\t\tcheckbyph.setOnMouseEntered(event -> mouseenter(event));\t\tcheckbyph.setOnMouseExited(event -> mouseexit(event));\t\t\t\tcheckbyid.setOnMouseClicked(event -> clicked(event));\t\tcheckbyid.setOnMouseEntered(event -> mouseenter(event));\t\tcheckbyid.setOnMouseExited(event -> mouseexit(event));\t\t\t\tbacktologinicon.setOnMouseClicked(event -> clicked(event));\t\tbacktologinicon.setOnMouseEntered(event -> mouseenter(event));\t\tbacktologinicon.setOnMouseExited(event -> mouseexit(event));\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/lilllung09/OwlWordList/master/src/application/FindIDnPWController.java", "stars": "2", "class": {"name": "FindIDnPWController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "mouseenter", "params": ["MouseEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void mouseenter(MouseEvent event) {\t\tImageView icon = (ImageView) event.getSource();\t\ticon.setEffect(mouseentered);\t}", "url": "https://raw.githubusercontent.com/lilllung09/OwlWordList/master/src/application/FindIDnPWController.java", "stars": "2", "class": {"name": "FindIDnPWController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "mouseexit", "params": ["MouseEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void mouseexit(MouseEvent event) {\t\tImageView icon = (ImageView) event.getSource();\t\ticon.setEffect(mouseexit);\t}", "url": "https://raw.githubusercontent.com/lilllung09/OwlWordList/master/src/application/FindIDnPWController.java", "stars": "2", "class": {"name": "FindIDnPWController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "clicked", "params": ["MouseEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clicked(MouseEvent event) {\t\tImageView icon = (ImageView) event.getSource();\t\t\t\tif (icon.equals(checkbyph)) {\t\t\tif (!inputPH.getText().equals(\"\"))\t\t\t\tfindIDPWdb(icon, inputPH.getText());\t\t\t\t\t} else if (icon.equals(checkbyid)) {\t\t\tif (!inputPH.getText().equals(\"\")) {\t\t\t\tfindIDPWdb(icon, inputID.getText());\t\t\t} else {\t\t\t\tuserPWbyID.setText(\"\ud578\ub4dc\ud3f0 \ubc88\ud638\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \uc785\ub825\ud574\uc8fc\uc138\uc694.\");\t\t\t}\t\t\t\t\t} else if (icon.equals(backtologinicon)) {\t\t\tSystem.out.println(\"backtologinicon\");\t\t\tthis.newScene(event, \"Root\", \"\ub85c\uadf8\uc778\");\t\t\t\t\t} else {\t\t\t\t\t}\t}", "url": "https://raw.githubusercontent.com/lilllung09/OwlWordList/master/src/application/FindIDnPWController.java", "stars": "2", "class": {"name": "FindIDnPWController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "findIDPWdb", "params": ["ImageView", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void findIDPWdb(ImageView icon, String input) {\t\tConnection conn = null;\t\tPreparedStatement pstm = null;\t\tResultSet rs = null;\t\ttry {\t\t\tString quary = \"\";\t\t\tString column = \"\";\t\t\t\t\t\tif (icon.equals(checkbyph)) {\t\t\t\tquary = \"SELECT UserID FROM AccountInfo WHERE UserPH='\"+ input + \"'\";\t\t\t\tcolumn = \"UserID\";\t\t\t\t\t\t\t} else if (icon.equals(checkbyid)) {\t\t\t\tquary = \"SELECT UserPW FROM AccountInfo WHERE UserPH='\"+ inputPH.getText() + \"' AND UserID='\"+ input + \"'\";\t\t\t\tcolumn = \"UserPW\";\t\t\t\t\t\t\t}\t\t\t\t\t\tconn = DBConnection.getConnection();\t\t\tpstm = conn.prepareStatement(quary);\t\t\trs = pstm.executeQuery();\t\t\t\t\t\tString rsstr = \"\";\t\t\t\t\t\twhile(rs.next()){\t\t\t\trsstr = rs.getString(column);\t            System.out.println(rsstr);\t            \t\t\t}\t\t\tif (rsstr.equals(\"\")) {   \t            \tif (icon.equals(checkbyph)) {            \t\tuserIDbyPH.setText(\"\ud574\ub2f9 \ubc88\ud638\ub85c \uac00\uc785\ub418\uc5b4\uc788\ub294 \uacc4\uc815\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\");    \t\t\t\t    \t\t\t} else if (icon.equals(checkbyid)) {    \t\t\t\tuserPWbyID.setText(\"\ud574\ub2f9 ID\ub85c \uac00\uc785\ub418\uc5b4\uc788\ub294 \uacc4\uc815\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\");    \t\t\t}            \t            } else if(!rsstr.equals(\"\")) {            \tString str = \"\";            \tfor (int i=5; i < rsstr.length() - 1; i++) {\t\t\t\t\tstr += \"*\";\t\t\t\t}            \t            \tif (icon.equals(checkbyph)) {            \t\tuserIDbyPH.setText(\"\ucc3e\uc740 ID : \" + rsstr.substring(0, 4) + str);            \t\t    \t\t\t} else if (icon.equals(checkbyid)) {    \t\t\t\tuserPWbyID.setText(\"\ucc3e\uc740 PW : \" + rsstr.substring(0, 4) + str);    \t\t\t\t    \t\t\t}            \t            }\t\t\t\t\t\t\t            \t\t} catch (SQLException sqle) {\t\t\tSystem.out.println(\"SELECT\ubb38\uc5d0\uc11c \uc608\uc678 \ubc1c\uc0dd\");\t\t\tsqle.printStackTrace();\t            \t\t} finally{\t\t\t// DB \uc5f0\uacb0\uc744 \uc885\ub8cc\ud55c\ub2e4.\t\t\ttry{\t\t\t\tSystem.out.println(\"Database \uc5f0\uacb0\uc744 \uc885\ub8cc\ud569\ub2c8\ub2e4.\");\t\t\t\tif ( rs != null ){rs.close();}   \t\t\t\tif ( pstm != null ){pstm.close();}   \t\t\t\tif ( conn != null ){conn.close(); }\t\t\t} catch(Exception e){throw new RuntimeException(e.getMessage());}\t\t}\t}", "url": "https://raw.githubusercontent.com/lilllung09/OwlWordList/master/src/application/FindIDnPWController.java", "stars": "2", "class": {"name": "FindIDnPWController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "newScene", "params": ["Event", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void newScene(Event event, String fxml, String title) {\t\tfinal Node source = (Node) event.getSource();\t\tfinal Stage stage = (Stage) source.getScene().getWindow();\t\tstage.close();\t\tParent root;\t\ttry {\t\t\troot = FXMLLoader.load(getClass().getResource(fxml + \".fxml\"));\t\t\tScene scene = new Scene(root);\t\t\tStage primaryStage = new Stage();\t\t\tprimaryStage.setTitle(title);\t\t\tprimaryStage.setResizable(true);\t\t\tprimaryStage.setScene(scene);\t\t\tprimaryStage.show();\t\t\t\t\t} catch (IOException e) {}\t\t\t}", "url": "https://raw.githubusercontent.com/lilllung09/OwlWordList/master/src/application/FindIDnPWController.java", "stars": "2", "class": {"name": "FindIDnPWController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "isIdentifierLetter", "params": ["char"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean isIdentifierLetter(char c) {        if (('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')) {            return true;        } else {            return false;        }    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/wordAnalysis/WordAnalysis.java", "stars": "2", "class": {"name": "WordAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDigit", "params": ["char"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean isDigit(char c) {        if ('0' <= c && c <= '9') {            return true;        } else {            return false;        }    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/wordAnalysis/WordAnalysis.java", "stars": "2", "class": {"name": "WordAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isUnderline", "params": ["char"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean isUnderline(char c) {        if (c == '_') {            return true;        } else {            return false;        }    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/wordAnalysis/WordAnalysis.java", "stars": "2", "class": {"name": "WordAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getReservedWord", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "TokenType", "snippet": "    private static TokenType getReservedWord(String identifier) {        TokenType reservedWord = TokenType.NULL;        switch (identifier) {            case \"class\":                reservedWord = TokenType.CLASS;                break;            case \"public\":                reservedWord = TokenType.PUBLIC;                break;            case \"String\":                reservedWord = TokenType.STRING;                break;            case \"static\":                reservedWord = TokenType.STATIC;                break;            case \"void\":                reservedWord = TokenType.VOID;                break;            case \"main\":                reservedWord = TokenType.MAIN;                break;            case \"extends\":                reservedWord = TokenType.EXTENDS;                break;            case \"return\":                reservedWord = TokenType.RETURN;                break;            case \"int\":                reservedWord = TokenType.INT;                break;            case \"boolean\":                reservedWord = TokenType.BOOLEAN;                break;            case \"if\":                reservedWord = TokenType.IF;                break;            case \"else\":                reservedWord = TokenType.ELSE;                break;            case \"while\":                reservedWord = TokenType.WHILE;                break;            case \"System.out.println\":                reservedWord = TokenType.SYSTEMOUTPRINTLN;                break;            case \"length\":                reservedWord = TokenType.LENGTH;                break;            case \"true\":                reservedWord = TokenType.TRUE;                break;            case \"false\":                reservedWord = TokenType.FALSE;                break;            case \"this\":                reservedWord = TokenType.THIS;                break;            case \"new\":                reservedWord = TokenType.NEW;                break;        }        return reservedWord;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/wordAnalysis/WordAnalysis.java", "stars": "2", "class": {"name": "WordAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handle", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handle(String info, int lineNum) {        int start = 0;        int currentPosition = 0;        int infoLength = info.length();        while (currentPosition < infoLength) {            char c = info.charAt(currentPosition);            switch (state) {                case START:                    start = currentPosition;                    if (isIdentifierLetter(c)) {                        state = State.IN;                        currentToken = TokenType.IDENTIFIER;                    } else if (isDigit(c)) {                        state = State.DN;                        currentToken = TokenType.INTEGERLITERAL;                    } else {                        switch (c) {                            case '[':                                currentToken = TokenType.LBRACKET;                                state = State.DONE;                                break;                            case ']':                                currentToken = TokenType.RBRACKET;                                state = State.DONE;                                break;                            case '(':                                currentToken = TokenType.LPAREN;                                state = State.DONE;                                break;                            case ')':                                currentToken = TokenType.RPAREN;                                state = State.DONE;                                break;                            case '{':                                currentToken = TokenType.LBRACE;                                state = State.DONE;                                break;                            case '}':                                currentToken = TokenType.RBRACE;                                state = State.DONE;                                break;                            case ',':                                currentToken = TokenType.COMMA;                                state = State.DONE;                                break;                            case ';':                                currentToken = TokenType.SEMICOLON;                                state = State.DONE;                                break;                            case '=':                                currentToken = TokenType.EQUAL;                                state = State.DONE;                                break;                            case '<':                                currentToken = TokenType.LESSTHEN;                                state = State.DONE;                                break;                            case '+':                                currentToken = TokenType.PLUS;                                state = State.DONE;                                break;                            case '-':                                currentToken = TokenType.HYPHEN;                                state = State.DONE;                                break;                            case '*':                                currentToken = TokenType.MULTIPLY;                                state = State.DONE;                                break;                            case '.':                                currentToken = TokenType.FULLSTOP;                                state = State.DONE;                                break;                            case '!':                                currentToken = TokenType.EXCLAMATION;                                state = State.DONE;                                break;                            case '&':                                currentToken = TokenType.AND;                                state = State.AN;                                break;                            case ' ':                                currentToken = TokenType.SPACE;                                state = State.START;                                break;                            case '\\t':                                currentToken = TokenType.TABLE;                                state = State.START;                                break;                            case '\\n':                                currentToken = TokenType.ENTER;                                state = State.START;                                break;                            default:                                state = State.DONE;                                currentToken = TokenType.ERROR;                                String thisError = \"Line\" + lineNum + \":\" + info.substring(0, info.length()) + \"%\"                                        + currentPosition + \"%\" + \"invalid symbol'\" + c + \"'.\";                                errorList.add(thisError);                                tokenList.add(c+\",\"+TokenType.ERROR);                        }                    }                    break;                case DN:                    if(isDigit(c)){                        state=State.DN;                        currentToken=TokenType.INTEGERLITERAL;                    }else {                        state=State.DONE;                    }                    break;                case IN:                    if (isIdentifierLetter(c) || isDigit(c)) {                        state = State.IN;                        currentToken = TokenType.IDENTIFIER;                    } else if (isUnderline(c)) {                        state = State.UN;                        currentToken = TokenType.IDENTIFIER;                    } else {                        state = State.DONE;                    }                    break;                case UN:                    if (isIdentifierLetter(c) || isDigit(c)) {                        state = State.IN;                        currentToken = TokenType.IDENTIFIER;                    } else {                        state = State.DONE;                        currentToken = TokenType.ERROR;                        String thisError = \"Line \" + lineNum + \": \" + info.substring(0, info.length()) + \"%\"                                + currentPosition + \"%\" + \"invalid symbol'\" + c + \"',there should be a letter or a digit.\";                        errorList.add(thisError);                        tokenList.add(info.substring(start,currentPosition+1)+\",\"+TokenType.ERROR);                    }                    break;                case AN:                    if (currentToken == TokenType.AND && c == '&') {                        state = State.DONE;                        currentToken = TokenType.DOUBLEAND;                    } else {                        state = State.DONE;                        currentToken = TokenType.ERROR;                        //\u6ce8\u610f\u56de\u9000                        currentPosition--;                        String thisError = \"Line \" + lineNum + \": \" +                                info.substring(0, info.length()) +                                \"%\" + (currentPosition + 1) + \"%\" +                                \"invalid symbol'\" + c + \"',there should be &\";                        errorList.add(thisError);                        tokenList.add(info.substring(start,currentPosition+1)+\",\"+TokenType.ERROR);                    }                    break;                case DONE:                    break;                default:                    break;            }            if (state == State.DONE) {                if (currentToken == TokenType.IDENTIFIER) {                    String tempIdentifier = info.substring(start, currentPosition);                    if(tempIdentifier.equals(\"System\")){                        if(info.substring(start,currentPosition+12).equals(\"System.out.println\")){                            currentToken=TokenType.SYSTEMOUTPRINTLN;                            currentPosition=currentPosition+12;                        }                    }                    if (getReservedWord(tempIdentifier) != TokenType.NULL) {                        currentToken = getReservedWord(tempIdentifier);                    }                    tokenList.add(info.substring(start,currentPosition)+\",\"+currentToken);                    rowInfo = rowInfo + currentToken + \" \";                    currentPosition--;                } else if (currentToken == TokenType.INTEGERLITERAL) {                    tokenList.add(info.substring(start,currentPosition)+\",\"+currentToken);                    rowInfo = rowInfo + currentToken + \" \";                    currentPosition--;                } else if (currentToken == TokenType.ERROR) {                    currentPosition = info.length();//\u76f4\u63a5\u7ed3\u675f                    rowInfo = rowInfo + \"\u7b2c\" + lineNum + \"\u884c\u53d1\u751f\u9519\u8bef\uff01\";                } else {                    tokenList.add(info.substring(start,currentPosition+1)+\",\"+currentToken);                    rowInfo = rowInfo + currentToken + \" \";                }                state = State.START;            }            currentPosition++;        }        rowList.add(rowInfo);        rowInfo = new String();    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/wordAnalysis/WordAnalysis.java", "stars": "2", "class": {"name": "WordAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "output", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void output(String outputFilename) throws IOException {        File outputFile = new File(outputFilename);        FileOutputStream out = new FileOutputStream(outputFile, false);        for (String temp : tokenList) {            out.write((temp + \"\\r\\n\").getBytes(\"utf-8\"));        }        out.write((\"end,EOF\" + \"\\r\\n\").getBytes(\"utf-8\"));        out.close();    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/wordAnalysis/WordAnalysis.java", "stars": "2", "class": {"name": "WordAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "errorOutput", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void errorOutput(String outputFilename) throws IOException {        File outputFile = new File(outputFilename);        FileOutputStream error = new FileOutputStream(outputFile, false);        for (String temp : errorList) {            String[] errorInfo = temp.split(\"%\");            //\u6dfb\u52a0\u6307\u793a\u6807            String[] pointInfo = errorInfo[0].split(\":\");            String pointPos = new String();            int point = Integer.parseInt(errorInfo[1]) + pointInfo[0].length() + 2;            for(int i = 0; i < point; i++) {                if(errorInfo[0].charAt(i) != '\\t')                    pointPos = pointPos + \" \";                else pointPos = pointPos + \"\\t\";            }            pointPos = pointPos + \"^\";            error.write((\" \"+errorInfo[0].substring(0, point + 1) + \"\\r\\n\").getBytes(\"utf-8\"));            error.write((pointPos + \"\\r\\n\").getBytes(\"utf-8\"));            error.write((\"\\tError: \" + errorInfo[2] + \"(At Position: \" + (Integer.parseInt(errorInfo[1]) + 1) + \".)\" + \"\\r\\n\").getBytes(\"utf-8\"));            error.write((\"\\r\\n\").getBytes(\"utf-8\"));        }        error.close();    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/wordAnalysis/WordAnalysis.java", "stars": "2", "class": {"name": "WordAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/no_param_type/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/no_param_type/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/no_param_type/NoParamTypeTest.java", "stars": "15", "class": {"name": "NoParamTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAcceptDifferentTypeInTheSameBatch", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAcceptDifferentTypeInTheSameBatch() {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) {      ObjA a = new ObjA();      a.setId(1);      a.setName(111);      sqlSession.insert(\"insertUser\", a);      ObjB b = new ObjB();      b.setId(2);      b.setName(\"222\");      sqlSession.insert(\"insertUser\", b);      List<BatchResult> batchResults = sqlSession.flushStatements();      batchResults.clear();      sqlSession.clearCache();      sqlSession.commit();      List<User> users = sqlSession.selectList(\"selectUser\");      assertEquals(2, users.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/no_param_type/NoParamTypeTest.java", "stars": "15", "class": {"name": "NoParamTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {      return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/no_param_type/NoParamTypeTest.java", "stars": "15", "class": {"name": "ObjA", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {      this.id = id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/no_param_type/NoParamTypeTest.java", "stars": "15", "class": {"name": "ObjA", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getName() {      return name;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/no_param_type/NoParamTypeTest.java", "stars": "15", "class": {"name": "ObjA", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setName", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(Integer name) {      this.name = name;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/no_param_type/NoParamTypeTest.java", "stars": "15", "class": {"name": "ObjA", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {      return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/no_param_type/NoParamTypeTest.java", "stars": "15", "class": {"name": "ObjB", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {      this.id = id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/no_param_type/NoParamTypeTest.java", "stars": "15", "class": {"name": "ObjB", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {      return name;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/no_param_type/NoParamTypeTest.java", "stars": "15", "class": {"name": "ObjB", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {      this.name = name;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/no_param_type/NoParamTypeTest.java", "stars": "15", "class": {"name": "ObjB", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Fragment", "snippet": "    public Fragment getItem(int position) {        switch (position) {            case 0:                projectManagerFragment = new ProjectManagerFragment();                return projectManagerFragment;            case 1:                backupedProjectsFragment = new BackupedProjectsFragment();                return backupedProjectsFragment;            default:                return null;        }    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/viewpager/MyProjectsAdapter.java", "stars": "4", "class": {"name": "MyProjectsAdapter", "extends": "FragmentPagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageTitle", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "CharSequence", "snippet": "    public CharSequence getPageTitle(int position) {        switch (position) {            case 0:                return context.getString(R.string.sketchware_projects);            case 1:                return context.getString(R.string.backup_projects);            default:                return null;        }    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/viewpager/MyProjectsAdapter.java", "stars": "4", "class": {"name": "MyProjectsAdapter", "extends": "FragmentPagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return 2;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/viewpager/MyProjectsAdapter.java", "stars": "4", "class": {"name": "MyProjectsAdapter", "extends": "FragmentPagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getName() {\t\treturn this.name;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-integration-tests/spring-boot-configuration-processor-tests/src/main/java/sample/AnnotatedSample.java", "stars": "47572", "class": {"name": "AnnotatedSample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setName(String name) {\t\tthis.name = name;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-integration-tests/spring-boot-configuration-processor-tests/src/main/java/sample/AnnotatedSample.java", "stars": "47572", "class": {"name": "AnnotatedSample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getString", "params": ["Supplier<String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getString(Supplier<String> sup){        return sup.get();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo04/Supplier/Demo01Supplier.java", "stars": "2", "class": {"name": "Demo01Supplier", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u8c03\u7528getString\u65b9\u6cd5,\u65b9\u6cd5\u7684\u53c2\u6570Supplier\u662f\u4e00\u4e2a\u51fd\u6570\u5f0f\u63a5\u53e3,\u6240\u4ee5\u53ef\u4ee5\u4f20\u9012Lambda\u8868\u8fbe\u5f0f        String s = getString(()->{            //\u751f\u4ea7\u4e00\u4e2a\u5b57\u7b26\u4e32,\u5e76\u8fd4\u56de            return \"\u80e1\u6b4c\";        });        System.out.println(s);        //\u4f18\u5316Lambda\u8868\u8fbe\u5f0f        String s2 = getString(()->\"\u80e1\u6b4c\");        System.out.println(s2);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo04/Supplier/Demo01Supplier.java", "stars": "2", "class": {"name": "Demo01Supplier", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testDefaultSettings", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testDefaultSettings() {\t\tassertThat(this.template.queryForObject(\"SELECT COUNT(*) from PERSON\", Integer.class)).isEqualTo(1);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-flyway/src/test/java/smoketest/flyway/SampleFlywayApplicationTests.java", "stars": "47572", "class": {"name": "SampleFlywayApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        Log.i(TAG, \"onCreate\");        super.onCreate(savedInstanceState);        setFadeCompleteListener(new OnFadeCompleteListener() {            @Override            public void onFadeInComplete() {                super.onFadeInComplete();                mPlaybackControlsRow.setCurrentTime(mCurrentTime);                mPlaybackControlsRow.setBufferedProgress(mBufferedTime);                mSelectedActionId = mPlayPauseAction.getId();                if (mRowsAdapter != null)                    mRowsAdapter.notifyArrayItemRangeChanged(0, mRowsAdapter.size());            }            @Override            public void onFadeOutComplete() {                super.onFadeOutComplete();                mCurrentMode = MODE_NOTHING;                mSelectedActionId = 0;            }        });        mHandlerPlayback = new Handler();        mHandlerPlaybackSpeed = new Handler();        setBackgroundType(PlaybackSupportFragment.BG_LIGHT);        setFadingEnabled(false);        setOnItemViewSelectedListener(this);        setOnKeyInterceptListener(this);        initialisePlaybackControlPresenter();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "onActivityCreated", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        mStreamInfo = ((TVVideoPlayerFragment.Callback) getActivity()).getInfo();        setupPlaybackControlItemsToInitialisingState();        setupTVShowNextPreviousEpisodes();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResume() {        super.onResume();        if (!EventBus.getDefault().isRegistered(this)) EventBus.getDefault().register(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPause() {        super.onPause();        if (!mKeepEventBusRegistration) {            // Event is unregistered before playback paused event is sent            mPlayPauseAction.setIndex(PlayPauseAction.PLAY);            setFadingEnabled(false);            notifyPlaybackControlActionChanged(mPlayPauseAction);            EventBus.getDefault().unregister(this);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "onActionClicked", "params": ["Action"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActionClicked(@NonNull Action action) {        if (action.getId() == mPlayPauseAction.getId()) {            invokeTogglePlaybackAction(mPlayPauseAction.getIndex() == PlayPauseAction.PLAY);        }        else if (action.getId() == mScaleVideoAction.getId()) {            invokeScaleVideoAction();        }        else if (action.getId() == mClosedCaptioningAction.getId()) {            invokeOpenSubtitleSettingsAction();        }        if (mSkipPreviousAction != null && action.getId() == mSkipPreviousAction.getId()) {            playSelectedEpisode(mPreviousEpisode);        }        if (mSkipNextAction != null && action.getId() == mSkipNextAction.getId()) {            playSelectedEpisode(mNextEpisode);        }        if (action instanceof PlaybackControlsRow.MultiAction) {            notifyPlaybackControlActionChanged(action);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "onItemSelected", "params": ["Presenter", "Object", "RowPresenter", "Row"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onItemSelected(            Presenter.ViewHolder itemViewHolder,            Object item,            RowPresenter.ViewHolder rowViewHolder,            Row row) {        mCurrentMode = MODE_NOTHING;        mSelectedActionId = 0;        if (item != null && item instanceof Action) {            Action action = (Action) item;            mSelectedActionId = action.getId();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "onKey", "params": ["View", "int", "KeyEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onKey(View v, int keyCode, @NonNull KeyEvent keyEvent) {        if (keyEvent.getKeyCode() != KeyEvent.KEYCODE_DPAD_CENTER) return false;        if (keyEvent.getAction() == KeyEvent.ACTION_DOWN) {            if (mFastForwardAction != null && mSelectedActionId == mFastForwardAction.getId()) {                if (keyEvent.getRepeatCount() == 0) {                    mCurrentMode = MODE_FAST_FORWARD;                    invokeFastForwardAction();                }            }            else if (mRewindAction != null && mSelectedActionId == mRewindAction.getId()) {                if (keyEvent.getRepeatCount() == 0) {                    mCurrentMode = MODE_REWIND;                    invokeRewindAction();                }            }        }        else if (keyEvent.getAction() == KeyEvent.ACTION_UP) {            mCurrentMode = MODE_NOTHING;        }        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "onEvent", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEvent(@NonNull Object event) {        if (event instanceof UpdatePlaybackStateEvent) {            UpdatePlaybackStateEvent updatePlaybackStateEvent = (UpdatePlaybackStateEvent) event;            if (updatePlaybackStateEvent.isPlaying()) {                if (!mIsMediaReady) {                    setupPlaybackControlItemsToReadyState();                    mIsMediaReady = true;                }                mPlayPauseAction.setIndex(PlayPauseAction.PAUSE);                setFadingEnabled(true);            }            else {                mPlayPauseAction.setIndex(PlayPauseAction.PLAY);                setFadingEnabled(false);            }            notifyPlaybackControlActionChanged(mPlayPauseAction);            if (mRowsAdapter != null) mRowsAdapter.notifyArrayItemRangeChanged(0, mRowsAdapter.size());        }        else if (event instanceof PlaybackProgressChangedEvent) {            // Ignore if currently seeking            PlaybackProgressChangedEvent progressChangedEvent = (PlaybackProgressChangedEvent) event;            if (mPlaybackControlsRow.getTotalTime() == 0) {                mPlaybackControlsRow.setTotalTime((int) progressChangedEvent.getDuration());            }            if (mSeek != 0 && mCurrentMode != MODE_NOTHING) {                return;            }            mCurrentTime = (int) progressChangedEvent.getCurrentTime();            if (!isHidden()) {                mPlaybackControlsRow.setCurrentTime(mCurrentTime);                if (mRowsAdapter != null) mRowsAdapter.notifyArrayItemRangeChanged(0, mRowsAdapter.size());            }        }        else if (event instanceof StreamProgressChangedEvent) {            StreamProgressChangedEvent streamProgressChangedEvent = (StreamProgressChangedEvent) event;            mBufferedTime = (int) streamProgressChangedEvent.getBufferedTime();            if (!isHidden()) {                mPlaybackControlsRow.setBufferedProgress(mBufferedTime);                if (mRowsAdapter != null) mRowsAdapter.notifyArrayItemRangeChanged(0, mRowsAdapter.size());            }        }        else if (event instanceof ToggleSubtitleEvent) {            ToggleSubtitleEvent toggleSubtitleEvent = (ToggleSubtitleEvent) event;            if (toggleSubtitleEvent.isEnabled()) {                mClosedCaptioningAction.setIndex(ClosedCaptioningAction.ON);            }            else {                mClosedCaptioningAction.setIndex(ClosedCaptioningAction.OFF);            }            notifyPlaybackControlActionChanged(mClosedCaptioningAction);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "toggleSubtitleAction", "params": ["Boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void toggleSubtitleAction(Boolean enabled) {        mSubsButtonEnabled = enabled;        if(mSecondaryActionsAdapter == null)            return;        if(enabled) {            if(mSecondaryActionsAdapter.indexOf(mClosedCaptioningAction) == -1)                mSecondaryActionsAdapter.add(mClosedCaptioningAction);        } else {            mSecondaryActionsAdapter.remove(mClosedCaptioningAction);        }        if(mRowsAdapter != null)            mRowsAdapter.notifyArrayItemRangeChanged(0, mRowsAdapter.size());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "setKeepEventBusRegistration", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setKeepEventBusRegistration(boolean keepEventBusRegistration) {        this.mKeepEventBusRegistration = keepEventBusRegistration;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "initialisePlaybackControlPresenter", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initialisePlaybackControlPresenter() {        ClassPresenterSelector presenterSelector = new ClassPresenterSelector();        mPlaybackControlsRowPresenter = new PlaybackControlsRowPresenter(new DescriptionPresenter());        mPlaybackControlsRowPresenter.setSecondaryActionsHidden(false);        presenterSelector.addClassPresenter(PlaybackControlsRow.class, mPlaybackControlsRowPresenter);        presenterSelector.addClassPresenter(ListRow.class, new ListRowPresenter());        mRowsAdapter = new ArrayObjectAdapter(presenterSelector);        setAdapter(mRowsAdapter);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "setupPlaybackControlItemsActions", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setupPlaybackControlItemsActions() {        mPlaybackControlsRowPresenter.setOnActionClickedListener(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "setupPlaybackControlItemsToInitialisingState", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setupPlaybackControlItemsToInitialisingState() {        mRowsAdapter.clear();        mPlaybackControlsRow = new PlaybackControlsRow(mStreamInfo);        mPlaybackControlsRow.setCurrentTime(0);        mPlaybackControlsRow.setBufferedProgress(0);        ControlButtonPresenterSelector presenterSelector = new ControlButtonPresenterSelector();        mPrimaryActionsAdapter = new ArrayObjectAdapter(presenterSelector);        mPlaybackControlsRow.setPrimaryActionsAdapter(mPrimaryActionsAdapter);        Activity activity = getActivity();        mPlayPauseAction = new PlayPauseAction(activity);        mPrimaryActionsAdapter.add(mPlayPauseAction);        setupSecondaryRowPlaybackControl(presenterSelector);        mRowsAdapter.add(mPlaybackControlsRow);        mRowsAdapter.notifyArrayItemRangeChanged(0, mRowsAdapter.size());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "setupPlaybackControlItemsToReadyState", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setupPlaybackControlItemsToReadyState() {        mRowsAdapter.clear();        mPlaybackControlsRow = new PlaybackControlsRow(mStreamInfo);        mPlaybackControlsRow.setCurrentTime(0);        mPlaybackControlsRow.setBufferedProgress(0);        ControlButtonPresenterSelector presenterSelector = new ControlButtonPresenterSelector();        setupPrimaryRowPlaybackControl(presenterSelector);        setupSecondaryRowPlaybackControl(presenterSelector);        mRowsAdapter.add(mPlaybackControlsRow);        mRowsAdapter.notifyArrayItemRangeChanged(0, mRowsAdapter.size());        setupPlaybackControlItemsActions();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "setupPrimaryRowPlaybackControl", "params": ["ControlButtonPresenterSelector"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setupPrimaryRowPlaybackControl(@NonNull ControlButtonPresenterSelector presenterSelector) {        mPrimaryActionsAdapter = new ArrayObjectAdapter(presenterSelector);        mPlaybackControlsRow.setPrimaryActionsAdapter(mPrimaryActionsAdapter);        Activity activity = getActivity();        mPlayPauseAction = new PlayPauseAction(activity);        mFastForwardAction = new FastForwardAction(activity);        mRewindAction = new RewindAction(activity);        if (mPreviousEpisode != null) {            mSkipPreviousAction = new PlaybackControlsRow.SkipPreviousAction(activity);            mPrimaryActionsAdapter.add(mSkipPreviousAction);        }        // Add main controls to primary adapter.        mPrimaryActionsAdapter.add(mRewindAction);        mPrimaryActionsAdapter.add(mPlayPauseAction);        mPrimaryActionsAdapter.add(mFastForwardAction);        if (mNextEpisode != null) {            mSkipNextAction = new PlaybackControlsRow.SkipNextAction(activity);            mPrimaryActionsAdapter.add(mSkipNextAction);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "setupSecondaryRowPlaybackControl", "params": ["PresenterSelector"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setupSecondaryRowPlaybackControl(@NonNull PresenterSelector presenterSelector) {        mSecondaryActionsAdapter = new ArrayObjectAdapter(presenterSelector);        mPlaybackControlsRow.setSecondaryActionsAdapter(mSecondaryActionsAdapter);        Activity activity = getActivity();        mScaleVideoAction = new ScaleVideoAction(activity);        mClosedCaptioningAction = new ClosedCaptioningAction(activity);        mClosedCaptioningAction.setIcon(getResources().getDrawable(R.drawable.ic_av_subs, null));        if (mStreamInfo!= null && mStreamInfo.getSubtitleLanguage() != null && !mStreamInfo.getSubtitleLanguage().equals(SubsProvider.SUBTITLE_LANGUAGE_NONE)) {            mClosedCaptioningAction.setIndex(ClosedCaptioningAction.ON);        } else {            mClosedCaptioningAction.setIndex(ClosedCaptioningAction.OFF);        }        // Add rest of controls to secondary adapter.        mSecondaryActionsAdapter.add(mScaleVideoAction);        if(mSubsButtonEnabled)        mSecondaryActionsAdapter.add(mClosedCaptioningAction);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "notifyPlaybackControlActionChanged", "params": ["Action"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void notifyPlaybackControlActionChanged(@NonNull Action action) {        ArrayObjectAdapter adapter = mPrimaryActionsAdapter;        if (adapter.indexOf(action) >= 0) {            adapter.notifyArrayItemRangeChanged(adapter.indexOf(action), 1);            return;        }        adapter = mSecondaryActionsAdapter;        if (adapter.indexOf(action) >= 0) {            adapter.notifyArrayItemRangeChanged(adapter.indexOf(action), 1);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "invokeOpenSubtitleSettingsAction", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void invokeOpenSubtitleSettingsAction() {        EventBus.getDefault().post(new ConfigureSubtitleEvent());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "invokeTogglePlaybackAction", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void invokeTogglePlaybackAction(boolean play) {        if (play) {            EventBus.getDefault().post(new StartPlaybackEvent());            setFadingEnabled(true);        } else {            EventBus.getDefault().post(new PausePlaybackEvent());            setFadingEnabled(false);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "invokeFastForwardAction", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void invokeFastForwardAction() {        final int refreshDuration = 100;        final int speedRefreshDuration = 5000;        Runnable runnablePlayback = new Runnable() {            @Override            public void run() {                if (mCurrentMode == MODE_FAST_FORWARD) {                    int currentTime = mPlaybackControlsRow.getCurrentTime();                    currentTime += mFastForwardSpeed;                    if (currentTime < mPlaybackControlsRow.getTotalTime()) {                        mPlaybackControlsRow.setCurrentTime(currentTime);                        mRowsAdapter.notifyArrayItemRangeChanged(0, 1);                        mSeek += mFastForwardSpeed;                    }                    mHandlerPlayback.postDelayed(this, refreshDuration);                } else if (mSelectedActionId == mFastForwardAction.getId()) {                    triggerFastForwardEvent();                }            }        };        Runnable runnablePlaybackSpeed = new Runnable() {            @Override            public void run() {                if (mCurrentMode == MODE_FAST_FORWARD) {                    mFastForwardSpeed *= 2;                    mHandlerPlaybackSpeed.postDelayed(this, speedRefreshDuration);                }                else {                    mFastForwardSpeed = SeekForwardEvent.MINIMUM_SEEK_SPEED;                }            }        };        mHandlerPlayback.postDelayed(runnablePlayback, refreshDuration);        mHandlerPlaybackSpeed.postDelayed(runnablePlaybackSpeed, speedRefreshDuration);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "invokeRewindAction", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void invokeRewindAction() {        final int refreshDuration = 100;        final int speedRefreshDuration = 5000;        Runnable runnablePlayback = new Runnable() {            @Override            public void run() {                if (mCurrentMode == MODE_REWIND) {                    int currentTime = mPlaybackControlsRow.getCurrentTime();                    currentTime -= mRewindSpeed;                    if (currentTime > 0) {                        mPlaybackControlsRow.setCurrentTime(currentTime);                        mRowsAdapter.notifyArrayItemRangeChanged(0, 1);                        mSeek += mRewindSpeed;                    }                    mHandlerPlayback.postDelayed(this, refreshDuration);                } else if (mSelectedActionId == mRewindAction.getId()) {                    triggerRewindEvent();                }            }        };        Runnable runnablePlaybackSpeed = new Runnable() {            @Override            public void run() {                if (mCurrentMode == MODE_REWIND) {                    mRewindSpeed *= 2;                    mHandlerPlaybackSpeed.postDelayed(this, speedRefreshDuration);                }                else {                    mRewindSpeed = SeekBackwardEvent.MINIMUM_SEEK_SPEED;                }            }        };        mHandlerPlayback.postDelayed(runnablePlayback, refreshDuration);        mHandlerPlaybackSpeed.postDelayed(runnablePlaybackSpeed, speedRefreshDuration);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "triggerFastForwardEvent", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void triggerFastForwardEvent() {        SeekForwardEvent event = new SeekForwardEvent();        event.setSeek(mSeek);        mSeek = 0;        EventBus.getDefault().post(event);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "triggerRewindEvent", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void triggerRewindEvent() {        SeekBackwardEvent event = new SeekBackwardEvent();        event.setSeek(mSeek);        mSeek = 0;        EventBus.getDefault().post(event);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "invokeScaleVideoAction", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void invokeScaleVideoAction() {        EventBus.getDefault().post(new ScaleVideoEvent());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "setupTVShowNextPreviousEpisodes", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setupTVShowNextPreviousEpisodes() {        if (mStreamInfo == null) {            mStreamInfo = ((TVVideoPlayerFragment.Callback) getActivity()).getInfo();        }        if (!mStreamInfo.isShow()) {            return;        }        Episode mEpisodeInfo = (Episode) mStreamInfo.getMedia();        mShow = getActivity().getIntent().getParcelableExtra(TVVideoPlayerActivity.EXTRA_SHOW_INFO);        if (mShow == null) return;        SkipEpisodeAsyncTask skipEpisodeAsyncTask = new SkipEpisodeAsyncTask(mEpisodeInfo);        skipEpisodeAsyncTask.execute(mShow);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "playSelectedEpisode", "params": ["Episode"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void playSelectedEpisode(@NonNull final Episode episode) {        List<Map.Entry<String, Media.Torrent>> torrents = new ArrayList<>(episode.torrents.entrySet());        if (torrents.size() == 0) {            // probably will never happen, just in case            new AlertDialog.Builder(getActivity())                .setMessage(getString(R.string.no_video_found))                .show();        }        else if (torrents.size() == 1) {            final Media.Torrent torrent = torrents.get(0).getValue();            final String torrentKey = torrents.get(0).getKey();            new AlertDialog.Builder(getActivity())                .setTitle(episode.title)                .setPositiveButton(getString(R.string.play), new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialogInterface, int i) {                        onTorrentSelected(episode, torrent, torrentKey);                    }                }).show();        }        else {            final ArrayList<String> choices = new ArrayList<>(episode.torrents.keySet());            final ArrayList<Media.Torrent> torrentArray = new ArrayList<>(episode.torrents.values());            new AlertDialog.Builder(getActivity())                .setTitle(episode.title)                .setSingleChoiceItems(                    choices.toArray(new CharSequence[choices.size()]),                    0,                    new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int index) {                            onTorrentSelected(episode, torrentArray.get(index), choices.get(index));                            dialog.dismiss();                        }                    }).show();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "onTorrentSelected", "params": ["Episode", "Media", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onTorrentSelected(@NonNull Episode episode, @NonNull Media.Torrent torrent, @NonNull String torrentKey) {        if (getActivity() instanceof TorrentActivity) {            TorrentActivity torrentActivity = (TorrentActivity) getActivity();            torrentActivity.getTorrentService().stopStreaming();        }        String subtitleLanguage = PrefUtils.get(            getActivity(),            Prefs.SUBTITLE_DEFAULT,            SubsProvider.SUBTITLE_LANGUAGE_NONE);        StreamInfo info = new StreamInfo(            episode,            mShow,            torrent.getUrl(),            subtitleLanguage,            torrentKey);        if (getActivity() instanceof TVVideoPlayerActivity) {            TVVideoPlayerActivity activity = (TVVideoPlayerActivity) getActivity();            activity.skipTo(info, mShow);        }        else {            TVStreamLoadingActivity.startActivity(                    getActivity(),                    info,                    mShow);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "TVPlaybackOverlayFragment", "extends": "PlaybackSupportFragment", "implements": ["OnActionClickedListener", "OnItemViewSelectedListener", "View"], "modifiers": ["public"]}}, {"method_name": "onBindDescription", "params": ["ViewHolder", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void onBindDescription(ViewHolder viewHolder, Object item) {            if (!(item instanceof StreamInfo)) return;            StreamInfo streamInfo = (StreamInfo) item;            if (streamInfo.isShow()) {                viewHolder.getTitle().setText(streamInfo.getShowTitle());                viewHolder.getSubtitle().setText(streamInfo.getShowEpisodeTitle());            }            else {                viewHolder.getTitle().setText(streamInfo.getTitle());            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "DescriptionPresenter", "extends": "AbstractDetailsDescriptionPresenter", "implements": null, "modifiers": ["static"]}}, {"method_name": "doInBackground", "params": ["Show"], "throws": null, "modifiers": ["protected"], "return_type": "Void", "snippet": "        protected Void doInBackground(Show... shows) {            for (Show show : shows) {                Collections.sort(show.episodes, new Comparator<Episode>() {                    @Override                    public int compare(Episode me, Episode them) {                        return (me.season * 10 + me.episode) - (them.season * 10 + them.episode);                    }                });                int episodeIndex = 0;                int episodes = show.episodes.size() - 1;                for (Episode episode : show.episodes) {                    if (mEpisode.season == episode.season && mEpisode.episode == episode.episode) {                        break;                    }                    episodeIndex++;                }                if (episodeIndex < episodes) {                    mNextEpisode = show.episodes.get(episodeIndex + 1);                }                if (episodeIndex > 0) {                    mPreviousEpisode = show.episodes.get(episodeIndex - 1);                }            }            return null;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "SkipEpisodeAsyncTask", "extends": "AsyncTask", "implements": null, "modifiers": []}}, {"method_name": "onPostExecute", "params": ["Void"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void onPostExecute(Void aVoid) {            super.onPostExecute(aVoid);            if (mPreviousEpisode != null || mNextEpisode != null) {                setupPlaybackControlItemsToReadyState();            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPlaybackOverlayFragment.java", "stars": "4", "class": {"name": "SkipEpisodeAsyncTask", "extends": "AsyncTask", "implements": null, "modifiers": []}}, {"method_name": "encrypt", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String encrypt(String strIn) {        try {            return byteArr2HexStr(encrypt(strIn.getBytes()));        } catch (Exception e) {            log.error(\"encrypt error:\", e);        }        return strIn;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/security/BaseSecurityAdvancedUtil.java", "stars": "2", "class": {"name": "BaseSecurityAdvancedUtil", "extends": "BaseSecurityUtil", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "encrypt", "params": ["byte"], "throws": ["IllegalBlockSizeException", "BadPaddingException"], "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte[] encrypt(byte[] bytes) throws IllegalBlockSizeException, BadPaddingException {        return encryptCipher.doFinal(bytes);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/security/BaseSecurityAdvancedUtil.java", "stars": "2", "class": {"name": "BaseSecurityAdvancedUtil", "extends": "BaseSecurityUtil", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "decrypt", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String decrypt(String strIn) {        try {            return new String(decrypt(hexStr2ByteArr(strIn)));        } catch (Exception e) {            log.error(\"decrypt error:\", e);        }        return strIn;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/security/BaseSecurityAdvancedUtil.java", "stars": "2", "class": {"name": "BaseSecurityAdvancedUtil", "extends": "BaseSecurityUtil", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "decrypt", "params": ["byte"], "throws": ["IllegalBlockSizeException", "BadPaddingException"], "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte[] decrypt(byte[] bytes) throws IllegalBlockSizeException, BadPaddingException {        return decryptCipher.doFinal(bytes);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/security/BaseSecurityAdvancedUtil.java", "stars": "2", "class": {"name": "BaseSecurityAdvancedUtil", "extends": "BaseSecurityUtil", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "byteArr2HexStr", "params": ["byte"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String byteArr2HexStr(byte[] bytes) {        int iLen = bytes.length;        // \u6bcf\u4e2abyte\u7528\u4e24\u4e2a\u5b57\u7b26\u624d\u80fd\u8868\u793a\uff0c\u6240\u4ee5\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f\u6570\u7ec4\u957f\u5ea6\u7684\u4e24\u500d        StringBuilder stringBuilder = new StringBuilder(iLen * 2);        for (int aByte : bytes) {            int intTmp = aByte;            // \u628a\u8d1f\u6570\u8f6c\u6362\u4e3a\u6b63\u6570            while (intTmp < 0) {                intTmp = intTmp + 256;            }            // \u5c0f\u4e8e0F\u7684\u6570\u9700\u8981\u5728\u524d\u9762\u88650            if (intTmp < 16) {                stringBuilder.append(\"0\");            }            stringBuilder.append(Integer.toString(intTmp, 16));        }        return stringBuilder.toString();    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/security/BaseSecurityAdvancedUtil.java", "stars": "2", "class": {"name": "BaseSecurityAdvancedUtil", "extends": "BaseSecurityUtil", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "hexStr2ByteArr", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "byte", "snippet": "    private static byte[] hexStr2ByteArr(String strIn) {        byte[] bytes = strIn.getBytes();        int iLen = bytes.length;        // \u4e24\u4e2a\u5b57\u7b26\u8868\u793a\u4e00\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u5b57\u8282\u6570\u7ec4\u957f\u5ea6\u662f\u5b57\u7b26\u4e32\u957f\u5ea6\u9664\u4ee52        byte[] arrOut = new byte[iLen / 2];        for (int i = 0; i < iLen; i = i + 2) {            String strTmp = new String(bytes, i, 2);            arrOut[i / 2] = (byte) Integer.parseInt(strTmp, 16);        }        return arrOut;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/security/BaseSecurityAdvancedUtil.java", "stars": "2", "class": {"name": "BaseSecurityAdvancedUtil", "extends": "BaseSecurityUtil", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "doSomething", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void doSomething() {        System.out.println(\"Hello from library module!\");    }", "url": "https://raw.githubusercontent.com/enriquedevs/java11/master/librarymodule/src/com/enriquedevs/librarymodule/Hello.java", "stars": "1", "class": {"name": "Hello", "extends": null, "implements": ["HelloInterface"], "modifiers": ["public"]}}, {"method_name": "sayHello", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void sayHello() {\t\tSystem.out.println(\"Hello again from library module!\");\t}", "url": "https://raw.githubusercontent.com/enriquedevs/java11/master/librarymodule/src/com/enriquedevs/librarymodule/Hello.java", "stars": "1", "class": {"name": "Hello", "extends": null, "implements": ["HelloInterface"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        ArrayList<Integer> list01 = new ArrayList<>();        list01.add(1);        list01.add(2);        ArrayList<String> list02 = new ArrayList<>();        list02.add(\"a\");        list02.add(\"b\");        printArray(list01);        printArray(list02);        //ArrayList<?> list03 = new ArrayList<?>();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/13.%E3%80%90Collection%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/02_CollectionAndReflect/src/com/itheima/demo03/Generic/Demo05Generic.java", "stars": "2", "class": {"name": "Demo05Generic", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printArray", "params": ["ArrayList<?>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void printArray(ArrayList<?> list){        //\u4f7f\u7528\u8fed\u4ee3\u5668\u904d\u5386\u96c6\u5408        Iterator<?> it = list.iterator();        while(it.hasNext()){            //it.next()\u65b9\u6cd5,\u53d6\u51fa\u7684\u5143\u7d20\u662fObject,\u53ef\u4ee5\u63a5\u6536\u4efb\u610f\u7684\u6570\u636e\u7c7b\u578b            Object o = it.next();            System.out.println(o);        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/13.%E3%80%90Collection%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/02_CollectionAndReflect/src/com/itheima/demo03/Generic/Demo05Generic.java", "stars": "2", "class": {"name": "Demo05Generic", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onReceive", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onReceive (android.content.Context p0, android.content.Intent p1)\t{\t\tn_onReceive (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/ConnectivityBroadcastReceiver.java", "stars": "2", "class": {"name": "ConnectivityBroadcastReceiver", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onReceive", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onReceive (android.content.Context p0, android.content.Intent p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/ConnectivityBroadcastReceiver.java", "stars": "2", "class": {"name": "ConnectivityBroadcastReceiver", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/ConnectivityBroadcastReceiver.java", "stars": "2", "class": {"name": "ConnectivityBroadcastReceiver", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/ConnectivityBroadcastReceiver.java", "stars": "2", "class": {"name": "ConnectivityBroadcastReceiver", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getFlag", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFlag() {        return flag;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFlag", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFlag(String flag) {        this.flag = flag;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCases", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCases() {        return Cases;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCases", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCases(String cases) {        Cases = cases;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTodayCases", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTodayCases() {        return todayCases;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTodayCases", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTodayCases(String todayCases) {        this.todayCases = todayCases;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDeaths", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDeaths() {        return deaths;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDeaths", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDeaths(String deaths) {        this.deaths = deaths;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTodayDaths", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTodayDaths() {        return todayDaths;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTodayDaths", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTodayDaths(String todayDaths) {        this.todayDaths = todayDaths;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRecovered", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRecovered() {        return recovered;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRecovered", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRecovered(String recovered) {        this.recovered = recovered;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getActive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getActive() {        return active;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setActive", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setActive(String active) {        this.active = active;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCritical", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCritical() {        return critical;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCritical", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCritical(String critical) {        this.critical = critical;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTests", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTests() {        return tests;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTests", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTests(String tests) {        this.tests = tests;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCountry", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCountry() {        return country;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCountry", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCountry(String country) {        this.country = country;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllCountyCaseData.java", "stars": "2", "class": {"name": "AllCountyCaseData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gzipString", "params": ["String", "String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "byte", "snippet": "  public static byte[] gzipString(final String str, final String encType)      throws IOException {    final byte[] stringData = str.getBytes(encType);    return gzipBytes(stringData);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/GZIPUtils.java", "stars": "18", "class": {"name": "GZIPUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gzipBytes", "params": ["byte"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "byte", "snippet": "  public static byte[] gzipBytes(final byte[] bytes) throws IOException {    return gzipBytes(bytes, 0, bytes.length);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/GZIPUtils.java", "stars": "18", "class": {"name": "GZIPUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gzipBytes", "params": ["byte", "int", "int"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "byte", "snippet": "  public static byte[] gzipBytes(final byte[] bytes, final int offset, final int length)      throws IOException {    final ByteArrayOutputStream byteOutputStream = new ByteArrayOutputStream();    GZIPOutputStream gzipStream = null;    gzipStream = new GZIPOutputStream(byteOutputStream);    gzipStream.write(bytes, offset, length);    gzipStream.close();    return byteOutputStream.toByteArray();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/GZIPUtils.java", "stars": "18", "class": {"name": "GZIPUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unGzipBytes", "params": ["byte"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "byte", "snippet": "  public static byte[] unGzipBytes(final byte[] bytes) throws IOException {    final ByteArrayInputStream byteInputStream = new ByteArrayInputStream(bytes);    final GZIPInputStream gzipInputStream = new GZIPInputStream(byteInputStream);    final ByteArrayOutputStream byteOutputStream = new ByteArrayOutputStream();    IOUtils.copy(gzipInputStream, byteOutputStream);    return byteOutputStream.toByteArray();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/GZIPUtils.java", "stars": "18", "class": {"name": "GZIPUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unGzipString", "params": ["byte", "String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String unGzipString(final byte[] bytes, final String encType)      throws IOException {    final byte[] response = unGzipBytes(bytes);    return new String(response, encType);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/GZIPUtils.java", "stars": "18", "class": {"name": "GZIPUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "transformBytesToObject", "params": ["byte", "EncodingType"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "Object", "snippet": "  public static Object transformBytesToObject(final byte[] data, final EncodingType encType)      throws IOException {    if (encType == EncodingType.GZIP) {      final String jsonString = GZIPUtils.unGzipString(data, \"UTF-8\");      return JSONUtils.parseJSONFromString(jsonString);    } else {      final String jsonString = new String(data, \"UTF-8\");      return JSONUtils.parseJSONFromString(jsonString);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/GZIPUtils.java", "stars": "18", "class": {"name": "GZIPUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createProducer", "params": ["Vertx", "String", "String", "Handler<AsyncResult>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void createProducer(Vertx vertx, String url, String channel,        Handler<AsyncResult<AsyncAPIMessageProducer>> handler) {        vertx.executeBlocking((Promise<AsyncAPIMessageProducer> promise) -> {            try {                JSONObject spec = readSpec(url);                if (spec == null) {                    promise.fail(new RuntimeException(\"error deserializing AsyncAPI spec\"));                    return;                }                JSONObject messageSchema = readMessageSchema(channel, spec);                MessageProducer<JsonObject> delegate = vertx.eventBus().publisher(channel);                promise.complete(new AsyncAPIMessageProducer(delegate, messageSchema));            } catch (Throwable t) {                promise.fail(t);            }        }, handler);    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPI.java", "stars": "9", "class": {"name": "AsyncAPI", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readMessageSchema", "params": ["String", "JSONObject"], "throws": null, "modifiers": ["private", "static"], "return_type": "JSONObject", "snippet": "    private static JSONObject readMessageSchema(String channel, JSONObject spec) {        return spec.getJSONObject(\"channels\")            .getJSONObject(channel)            .getJSONObject(\"publish\")            .getJSONObject(\"message\")            .getJSONObject(\"payload\");    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPI.java", "stars": "9", "class": {"name": "AsyncAPI", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readSpec", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "JSONObject", "snippet": "    private static JSONObject readSpec(String url) {        try {            String location = url.replace(\"\\\\\\\\\", \"/\");            Path path;            if (location.toLowerCase().startsWith(\"file:\")) {                path = Paths.get(URI.create(location));            } else {                path = Paths.get(location);            }            String data;            if (Files.exists(path)) {                data = FileUtils.readFileToString(path.toFile(), \"utf-8\");            } else {                data = ClasspathHelper.loadFileFromClasspath(location);            }            return new JSONObject(                getMapper(data).readTree(data).toString()            );        } catch (Throwable t) {            return null;        }    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPI.java", "stars": "9", "class": {"name": "AsyncAPI", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMapper", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "ObjectMapper", "snippet": "    private static ObjectMapper getMapper(String data) {        if (data.trim().startsWith(\"{\")) {            return ObjectMapperFactory.createJson();        } else {            return ObjectMapperFactory.createYaml();        }    }}", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPI.java", "stars": "9", "class": {"name": "AsyncAPI", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() {        cacheManager.getCache(UserRepository.USERS_BY_LOGIN_CACHE).clear();        cacheManager.getCache(UserRepository.USERS_BY_EMAIL_CACHE).clear();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createEntity", "params": ["EntityManager"], "throws": null, "modifiers": ["public", "static"], "return_type": "User", "snippet": "    public static User createEntity(EntityManager em) {        User user = new User();        user.setLogin(DEFAULT_LOGIN + RandomStringUtils.randomAlphabetic(5));        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setEmail(RandomStringUtils.randomAlphabetic(5) + DEFAULT_EMAIL);        user.setFirstName(DEFAULT_FIRSTNAME);        user.setLastName(DEFAULT_LASTNAME);        user.setImageUrl(DEFAULT_IMAGEURL);        user.setLangKey(DEFAULT_LANGKEY);        return user;    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initTest", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initTest() {        user = createEntity(em);        user.setLogin(DEFAULT_LOGIN);        user.setEmail(DEFAULT_EMAIL);    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createUser", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createUser() throws Exception {        int databaseSizeBeforeCreate = userRepository.findAll().size();        // Create the User        ManagedUserVM managedUserVM = new ManagedUserVM();        managedUserVM.setLogin(DEFAULT_LOGIN);        managedUserVM.setPassword(DEFAULT_PASSWORD);        managedUserVM.setFirstName(DEFAULT_FIRSTNAME);        managedUserVM.setLastName(DEFAULT_LASTNAME);        managedUserVM.setEmail(DEFAULT_EMAIL);        managedUserVM.setActivated(true);        managedUserVM.setImageUrl(DEFAULT_IMAGEURL);        managedUserVM.setLangKey(DEFAULT_LANGKEY);        managedUserVM.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        restUserMockMvc            .perform(post(\"/api/users\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(managedUserVM)))            .andExpect(status().isCreated());        // Validate the User in the database        assertPersistedUsers(            users -> {                assertThat(users).hasSize(databaseSizeBeforeCreate + 1);                User testUser = users.get(users.size() - 1);                assertThat(testUser.getLogin()).isEqualTo(DEFAULT_LOGIN);                assertThat(testUser.getFirstName()).isEqualTo(DEFAULT_FIRSTNAME);                assertThat(testUser.getLastName()).isEqualTo(DEFAULT_LASTNAME);                assertThat(testUser.getEmail()).isEqualTo(DEFAULT_EMAIL);                assertThat(testUser.getImageUrl()).isEqualTo(DEFAULT_IMAGEURL);                assertThat(testUser.getLangKey()).isEqualTo(DEFAULT_LANGKEY);            }        );    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createUserWithExistingId", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createUserWithExistingId() throws Exception {        int databaseSizeBeforeCreate = userRepository.findAll().size();        ManagedUserVM managedUserVM = new ManagedUserVM();        managedUserVM.setId(1L);        managedUserVM.setLogin(DEFAULT_LOGIN);        managedUserVM.setPassword(DEFAULT_PASSWORD);        managedUserVM.setFirstName(DEFAULT_FIRSTNAME);        managedUserVM.setLastName(DEFAULT_LASTNAME);        managedUserVM.setEmail(DEFAULT_EMAIL);        managedUserVM.setActivated(true);        managedUserVM.setImageUrl(DEFAULT_IMAGEURL);        managedUserVM.setLangKey(DEFAULT_LANGKEY);        managedUserVM.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        // An entity with an existing ID cannot be created, so this API call must fail        restUserMockMvc            .perform(post(\"/api/users\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(managedUserVM)))            .andExpect(status().isBadRequest());        // Validate the User in the database        assertPersistedUsers(users -> assertThat(users).hasSize(databaseSizeBeforeCreate));    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createUserWithExistingLogin", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createUserWithExistingLogin() throws Exception {        // Initialize the database        userRepository.saveAndFlush(user);        mockUserSearchRepository.save(user);        int databaseSizeBeforeCreate = userRepository.findAll().size();        ManagedUserVM managedUserVM = new ManagedUserVM();        managedUserVM.setLogin(DEFAULT_LOGIN); // this login should already be used        managedUserVM.setPassword(DEFAULT_PASSWORD);        managedUserVM.setFirstName(DEFAULT_FIRSTNAME);        managedUserVM.setLastName(DEFAULT_LASTNAME);        managedUserVM.setEmail(\"anothermail@localhost\");        managedUserVM.setActivated(true);        managedUserVM.setImageUrl(DEFAULT_IMAGEURL);        managedUserVM.setLangKey(DEFAULT_LANGKEY);        managedUserVM.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        // Create the User        restUserMockMvc            .perform(post(\"/api/users\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(managedUserVM)))            .andExpect(status().isBadRequest());        // Validate the User in the database        assertPersistedUsers(users -> assertThat(users).hasSize(databaseSizeBeforeCreate));    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createUserWithExistingEmail", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createUserWithExistingEmail() throws Exception {        // Initialize the database        userRepository.saveAndFlush(user);        mockUserSearchRepository.save(user);        int databaseSizeBeforeCreate = userRepository.findAll().size();        ManagedUserVM managedUserVM = new ManagedUserVM();        managedUserVM.setLogin(\"anotherlogin\");        managedUserVM.setPassword(DEFAULT_PASSWORD);        managedUserVM.setFirstName(DEFAULT_FIRSTNAME);        managedUserVM.setLastName(DEFAULT_LASTNAME);        managedUserVM.setEmail(DEFAULT_EMAIL); // this email should already be used        managedUserVM.setActivated(true);        managedUserVM.setImageUrl(DEFAULT_IMAGEURL);        managedUserVM.setLangKey(DEFAULT_LANGKEY);        managedUserVM.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        // Create the User        restUserMockMvc            .perform(post(\"/api/users\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(managedUserVM)))            .andExpect(status().isBadRequest());        // Validate the User in the database        assertPersistedUsers(users -> assertThat(users).hasSize(databaseSizeBeforeCreate));    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllUsers", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllUsers() throws Exception {        // Initialize the database        userRepository.saveAndFlush(user);        mockUserSearchRepository.save(user);        // Get all the users        restUserMockMvc            .perform(get(\"/api/users?sort=id,desc\").accept(MediaType.APPLICATION_JSON))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))            .andExpect(jsonPath(\"$.[*].login\").value(hasItem(DEFAULT_LOGIN)))            .andExpect(jsonPath(\"$.[*].firstName\").value(hasItem(DEFAULT_FIRSTNAME)))            .andExpect(jsonPath(\"$.[*].lastName\").value(hasItem(DEFAULT_LASTNAME)))            .andExpect(jsonPath(\"$.[*].email\").value(hasItem(DEFAULT_EMAIL)))            .andExpect(jsonPath(\"$.[*].imageUrl\").value(hasItem(DEFAULT_IMAGEURL)))            .andExpect(jsonPath(\"$.[*].langKey\").value(hasItem(DEFAULT_LANGKEY)));    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUser", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getUser() throws Exception {        // Initialize the database        userRepository.saveAndFlush(user);        mockUserSearchRepository.save(user);        assertThat(cacheManager.getCache(UserRepository.USERS_BY_LOGIN_CACHE).get(user.getLogin())).isNull();        // Get the user        restUserMockMvc            .perform(get(\"/api/users/{login}\", user.getLogin()))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))            .andExpect(jsonPath(\"$.login\").value(user.getLogin()))            .andExpect(jsonPath(\"$.firstName\").value(DEFAULT_FIRSTNAME))            .andExpect(jsonPath(\"$.lastName\").value(DEFAULT_LASTNAME))            .andExpect(jsonPath(\"$.email\").value(DEFAULT_EMAIL))            .andExpect(jsonPath(\"$.imageUrl\").value(DEFAULT_IMAGEURL))            .andExpect(jsonPath(\"$.langKey\").value(DEFAULT_LANGKEY));        assertThat(cacheManager.getCache(UserRepository.USERS_BY_LOGIN_CACHE).get(user.getLogin())).isNotNull();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNonExistingUser", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getNonExistingUser() throws Exception {        restUserMockMvc.perform(get(\"/api/users/unknown\")).andExpect(status().isNotFound());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateUser", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateUser() throws Exception {        // Initialize the database        userRepository.saveAndFlush(user);        mockUserSearchRepository.save(user);        int databaseSizeBeforeUpdate = userRepository.findAll().size();        // Update the user        User updatedUser = userRepository.findById(user.getId()).get();        ManagedUserVM managedUserVM = new ManagedUserVM();        managedUserVM.setId(updatedUser.getId());        managedUserVM.setLogin(updatedUser.getLogin());        managedUserVM.setPassword(UPDATED_PASSWORD);        managedUserVM.setFirstName(UPDATED_FIRSTNAME);        managedUserVM.setLastName(UPDATED_LASTNAME);        managedUserVM.setEmail(UPDATED_EMAIL);        managedUserVM.setActivated(updatedUser.getActivated());        managedUserVM.setImageUrl(UPDATED_IMAGEURL);        managedUserVM.setLangKey(UPDATED_LANGKEY);        managedUserVM.setCreatedBy(updatedUser.getCreatedBy());        managedUserVM.setCreatedDate(updatedUser.getCreatedDate());        managedUserVM.setLastModifiedBy(updatedUser.getLastModifiedBy());        managedUserVM.setLastModifiedDate(updatedUser.getLastModifiedDate());        managedUserVM.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        restUserMockMvc            .perform(put(\"/api/users\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(managedUserVM)))            .andExpect(status().isOk());        // Validate the User in the database        assertPersistedUsers(            users -> {                assertThat(users).hasSize(databaseSizeBeforeUpdate);                User testUser = users.get(users.size() - 1);                assertThat(testUser.getFirstName()).isEqualTo(UPDATED_FIRSTNAME);                assertThat(testUser.getLastName()).isEqualTo(UPDATED_LASTNAME);                assertThat(testUser.getEmail()).isEqualTo(UPDATED_EMAIL);                assertThat(testUser.getImageUrl()).isEqualTo(UPDATED_IMAGEURL);                assertThat(testUser.getLangKey()).isEqualTo(UPDATED_LANGKEY);            }        );    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateUserLogin", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateUserLogin() throws Exception {        // Initialize the database        userRepository.saveAndFlush(user);        mockUserSearchRepository.save(user);        int databaseSizeBeforeUpdate = userRepository.findAll().size();        // Update the user        User updatedUser = userRepository.findById(user.getId()).get();        ManagedUserVM managedUserVM = new ManagedUserVM();        managedUserVM.setId(updatedUser.getId());        managedUserVM.setLogin(UPDATED_LOGIN);        managedUserVM.setPassword(UPDATED_PASSWORD);        managedUserVM.setFirstName(UPDATED_FIRSTNAME);        managedUserVM.setLastName(UPDATED_LASTNAME);        managedUserVM.setEmail(UPDATED_EMAIL);        managedUserVM.setActivated(updatedUser.getActivated());        managedUserVM.setImageUrl(UPDATED_IMAGEURL);        managedUserVM.setLangKey(UPDATED_LANGKEY);        managedUserVM.setCreatedBy(updatedUser.getCreatedBy());        managedUserVM.setCreatedDate(updatedUser.getCreatedDate());        managedUserVM.setLastModifiedBy(updatedUser.getLastModifiedBy());        managedUserVM.setLastModifiedDate(updatedUser.getLastModifiedDate());        managedUserVM.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        restUserMockMvc            .perform(put(\"/api/users\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(managedUserVM)))            .andExpect(status().isOk());        // Validate the User in the database        assertPersistedUsers(            users -> {                assertThat(users).hasSize(databaseSizeBeforeUpdate);                User testUser = users.get(users.size() - 1);                assertThat(testUser.getLogin()).isEqualTo(UPDATED_LOGIN);                assertThat(testUser.getFirstName()).isEqualTo(UPDATED_FIRSTNAME);                assertThat(testUser.getLastName()).isEqualTo(UPDATED_LASTNAME);                assertThat(testUser.getEmail()).isEqualTo(UPDATED_EMAIL);                assertThat(testUser.getImageUrl()).isEqualTo(UPDATED_IMAGEURL);                assertThat(testUser.getLangKey()).isEqualTo(UPDATED_LANGKEY);            }        );    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateUserExistingEmail", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateUserExistingEmail() throws Exception {        // Initialize the database with 2 users        userRepository.saveAndFlush(user);        mockUserSearchRepository.save(user);        User anotherUser = new User();        anotherUser.setLogin(\"jhipster\");        anotherUser.setPassword(RandomStringUtils.random(60));        anotherUser.setActivated(true);        anotherUser.setEmail(\"jhipster@localhost\");        anotherUser.setFirstName(\"java\");        anotherUser.setLastName(\"hipster\");        anotherUser.setImageUrl(\"\");        anotherUser.setLangKey(\"en\");        userRepository.saveAndFlush(anotherUser);        mockUserSearchRepository.save(anotherUser);        // Update the user        User updatedUser = userRepository.findById(user.getId()).get();        ManagedUserVM managedUserVM = new ManagedUserVM();        managedUserVM.setId(updatedUser.getId());        managedUserVM.setLogin(updatedUser.getLogin());        managedUserVM.setPassword(updatedUser.getPassword());        managedUserVM.setFirstName(updatedUser.getFirstName());        managedUserVM.setLastName(updatedUser.getLastName());        managedUserVM.setEmail(\"jhipster@localhost\"); // this email should already be used by anotherUser        managedUserVM.setActivated(updatedUser.getActivated());        managedUserVM.setImageUrl(updatedUser.getImageUrl());        managedUserVM.setLangKey(updatedUser.getLangKey());        managedUserVM.setCreatedBy(updatedUser.getCreatedBy());        managedUserVM.setCreatedDate(updatedUser.getCreatedDate());        managedUserVM.setLastModifiedBy(updatedUser.getLastModifiedBy());        managedUserVM.setLastModifiedDate(updatedUser.getLastModifiedDate());        managedUserVM.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        restUserMockMvc            .perform(put(\"/api/users\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(managedUserVM)))            .andExpect(status().isBadRequest());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateUserExistingLogin", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateUserExistingLogin() throws Exception {        // Initialize the database        userRepository.saveAndFlush(user);        mockUserSearchRepository.save(user);        User anotherUser = new User();        anotherUser.setLogin(\"jhipster\");        anotherUser.setPassword(RandomStringUtils.random(60));        anotherUser.setActivated(true);        anotherUser.setEmail(\"jhipster@localhost\");        anotherUser.setFirstName(\"java\");        anotherUser.setLastName(\"hipster\");        anotherUser.setImageUrl(\"\");        anotherUser.setLangKey(\"en\");        userRepository.saveAndFlush(anotherUser);        mockUserSearchRepository.save(anotherUser);        // Update the user        User updatedUser = userRepository.findById(user.getId()).get();        ManagedUserVM managedUserVM = new ManagedUserVM();        managedUserVM.setId(updatedUser.getId());        managedUserVM.setLogin(\"jhipster\"); // this login should already be used by anotherUser        managedUserVM.setPassword(updatedUser.getPassword());        managedUserVM.setFirstName(updatedUser.getFirstName());        managedUserVM.setLastName(updatedUser.getLastName());        managedUserVM.setEmail(updatedUser.getEmail());        managedUserVM.setActivated(updatedUser.getActivated());        managedUserVM.setImageUrl(updatedUser.getImageUrl());        managedUserVM.setLangKey(updatedUser.getLangKey());        managedUserVM.setCreatedBy(updatedUser.getCreatedBy());        managedUserVM.setCreatedDate(updatedUser.getCreatedDate());        managedUserVM.setLastModifiedBy(updatedUser.getLastModifiedBy());        managedUserVM.setLastModifiedDate(updatedUser.getLastModifiedDate());        managedUserVM.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        restUserMockMvc            .perform(put(\"/api/users\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(managedUserVM)))            .andExpect(status().isBadRequest());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteUser", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteUser() throws Exception {        // Initialize the database        userRepository.saveAndFlush(user);        mockUserSearchRepository.save(user);        int databaseSizeBeforeDelete = userRepository.findAll().size();        // Delete the user        restUserMockMvc            .perform(delete(\"/api/users/{login}\", user.getLogin()).accept(MediaType.APPLICATION_JSON))            .andExpect(status().isNoContent());        assertThat(cacheManager.getCache(UserRepository.USERS_BY_LOGIN_CACHE).get(user.getLogin())).isNull();        // Validate the database is empty        assertPersistedUsers(users -> assertThat(users).hasSize(databaseSizeBeforeDelete - 1));    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllAuthorities", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllAuthorities() throws Exception {        restUserMockMvc            .perform(get(\"/api/users/authorities\").accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))            .andExpect(jsonPath(\"$\").isArray())            .andExpect(jsonPath(\"$\").value(hasItems(AuthoritiesConstants.USER, AuthoritiesConstants.ADMIN)));    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUserEquals", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testUserEquals() throws Exception {        TestUtil.equalsVerifier(User.class);        User user1 = new User();        user1.setId(1L);        User user2 = new User();        user2.setId(user1.getId());        assertThat(user1).isEqualTo(user2);        user2.setId(2L);        assertThat(user1).isNotEqualTo(user2);        user1.setId(null);        assertThat(user1).isNotEqualTo(user2);    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUserDTOtoUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testUserDTOtoUser() {        UserDTO userDTO = new UserDTO();        userDTO.setId(DEFAULT_ID);        userDTO.setLogin(DEFAULT_LOGIN);        userDTO.setFirstName(DEFAULT_FIRSTNAME);        userDTO.setLastName(DEFAULT_LASTNAME);        userDTO.setEmail(DEFAULT_EMAIL);        userDTO.setActivated(true);        userDTO.setImageUrl(DEFAULT_IMAGEURL);        userDTO.setLangKey(DEFAULT_LANGKEY);        userDTO.setCreatedBy(DEFAULT_LOGIN);        userDTO.setLastModifiedBy(DEFAULT_LOGIN);        userDTO.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        User user = userMapper.userDTOToUser(userDTO);        assertThat(user.getId()).isEqualTo(DEFAULT_ID);        assertThat(user.getLogin()).isEqualTo(DEFAULT_LOGIN);        assertThat(user.getFirstName()).isEqualTo(DEFAULT_FIRSTNAME);        assertThat(user.getLastName()).isEqualTo(DEFAULT_LASTNAME);        assertThat(user.getEmail()).isEqualTo(DEFAULT_EMAIL);        assertThat(user.getActivated()).isEqualTo(true);        assertThat(user.getImageUrl()).isEqualTo(DEFAULT_IMAGEURL);        assertThat(user.getLangKey()).isEqualTo(DEFAULT_LANGKEY);        assertThat(user.getCreatedBy()).isNull();        assertThat(user.getCreatedDate()).isNotNull();        assertThat(user.getLastModifiedBy()).isNull();        assertThat(user.getLastModifiedDate()).isNotNull();        assertThat(user.getAuthorities()).extracting(\"name\").containsExactly(AuthoritiesConstants.USER);    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUserToUserDTO", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testUserToUserDTO() {        user.setId(DEFAULT_ID);        user.setCreatedBy(DEFAULT_LOGIN);        user.setCreatedDate(Instant.now());        user.setLastModifiedBy(DEFAULT_LOGIN);        user.setLastModifiedDate(Instant.now());        Set<Authority> authorities = new HashSet<>();        Authority authority = new Authority();        authority.setName(AuthoritiesConstants.USER);        authorities.add(authority);        user.setAuthorities(authorities);        UserDTO userDTO = userMapper.userToUserDTO(user);        assertThat(userDTO.getId()).isEqualTo(DEFAULT_ID);        assertThat(userDTO.getLogin()).isEqualTo(DEFAULT_LOGIN);        assertThat(userDTO.getFirstName()).isEqualTo(DEFAULT_FIRSTNAME);        assertThat(userDTO.getLastName()).isEqualTo(DEFAULT_LASTNAME);        assertThat(userDTO.getEmail()).isEqualTo(DEFAULT_EMAIL);        assertThat(userDTO.isActivated()).isEqualTo(true);        assertThat(userDTO.getImageUrl()).isEqualTo(DEFAULT_IMAGEURL);        assertThat(userDTO.getLangKey()).isEqualTo(DEFAULT_LANGKEY);        assertThat(userDTO.getCreatedBy()).isEqualTo(DEFAULT_LOGIN);        assertThat(userDTO.getCreatedDate()).isEqualTo(user.getCreatedDate());        assertThat(userDTO.getLastModifiedBy()).isEqualTo(DEFAULT_LOGIN);        assertThat(userDTO.getLastModifiedDate()).isEqualTo(user.getLastModifiedDate());        assertThat(userDTO.getAuthorities()).containsExactly(AuthoritiesConstants.USER);        assertThat(userDTO.toString()).isNotNull();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testAuthorityEquals", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testAuthorityEquals() {        Authority authorityA = new Authority();        assertThat(authorityA).isEqualTo(authorityA);        assertThat(authorityA).isNotEqualTo(null);        assertThat(authorityA).isNotEqualTo(new Object());        assertThat(authorityA.hashCode()).isEqualTo(0);        assertThat(authorityA.toString()).isNotNull();        Authority authorityB = new Authority();        assertThat(authorityA).isEqualTo(authorityB);        authorityB.setName(AuthoritiesConstants.ADMIN);        assertThat(authorityA).isNotEqualTo(authorityB);        authorityA.setName(AuthoritiesConstants.USER);        assertThat(authorityA).isNotEqualTo(authorityB);        authorityB.setName(AuthoritiesConstants.USER);        assertThat(authorityA).isEqualTo(authorityB);        assertThat(authorityA.hashCode()).isEqualTo(authorityB.hashCode());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assertPersistedUsers", "params": ["Consumer<List>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void assertPersistedUsers(Consumer<List<User>> userAssertion) {        userAssertion.accept(userRepository.findAll());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/UserResourceIT.java", "stars": "2", "class": {"name": "UserResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateDialog", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "Dialog", "snippet": "    public Dialog onCreateDialog(Bundle savedInstanceState) {        if (!getArguments().containsKey(TITLE) || !getArguments().containsKey(MESSAGE)) {            return super.onCreateDialog(savedInstanceState);        }        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity())                .setTitle(getArguments().getString(TITLE))                .setMessage(getArguments().getString(MESSAGE));        if(getArguments().getBoolean(CANCELABLE, true)) {            builder.setNegativeButton(R.string.ok, new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    dialog.dismiss();                }            });            setCancelable(true);        } else {            setCancelable(false);        }        return builder.create();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/MessageDialogFragment.java", "stars": "4", "class": {"name": "MessageDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": ["FragmentManager", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void show(FragmentManager fm, String title, String message) {        show(fm, title, message, true);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/MessageDialogFragment.java", "stars": "4", "class": {"name": "MessageDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": ["FragmentManager", "String", "String", "Boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void show(FragmentManager fm, String title, String message, Boolean cancelable) {        MessageDialogFragment dialogFragment = new MessageDialogFragment();        Bundle args = new Bundle();        args.putString(TITLE, title);        args.putString(MESSAGE, message);        args.putBoolean(CANCELABLE, cancelable);        dialogFragment.setArguments(args);        dialogFragment.show(fm, \"overlay_fragment\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/MessageDialogFragment.java", "stars": "4", "class": {"name": "MessageDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": ["FragmentManager", "int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void show(FragmentManager fm, int titleRes, int messageRes) {        show(fm, ButterApplication.getAppContext().getString(titleRes), ButterApplication.getAppContext().getString(messageRes));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/MessageDialogFragment.java", "stars": "4", "class": {"name": "MessageDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": ["FragmentManager", "int", "int", "Boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void show(FragmentManager fm, int titleRes, int messageRes, Boolean cancelable) {        show(fm, ButterApplication.getAppContext().getString(titleRes), ButterApplication.getAppContext().getString(messageRes), cancelable);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/MessageDialogFragment.java", "stars": "4", "class": {"name": "MessageDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "in", "params": ["IBlockState", "World", "BlockPos", "AxisAlignedBB", "List<AxisAlignedBB>", "Entity", "boolean", "CallbackInfo"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void in(IBlockState state, World world, BlockPos pos, AxisAlignedBB entityBox, List<AxisAlignedBB> collidingBoxes, @Nullable Entity entity, boolean isActualState, CallbackInfo ci) {            Block block = (Block) (Object) (this);        bbEvent = new CollisionBoxEvent(block, pos, block.getCollisionBoundingBox(state, world, pos), collidingBoxes, entity);        Mercury.INSTANCE.getEventManager().fireEvent(bbEvent);        if (bbEvent.getBoundingBox() == null)            ci.cancel();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinBlock.java", "stars": "12", "class": {"name": "MixinBlock", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getBB", "params": ["IBlockState", "IBlockAccess", "BlockPos"], "throws": null, "modifiers": ["private"], "return_type": "AxisAlignedBB", "snippet": "    private AxisAlignedBB getBB(IBlockState state, IBlockAccess world, BlockPos pos) {        AxisAlignedBB bb = (bbEvent == null) ?                state.getCollisionBoundingBox(world, pos) :                bbEvent.getBoundingBox();        return bb;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinBlock.java", "stars": "12", "class": {"name": "MixinBlock", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createRestApi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Docket", "snippet": "    public Docket createRestApi() {        return new Docket(DocumentationType.SWAGGER_2)                .enable(swaggerShow)                .apiInfo(apiInfo())                .select()                .apis(RequestHandlerSelectors.basePackage(\"cn.blog.controller\"))                .paths(PathSelectors.any())                .build();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Swagger2.java", "stars": "2", "class": {"name": "Swagger2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "apiInfo", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ApiInfo", "snippet": "    private ApiInfo apiInfo() {        return new ApiInfoBuilder()                .title(\"Site Swagger Restful API\")                .description(\"\u672c\u5730\u6d4b\u8bd5\u7248\uff0c\")                .contact(\"chenVal\")                .version(\"5.0\")                .build();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Swagger2.java", "stars": "2", "class": {"name": "Swagger2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "exibirPaginaPrincipal", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String exibirPaginaPrincipal(HttpServletRequest request, HttpServletResponse response) {\t\treturn \"restrict/home.jsp\";\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/UsuarioAction.java", "stars": "2", "class": {"name": "UsuarioAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "prepararAlteracao", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String prepararAlteracao(HttpServletRequest request, HttpServletResponse response) {\t\ttry {\t\t\tString idStr = request.getParameter(\"id\");\t\t\tLong idLong = new Long((idStr == null ? \"-1\" : idStr));\t\t\tUsuario u = (Usuario) userRepository.findById(idLong);\t\t\trequest.setAttribute(\"usuario\", u);\t\t\treturn \"restrict/user/edit.jsp\";\t\t} catch (Exception e) {\t\t\trequest.setAttribute(\"msgexception\", e.getMessage());\t\t\tthrow new LibrarySystemException(e);\t\t}\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/UsuarioAction.java", "stars": "2", "class": {"name": "UsuarioAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "prepararCadastro", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String prepararCadastro(HttpServletRequest request, HttpServletResponse response) {\t\trequest.setAttribute(\"usuario\", new Usuario());\t\treturn \"restrict/user/edit.jsp\";\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/UsuarioAction.java", "stars": "2", "class": {"name": "UsuarioAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "cadastrar", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String cadastrar(HttpServletRequest request, HttpServletResponse response) {\t\ttry {\t\t\tUsuario user = new Usuario();\t\t\tuser.setNome(request.getParameter(\"nome\"));\t\t\tuser.setLogin(request.getParameter(\"login\"));\t\t\tuser.setSenha(request.getParameter(\"senha\"));\t\t\tuser.setTelefone(request.getParameter(\"telefone\"));\t\t\tuser.setEmail(request.getParameter(\"email\"));\t\t\tuserRepository.save(user);\t\t\trequest.setAttribute(\"usuarios\", userRepository.findAll());\t\t\trequest.setAttribute(\"msgSucesso\", \"Usuario cadastrado com sucesso\");\t\t\treturn \"restrict/user/list.jsp\";\t\t} catch (Exception e) {\t\t\trequest.setAttribute(\"msgexception\", e.getMessage());\t\t\tthrow new LibrarySystemException(e);\t\t}\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/UsuarioAction.java", "stars": "2", "class": {"name": "UsuarioAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "register", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String register(HttpServletRequest request, HttpServletResponse response) {\t\ttry {\t\t\tUsuario usuario = new Usuario();\t\t\tusuario.setNome(request.getParameter(\"nome\"));\t\t\tusuario.setLogin(request.getParameter(\"login\"));\t\t\tusuario.setSenha(request.getParameter(\"senha\"));\t\t\tusuario.setTelefone(request.getParameter(\"telefone\"));\t\t\tusuario.setEmail(request.getParameter(\"email\"));\t\t\tuserRepository.save(usuario);\t\t\trequest.setAttribute(\"usuarios\", userRepository.findAll());\t\t\trequest.setAttribute(\"msgSucesso\", \"Usuario cadastrado com sucesso\");\t\t\treturn new LoginAction().entrar(request, response);\t\t} catch (Exception e) {\t\t\trequest.setAttribute(\"msgexception\", e.getMessage());\t\t\tthrow new LibrarySystemException(e);\t\t}\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/UsuarioAction.java", "stars": "2", "class": {"name": "UsuarioAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "prepareRegister", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String prepareRegister(HttpServletRequest request, HttpServletResponse response) {\t\trequest.setAttribute(\"usuario\", new Usuario());\t\treturn \"public/user/register.jsp\";\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/UsuarioAction.java", "stars": "2", "class": {"name": "UsuarioAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "alterar", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String alterar(HttpServletRequest request, HttpServletResponse response) {\t\ttry {\t\t\tString idStr = request.getParameter(\"id\");\t\t\tUsuario usuario = new Usuario();\t\t\tusuario.setId(new Long(idStr == null ? \"-1\" : idStr));\t\t\tusuario.setNome(request.getParameter(\"nome\"));\t\t\tusuario.setLogin(request.getParameter(\"login\"));\t\t\tusuario.setSenha(request.getParameter(\"senha\"));\t\t\tusuario.setTelefone(request.getParameter(\"telefone\"));\t\t\tusuario.setEmail(request.getParameter(\"email\"));\t\t\tuserRepository.update(usuario);\t\t\trequest.setAttribute(\"msgSucesso\", \"Usuario alterado com sucesso\");\t\t\trequest.setAttribute(\"usuarios\", userRepository.findAll());\t\t} catch (Exception e) {\t\t\trequest.setAttribute(\"msgexception\", e.getMessage());\t\t\tthrow new LibrarySystemException(e);\t\t}\t\treturn \"restrict/user/list.jsp\";\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/UsuarioAction.java", "stars": "2", "class": {"name": "UsuarioAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "listar", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String listar(HttpServletRequest request, HttpServletResponse response) {\t\ttry {\t\t\trequest.setAttribute(\"usuarios\", userRepository.findAll());\t\t} catch (Exception e) {\t\t\trequest.setAttribute(\"msgexception\", e.getMessage());\t\t\tthrow new LibrarySystemException(e);\t\t}\t\treturn \"restrict/user/list.jsp\";\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/UsuarioAction.java", "stars": "2", "class": {"name": "UsuarioAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "listarSemLogar", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String listarSemLogar(HttpServletRequest request, HttpServletResponse response) {\t\ttry {\t\t\trequest.setAttribute(\"usuarios\", userRepository.findAll());\t\t} catch (Exception e) {\t\t\trequest.setAttribute(\"msgexception\", e.getMessage());\t\t\tthrow new LibrarySystemException(e);\t\t}\t\treturn \"publico/lista_usuario_publico.jsp\";\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/UsuarioAction.java", "stars": "2", "class": {"name": "UsuarioAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "remover", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String remover(HttpServletRequest request, HttpServletResponse response) {\t\ttry {\t\t\tString idStr = request.getParameter(\"id\");\t\t\tUsuario usuario = new Usuario();\t\t\tusuario.setId(new Long(idStr == null ? \"-1\" : idStr));\t\t\tuserRepository.remove(usuario);\t\t\trequest.setAttribute(\"usuarios\", userRepository.findAll());\t\t\trequest.setAttribute(\"msgSucesso\", \"Usuario removido com sucesso\");\t\t} catch (Exception e) {\t\t\trequest.setAttribute(\"msgexception\", e.getMessage());\t\t\tthrow new LibrarySystemException(e);\t\t}\t\treturn \"restrict/user/list.jsp\";\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/UsuarioAction.java", "stars": "2", "class": {"name": "UsuarioAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUpdate", "params": ["GuiScreenEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpdate(GuiScreenEvent event) {        if (event.getGui() instanceof GuiGameOver) {            if (autorespawn) {                mc.player.respawnPlayer();                mc.displayGuiScreen(null);                mc.player.sendChatMessage(suffix);            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/misc/DeathMessage.java", "stars": "12", "class": {"name": "DeathMessage", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategory.java", "stars": "2", "class": {"name": "PmsProductAttributeCategory", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategory.java", "stars": "2", "class": {"name": "PmsProductAttributeCategory", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategory.java", "stars": "2", "class": {"name": "PmsProductAttributeCategory", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategory.java", "stars": "2", "class": {"name": "PmsProductAttributeCategory", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getAttributeCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getAttributeCount() {        return attributeCount;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategory.java", "stars": "2", "class": {"name": "PmsProductAttributeCategory", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setAttributeCount", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAttributeCount(Integer attributeCount) {        this.attributeCount = attributeCount;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategory.java", "stars": "2", "class": {"name": "PmsProductAttributeCategory", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getParamCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getParamCount() {        return paramCount;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategory.java", "stars": "2", "class": {"name": "PmsProductAttributeCategory", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setParamCount", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setParamCount(Integer paramCount) {        this.paramCount = paramCount;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategory.java", "stars": "2", "class": {"name": "PmsProductAttributeCategory", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        StringBuilder sb = new StringBuilder();        sb.append(getClass().getSimpleName());        sb.append(\" [\");        sb.append(\"Hash = \").append(hashCode());        sb.append(\", id=\").append(id);        sb.append(\", name=\").append(name);        sb.append(\", attributeCount=\").append(attributeCount);        sb.append(\", paramCount=\").append(paramCount);        sb.append(\", serialVersionUID=\").append(serialVersionUID);        sb.append(\"]\");        return sb.toString();    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeCategory.java", "stars": "2", "class": {"name": "PmsProductAttributeCategory", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "md5", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String md5(String sourceStr) {        String result = \"\";        try {            MessageDigest md = MessageDigest.getInstance(\"MD5\");            md.update(sourceStr.getBytes());            byte b[] = md.digest();            int i;            StringBuffer buf = new StringBuffer(\"\");            for (int offset = 0; offset < b.length; offset++) {                i = b[offset];                if (i < 0)                    i += 256;                if (i < 16)                    buf.append(\"0\");                buf.append(Integer.toHexString(i));            }            result = buf.toString();        } catch (NoSuchAlgorithmException e) {            System.out.println(e);        }        return result;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/util/Md5Util.java", "stars": "1", "class": {"name": "Md5Util", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentUserLogin", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Optional<String>", "snippet": "    public static Optional<String> getCurrentUserLogin() {        SecurityContext securityContext = SecurityContextHolder.getContext();        return Optional.ofNullable(securityContext.getAuthentication())            .map(authentication -> {                if (authentication.getPrincipal() instanceof UserDetails) {                    UserDetails springSecurityUser = (UserDetails) authentication.getPrincipal();                    return springSecurityUser.getUsername();                } else if (authentication.getPrincipal() instanceof String) {                    return (String) authentication.getPrincipal();                }                return null;            });    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/security/SecurityUtils.java", "stars": "2", "class": {"name": "SecurityUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getCurrentUserJWT", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Optional<String>", "snippet": "    public static Optional<String> getCurrentUserJWT() {        SecurityContext securityContext = SecurityContextHolder.getContext();        return Optional.ofNullable(securityContext.getAuthentication())            .filter(authentication -> authentication.getCredentials() instanceof String)            .map(authentication -> (String) authentication.getCredentials());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/security/SecurityUtils.java", "stars": "2", "class": {"name": "SecurityUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isAuthenticated", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isAuthenticated() {        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        return authentication != null &&            getAuthorities(authentication).noneMatch(AuthoritiesConstants.ANONYMOUS::equals);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/security/SecurityUtils.java", "stars": "2", "class": {"name": "SecurityUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isCurrentUserInRole", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isCurrentUserInRole(String authority) {        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        return authentication != null &&            getAuthorities(authentication).anyMatch(authority::equals);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/security/SecurityUtils.java", "stars": "2", "class": {"name": "SecurityUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getAuthorities", "params": ["Authentication"], "throws": null, "modifiers": ["private", "static"], "return_type": "Stream<String>", "snippet": "    private static Stream<String> getAuthorities(Authentication authentication) {        return authentication.getAuthorities().stream()            .map(GrantedAuthority::getAuthority);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/security/SecurityUtils.java", "stars": "2", "class": {"name": "SecurityUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "verifierNom", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String verifierNom() {\t\treturn mot;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Mot.java", "stars": "4", "class": {"name": "Mot", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "verifierX", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int verifierX() {\t\treturn xPos;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Mot.java", "stars": "4", "class": {"name": "Mot", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "verifierY", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int verifierY() {\t\treturn yPos;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Mot.java", "stars": "4", "class": {"name": "Mot", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "verifierHorizontal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean verifierHorizontal() {\t\treturn horizontal;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Mot.java", "stars": "4", "class": {"name": "Mot", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "verifierPoints", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int verifierPoints() {\t\treturn points;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Mot.java", "stars": "4", "class": {"name": "Mot", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "modifierPoints", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void modifierPoints(int p) {\t\tthis.points = p;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Mot.java", "stars": "4", "class": {"name": "Mot", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLettres", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int[] getLettres() {\t\tint[] lettres = new int[this.mot.length()];\t\tfor (int i = 0; i < this.mot.length(); i++) {\t\t\tlettres[i] = (int) this.mot.charAt(i);\t\t}\t\treturn lettres;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Mot.java", "stars": "4", "class": {"name": "Mot", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t    public void onCreate(Bundle savedInstanceState) {\t        super.onCreate(savedInstanceState);\t        setContentView(R.layout.main);\t        \t        \t        rbmView = (RibbonMenuView) findViewById(R.id.ribbonMenuView1);\t        rbmView.setMenuClickCallback(this);\t        rbmView.setMenuItems(R.menu.ribbon_menu);\t        \t         getActionBar().setDisplayHomeAsUpEnabled(true);\t         \t        \t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonsampleActivity.java", "stars": "74", "class": {"name": "RibbonsampleActivity", "extends": "Activity", "implements": ["iRibbonMenuCallback"], "modifiers": ["public"]}}, {"method_name": "onOptionsItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean onOptionsItemSelected(MenuItem item) {\t\t\tint id = item.getItemId();\t\t\tif (id == android.R.id.home) {\t\t\t\t\t\t\t\trbmView.toggleMenu();\t\t\t\t\t\t\t\treturn true;\t\t\t\t\t\t} else {\t\t\t\treturn super.onOptionsItemSelected(item);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonsampleActivity.java", "stars": "74", "class": {"name": "RibbonsampleActivity", "extends": "Activity", "implements": ["iRibbonMenuCallback"], "modifiers": ["public"]}}, {"method_name": "RibbonMenuItemClick", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void RibbonMenuItemClick(int itemId) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonsampleActivity.java", "stars": "74", "class": {"name": "RibbonsampleActivity", "extends": "Activity", "implements": ["iRibbonMenuCallback"], "modifiers": ["public"]}}, {"method_name": "setMapUnderscoreToCamelCase", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMapUnderscoreToCamelCase(boolean mapUnderscoreToCamelCase) {        if (mapUnderscoreToCamelCase) {            columnMapRowMapper = new ColumnMapRowMapper() {                @Override                protected String getColumnKey(String columnName) {                    columnName = columnName.toLowerCase();                    boolean upperCase = false;                    StringBuilder sb = new StringBuilder();                    for (int i = 0; i < columnName.length(); i++) {                        char ch = columnName.charAt(i);                        if (ch == '_') {                            upperCase = true;                        } else if (upperCase) {                            sb.append(Character.toUpperCase(ch));                            upperCase = false;                        } else {                            sb.append(ch);                        }                    }                    return sb.toString();                }            };        } else {            columnMapRowMapper = new ColumnMapRowMapper();        }    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/executor/SqlExecutor.java", "stars": "13", "class": {"name": "SqlExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addKeyProvider", "params": ["KeyProvider"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addKeyProvider(KeyProvider provider) {        keyProviders.put(provider.getName(), provider);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/executor/SqlExecutor.java", "stars": "13", "class": {"name": "SqlExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["String", "SqlMode", "String", "Object", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object execute(String dataSourceName, SqlMode mode, String sql, Object[] parameters, Class<?> returnType) {        JdbcTemplate jdbcTemplate = getJdbcTemplate(dataSourceName);        printLog(dataSourceName, sql, parameters);        if (SqlMode.SELECT_LIST == mode) {            if (returnType == null || returnType == Map.class) {                return jdbcTemplate.query(sql, parameters, columnMapRowMapper);            }            return jdbcTemplate.queryForList(sql, parameters, returnType);        } else if (SqlMode.UPDATE == mode || SqlMode.INSERT == mode || SqlMode.DELETE == mode) {            int value = jdbcTemplate.update(sql, parameters);            // \u5f53\u8bbe\u7f6e\u8fd4\u56de\u503c\u662fboolean\u7c7b\u578b\u65f6,\u505a>0\u6bd4\u8f83            if (returnType == Boolean.class) {                return value > 0;            }            return value;        } else if (SqlMode.SELECT_ONE == mode) {            Collection collection;            if (returnType == null || returnType == Map.class) {                collection = jdbcTemplate.query(sql, columnMapRowMapper, parameters);            } else {                collection = jdbcTemplate.queryForList(sql, returnType, parameters);            }            return collection != null && collection.size() >= 1 ? collection.iterator().next() : null;        } else {            throw new S8Exception(\"\u6682\u65f6\u4e0d\u652f\u6301[\" + mode + \"]\u6a21\u5f0f\");        }    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/executor/SqlExecutor.java", "stars": "13", "class": {"name": "SqlExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeInsertWithPk", "params": ["SqlStatement", "RequestContext"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object executeInsertWithPk(SqlStatement statement, RequestContext requestContext) throws SQLException {        String dataSourceName = statement.getDataSourceName();        JdbcTemplate jdbcTemplate = getJdbcTemplate(dataSourceName);        Node selectKey = statement.getSelectKey();        String selectKeyType;        if (selectKey != null && (selectKeyType = DomUtils.getNodeAttributeValue(selectKey, \"type\")) != null) {            Connection connection = jdbcTemplate.getDataSource().getConnection();            Object value = null;            try {                // \u83b7\u53d6\u4e3b\u952e\u540d\u79f0                String key = DomUtils.getNodeAttributeValue(selectKey, \"key\");                Assert.isNotBlank(key, \"select-key\u6807\u7b7e\u7684key\u4e0d\u80fd\u4e3a\u7a7a\");                if (\"select\".equalsIgnoreCase(selectKeyType)) {                    SqlNode selectKeySqlNode = statement.getSelectKeySqlNode();                    // \u5224\u65ad\u6267\u884c\u65f6\u673a\u662f\u5426\u5728\u6267\u884c\u63d2\u5165\u4e4b\u524d                    boolean before = \"before\".equalsIgnoreCase(DomUtils.getNodeAttributeValue(selectKey, \"order\"));                    if (before) {                        // \u67e5\u8be2key                        value = executeSelectKey(dataSourceName, connection, selectKeySqlNode.getSql(requestContext), requestContext.getParameters());                        // \u6e05\u7a7a\u53c2\u6570                        requestContext.getParameters().clear();                        // \u5b58\u5165key                        requestContext.put(key, value);                    }                    // \u83b7\u53d6\u63d2\u5165SQL                    String insertSQL = statement.getSqlNode().getSql(requestContext);                    // \u6267\u884c\u63d2\u5165                    executeUpdate(dataSourceName, connection, insertSQL, requestContext.getParameters());                    // \u6e05\u7a7a\u53c2\u6570                    requestContext.getParameters().clear();                    if (!before) {                        value = executeSelectKey(dataSourceName, connection, selectKeySqlNode.getSql(requestContext), requestContext.getParameters());                    }                } else {                    // \u83b7\u53d6\u4e3b\u952e\u751f\u6210\u7b56\u7565                    KeyProvider keyProvider = keyProviders.get(selectKeyType);                    Assert.isNotNull(keyProvider, String.format(\"\u627e\u4e0d\u5230\u4e3b\u952e\u751f\u6210\u7b56\u7565%s\", selectKeyType));                    // \u751f\u6210\u4e3b\u952e                    value = keyProvider.getKey();                    // \u5b58\u5165RequestContext\u4e2d                    requestContext.put(key, value);                    // \u83b7\u53d6\u63d2\u5165SQL                    String insertSQL = statement.getSqlNode().getSql(requestContext);                    // \u6267\u884c\u63d2\u5165                    executeUpdate(dataSourceName, connection, insertSQL, requestContext.getParameters());                }                return value;            } finally {                // \u91ca\u653e\u8fde\u63a5                DataSourceUtils.releaseConnection(connection, jdbcTemplate.getDataSource());            }        } else {            KeyHolder keyHolder = new GeneratedKeyHolder();            String insertSQL = statement.getSqlNode().getSql(requestContext);            jdbcTemplate.update(connection -> {                PreparedStatement ps = connection.prepareStatement(insertSQL, Statement.RETURN_GENERATED_KEYS);                new ArgumentPreparedStatementSetter(requestContext.getParameters().toArray()).setValues(ps);                return ps;            }, keyHolder);            return keyHolder.getKey().longValue();        }    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/executor/SqlExecutor.java", "stars": "13", "class": {"name": "SqlExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeUpdate", "params": ["String", "Connection", "String", "List<Object>"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int executeUpdate(String dataSourceName, Connection connection, String sql, List<Object> parameters) throws SQLException {        PreparedStatement ps = null;        try {            printLog(dataSourceName, sql, parameters);            ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);            new ArgumentPreparedStatementSetter(parameters.toArray()).setValues(ps);            return ps.executeUpdate();        } finally {            JdbcUtils.closeStatement(ps);        }    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/executor/SqlExecutor.java", "stars": "13", "class": {"name": "SqlExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeSelectKey", "params": ["String", "Connection", "String", "List<Object>"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "Object", "snippet": "    private Object executeSelectKey(String dataSourceName, Connection connection, String sql, List<Object> parameters) throws SQLException {        PreparedStatement ps = null;        ResultSet rs = null;        try {            Object[] params = parameters.toArray();            ps = connection.prepareStatement(sql);            // \u6253\u5370SQL\u8bed\u53e5            printLog(dataSourceName, sql, params);            // \u8bbe\u7f6e\u53c2\u6570            setPreparedStatementParameters(ps, params);            rs = ps.executeQuery();            Assert.isTrue(rs.next(), \"\u67e5\u8be2key\u51fa\u9519\uff0c\u7ed3\u679c\u96c6\u81f3\u5c11\u5e94\u6709\u4e00\u6761\");            return rs.getObject(1);        } finally {            JdbcUtils.closeResultSet(rs);            JdbcUtils.closeStatement(ps);        }    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/executor/SqlExecutor.java", "stars": "13", "class": {"name": "SqlExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPreparedStatementParameters", "params": ["PreparedStatement", "Object"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void setPreparedStatementParameters(PreparedStatement ps, Object... parameters) throws SQLException {        ArgumentPreparedStatementSetter argumentPreparedStatementSetter = new ArgumentPreparedStatementSetter(parameters);        argumentPreparedStatementSetter.setValues(ps);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/executor/SqlExecutor.java", "stars": "13", "class": {"name": "SqlExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printLog", "params": ["String", "String", "Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void printLog(String dataSourceName, String sql, Object... parameters) {        logger.debug(\"\u6267\u884cSQL({}):{}\", dataSourceName == null ? \"default\" : dataSourceName, sql);        logger.debug(\"SQL\u53c2\u6570{}\", Arrays.toString(parameters));    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/executor/SqlExecutor.java", "stars": "13", "class": {"name": "SqlExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJdbcTemplate", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "JdbcTemplate", "snippet": "    private JdbcTemplate getJdbcTemplate(String dataSourceName) {        if (jdbcTemplates.containsKey(dataSourceName)) {            return jdbcTemplates.get(dataSourceName);        }        JdbcTemplate jdbcTemplate = new JdbcTemplate(dynamicDataSource.getDataSource(dataSourceName));        jdbcTemplates.put(dataSourceName, jdbcTemplate);        return jdbcTemplate;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/executor/SqlExecutor.java", "stars": "13", "class": {"name": "SqlExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDialect", "params": ["String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Dialect", "snippet": "    public Dialect getDialect(String dataSourceName) throws SQLException {        JdbcTemplate jdbcTemplate = getJdbcTemplate(dataSourceName);        return DialectUtils.getDialectFromUrl(jdbcTemplate.getDataSource().getConnection().getMetaData().getURL());    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/executor/SqlExecutor.java", "stars": "13", "class": {"name": "SqlExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "description", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "String", "snippet": "    public abstract String description();    //\u8ba1\u7b97\u4ef7\u683c    public abstract int calculatePrice();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/example/AbstractCake.java", "stars": "2", "class": {"name": "AbstractCake", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "calculatePrice", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "int", "snippet": "    public abstract int calculatePrice();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/example/AbstractCake.java", "stars": "2", "class": {"name": "AbstractCake", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getContents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<SqlNode>", "snippet": "  public List<SqlNode> getContents() {    return contents;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/MixedSqlNode.java", "stars": "15", "class": {"name": "MixedSqlNode", "extends": null, "implements": ["SqlNode"], "modifiers": ["public"]}}, {"method_name": "apply", "params": ["DynamicContext"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean apply(DynamicContext context) {    contents.forEach(node -> node.apply(context));    return true;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/MixedSqlNode.java", "stars": "15", "class": {"name": "MixedSqlNode", "extends": null, "implements": ["SqlNode"], "modifiers": ["public"]}}, {"method_name": "getCustomerId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getCustomerId() {        return customerId;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCustomerId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCustomerId(Integer customerId) {        this.customerId = customerId;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFirstFirstName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFirstFirstName() {        return firstFirstName;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFirstFirstName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFirstFirstName(String firstFirstName) {        this.firstFirstName = firstFirstName;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSecondFirstName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSecondFirstName() {        return secondFirstName;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSecondFirstName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSecondFirstName(String secondFirstName) {        this.secondFirstName = secondFirstName;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getThirdFirstName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getThirdFirstName() {        return thirdFirstName;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setThirdFirstName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setThirdFirstName(String thirdFirstName) {        this.thirdFirstName = thirdFirstName;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLastName() {        return lastName;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLastName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLastName(String lastName) {        this.lastName = lastName;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "geteMail", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String geteMail() {        return eMail;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "seteMail", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void seteMail(String eMail) {        this.eMail = eMail;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId1", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId1() {        return id1;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId1", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId1(Integer id1) {        this.id1 = id1;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId2", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId2() {        return id2;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId2", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId2(Integer id2) {        this.id2 = id2;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId5", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId5() {        return id5;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId5", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId5(Integer id5) {        this.id5 = id5;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId6", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId6() {        return id6;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId6", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId6(Integer id6) {        this.id6 = id6;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId7", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId7() {        return id7;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId7", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId7(Integer id7) {        this.id7 = id7;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEmailaddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEmailaddress() {        return emailaddress;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEmailaddress", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEmailaddress(String emailaddress) {        this.emailaddress = emailaddress;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFrom", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFrom() {        return from;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFrom", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFrom(String from) {        this.from = from;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isActive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isActive() {        return active;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setActive", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setActive(boolean active) {        this.active = active;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable3.java", "stars": "15", "class": {"name": "AwfulTable3", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUp() {        this.cleanAll();    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/infrastructure/database/RepositoryTest.java", "stars": "5", "class": {"name": "RepositoryTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tearDown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void tearDown() {        this.cleanAll();    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/infrastructure/database/RepositoryTest.java", "stars": "5", "class": {"name": "RepositoryTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cleanAll", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void cleanAll() {        distributionMasqueDatabaseRepository.deleteAllInBatch();    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/infrastructure/database/RepositoryTest.java", "stars": "5", "class": {"name": "RepositoryTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["C"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initialize(C applicationContext) {        log.info(\"After Application.id = \" + applicationContext.getId());    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-application/src/main/java/com/soft1851/springboot/context/AfterApplicationContextInitializer.java", "stars": "3", "class": {"name": "AfterApplicationContextInitializer", "extends": null, "implements": ["ApplicationContextInitializer", "Ordered"], "modifiers": ["public"]}}, {"method_name": "getOrder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getOrder() {        return Ordered.LOWEST_PRECEDENCE;    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-application/src/main/java/com/soft1851/springboot/context/AfterApplicationContextInitializer.java", "stars": "3", "class": {"name": "AfterApplicationContextInitializer", "extends": null, "implements": ["ApplicationContextInitializer", "Ordered"], "modifiers": ["public"]}}, {"method_name": "getPageSql", "params": ["String", "RequestContext", "long", "long"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPageSql(String sql, RequestContext context, long offset, long limit) {        context.addParameter(limit);        context.addParameter(offset);        return sql + \" limit ? offset ?\";    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/dialect/PostgreSQLDialect.java", "stars": "13", "class": {"name": "PostgreSQLDialect", "extends": null, "implements": ["Dialect"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        AbstractCake abstractCake = new Cake();        abstractCake = new CreamDecorate(abstractCake);        abstractCake = new StrawberryDecorate(abstractCake);        System.out.println(abstractCake.description() + \"\uff0c\u4ef7\u683c\u4e3a\uff1a\" + abstractCake.calculatePrice());    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/example/CakeDecorateTest.java", "stars": "2", "class": {"name": "CakeDecorateTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return this.name;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/TriggerDependencyBean.java", "stars": "18", "class": {"name": "TriggerDependencyBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(final String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/TriggerDependencyBean.java", "stars": "18", "class": {"name": "TriggerDependencyBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getType() {    return this.type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/TriggerDependencyBean.java", "stars": "18", "class": {"name": "TriggerDependencyBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setType(final String type) {    this.type = type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/TriggerDependencyBean.java", "stars": "18", "class": {"name": "TriggerDependencyBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParams", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "  public Map<String, String> getParams() {    return this.params == null ? Collections.emptyMap() : this.params;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/TriggerDependencyBean.java", "stars": "18", "class": {"name": "TriggerDependencyBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setParams", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setParams(final Map<String, String> params) {    this.params = params;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/TriggerDependencyBean.java", "stars": "18", "class": {"name": "TriggerDependencyBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"TriggerDependencyBean{\" +        \"name='\" + this.name + '\\'' +        \", type='\" + this.type + '\\'' +        \", params=\" + this.params +        '}';  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/TriggerDependencyBean.java", "stars": "18", "class": {"name": "TriggerDependencyBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testHome", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHome() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tnew TestRestTemplate().getForEntity(\"http://localhost:\" + this.port, Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementAddressActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementAddressActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testHealth", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHealth() {\t\tResponseEntity<String> entity = new TestRestTemplate().withBasicAuth(\"user\", \"password\")\t\t\t\t.getForEntity(\"http://localhost:\" + this.managementPort + \"/admin/actuator/health\", String.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).contains(\"\\\"status\\\":\\\"UP\\\"\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementAddressActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementAddressActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "asMapEntity", "params": ["ResponseEntity<Map>"], "throws": null, "modifiers": ["static"], "return_type": "ResponseEntity<Map>", "snippet": "\tstatic <K, V> ResponseEntity<Map<K, V>> asMapEntity(ResponseEntity<Map> entity) {\t\treturn (ResponseEntity) entity;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementAddressActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementAddressActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getKey() {        return key;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/KeypressEvent.java", "stars": "12", "class": {"name": "KeypressEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldDemonstrateSimpleExpectedTextWithNoLoopsOrConditionals", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldDemonstrateSimpleExpectedTextWithNoLoopsOrConditionals() throws Exception {    final String expected = \"SELECT * FROM BLOG\";    final MixedSqlNode sqlNode = mixedContents(new TextSqlNode(expected));    DynamicSqlSource source = createDynamicSqlSource(sqlNode);    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldDemonstrateMultipartExpectedTextWithNoLoopsOrConditionals", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldDemonstrateMultipartExpectedTextWithNoLoopsOrConditionals() throws Exception {    final String expected = \"SELECT * FROM BLOG WHERE ID = ?\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG\"),        new TextSqlNode(\"WHERE ID = ?\"));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldConditionallyIncludeWhere", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldConditionallyIncludeWhere() throws Exception {    final String expected = \"SELECT * FROM BLOG WHERE ID = ?\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG\"),        new IfSqlNode(mixedContents(new TextSqlNode(\"WHERE ID = ?\")), \"true\"        ));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldConditionallyExcludeWhere", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldConditionallyExcludeWhere() throws Exception {    final String expected = \"SELECT * FROM BLOG\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG\"),        new IfSqlNode(mixedContents(new TextSqlNode(\"WHERE ID = ?\")), \"false\"        ));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldConditionallyDefault", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldConditionallyDefault() throws Exception {    final String expected = \"SELECT * FROM BLOG WHERE CATEGORY = 'DEFAULT'\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG\"),        new ChooseSqlNode(new ArrayList<SqlNode>() {{          add(new IfSqlNode(mixedContents(new TextSqlNode(\"WHERE CATEGORY = ?\")), \"false\"          ));          add(new IfSqlNode(mixedContents(new TextSqlNode(\"WHERE CATEGORY = 'NONE'\")), \"false\"          ));        }}, mixedContents(new TextSqlNode(\"WHERE CATEGORY = 'DEFAULT'\"))));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldConditionallyChooseFirst", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldConditionallyChooseFirst() throws Exception {    final String expected = \"SELECT * FROM BLOG WHERE CATEGORY = ?\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG\"),        new ChooseSqlNode(new ArrayList<SqlNode>() {{          add(new IfSqlNode(mixedContents(new TextSqlNode(\"WHERE CATEGORY = ?\")), \"true\"          ));          add(new IfSqlNode(mixedContents(new TextSqlNode(\"WHERE CATEGORY = 'NONE'\")), \"false\"          ));        }}, mixedContents(new TextSqlNode(\"WHERE CATEGORY = 'DEFAULT'\"))));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldConditionallyChooseSecond", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldConditionallyChooseSecond() throws Exception {    final String expected = \"SELECT * FROM BLOG WHERE CATEGORY = 'NONE'\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG\"),        new ChooseSqlNode(new ArrayList<SqlNode>() {{          add(new IfSqlNode(mixedContents(new TextSqlNode(\"WHERE CATEGORY = ?\")), \"false\"          ));          add(new IfSqlNode(mixedContents(new TextSqlNode(\"WHERE CATEGORY = 'NONE'\")), \"true\"          ));        }}, mixedContents(new TextSqlNode(\"WHERE CATEGORY = 'DEFAULT'\"))));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldTrimWHEREInsteadOfANDForFirstCondition", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldTrimWHEREInsteadOfANDForFirstCondition() throws Exception {    final String expected = \"SELECT * FROM BLOG WHERE  ID = ?\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG\"),        new WhereSqlNode(new Configuration(),mixedContents(            new IfSqlNode(mixedContents(new TextSqlNode(\"   and ID = ?  \")), \"true\"            ),            new IfSqlNode(mixedContents(new TextSqlNode(\"   or NAME = ?  \")), \"false\"            )        )));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldTrimWHEREANDWithLFForFirstCondition", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldTrimWHEREANDWithLFForFirstCondition() throws Exception {    final String expected = \"SELECT * FROM BLOG WHERE \\n ID = ?\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG\"),        new WhereSqlNode(new Configuration(),mixedContents(            new IfSqlNode(mixedContents(new TextSqlNode(\"   and\\n ID = ?  \")), \"true\"                )            )));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldTrimWHEREANDWithCRLFForFirstCondition", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldTrimWHEREANDWithCRLFForFirstCondition() throws Exception {    final String expected = \"SELECT * FROM BLOG WHERE \\r\\n ID = ?\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG\"),        new WhereSqlNode(new Configuration(),mixedContents(            new IfSqlNode(mixedContents(new TextSqlNode(\"   and\\r\\n ID = ?  \")), \"true\"                )            )));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldTrimWHEREANDWithTABForFirstCondition", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldTrimWHEREANDWithTABForFirstCondition() throws Exception {    final String expected = \"SELECT * FROM BLOG WHERE \\t ID = ?\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG\"),        new WhereSqlNode(new Configuration(),mixedContents(            new IfSqlNode(mixedContents(new TextSqlNode(\"   and\\t ID = ?  \")), \"true\"                )            )));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldTrimWHEREORWithLFForFirstCondition", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldTrimWHEREORWithLFForFirstCondition() throws Exception {    final String expected = \"SELECT * FROM BLOG WHERE \\n ID = ?\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG\"),        new WhereSqlNode(new Configuration(),mixedContents(            new IfSqlNode(mixedContents(new TextSqlNode(\"   or\\n ID = ?  \")), \"true\"                )            )));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldTrimWHEREORWithCRLFForFirstCondition", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldTrimWHEREORWithCRLFForFirstCondition() throws Exception {    final String expected = \"SELECT * FROM BLOG WHERE \\r\\n ID = ?\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG\"),        new WhereSqlNode(new Configuration(),mixedContents(            new IfSqlNode(mixedContents(new TextSqlNode(\"   or\\r\\n ID = ?  \")), \"true\"                )            )));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldTrimWHEREORWithTABForFirstCondition", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldTrimWHEREORWithTABForFirstCondition() throws Exception {    final String expected = \"SELECT * FROM BLOG WHERE \\t ID = ?\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG\"),        new WhereSqlNode(new Configuration(),mixedContents(            new IfSqlNode(mixedContents(new TextSqlNode(\"   or\\t ID = ?  \")), \"true\"                )            )));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldTrimWHEREInsteadOfORForSecondCondition", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldTrimWHEREInsteadOfORForSecondCondition() throws Exception {    final String expected = \"SELECT * FROM BLOG WHERE  NAME = ?\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG\"),        new WhereSqlNode(new Configuration(),mixedContents(            new IfSqlNode(mixedContents(new TextSqlNode(\"   and ID = ?  \")), \"false\"            ),            new IfSqlNode(mixedContents(new TextSqlNode(\"   or NAME = ?  \")), \"true\"            )        )));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldTrimWHEREInsteadOfANDForBothConditions", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldTrimWHEREInsteadOfANDForBothConditions() throws Exception {    final String expected = \"SELECT * FROM BLOG WHERE  ID = ?   OR NAME = ?\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG\"),        new WhereSqlNode(new Configuration(),mixedContents(            new IfSqlNode(mixedContents(new TextSqlNode(\"   and ID = ?   \")), \"true\"            ),            new IfSqlNode(mixedContents(new TextSqlNode(\"OR NAME = ?  \")), \"true\"            )        )));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldTrimNoWhereClause", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldTrimNoWhereClause() throws Exception {    final String expected = \"SELECT * FROM BLOG\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG\"),        new WhereSqlNode(new Configuration(),mixedContents(            new IfSqlNode(mixedContents(new TextSqlNode(\"   and ID = ?   \")), \"false\"            ),            new IfSqlNode(mixedContents(new TextSqlNode(\"OR NAME = ?  \")), \"false\"            )        )));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldTrimSETInsteadOfCOMMAForBothConditions", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldTrimSETInsteadOfCOMMAForBothConditions() throws Exception {    final String expected = \"UPDATE BLOG SET ID = ?,  NAME = ?\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"UPDATE BLOG\"),        new SetSqlNode(new Configuration(),mixedContents(            new IfSqlNode(mixedContents(new TextSqlNode(\" ID = ?, \")), \"true\"            ),            new IfSqlNode(mixedContents(new TextSqlNode(\" NAME = ?, \")), \"true\"            )        )));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldTrimCommaAfterSET", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldTrimCommaAfterSET() throws Exception {    final String expected = \"UPDATE BLOG SET  NAME = ?\";    DynamicSqlSource source = createDynamicSqlSource(      new TextSqlNode(\"UPDATE BLOG\"),      new SetSqlNode(new Configuration(), mixedContents(        new IfSqlNode(mixedContents(new TextSqlNode(\"ID = ?\")), \"false\"),        new IfSqlNode(mixedContents(new TextSqlNode(\", NAME = ?\")), \"true\"))));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldTrimNoSetClause", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldTrimNoSetClause() throws Exception {    final String expected = \"UPDATE BLOG\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"UPDATE BLOG\"),        new SetSqlNode(new Configuration(),mixedContents(            new IfSqlNode(mixedContents(new TextSqlNode(\"   , ID = ?   \")), \"false\"            ),            new IfSqlNode(mixedContents(new TextSqlNode(\", NAME = ?  \")), \"false\"            )        )));    BoundSql boundSql = source.getBoundSql(null);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldIterateOnceForEachItemInCollection", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldIterateOnceForEachItemInCollection() throws Exception {    final HashMap<String, String[]> parameterObject = new HashMap<String, String[]>() {{      put(\"array\", new String[]{\"one\", \"two\", \"three\"});    }};    final String expected = \"SELECT * FROM BLOG WHERE ID in (  one = ? AND two = ? AND three = ? )\";    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"SELECT * FROM BLOG WHERE ID in\"),        new ForEachSqlNode(new Configuration(),mixedContents(new TextSqlNode(\"${item} = #{item}\")), \"array\", \"index\", \"item\", \"(\", \")\", \"AND\"));    BoundSql boundSql = source.getBoundSql(parameterObject);    assertEquals(expected, boundSql.getSql());    assertEquals(3, boundSql.getParameterMappings().size());    assertEquals(\"__frch_item_0\", boundSql.getParameterMappings().get(0).getProperty());    assertEquals(\"__frch_item_1\", boundSql.getParameterMappings().get(1).getProperty());    assertEquals(\"__frch_item_2\", boundSql.getParameterMappings().get(2).getProperty());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldHandleOgnlExpression", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldHandleOgnlExpression() throws Exception {    final HashMap<String, String> parameterObject = new HashMap<String, String>() {{      put(\"name\", \"Steve\");    }};    final String expected = \"Expression test: 3 / yes.\";    DynamicSqlSource source = createDynamicSqlSource(new TextSqlNode(\"Expression test: ${name.indexOf('v')} / ${name in {'Bob', 'Steve'\\\\} ? 'yes' : 'no'}.\"));    BoundSql boundSql = source.getBoundSql(parameterObject);    assertEquals(expected, boundSql.getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSkipForEachWhenCollectionIsEmpty", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldSkipForEachWhenCollectionIsEmpty() throws Exception {    final HashMap<String, Integer[]> parameterObject = new HashMap<String, Integer[]>() {{        put(\"array\", new Integer[] {});    }};    final String expected = \"SELECT * FROM BLOG\";    DynamicSqlSource source = createDynamicSqlSource(new TextSqlNode(\"SELECT * FROM BLOG\"),        new ForEachSqlNode(new Configuration(), mixedContents(            new TextSqlNode(\"#{item}\")), \"array\", null, \"item\", \"WHERE id in (\", \")\", \",\"));    BoundSql boundSql = source.getBoundSql(parameterObject);    assertEquals(expected, boundSql.getSql());    assertEquals(0, boundSql.getParameterMappings().size());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldPerformStrictMatchOnForEachVariableSubstitution", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldPerformStrictMatchOnForEachVariableSubstitution() throws Exception {    final Map<String, Object> param = new HashMap<>();    final Map<String, String> uuu = new HashMap<>();    uuu.put(\"u\", \"xyz\");    List<Bean> uuuu = new ArrayList<>();    uuuu.add(new Bean(\"bean id\"));    param.put(\"uuu\", uuu);    param.put(\"uuuu\", uuuu);    DynamicSqlSource source = createDynamicSqlSource(        new TextSqlNode(\"INSERT INTO BLOG (ID, NAME, NOTE, COMMENT) VALUES\"),        new ForEachSqlNode(new Configuration(),mixedContents(            new TextSqlNode(\"#{uuu.u}, #{u.id}, #{ u,typeHandler=org.apache.ibatis.type.StringTypeHandler},\"                + \" #{u:VARCHAR,typeHandler=org.apache.ibatis.type.StringTypeHandler}\")), \"uuuu\", \"uu\", \"u\", \"(\", \")\", \",\"));    BoundSql boundSql = source.getBoundSql(param);    assertEquals(4, boundSql.getParameterMappings().size());    assertEquals(\"uuu.u\", boundSql.getParameterMappings().get(0).getProperty());    assertEquals(\"__frch_u_0.id\", boundSql.getParameterMappings().get(1).getProperty());    assertEquals(\"__frch_u_0\", boundSql.getParameterMappings().get(2).getProperty());    assertEquals(\"__frch_u_0\", boundSql.getParameterMappings().get(3).getProperty());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "createDynamicSqlSource", "params": ["SqlNode"], "throws": ["IOException", "SQLException"], "modifiers": ["private"], "return_type": "DynamicSqlSource", "snippet": "  private DynamicSqlSource createDynamicSqlSource(SqlNode... contents) throws IOException, SQLException {    createBlogDataSource();    final String resource = \"org/apache/ibatis/builder/MapperConfig.xml\";    final Reader reader = Resources.getResourceAsReader(resource);    SqlSessionFactory sqlMapper = new SqlSessionFactoryBuilder().build(reader);    Configuration configuration = sqlMapper.getConfiguration();    MixedSqlNode sqlNode = mixedContents(contents);    return new DynamicSqlSource(configuration, sqlNode);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "mixedContents", "params": ["SqlNode"], "throws": null, "modifiers": ["private"], "return_type": "MixedSqlNode", "snippet": "  private MixedSqlNode mixedContents(SqlNode... contents) {    return new MixedSqlNode(Arrays.asList(contents));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldMapNullStringsToEmptyStrings", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldMapNullStringsToEmptyStrings() {    final String expected = \"id=${id}\";    final MixedSqlNode sqlNode = mixedContents(new TextSqlNode(expected));    final DynamicSqlSource source = new DynamicSqlSource(new Configuration(), sqlNode);    String sql = source.getBoundSql(new Bean(null)).getSql();    Assertions.assertEquals(\"id=\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "DynamicSqlSourceTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getId() {      return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "Bean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(String property) {      this.id = property;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSourceTest.java", "stars": "15", "class": {"name": "Bean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "supports", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean supports(Class<?> clazz) {\t\treturn NovoPagamentoForm.class.isAssignableFrom(clazz);\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/processadores/PagamentoValidoParaUsuarioRestauranteValidator.java", "stars": "9", "class": {"name": "PagamentoValidoParaUsuarioRestauranteValidator", "extends": null, "implements": ["Validator"], "modifiers": ["public"]}}, {"method_name": "validate", "params": ["Object", "Errors"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void validate(Object target, Errors errors) {\t\tNovoPagamentoForm form = (NovoPagamentoForm) target;\t\t\t\tUsuario logado = usuarioRepository.findByNome(form.getTokenUsuario());\t\tRestaurante restauranteEscolhido = manager.find(Restaurante.class, form.getRestauranteId());\t\t\t\tif(!logado.podePagarComForma(restauranteEscolhido,form.getTipoPagamento(),possiveisRestricoes)) {\t\t\terrors.rejectValue(null, null, null, \"essa forma de pagamento nao eh permitida\");\t\t}\t\t\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/processadores/PagamentoValidoParaUsuarioRestauranteValidator.java", "stars": "9", "class": {"name": "PagamentoValidoParaUsuarioRestauranteValidator", "extends": null, "implements": ["Validator"], "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void contextLoads() {    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/test/java/ink/boyuan/rbac_shiro/RbacShiroApplicationTests.java", "stars": "2", "class": {"name": "RbacShiroApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        canvas.drawCircle(300, 300, 200, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson2/Practice01LinearGradientView.java", "stars": "2", "class": {"name": "Practice01LinearGradientView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(InternationalspacestationApplication.class, args);    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/InternationalspacestationApplication.java", "stars": "1", "class": {"name": "InternationalspacestationApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": ["Context", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void start(Context context, String url) {        if (url == null || \"\".equals(url)) {            return;        }        Intent intent = new Intent(context, BrowserActivity.class);        intent.putExtra(IntentKey.URL, url);        context.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "BrowserActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshListener"], "modifiers": ["public", "final"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.activity_browser;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "BrowserActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshListener"], "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        // \u8bbe\u7f6e\u7f51\u9875\u5237\u65b0\u76d1\u542c        mRefreshLayout.setOnRefreshListener(this);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "BrowserActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshListener"], "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        showLoading();        mBrowserView.setBrowserViewClient(new MyBrowserViewClient());        mBrowserView.setBrowserChromeClient(new MyBrowserChromeClient(mBrowserView));        String url = getString(IntentKey.URL);        mBrowserView.loadUrl(url);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "BrowserActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshListener"], "modifiers": ["public", "final"]}}, {"method_name": "getHintLayout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HintLayout", "snippet": "    public HintLayout getHintLayout() {        return mHintLayout;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "BrowserActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshListener"], "modifiers": ["public", "final"]}}, {"method_name": "onLeftClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLeftClick(View v) {        finish();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "BrowserActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshListener"], "modifiers": ["public", "final"]}}, {"method_name": "onKeyDown", "params": ["int", "KeyEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onKeyDown(int keyCode, KeyEvent event) {        if (keyCode == KeyEvent.KEYCODE_BACK && mBrowserView.canGoBack()) {            // \u540e\u9000\u7f51\u9875\u5e76\u4e14\u62e6\u622a\u8be5\u4e8b\u4ef6            mBrowserView.goBack();            return true;        }        return super.onKeyDown(keyCode, event);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "BrowserActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshListener"], "modifiers": ["public", "final"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        mBrowserView.onResume();        super.onResume();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "BrowserActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshListener"], "modifiers": ["public", "final"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        mBrowserView.onPause();        super.onPause();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "BrowserActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshListener"], "modifiers": ["public", "final"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        mBrowserView.onDestroy();        super.onDestroy();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "BrowserActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshListener"], "modifiers": ["public", "final"]}}, {"method_name": "reload", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void reload() {        mBrowserView.reload();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "BrowserActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshListener"], "modifiers": ["public", "final"]}}, {"method_name": "onRefresh", "params": ["RefreshLayout"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRefresh(@NonNull RefreshLayout refreshLayout) {        mBrowserView.reload();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "BrowserActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshListener"], "modifiers": ["public", "final"]}}, {"method_name": "onReceivedError", "params": ["WebView", "int", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {            // \u8fd9\u91cc\u4e3a\u4ec0\u4e48\u8981\u7528\u5ef6\u8fdf\u5462\uff1f\u56e0\u4e3a\u52a0\u8f7d\u51fa\u9519\u4e4b\u540e\u4f1a\u5148\u8c03\u7528 onReceivedError \u518d\u8c03\u7528 onPageFinished            post(() -> showError(v -> reload()));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "MyBrowserViewClient", "extends": "BrowserView", "implements": null, "modifiers": ["private"]}}, {"method_name": "onPageStarted", "params": ["WebView", "String", "Bitmap"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onPageStarted(WebView view, String url, Bitmap favicon) {            mProgressBar.setVisibility(View.VISIBLE);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "MyBrowserViewClient", "extends": "BrowserView", "implements": null, "modifiers": ["private"]}}, {"method_name": "onPageFinished", "params": ["WebView", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onPageFinished(WebView view, String url) {            mProgressBar.setVisibility(View.GONE);            mRefreshLayout.finishRefresh();            showComplete();        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "MyBrowserViewClient", "extends": "BrowserView", "implements": null, "modifiers": ["private"]}}, {"method_name": "onReceivedTitle", "params": ["WebView", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onReceivedTitle(WebView view, String title) {            if (title != null) {                setTitle(title);            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "MyBrowserChromeClient", "extends": "BrowserView", "implements": null, "modifiers": ["private"]}}, {"method_name": "onProgressChanged", "params": ["WebView", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onProgressChanged(WebView view, int newProgress) {            mProgressBar.setProgress(newProgress);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/BrowserActivity.java", "stars": "1", "class": {"name": "MyBrowserChromeClient", "extends": "BrowserView", "implements": null, "modifiers": ["private"]}}, {"method_name": "test", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void test(){        int ret = xxlJobRegistryDao.registryUpdate(\"g1\", \"k1\", \"v1\", new Date());        if (ret < 1) {            ret = xxlJobRegistryDao.registrySave(\"g1\", \"k1\", \"v1\", new Date());        }        List<XxlJobRegistry> list = xxlJobRegistryDao.findAll(1, new Date());        int ret2 = xxlJobRegistryDao.removeDead(Arrays.asList(1));    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/test/java/com/avon/rga/dao/XxlJobRegistryDaoTest.java", "stars": "1", "class": {"name": "XxlJobRegistryDaoTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws InterruptedException {\t\t\t//\tsetUp(\"chrome\", JIRAVM_URL);\t\tSystem.setProperty(ChromeDriverService.CHROME_DRIVER_SILENT_OUTPUT_PROPERTY, \"true\");\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"drivers/chromedriver.exe\");\t\tWebDriver driver = new ChromeDriver();\t\tString url = \"http://jiravm.centralus.cloudapp.azure.com:8081/index.html\";\t\tdriver.get(url);\t\t\t\t\t\tdriver.findElement(By.linkText(\"Alerts & Modals\")).click();\t\tdriver.findElement(By.linkText(\"Window Popup Modal\")).click();\t\t\t\tString mainPageHandle=driver.getWindowHandle();\t\t\t\tSystem.out.println(mainPageHandle);\t\t\t\tdriver.findElement(By.linkText(\"Follow On Instagram\")).click();\t\t\t\tThread.sleep(5000);\t\tSet<String> handles=driver.getWindowHandles();\t\t//\t\tint i=1;//\t\tfor(String handle:handles) {//\t\t\tSystem.out.println(\"Window \"+i+\" : \"+handle);//\t\t\ti++;//\t\t}\t\t\t\tIterator<String> handleIt=handles.iterator();\t\tString window1=handleIt.next();\t\tString window2=handleIt.next();\t\t\t\tdriver.switchTo().window(window2);\t\t\t\tString expTittle=\"Syntax Technologies (@syntaxtechs) \u2022 Instagram photos and videos\";\t\t\t\tString actTittle=driver.getTitle();\t\t\t\tSystem.out.println(actTittle);\t\t\t\tif(expTittle.equals(actTittle)) {\t\t\tSystem.out.println(\"Popup window tittle test PASS\");\t\t}else {\t\t\tSystem.out.println(\"Popup window tittle test FAIL\");\t\t}\t\t\t\tThread.sleep(3000);\t\t\t\tdriver.quit();\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class5/WindowsHandling.java", "stars": "3", "class": {"name": "WindowsHandling", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ClientReleaseVersionParser", "snippet": "    public ClientReleaseVersionParser getParser() {        return (ClientReleaseVersionParser) this.parser;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/incoming/client/ClientReleaseVersionEvent.java", "stars": "2", "class": {"name": "ClientReleaseVersionEvent", "extends": "MessageEvent", "implements": ["IMessageEvent"], "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onMeasure (int p0, int p1)\t{\t\tn_onMeasure (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SizedItemContentView.java", "stars": "2", "class": {"name": "SizedItemContentView", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onMeasure (int p0, int p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SizedItemContentView.java", "stars": "2", "class": {"name": "SizedItemContentView", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SizedItemContentView.java", "stars": "2", "class": {"name": "SizedItemContentView", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SizedItemContentView.java", "stars": "2", "class": {"name": "SizedItemContentView", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "createFromJson", "params": ["Object"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "SlaAlertAction", "snippet": "  public static SlaAlertAction createFromJson(final Object obj) throws Exception {    return createFromJson((HashMap<String, Object>) obj);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaAlertAction.java", "stars": "18", "class": {"name": "SlaAlertAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "createFromJson", "params": ["HashMap<String,Object>"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "SlaAlertAction", "snippet": "  public static SlaAlertAction createFromJson(final HashMap<String, Object> obj)      throws Exception {    final Map<String, Object> jsonObj = (HashMap<String, Object>) obj;    if (!jsonObj.get(\"type\").equals(type)) {      throw new Exception(\"Cannot create action of \" + type + \" from \"          + jsonObj.get(\"type\"));    }    final String actionId = (String) jsonObj.get(\"actionId\");    final SlaOption slaOption = SlaOption.fromObject(jsonObj.get(\"slaOption\"));    final int execId = Integer.valueOf((String) jsonObj.get(\"execId\"));    return new SlaAlertAction(actionId, slaOption, execId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaAlertAction.java", "stars": "18", "class": {"name": "SlaAlertAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return this.actionId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaAlertAction.java", "stars": "18", "class": {"name": "SlaAlertAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getType() {    return type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaAlertAction.java", "stars": "18", "class": {"name": "SlaAlertAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "fromJson", "params": ["Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "TriggerAction", "snippet": "  public TriggerAction fromJson(final Object obj) throws Exception {    return createFromJson(obj);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaAlertAction.java", "stars": "18", "class": {"name": "SlaAlertAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "toJson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object toJson() {    final Map<String, Object> jsonObj = new HashMap<>();    jsonObj.put(\"actionId\", this.actionId);    jsonObj.put(\"type\", type);    jsonObj.put(\"slaOption\", this.slaOption.toObject());    jsonObj.put(\"execId\", String.valueOf(this.execId));    return jsonObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaAlertAction.java", "stars": "18", "class": {"name": "SlaAlertAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "doAction", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void doAction() throws Exception {    logger.info(\"Alerting on sla failure.\");    final Map<String, Object> alert = this.slaOption.getInfo();    if (alert.containsKey(SlaOption.ALERT_TYPE)) {      final String alertType = (String) alert.get(SlaOption.ALERT_TYPE);      final Alerter alerter = this.alerters.get(alertType);      if (alerter != null) {        try {          final ExecutableFlow flow = this.executorLoader.fetchExecutableFlow(this.execId);//          alerter.alertOnSla(this.slaOption, SlaOption.createSlaMessage(this.slaOption, flow));          // FIXME Job flow event alerts, relying on third-party services.          alerter.alertOnSla(this.slaOption, flow);        } catch (final Exception e) {          e.printStackTrace();          logger.error(\"Failed to alert by \" + alertType);        }      } else {        logger.error(\"Alerter type \" + alertType            + \" doesn't exist. Failed to alert.\");      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaAlertAction.java", "stars": "18", "class": {"name": "SlaAlertAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "setContext", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setContext(final Map<String, Object> context) {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaAlertAction.java", "stars": "18", "class": {"name": "SlaAlertAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getDescription() {    return type + \" for \" + this.execId + \" with \" + this.slaOption.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/SlaAlertAction.java", "stars": "18", "class": {"name": "SlaAlertAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "getDBType", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "String", "snippet": "  public abstract String getDBType();  public abstract boolean allowsOnDuplicateKey();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/AzkabanDataSource.java", "stars": "18", "class": {"name": "AzkabanDataSource", "extends": "BasicDataSource", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "allowsOnDuplicateKey", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "boolean", "snippet": "  public abstract boolean allowsOnDuplicateKey();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/AzkabanDataSource.java", "stars": "18", "class": {"name": "AzkabanDataSource", "extends": "BasicDataSource", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "filter", "params": ["ServerWebExchange", "WebFilterChain"], "throws": null, "modifiers": ["public"], "return_type": "Mono<Void>", "snippet": "    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {        HttpHeaders headers = exchange.getRequest().getHeaders();        if(headers.containsKey(AuthConstraints.SCRIPT_ACCOUNT_NAME) &&                headers.containsKey(AuthConstraints.SCRIPT_PWD_NAME)){            String userName = String.valueOf(Objects.requireNonNull(headers.get(AuthConstraints.SCRIPT_ACCOUNT_NAME)).get(0));            String pwd = String.valueOf(Objects.requireNonNull(headers.get(AuthConstraints.SCRIPT_PWD_NAME)).get(0));            LOG.info(\"start to validate script auth, user:\" + userName +\", pwd:*****\");            try {                String keyContent = FileCopyUtils.                        copyToString(new BufferedReader(new InputStreamReader(new FileInputStream(secretKeyPath))));                if(StringUtils.isNotBlank(keyContent)){                    pwd = AESUtils.decrypt(pwd, Base64.getDecoder().decode(keyContent));                }                String umPwd = pwd.substring(userName.length());                //TODO Use Feign to do login                boolean loginResult = false;                if(loginResult) {                    AuthTokenBean tokenBean = new AuthTokenBean();                    tokenBean.getHeaders().put(AuthConstraints.X_AUTH_ID, userName);                    String token = tokenBuilder.build(tokenBean);                    ServerHttpRequest request = exchange.getRequest()                            .mutate().header(\"Cookie\", AuthConstraints.DEFAULT_SSO_COOKIE + \"=\" + token)                            .header(\"X-Requested-With\", \"XMLHttpRequest\").build();                    LOG.info(\"Add sso cookie to script request\");                    return chain.filter(exchange.mutate().request(request).build());                }            }catch(Exception e){                LOG.info(\"Basic authenticate failed in script request, username: \" + userName + \", message: \" + e.getMessage(), e);            }            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);            return Mono.empty();        }        return chain.filter(exchange);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/gateway/src/main/java/com/webank/wedatasphere/exchangis/gateway/auth/pwd/filters/ScriptAuthPwdFilter.java", "stars": "23", "class": {"name": "ScriptAuthPwdFilter", "extends": null, "implements": ["WebFilter"], "modifiers": ["public"]}}, {"method_name": "suppliedVar", "params": ["Supplier<Object>"], "throws": null, "modifiers": ["public", "static"], "return_type": "RequestExtractor<Object>", "snippet": "  public static RequestExtractor<Object> suppliedVar(final Supplier<Object> textSupplier) {    return new SupplierExtractor<>(checkNotNull(textSupplier, \"Template variable supplier should not be null or empty\"));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/moco/src/main/java/com/cognifide/aem/stubs/moco/MocoUtils.java", "stars": "8", "class": {"name": "MocoUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isOpen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isOpen() {    return status == CursorStatus.OPEN;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java", "stars": "15", "class": {"name": "DefaultCursor", "extends": null, "implements": ["Cursor"], "modifiers": ["public"]}}, {"method_name": "isConsumed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isConsumed() {    return status == CursorStatus.CONSUMED;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java", "stars": "15", "class": {"name": "DefaultCursor", "extends": null, "implements": ["Cursor"], "modifiers": ["public"]}}, {"method_name": "getCurrentIndex", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getCurrentIndex() {    return rowBounds.getOffset() + cursorIterator.iteratorIndex;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java", "stars": "15", "class": {"name": "DefaultCursor", "extends": null, "implements": ["Cursor"], "modifiers": ["public"]}}, {"method_name": "iterator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Iterator<T>", "snippet": "  public Iterator<T> iterator() {    if (iteratorRetrieved) {      throw new IllegalStateException(\"Cannot open more than one iterator on a Cursor\");    }    if (isClosed()) {      throw new IllegalStateException(\"A Cursor is already closed.\");    }    iteratorRetrieved = true;    return cursorIterator;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java", "stars": "15", "class": {"name": "DefaultCursor", "extends": null, "implements": ["Cursor"], "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void close() {    if (isClosed()) {      return;    }    ResultSet rs = rsw.getResultSet();    try {      if (rs != null) {        rs.close();      }    } catch (SQLException e) {      // ignore    } finally {      status = CursorStatus.CLOSED;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java", "stars": "15", "class": {"name": "DefaultCursor", "extends": null, "implements": ["Cursor"], "modifiers": ["public"]}}, {"method_name": "fetchNextUsingRowBound", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "T", "snippet": "  protected T fetchNextUsingRowBound() {    T result = fetchNextObjectFromDatabase();    while (objectWrapperResultHandler.fetched && indexWithRowBound < rowBounds.getOffset()) {      result = fetchNextObjectFromDatabase();    }    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java", "stars": "15", "class": {"name": "DefaultCursor", "extends": null, "implements": ["Cursor"], "modifiers": ["public"]}}, {"method_name": "fetchNextObjectFromDatabase", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "T", "snippet": "  protected T fetchNextObjectFromDatabase() {    if (isClosed()) {      return null;    }    try {      objectWrapperResultHandler.fetched = false;      status = CursorStatus.OPEN;      if (!rsw.getResultSet().isClosed()) {        resultSetHandler.handleRowValues(rsw, resultMap, objectWrapperResultHandler, RowBounds.DEFAULT, null);      }    } catch (SQLException e) {      throw new RuntimeException(e);    }    T next = objectWrapperResultHandler.result;    if (objectWrapperResultHandler.fetched) {      indexWithRowBound++;    }    // No more object or limit reached    if (!objectWrapperResultHandler.fetched || getReadItemsCount() == rowBounds.getOffset() + rowBounds.getLimit()) {      close();      status = CursorStatus.CONSUMED;    }    objectWrapperResultHandler.result = null;    return next;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java", "stars": "15", "class": {"name": "DefaultCursor", "extends": null, "implements": ["Cursor"], "modifiers": ["public"]}}, {"method_name": "isClosed", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isClosed() {    return status == CursorStatus.CLOSED || status == CursorStatus.CONSUMED;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java", "stars": "15", "class": {"name": "DefaultCursor", "extends": null, "implements": ["Cursor"], "modifiers": ["public"]}}, {"method_name": "getReadItemsCount", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int getReadItemsCount() {    return indexWithRowBound + 1;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java", "stars": "15", "class": {"name": "DefaultCursor", "extends": null, "implements": ["Cursor"], "modifiers": ["public"]}}, {"method_name": "handleResult", "params": ["ResultContext<T>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handleResult(ResultContext<? extends T> context) {      this.result = context.getResultObject();      context.stop();      fetched = true;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java", "stars": "15", "class": {"name": "ObjectWrapperResultHandler", "extends": null, "implements": ["ResultHandler"], "modifiers": ["static", "protected"]}}, {"method_name": "hasNext", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasNext() {      if (!objectWrapperResultHandler.fetched) {        object = fetchNextUsingRowBound();      }      return objectWrapperResultHandler.fetched;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java", "stars": "15", "class": {"name": "CursorIterator", "extends": null, "implements": ["Iterator"], "modifiers": ["protected"]}}, {"method_name": "next", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T next() {      // Fill next with object fetched from hasNext()      T next = object;      if (!objectWrapperResultHandler.fetched) {        next = fetchNextUsingRowBound();      }      if (objectWrapperResultHandler.fetched) {        objectWrapperResultHandler.fetched = false;        object = null;        iteratorIndex++;        return next;      }      throw new NoSuchElementException();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java", "stars": "15", "class": {"name": "CursorIterator", "extends": null, "implements": ["Iterator"], "modifiers": ["protected"]}}, {"method_name": "remove", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void remove() {      throw new UnsupportedOperationException(\"Cannot remove element from Cursor\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java", "stars": "15", "class": {"name": "CursorIterator", "extends": null, "implements": ["Iterator"], "modifiers": ["protected"]}}, {"method_name": "write", "params": ["WriteData"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void write(WriteData data) {        if (outStream != null) {            try {                outStream.write(data.value);                if (observer != null) {                    posterDispatcher.post(observer, MethodInfoGenerator.onWrite(device, data.tag, data.value, true));                }                observable.notifyObservers(MethodInfoGenerator.onWrite(device, data.tag, data.value, true));                            } catch (IOException e) {                if (observer != null) {                    posterDispatcher.post(observer, MethodInfoGenerator.onWrite(device, data.tag, data.value, false));                }                observable.notifyObservers(MethodInfoGenerator.onWrite(device, data.tag, data.value, false));            }        } else {            if (observer != null) {                posterDispatcher.post(observer, MethodInfoGenerator.onWrite(device, data.tag, data.value, false));            }            observable.notifyObservers(MethodInfoGenerator.onWrite(device, data.tag, data.value, false));        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/SocketConnection.java", "stars": "3", "class": {"name": "SocketConnection", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "close", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void close() {        if (socket != null) {            try {                socket.close();                socket = null;            } catch (Exception e) {                if (BTManager.isDebugMode) {                    Log.e(BTManager.DEBUG_TAG, \"Could not close the client socket: \" + e.getMessage());                }            }        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/SocketConnection.java", "stars": "3", "class": {"name": "SocketConnection", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isConnected", "params": [], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "    boolean isConnected() {        return socket != null && socket.isConnected();    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/SocketConnection.java", "stars": "3", "class": {"name": "SocketConnection", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "RecyclerView", "snippet": "    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,                                                      int viewType) {        View v = LayoutInflater.from(context).inflate(R.layout.list_video_item_normal, parent, false);        final RecyclerView.ViewHolder holder = new RecyclerItemNormalHolder(context, v);        return holder;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/RecyclerNormalAdapter.java", "stars": "2", "class": {"name": "RecyclerNormalAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["RecyclerView", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(final RecyclerView.ViewHolder holder, int position) {        RecyclerItemNormalHolder recyclerItemViewHolder = (RecyclerItemNormalHolder) holder;        recyclerItemViewHolder.setRecyclerBaseAdapter(this);        recyclerItemViewHolder.onBind(position, itemDataList.get(position));    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/RecyclerNormalAdapter.java", "stars": "2", "class": {"name": "RecyclerNormalAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return itemDataList.size();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/RecyclerNormalAdapter.java", "stars": "2", "class": {"name": "RecyclerNormalAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemViewType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemViewType(int position) {        return 1;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/RecyclerNormalAdapter.java", "stars": "2", "class": {"name": "RecyclerNormalAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "setListData", "params": ["List<VideoModel>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setListData(List<VideoModel> data) {        itemDataList = data;        notifyDataSetChanged();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/RecyclerNormalAdapter.java", "stars": "2", "class": {"name": "RecyclerNormalAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u4f7f\u7528\u963f\u91cc\u5df4\u5df4\u63a8\u8350\u7684\u521b\u5efa\u7ebf\u7a0b\u6c60\u7684\u65b9\u5f0f        //\u901a\u8fc7ThreadPoolExecutor\u6784\u9020\u51fd\u6570\u81ea\u5b9a\u4e49\u53c2\u6570\u521b\u5efa        ThreadPoolExecutor executor = new ThreadPoolExecutor(                CORE_POOL_SIZE,                MAX_POOL_SIZE,                KEEP_ALIVE_TIME,                TimeUnit.SECONDS,                new ArrayBlockingQueue<>(QUEUE_CAPACITY),                new ThreadPoolExecutor.CallerRunsPolicy());        for (int i = 0; i < 10; i++) {            //\u521b\u5efaWorkerThread\u5bf9\u8c61\uff08WorkerThread\u7c7b\u5b9e\u73b0\u4e86Runnable \u63a5\u53e3\uff09            Runnable worker = new MyRunnable(\"\" + i);            //\u6267\u884cRunnable            executor.execute(worker);        }        //\u7ec8\u6b62\u7ebf\u7a0b\u6c60        executor.shutdown();        while (!executor.isTerminated()) {        }        System.out.println(\"Finished all threads\");    }", "url": "https://raw.githubusercontent.com/Snailclimb/JavaGuide/master/code/java/ThreadPoolExecutorDemo/src/threadPoolExecutor/ThreadPoolExecutorDemo.java", "stars": "78246", "class": {"name": "ThreadPoolExecutorDemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "apply", "params": ["DynamicContext"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean apply(DynamicContext context) {//   final Object value = OgnlCache.getValue(expression, context.getBindings());//  context.bind(name, value);    return true;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/VarDeclSqlNode.java", "stars": "15", "class": {"name": "VarDeclSqlNode", "extends": null, "implements": ["SqlNode"], "modifiers": ["public"]}}, {"method_name": "createDataSourceInternal", "params": ["HttpDataSource"], "throws": null, "modifiers": ["protected"], "return_type": "DefaultHttpDataSource", "snippet": "  protected DefaultHttpDataSource createDataSourceInternal(      HttpDataSource.RequestProperties defaultRequestProperties) {    DefaultHttpDataSource dataSource =        new DefaultHttpDataSource(            userAgent,            /* contentTypePredicate= */ null,            connectTimeoutMillis,            readTimeoutMillis,            allowCrossProtocolRedirects,            defaultRequestProperties);    if (listener != null) {      dataSource.addTransferListener(listener);    }    return dataSource;  }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSourceFactory.java", "stars": "2", "class": {"name": "DefaultHttpDataSourceFactory", "extends": "BaseFactory", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "info", "params": ["Object", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void info(Object message, Throwable t) {        log.info(message, t);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/log/AzkabanAppjointLog.java", "stars": "18", "class": {"name": "AzkabanAppjointLog", "extends": "LinkisJobExecutionLog", "implements": null, "modifiers": ["public"]}}, {"method_name": "warn", "params": ["Object", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void warn(Object message, Throwable t) {        log.warn(message, t);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/log/AzkabanAppjointLog.java", "stars": "18", "class": {"name": "AzkabanAppjointLog", "extends": "LinkisJobExecutionLog", "implements": null, "modifiers": ["public"]}}, {"method_name": "error", "params": ["Object", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void error(Object message, Throwable t) {        log.error(message, t);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/log/AzkabanAppjointLog.java", "stars": "18", "class": {"name": "AzkabanAppjointLog", "extends": "LinkisJobExecutionLog", "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        log.info(\"---\");        scheduledThreadPoolExecutor.scheduleAtFixedRate(handlerDispatcher, 0,10,TimeUnit.SECONDS);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/logic/ScheduledThread.java", "stars": "1", "class": {"name": "ScheduledThread", "extends": "DefaultThreadFactory", "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "SourceInfo", "snippet": "    public SourceInfo get(String url) {        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/sourcestorage/NoSourceInfoStorage.java", "stars": "2", "class": {"name": "NoSourceInfoStorage", "extends": null, "implements": ["SourceInfoStorage"], "modifiers": ["public"]}}, {"method_name": "put", "params": ["String", "SourceInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void put(String url, SourceInfo sourceInfo) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/sourcestorage/NoSourceInfoStorage.java", "stars": "2", "class": {"name": "NoSourceInfoStorage", "extends": null, "implements": ["SourceInfoStorage"], "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/sourcestorage/NoSourceInfoStorage.java", "stars": "2", "class": {"name": "NoSourceInfoStorage", "extends": null, "implements": ["SourceInfoStorage"], "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CrackedMudBricksBlock.java", "stars": "2", "class": {"name": "CrackedMudBricksBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CrackedMudBricksBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getConnection", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Connection", "snippet": "    public static Connection getConnection() {        Connection conn = null;        try {            String user = \"c##headal\";             String pw = \"r4e3w2q1\";            String url = \"jdbc:oracle:thin:@222.118.75.165:1521:XE\";                            Class.forName(\"oracle.jdbc.driver.OracleDriver\");                    conn = DriverManager.getConnection(url, user, pw);                            System.out.println(\"Database\uc5d0 \uc5f0\uacb0\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\\n\");                        } catch (ClassNotFoundException cnfe) {            System.out.println(\"DB \ub4dc\ub77c\uc774\ubc84 \ub85c\ub529 \uc2e4\ud328 :\"+cnfe.toString());        } catch (SQLException sqle) {            System.out.println(\"DB \uc811\uc18d\uc2e4\ud328 : \"+sqle.toString());        } catch (Exception e) {            System.out.println(\"Unkonwn error\");            e.printStackTrace();        }        return conn;         }", "url": "https://raw.githubusercontent.com/lilllung09/OwlWordList/master/src/application/DBConnection.java", "stars": "2", "class": {"name": "DBConnection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAttachedToWindow ()\t{\t\tn_onAttachedToWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewRenderer.java", "stars": "2", "class": {"name": "TableViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onAttachedToWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAttachedToWindow ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewRenderer.java", "stars": "2", "class": {"name": "TableViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewRenderer.java", "stars": "2", "class": {"name": "TableViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TableViewRenderer.java", "stars": "2", "class": {"name": "TableViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "setmultiplePackages", "params": ["ArrayList<Holiday_Package>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setmultiplePackages(ArrayList<Holiday_Package> packages)    {        this.packages = packages;    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/RecyclerViewAdapter.java", "stars": "2", "class": {"name": "RecyclerViewAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "RecyclerViewAdapter", "snippet": "    public RecyclerViewAdapter.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType){        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item,parent,false);        return new ViewHolder(v);    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/RecyclerViewAdapter.java", "stars": "2", "class": {"name": "RecyclerViewAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["RecyclerViewAdapter", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(@NonNull final RecyclerViewAdapter.ViewHolder holder , int position) {        holder.bind(position);        holder.itemView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                AppCompatActivity activity = (AppCompatActivity)v.getContext();                activity.getSupportFragmentManager().beginTransaction().                        replace(R.id.frame_layout,package_detail_view.newInstance(holder.p_id.getText().toString()),\"package_detail_view\").                        addToBackStack(null).commit();                Log.w(\"item clicked\",holder.p_id.getText().toString());            }        });    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/RecyclerViewAdapter.java", "stars": "2", "class": {"name": "RecyclerViewAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount()    {        return packages.size();    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/RecyclerViewAdapter.java", "stars": "2", "class": {"name": "RecyclerViewAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "bind", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void bind(int pos)        {            Holiday_Package pk = packages.get(pos);            p_id.setText(pk.p_id);            location_name.setText(pk.location);            String ct=String.valueOf(pk.cost);            cost.setText(\"Rs. \"+ct);            start_place.setText(pk.starting_place);            int temp=pk.total_count-pk.count;            String t = String.valueOf(temp);            String l = \"Available : \"+t;            available.setText(l);            Picasso.with(context).load(\"http://\"+pk.img_url).into(img_url);        }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/RecyclerViewAdapter.java", "stars": "2", "class": {"name": "ViewHolder", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTime", "params": ["String"], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String getTime(String format) {        //we use string builder for efficiency        StringBuilder time = new StringBuilder();        String aux;        if (format.equalsIgnoreCase(\"hh:mm:ss,ms\")) {            // this type of format:  01:02:22,501 (used in .SRT)            int h, m, s, ms;            h = mseconds / 3600000;            aux = String.valueOf(h);            if (aux.length() == 1) time.append('0');            time.append(aux);            time.append(':');            m = (mseconds / 60000) % 60;            aux = String.valueOf(m);            if (aux.length() == 1) time.append('0');            time.append(aux);            time.append(':');            s = (mseconds / 1000) % 60;            aux = String.valueOf(s);            if (aux.length() == 1) time.append('0');            time.append(aux);            time.append(',');            ms = mseconds % 1000;            aux = String.valueOf(ms);            if (aux.length() == 1) time.append(\"00\");            else if (aux.length() == 2) time.append('0');            time.append(aux);        } else if (format.equalsIgnoreCase(\"hh:mm:ss.ms\")) {            // this type of format:  01:02:22.501 (used in .SRT)            int h, m, s, ms;            h = mseconds / 3600000;            aux = String.valueOf(h);            if (aux.length() == 1) time.append('0');            time.append(aux);            time.append(':');            m = (mseconds / 60000) % 60;            aux = String.valueOf(m);            if (aux.length() == 1) time.append('0');            time.append(aux);            time.append(':');            s = (mseconds / 1000) % 60;            aux = String.valueOf(s);            if (aux.length() == 1) time.append('0');            time.append(aux);            time.append('.');            ms = mseconds % 1000;            aux = String.valueOf(ms);            if (aux.length() == 1) time.append(\"00\");            else if (aux.length() == 2) time.append('0');            time.append(aux);        } else if (format.equalsIgnoreCase(\"h:mm:ss.cs\")) {            // this type of format:  1:02:22.51 (used in .ASS/.SSA)            int h, m, s, cs;            h = mseconds / 3600000;            aux = String.valueOf(h);            if (aux.length() == 1) time.append('0');            time.append(aux);            time.append(':');            m = (mseconds / 60000) % 60;            aux = String.valueOf(m);            if (aux.length() == 1) time.append('0');            time.append(aux);            time.append(':');            s = (mseconds / 1000) % 60;            aux = String.valueOf(s);            if (aux.length() == 1) time.append('0');            time.append(aux);            time.append('.');            cs = (mseconds / 10) % 100;            aux = String.valueOf(cs);            if (aux.length() == 1) time.append('0');            time.append(aux);        } else if (format.startsWith(\"hhmmssff/\")) {            //this format is used in EBU's STL            int h, m, s, f;            float fps;            String[] args = format.split(\"/\");            fps = Float.parseFloat(args[1]);            //now we concatenate time            h = mseconds / 3600000;            aux = String.valueOf(h);            if (aux.length() == 1) time.append('0');            time.append(aux);            m = (mseconds / 60000) % 60;            aux = String.valueOf(m);            if (aux.length() == 1) time.append('0');            time.append(aux);            s = (mseconds / 1000) % 60;            aux = String.valueOf(s);            if (aux.length() == 1) time.append('0');            time.append(aux);            f = (mseconds % 1000) * (int) fps / 1000;            aux = String.valueOf(f);            if (aux.length() == 1) time.append('0');            time.append(aux);        } else if (format.startsWith(\"h:m:s:f/\")) {            //this format is used in EBU's STL            int h, m, s, f;            float fps;            String[] args = format.split(\"/\");            fps = Float.parseFloat(args[1]);            //now we concatenate time            h = mseconds / 3600000;            aux = String.valueOf(h);            //if (aux.length()==1) time.append('0');            time.append(aux);            time.append(':');            m = (mseconds / 60000) % 60;            aux = String.valueOf(m);            //if (aux.length()==1) time.append('0');            time.append(aux);            time.append(':');            s = (mseconds / 1000) % 60;            aux = String.valueOf(s);            //if (aux.length()==1) time.append('0');            time.append(aux);            time.append(':');            f = (mseconds % 1000) * (int) fps / 1000;            aux = String.valueOf(f);            //if (aux.length()==1) time.append('0');            time.append(aux);        } else if (format.startsWith(\"hh:mm:ss:ff/\")) {            //this format is used in SCC            int h, m, s, f;            float fps;            String[] args = format.split(\"/\");            fps = Float.parseFloat(args[1]);            //now we concatenate time            h = mseconds / 3600000;            aux = String.valueOf(h);            if (aux.length() == 1) time.append('0');            time.append(aux);            time.append(':');            m = (mseconds / 60000) % 60;            aux = String.valueOf(m);            if (aux.length() == 1) time.append('0');            time.append(aux);            time.append(':');            s = (mseconds / 1000) % 60;            aux = String.valueOf(s);            if (aux.length() == 1) time.append('0');            time.append(aux);            time.append(':');            f = (mseconds % 1000) * (int) fps / 1000;            aux = String.valueOf(f);            if (aux.length() == 1) time.append('0');            time.append(aux);        }        return time.toString();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/Time.java", "stars": "4", "class": {"name": "Time", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMilliseconds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMilliseconds() {        return mseconds;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/Time.java", "stars": "4", "class": {"name": "Time", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        Eatablempl e = new Eatablempl();        useEatable(e);        useEatable(new Eatablempl(){            @Override            public void eat() {                System.out.println(\"\u4e00\u5929\u4e00\u82f9\u679c\uff0c\u533b\u751f\u8fdc\u79bb\u6211\");            }        });        useEatable( () -> {            System.out.println(\"\u4e00\u5929\u4e00\u82f9\u679c\uff0c\u533b\u751f\u8fdc\u79bb\u6211\");        });    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/cc1021/Lambda/EatableDemo.java", "stars": "2", "class": {"name": "EatableDemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "useEatable", "params": ["Eatable"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void useEatable(Eatable e){        e.eat();    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/cc1021/Lambda/EatableDemo.java", "stars": "2", "class": {"name": "EatableDemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void setUp() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/generictypes/Config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/generictypes/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/generictypes/GenericTypesTest.java", "stars": "15", "class": {"name": "GenericTypesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testShouldGetAListOfMaps", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testShouldGetAListOfMaps() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Group group = mapper.getGroup();      Assertions.assertNotNull(group.getOwner());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/generictypes/GenericTypesTest.java", "stars": "15", "class": {"name": "GenericTypesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getLat", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLat() {        return lat;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLat", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLat(String lat) {        this.lat = lat;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLon", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLon() {        return lon;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLon", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLon(String lon) {        this.lon = lon;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCountryName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCountryName() {        return countryName;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCountryName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCountryName(String countryName) {        if(countryName == null){            this.countryName = EX_TERYTORY;        }        else        this.countryName = countryName;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDstOffset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getDstOffset() {        return dstOffset;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDstOffset", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDstOffset(Long dstOffset) {        if(dstOffset == 0 && countryName.equals(EX_TERYTORY)){            this.dstOffset = Long.valueOf((long) (Double.valueOf(lon) / 15));        }        else            this.dstOffset = dstOffset;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSunriseUTC", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalTime", "snippet": "    public LocalTime getSunriseUTC() {        return sunriseUTC;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSunriseUTC", "params": ["LocalTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSunriseUTC(LocalTime sunriseUTC) {        this.sunriseUTC = sunriseUTC;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSunriseUTC", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSunriseUTC(String sunrise) {        this.sunriseUTC = LocalTime.parse(sunrise, DateTimeFormatter.ofPattern(\"h:mm:ss a\"));        setSunrise(sunriseUTC);    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSunsetUTC", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalTime", "snippet": "    public LocalTime getSunsetUTC() {        return sunsetUTC;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSunsetUTC", "params": ["LocalTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSunsetUTC(LocalTime sunsetUTC) {        this.sunsetUTC = sunsetUTC;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSunsetUTC", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSunsetUTC(String sunset) {        this.sunsetUTC = LocalTime.parse(sunset, DateTimeFormatter.ofPattern(\"h:mm:ss a\"));        setSunset(sunsetUTC);    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSunrise", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalTime", "snippet": "    public LocalTime getSunrise() {        return sunrise;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSunrise", "params": ["LocalTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSunrise(LocalTime sunrise) {        this.sunrise = sunrise.plusHours(getDstOffset());    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSunset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalTime", "snippet": "    public LocalTime getSunset() {        return sunset;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSunset", "params": ["LocalTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSunset(LocalTime sunset) {        this.sunset = sunset.plusHours(getDstOffset());    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLocalTimeISS", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalTime", "snippet": "    public LocalTime getLocalTimeISS() {        return localTimeISS;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLocalTimeISS", "params": ["LocalTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLocalTimeISS(LocalTime localTimeISS) {        this.localTimeISS = localTimeISS;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"IssData{\" +                \"lat='\" + lat + '\\'' +                \", lon='\" + lon + '\\'' +                \", countryName='\" + countryName + '\\'' +                \", dstOffset=\" + dstOffset +                \", sunriseUTC=\" + sunriseUTC +                \", sunsetUTC=\" + sunsetUTC +                \", sunrise=\" + sunrise +                \", sunset=\" + sunset +                \", localTimeISS=\" + localTimeISS +                '}';    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssData.java", "stars": "1", "class": {"name": "IssData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        /**         *  \u5b8c\u6210\u6dfb\u52a0\u64cd\u4f5c\uff0c\u7ed9 student \u8868\u6dfb\u52a0\u4e00\u6761\u8bb0\u5f55         */        Connection conn = null;        PreparedStatement pstmt = null;        try {            //1\u3001\u83b7\u53d6\u8fde\u63a5            conn = JDBCUtils.getConnection();            //2\u3001\u5b9a\u4e49sql            String sql = \"insert into student values(null, ?, ?)\";            //3\u3001\u83b7\u53d6pstmt\u5bf9\u8c61            pstmt = conn.prepareStatement(sql);            //4\u3001\u7ed9 \uff1f\u8d4b\u503c            pstmt.setString(1, \"ddddd\");            pstmt.setInt(2, 2);            //5\u3001\u6267\u884csql            int count = pstmt.executeUpdate();            System.out.println(count);        } catch (SQLException throwables) {            throwables.printStackTrace();        } finally {            JDBCUtils.close(pstmt, conn);        }    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/datasource/druid/DruidDemo2.java", "stars": "2", "class": {"name": "DruidDemo2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getMessage() {    return message;  }", "url": "https://raw.githubusercontent.com/bezkoder/spring-boot-upload-multiple-files/master/src/main/java/com/bezkoder/spring/files/uploadmultiple/model/ResponseMessage.java", "stars": "2", "class": {"name": "ResponseMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMessage(String message) {    this.message = message;  }", "url": "https://raw.githubusercontent.com/bezkoder/spring-boot-upload-multiple-files/master/src/main/java/com/bezkoder/spring/files/uploadmultiple/model/ResponseMessage.java", "stars": "2", "class": {"name": "ResponseMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "LdapConnector", "snippet": "    public static LdapConnector getInstance(String url, String baseDn){        return connectorMap.computeIfAbsent(url + baseDn, key -> new LdapConnector(url, baseDn));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/ldap/LdapConnector.java", "stars": "23", "class": {"name": "LdapConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": ["Properties"], "throws": null, "modifiers": ["public", "static"], "return_type": "LdapConnector", "snippet": "    public static LdapConnector getInstance(Properties properties){        String url = String.valueOf(properties.getOrDefault(URL_PROP_NAME, \"\"));        String baseDn = String.valueOf(properties.getOrDefault(BASE_DN_PROP_NAME, \"\"));        return connectorMap.computeIfAbsent(url + baseDn, key -> new LdapConnector(url, baseDn));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/ldap/LdapConnector.java", "stars": "23", "class": {"name": "LdapConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "authenticate", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean authenticate(String userName, String password){        LdapConnection ldapConnection = null;        try {            ldapConnection = pool.borrowObject();            ldapConnection.reconnect(userName, password);            return true;        } catch (Exception e) {            if(!(e instanceof AuthenticationException) && null != ldapConnection){                try {                    pool.invalidateObject(ldapConnection);                } catch (Exception ex) {                    //Ignore                }            }        } finally {            if(null != ldapConnection){                try {                    pool.returnObject(ldapConnection);                } catch (Exception e) {                    //Ignore                }            }        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/ldap/LdapConnector.java", "stars": "23", "class": {"name": "LdapConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tOOtestUser u = new OOtestUser();\t\t\t\tSystem.out.println(u.num);\t\tSystem.out.println(u.name);\t\tSystem.out.println(u.addr);\t\t\t\tu.num = 001;\t\tu.name = \"\u738b\u741b\";\t\tu.addr = new OOtestAddress();\t\t//OOtestAddress a = new OOtestAddress();\t\t//u.addr = a;    \u6b64\u4e24\u884c\u4e0e\u4e0a\u4e00\u884c\u4f5c\u7528\u76f8\u540c\t\t\t\tSystem.out.println(u.name + \"\u5c45\u4f4f\u5728\" + u.addr.city + \"\u5e02\");\t\tSystem.out.println(u.addr.city + \"\u5e02\u7684\" + u.addr.street + \"\u8857\u9053\");\t\tSystem.out.println(\"\u90ae\u653f\u7f16\u7801\u662f\" + u.addr.zipcode);\t\t\t\tu.addr.city = \"\u6986\u6797\";\t\t//a.city = \"\u6986\u6797\";    \u4e0e\u4e0a\u884c\u4ee3\u7801\u4f5c\u7528\u4e00\u6837\t\tu.addr.street = \"\u822a\u5b87\u8def\";\t\tu.addr.zipcode = \"719200\";\t\t\t\tSystem.out.println(u.name + \"\u5c45\u4f4f\u5728\" + u.addr.city + \"\u57ce\u5e02\");\t\tSystem.out.println(u.addr.city + \"\u57ce\u5e02\u7684\" + u.addr.street + \"\u8857\u9053\");\t\tSystem.out.println(\"\u90ae\u653f\u7f16\u7801\u662f\" + u.addr.zipcode);\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/OOtest01.java", "stars": "2", "class": {"name": "OOtest01", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "transformPage", "params": ["View", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void transformPage(@NonNull View page, float position) {        ViewPager viewPager;        if (page.getParent() instanceof ViewPager) {            viewPager = ((ViewPager) page.getParent());        } else {            return;        }        /*         * \u95ee\u98981\uff1a\u8c03\u7528\u5237\u65b0\u540e\uff0c\u5982\u679c\u6570\u636e\u6709\u4f4d\u7f6e\u66f4\u65b0\u4f1a\u7acb\u9a6c\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u6b64\u65f6\u8fd8\u672a\u8c03\u7528layout\u65b9\u6cd5\uff0c\u6240\u4ee5\u5f53\u524dpage\u7684left\u4f4d\u7f6e\u4e0d\u4e00\u5b9a         * \u4ee3\u8868\u6700\u7ec8layout\u4f4d\u7f6e\uff1b         * \u89e3\u51b3\u65b9\u6848\uff1a\u5224\u65ad\u8be5\u65b9\u6cd5\u6267\u884c\u65f6\u662f\u5426\u5904\u4e8e\u5237\u65b0\u4e2d\uff0c\u5982\u679c\u5904\u4e8e\u5237\u65b0\uff0c\u6839\u636epage\u771f\u6b63\u7684\u6570\u636e\u4f4d\u7f6e\u5f97\u51fa\u5bf9\u5e94\u7684position         * \u95ee\u98982\uff1apage\u8fd8\u672a\u88ab\u6d4b\u91cf\u5e03\u5c40\u65f6\uff0cposition\u503c\u9519\u8bef         * \u89e3\u51b3\u65b9\u6848\uff1a\u6839\u636epage\u771f\u6b63\u7684\u6570\u636e\u4f4d\u7f6e\u5f97\u51fa\u5bf9\u5e94\u7684position         * \u95ee\u98983\uff1a\u4f7f\u7528'paddingLeft' + 'clipPadding=false'\u540e\uff08\u5b9e\u73b0\u663e\u793a\u591a\u9875\uff09\uff0c\u6e90\u7801\u8fd4\u56de\u7684position\u5728\u8ba1\u7b97\u65f6\u672a\u8003\u8651paddingLeft         * \u89e3\u51b3\u65b9\u6848\uff1a\u52a0\u5165paddingLeft\uff0c\u91cd\u65b0\u8ba1\u7b97position         */        // \u6570\u636e\u5237\u65b0\u3001\u586b\u5145\u65b0page\u7684\u65f6\u5019\uff0c\u8981\u5224\u65adpage\u771f\u6b63\u7684\u4f4d\u7f6e\u624d\u80fd\u5f97\u5230\u6b63\u786e\u7684position        boolean dataSetChanging = mPagerAdapter.isDataSetChanging();        boolean requirePagePosition = dataSetChanging || viewPager.isLayoutRequested();        if (requirePagePosition) {            int currentItem = viewPager.getCurrentItem();            int pageViewIndex = mPagerAdapter.getPageViewPosition(page);            GraceLog.d(\"transformPage() requirePagePosition: currentItem = [\"                    + currentItem + \"], pageViewIndex = [\" + pageViewIndex + \"]\");            if (currentItem == pageViewIndex) {                position = 0;            } else {                position = pageViewIndex - currentItem;            }        } else {            position = getPositionConsiderPadding(viewPager, page);        }        GraceLog.d(\"transformPage() called with: page = [\" + page + \"], position = [\" + position + \"]\");        transformPageWithCorrectPosition(page, position);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GracePageTransformer.java", "stars": "331", "class": {"name": "GracePageTransformer", "extends": null, "implements": ["ViewPager"], "modifiers": ["public", "abstract"]}}, {"method_name": "getPositionConsiderPadding", "params": ["ViewPager", "View"], "throws": null, "modifiers": ["private"], "return_type": "float", "snippet": "    private float getPositionConsiderPadding(ViewPager viewPager, View page) {        // padding\u5f71\u54cd\u4e86position\uff0c\u81ea\u5df1\u751f\u6210position        int clientWidth = viewPager.getMeasuredWidth() - viewPager.getPaddingLeft() - viewPager.getPaddingRight();        return (float) (page.getLeft() - viewPager.getScrollX() - viewPager.getPaddingLeft()) / clientWidth;    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GracePageTransformer.java", "stars": "331", "class": {"name": "GracePageTransformer", "extends": null, "implements": ["ViewPager"], "modifiers": ["public", "abstract"]}}, {"method_name": "transformPageWithCorrectPosition", "params": ["View", "float"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void transformPageWithCorrectPosition(@NonNull View page, float position);}", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GracePageTransformer.java", "stars": "331", "class": {"name": "GracePageTransformer", "extends": null, "implements": ["ViewPager"], "modifiers": ["public", "abstract"]}}, {"method_name": "latWithoutLon_shouldReturnFalse", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void latWithoutLon_shouldReturnFalse() {        GardenFieldFilterCriteria gardenFieldFilterCriteria = new GardenFieldFilterCriteria(            new LocationFilterCriteria(LATITUDE, null, null), null, null, null, null, null,            null, null, null, null, null, null, null);        assertThat(gardenFieldFilterCriteriaValidator.isValid(gardenFieldFilterCriteria)).isNotEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/validator/GardenfieldFilterCriteraValidatorTest.java", "stars": "2", "class": {"name": "GardenfieldFilterCriteraValidatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "longWithoutLat_shouldReturnFalse", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void longWithoutLat_shouldReturnFalse() {        GardenFieldFilterCriteria gardenFieldFilterCriteria = new GardenFieldFilterCriteria(            new LocationFilterCriteria(null, LONGITUDE, null), null, null, null, null, null,            null, null, null, null, null, null, null);        assertThat(gardenFieldFilterCriteriaValidator.isValid(gardenFieldFilterCriteria)).isNotEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/validator/GardenfieldFilterCriteraValidatorTest.java", "stars": "2", "class": {"name": "GardenfieldFilterCriteraValidatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "maxPriceNegative_shouldReturnFalse", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void maxPriceNegative_shouldReturnFalse() {        GardenFieldFilterCriteria gardenFieldFilterCriteria = new GardenFieldFilterCriteria(            new LocationFilterCriteria(null, null, null), null, -10.0, null, null,            null, null, null, null, null, null, null, null);        assertThat(gardenFieldFilterCriteriaValidator.isValid(gardenFieldFilterCriteria)).isNotEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/validator/GardenfieldFilterCriteraValidatorTest.java", "stars": "2", "class": {"name": "GardenfieldFilterCriteraValidatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "minPriceNegative_shouldReturnFalse", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void minPriceNegative_shouldReturnFalse() {        GardenFieldFilterCriteria gardenFieldFilterCriteria = new GardenFieldFilterCriteria(            new LocationFilterCriteria(null, null, null), -10.0, null, null, null,            null, null, null, null, null, null, null, null);        assertThat(gardenFieldFilterCriteriaValidator.isValid(gardenFieldFilterCriteria)).isNotEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/validator/GardenfieldFilterCriteraValidatorTest.java", "stars": "2", "class": {"name": "GardenfieldFilterCriteraValidatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sizeUpperBoundLowerThanSizeLowerBound_shouldReturnFalse", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sizeUpperBoundLowerThanSizeLowerBound_shouldReturnFalse() {        GardenFieldFilterCriteria gardenFieldFilterCriteria = new GardenFieldFilterCriteria(            new LocationFilterCriteria(null, null, null), null, null, 10.0, 9.0, null,            null, null, null, null, null, null, null);        assertThat(gardenFieldFilterCriteriaValidator.isValid(gardenFieldFilterCriteria)).isNotEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/validator/GardenfieldFilterCriteraValidatorTest.java", "stars": "2", "class": {"name": "GardenfieldFilterCriteraValidatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "leasingTimeFromAfterLeasingTimeTo_shouldReturnFalse", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void leasingTimeFromAfterLeasingTimeTo_shouldReturnFalse() {        GardenFieldFilterCriteria gardenFieldFilterCriteria = new GardenFieldFilterCriteria(            new LocationFilterCriteria(null, null, null), null, null, 10.0, null, null,            LEASING_TIME_TO, LEASING_TIME_FROM, null, null, null, null, null);        assertThat(gardenFieldFilterCriteriaValidator.isValid(gardenFieldFilterCriteria)).isNotEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/validator/GardenfieldFilterCriteraValidatorTest.java", "stars": "2", "class": {"name": "GardenfieldFilterCriteraValidatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "allNull_shouldReturnTrue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void allNull_shouldReturnTrue() {        GardenFieldFilterCriteria gardenFieldFilterCriteria = new GardenFieldFilterCriteria(            new LocationFilterCriteria(null, null, null), null, null, 10.0, null,            null, null, null, null, null, null, null, null);        assertThat(gardenFieldFilterCriteriaValidator.isValid(gardenFieldFilterCriteria)).isEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/validator/GardenfieldFilterCriteraValidatorTest.java", "stars": "2", "class": {"name": "GardenfieldFilterCriteraValidatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "randomValues_shouldReturnTrue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void randomValues_shouldReturnTrue() {        GardenFieldFilterCriteria gardenFieldFilterCriteria = new GardenFieldFilterCriteria(            new LocationFilterCriteria(LATITUDE, LONGITUDE, 1), null, PRICE_PER_M2, 10.0, 15.0, false,            LEASING_TIME_FROM, LEASING_TIME_TO, null, null, null, true, null);        assertThat(gardenFieldFilterCriteriaValidator.isValid(gardenFieldFilterCriteria)).isEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/validator/GardenfieldFilterCriteraValidatorTest.java", "stars": "2", "class": {"name": "GardenfieldFilterCriteraValidatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTimezone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTimezone() {        return timezone;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTimezone", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTimezone(String timezone) {        this.timezone = timezone;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTimezoneOffset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getTimezoneOffset() {        return timezoneOffset;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTimezoneOffset", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTimezoneOffset(Integer timezoneOffset) {        this.timezoneOffset = timezoneOffset;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDate() {        return date;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDate(String date) {        this.date = date;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDateTime() {        return dateTime;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDateTime", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDateTime(String dateTime) {        this.dateTime = dateTime;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDateTimeTxt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDateTimeTxt() {        return dateTimeTxt;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDateTimeTxt", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDateTimeTxt(String dateTimeTxt) {        this.dateTimeTxt = dateTimeTxt;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDateTimeWti", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDateTimeWti() {        return dateTimeWti;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDateTimeWti", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDateTimeWti(String dateTimeWti) {        this.dateTimeWti = dateTimeWti;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDateTimeYmd", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDateTimeYmd() {        return dateTimeYmd;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDateTimeYmd", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDateTimeYmd(String dateTimeYmd) {        this.dateTimeYmd = dateTimeYmd;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDateTimeUnix", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double getDateTimeUnix() {        return dateTimeUnix;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDateTimeUnix", "params": ["Double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDateTimeUnix(Double dateTimeUnix) {        this.dateTimeUnix = dateTimeUnix;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTime24", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTime24() {        return time24;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTime24", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTime24(String time24) {        this.time24 = time24;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTime12", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTime12() {        return time12;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTime12", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTime12(String time12) {        this.time12 = time12;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWeek", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getWeek() {        return week;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setWeek", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWeek(String week) {        this.week = week;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMonth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMonth() {        return month;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMonth", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMonth(String month) {        this.month = month;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getYear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getYear() {        return year;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setYear", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setYear(String year) {        this.year = year;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getYearAbbr", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getYearAbbr() {        return yearAbbr;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setYearAbbr", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setYearAbbr(String yearAbbr) {        this.yearAbbr = yearAbbr;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIsDst", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean getIsDst() {        return isDst;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIsDst", "params": ["Boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIsDst(Boolean isDst) {        this.isDst = isDst;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDstSavings", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getDstSavings() {        return dstSavings;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDstSavings", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDstSavings(Integer dstSavings) {        this.dstSavings = dstSavings;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAdditionalProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> getAdditionalProperties() {        return this.additionalProperties;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAdditionalProperty", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAdditionalProperty(String name, Object value) {        this.additionalProperties.put(name, value);    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"TimeISS{\" +                \"timezone='\" + timezone + '\\'' +                \", timezoneOffset=\" + timezoneOffset +                \", date='\" + date + '\\'' +                \", dateTime='\" + dateTime + '\\'' +                \", dateTimeTxt='\" + dateTimeTxt + '\\'' +                \", dateTimeWti='\" + dateTimeWti + '\\'' +                \", dateTimeYmd='\" + dateTimeYmd + '\\'' +                \", dateTimeUnix=\" + dateTimeUnix +                \", time24='\" + time24 + '\\'' +                \", time12='\" + time12 + '\\'' +                \", week='\" + week + '\\'' +                \", month='\" + month + '\\'' +                \", year='\" + year + '\\'' +                \", yearAbbr='\" + yearAbbr + '\\'' +                \", isDst=\" + isDst +                \", dstSavings=\" + dstSavings +                \", additionalProperties=\" + additionalProperties +                '}';    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/TimeISS.java", "stars": "1", "class": {"name": "TimeISS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": ["Movie"], "throws": null, "modifiers": ["public", "static"], "return_type": "MovieDetailFragment", "snippet": "    public static MovieDetailFragment newInstance(Movie movie) {        sMovie = movie;        return new MovieDetailFragment();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MovieDetailFragment.java", "stars": "4", "class": {"name": "MovieDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        MobileButterApplication.getAppContext()                .getComponent()                .inject(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MovieDetailFragment.java", "stars": "4", "class": {"name": "MovieDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        mRoot = inflater.inflate(R.layout.fragment_moviedetail, container, false);        if (VersionUtils.isJellyBean() && container != null) {            mRoot.setMinimumHeight(container.getMinimumHeight());        }        ButterKnife.bind(this, mRoot);        if (sMovie != null) {            if (!VersionUtils.isJellyBean()) {                mPlayButton.setBackgroundDrawable(PixelUtils.changeDrawableColor(mPlayButton.getContext(), R.drawable.play_button_circle, sMovie.color));            } else {                mPlayButton.setBackground(PixelUtils.changeDrawableColor(mPlayButton.getContext(), R.drawable.play_button_circle, sMovie.color));            }            mTitle.setText(sMovie.title);            if (!sMovie.rating.equals(\"-1\")) {                Double rating = Double.parseDouble(sMovie.rating);                mRating.setProgress(rating.intValue());                mRating.setContentDescription(\"Rating: \" + rating.intValue() + \" out of 10\");                mRating.setVisibility(View.VISIBLE);            } else {                mRating.setVisibility(View.GONE);            }            String metaDataStr = sMovie.year;            if (!TextUtils.isEmpty(sMovie.runtime)) {                metaDataStr += \" \u2022 \";                metaDataStr += sMovie.runtime + \" \" + getString(R.string.minutes);            }            if (!TextUtils.isEmpty(sMovie.genre)) {                metaDataStr += \" \u2022 \";                metaDataStr += sMovie.genre;            }            mMeta.setText(metaDataStr);            if (!TextUtils.isEmpty(sMovie.synopsis)) {                mSynopsis.setText(sMovie.synopsis);                mSynopsis.post(new Runnable() {                    @Override                    public void run() {                        boolean ellipsized = false;                        Layout layout = mSynopsis.getLayout();                        if (layout == null) return;                        int lines = layout.getLineCount();                        if (lines > 0) {                            int ellipsisCount = layout.getEllipsisCount(lines - 1);                            if (ellipsisCount > 0) {                                ellipsized = true;                            }                        }                        mReadMore.setVisibility(ellipsized ? View.VISIBLE : View.GONE);                    }                });            } else {                mSynopsis.setClickable(false);                mReadMore.setVisibility(View.GONE);            }            mWatchTrailer.setVisibility(sMovie.trailer == null || sMovie.trailer.isEmpty() ? View.GONE : View.VISIBLE);            mSubtitles.setFragmentManager(getFragmentManager());            mQuality.setFragmentManager(getFragmentManager());            mSubtitles.setTitle(R.string.subtitles);            mQuality.setTitle(R.string.quality);            mSubtitles.setText(R.string.loading_subs);            mSubtitles.setClickable(false);            if (providerManager.hasCurrentSubsProvider()) {                providerManager.getCurrentSubsProvider().getList(sMovie, new SubsProvider.Callback() {                    @Override                    public void onSuccess(Map<String, String> subtitles) {                        if (!mAttached) return;                        if (subtitles == null) {                            ThreadUtils.runOnUiThread(new Runnable() {                                @Override                                public void run() {                                    mSubtitles.setText(R.string.no_subs_available);                                }                            });                            return;                        }                        sMovie.subtitles = subtitles;                        String[] languages = subtitles.keySet().toArray(new String[subtitles.size()]);                        Arrays.sort(languages);                        final String[] adapterLanguages = new String[languages.length + 1];                        adapterLanguages[0] = \"no-subs\";                        System.arraycopy(languages, 0, adapterLanguages, 1, languages.length);                        String[] readableNames = new String[adapterLanguages.length];                        for (int i = 0; i < readableNames.length; i++) {                            String language = adapterLanguages[i];                            if (language.equals(\"no-subs\")) {                                readableNames[i] = getString(R.string.no_subs);                            } else {                                Locale locale = LocaleUtils.toLocale(language);                                readableNames[i] = locale.getDisplayName(locale);                            }                        }                        mSubtitles.setListener(new OptionSelector.SelectorListener() {                            @Override                            public void onSelectionChanged(int position, String value) {                                onSubtitleLanguageSelected(adapterLanguages[position]);                            }                        });                        mSubtitles.setData(readableNames);                        ThreadUtils.runOnUiThread(new Runnable() {                            @Override                            public void run() {                                mSubtitles.setClickable(true);                            }                        });                        String defaultSubtitle = PrefUtils.get(mSubtitles.getContext(), Prefs.SUBTITLE_DEFAULT, null);                        if (subtitles.containsKey(defaultSubtitle)) {                            onSubtitleLanguageSelected(defaultSubtitle);                            mSubtitles.setDefault(Arrays.asList(adapterLanguages).indexOf(defaultSubtitle));                        } else {                            onSubtitleLanguageSelected(\"no-subs\");                            mSubtitles.setDefault(Arrays.asList(adapterLanguages).indexOf(\"no-subs\"));                        }                    }                    @Override                    public void onFailure(Exception e) {                        mSubtitles.setData(new String[0]);                        ThreadUtils.runOnUiThread(() -> {                            mSubtitles.setError(\"Could not load subtitles!\", e.getMessage());                            mSubtitles.setClickable(false);                        });                    }                });            } else {                mSubtitles.setClickable(false);                mSubtitles.setText(R.string.no_subs_available);            }            if (sMovie.torrents.size() > 0) {                final String[] qualities = sMovie.torrents.get(\"en\").keySet().toArray(new String[sMovie.torrents.size()]);                SortUtils.sortQualities(qualities);                mQuality.setData(qualities);                mQuality.setListener(new OptionSelector.SelectorListener() {                    @Override                    public void onSelectionChanged(int position, String value) {                        mSelectedQuality = value;                        renderHealth();                        updateMagnet();                    }                });                String quality = DefaultQuality.get(mActivity, Arrays.asList(qualities));                int qualityIndex = Arrays.asList(qualities).indexOf(quality);                if (qualityIndex == -1) {                    qualityIndex = 0;                    quality = qualities[0];                }                mSelectedQuality = quality;                mQuality.setText(mSelectedQuality);                mQuality.setDefault(qualityIndex);                renderHealth();                updateMagnet();            }            if (mCoverImage != null) {                Picasso.get().load(sMovie.image).into(mCoverImage);            }        }        return mRoot;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MovieDetailFragment.java", "stars": "4", "class": {"name": "MovieDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttach", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAttach(Context context) {        super.onAttach(context);        mAttached = true;        if (context instanceof FragmentListener)            mCallback = (FragmentListener) context;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MovieDetailFragment.java", "stars": "4", "class": {"name": "MovieDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetach", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDetach() {        super.onDetach();        mAttached = false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MovieDetailFragment.java", "stars": "4", "class": {"name": "MovieDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "renderHealth", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void renderHealth() {        if (mHealth.getVisibility() == View.GONE) {            mHealth.setVisibility(View.VISIBLE);        }        TorrentHealth health = TorrentHealth.calculate(sMovie.torrents.get(\"en\").get(mSelectedQuality).getSeeds(), sMovie.torrents.get(\"en\").get(mSelectedQuality).getPeers());        mHealth.setImageResource(health.getImageResource());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MovieDetailFragment.java", "stars": "4", "class": {"name": "MovieDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateMagnet", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateMagnet() {        if (mMagnet == null) {            mMagnet = new Magnet(mActivity, sMovie.torrents.get(\"en\").get(mSelectedQuality).getUrl());        }        mMagnet.setUrl(sMovie.torrents.get(\"en\").get(mSelectedQuality).getUrl());        if (!mMagnet.canOpen()) {            mOpenMagnet.setVisibility(View.GONE);        } else {            mOpenMagnet.setVisibility(View.VISIBLE);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MovieDetailFragment.java", "stars": "4", "class": {"name": "MovieDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "openReadMore", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void openReadMore(View v) {        if (getFragmentManager().findFragmentByTag(\"overlay_fragment\") != null)            return;        SynopsisDialogFragment synopsisDialogFragment = new SynopsisDialogFragment();        Bundle b = new Bundle();        b.putString(\"text\", sMovie.synopsis);        synopsisDialogFragment.setArguments(b);        synopsisDialogFragment.show(getFragmentManager(), \"overlay_fragment\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MovieDetailFragment.java", "stars": "4", "class": {"name": "MovieDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "openTrailer", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void openTrailer(View v) {        if (!youTubeManager.isYouTubeUrl(sMovie.trailer)) {            VideoPlayerActivity.startActivity(mActivity, new StreamInfo(sMovie, null, null, null, null, sMovie.trailer));        } else {            String id = youTubeManager.getYouTubeVideoId(sMovie.trailer);            Intent appIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"vnd.youtube:\" + id));            try {                startActivity(appIntent);            } catch (ActivityNotFoundException ex) {                TrailerPlayerActivity.startActivity(mActivity, sMovie.trailer, sMovie);            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MovieDetailFragment.java", "stars": "4", "class": {"name": "MovieDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "play", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void play() {        String streamUrl = sMovie.torrents.get(\"en\").get(mSelectedQuality).getUrl();        StreamInfo streamInfo = new StreamInfo(sMovie, streamUrl, mSelectedSubtitleLanguage, mSelectedQuality);        mCallback.playStream(streamInfo);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MovieDetailFragment.java", "stars": "4", "class": {"name": "MovieDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "openMagnet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void openMagnet() {        mMagnet.open(mActivity);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MovieDetailFragment.java", "stars": "4", "class": {"name": "MovieDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "clickHealth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clickHealth() {        int seeds = sMovie.torrents.get(\"en\").get(mSelectedQuality).getSeeds();        int peers = sMovie.torrents.get(\"en\").get(mSelectedQuality).getPeers();        TorrentHealth health = TorrentHealth.calculate(seeds, peers);        final Snackbar snackbar = Snackbar.make(mRoot, getString(R.string.health_info, getString(health.getStringResource()), seeds, peers), Snackbar.LENGTH_LONG);        snackbar.setAction(R.string.close, new View.OnClickListener() {            @Override            public void onClick(View v) {                snackbar.dismiss();            }        });        snackbar.show();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MovieDetailFragment.java", "stars": "4", "class": {"name": "MovieDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSubtitleLanguageSelected", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onSubtitleLanguageSelected(String language) {        mSelectedSubtitleLanguage = language;        if (!language.equals(\"no-subs\")) {            final Locale locale = LocaleUtils.toLocale(language);            ThreadUtils.runOnUiThread(new Runnable() {                @Override                public void run() {                    mSubtitles.setText(StringUtils.uppercaseFirst(locale.getDisplayName(locale)));                }            });        } else {            ThreadUtils.runOnUiThread(new Runnable() {                @Override                public void run() {                    mSubtitles.setText(R.string.no_subs);                }            });        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MovieDetailFragment.java", "stars": "4", "class": {"name": "MovieDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "salvar", "params": ["Cliente"], "throws": null, "modifiers": ["public"], "return_type": "Cliente", "snippet": "\tpublic Cliente salvar(Cliente cliente) {\t\tEntityManager em = JPAUtil.getEntityManager();\t\tEntityTransaction trx = em.getTransaction();\t\ttrx.begin();\t\tcliente = em.merge(cliente);\t\ttrx.commit();\t\tem.close();\t\treturn cliente;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/dao/ClienteDao.java", "stars": "1", "class": {"name": "ClienteDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buscarTodos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Cliente>", "snippet": "\tpublic List<Cliente> buscarTodos() {\t\tEntityManager em = JPAUtil.getEntityManager();\t\tTypedQuery<Cliente> query = em.createQuery(\"from Cliente\", Cliente.class);\t\ttry {\t\t\treturn query.getResultList();\t\t} finally {\t\t\tem.close();\t\t}\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/dao/ClienteDao.java", "stars": "1", "class": {"name": "ClienteDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "excluir", "params": ["Cliente"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void excluir(Cliente categoria) {\t\tEntityManager em = JPAUtil.getEntityManager();\t\tEntityTransaction trx = em.getTransaction();\t\ttrx.begin();\t\tem.remove(em.find(Cliente.class, categoria.getId()));\t\ttrx.commit();\t\tem.close();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/dao/ClienteDao.java", "stars": "1", "class": {"name": "ClienteDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buscarPorId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Cliente", "snippet": "\tpublic Cliente buscarPorId(Long id) {\t\tEntityManager em = JPAUtil.getEntityManager();\t\ttry {\t\t\treturn em.find(Cliente.class, id);\t\t} finally {\t\t\tem.close();\t\t}\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/dao/ClienteDao.java", "stars": "1", "class": {"name": "ClienteDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pesquisarPorNome", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<Cliente>", "snippet": "\tpublic List<Cliente> pesquisarPorNome(String nome) {\t\tEntityManager em = JPAUtil.getEntityManager();\t\tString consulta = \"select nome from Cliente where nome = :nome\";\t\tTypedQuery<Cliente> query = em.createQuery(consulta, Cliente.class);\t\tquery.setParameter(\"nome\", \"%\" + nome + \"%\");\t\tif (!query.getResultList().isEmpty()) {\t\t\treturn query.getResultList();\t\t} else {\t\t\treturn buscarTodos();\t\t}\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/dao/ClienteDao.java", "stars": "1", "class": {"name": "ClienteDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buscarEnderecoPorIdCliente", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Cliente", "snippet": "\tpublic Cliente buscarEnderecoPorIdCliente(Long id) {\t\tEntityManager em = JPAUtil.getEntityManager();\t\tString consulta = \"from Cliente c JOIN fetch c.enderecos where c.id = \"+ id;\t\tTypedQuery<Cliente> query = em.createQuery(consulta, Cliente.class);\t\ttry {\t\t\treturn query.getSingleResult();\t\t} finally {\t\t\tem.close();\t\t}\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/dao/ClienteDao.java", "stars": "1", "class": {"name": "ClienteDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataSourceId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getDataSourceId() {        return dataSourceId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourcePermission.java", "stars": "23", "class": {"name": "DataSourcePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataSourceId", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSourceId(long dataSourceId) {        this.dataSourceId = dataSourceId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourcePermission.java", "stars": "23", "class": {"name": "DataSourcePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isReadable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isReadable() {        return readable;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourcePermission.java", "stars": "23", "class": {"name": "DataSourcePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setReadable", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setReadable(boolean readable) {        this.readable = readable;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourcePermission.java", "stars": "23", "class": {"name": "DataSourcePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isWriteable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isWriteable() {        return writeable;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourcePermission.java", "stars": "23", "class": {"name": "DataSourcePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setWriteable", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWriteable(boolean writeable) {        this.writeable = writeable;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourcePermission.java", "stars": "23", "class": {"name": "DataSourcePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isExecutable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isExecutable() {        return executable;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourcePermission.java", "stars": "23", "class": {"name": "DataSourcePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEditable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEditable() {        return editable;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourcePermission.java", "stars": "23", "class": {"name": "DataSourcePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEditable", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEditable(boolean editable) {        this.editable = editable;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourcePermission.java", "stars": "23", "class": {"name": "DataSourcePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecutable", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExecutable(boolean executable) {        this.executable = executable;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourcePermission.java", "stars": "23", "class": {"name": "DataSourcePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getCreateTime() {        return createTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourcePermission.java", "stars": "23", "class": {"name": "DataSourcePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTime(Date createTime) {        this.createTime = createTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourcePermission.java", "stars": "23", "class": {"name": "DataSourcePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getModifyTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getModifyTime() {        return modifyTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourcePermission.java", "stars": "23", "class": {"name": "DataSourcePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setModifyTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setModifyTime(Date modifyTime) {        this.modifyTime = modifyTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourcePermission.java", "stars": "23", "class": {"name": "DataSourcePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toDataAuthScopes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<DataAuthScope>", "snippet": "    public List<DataAuthScope> toDataAuthScopes(){        List<DataAuthScope> scopes = new ArrayList<>();        if(readable){            scopes.add(DataAuthScope.DATA_READ);        }        if(writeable){            scopes.add(DataAuthScope.DATA_WRITE);        }        if(editable){            scopes.add(DataAuthScope.WRITE);        }        if(executable){            scopes.add(DataAuthScope.EXECUTE);        }        return scopes;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/DataSourcePermission.java", "stars": "23", "class": {"name": "DataSourcePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSessionId", "params": ["ServletRequest", "ServletResponse"], "throws": null, "modifiers": ["protected"], "return_type": "Serializable", "snippet": "    protected Serializable getSessionId(ServletRequest request, ServletResponse response) {        String sessionId = WebUtils.toHttp(request).getHeader(AUTHORIZATION);        if(null != sessionId ){            request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_SOURCE, ShiroHttpServletRequest.COOKIE_SESSION_ID_SOURCE);            request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID, sessionId);            request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_IS_VALID, Boolean.TRUE);           return sessionId;        }else{          return super.getSessionId(request,response);        }    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/config/CustomSessionManager.java", "stars": "2", "class": {"name": "CustomSessionManager", "extends": "DefaultWebSessionManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadTransformerFromLocalStorage", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void loadTransformerFromLocalStorage() {        //add local_storage transformer        loadTransformerFromLocalStorage(null);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerRegistry.java", "stars": "23", "class": {"name": "TransformerRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadTransformerFromLocalStorage", "params": ["List<String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void loadTransformerFromLocalStorage(List<String> transformers) {        String[] paths = new File(CoreConstant.DATAX_STORAGE_TRANSFORMER_HOME).list();        if (null == paths) {            return;        }        for (final String each : paths) {            try {                if (transformers == null || transformers.contains(each)) {                    loadTransformer(each);                }            } catch (Exception e) {                LOG.error(String.format(\"skip transformer(%s) loadTransformer has Exception(%s)\", each, e.getMessage()), e);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerRegistry.java", "stars": "23", "class": {"name": "TransformerRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadTransformer", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void loadTransformer(String each) {        String transformerPath = CoreConstant.DATAX_STORAGE_TRANSFORMER_HOME + File.separator + each;        Configuration transformerConfiguration;        try {            transformerConfiguration = loadTransFormerConfig(transformerPath);        } catch (Exception e) {            LOG.error(String.format(\"skip transformer(%s),load transformer.json error, path = %s, \", each, transformerPath), e);            return;        }        String className = transformerConfiguration.getString(\"class\");        if (StringUtils.isEmpty(className)) {            LOG.error(String.format(\"skip transformer(%s),class not config, path = %s, config = %s\", each, transformerPath, transformerConfiguration.beautify()));            return;        }        String funName = transformerConfiguration.getString(\"name\");        if (!each.equals(funName)) {            LOG.warn(String.format(\"transformer(%s) name not match transformer.json config name[%s], will ignore json's name, path = %s, config = %s\", each, funName, transformerPath, transformerConfiguration.beautify()));        }        JarLoader jarLoader = new JarLoader(new String[]{transformerPath});        try {            Class<?> transformerClass = jarLoader.loadClass(className);            Object transformer = transformerClass.newInstance();            if (ComplexTransformer.class.isAssignableFrom(transformer.getClass())) {                ((ComplexTransformer) transformer).setTransformerName(each);                registComplexTransformer((ComplexTransformer) transformer, jarLoader, false);            } else if (Transformer.class.isAssignableFrom(transformer.getClass())) {                ((Transformer) transformer).setTransformerName(each);                registTransformer((Transformer) transformer, jarLoader, false);            } else {                LOG.error(String.format(\"load Transformer class(%s) error, path = %s\", className, transformerPath));            }        } catch (Exception e) {            //\u9519\u8beffunciton\u8df3\u8fc7            LOG.error(String.format(\"skip transformer(%s),load Transformer class error, path = %s \", each, transformerPath), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerRegistry.java", "stars": "23", "class": {"name": "TransformerRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadTransFormerConfig", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "Configuration", "snippet": "    private static Configuration loadTransFormerConfig(String transformerPath) {        return Configuration.from(new File(transformerPath + File.separator + \"transformer.json\"));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerRegistry.java", "stars": "23", "class": {"name": "TransformerRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTransformer", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "TransformerInfo", "snippet": "    public static TransformerInfo getTransformer(String transformerName) {        TransformerInfo result = registedTransformer.get(transformerName);        //if (result == null) {        //todo \u518d\u5c1d\u8bd5\u4ecedisk\u8bfb\u53d6        //}        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerRegistry.java", "stars": "23", "class": {"name": "TransformerRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registTransformer", "params": ["Transformer"], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "void", "snippet": "    public static synchronized void registTransformer(Transformer transformer) {        registTransformer(transformer, null, true);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerRegistry.java", "stars": "23", "class": {"name": "TransformerRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registTransformer", "params": ["Transformer", "ClassLoader", "boolean"], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "void", "snippet": "    public static synchronized void registTransformer(Transformer transformer, ClassLoader classLoader, boolean isNative) {        checkName(transformer.getTransformerName(), isNative);        if (registedTransformer.containsKey(transformer.getTransformerName())) {            throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_DUPLICATE_ERROR, \" name=\" + transformer.getTransformerName());        }        registedTransformer.put(transformer.getTransformerName(), buildTransformerInfo(new ComplexTransformerProxy(transformer), isNative, classLoader));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerRegistry.java", "stars": "23", "class": {"name": "TransformerRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registComplexTransformer", "params": ["ComplexTransformer", "ClassLoader", "boolean"], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "void", "snippet": "    public static synchronized void registComplexTransformer(ComplexTransformer complexTransformer, ClassLoader classLoader, boolean isNative) {        checkName(complexTransformer.getTransformerName(), isNative);        if (registedTransformer.containsKey(complexTransformer.getTransformerName())) {            throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_DUPLICATE_ERROR, \" name=\" + complexTransformer.getTransformerName());        }        registedTransformer.put(complexTransformer.getTransformerName(), buildTransformerInfo(complexTransformer, isNative, classLoader));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerRegistry.java", "stars": "23", "class": {"name": "TransformerRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkName", "params": ["String", "boolean"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void checkName(String functionName, boolean isNative) {        boolean checkResult = true;        if (isNative) {            if (!functionName.startsWith(\"dx_\")) {                checkResult = false;            }        } else {            if (functionName.startsWith(\"dx_\")) {                checkResult = false;            }        }        if (!checkResult) {            throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_NAME_ERROR, \" name=\" + functionName + \": isNative=\" + isNative);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerRegistry.java", "stars": "23", "class": {"name": "TransformerRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildTransformerInfo", "params": ["ComplexTransformer", "boolean", "ClassLoader"], "throws": null, "modifiers": ["private", "static"], "return_type": "TransformerInfo", "snippet": "    private static TransformerInfo buildTransformerInfo(ComplexTransformer complexTransformer, boolean isNative, ClassLoader classLoader) {        TransformerInfo transformerInfo = new TransformerInfo();        transformerInfo.setClassLoader(classLoader);        transformerInfo.setIsNative(isNative);        transformerInfo.setTransformer(complexTransformer);        return transformerInfo;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerRegistry.java", "stars": "23", "class": {"name": "TransformerRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllSuportTransformer", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "List<String>", "snippet": "    public static List<String> getAllSuportTransformer() {        return new ArrayList<String>(registedTransformer.keySet());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/TransformerRegistry.java", "stars": "23", "class": {"name": "TransformerRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "openSession", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SqlSession", "snippet": "  public SqlSession openSession() {    return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java", "stars": "15", "class": {"name": "DefaultSqlSessionFactory", "extends": null, "implements": ["SqlSessionFactory"], "modifiers": ["public"]}}, {"method_name": "openSession", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "SqlSession", "snippet": "  public SqlSession openSession(boolean autoCommit) {    return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, autoCommit);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java", "stars": "15", "class": {"name": "DefaultSqlSessionFactory", "extends": null, "implements": ["SqlSessionFactory"], "modifiers": ["public"]}}, {"method_name": "openSession", "params": ["ExecutorType"], "throws": null, "modifiers": ["public"], "return_type": "SqlSession", "snippet": "  public SqlSession openSession(ExecutorType execType) {    return openSessionFromDataSource(execType, null, false);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java", "stars": "15", "class": {"name": "DefaultSqlSessionFactory", "extends": null, "implements": ["SqlSessionFactory"], "modifiers": ["public"]}}, {"method_name": "openSession", "params": ["TransactionIsolationLevel"], "throws": null, "modifiers": ["public"], "return_type": "SqlSession", "snippet": "  public SqlSession openSession(TransactionIsolationLevel level) {    return openSessionFromDataSource(configuration.getDefaultExecutorType(), level, false);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java", "stars": "15", "class": {"name": "DefaultSqlSessionFactory", "extends": null, "implements": ["SqlSessionFactory"], "modifiers": ["public"]}}, {"method_name": "openSession", "params": ["ExecutorType", "TransactionIsolationLevel"], "throws": null, "modifiers": ["public"], "return_type": "SqlSession", "snippet": "  public SqlSession openSession(ExecutorType execType, TransactionIsolationLevel level) {    return openSessionFromDataSource(execType, level, false);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java", "stars": "15", "class": {"name": "DefaultSqlSessionFactory", "extends": null, "implements": ["SqlSessionFactory"], "modifiers": ["public"]}}, {"method_name": "openSession", "params": ["ExecutorType", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "SqlSession", "snippet": "  public SqlSession openSession(ExecutorType execType, boolean autoCommit) {    return openSessionFromDataSource(execType, null, autoCommit);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java", "stars": "15", "class": {"name": "DefaultSqlSessionFactory", "extends": null, "implements": ["SqlSessionFactory"], "modifiers": ["public"]}}, {"method_name": "openSession", "params": ["Connection"], "throws": null, "modifiers": ["public"], "return_type": "SqlSession", "snippet": "  public SqlSession openSession(Connection connection) {    return openSessionFromConnection(configuration.getDefaultExecutorType(), connection);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java", "stars": "15", "class": {"name": "DefaultSqlSessionFactory", "extends": null, "implements": ["SqlSessionFactory"], "modifiers": ["public"]}}, {"method_name": "openSession", "params": ["ExecutorType", "Connection"], "throws": null, "modifiers": ["public"], "return_type": "SqlSession", "snippet": "  public SqlSession openSession(ExecutorType execType, Connection connection) {    return openSessionFromConnection(execType, connection);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java", "stars": "15", "class": {"name": "DefaultSqlSessionFactory", "extends": null, "implements": ["SqlSessionFactory"], "modifiers": ["public"]}}, {"method_name": "getConfiguration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Configuration", "snippet": "  public Configuration getConfiguration() {    return configuration;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java", "stars": "15", "class": {"name": "DefaultSqlSessionFactory", "extends": null, "implements": ["SqlSessionFactory"], "modifiers": ["public"]}}, {"method_name": "openSessionFromDataSource", "params": ["ExecutorType", "TransactionIsolationLevel", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "SqlSession", "snippet": "  private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {    Transaction tx = null;    try {      final Environment environment = configuration.getEnvironment();      final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);      final Executor executor = configuration.newExecutor(tx, execType);      return new DefaultSqlSession(configuration, executor, autoCommit);    } catch (Exception e) {      closeTransaction(tx); // may have fetched a connection so lets call close()      throw ExceptionFactory.wrapException(\"Error opening session.  Cause: \" + e, e);    } finally {      ErrorContext.instance().reset();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java", "stars": "15", "class": {"name": "DefaultSqlSessionFactory", "extends": null, "implements": ["SqlSessionFactory"], "modifiers": ["public"]}}, {"method_name": "openSessionFromConnection", "params": ["ExecutorType", "Connection"], "throws": null, "modifiers": ["private"], "return_type": "SqlSession", "snippet": "  private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {    try {      boolean autoCommit;      try {        autoCommit = connection.getAutoCommit();      } catch (SQLException e) {        // Failover to true, as most poor drivers        // or databases won't support transactions        autoCommit = true;      }      final Environment environment = configuration.getEnvironment();      final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);      final Transaction tx = transactionFactory.newTransaction(connection);      final Executor executor = configuration.newExecutor(tx, execType);      return new DefaultSqlSession(configuration, executor, autoCommit);    } catch (Exception e) {      throw ExceptionFactory.wrapException(\"Error opening session.  Cause: \" + e, e);    } finally {      ErrorContext.instance().reset();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java", "stars": "15", "class": {"name": "DefaultSqlSessionFactory", "extends": null, "implements": ["SqlSessionFactory"], "modifiers": ["public"]}}, {"method_name": "getTransactionFactoryFromEnvironment", "params": ["Environment"], "throws": null, "modifiers": ["private"], "return_type": "TransactionFactory", "snippet": "  private TransactionFactory getTransactionFactoryFromEnvironment(Environment environment) {    if (environment == null || environment.getTransactionFactory() == null) {      return new ManagedTransactionFactory();    }    return environment.getTransactionFactory();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java", "stars": "15", "class": {"name": "DefaultSqlSessionFactory", "extends": null, "implements": ["SqlSessionFactory"], "modifiers": ["public"]}}, {"method_name": "closeTransaction", "params": ["Transaction"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void closeTransaction(Transaction tx) {    if (tx != null) {      try {        tx.close();      } catch (SQLException ignore) {        // Intentionally ignore. Prefer previous error.      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java", "stars": "15", "class": {"name": "DefaultSqlSessionFactory", "extends": null, "implements": ["SqlSessionFactory"], "modifiers": ["public"]}}, {"method_name": "agregarCerveza", "params": ["Cerveza"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void agregarCerveza(Cerveza cerveza) {            if (listacerveza.size() == 0){                listacerveza.add(cerveza);            }else{                boolean estaOnoesta = false;                for (int i = 0; i < listacerveza.size(); i++){                    if (listacerveza.get(i).getNombre().equals(cerveza.getNombre())){                        estaOnoesta = true;                    }                }                if (!estaOnoesta){                    listacerveza.add(cerveza);                }else{                    System.out.println(\"La birra ya existia\");                }            }        }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/Fabrica.java", "stars": "2", "class": {"name": "Fabrica", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "quitarCerveza", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void quitarCerveza(int id){        for (int i = 0; i < listacerveza.size(); i++) {            if (listacerveza.get(i).getId() == id) {                listacerveza.remove(i);            } /*else {                System.out.println(\"La cerveza q quiere robar no existe\");            }*/        }    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/Fabrica.java", "stars": "2", "class": {"name": "Fabrica", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listarCerveza", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void listarCerveza(){        for(int i =0;i<listacerveza.size();i++){            System.out.println(listacerveza.get(i).getNombre());        }    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/Fabrica.java", "stars": "2", "class": {"name": "Fabrica", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Fabrica{\" +                \"id=\" + id +                \", nombre='\" + nombre + '\\'' +                \", direccion='\" + direccion + '\\'' +                \", cerveza=\" + listacerveza +                '}';    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/Fabrica.java", "stars": "2", "class": {"name": "Fabrica", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handle", "params": ["WxMpXmlMessage", "Map<String,Object>", "WxMpService", "WxSessionManager"], "throws": null, "modifiers": ["public"], "return_type": "WxMpXmlOutMessage", "snippet": "  public WxMpXmlOutMessage handle(WxMpXmlMessage wxMessage,                                  Map<String, Object> context, WxMpService weixinService,                                  WxSessionManager sessionManager) {    if (!wxMessage.getMsgType().equals(XmlMsgType.EVENT)) {      //TODO \u53ef\u4ee5\u9009\u62e9\u5c06\u6d88\u606f\u4fdd\u5b58\u5230\u672c\u5730    }    //\u5f53\u7528\u6237\u8f93\u5165\u5173\u952e\u8bcd\u5982\u201c\u4f60\u597d\u201d\uff0c\u201c\u5ba2\u670d\u201d\u7b49\uff0c\u5e76\u4e14\u6709\u5ba2\u670d\u5728\u7ebf\u65f6\uff0c\u628a\u6d88\u606f\u8f6c\u53d1\u7ed9\u5728\u7ebf\u5ba2\u670d    try {      if (StringUtils.startsWithAny(wxMessage.getContent(), \"\u4f60\u597d\", \"\u5ba2\u670d\")          && weixinService.getKefuService().kfOnlineList()          .getKfOnlineList().size() > 0) {        return WxMpXmlOutMessage.TRANSFER_CUSTOMER_SERVICE()            .fromUser(wxMessage.getToUser())            .toUser(wxMessage.getFromUser()).build();      }    } catch (WxErrorException e) {      e.printStackTrace();    }    //TODO \u7ec4\u88c5\u56de\u590d\u6d88\u606f    String content = \"\u6536\u5230\u4fe1\u606f\u5185\u5bb9\uff1a\" + JsonUtils.toJson(wxMessage);    return new TextBuilder().build(content, wxMessage, weixinService);  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/handler/MsgHandler.java", "stars": "2", "class": {"name": "MsgHandler", "extends": "AbstractHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "paga", "params": ["TentativaPagamento"], "throws": null, "modifiers": ["public"], "return_type": "CompletableFuture<Transacao>", "snippet": "\tpublic CompletableFuture<Transacao> paga(\t\t\tTentativaPagamento tentativaPagamento) {\t\tTreeSet<Pagador> pagadoresFiltrados = pagadoresOrdenadosPeloMenorCusto\t\t\t\t.filtra(tentativaPagamento);\t\tfor (Pagador pagador : pagadoresFiltrados) {\t\t\ttry {\t\t\t\tCompletableFuture<Transacao> novaTransacao = pagador.paga();\t\t\t\tlog.info(\t\t\t\t\t\t\"Pagamento realizado com sucesso para {} na tentativa {}\",\t\t\t\t\t\tpagador, tentativaPagamento);\t\t\t\treturn novaTransacao;\t\t\t\t\t\t\t} catch (FeignException e) {\t\t\t\tlog.error(\t\t\t\t\t\t\"Problema de rede enquanto tentava pagar com {} a tentiva {} => {}\",\t\t\t\t\t\tpagador, tentativaPagamento, e);\t\t\t} catch (Exception e) {\t\t\t\tlog.error(\"Azedou o mingau enquanto tentava pagar {} => {}\",\t\t\t\t\t\ttentativaPagamento, e);\t\t\t}\t\t}\t\tlog.error(\"N\u00e3o foi poss\u00edvel realizar o pagamento para {}\",\t\t\t\ttentativaPagamento);\t\treturn CompletableFuture.completedFuture(new Transacao());\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/processadores/TodosProcessadoresPagamento.java", "stars": "9", "class": {"name": "TodosProcessadoresPagamento", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughRedSandstoneStairsBlock.java", "stars": "2", "class": {"name": "RoughRedSandstoneStairsBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughRedSandstoneStairsBlock.java", "stars": "2", "class": {"name": "RoughRedSandstoneStairsBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "isNormalCube", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean isNormalCube(BlockState state, IBlockReader worldIn, BlockPos pos) {\t\t\treturn false;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughRedSandstoneStairsBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "StairsBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "propagatesSkylightDown", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean propagatesSkylightDown(BlockState state, IBlockReader reader, BlockPos pos) {\t\t\treturn true;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughRedSandstoneStairsBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "StairsBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(RoughRedSandstoneStairsBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughRedSandstoneStairsBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "StairsBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RoughRedSandstoneStairsBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "StairsBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "put", "params": ["String", "File"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void put(String key, File file) {\t\t// Do nothing\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/disc/impl/UnlimitedDiscCache.java", "stars": "74", "class": {"name": "UnlimitedDiscCache", "extends": "BaseDiscCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setup() throws Exception {    DataSource dataSource = BaseDataTest.createUnpooledDataSource(BaseDataTest.BLOG_PROPERTIES);    BaseDataTest.runScript(dataSource, \"org/apache/ibatis/binding/paramtest-schema.sql\");    TransactionFactory transactionFactory = new JdbcTransactionFactory();    Environment environment = new Environment(\"Production\", transactionFactory, dataSource);    Configuration configuration = new Configuration(environment);    configuration.addMapper(Mapper.class);    sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/MapperMethodParamTest.java", "stars": "15", "class": {"name": "MapperMethodParamTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "parameterNameIsSizeAndTypeIsLong", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void parameterNameIsSizeAndTypeIsLong() {    try (SqlSession session = sqlSessionFactory.openSession()) {      Mapper mapper = session.getMapper(Mapper.class);      mapper.insert(\"foo\", Long.MAX_VALUE);      assertThat(mapper.selectSize(\"foo\")).isEqualTo(Long.MAX_VALUE);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/MapperMethodParamTest.java", "stars": "15", "class": {"name": "MapperMethodParamTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "parameterNameIsSizeUsingHashMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void parameterNameIsSizeUsingHashMap() {    try (SqlSession session = sqlSessionFactory.openSession()) {      HashMap<String, Object> params = new HashMap<>();      params.put(\"id\", \"foo\");      params.put(\"size\", Long.MAX_VALUE);      Mapper mapper = session.getMapper(Mapper.class);      mapper.insertUsingHashMap(params);      assertThat(mapper.selectSize(\"foo\")).isEqualTo(Long.MAX_VALUE);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/MapperMethodParamTest.java", "stars": "15", "class": {"name": "MapperMethodParamTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "addArticle", "params": ["Article"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addArticle(Article a) {        JdbcTemplate.update(SqlMappers.ArticleSqlMapper.get(\"addArticle\"),                a.getUser_id(),a.getArticle_kind(),a.getArticle_title(),a.getArticle_content(),                a.getArticle_time(),a.getArticle_tag(),a.getIs_private(),a.getRead_count());    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getAllArticleByLimit", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<Article>", "snippet": "    public List<Article> getAllArticleByLimit(int pageSize,int pageNow) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getAllArticleByLimit\"),new BeanPropertyRowMapper<Article>(Article.class),pageSize*(pageNow-1),pageSize);        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getMyArticleByLimit", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<Article>", "snippet": "    public List<Article> getMyArticleByLimit(int user_id, int pageSize, int pageNow) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getMyArticleByLimit\"),new BeanPropertyRowMapper<Article>(Article.class),user_id,pageSize*(pageNow-1),pageSize);        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getOtherArticleByLimit", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<Article>", "snippet": "    public List<Article> getOtherArticleByLimit(int user_id, int pageSize, int pageNow) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getOtherArticleByLimit\"),new BeanPropertyRowMapper<Article>(Article.class),user_id,pageSize*(pageNow-1),pageSize);        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getArticleById", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Article", "snippet": "    public Article getArticleById(int articleId) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getArticleById\"),new BeanPropertyRowMapper<Article>(Article.class),articleId);        if(list.size() == 0){            return null;        }        return list.get(0);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getAllArticleByUserId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<Article>", "snippet": "    public List<Article> getAllArticleByUserId(int user_id) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getAllArticleByUserId\"),new BeanPropertyRowMapper<Article>(Article.class),user_id);        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getAllArticleByKind", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<Article>", "snippet": "    public List<Article> getAllArticleByKind(String kind) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getAllArticleByKind\"),new BeanPropertyRowMapper<Article>(Article.class),kind);        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getAllArticleByTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<Article>", "snippet": "    public List<Article> getAllArticleByTitle(String title) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getAllArticleByTitle\"),new BeanPropertyRowMapper<Article>(Article.class),\"%\"+title+\"%\");        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getMyArticleByTitle", "params": ["int", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<Article>", "snippet": "    public List<Article> getMyArticleByTitle(int user_id, String title) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getMyArticleByTitle\"),new BeanPropertyRowMapper<Article>(Article.class),user_id,\"%\"+title+\"%\");        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getOtherArticleByTitle", "params": ["int", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<Article>", "snippet": "    public List<Article> getOtherArticleByTitle(int user_id, String title) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getOtherArticleByTitle\"),new BeanPropertyRowMapper<Article>(Article.class),user_id,\"%\"+title+\"%\");        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getPageNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPageNum() {        List result =JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getAllPublishArticles\"),new BeanPropertyRowMapper<Article>(Article.class));        return result.size();    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getMyPageNum", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMyPageNum(int user_id) {        List result =JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getAllMyArticles\"),new BeanPropertyRowMapper<Article>(Article.class),user_id);        return result.size();    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getOtherPageNum", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getOtherPageNum(int user_id) {        List result =JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getAllOtherPublicArticles\"),new BeanPropertyRowMapper<Article>(Article.class),user_id);        return result.size();    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "addComment", "params": ["Comment"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addComment(Comment comment) {        JdbcTemplate.update(SqlMappers.ArticleSqlMapper.get(\"addComment\"),comment.getArticle_id(),                comment.getUser_name(),comment.getComment_content(),comment.getComment_time());    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getAllComments", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<Comment>", "snippet": "    public List<Comment> getAllComments(int article_id) {        List<Comment> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getAllCommentById\"),new BeanPropertyRowMapper<Comment>(Comment.class),article_id);        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "addArticleReadCount", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addArticleReadCount(int article_id) {        JdbcTemplate.update(SqlMappers.ArticleSqlMapper.get(\"addArticleReadCount\"),article_id);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "addLike", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addLike(int user_id, int article_id) {        JdbcTemplate.update(SqlMappers.ArticleSqlMapper.get(\"addLike\"),user_id,article_id);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "deleteLike", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteLike(int user_id, int article_id) {        JdbcTemplate.update(SqlMappers.ArticleSqlMapper.get(\"deleteLike\"),article_id,user_id);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "isLiked", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isLiked(int user_id, int article_id) {        List<Like> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"isLiked\"),new BeanPropertyRowMapper<Like>(Like.class),article_id,user_id);        if(list == null || list.size() == 0){            return false;        }else {            return true;        }    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getLikeCount", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLikeCount(int article_id) {        List<Like> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getLikeCount\"),new BeanPropertyRowMapper<Like>(Like.class),article_id);        if(list == null || list.size() == 0){            return 0;        }else{            return list.size();        }    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getTopByRead", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Article>", "snippet": "    public List<Article> getTopByRead() {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getTopByRead\"),new BeanPropertyRowMapper<Article>(Article.class));        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getMyTopByRead", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<Article>", "snippet": "    public List<Article> getMyTopByRead(int user_id) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getMyTopByRead\"),new BeanPropertyRowMapper<Article>(Article.class),user_id);        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getTopByLike", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Like>", "snippet": "    public List<Like> getTopByLike() {        List<Like> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getTopArticlesIdByLike\"),new BeanPropertyRowMapper<Like>(Like.class));        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getMyArticlesByTag", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<Article>", "snippet": "    public List<Article> getMyArticlesByTag(String tag, int user_id) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getMyArticlesByTag\"),new BeanPropertyRowMapper<Article>(Article.class),user_id,\"%/\"+tag+\"%\");        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getOtherArticlesByTag", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<Article>", "snippet": "    public List<Article> getOtherArticlesByTag(String tag, int user_id) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getOtherArticlesByTag\"),new BeanPropertyRowMapper<Article>(Article.class),user_id,\"%/\"+tag+\"%\");        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getMyArticlesByKind", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<Article>", "snippet": "    public List<Article> getMyArticlesByKind(String kind, int user_id) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getMyArticlesByKind\"),new BeanPropertyRowMapper<Article>(Article.class),user_id,kind);        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getOtherArticlesByKind", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<Article>", "snippet": "    public List<Article> getOtherArticlesByKind(String kind, int user_id) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getOtherArticlesByKind\"),new BeanPropertyRowMapper<Article>(Article.class),user_id,kind);        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "updateArticleTag", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateArticleTag(String tag, int article_id) {        JdbcTemplate.update(SqlMappers.ArticleSqlMapper.get(\"updateArticleTag\"),tag,article_id);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "deleteArticle", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteArticle(int article_id) {        JdbcTemplate.update(SqlMappers.ArticleSqlMapper.get(\"deleteArticle\"),article_id);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "deleteComments", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteComments(int article_id) {        JdbcTemplate.update(SqlMappers.ArticleSqlMapper.get(\"deleteComments\"),article_id);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "deleteLikes", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteLikes(int article_id) {        JdbcTemplate.update(SqlMappers.ArticleSqlMapper.get(\"deleteLikes\"),article_id);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "updateArticle", "params": ["Article"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateArticle(Article article) {        JdbcTemplate.update(SqlMappers.ArticleSqlMapper.get(\"updateArticle\"),article.getArticle_title(),article.getArticle_content(),article.getArticle_kind(),                article.getArticle_tag(),article.getIs_private(),article.getArticle_id());    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "updateComment", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateComment(String newName, String oldName) {        JdbcTemplate.update(SqlMappers.ArticleSqlMapper.get(\"updateComment\"),newName,oldName);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getUserIdByArticleId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getUserIdByArticleId(int article_id) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getUserIdByArticleId\"),new BeanPropertyRowMapper<Article>(Article.class),article_id);        if(list.size() == 0){            return -1;        }        return list.get(0).getUser_id();    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getMyArticleCount", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMyArticleCount(int user_id) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getMyArticleCount\"),new BeanPropertyRowMapper<Article>(Article.class),user_id);        if(list == null){            return 0;        }        return list.size();    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getOtherArticleCount", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getOtherArticleCount(int user_id) {        List<Article> list = JdbcTemplate.query(SqlMappers.ArticleSqlMapper.get(\"getOtherArticleCount\"),new BeanPropertyRowMapper<Article>(Article.class),user_id);        if(list == null){            return 0;        }        return list.size();    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/ArticleDaoImpl.java", "stars": "10", "class": {"name": "ArticleDaoImpl", "extends": "BaseDaoImpl", "implements": ["ArticleDao"], "modifiers": ["public"]}}, {"method_name": "getTaskPluginCollector", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TaskPluginCollector", "snippet": "    public TaskPluginCollector getTaskPluginCollector() {        return taskPluginCollector;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/plugin/AbstractTaskPlugin.java", "stars": "23", "class": {"name": "AbstractTaskPlugin", "extends": "AbstractPlugin", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setTaskPluginCollector", "params": ["TaskPluginCollector"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTaskPluginCollector(            TaskPluginCollector taskPluginCollector) {        this.taskPluginCollector = taskPluginCollector;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/plugin/AbstractTaskPlugin.java", "stars": "23", "class": {"name": "AbstractTaskPlugin", "extends": "AbstractPlugin", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getTaskId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTaskId() {        return taskId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/plugin/AbstractTaskPlugin.java", "stars": "23", "class": {"name": "AbstractTaskPlugin", "extends": "AbstractPlugin", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setTaskId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTaskId(int taskId) {        this.taskId = taskId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/plugin/AbstractTaskPlugin.java", "stars": "23", "class": {"name": "AbstractTaskPlugin", "extends": "AbstractPlugin", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getTaskGroupId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTaskGroupId() {        return taskGroupId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/plugin/AbstractTaskPlugin.java", "stars": "23", "class": {"name": "AbstractTaskPlugin", "extends": "AbstractPlugin", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setTaskGroupId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTaskGroupId(int taskGroupId) {        this.taskGroupId = taskGroupId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/plugin/AbstractTaskPlugin.java", "stars": "23", "class": {"name": "AbstractTaskPlugin", "extends": "AbstractPlugin", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "show", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void show(){        System.out.println(\"Demo1...show...\");    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/java2/itcast/annotation/Demo1.java", "stars": "2", "class": {"name": "Demo1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/DarkOakParquetBlock.java", "stars": "2", "class": {"name": "DarkOakParquetBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/DarkOakParquetBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDeviceId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getDeviceId() {\t\treturn deviceId;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/DeviceAlarm.java", "stars": "29", "class": {"name": "DeviceAlarm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDeviceId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDeviceId(String deviceId) {\t\tthis.deviceId = deviceId;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/DeviceAlarm.java", "stars": "29", "class": {"name": "DeviceAlarm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAlarmPriorit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getAlarmPriorit() {\t\treturn alarmPriorit;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/DeviceAlarm.java", "stars": "29", "class": {"name": "DeviceAlarm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAlarmPriorit", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAlarmPriorit(String alarmPriorit) {\t\tthis.alarmPriorit = alarmPriorit;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/DeviceAlarm.java", "stars": "29", "class": {"name": "DeviceAlarm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAlarmMethod", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getAlarmMethod() {\t\treturn alarmMethod;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/DeviceAlarm.java", "stars": "29", "class": {"name": "DeviceAlarm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAlarmMethod", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAlarmMethod(String alarmMethod) {\t\tthis.alarmMethod = alarmMethod;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/DeviceAlarm.java", "stars": "29", "class": {"name": "DeviceAlarm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAlarmTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getAlarmTime() {\t\treturn alarmTime;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/DeviceAlarm.java", "stars": "29", "class": {"name": "DeviceAlarm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAlarmTime", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAlarmTime(String alarmTime) {\t\tthis.alarmTime = alarmTime;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/DeviceAlarm.java", "stars": "29", "class": {"name": "DeviceAlarm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAlarmDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getAlarmDescription() {\t\treturn alarmDescription;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/DeviceAlarm.java", "stars": "29", "class": {"name": "DeviceAlarm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAlarmDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAlarmDescription(String alarmDescription) {\t\tthis.alarmDescription = alarmDescription;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/DeviceAlarm.java", "stars": "29", "class": {"name": "DeviceAlarm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLongitude", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double getLongitude() {\t\treturn longitude;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/DeviceAlarm.java", "stars": "29", "class": {"name": "DeviceAlarm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLongitude", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setLongitude(double longitude) {\t\tthis.longitude = longitude;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/DeviceAlarm.java", "stars": "29", "class": {"name": "DeviceAlarm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLatitude", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double getLatitude() {\t\treturn latitude;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/DeviceAlarm.java", "stars": "29", "class": {"name": "DeviceAlarm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLatitude", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setLatitude(double latitude) {\t\tthis.latitude = latitude;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/DeviceAlarm.java", "stars": "29", "class": {"name": "DeviceAlarm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAlarmType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getAlarmType() {\t\treturn alarmType;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/DeviceAlarm.java", "stars": "29", "class": {"name": "DeviceAlarm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAlarmType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAlarmType(String alarmType) {\t\tthis.alarmType = alarmType;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/DeviceAlarm.java", "stars": "29", "class": {"name": "DeviceAlarm", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAvailableFilterNames", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Set<String>", "snippet": "  public static Set<String> getAvailableFilterNames() {    return filterRepository.keySet();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/ExecutorFilter.java", "stars": "18", "class": {"name": "ExecutorFilter", "extends": "CandidateFilter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getStaticRemainingFlowSizeFilter", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "FactorFilter<Executor,ExecutableFlow>", "snippet": "  private static FactorFilter<Executor, ExecutableFlow> getStaticRemainingFlowSizeFilter() {    return FactorFilter        .create(STATICREMAININGFLOWSIZE_FILTER_NAME, (filteringTarget, referencingObject) -> {          if (null == filteringTarget) {            logger.debug(String.format(\"%s : filtering out the target as it is null.\",                STATICREMAININGFLOWSIZE_FILTER_NAME));            return false;          }          final ExecutorInfo stats = filteringTarget.getExecutorInfo();          if (null == stats) {            logger.debug(String.format(\"%s : filtering out %s as it's stats is unavailable.\",                STATICREMAININGFLOWSIZE_FILTER_NAME,                filteringTarget.toString()));            return false;          }          return stats.getRemainingFlowCapacity() > 0;        });  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/ExecutorFilter.java", "stars": "18", "class": {"name": "ExecutorFilter", "extends": "CandidateFilter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getMinimumReservedMemoryFilter", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "FactorFilter<Executor,ExecutableFlow>", "snippet": "  private static FactorFilter<Executor, ExecutableFlow> getMinimumReservedMemoryFilter() {    return FactorFilter        .create(MINIMUMFREEMEMORY_FILTER_NAME, new FactorFilter.Filter<Executor, ExecutableFlow>() {          private static final int MINIMUM_FREE_MEMORY = 6 * 1024;          @Override          public boolean filterTarget(final Executor filteringTarget,              final ExecutableFlow referencingObject) {            if (null == filteringTarget) {              logger.debug(String.format(\"%s : filtering out the target as it is null.\",                  MINIMUMFREEMEMORY_FILTER_NAME));              return false;            }            final ExecutorInfo stats = filteringTarget.getExecutorInfo();            if (null == stats) {              logger.debug(String.format(\"%s : filtering out %s as it's stats is unavailable.\",                  MINIMUMFREEMEMORY_FILTER_NAME,                  filteringTarget.toString()));              return false;            }            return stats.getRemainingMemoryInMB() > MINIMUM_FREE_MEMORY;          }        });  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/ExecutorFilter.java", "stars": "18", "class": {"name": "ExecutorFilter", "extends": "CandidateFilter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getCpuStatusFilter", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "FactorFilter<Executor,ExecutableFlow>", "snippet": "  private static FactorFilter<Executor, ExecutableFlow> getCpuStatusFilter() {    return FactorFilter        .create(CPUSTATUS_FILTER_NAME, new FactorFilter.Filter<Executor, ExecutableFlow>() {          private static final int MAX_CPU_CURRENT_USAGE = 95;          @Override          public boolean filterTarget(final Executor filteringTarget,              final ExecutableFlow referencingObject) {            if (null == filteringTarget) {              logger.debug(String                  .format(\"%s : filtering out the target as it is null.\", CPUSTATUS_FILTER_NAME));              return false;            }            final ExecutorInfo stats = filteringTarget.getExecutorInfo();            if (null == stats) {              logger.debug(String.format(\"%s : filtering out %s as it's stats is unavailable.\",                  CPUSTATUS_FILTER_NAME,                  filteringTarget.toString()));              return false;            }            return stats.getCpuUsage() < MAX_CPU_CURRENT_USAGE;          }        });  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/ExecutorFilter.java", "stars": "18", "class": {"name": "ExecutorFilter", "extends": "CandidateFilter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return \"ExecutorFilter\";  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/ExecutorFilter.java", "stars": "18", "class": {"name": "ExecutorFilter", "extends": "CandidateFilter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "newSession", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void newSession(){    HttpSession session = request2.getSession(true);    session.setAttribute(NEW_SESSION_INDICATOR, true);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/com/webank/wedatasphere/schedulis/web/webapp/error/SessionFilter.java", "stars": "18", "class": {"name": "SessionFilter", "extends": "HttpServlet", "implements": ["Filter"], "modifiers": ["public"]}}, {"method_name": "doFilter", "params": ["ServletRequest", "ServletResponse", "FilterChain"], "throws": ["IOException", "ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void doFilter(ServletRequest request, ServletResponse response,      FilterChain chain) throws IOException, ServletException  {    //System.out.println(\"NewSessionFilter doFilter\");    if (request instanceof HttpServletRequest ) {      HttpServletRequest httpRequest = (HttpServletRequest) request;      if(httpRequest.getMethod().equals(\"POST\")){        //\u53d6\u7684url\u76f8\u5bf9\u5730\u5740        String url = httpRequest.getRequestURI();        System.out.println(url);        if (httpRequest.getSession() != null) {          System.out.println(\"NewSessionFilter doFilter httpRequest.getSession().getId()\"+ httpRequest.getSession().getId());          //--------\u590d\u5236 session\u5230\u4e34\u65f6\u53d8\u91cf          HttpSession session = httpRequest.getSession();          HashMap old = new HashMap();          Enumeration keys = (Enumeration) session.getAttributeNames();          while (keys.hasMoreElements()){            String key = (String) keys.nextElement();            if (!NEW_SESSION_INDICATOR.equals(key)){              old.put(key, session.getAttribute(key));              session.removeAttribute(key);            }          }          if (httpRequest.getMethod().equals(\"POST\") && httpRequest.getSession() != null              && !httpRequest.getSession().isNew() && httpRequest.getRequestURI().endsWith(url)){            session.invalidate();            session=httpRequest.getSession(true);            logger.debug(\"new Session:\" + session.getId());          }          //-----------------\u590d\u5236session          for (Iterator it = old.entrySet().iterator(); it.hasNext();) {            Map.Entry entry = (Entry) it.next();            session.setAttribute((String) entry.getKey(), entry.getValue());          }        }      }    }    chain.doFilter(request, response);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/com/webank/wedatasphere/schedulis/web/webapp/error/SessionFilter.java", "stars": "18", "class": {"name": "SessionFilter", "extends": "HttpServlet", "implements": ["Filter"], "modifiers": ["public"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void destroy() {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/com/webank/wedatasphere/schedulis/web/webapp/error/SessionFilter.java", "stars": "18", "class": {"name": "SessionFilter", "extends": "HttpServlet", "implements": ["Filter"], "modifiers": ["public"]}}, {"method_name": "init", "params": ["FilterConfig"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void init(FilterConfig filterConfig) throws ServletException {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/com/webank/wedatasphere/schedulis/web/webapp/error/SessionFilter.java", "stars": "18", "class": {"name": "SessionFilter", "extends": "HttpServlet", "implements": ["Filter"], "modifiers": ["public"]}}, {"method_name": "getCurrentNamespace", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCurrentNamespace() {    return currentNamespace;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCurrentNamespace", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCurrentNamespace(String currentNamespace) {    if (currentNamespace == null) {      throw new BuilderException(\"The mapper element requires a namespace attribute to be specified.\");    }    if (this.currentNamespace != null && !this.currentNamespace.equals(currentNamespace)) {      throw new BuilderException(\"Wrong namespace. Expected '\"          + this.currentNamespace + \"' but found '\" + currentNamespace + \"'.\");    }    this.currentNamespace = currentNamespace;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "applyCurrentNamespace", "params": ["String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String applyCurrentNamespace(String base, boolean isReference) {    if (base == null) {      return null;    }    if (isReference) {      // is it qualified with any namespace yet?      if (base.contains(\".\")) {        return base;      }    } else {      // is it qualified with this namespace yet?      if (base.startsWith(currentNamespace + \".\")) {        return base;      }      if (base.contains(\".\")) {        throw new BuilderException(\"Dots are not allowed in element names, please remove it from \" + base);      }    }    return currentNamespace + \".\" + base;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "useCacheRef", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Cache", "snippet": "  public Cache useCacheRef(String namespace) {    if (namespace == null) {      throw new BuilderException(\"cache-ref element requires a namespace attribute.\");    }    try {      unresolvedCacheRef = true;      Cache cache = configuration.getCache(namespace);      if (cache == null) {        throw new IncompleteElementException(\"No cache for namespace '\" + namespace + \"' could be found.\");      }      currentCache = cache;      unresolvedCacheRef = false;      return cache;    } catch (IllegalArgumentException e) {      throw new IncompleteElementException(\"No cache for namespace '\" + namespace + \"' could be found.\", e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "useNewCache", "params": ["Class<Cache>", "Class<Cache>", "Long", "Integer", "boolean", "boolean", "Properties"], "throws": null, "modifiers": ["public"], "return_type": "Cache", "snippet": "  public Cache useNewCache(Class<? extends Cache> typeClass,      Class<? extends Cache> evictionClass,      Long flushInterval,      Integer size,      boolean readWrite,      boolean blocking,      Properties props) {    Cache cache = new CacheBuilder(currentNamespace)        .implementation(valueOrDefault(typeClass, PerpetualCache.class))        .addDecorator(valueOrDefault(evictionClass, LruCache.class))        .clearInterval(flushInterval)        .size(size)        .readWrite(readWrite)        .blocking(blocking)        .properties(props)        .build();    configuration.addCache(cache);    currentCache = cache;    return cache;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "addParameterMap", "params": ["String", "Class<?>", "List<ParameterMapping>"], "throws": null, "modifiers": ["public"], "return_type": "ParameterMap", "snippet": "  public ParameterMap addParameterMap(String id, Class<?> parameterClass, List<ParameterMapping> parameterMappings) {    id = applyCurrentNamespace(id, false);    ParameterMap parameterMap = new ParameterMap.Builder(configuration, id, parameterClass, parameterMappings).build();    configuration.addParameterMap(parameterMap);    return parameterMap;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "buildParameterMapping", "params": ["Class<?>", "String", "Class<?>", "JdbcType", "String", "ParameterMode", "Class<TypeHandler>", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "ParameterMapping", "snippet": "  public ParameterMapping buildParameterMapping(      Class<?> parameterType,      String property,      Class<?> javaType,      JdbcType jdbcType,      String resultMap,      ParameterMode parameterMode,      Class<? extends TypeHandler<?>> typeHandler,      Integer numericScale) {    resultMap = applyCurrentNamespace(resultMap, true);    // Class parameterType = parameterMapBuilder.type();    Class<?> javaTypeClass = resolveParameterJavaType(parameterType, property, javaType, jdbcType);    TypeHandler<?> typeHandlerInstance = resolveTypeHandler(javaTypeClass, typeHandler);    return new ParameterMapping.Builder(configuration, property, javaTypeClass)        .jdbcType(jdbcType)        .resultMapId(resultMap)        .mode(parameterMode)        .numericScale(numericScale)        .typeHandler(typeHandlerInstance)        .build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "addResultMap", "params": ["String", "Class<?>", "String", "Discriminator", "List<ResultMapping>", "Boolean"], "throws": null, "modifiers": ["public"], "return_type": "ResultMap", "snippet": "  public ResultMap addResultMap(      String id,      Class<?> type,      String extend,      Discriminator discriminator,      List<ResultMapping> resultMappings,      Boolean autoMapping) {    id = applyCurrentNamespace(id, false);    extend = applyCurrentNamespace(extend, true);    if (extend != null) {      if (!configuration.hasResultMap(extend)) {        throw new IncompleteElementException(\"Could not find a parent resultmap with id '\" + extend + \"'\");      }      ResultMap resultMap = configuration.getResultMap(extend);      List<ResultMapping> extendedResultMappings = new ArrayList<>(resultMap.getResultMappings());      extendedResultMappings.removeAll(resultMappings);      // Remove parent constructor if this resultMap declares a constructor.      boolean declaresConstructor = false;      for (ResultMapping resultMapping : resultMappings) {        if (resultMapping.getFlags().contains(ResultFlag.CONSTRUCTOR)) {          declaresConstructor = true;          break;        }      }      if (declaresConstructor) {        extendedResultMappings.removeIf(resultMapping -> resultMapping.getFlags().contains(ResultFlag.CONSTRUCTOR));      }      resultMappings.addAll(extendedResultMappings);    }    ResultMap resultMap = new ResultMap.Builder(configuration, id, type, resultMappings, autoMapping)        .discriminator(discriminator)        .build();    configuration.addResultMap(resultMap);    return resultMap;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "buildDiscriminator", "params": ["Class<?>", "String", "Class<?>", "JdbcType", "Class<TypeHandler>", "Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "Discriminator", "snippet": "  public Discriminator buildDiscriminator(      Class<?> resultType,      String column,      Class<?> javaType,      JdbcType jdbcType,      Class<? extends TypeHandler<?>> typeHandler,      Map<String, String> discriminatorMap) {    ResultMapping resultMapping = buildResultMapping(        resultType,        null,        column,        javaType,        jdbcType,        null,        null,        null,        null,        typeHandler,        new ArrayList<>(),        null,        null,        false);    Map<String, String> namespaceDiscriminatorMap = new HashMap<>();    for (Map.Entry<String, String> e : discriminatorMap.entrySet()) {      String resultMap = e.getValue();      resultMap = applyCurrentNamespace(resultMap, true);      namespaceDiscriminatorMap.put(e.getKey(), resultMap);    }    return new Discriminator.Builder(configuration, resultMapping, namespaceDiscriminatorMap).build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "addMappedStatement", "params": ["String", "SqlSource", "StatementType", "SqlCommandType", "Integer", "Integer", "String", "Class<?>", "String", "Class<?>", "ResultSetType", "boolean", "boolean", "boolean", "KeyGenerator", "String", "String", "String", "LanguageDriver", "String"], "throws": null, "modifiers": ["public"], "return_type": "MappedStatement", "snippet": "  public MappedStatement addMappedStatement(      String id,      SqlSource sqlSource,      StatementType statementType,      SqlCommandType sqlCommandType,      Integer fetchSize,      Integer timeout,      String parameterMap,      Class<?> parameterType,      String resultMap,      Class<?> resultType,      ResultSetType resultSetType,      boolean flushCache,      boolean useCache,      boolean resultOrdered,      KeyGenerator keyGenerator,      String keyProperty,      String keyColumn,      String databaseId,      LanguageDriver lang,      String resultSets) {    if (unresolvedCacheRef) {      throw new IncompleteElementException(\"Cache-ref not yet resolved\");    }    id = applyCurrentNamespace(id, false);    boolean isSelect = sqlCommandType == SqlCommandType.SELECT;    MappedStatement.Builder statementBuilder = new MappedStatement.Builder(configuration, id, sqlSource, sqlCommandType)        .resource(resource)        .fetchSize(fetchSize)        .timeout(timeout)        .statementType(statementType)        .keyGenerator(keyGenerator)        .keyProperty(keyProperty)        .keyColumn(keyColumn)        .databaseId(databaseId)        .lang(lang)        .resultOrdered(resultOrdered)        .resultSets(resultSets)        .resultMaps(getStatementResultMaps(resultMap, resultType, id))        .resultSetType(resultSetType)        .flushCacheRequired(valueOrDefault(flushCache, !isSelect))        .useCache(valueOrDefault(useCache, isSelect))        .cache(currentCache);    ParameterMap statementParameterMap = getStatementParameterMap(parameterMap, parameterType, id);    if (statementParameterMap != null) {      statementBuilder.parameterMap(statementParameterMap);    }    MappedStatement statement = statementBuilder.build();    configuration.addMappedStatement(statement);    return statement;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "valueOrDefault", "params": ["T", "T"], "throws": null, "modifiers": ["private"], "return_type": "T", "snippet": "  private <T> T valueOrDefault(T value, T defaultValue) {    return value == null ? defaultValue : value;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatementParameterMap", "params": ["String", "Class<?>", "String"], "throws": null, "modifiers": ["private"], "return_type": "ParameterMap", "snippet": "  private ParameterMap getStatementParameterMap(      String parameterMapName,      Class<?> parameterTypeClass,      String statementId) {    parameterMapName = applyCurrentNamespace(parameterMapName, true);    ParameterMap parameterMap = null;    if (parameterMapName != null) {      try {        parameterMap = configuration.getParameterMap(parameterMapName);      } catch (IllegalArgumentException e) {        throw new IncompleteElementException(\"Could not find parameter map \" + parameterMapName, e);      }    } else if (parameterTypeClass != null) {      List<ParameterMapping> parameterMappings = new ArrayList<>();      parameterMap = new ParameterMap.Builder(          configuration,          statementId + \"-Inline\",          parameterTypeClass,          parameterMappings).build();    }    return parameterMap;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatementResultMaps", "params": ["String", "Class<?>", "String"], "throws": null, "modifiers": ["private"], "return_type": "List<ResultMap>", "snippet": "  private List<ResultMap> getStatementResultMaps(      String resultMap,      Class<?> resultType,      String statementId) {    resultMap = applyCurrentNamespace(resultMap, true);    List<ResultMap> resultMaps = new ArrayList<>();    if (resultMap != null) {      String[] resultMapNames = resultMap.split(\",\");      for (String resultMapName : resultMapNames) {        try {          resultMaps.add(configuration.getResultMap(resultMapName.trim()));        } catch (IllegalArgumentException e) {          throw new IncompleteElementException(\"Could not find result map '\" + resultMapName + \"' referenced from '\" + statementId + \"'\", e);        }      }    } else if (resultType != null) {      ResultMap inlineResultMap = new ResultMap.Builder(          configuration,          statementId + \"-Inline\",          resultType,          new ArrayList<>(),          null).build();      resultMaps.add(inlineResultMap);    }    return resultMaps;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "buildResultMapping", "params": ["Class<?>", "String", "String", "Class<?>", "JdbcType", "String", "String", "String", "String", "Class<TypeHandler>", "List<ResultFlag>", "String", "String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "ResultMapping", "snippet": "  public ResultMapping buildResultMapping(      Class<?> resultType,      String property,      String column,      Class<?> javaType,      JdbcType jdbcType,      String nestedSelect,      String nestedResultMap,      String notNullColumn,      String columnPrefix,      Class<? extends TypeHandler<?>> typeHandler,      List<ResultFlag> flags,      String resultSet,      String foreignColumn,      boolean lazy) {    Class<?> javaTypeClass = resolveResultJavaType(resultType, property, javaType);    TypeHandler<?> typeHandlerInstance = resolveTypeHandler(javaTypeClass, typeHandler);    List<ResultMapping> composites;    if ((nestedSelect == null || nestedSelect.isEmpty()) && (foreignColumn == null || foreignColumn.isEmpty())) {      composites = Collections.emptyList();    } else {      composites = parseCompositeColumnName(column);    }    return new ResultMapping.Builder(configuration, property, column, javaTypeClass)        .jdbcType(jdbcType)        .nestedQueryId(applyCurrentNamespace(nestedSelect, true))        .nestedResultMapId(applyCurrentNamespace(nestedResultMap, true))        .resultSet(resultSet)        .typeHandler(typeHandlerInstance)        .flags(flags == null ? new ArrayList<>() : flags)        .composites(composites)        .notNullColumns(parseMultipleColumnNames(notNullColumn))        .columnPrefix(columnPrefix)        .foreignColumn(foreignColumn)        .lazy(lazy)        .build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseMultipleColumnNames", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Set<String>", "snippet": "  private Set<String> parseMultipleColumnNames(String columnName) {    Set<String> columns = new HashSet<>();    if (columnName != null) {      if (columnName.indexOf(',') > -1) {        StringTokenizer parser = new StringTokenizer(columnName, \"{}, \", false);        while (parser.hasMoreTokens()) {          String column = parser.nextToken();          columns.add(column);        }      } else {        columns.add(columnName);      }    }    return columns;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseCompositeColumnName", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "List<ResultMapping>", "snippet": "  private List<ResultMapping> parseCompositeColumnName(String columnName) {    List<ResultMapping> composites = new ArrayList<>();    if (columnName != null && (columnName.indexOf('=') > -1 || columnName.indexOf(',') > -1)) {      StringTokenizer parser = new StringTokenizer(columnName, \"{}=, \", false);      while (parser.hasMoreTokens()) {        String property = parser.nextToken();        String column = parser.nextToken();        ResultMapping complexResultMapping = new ResultMapping.Builder(            configuration, property, column, configuration.getTypeHandlerRegistry().getUnknownTypeHandler()).build();        composites.add(complexResultMapping);      }    }    return composites;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveResultJavaType", "params": ["Class<?>", "String", "Class<?>"], "throws": null, "modifiers": ["private"], "return_type": "Class<?>", "snippet": "  private Class<?> resolveResultJavaType(Class<?> resultType, String property, Class<?> javaType) {    if (javaType == null && property != null) {      try {        MetaClass metaResultType = MetaClass.forClass(resultType, configuration.getReflectorFactory());        javaType = metaResultType.getSetterType(property);      } catch (Exception e) {        //ignore, following null check statement will deal with the situation      }    }    if (javaType == null) {      javaType = Object.class;    }    return javaType;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveParameterJavaType", "params": ["Class<?>", "String", "Class<?>", "JdbcType"], "throws": null, "modifiers": ["private"], "return_type": "Class<?>", "snippet": "  private Class<?> resolveParameterJavaType(Class<?> resultType, String property, Class<?> javaType, JdbcType jdbcType) {    if (javaType == null) {      if (JdbcType.CURSOR.equals(jdbcType)) {        javaType = java.sql.ResultSet.class;      } else if (Map.class.isAssignableFrom(resultType)) {        javaType = Object.class;      } else {        MetaClass metaResultType = MetaClass.forClass(resultType, configuration.getReflectorFactory());        javaType = metaResultType.getGetterType(property);      }    }    if (javaType == null) {      javaType = Object.class;    }    return javaType;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "buildResultMapping", "params": ["Class<?>", "String", "String", "Class<?>", "JdbcType", "String", "String", "String", "String", "Class<TypeHandler>", "List<ResultFlag>"], "throws": null, "modifiers": ["public"], "return_type": "ResultMapping", "snippet": "  public ResultMapping buildResultMapping(Class<?> resultType, String property, String column, Class<?> javaType,      JdbcType jdbcType, String nestedSelect, String nestedResultMap, String notNullColumn, String columnPrefix,      Class<? extends TypeHandler<?>> typeHandler, List<ResultFlag> flags) {    return buildResultMapping(      resultType, property, column, javaType, jdbcType, nestedSelect,      nestedResultMap, notNullColumn, columnPrefix, typeHandler, flags, null, null, configuration.isLazyLoadingEnabled());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLanguageDriver", "params": ["Class<LanguageDriver>"], "throws": null, "modifiers": ["public"], "return_type": "LanguageDriver", "snippet": "  public LanguageDriver getLanguageDriver(Class<? extends LanguageDriver> langClass) {    return configuration.getLanguageDriver(langClass);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "addMappedStatement", "params": ["String", "SqlSource", "StatementType", "SqlCommandType", "Integer", "Integer", "String", "Class<?>", "String", "Class<?>", "ResultSetType", "boolean", "boolean", "boolean", "KeyGenerator", "String", "String", "String", "LanguageDriver"], "throws": null, "modifiers": ["public"], "return_type": "MappedStatement", "snippet": "  public MappedStatement addMappedStatement(String id, SqlSource sqlSource, StatementType statementType,      SqlCommandType sqlCommandType, Integer fetchSize, Integer timeout, String parameterMap, Class<?> parameterType,      String resultMap, Class<?> resultType, ResultSetType resultSetType, boolean flushCache, boolean useCache,      boolean resultOrdered, KeyGenerator keyGenerator, String keyProperty, String keyColumn, String databaseId,      LanguageDriver lang) {    return addMappedStatement(      id, sqlSource, statementType, sqlCommandType, fetchSize, timeout,      parameterMap, parameterType, resultMap, resultType, resultSetType,      flushCache, useCache, resultOrdered, keyGenerator, keyProperty,      keyColumn, databaseId, lang, null);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java", "stars": "15", "class": {"name": "MapperBuilderAssistant", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "provideProviderManager", "params": ["MoviesProvider", "TVProvider", "AnimeProvider"], "throws": null, "modifiers": ["public"], "return_type": "ProviderManager", "snippet": "    public ProviderManager provideProviderManager(MoviesProvider moviesProvider,                                                  TVProvider tvProvider, AnimeProvider animeProvider) {        return new ProviderManager(moviesProvider, tvProvider, animeProvider);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/manager/ManagerModule.java", "stars": "4", "class": {"name": "ManagerModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPropsInYamlFile", "params": ["String", "File", "Props"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void setPropsInYamlFile(final String path, final File flowFile, final Props prop) {    final DumperOptions options = new DumperOptions();    options.setDefaultFlowStyle(FlowStyle.BLOCK);    final NodeBean nodeBean = FlowLoaderUtils.setPropsInNodeBean(path, flowFile, prop);    try (final BufferedWriter writer = Files        .newBufferedWriter(flowFile.toPath(), StandardCharsets.UTF_8)) {      new Yaml(options).dump(nodeBean, writer);    } catch (final IOException e) {      throw new ProjectManagerException(          \"Failed to set properties in flow file \" + flowFile.getName());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowLoaderUtils.java", "stars": "18", "class": {"name": "FlowLoaderUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPropsInNodeBean", "params": ["String", "File", "Props"], "throws": null, "modifiers": ["public", "static"], "return_type": "NodeBean", "snippet": "  public static NodeBean setPropsInNodeBean(final String path, final File flowFile,      final Props prop) {    final NodeBeanLoader loader = new NodeBeanLoader();    try {      final NodeBean nodeBean = loader.load(flowFile);      final String[] pathList = path.split(Constants.PATH_DELIMITER);      if (overridePropsInNodeBean(nodeBean, pathList, 0, prop)) {        return nodeBean;      } else {        logger.error(\"Error setting props for \" + path);      }    } catch (final Exception e) {      logger.error(\"Failed to set props, error loading flow YAML file \" + flowFile);    }    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowLoaderUtils.java", "stars": "18", "class": {"name": "FlowLoaderUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "overridePropsInNodeBean", "params": ["NodeBean", "String", "int", "Props"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "  private static boolean overridePropsInNodeBean(final NodeBean nodeBean, final String[] pathList,      final int idx, final Props prop) {    if (idx < pathList.length && nodeBean.getName().equals(pathList[idx])) {      if (idx == pathList.length - 1) {        if (prop.containsKey(Constants.NODE_TYPE)) {          nodeBean.setType(prop.get(Constants.NODE_TYPE));        }        final Map<String, String> config = prop.getFlattened();        config.remove(Constants.NODE_TYPE);        nodeBean.setConfig(config);        return true;      }      for (final NodeBean bean : nodeBean.getNodes()) {        if (overridePropsInNodeBean(bean, pathList, idx + 1, prop)) {          return true;        }      }    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowLoaderUtils.java", "stars": "18", "class": {"name": "FlowLoaderUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPropsFromYamlFile", "params": ["String", "File"], "throws": null, "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props getPropsFromYamlFile(final String path, final File flowFile) {    final List<Props> propsList = new ArrayList<>();    final NodeBeanLoader loader = new NodeBeanLoader();    try {      final NodeBean nodeBean = loader.load(flowFile);      final String[] pathList = path.split(Constants.PATH_DELIMITER);      if (findPropsFromNodeBean(nodeBean, pathList, 0, propsList)) {        if (!propsList.isEmpty()) {          return propsList.get(0);        } else {          logger.error(\"Error getting props for \" + path);        }      }    } catch (final Exception e) {      logger.error(\"Failed to get props, error loading flow YAML file. \", e);    }    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowLoaderUtils.java", "stars": "18", "class": {"name": "FlowLoaderUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findPropsFromNodeBean", "params": ["NodeBean", "String", "int", "List<Props>"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "  private static boolean findPropsFromNodeBean(final NodeBean nodeBean,      final String[] pathList, final int idx, final List<Props> propsList) {    if (idx < pathList.length && nodeBean.getName().equals(pathList[idx])) {      if (idx == pathList.length - 1) {        propsList.add(nodeBean.getProps());        return true;      }      for (final NodeBean bean : nodeBean.getNodes()) {        if (findPropsFromNodeBean(bean, pathList, idx + 1, propsList)) {          return true;        }      }    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowLoaderUtils.java", "stars": "18", "class": {"name": "FlowLoaderUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowTriggerFromYamlFile", "params": ["File"], "throws": null, "modifiers": ["public", "static"], "return_type": "FlowTrigger", "snippet": "  public static FlowTrigger getFlowTriggerFromYamlFile(final File flowFile) {    final NodeBeanLoader loader = new NodeBeanLoader();    try {      final NodeBean nodeBean = loader.load(flowFile);      return loader.toFlowTrigger(nodeBean.getTrigger());    } catch (final Exception e) {      logger.error(\"Failed to get flow trigger, error loading flow YAML file. \", e);    }    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowLoaderUtils.java", "stars": "18", "class": {"name": "FlowLoaderUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addEmailPropsToFlow", "params": ["Flow", "Props"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void addEmailPropsToFlow(final Flow flow, final Props prop) {    final List<String> successEmailList =        prop.getStringList(CommonJobProperties.SUCCESS_EMAILS,            Collections.EMPTY_LIST);    final Set<String> successEmail = new HashSet<>();    for (final String email : successEmailList) {      successEmail.add(email.toLowerCase());    }    final List<String> failureEmailList =        prop.getStringList(CommonJobProperties.FAILURE_EMAILS,            Collections.EMPTY_LIST);    final Set<String> failureEmail = new HashSet<>();    for (final String email : failureEmailList) {      failureEmail.add(email.toLowerCase());    }    final List<String> notifyEmailList =        prop.getStringList(CommonJobProperties.NOTIFY_EMAILS,            Collections.EMPTY_LIST);    for (String email : notifyEmailList) {      email = email.toLowerCase();      successEmail.add(email);      failureEmail.add(email);    }    flow.addFailureEmails(failureEmail);    flow.addSuccessEmails(successEmail);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowLoaderUtils.java", "stars": "18", "class": {"name": "FlowLoaderUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateFlowLoaderReport", "params": ["Set<String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "ValidationReport", "snippet": "  public static ValidationReport generateFlowLoaderReport(final Set<String> errors) {    final ValidationReport report = new ValidationReport();    report.addErrorMsgs(errors);    return report;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowLoaderUtils.java", "stars": "18", "class": {"name": "FlowLoaderUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkJobProperties", "params": ["int", "Props", "Map<String,Props>", "Set<String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void checkJobProperties(final int projectId, final Props props,      final Map<String, Props> jobPropsMap, final Set<String> errors) {    // if project is in the memory check whitelist, then we don't need to check    // its memory settings    if (ProjectWhitelist.isProjectWhitelisted(projectId,        ProjectWhitelist.WhitelistType.MemoryCheck)) {      return;    }    final MemConfValue maxXms = MemConfValue.parseMaxXms(props);    final MemConfValue maxXmx = MemConfValue.parseMaxXmx(props);    for (final String jobName : jobPropsMap.keySet()) {      final Props jobProps = jobPropsMap.get(jobName);      final String xms = jobProps.getString(XMS, null);      if (xms != null && !PropsUtils.isVariableReplacementPattern(xms)          && Utils.parseMemString(xms) > maxXms.getSize()) {        errors.add(String.format(            \"%s: Xms value has exceeded the allowed limit (max Xms = %s)\",            jobName, maxXms.getString()));      }      final String xmx = jobProps.getString(XMX, null);      if (xmx != null && !PropsUtils.isVariableReplacementPattern(xmx)          && Utils.parseMemString(xmx) > maxXmx.getSize()) {        errors.add(String.format(            \"%s: Xmx value has exceeded the allowed limit (max Xmx = %s)\",            jobName, maxXmx.getString()));      }      // job callback properties check      JobCallbackValidator.validate(jobName, props, jobProps, errors);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowLoaderUtils.java", "stars": "18", "class": {"name": "FlowLoaderUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cleanUpDir", "params": ["File"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void cleanUpDir(final File dir) {    try {      if (dir != null && dir.exists()) {        FileUtils.deleteDirectory(dir);      }    } catch (final IOException e) {      logger.error(\"Failed to delete the directory\", e);      dir.deleteOnExit();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowLoaderUtils.java", "stars": "18", "class": {"name": "FlowLoaderUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isAzkabanFlowVersion20", "params": ["double"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean isAzkabanFlowVersion20(final double azkabanFlowVersion) {    return Double.compare(azkabanFlowVersion, Constants.AZKABAN_FLOW_VERSION_2_0) == 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowLoaderUtils.java", "stars": "18", "class": {"name": "FlowLoaderUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "accept", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean accept(final File pathname) {      final String name = pathname.getName();      return pathname.isFile() && !pathname.isHidden()          && name.length() > this.suffix.length() && name.endsWith(this.suffix);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowLoaderUtils.java", "stars": "18", "class": {"name": "SuffixFilter", "extends": null, "implements": ["FileFilter"], "modifiers": ["public", "static"]}}, {"method_name": "accept", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean accept(final File pathname) {      return pathname.isDirectory();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowLoaderUtils.java", "stars": "18", "class": {"name": "DirFilter", "extends": null, "implements": ["FileFilter"], "modifiers": ["public", "static"]}}, {"method_name": "run", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void run() throws IOException {    if (this.isStarted() || this.isComplete()) {      throw new IllegalStateException(\"The process can only be used once.\");    }    final ProcessBuilder builder = new ProcessBuilder(this.cmd);    builder.directory(new File(this.workingDir));    builder.environment().putAll(this.env);    builder.redirectErrorStream(true);    this.process = builder.start();    try {      this.processId = processId(this.process);      if (this.processId == 0) {        this.logger.debug(\"Spawned thread with unknown process id\");      } else {        this.logger.debug(\"Spawned thread with process id \" + this.processId);      }      this.startupLatch.countDown();      final LogGobbler outputGobbler =          new LogGobbler(              new InputStreamReader(this.process.getInputStream(), StandardCharsets.UTF_8),              this.logger, Level.INFO, 30);      final LogGobbler errorGobbler =          new LogGobbler(              new InputStreamReader(this.process.getErrorStream(), StandardCharsets.UTF_8),              this.logger, Level.ERROR, 30);      outputGobbler.start();      errorGobbler.start();      int exitCode = -1;      try {        exitCode = this.process.waitFor();      } catch (final InterruptedException e) {        this.logger.info(\"Process interrupted. Exit code is \" + exitCode, e);      }      this.completeLatch.countDown();      // try to wait for everything to get logged out before exiting      outputGobbler.awaitCompletion(5000);      errorGobbler.awaitCompletion(5000);      if (exitCode != 0) {        final String output =            new StringBuilder().append(\"Stdout:\\n\")                .append(outputGobbler.getRecentLog()).append(\"\\n\\n\")                .append(\"Stderr:\\n\").append(errorGobbler.getRecentLog())                .append(\"\\n\").toString();        throw new ProcessFailureException(exitCode, output);      }    } finally {      IOUtils.closeQuietly(this.process.getInputStream());      IOUtils.closeQuietly(this.process.getOutputStream());      IOUtils.closeQuietly(this.process.getErrorStream());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcess.java", "stars": "18", "class": {"name": "AzkabanProcess", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "awaitCompletion", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void awaitCompletion() throws InterruptedException {    this.completeLatch.await();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcess.java", "stars": "18", "class": {"name": "AzkabanProcess", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "awaitStartup", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void awaitStartup() throws InterruptedException {    this.startupLatch.await();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcess.java", "stars": "18", "class": {"name": "AzkabanProcess", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProcessId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getProcessId() {    checkStarted();    return this.processId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcess.java", "stars": "18", "class": {"name": "AzkabanProcess", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "softKill", "params": ["long", "TimeUnit"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean softKill(final long time, final TimeUnit unit)      throws InterruptedException {    checkStarted();    if (this.processId != 0 && isStarted()) {      try {        if (this.isExecuteAsUser) {          final String cmd =              String.format(\"%s %s %s %d\", this.executeAsUserBinary,                  this.effectiveUser, KILL_COMMAND, this.processId);          Runtime.getRuntime().exec(cmd);        } else {          final String cmd = String.format(\"%s %d\", KILL_COMMAND, this.processId);          Runtime.getRuntime().exec(cmd);        }        return this.completeLatch.await(time, unit);      } catch (final IOException e) {        this.logger.error(\"Kill attempt failed.\", e);      }      return false;    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcess.java", "stars": "18", "class": {"name": "AzkabanProcess", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hardKill", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void hardKill() {    checkStarted();    this.logger.info(\"hardKill process and subprocess, \" + this.processId);    if (this.processId != 0) {      try {        // FIXME\u00a0Find all its child processes based on the parent process id and kill them. Solve the bug that the child process is not killed.        String killCmd = String.format(\"pstree -p %d | grep -oE '\\\\([0-9]+\\\\)' | grep -oE '[0-9]+' | xargs kill -9\", this.processId);        if (this.isExecuteAsUser) {          final String cmd =              String.format(\"%s %s %s\", this.executeAsUserBinary,                  this.effectiveUser, killCmd);          logger.info(String.format(\"run cmd [%s]\", cmd));          Process p = Runtime.getRuntime().exec(cmd);          p.waitFor(2500, TimeUnit.MILLISECONDS);        } else {          logger.info(\"exec cmd: \" + killCmd);          Process p = Runtime.getRuntime().exec(killCmd);          p.waitFor(2500, TimeUnit.MILLISECONDS);        }      } catch (final Exception e) {        this.logger.error(\"Kill attempt failed.\", e);      }    }    this.process.destroy();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcess.java", "stars": "18", "class": {"name": "AzkabanProcess", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "processId", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int processId(final java.lang.Process process) {    int processId = 0;    try {      final Field f = process.getClass().getDeclaredField(\"pid\");      f.setAccessible(true);      processId = f.getInt(process);    } catch (final Throwable e) {      e.printStackTrace();    }    return processId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcess.java", "stars": "18", "class": {"name": "AzkabanProcess", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isStarted", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isStarted() {    return this.startupLatch.getCount() == 0L;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcess.java", "stars": "18", "class": {"name": "AzkabanProcess", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isComplete", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isComplete() {    return this.completeLatch.getCount() == 0L;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcess.java", "stars": "18", "class": {"name": "AzkabanProcess", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isRunning", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isRunning() {    return isStarted() && !isComplete();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcess.java", "stars": "18", "class": {"name": "AzkabanProcess", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkStarted", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void checkStarted() {    if (!isStarted()) {      throw new IllegalStateException(\"Process has not yet started.\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcess.java", "stars": "18", "class": {"name": "AzkabanProcess", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"Process(cmd = \" + Joiner.on(\" \").join(this.cmd) + \", env = \" + this.env        + \", cwd = \" + this.workingDir + \")\";  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcess.java", "stars": "18", "class": {"name": "AzkabanProcess", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isExecuteAsUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isExecuteAsUser() {    return this.isExecuteAsUser;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcess.java", "stars": "18", "class": {"name": "AzkabanProcess", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEffectiveUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getEffectiveUser() {    return this.effectiveUser;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcess.java", "stars": "18", "class": {"name": "AzkabanProcess", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t/*\u7ee7\u627fObject\u7c7b\u7684\u7279\u5f81\u7684\u8bd5\u9a8c\u3002\t\tJicheng ji = new Jicheng();\t\tString s = ji.toString();\t\tSystem.out.println(s);\t\t*/\t\t\t\t//\u7ee7\u627f\u7684\u5b9e\u73b0\uff0cJichengdemo\u7ee7\u627fJichengtest\u3002\t\tJichengdemo j = new Jichengdemo();\t\tj.setActno(\"j-001\");\t\tj.setBanlance(-1000.0);\t\tj.setCredit(0.99);\t\t \t\tSystem.out.println(j.getActno() + \",\" + j.getBanlance() + \",\" + j.getCredit());\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Jicheng.java", "stars": "2", "class": {"name": "Jicheng", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "login", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String login() {\t\tUsuario usuario = usuarioDao.verificaUsuario(email, senha);\t\tif (usuario == null) {\t\t\tFacesUtil.addErrorMessage(\"Usu\u00e1rio ou senha invalidos\");\t\t\treturn \"login?faces-redirect=true\";\t\t} else {\t\t\t// criando uma sessao e setando o usuario na sessao\t\t\tHttpSession session = (HttpSession) FacesContext.getCurrentInstance().getExternalContext()\t\t\t\t\t.getSession(false);\t\t\tsession.setAttribute(\"UsuarioLogado\", usuario);\t\t\treturn \"dashboard?faces-redirect=true\";\t\t}\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/LoginBean.java", "stars": "1", "class": {"name": "LoginBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "logout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String logout() {\t\tHttpSession session = (HttpSession) FacesContext.getCurrentInstance().getExternalContext()\t\t\t\t.getSession(false);\t\t\t\tsession.invalidate();\t\treturn \"/login?faces-redirect=true\";\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/LoginBean.java", "stars": "1", "class": {"name": "LoginBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsuarioLogado", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getUsuarioLogado() {\t\tHttpSession session = (HttpSession) FacesContext.getCurrentInstance().getExternalContext()\t\t\t\t.getSession(false);\t\t\t\tUsuario usuario = (Usuario) session.getAttribute(\"UsuarioLogado\");\t\t\t\treturn usuario.getNome();\t\t\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/LoginBean.java", "stars": "1", "class": {"name": "LoginBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEmail", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getEmail() {\t\treturn email;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/LoginBean.java", "stars": "1", "class": {"name": "LoginBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEmail", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setEmail(String email) {\t\tthis.email = email;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/LoginBean.java", "stars": "1", "class": {"name": "LoginBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSenha", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getSenha() {\t\treturn senha;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/LoginBean.java", "stars": "1", "class": {"name": "LoginBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSenha", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setSenha(String senha) {\t\tthis.senha = senha;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/LoginBean.java", "stars": "1", "class": {"name": "LoginBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "makeDir", "params": ["File"], "throws": ["IOException"], "modifiers": ["static"], "return_type": "void", "snippet": "    static void makeDir(File directory) throws IOException {        if (directory.exists()) {            if (!directory.isDirectory()) {                throw new IOException(\"File \" + directory + \" is not directory!\");            }        } else {            boolean isCreated = directory.mkdirs();            if (!isCreated) {                throw new IOException(String.format(\"Directory %s can't be created\", directory.getAbsolutePath()));            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/Files.java", "stars": "2", "class": {"name": "Files", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getLruListFiles", "params": ["File"], "throws": null, "modifiers": ["static"], "return_type": "List<File>", "snippet": "    static List<File> getLruListFiles(File directory) {        List<File> result = new LinkedList<>();        File[] files = directory.listFiles();        if (files != null) {            result = Arrays.asList(files);            Collections.sort(result, new LastModifiedComparator());        }        return result;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/Files.java", "stars": "2", "class": {"name": "Files", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setLastModifiedNow", "params": ["File"], "throws": ["IOException"], "modifiers": ["static"], "return_type": "void", "snippet": "    static void setLastModifiedNow(File file) throws IOException {        if (file.exists()) {            long now = System.currentTimeMillis();            boolean modified = file.setLastModified(now); // on some devices (e.g. Nexus 5) doesn't work            if (!modified) {                modify(file);                if (file.lastModified() < now) {                    // NOTE: apparently this is a known issue (see: http://stackoverflow.com/questions/6633748/file-lastmodified-is-never-what-was-set-with-file-setlastmodified)                    HttpProxyCacheDebuger.printfWarning(\"Last modified date {} is not set for file {}\", new Date(file.lastModified()).toString() + \"\\n\" + file.getAbsolutePath());                }            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/Files.java", "stars": "2", "class": {"name": "Files", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "modify", "params": ["File"], "throws": ["IOException"], "modifiers": ["static"], "return_type": "void", "snippet": "    static void modify(File file) throws IOException {        long size = file.length();        if (size == 0) {            recreateZeroSizeFile(file);            return;        }        RandomAccessFile accessFile = new RandomAccessFile(file, \"rwd\");        accessFile.seek(size - 1);        byte lastByte = accessFile.readByte();        accessFile.seek(size - 1);        accessFile.write(lastByte);        accessFile.close();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/Files.java", "stars": "2", "class": {"name": "Files", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "recreateZeroSizeFile", "params": ["File"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void recreateZeroSizeFile(File file) throws IOException {        if (!file.delete() || !file.createNewFile()) {            throw new IOException(\"Error recreate zero-size file \" + file);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/Files.java", "stars": "2", "class": {"name": "Files", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "compare", "params": ["File", "File"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int compare(File lhs, File rhs) {            return compareLong(lhs.lastModified(), rhs.lastModified());        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/Files.java", "stars": "2", "class": {"name": "LastModifiedComparator", "extends": null, "implements": ["Comparator"], "modifiers": ["private", "static", "final"]}}, {"method_name": "compareLong", "params": ["long", "long"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "        private int compareLong(long first, long second) {            return (first < second) ? -1 : ((first == second) ? 0 : 1);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/Files.java", "stars": "2", "class": {"name": "LastModifiedComparator", "extends": null, "implements": ["Comparator"], "modifiers": ["private", "static", "final"]}}, {"method_name": "onInterceptTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onInterceptTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onInterceptTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRenderer.java", "stars": "2", "class": {"name": "ShellFlyoutRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onInterceptTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onInterceptTouchEvent (android.view.MotionEvent p0);\tpublic void onDrawerClosed (android.view.View p0)\t{\t\tn_onDrawerClosed (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRenderer.java", "stars": "2", "class": {"name": "ShellFlyoutRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerClosed", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerClosed (android.view.View p0)\t{\t\tn_onDrawerClosed (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRenderer.java", "stars": "2", "class": {"name": "ShellFlyoutRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerClosed", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerClosed (android.view.View p0);\tpublic void onDrawerOpened (android.view.View p0)\t{\t\tn_onDrawerOpened (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRenderer.java", "stars": "2", "class": {"name": "ShellFlyoutRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerOpened", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerOpened (android.view.View p0)\t{\t\tn_onDrawerOpened (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRenderer.java", "stars": "2", "class": {"name": "ShellFlyoutRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerOpened", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerOpened (android.view.View p0);\tpublic void onDrawerSlide (android.view.View p0, float p1)\t{\t\tn_onDrawerSlide (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRenderer.java", "stars": "2", "class": {"name": "ShellFlyoutRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerSlide", "params": ["android", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerSlide (android.view.View p0, float p1)\t{\t\tn_onDrawerSlide (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRenderer.java", "stars": "2", "class": {"name": "ShellFlyoutRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerSlide", "params": ["android", "float"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerSlide (android.view.View p0, float p1);\tpublic void onDrawerStateChanged (int p0)\t{\t\tn_onDrawerStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRenderer.java", "stars": "2", "class": {"name": "ShellFlyoutRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerStateChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerStateChanged (int p0)\t{\t\tn_onDrawerStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRenderer.java", "stars": "2", "class": {"name": "ShellFlyoutRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerStateChanged", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerStateChanged (int p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRenderer.java", "stars": "2", "class": {"name": "ShellFlyoutRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRenderer.java", "stars": "2", "class": {"name": "ShellFlyoutRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRenderer.java", "stars": "2", "class": {"name": "ShellFlyoutRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "setTimer", "params": ["float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setTimer(float speed) {        mc.timer.tickLength = 50.0f / speed;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/EntityUtil.java", "stars": "12", "class": {"name": "EntityUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "resetTimer", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void resetTimer() {        mc.timer.tickLength = 50;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/EntityUtil.java", "stars": "12", "class": {"name": "EntityUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "isColliding", "params": ["double", "double", "double"], "throws": null, "modifiers": ["public", "static"], "return_type": "Block", "snippet": "    public static Block isColliding(double posX, double posY, double posZ) {        Block block = null;        if (mc.player != null) {            final AxisAlignedBB bb = mc.player.getRidingEntity() != null ? mc.player.getRidingEntity().getEntityBoundingBox().contract(0.0d, 0.0d, 0.0d).offset(posX, posY, posZ) : mc.player.getEntityBoundingBox().contract(0.0d, 0.0d, 0.0d).offset(posX, posY, posZ);            int y = (int) bb.minY;            for (int x = MathHelper.floor(bb.minX); x < MathHelper.floor(bb.maxX) + 1; x++) {                for (int z = MathHelper.floor(bb.minZ); z < MathHelper.floor(bb.maxZ) + 1; z++) {                    block = mc.world.getBlockState(new BlockPos(x, y, z)).getBlock();                }            }        }        return block;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/EntityUtil.java", "stars": "12", "class": {"name": "EntityUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "isInLiquid", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isInLiquid() {        if (mc.player != null) {            if (mc.player.fallDistance >= 3.0f) {                return false;            }            boolean inLiquid = false;            final AxisAlignedBB bb = mc.player.getRidingEntity() != null ? mc.player.getRidingEntity().getEntityBoundingBox() : mc.player.getEntityBoundingBox();            int y = (int) bb.minY;            for (int x = MathHelper.floor(bb.minX); x < MathHelper.floor(bb.maxX) + 1; x++) {                for (int z = MathHelper.floor(bb.minZ); z < MathHelper.floor(bb.maxZ) + 1; z++) {                    final Block block = mc.world.getBlockState(new BlockPos(x, y, z)).getBlock();                    if (!(block instanceof BlockAir)) {                        if (!(block instanceof BlockLiquid)) {                            return false;                        }                        inLiquid = true;                    }                }            }            return inLiquid;        }        return false;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/EntityUtil.java", "stars": "12", "class": {"name": "EntityUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "isInBlock", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isInBlock() {        for (int x = MathHelper.floor(mc.player.getEntityBoundingBox().minX); x < MathHelper.floor(mc.player.getEntityBoundingBox().maxX) + 1; x++) {            for (int y = MathHelper.floor(mc.player.getEntityBoundingBox().minY); y < MathHelper.floor(mc.player.getEntityBoundingBox().maxY) + 1; y++) {                for (int z = MathHelper.floor(mc.player.getEntityBoundingBox().minZ); z < MathHelper.floor(mc.player.getEntityBoundingBox().maxZ) + 1; z++) {                    Block block = mc.world.getBlockState(new BlockPos(x, y, z)).getBlock();                    if ((block != null) && (!(block instanceof BlockAir))) {                        AxisAlignedBB boundingBox = block.getCollisionBoundingBox(mc.world.getBlockState(new BlockPos(x, y, z)), mc.world, new BlockPos(x, y, z));                        if ((block instanceof BlockHopper)) {                            boundingBox = new AxisAlignedBB(x, y, z, x + 1, y + 1, z + 1);                        }                        if ((boundingBox != null) && (mc.player.getEntityBoundingBox().intersects(boundingBox))) {                            return true;                        }                    }                }            }        }        return false;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/EntityUtil.java", "stars": "12", "class": {"name": "EntityUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "getBrowserIntent", "params": ["Context", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "    public static Intent getBrowserIntent(Context context, String url) {        if (TextUtils.isEmpty(url))            throw new IllegalArgumentException(\"url cannot be empty or null\");        return new Intent(Intent.ACTION_VIEW).setData(Uri.parse(url));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/IntentUtils.java", "stars": "4", "class": {"name": "IntentUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSendIntent", "params": ["Context", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "    public static Intent getSendIntent(Context context, String title, String text) {        if (TextUtils.isEmpty(text))            throw new IllegalArgumentException(\"text cannot be empty or null\");        if (TextUtils.isEmpty(title))            throw new IllegalArgumentException(\"title cannot be empty or null\");        Intent sendIntent = new Intent();        sendIntent.setAction(Intent.ACTION_SEND);        sendIntent.putExtra(Intent.EXTRA_TEXT, text);        sendIntent.setType(\"text/plain\");        return Intent.createChooser(sendIntent, title);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/IntentUtils.java", "stars": "4", "class": {"name": "IntentUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.activity_personal_data;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PersonalDataActivity.java", "stars": "1", "class": {"name": "PersonalDataActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        setOnClickListener(R.id.iv_person_data_avatar, R.id.fl_person_data_head,                R.id.sb_person_data_name, R.id.sb_person_data_address, R.id.sb_person_data_phone);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PersonalDataActivity.java", "stars": "1", "class": {"name": "PersonalDataActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        GlideApp.with(getActivity())                .load(R.drawable.ic_head_placeholder)                .placeholder(R.drawable.ic_head_placeholder)                .error(R.drawable.ic_head_placeholder)                .circleCrop()                .into(mAvatarView);        String address = mProvince + mCity + mArea;        mAddressView.setRightText(address);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PersonalDataActivity.java", "stars": "1", "class": {"name": "PersonalDataActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        switch (v.getId()) {            case R.id.iv_person_data_avatar:                if (mAvatarUrl != null && !\"\".equals(mAvatarUrl)) {                    // \u67e5\u770b\u5934\u50cf                    ImageActivity.start(getActivity(), mAvatarUrl);                } else {                    // \u9009\u62e9\u5934\u50cf                    onClick(findViewById(R.id.fl_person_data_head));                }                break;            case R.id.fl_person_data_head:                PhotoActivity.start(getActivity(), new PhotoActivity.OnPhotoSelectListener() {                    @Override                    public void onSelected(List<String> data) {                        if (true) {                            mAvatarUrl = data.get(0);                            GlideApp.with(getActivity())                                    .load(mAvatarUrl)                                    .into(mAvatarView);                            return;                        }                        // \u4e0a\u4f20\u5934\u50cf                        EasyHttp.post(getActivity())                                .api(new UpdateImageApi()                                        .setImage(new File(data.get(0))))                                .request(new HttpCallback<HttpData<String>>(PersonalDataActivity.this) {                                    @Override                                    public void onSucceed(HttpData<String> data) {                                        mAvatarUrl = data.getData();                                        GlideApp.with(getActivity())                                                .load(mAvatarUrl)                                                .into(mAvatarView);                                    }                                });                    }                    @Override                    public void onCancel() {}                });                break;            case R.id.sb_person_data_name:                new InputDialog.Builder(this)                        // \u6807\u9898\u53ef\u4ee5\u4e0d\u7528\u586b\u5199                        .setTitle(getString(R.string.personal_data_name_hint))                        .setContent(mNameView.getRightText())                        //.setHint(getString(R.string.personal_data_name_hint))                        //.setConfirm(\"\u786e\u5b9a\")                        // \u8bbe\u7f6e null \u8868\u793a\u4e0d\u663e\u793a\u53d6\u6d88\u6309\u94ae                        //.setCancel(\"\u53d6\u6d88\")                        // \u8bbe\u7f6e\u70b9\u51fb\u6309\u94ae\u540e\u4e0d\u5173\u95ed\u5bf9\u8bdd\u6846                        //.setAutoDismiss(false)                        .setListener((dialog, content) -> {                            if (!mNameView.getRightText().equals(content)) {                                mNameView.setRightText(content);                            }                        })                        .show();                break;            case R.id.sb_person_data_address:                new AddressDialog.Builder(this)                        //.setTitle(\"\u9009\u62e9\u5730\u533a\")                        // \u8bbe\u7f6e\u9ed8\u8ba4\u7701\u4efd                        .setProvince(mProvince)                        // \u8bbe\u7f6e\u9ed8\u8ba4\u57ce\u5e02\uff08\u5fc5\u987b\u8981\u5148\u8bbe\u7f6e\u9ed8\u8ba4\u7701\u4efd\uff09                        .setCity(mCity)                        // \u4e0d\u9009\u62e9\u53bf\u7ea7\u533a\u57df                        //.setIgnoreArea()                        .setListener((dialog, province, city, area) -> {                            String address = province + city + area;                            if (!mAddressView.getRightText().equals(address)) {                                mProvince = province;                                mCity = city;                                mArea = area;                                mAddressView.setRightText(address);                            }                        })                        .show();                break;            case R.id.sb_person_data_phone:                // \u5148\u5224\u65ad\u6709\u6ca1\u6709\u8bbe\u7f6e\u8fc7\u624b\u673a\u53f7                if (true) {                    startActivity(PhoneVerifyActivity.class);                } else {                    startActivity(PhoneResetActivity.class);                }                break;            default:                break;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PersonalDataActivity.java", "stars": "1", "class": {"name": "PersonalDataActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/OpenGLViewRenderer.java", "stars": "2", "class": {"name": "OpenGLViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/OpenGLViewRenderer.java", "stars": "2", "class": {"name": "OpenGLViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        canvas.drawRect(50, top, getWidth() - 50, bottom, paint1);        // \u4f7f\u7528 Paint.getTextBounds() \u8ba1\u7b97\u51fa\u6587\u5b57\u7684\u663e\u793a\u533a\u57df        // \u7136\u540e\u8ba1\u7b97\u51fa\u6587\u5b57\u7684\u7ed8\u5236\u4f4d\u7f6e\uff0c\u4ece\u800c\u8ba9\u6587\u5b57\u4e0a\u4e0b\u5c45\u4e2d        // \u8fd9\u79cd\u5c45\u4e2d\u7b97\u6cd5\u7684\u4f18\u70b9\u662f\uff0c\u53ef\u4ee5\u8ba9\u6587\u5b57\u7cbe\u51c6\u5730\u5c45\u4e2d\uff0c\u5206\u6beb\u4e0d\u5dee        int middle = (top + bottom) / 2;        canvas.drawText(texts[0], 100, middle + yOffsets[0], paint2);        canvas.drawText(texts[1], 200, middle + yOffsets[1], paint2);        canvas.drawText(texts[2], 300, middle + yOffsets[2], paint2);        canvas.drawText(texts[3], 400, middle + yOffsets[3], paint2);        canvas.drawText(texts[4], 500, middle + yOffsets[4], paint2);        canvas.drawText(texts[5], 600, middle + yOffsets[5], paint2);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson3/Practice13GetTextBoundsView.java", "stars": "2", "class": {"name": "Practice13GetTextBoundsView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "draw", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void draw(int mouseX, int mouseY, float partialTicks) {        Minecraft mc = Minecraft.getMinecraft();        Menu.font.drawStringWithShadow(\"lol\", 20, 20, -1);        ScaledResolution res = new ScaledResolution(mc);        Gui.drawRect((res.getScaledWidth() / 2) - 150, 20, (res.getScaledWidth() / 2) + 150, 500, new Color(0, 0, 0, 137).getRGB());    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/MainPanel.java", "stars": "12", "class": {"name": "MainPanel", "extends": "Panel", "implements": null, "modifiers": ["public"]}}, {"method_name": "mod", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int mod(int a, int b) {        return (a % b + b) % b;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/util/MathUtils.java", "stars": "74", "class": {"name": "MathUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mod", "params": ["float", "float"], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float mod(float a, float b) {        return (a % b + b) % b;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/util/MathUtils.java", "stars": "74", "class": {"name": "MathUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHalfWindIndex", "params": ["float"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getHalfWindIndex(float heading) {        float partitionSize = 360.0f / NUMBER_OF_HALF_WINDS;        float displacedHeading = MathUtils.mod(heading + partitionSize / 2, 360.0f);        return (int) (displacedHeading / partitionSize);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/util/MathUtils.java", "stars": "74", "class": {"name": "MathUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBearing", "params": ["double", "double", "double", "double"], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float getBearing(double latitude1, double longitude1, double latitude2,            double longitude2) {        latitude1 = Math.toRadians(latitude1);        longitude1 = Math.toRadians(longitude1);        latitude2 = Math.toRadians(latitude2);        longitude2 = Math.toRadians(longitude2);        double dLon = longitude2 - longitude1;        double y = Math.sin(dLon) * Math.cos(latitude2);        double x = Math.cos(latitude1) * Math.sin(latitude2) - Math.sin(latitude1)                * Math.cos(latitude2) * Math.cos(dLon);        double bearing = Math.atan2(y, x);        return mod((float) Math.toDegrees(bearing), 360.0f);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/util/MathUtils.java", "stars": "74", "class": {"name": "MathUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDistance", "params": ["double", "double", "double", "double"], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float getDistance(double latitude1, double longitude1, double latitude2,            double longitude2) {        double dLat = Math.toRadians(latitude2 - latitude1);        double dLon = Math.toRadians(longitude2 - longitude1);        double lat1 = Math.toRadians(latitude1);        double lat2 = Math.toRadians(latitude2);        double sqrtHaversineLat = Math.sin(dLat / 2);        double sqrtHaversineLon = Math.sin(dLon / 2);        double a = sqrtHaversineLat * sqrtHaversineLat + sqrtHaversineLon * sqrtHaversineLon                * Math.cos(lat1) * Math.cos(lat2);        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));        return (float) (EARTH_RADIUS_KM * c);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/util/MathUtils.java", "stars": "74", "class": {"name": "MathUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.items.add(() -> new FoodItemCustom());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/item/DeathCapMushroomItem.java", "stars": "2", "class": {"name": "DeathCapMushroomItem", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUseAction", "params": ["ItemStack"], "throws": null, "modifiers": ["public"], "return_type": "UseAction", "snippet": "\t\tpublic UseAction getUseAction(ItemStack par1ItemStack) {\t\t\treturn UseAction.EAT;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/item/DeathCapMushroomItem.java", "stars": "2", "class": {"name": "FoodItemCustom", "extends": "Item", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onItemUseFinish", "params": ["ItemStack", "World", "LivingEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack onItemUseFinish(ItemStack itemStack, World world, LivingEntity entity) {\t\t\tItemStack retval = super.onItemUseFinish(itemStack, world, entity);\t\t\tint x = (int) entity.getPosX();\t\t\tint y = (int) entity.getPosY();\t\t\tint z = (int) entity.getPosZ();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"entity\", entity);\t\t\t\tDeathCapMushroomFoodEatenProcedure.executeProcedure($_dependencies);\t\t\t}\t\t\treturn retval;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/item/DeathCapMushroomItem.java", "stars": "2", "class": {"name": "FoodItemCustom", "extends": "Item", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitives/Assetright.java", "stars": "15", "class": {"name": "Assetright", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitives/Assetright.java", "stars": "15", "class": {"name": "Assetright", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitives/Assetright.java", "stars": "15", "class": {"name": "Assetright", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitives/Assetright.java", "stars": "15", "class": {"name": "Assetright", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValues", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Long>", "snippet": "  public List<Long> getValues() {    return values;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitives/Assetright.java", "stars": "15", "class": {"name": "Assetright", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValues", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setValues(List<Long> values) {    this.values = values;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitives/Assetright.java", "stars": "15", "class": {"name": "Assetright", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/result_set_type/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    ScriptRunner runner = new ScriptRunner(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection());    runner.setDelimiter(\"go\");    runner.setLogWriter(null);    runner.setErrorLogWriter(null);    BaseDataTest.runScript(runner, \"org/apache/ibatis/submitted/result_set_type/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/result_set_type/ResultSetTypeTest.java", "stars": "15", "class": {"name": "ResultSetTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testWithStatement", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testWithStatement() {    test(mapper -> mapper.getUserWithStatementAndUnset(new RowBounds(5, 3)), 0);    test(mapper -> mapper.getUserWithStatementAndDefault(new RowBounds(4, 3)), 1);    test(mapper -> mapper.getUserWithStatementAndForwardOnly(new RowBounds(3, 3)), 2);    test(mapper -> mapper.getUserWithStatementAndScrollInsensitive(new RowBounds(2, 2)), 2);    test(mapper -> mapper.getUserWithStatementAndScrollSensitive(new RowBounds(1, 1)), 1);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/result_set_type/ResultSetTypeTest.java", "stars": "15", "class": {"name": "ResultSetTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testWithPrepared", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testWithPrepared() {    test(mapper -> mapper.getUserWithPreparedAndUnset(new RowBounds(5, 3)), 0);    test(mapper -> mapper.getUserWithPreparedAndDefault(new RowBounds(4, 3)), 1);    test(mapper -> mapper.getUserWithPreparedAndForwardOnly(new RowBounds(3, 3)), 2);    test(mapper -> mapper.getUserWithPreparedAndScrollInsensitive(new RowBounds(2, 2)), 2);    test(mapper -> mapper.getUserWithPreparedAndScrollSensitive(new RowBounds(1, 1)), 1);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/result_set_type/ResultSetTypeTest.java", "stars": "15", "class": {"name": "ResultSetTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testWithCallable", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testWithCallable() {    test(mapper -> mapper.getUserWithCallableAndUnset(new RowBounds(5, 3)), 0);    test(mapper -> mapper.getUserWithCallableAndDefault(new RowBounds(4, 3)), 1);    test(mapper -> mapper.getUserWithCallableAndForwardOnly(new RowBounds(3, 3)), 2);    test(mapper -> mapper.getUserWithCallableAndScrollInsensitive(new RowBounds(2, 2)), 2);    test(mapper -> mapper.getUserWithCallableAndScrollSensitive(new RowBounds(1, 1)), 1);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/result_set_type/ResultSetTypeTest.java", "stars": "15", "class": {"name": "ResultSetTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "test", "params": ["Function<Mapper,List>", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void test(Function<Mapper, List<User>> usersSupplier, int expectedSize) {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<User> users = usersSupplier.apply(mapper);      Assertions.assertEquals(expectedSize, users.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/result_set_type/ResultSetTypeTest.java", "stars": "15", "class": {"name": "ResultSetTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/LogDomain.java", "stars": "2", "class": {"name": "LogDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/LogDomain.java", "stars": "2", "class": {"name": "LogDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getAction", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAction() {        return action;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/LogDomain.java", "stars": "2", "class": {"name": "LogDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setAction", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAction(String action) {        this.action = action;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/LogDomain.java", "stars": "2", "class": {"name": "LogDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getData() {        return data;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/LogDomain.java", "stars": "2", "class": {"name": "LogDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setData", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(String data) {        this.data = data;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/LogDomain.java", "stars": "2", "class": {"name": "LogDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getAuthorId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getAuthorId() {        return authorId;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/LogDomain.java", "stars": "2", "class": {"name": "LogDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setAuthorId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAuthorId(Integer authorId) {        this.authorId = authorId;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/LogDomain.java", "stars": "2", "class": {"name": "LogDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getIp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getIp() {        return ip;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/LogDomain.java", "stars": "2", "class": {"name": "LogDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setIp", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIp(String ip) {        this.ip = ip;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/LogDomain.java", "stars": "2", "class": {"name": "LogDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCreated", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getCreated() {        return created;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/LogDomain.java", "stars": "2", "class": {"name": "LogDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCreated", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreated(Integer created) {        this.created = created;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/LogDomain.java", "stars": "2", "class": {"name": "LogDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getSerialVersionUID", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long getSerialVersionUID() {        return serialVersionUID;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/LogDomain.java", "stars": "2", "class": {"name": "LogDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        System.out.println(recommendator.getClass());    }", "url": "https://raw.githubusercontent.com/Jeka1978/coronadesinfectorlifedemo/master/src/main/java/com/epam/PolicemanImpl.java", "stars": "60", "class": {"name": "PolicemanImpl", "extends": null, "implements": ["Policeman"], "modifiers": ["public"]}}, {"method_name": "makePeopleLeaveRoom", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void makePeopleLeaveRoom() {        System.out.println(\"\u043f\u0438\u0444 \u043f\u0430\u0444, \u0431\u0430\u0445 \u0431\u0430\u0445, \u043a\u044b\u0448, \u043a\u044b\u0448!\");    }", "url": "https://raw.githubusercontent.com/Jeka1978/coronadesinfectorlifedemo/master/src/main/java/com/epam/PolicemanImpl.java", "stars": "60", "class": {"name": "PolicemanImpl", "extends": null, "implements": ["Policeman"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework03/src/com/fehead/beans/UserBean.java", "stars": "4", "class": {"name": "UserBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework03/src/com/fehead/beans/UserBean.java", "stars": "4", "class": {"name": "UserBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPassword() {        return password;    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework03/src/com/fehead/beans/UserBean.java", "stars": "4", "class": {"name": "UserBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPassword(String password) {        this.password = password;    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework03/src/com/fehead/beans/UserBean.java", "stars": "4", "class": {"name": "UserBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEmail", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEmail() {        return email;    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework03/src/com/fehead/beans/UserBean.java", "stars": "4", "class": {"name": "UserBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEmail", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEmail(String email) {        this.email = email;    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework03/src/com/fehead/beans/UserBean.java", "stars": "4", "class": {"name": "UserBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_detail_download_player);        ButterKnife.bind(this);        String url = getUrl();        //\u589e\u52a0\u5c01\u9762        ImageView imageView = new ImageView(this);        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        imageView.setImageResource(R.mipmap.xxx1);        resolveNormalVideoUI();        //\u5916\u90e8\u8f85\u52a9\u7684\u65cb\u8f6c\uff0c\u5e2e\u52a9\u5168\u5c4f        orientationUtils = new OrientationUtils(this, detailPlayer);        //\u521d\u59cb\u5316\u4e0d\u6253\u5f00\u5916\u90e8\u7684\u65cb\u8f6c        orientationUtils.setEnable(false);        Map<String, String> header = new HashMap<>();        header.put(\"ee\", \"33\");        header.put(\"allowCrossProtocolRedirects\", \"true\");        GSYVideoOptionBuilder gsyVideoOption = new GSYVideoOptionBuilder();        gsyVideoOption.setThumbImageView(imageView)                .setIsTouchWiget(true)                .setRotateViewAuto(false)                .setLockLand(false)                .setAutoFullWithSize(false)                .setShowFullAnimation(false)                .setNeedLockFull(true)                .setUrl(url)                .setMapHeadData(header)                .setCacheWithPlay(true)                .setVideoTitle(\"\u6d4b\u8bd5\u89c6\u9891\")                .setVideoAllCallBack(new GSYSampleCallBack() {                    @Override                    public void onPrepared(String url, Object... objects) {                        Debuger.printfError(\"***** onPrepared **** \" + objects[0]);                        Debuger.printfError(\"***** onPrepared **** \" + objects[1]);                        super.onPrepared(url, objects);                        //\u5f00\u59cb\u64ad\u653e\u4e86\u624d\u80fd\u65cb\u8f6c\u548c\u5168\u5c4f                        orientationUtils.setEnable(true);                        isPlay = true;                        //\u8bbe\u7f6e seek \u7684\u4e34\u8fd1\u5e27\u3002                        if (detailPlayer.getGSYVideoManager().getPlayer() instanceof Exo2PlayerManager) {                            ((Exo2PlayerManager) detailPlayer.getGSYVideoManager().getPlayer()).setSeekParameter(SeekParameters.NEXT_SYNC);                            Debuger.printfError(\"***** setSeekParameter **** \");                        }                    }                    @Override                    public void onEnterFullscreen(String url, Object... objects) {                        super.onEnterFullscreen(url, objects);                        Debuger.printfError(\"***** onEnterFullscreen **** \" + objects[0]);//title                        Debuger.printfError(\"***** onEnterFullscreen **** \" + objects[1]);//\u5f53\u524d\u5168\u5c4fplayer                    }                    @Override                    public void onAutoComplete(String url, Object... objects) {                        super.onAutoComplete(url, objects);                    }                    @Override                    public void onClickStartError(String url, Object... objects) {                        super.onClickStartError(url, objects);                    }                    @Override                    public void onQuitFullscreen(String url, Object... objects) {                        super.onQuitFullscreen(url, objects);                        Debuger.printfError(\"***** onQuitFullscreen **** \" + objects[0]);//title                        Debuger.printfError(\"***** onQuitFullscreen **** \" + objects[1]);//\u5f53\u524d\u975e\u5168\u5c4fplayer                        if (orientationUtils != null) {                            orientationUtils.backToProtVideo();                        }                    }                })                .setLockClickListener(new LockClickListener() {                    @Override                    public void onClick(View view, boolean lock) {                        if (orientationUtils != null) {                            //\u914d\u5408\u4e0b\u65b9\u7684onConfigurationChanged                            orientationUtils.setEnable(!lock);                        }                    }                })                .setGSYVideoProgressListener(new GSYVideoProgressListener() {                    @Override                    public void onProgress(int progress, int secProgress, int currentPosition, int duration) {                        Debuger.printfLog(\" progress \" + progress + \" secProgress \" + secProgress + \" currentPosition \" + currentPosition + \" duration \" + duration);                    }                })                .build(detailPlayer);        detailPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //\u76f4\u63a5\u6a2a\u5c4f                orientationUtils.resolveByClick();                //\u7b2c\u4e00\u4e2atrue\u662f\u5426\u9700\u8981\u9690\u85cfactionbar\uff0c\u7b2c\u4e8c\u4e2atrue\u662f\u5426\u9700\u8981\u9690\u85cfstatusbar                detailPlayer.startWindowFullscreen(DetailDownloadPlayer.this, true, true);            }        });        startDownLoad.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String url = proxyCacheServer.getProxyUrl(getUrl());                startDownload(url);            }        });        stopDownLoad.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                stopDownload();            }        });        proxyCacheServer = ProxyCacheManager.instance().newProxy(getApplicationContext());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailDownloadPlayer.java", "stars": "2", "class": {"name": "DetailDownloadPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (orientationUtils != null) {            orientationUtils.backToProtVideo();        }        if (GSYVideoManager.backFromWindowFull(this)) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailDownloadPlayer.java", "stars": "2", "class": {"name": "DetailDownloadPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        getCurPlay().onVideoPause();        super.onPause();        isPause = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailDownloadPlayer.java", "stars": "2", "class": {"name": "DetailDownloadPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        getCurPlay().onVideoResume(false);        super.onResume();        isPause = false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailDownloadPlayer.java", "stars": "2", "class": {"name": "DetailDownloadPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        if (isPlay) {            getCurPlay().release();        }        stopDownload();        if (orientationUtils != null)            orientationUtils.releaseListener();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailDownloadPlayer.java", "stars": "2", "class": {"name": "DetailDownloadPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onConfigurationChanged", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        //\u5982\u679c\u65cb\u8f6c\u4e86\u5c31\u5168\u5c4f        if (isPlay && !isPause) {            detailPlayer.onConfigurationChanged(this, newConfig, orientationUtils, true, true);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailDownloadPlayer.java", "stars": "2", "class": {"name": "DetailDownloadPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveNormalVideoUI", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveNormalVideoUI() {        //\u589e\u52a0title        detailPlayer.getTitleTextView().setVisibility(View.GONE);        detailPlayer.getBackButton().setVisibility(View.GONE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailDownloadPlayer.java", "stars": "2", "class": {"name": "DetailDownloadPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurPlay", "params": [], "throws": null, "modifiers": ["private"], "return_type": "GSYVideoPlayer", "snippet": "    private GSYVideoPlayer getCurPlay() {        if (detailPlayer.getFullWindowPlayer() != null) {            return detailPlayer.getFullWindowPlayer();        }        return detailPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailDownloadPlayer.java", "stars": "2", "class": {"name": "DetailDownloadPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getUrl() {        String url = \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";        return url;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailDownloadPlayer.java", "stars": "2", "class": {"name": "DetailDownloadPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "startDownload", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startDownload(String url) {        Debuger.printfError(\"###### url \" + url);        //\u4e0b\u8f7ddemo\u7136\u540e\u8bbe\u7f6e        requestCall = OkHttpUtils.get().url(url)                .build();        requestCall.execute(new MemoryCallBack() {            @Override            public void onError(Call call, Exception e, int id) {            }            @Override            public void onResponse(Boolean response, int id) {                stopDownload();            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailDownloadPlayer.java", "stars": "2", "class": {"name": "DetailDownloadPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "stopDownload", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void stopDownload() {        if (requestCall != null) {            requestCall.cancel();            requestCall = null;        }        if (proxyCacheServer != null) {            proxyCacheServer.shutdown();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailDownloadPlayer.java", "stars": "2", "class": {"name": "DetailDownloadPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return list.size();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/adapter/SimpleListVideoMode2Adapter.java", "stars": "2", "class": {"name": "SimpleListVideoMode2Adapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getItem(int position) {        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/adapter/SimpleListVideoMode2Adapter.java", "stars": "2", "class": {"name": "SimpleListVideoMode2Adapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getItemId(int position) {        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/adapter/SimpleListVideoMode2Adapter.java", "stars": "2", "class": {"name": "SimpleListVideoMode2Adapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView(final int position, View convertView, ViewGroup parent) {        final ViewHolder holder;        if (convertView == null) {            holder = new ViewHolder();            convertView = inflater.inflate(R.layout.list_video_simple_mode2, null);            holder.videoContainer = (FrameLayout) convertView.findViewById(R.id.list_item_container);            holder.playerBtn = (ImageView) convertView.findViewById(R.id.list_item_btn);            holder.imageView = new ImageView(context);            convertView.setTag(holder);        } else {            holder = (ViewHolder) convertView.getTag();        }        //\u589e\u52a0\u5c01\u9762        holder.imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        holder.imageView.setImageResource(R.mipmap.xxx1);        smallVideoHelper.addVideoPlayer(position, holder.imageView, TAG, holder.videoContainer, holder.playerBtn);        holder.playerBtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                notifyDataSetChanged();                smallVideoHelper.setPlayPositionAndTag(position, TAG);                final String url = \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";                gsySmallVideoHelperBuilder.setVideoTitle(\"title \" + position)                        .setUrl(url);                smallVideoHelper.startPlay();            }        });        return convertView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/adapter/SimpleListVideoMode2Adapter.java", "stars": "2", "class": {"name": "SimpleListVideoMode2Adapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setRootView", "params": ["ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRootView(ViewGroup rootView) {        this.rootView = rootView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/adapter/SimpleListVideoMode2Adapter.java", "stars": "2", "class": {"name": "SimpleListVideoMode2Adapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/primitives/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/primitives/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitives/PrimitivesTest.java", "stars": "15", "class": {"name": "PrimitivesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<Assetright> assetrights = mapper.select();      Assertions.assertEquals(2, assetrights.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitives/PrimitivesTest.java", "stars": "15", "class": {"name": "PrimitivesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "needShow", "params": ["Activity"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean needShow(Activity activity) {        if (activities == null) {            return true;        }        for (Class a : activities) {            if (a.isInstance(activity)) {                return showFlag;            }        }        return !showFlag;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatLifecycle.java", "stars": "2", "class": {"name": "FloatLifecycle", "extends": "BroadcastReceiver", "implements": ["Application"], "modifiers": []}}, {"method_name": "onActivityResumed", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityResumed(Activity activity) {        resumeCount++;        if (needShow(activity)) {            mLifecycleListener.onShow();        } else {            //mLifecycleListener.onHide();        }        if (appBackground) {            appBackground = false;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatLifecycle.java", "stars": "2", "class": {"name": "FloatLifecycle", "extends": "BroadcastReceiver", "implements": ["Application"], "modifiers": []}}, {"method_name": "onActivityPaused", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityPaused(Activity activity) {        resumeCount--;        mHandler.postDelayed(new Runnable() {            @Override            public void run() {                if (resumeCount == 0) {                    appBackground = true;                    //mLifecycleListener.onPostHide();                }            }        }, delay);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatLifecycle.java", "stars": "2", "class": {"name": "FloatLifecycle", "extends": "BroadcastReceiver", "implements": ["Application"], "modifiers": []}}, {"method_name": "onActivityStarted", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityStarted(Activity activity) {        startCount++;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatLifecycle.java", "stars": "2", "class": {"name": "FloatLifecycle", "extends": "BroadcastReceiver", "implements": ["Application"], "modifiers": []}}, {"method_name": "onActivityStopped", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityStopped(Activity activity) {        startCount--;        if (startCount == 0) {            //mLifecycleListener.onHide();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatLifecycle.java", "stars": "2", "class": {"name": "FloatLifecycle", "extends": "BroadcastReceiver", "implements": ["Application"], "modifiers": []}}, {"method_name": "onReceive", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onReceive(Context context, Intent intent) {        String action = intent.getAction();        if (action != null && action.equals(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)) {            String reason = intent.getStringExtra(SYSTEM_DIALOG_REASON_KEY);            if (SYSTEM_DIALOG_REASON_HOME_KEY.equals(reason)) {                //mLifecycleListener.onHide();            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatLifecycle.java", "stars": "2", "class": {"name": "FloatLifecycle", "extends": "BroadcastReceiver", "implements": ["Application"], "modifiers": []}}, {"method_name": "onActivityCreated", "params": ["Activity", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityCreated(Activity activity, Bundle savedInstanceState) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatLifecycle.java", "stars": "2", "class": {"name": "FloatLifecycle", "extends": "BroadcastReceiver", "implements": ["Application"], "modifiers": []}}, {"method_name": "onActivitySaveInstanceState", "params": ["Activity", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivitySaveInstanceState(Activity activity, Bundle outState) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatLifecycle.java", "stars": "2", "class": {"name": "FloatLifecycle", "extends": "BroadcastReceiver", "implements": ["Application"], "modifiers": []}}, {"method_name": "onActivityDestroyed", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityDestroyed(Activity activity) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatLifecycle.java", "stars": "2", "class": {"name": "FloatLifecycle", "extends": "BroadcastReceiver", "implements": ["Application"], "modifiers": []}}, {"method_name": "setUp", "params": [], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() {    currentContextClassLoader = Thread.currentThread().getContextClassLoader();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResolverUtilTest.java", "stars": "15", "class": {"name": "ResolverUtilTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getClasses", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void getClasses() {    assertEquals(new ResolverUtil<>().getClasses().size(), 0);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResolverUtilTest.java", "stars": "15", "class": {"name": "ResolverUtilTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getClassLoader", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void getClassLoader() {    assertEquals(new ResolverUtil<>().getClassLoader(), currentContextClassLoader);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResolverUtilTest.java", "stars": "15", "class": {"name": "ResolverUtilTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setClassLoader", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void setClassLoader() {    ResolverUtil resolverUtil = new ResolverUtil();    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {      resolverUtil.setClassLoader(new ClassLoader() {      });      return null;    });    assertNotEquals(resolverUtil.getClassLoader(), currentContextClassLoader);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResolverUtilTest.java", "stars": "15", "class": {"name": "ResolverUtilTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "findImplementationsWithNullPackageName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void findImplementationsWithNullPackageName() {    ResolverUtil<VFS> resolverUtil = new ResolverUtil<>();    resolverUtil.findImplementations(VFS.class, null);    assertEquals(resolverUtil.getClasses().size(), 0);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResolverUtilTest.java", "stars": "15", "class": {"name": "ResolverUtilTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "findImplementations", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void findImplementations() {    ResolverUtil<VFS> resolverUtil = new ResolverUtil<>();    resolverUtil.findImplementations(VFS.class, \"org.apache.ibatis.io\");    Set<Class<? extends VFS>> classSets = resolverUtil.getClasses();    //org.apache.ibatis.io.VFS    //org.apache.ibatis.io.DefaultVFS    //org.apache.ibatis.io.JBoss6VFS    assertEquals(classSets.size(), 3); //fail if add a new VFS implementation in this package!!!    classSets.forEach(c -> assertTrue(VFS.class.isAssignableFrom(c)));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResolverUtilTest.java", "stars": "15", "class": {"name": "ResolverUtilTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "findAnnotatedWithNullPackageName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void findAnnotatedWithNullPackageName() {    ResolverUtil<Object> resolverUtil = new ResolverUtil<>();    resolverUtil.findAnnotated(CacheNamespace.class, null);    assertEquals(resolverUtil.getClasses().size(), 0);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResolverUtilTest.java", "stars": "15", "class": {"name": "ResolverUtilTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "findAnnotated", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void findAnnotated() {    ResolverUtil<Object> resolverUtil = new ResolverUtil<>();    resolverUtil.findAnnotated(CacheNamespace.class, this.getClass().getPackage().getName());    Set<Class<?>> classSets = resolverUtil.getClasses();    //org.apache.ibatis.io.ResolverUtilTest.TestMapper    assertEquals(classSets.size(), 1);    classSets.forEach(c -> assertNotNull(c.getAnnotation(CacheNamespace.class)));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResolverUtilTest.java", "stars": "15", "class": {"name": "ResolverUtilTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "find", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void find() {    ResolverUtil<VFS> resolverUtil = new ResolverUtil<>();    resolverUtil.find(new ResolverUtil.IsA(VFS.class), \"org.apache.ibatis.io\");    Set<Class<? extends VFS>> classSets = resolverUtil.getClasses();    //org.apache.ibatis.io.VFS    //org.apache.ibatis.io.DefaultVFS    //org.apache.ibatis.io.JBoss6VFS    assertEquals(classSets.size(), 3);    classSets.forEach(c -> assertTrue(VFS.class.isAssignableFrom(c)));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResolverUtilTest.java", "stars": "15", "class": {"name": "ResolverUtilTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getPackagePath", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void getPackagePath() {    ResolverUtil resolverUtil = new ResolverUtil();    assertNull(resolverUtil.getPackagePath(null));    assertEquals(resolverUtil.getPackagePath(\"org.apache.ibatis.io\"), \"org/apache/ibatis/io\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResolverUtilTest.java", "stars": "15", "class": {"name": "ResolverUtilTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "addIfMatching", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void addIfMatching() {    ResolverUtil<VFS> resolverUtil = new ResolverUtil<>();    resolverUtil.addIfMatching(new ResolverUtil.IsA(VFS.class), \"org/apache/ibatis/io/DefaultVFS.class\");    resolverUtil.addIfMatching(new ResolverUtil.IsA(VFS.class), \"org/apache/ibatis/io/VFS.class\");    Set<Class<? extends VFS>> classSets = resolverUtil.getClasses();    assertEquals(classSets.size(), 2);    classSets.forEach(c -> assertTrue(VFS.class.isAssignableFrom(c)));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResolverUtilTest.java", "stars": "15", "class": {"name": "ResolverUtilTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "addIfNotMatching", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void addIfNotMatching() {    ResolverUtil<VFS> resolverUtil = new ResolverUtil<>();    resolverUtil.addIfMatching(new ResolverUtil.IsA(VFS.class), \"org/apache/ibatis/io/Xxx.class\");    assertEquals(resolverUtil.getClasses().size(), 0);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResolverUtilTest.java", "stars": "15", "class": {"name": "ResolverUtilTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testToString", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testToString() {    ResolverUtil.IsA isa = new ResolverUtil.IsA(VFS.class);    assertTrue(isa.toString().contains(VFS.class.getSimpleName()));    ResolverUtil.AnnotatedWith annotatedWith = new ResolverUtil.AnnotatedWith(CacheNamespace.class);    assertTrue(annotatedWith.toString().contains(\"@\" + CacheNamespace.class.getSimpleName()));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/ResolverUtilTest.java", "stars": "15", "class": {"name": "ResolverUtilTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "convert", "params": ["ItemDto"], "throws": null, "modifiers": ["public", "static"], "return_type": "TankBo", "snippet": "    public static TankBo convert(ItemDto tankDto) {        TankBo tankBo = new TankBo();        tankBo.setTankId(tankDto.getId());        tankBo.setUserId(tankDto.getId());        tankBo.setOrientationType(OrientationType.convert(tankDto.getOrientation()));        tankBo.setActionType(ActionType.convert(tankDto.getAction()));        tankBo.setX(tankDto.getX());        tankBo.setY(tankDto.getY());        tankBo.setType(TankTypeBo.getTankType(tankDto.getTypeId()));        tankBo.setAmmoCount(tankBo.getType().getAmmoMaxCount());        return tankBo;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/model/bo/TankBo.java", "stars": "2", "class": {"name": "TankBo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fire", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AmmoBo", "snippet": "    public AmmoBo fire() {        if (ammoCount <= 0) {            return null;        }        if (reloadTime != 0) {            return null;        }        //\u91cd\u7f6e\u91cd\u65b0\u586b\u88c5        --ammoCount;        reloadTime = type.getAmmoReloadTime();        return new AmmoBo(                   CommonUtil.getId(),                   this.tankId,                   this.teamType,                   type.getAmmoMaxLifeTime(),                   this.x,                   this.y,                   this.getType().getAmmoSpeed(),                   this.orientationType);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/model/bo/TankBo.java", "stars": "2", "class": {"name": "TankBo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addAmmoCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addAmmoCount() {        ++ammoCount;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/model/bo/TankBo.java", "stars": "2", "class": {"name": "TankBo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onRefresh", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onRefresh ()\t{\t\tn_onRefresh ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/SwipeRefreshLayout_OnRefreshListenerImplementor.java", "stars": "2", "class": {"name": "SwipeRefreshLayout_OnRefreshListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onRefresh", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onRefresh ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/SwipeRefreshLayout_OnRefreshListenerImplementor.java", "stars": "2", "class": {"name": "SwipeRefreshLayout_OnRefreshListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/SwipeRefreshLayout_OnRefreshListenerImplementor.java", "stars": "2", "class": {"name": "SwipeRefreshLayout_OnRefreshListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/SwipeRefreshLayout_OnRefreshListenerImplementor.java", "stars": "2", "class": {"name": "SwipeRefreshLayout_OnRefreshListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onRun", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRun(final String[] args) {        if (args.length <= 1) {            ChatUtil.print(\"Not enough args.\");            return;        }        switch (args[1]) {            case \"add\":                if (args.length > 1) {                    if (Mercury.INSTANCE.getFriendManager().isFriend(args[2])) {                        ChatUtil.print(args[2] + \" is already your friend.\");                        return;                    }                    if (args.length < 4) {                        ChatUtil.print(\"Added \" + args[2] + \" to your friends list without an alias.\");                        Mercury.INSTANCE.getFriendManager().addFriend(args[2]);                    } else {                        ChatUtil.print(\"Added \" + args[2] + \" to your friends list with the alias \" + args[3] + \".\");                        Mercury.INSTANCE.getFriendManager().addFriend(args[2], args[3]);                    }                }                break;            case \"del\":            case \"remove\":                if (args.length > 1) {                    if (!Mercury.INSTANCE.getFriendManager().isFriend(args[2])) {                        ChatUtil.print(args[2] + \" is not your friend.\");                        return;                    }                    if (Mercury.INSTANCE.getFriendManager().isFriend(args[2])) {                        ChatUtil.print(\"Removed \" + args[2] + \" from your friends list.\");                        Mercury.INSTANCE.getFriendManager().removeFriend(args[2]);                    }                }                break;            case \"clear\":                if (Mercury.INSTANCE.getFriendManager().getRegistry().isEmpty()) {                    ChatUtil.print(\"Your friends list is already empty.\");                    return;                }                ChatUtil.print(\"Your have cleared your friends list. Friends removed: \" + Mercury.INSTANCE.getFriendManager().getRegistry().size());                Mercury.INSTANCE.getFriendManager().clearFriends();                break;            case \"list\":                if (Mercury.INSTANCE.getFriendManager().getRegistry().isEmpty()) {                    ChatUtil.print(\"Your friends list is empty.\");                    return;                }                ChatUtil.print(\"Your current friends are: \");                Mercury.INSTANCE.getFriendManager().getRegistry().forEach(friend -> {                    ChatUtil.print(\"Username: \" + friend.getName() + (friend.getAlias() != null ? (\" - Alias: \" + friend.getAlias()) : \"\"));                });                break;        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/commands/FriendCommand.java", "stars": "12", "class": {"name": "FriendCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "dispatcherServlet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Servlet", "snippet": "\tpublic Servlet dispatcherServlet() {\t\treturn new GenericServlet() {\t\t\t@Override\t\t\tpublic void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {\t\t\t\tres.setContentType(\"text/plain\");\t\t\t\tres.getWriter().append(\"Hello World\");\t\t\t}\t\t};\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-servlet/src/main/java/smoketest/servlet/SampleServletApplication.java", "stars": "47572", "class": {"name": "SampleServletApplication", "extends": "SpringBootServletInitializer", "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["SpringApplicationBuilder"], "throws": null, "modifiers": ["protected"], "return_type": "SpringApplicationBuilder", "snippet": "\tprotected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\t\treturn application.sources(SampleServletApplication.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-servlet/src/main/java/smoketest/servlet/SampleServletApplication.java", "stars": "47572", "class": {"name": "SampleServletApplication", "extends": "SpringBootServletInitializer", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleServletApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-servlet/src/main/java/smoketest/servlet/SampleServletApplication.java", "stars": "47572", "class": {"name": "SampleServletApplication", "extends": "SpringBootServletInitializer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(XML)) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(), SQL);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dml_return_types/DmlMapperReturnTypesTest.java", "stars": "15", "class": {"name": "DmlMapperReturnTypesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "openSession", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void openSession() {    sqlSession = sqlSessionFactory.openSession();    mapper = sqlSession.getMapper(Mapper.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dml_return_types/DmlMapperReturnTypesTest.java", "stars": "15", "class": {"name": "DmlMapperReturnTypesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "closeSession", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void closeSession() {    sqlSession.close();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dml_return_types/DmlMapperReturnTypesTest.java", "stars": "15", "class": {"name": "DmlMapperReturnTypesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "updateShouldReturnVoid", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void updateShouldReturnVoid() {    mapper.updateReturnsVoid(new User(1, \"updateShouldReturnVoid\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dml_return_types/DmlMapperReturnTypesTest.java", "stars": "15", "class": {"name": "DmlMapperReturnTypesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldReturnPrimitiveInteger", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldReturnPrimitiveInteger() {    final int rows = mapper.updateReturnsPrimitiveInteger(new User(1, \"shouldReturnPrimitiveInteger\"));    assertEquals(1, rows);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dml_return_types/DmlMapperReturnTypesTest.java", "stars": "15", "class": {"name": "DmlMapperReturnTypesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldReturnInteger", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldReturnInteger() {    final Integer rows = mapper.updateReturnsInteger(new User(1, \"shouldReturnInteger\"));    assertEquals(Integer.valueOf(1), rows);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dml_return_types/DmlMapperReturnTypesTest.java", "stars": "15", "class": {"name": "DmlMapperReturnTypesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldReturnPrimitiveLong", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldReturnPrimitiveLong() {    final long rows = mapper.updateReturnsPrimitiveLong(new User(1, \"shouldReturnPrimitiveLong\"));    assertEquals(1L, rows);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dml_return_types/DmlMapperReturnTypesTest.java", "stars": "15", "class": {"name": "DmlMapperReturnTypesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldReturnLong", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldReturnLong() {    final Long rows = mapper.updateReturnsLong(new User(1, \"shouldReturnLong\"));    assertEquals(Long.valueOf(1), rows);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dml_return_types/DmlMapperReturnTypesTest.java", "stars": "15", "class": {"name": "DmlMapperReturnTypesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldReturnPrimitiveBoolean", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldReturnPrimitiveBoolean() {    final boolean rows = mapper.updateReturnsPrimitiveBoolean(new User(1, \"shouldReturnPrimitiveBoolean\"));    assertTrue(rows);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dml_return_types/DmlMapperReturnTypesTest.java", "stars": "15", "class": {"name": "DmlMapperReturnTypesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldReturnBoolean", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldReturnBoolean() {    final Boolean rows = mapper.updateReturnsBoolean(new User(1, \"shouldReturnBoolean\"));    assertTrue(rows);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dml_return_types/DmlMapperReturnTypesTest.java", "stars": "15", "class": {"name": "DmlMapperReturnTypesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getStringValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getStringValue() {    return stringValue;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/global_variables/CustomCache.java", "stars": "15", "class": {"name": "CustomCache", "extends": "PerpetualCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "setStringValue", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setStringValue(String stringValue) {    this.stringValue = stringValue;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/global_variables/CustomCache.java", "stars": "15", "class": {"name": "CustomCache", "extends": "PerpetualCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "getIntegerValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getIntegerValue() {    return integerValue;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/global_variables/CustomCache.java", "stars": "15", "class": {"name": "CustomCache", "extends": "PerpetualCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "setIntegerValue", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setIntegerValue(Integer integerValue) {    this.integerValue = integerValue;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/global_variables/CustomCache.java", "stars": "15", "class": {"name": "CustomCache", "extends": "PerpetualCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLongValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getLongValue() {    return longValue;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/global_variables/CustomCache.java", "stars": "15", "class": {"name": "CustomCache", "extends": "PerpetualCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "setLongValue", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLongValue(long longValue) {    this.longValue = longValue;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/global_variables/CustomCache.java", "stars": "15", "class": {"name": "CustomCache", "extends": "PerpetualCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void setup() {    typeHandlerRegistry = new TypeHandlerRegistry();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/Jsr310TypeHandlerRegistryTest.java", "stars": "15", "class": {"name": "Jsr310TypeHandlerRegistryTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldRegisterJsr310TypeHandlers", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldRegisterJsr310TypeHandlers() {    assertThat(typeHandlerRegistry.getTypeHandler(Instant.class))        .isInstanceOf(InstantTypeHandler.class);    assertThat(typeHandlerRegistry.getTypeHandler(LocalDateTime.class))        .isInstanceOf(LocalDateTimeTypeHandler.class);    assertThat(typeHandlerRegistry.getTypeHandler(LocalDate.class))        .isInstanceOf(LocalDateTypeHandler.class);    assertThat(typeHandlerRegistry.getTypeHandler(LocalTime.class))        .isInstanceOf(LocalTimeTypeHandler.class);    assertThat(typeHandlerRegistry.getTypeHandler(OffsetDateTime.class))        .isInstanceOf(OffsetDateTimeTypeHandler.class);    assertThat(typeHandlerRegistry.getTypeHandler(OffsetTime.class))        .isInstanceOf(OffsetTimeTypeHandler.class);    assertThat(typeHandlerRegistry.getTypeHandler(ZonedDateTime.class))        .isInstanceOf(ZonedDateTimeTypeHandler.class);    assertThat(typeHandlerRegistry.getTypeHandler(Month.class))        .isInstanceOf(MonthTypeHandler.class);    assertThat(typeHandlerRegistry.getTypeHandler(Year.class))        .isInstanceOf(YearTypeHandler.class);    assertThat(typeHandlerRegistry.getTypeHandler(YearMonth.class))        .isInstanceOf(YearMonthTypeHandler.class);    assertThat(typeHandlerRegistry.getTypeHandler(JapaneseDate.class))        .isInstanceOf(JapaneseDateTypeHandler.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/Jsr310TypeHandlerRegistryTest.java", "stars": "15", "class": {"name": "Jsr310TypeHandlerRegistryTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "peek", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Token", "snippet": "    public Token peek() {        return hasMore() ? tokens.get(pos) : null;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "peekPrevious", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Token", "snippet": "    public Token peekPrevious() {        return pos - 1 < 0 ? null : tokens.get(pos - 2);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "next", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Token", "snippet": "    public Token next() {        return tokens.get(pos++);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "back", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void back() {        pos = Math.max(0, --pos);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "hasMore", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasMore() {        return pos < tokens.size();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "size", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int size() {        return tokens.size();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "isEmpty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEmpty() {        return tokens.isEmpty();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "contains", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean contains(Object o) {        return tokens.contains(o);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "iterator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Iterator<Token>", "snippet": "    public Iterator<Token> iterator() {        return tokens.iterator();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "toArray", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object[] toArray() {        return tokens.toArray();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "toArray", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T[] toArray(T[] a) {        return tokens.toArray(a);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "add", "params": ["Token"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean add(Token token) {        return tokens.add(token);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "remove", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean remove(Object o) {        return tokens.remove(o);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "containsAll", "params": ["Collection<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean containsAll(Collection<?> c) {        return tokens.containsAll(c);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "addAll", "params": ["Collection<Token>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean addAll(Collection<? extends Token> c) {        return tokens.addAll(c);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "addAll", "params": ["int", "Collection<Token>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean addAll(int index, Collection<? extends Token> c) {        return tokens.addAll(index, c);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "removeAll", "params": ["Collection<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean removeAll(Collection<?> c) {        return tokens.removeAll(c);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "retainAll", "params": ["Collection<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean retainAll(Collection<?> c) {        return tokens.retainAll(c);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        tokens.clear();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "get", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Token", "snippet": "    public Token get(int index) {        return tokens.get(index);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "set", "params": ["int", "Token"], "throws": null, "modifiers": ["public"], "return_type": "Token", "snippet": "    public Token set(int index, Token element) {        return tokens.set(index, element);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "add", "params": ["int", "Token"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void add(int index, Token element) {        tokens.add(index, element);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "remove", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Token", "snippet": "    public Token remove(int index) {        return tokens.remove(index);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "indexOf", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int indexOf(Object o) {        return tokens.indexOf(o);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "lastIndexOf", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int lastIndexOf(Object o) {        return tokens.lastIndexOf(o);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "listIterator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ListIterator<Token>", "snippet": "    public ListIterator<Token> listIterator() {        return tokens.listIterator();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "listIterator", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ListIterator<Token>", "snippet": "    public ListIterator<Token> listIterator(int index) {        return tokens.listIterator(index);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "subList", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<Token>", "snippet": "    public List<Token> subList(int fromIndex, int toIndex) {        return tokens.subList(fromIndex, toIndex);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        StringBuilder sb = new StringBuilder();        tokens.forEach(token -> sb.append(token).append(\"\\n\"));        return sb.toString();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/TokenList.java", "stars": "2", "class": {"name": "TokenList", "extends": null, "implements": ["List"], "modifiers": ["public"]}}, {"method_name": "uncaughtException", "params": ["Thread", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void uncaughtException(Thread unusedThread, final Throwable e) {    activity.runOnUiThread(new Runnable() {      @Override      public void run() {        String title = \"Fatal error: \" + getTopLevelCauseMessage(e);        String msg = getRecursiveStackTrace(e);        TextView errorView = new TextView(activity);        errorView.setText(msg);        errorView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 8);        ScrollView scrollingContainer = new ScrollView(activity);        scrollingContainer.addView(errorView);        Log.e(TAG, title + \"\\n\\n\" + msg);        DialogInterface.OnClickListener listener = new DialogInterface.OnClickListener() {          @Override          public void onClick(DialogInterface dialog, int which) {            dialog.dismiss();            System.exit(1);          }        };        AlertDialog.Builder builder = new AlertDialog.Builder(activity);        builder.setTitle(title)            .setView(scrollingContainer)            .setPositiveButton(\"Exit\", listener)            .show();      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/UnhandledExceptionHandler.java", "stars": "2", "class": {"name": "UnhandledExceptionHandler", "extends": null, "implements": ["Thread"], "modifiers": ["public"]}}, {"method_name": "getTopLevelCauseMessage", "params": ["Throwable"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String getTopLevelCauseMessage(Throwable t) {    Throwable topLevelCause = t;    while (topLevelCause.getCause() != null) {      topLevelCause = topLevelCause.getCause();    }    return topLevelCause.getMessage();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/UnhandledExceptionHandler.java", "stars": "2", "class": {"name": "UnhandledExceptionHandler", "extends": null, "implements": ["Thread"], "modifiers": ["public"]}}, {"method_name": "getRecursiveStackTrace", "params": ["Throwable"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String getRecursiveStackTrace(Throwable t) {    StringWriter writer = new StringWriter();    t.printStackTrace(new PrintWriter(writer));    return writer.toString();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/UnhandledExceptionHandler.java", "stars": "2", "class": {"name": "UnhandledExceptionHandler", "extends": null, "implements": ["Thread"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/column_forwarding/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/column_forwarding/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_forwarding/ColumnForwardingTest.java", "stars": "15", "class": {"name": "ColumnForwardingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetUserWithGroup", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetUserWithGroup() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1);      Assertions.assertNotNull(user);      Assertions.assertNotNull(user.getId());      Assertions.assertEquals(\"active\", user.getState());      Assertions.assertNotNull(user.getGroup());      Assertions.assertNotNull(user.getGroup().getId());      Assertions.assertEquals(\"active\", user.getGroup().getState());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_forwarding/ColumnForwardingTest.java", "stars": "15", "class": {"name": "ColumnForwardingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetUserWithoutGroup", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetUserWithoutGroup() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(2);      Assertions.assertNotNull(user);      Assertions.assertNotNull(user.getId());      Assertions.assertNull(user.getState());      Assertions.assertNull(user.getGroup());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_forwarding/ColumnForwardingTest.java", "stars": "15", "class": {"name": "ColumnForwardingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        System.out.println(\"\u61d2\u6c49\u5f0f3\uff0c\u7ebf\u7a0b\u5b89\u5168\uff0c\u540c\u6b65\u4ee3\u7801\u5757\");        Singleton instance1 = Singleton.getInstance();        Singleton instance2 = Singleton.getInstance();        System.out.println(instance1 == instance2);        System.out.println(\"instance1 \u7684 hashCode \u503c\u4e3a\uff1a\" + instance1.hashCode());        System.out.println(\"instance2 \u7684 hashCode \u503c\u4e3a\uff1a\" + instance2.hashCode());    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/singleton/type5/SingletonTest05.java", "stars": "2", "class": {"name": "SingletonTest05", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Singleton", "snippet": "    public static Singleton getInstance(){        if(instance == null){            synchronized (Singleton.class) {                instance = new Singleton();            }        }        return instance;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/singleton/type5/SingletonTest05.java", "stars": "2", "class": {"name": "Singleton", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSalt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] getSalt() {        return salt;    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/VaultContent.java", "stars": "7", "class": {"name": "VaultContent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHmac", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] getHmac() {        return hmac;    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/VaultContent.java", "stars": "7", "class": {"name": "VaultContent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] getData() {        return data;    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/VaultContent.java", "stars": "7", "class": {"name": "VaultContent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toByteArray", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] toByteArray() {        return toString().getBytes();    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/VaultContent.java", "stars": "7", "class": {"name": "VaultContent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        logger.debug(\"Salt: {} - HMAC: {} - Data: {} - TargetLen: {}\"                , salt.length, hmac.length, data.length, (salt.length + hmac.length + data.length) * 2);        String saltString = Util.hexit(salt);        logger.debug(\"Salt String Length: {}\", saltString.length());        String hmacString = Util.hexit(hmac);        logger.debug(\"HMAC String Length: {}\", hmacString.length());        String dataString = Util.hexit(data, -1);        logger.debug(\"DATA String Length: {}\", dataString.length());        String complete = saltString + \"\\n\" + hmacString + \"\\n\" + dataString;        logger.debug(\"Complete: {} \\n{}\", complete.length(), complete);        String result = Util.hexit(complete.getBytes(), 80);        logger.debug(\"Result: [{}] {}\\n{}\", complete.length() * 2, result.length(), result);        return result;    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/VaultContent.java", "stars": "7", "class": {"name": "VaultContent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataLengths", "params": ["byte"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int[] getDataLengths(byte[] encodedData) throws IOException {        int[] result = new int[3];        int idx = 0;        int saltLen = 0;        while (encodedData[idx] != '\\n' && idx < encodedData.length) {            saltLen++;            idx++;        }        // Skip the newline        idx++;        if (idx == encodedData.length) {            throw new IOException(\"Malformed data - salt incomplete\");        }        result[0] = saltLen;        int hmacLen = 0;        while (encodedData[idx] != '\\n' && idx < encodedData.length) {            hmacLen++;            idx++;        }        // Skip the newline        idx++;        if (idx == encodedData.length) {            throw new IOException(\"Malformed data - hmac incomplete\");        }        result[1] = hmacLen;        int dataLen = 0;        while (idx < encodedData.length) {            dataLen++;            idx++;        }        result[2] = dataLen;        return result;    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/VaultContent.java", "stars": "7", "class": {"name": "VaultContent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "splitData", "params": ["byte"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte[][] splitData(byte[] encodedData) throws IOException {        int[] partsLength = getDataLengths(encodedData);        byte[][] result = new byte[3][];        int idx = 0;        int saltIdx = 0;        result[0] = new byte[partsLength[0]];        while (encodedData[idx] != '\\n' && idx < encodedData.length) {            result[0][saltIdx++] = encodedData[idx++];        }        // Skip the newline        idx++;        if (idx == encodedData.length) {            throw new IOException(\"Malformed data - salt incomplete\");        }        int macIdx = 0;        result[1] = new byte[partsLength[1]];        while (encodedData[idx] != '\\n' && idx < encodedData.length) {            result[1][macIdx++] = encodedData[idx++];        }        // Skip the newline        idx++;        if (idx == encodedData.length) {            throw new IOException(\"Malformed data - hmac incomplete\");        }        int dataIdx = 0;        result[2] = new byte[partsLength[2]];        while (idx < encodedData.length) {            result[2][dataIdx++] = encodedData[idx++];        }        return result;    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/VaultContent.java", "stars": "7", "class": {"name": "VaultContent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "permute", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<List>", "snippet": "    public List<List<Integer>> permute(int[] nums) {        ans = new LinkedList<>();        permute(nums, 0, new LinkedList<>());        return ans;    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/Permutations.java", "stars": "1", "class": {"name": "Permutations", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "permute", "params": ["int", "int", "LinkedList<Integer>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void permute(int[] nums, int index, LinkedList<Integer> curr) {        if(index == nums.length) {            ans.add(new LinkedList<>(curr));            return;        }        for(int i = 0; i <= curr.size(); i ++) {            curr.add(i, nums[index]);            permute(nums, index + 1, curr);            curr.remove(i);        }    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/Permutations.java", "stars": "1", "class": {"name": "Permutations", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getmInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "BleCarParams", "snippet": "    public static BleCarParams getmInstance() {        if (a == null) {            synchronized (BleCarParams.class) {                if (a == null)                    a = new BleCarParams();            }        }        return a;        // Byte code:        //   0: getstatic com/dracom/android/balancecar/common/bluetooth/a/c.a : Lcom/dracom/android/balancecar/common/bluetooth/a/c;        //   3: ifnonnull -> 28        //   6: ldc com/dracom/android/balancecar/common/bluetooth/a/c        //   8: monitorenter        //   9: getstatic com/dracom/android/balancecar/common/bluetooth/a/c.a : Lcom/dracom/android/balancecar/common/bluetooth/a/c;        //   12: ifnonnull -> 25        //   15: new com/dracom/android/balancecar/common/bluetooth/a/c        //   18: dup        //   19: invokespecial <init> : ()V        //   22: putstatic com/dracom/android/balancecar/common/bluetooth/a/c.a : Lcom/dracom/android/balancecar/common/bluetooth/a/c;        //   25: ldc com/dracom/android/balancecar/common/bluetooth/a/c        //   27: monitorexit        //   28: getstatic com/dracom/android/balancecar/common/bluetooth/a/c.a : Lcom/dracom/android/balancecar/common/bluetooth/a/c;        //   31: areturn        //   32: astore_0        //   33: ldc com/dracom/android/balancecar/common/bluetooth/a/c        //   35: monitorexit        //   36: aload_0        //   37: athrow        // Exception table:        //   from\tto\ttarget\ttype        //   9\t25\t32\tfinally        //   25\t28\t32\tfinally        //   33\t36\t32\tfinally    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/app/src/main/java/com/wxwteam/bleapp/bean/BleCarParams.java", "stars": "2", "class": {"name": "BleCarParams", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setNull", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setNull() {        if (a != null)            a = null;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/app/src/main/java/com/wxwteam/bleapp/bean/BleCarParams.java", "stars": "2", "class": {"name": "BleCarParams", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCarSerialNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCarSerialNumber() {        return (this.carSerialNumber == null) ? \"\" : this.carSerialNumber;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/app/src/main/java/com/wxwteam/bleapp/bean/BleCarParams.java", "stars": "2", "class": {"name": "BleCarParams", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCarSerialNumber", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCarSerialNumber(String paramString) {        this.carSerialNumber = paramString;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/app/src/main/java/com/wxwteam/bleapp/bean/BleCarParams.java", "stars": "2", "class": {"name": "BleCarParams", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)      throws ServletException, IOException {    doPost(req, resp);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ServerStatisticsServlet.java", "stars": "18", "class": {"name": "ServerStatisticsServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)      throws ServletException, IOException {    final boolean noCache = null != req && Boolean.valueOf(req.getParameter(noCacheParamName));    if (noCache || System.currentTimeMillis() - lastRefreshedTime > cacheTimeInMilliseconds) {      this.populateStatistics(noCache);    }    JSONUtils.toJSON(cachedstats, resp.getOutputStream(), true);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ServerStatisticsServlet.java", "stars": "18", "class": {"name": "ServerStatisticsServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "fillRemainingMemoryPercent", "params": ["ExecutorInfo"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void fillRemainingMemoryPercent(final ExecutorInfo stats) {    if (exists_Bash && exists_Cat && exists_Grep && exists_Meminfo) {      final java.lang.ProcessBuilder processBuilder =          new java.lang.ProcessBuilder(\"/bin/bash\", \"-c\",              \"/bin/cat /proc/meminfo | grep -E \\\"^MemTotal:|^MemFree:|^Buffers:|^Cached:|^SwapCached:\\\"\");      try {        final ArrayList<String> output = new ArrayList<>();        final Process process = processBuilder.start();        process.waitFor();        final InputStream inputStream = process.getInputStream();        try {          final java.io.BufferedReader reader = new java.io.BufferedReader(              new InputStreamReader(inputStream, StandardCharsets.UTF_8));          String line = null;          while ((line = reader.readLine()) != null) {            output.add(line);          }        } finally {          inputStream.close();        }        long totalMemory = 0;        long totalFreeMemory = 0;        Long parsedResult = (long) 0;        // process the output from bash call.        // we expect the result from the bash call to be something like following -        // MemTotal:       65894264 kB        // MemFree:        57753844 kB        // Buffers:          305552 kB        // Cached:          3802432 kB        // SwapCached:            0 kB        // Note : total free memory = freeMemory + cached + buffers + swapCached        // TODO : think about merging the logic in systemMemoryInfo as the logic is similar        if (output.size() == 5) {          for (final String result : output) {            // find the total memory and value the variable.            parsedResult = extractMemoryInfo(\"MemTotal\", result);            if (null != parsedResult) {              totalMemory = parsedResult;              continue;            }            // find the free memory.            parsedResult = extractMemoryInfo(\"MemFree\", result);            if (null != parsedResult) {              totalFreeMemory += parsedResult;              continue;            }            // find the Buffers.            parsedResult = extractMemoryInfo(\"Buffers\", result);            if (null != parsedResult) {              totalFreeMemory += parsedResult;              continue;            }            // find the Cached.            parsedResult = extractMemoryInfo(\"SwapCached\", result);            if (null != parsedResult) {              totalFreeMemory += parsedResult;              continue;            }            // find the Cached.            parsedResult = extractMemoryInfo(\"Cached\", result);            if (null != parsedResult) {              totalFreeMemory += parsedResult;              continue;            }          }        } else {          logger.error(              \"failed to get total/free memory info as the bash call returned invalid result.\"                  + String.format(\" Output from the bash call - %s \", output.toString()));        }        // the number got from the proc file is in KBs we want to see the number in MBs so we are dividing it by 1024.        stats.setRemainingMemoryInMB(totalFreeMemory / 1024);        stats.setRemainingMemoryPercent(            totalMemory == 0 ? 0 : ((double) totalFreeMemory / (double) totalMemory) * 100);      } catch (final Exception ex) {        logger.error(\"failed fetch system memory info \"            + \"as exception is captured when fetching result from bash call. Ex -\" + ex            .getMessage());      }    } else {      logger.error(          \"failed fetch system memory info, one or more files from the following list are missing -  \"              + \"'/bin/bash',\" + \"'/bin/cat',\" + \"'/proc/loadavg'\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ServerStatisticsServlet.java", "stars": "18", "class": {"name": "ServerStatisticsServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "extractMemoryInfo", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "Long", "snippet": "  private Long extractMemoryInfo(final String field, final String result) {    Long returnResult = null;    if (null != result && null != field && result.matches(String.format(\"^%s:.*\", field))        && result.split(\"\\\\s+\").length > 2) {      try {        returnResult = Long.parseLong(result.split(\"\\\\s+\")[1]);        logger.debug(field + \":\" + returnResult);      } catch (final NumberFormatException e) {        returnResult = 0L;        logger.error(String.format(\"yielding 0 for %s as output is invalid - %s\", field, result));      }    }    return returnResult;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ServerStatisticsServlet.java", "stars": "18", "class": {"name": "ServerStatisticsServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "populateStatistics", "params": ["boolean"], "throws": null, "modifiers": ["synchronized", "protected"], "return_type": "void", "snippet": "  protected synchronized void populateStatistics(final boolean noCache) {    //check again before starting the work.    if (noCache || System.currentTimeMillis() - lastRefreshedTime > cacheTimeInMilliseconds) {      final ExecutorInfo stats = new ExecutorInfo();      fillRemainingMemoryPercent(stats);      fillRemainingFlowCapacityAndLastDispatchedTime(stats);      fillCpuUsage(stats);      cachedstats = stats;      lastRefreshedTime = System.currentTimeMillis();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ServerStatisticsServlet.java", "stars": "18", "class": {"name": "ServerStatisticsServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "fillRemainingFlowCapacityAndLastDispatchedTime", "params": ["ExecutorInfo"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void fillRemainingFlowCapacityAndLastDispatchedTime(final ExecutorInfo stats) {    final AzkabanExecutorServer server = AzkabanExecutorServer.getApp();    if (server != null) {      final FlowRunnerManager runnerMgr = AzkabanExecutorServer.getApp().getFlowRunnerManager();      final int assignedFlows = runnerMgr.getNumRunningFlows() + runnerMgr.getNumQueuedFlows();      stats.setRemainingFlowCapacity(runnerMgr.getMaxNumRunningFlows() - assignedFlows);      stats.setNumberOfAssignedFlows(assignedFlows);      stats.setLastDispatchedTime(runnerMgr.getLastFlowSubmittedTime());    } else {      logger.error(\"failed to get data for remaining flow capacity or LastDispatchedTime\"          + \" as the AzkabanExecutorServer has yet been initialized.\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ServerStatisticsServlet.java", "stars": "18", "class": {"name": "ServerStatisticsServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "fillCpuUsage", "params": ["ExecutorInfo"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void fillCpuUsage(final ExecutorInfo stats) {    if (exists_Bash && exists_Cat && exists_LoadAvg) {      final java.lang.ProcessBuilder processBuilder =          new java.lang.ProcessBuilder(\"/bin/bash\", \"-c\", \"/bin/cat /proc/loadavg\");      try {        final ArrayList<String> output = new ArrayList<>();        final Process process = processBuilder.start();        process.waitFor();        final InputStream inputStream = process.getInputStream();        try {          final java.io.BufferedReader reader = new java.io.BufferedReader(              new InputStreamReader(inputStream, StandardCharsets.UTF_8));          String line = null;          while ((line = reader.readLine()) != null) {            output.add(line);          }        } finally {          inputStream.close();        }        // process the output from bash call.        if (output.size() > 0) {          final String[] splitedresult = output.get(0).split(\"\\\\s+\");          double cpuUsage = 0.0;          try {            cpuUsage = Double.parseDouble(splitedresult[0]);          } catch (final NumberFormatException e) {            logger.error(\"yielding 0.0 for CPU usage as output is invalid -\" + output.get(0));          }          logger.info(\"System load : \" + cpuUsage);          stats.setCpuUpsage(cpuUsage);        }      } catch (final Exception ex) {        logger.error(\"failed fetch system load info \"            + \"as exception is captured when fetching result from bash call. Ex -\" + ex            .getMessage());      }    } else {      logger.error(          \"failed fetch system load info, one or more files from the following list are missing -  \"              + \"'/bin/bash',\" + \"'/bin/cat',\" + \"'/proc/loadavg'\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ServerStatisticsServlet.java", "stars": "18", "class": {"name": "ServerStatisticsServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getContent", "params": ["URLConnection"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getContent(URLConnection connection) throws IOException {        String json = ContentHandlerUtils.toString(connection);        try {            // Pass the JSON string to handler where it can be            // interpreted as an object or an array.            return getContent(json);        } catch (JSONException e) {            // Re-throw JSONException as IOException because            // ContentHandler implementations are only allowed         \t// to throw IOExceptions.            IOException ioe = new IOException();            ioe.initCause(e);            throw ioe;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/JsonContentHandler.java", "stars": "74", "class": {"name": "JsonContentHandler", "extends": "ContentHandler", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getContent", "params": ["String"], "throws": ["JSONException"], "modifiers": ["abstract", "protected"], "return_type": "Object", "snippet": "    protected abstract Object getContent(String source) throws JSONException;}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/JsonContentHandler.java", "stars": "74", "class": {"name": "JsonContentHandler", "extends": "ContentHandler", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setup", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setup() throws Exception {    createBlogDataSource();    final String resource = \"org/apache/ibatis/builder/MapperConfig.xml\";    final Reader reader = Resources.getResourceAsReader(resource);    sqlMapper = new SqlSessionFactoryBuilder().build(reader);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldResolveBothSimpleNameAndFullyQualifiedName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldResolveBothSimpleNameAndFullyQualifiedName() {    Configuration c = new Configuration();    final String fullName = \"com.mycache.MyCache\";    final String shortName = \"MyCache\";    final PerpetualCache cache = new PerpetualCache(fullName);    c.addCache(cache);    assertEquals(cache, c.getCache(fullName));    assertEquals(cache, c.getCache(shortName));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFailOverToMostApplicableSimpleName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailOverToMostApplicableSimpleName() {    Configuration c = new Configuration();    final String fullName = \"com.mycache.MyCache\";    final String invalidName = \"unknown.namespace.MyCache\";    final PerpetualCache cache = new PerpetualCache(fullName);    c.addCache(cache);    assertEquals(cache, c.getCache(fullName));    Assertions.assertThrows(IllegalArgumentException.class, () -> c.getCache(invalidName));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSucceedWhenFullyQualifiedButFailDueToAmbiguity", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSucceedWhenFullyQualifiedButFailDueToAmbiguity() {    Configuration c = new Configuration();    final String name1 = \"com.mycache.MyCache\";    final PerpetualCache cache1 = new PerpetualCache(name1);    c.addCache(cache1);    final String name2 = \"com.other.MyCache\";    final PerpetualCache cache2 = new PerpetualCache(name2);    c.addCache(cache2);    final String shortName = \"MyCache\";    assertEquals(cache1, c.getCache(name1));    assertEquals(cache2, c.getCache(name2));    try {      c.getCache(shortName);      fail(\"Exception expected.\");    } catch (Exception e) {      assertTrue(e.getMessage().contains(\"ambiguous\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFailToAddDueToNameConflict", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailToAddDueToNameConflict() {    Configuration c = new Configuration();    final String fullName = \"com.mycache.MyCache\";    final PerpetualCache cache = new PerpetualCache(fullName);    try {      c.addCache(cache);      c.addCache(cache);      fail(\"Exception expected.\");    } catch (Exception e) {      assertTrue(e.getMessage().contains(\"already contains value\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldOpenAndClose", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldOpenAndClose() {    SqlSession session = sqlMapper.openSession(TransactionIsolationLevel.SERIALIZABLE);    session.close();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldCommitAnUnUsedSqlSession", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCommitAnUnUsedSqlSession() {    try (SqlSession session = sqlMapper.openSession(TransactionIsolationLevel.SERIALIZABLE)) {      session.commit(true);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldRollbackAnUnUsedSqlSession", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldRollbackAnUnUsedSqlSession() {    try (SqlSession session = sqlMapper.openSession(TransactionIsolationLevel.SERIALIZABLE)) {      session.rollback(true);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectAllAuthors", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectAllAuthors() {    try (SqlSession session = sqlMapper.openSession(TransactionIsolationLevel.SERIALIZABLE)) {      List<Author> authors = session.selectList(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors\");      assertEquals(2, authors.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFailWithTooManyResultsException", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailWithTooManyResultsException() {    try (SqlSession session = sqlMapper.openSession(TransactionIsolationLevel.SERIALIZABLE)) {      Assertions.assertThrows(TooManyResultsException.class, () -> {        session.selectOne(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors\");      });    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectAllAuthorsAsMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectAllAuthorsAsMap() {    try (SqlSession session = sqlMapper.openSession(TransactionIsolationLevel.SERIALIZABLE)) {      final Map<Integer,Author> authors = session.selectMap(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors\", \"id\");      assertEquals(2, authors.size());      for(Map.Entry<Integer,Author> authorEntry : authors.entrySet()) {        assertEquals(authorEntry.getKey(), (Integer) authorEntry.getValue().getId());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectCountOfPosts", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectCountOfPosts() {    try (SqlSession session = sqlMapper.openSession()) {      Integer count = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.BlogMapper.selectCountOfPosts\");      assertEquals(5, count.intValue());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldEnsureThatBothEarlyAndLateResolutionOfNesteDiscriminatorsResolesToUseNestedResultSetHandler", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldEnsureThatBothEarlyAndLateResolutionOfNesteDiscriminatorsResolesToUseNestedResultSetHandler() {      Configuration configuration = sqlMapper.getConfiguration();      assertTrue(configuration.getResultMap(\"org.apache.ibatis.domain.blog.mappers.BlogMapper.earlyNestedDiscriminatorPost\").hasNestedResultMaps());      assertTrue(configuration.getResultMap(\"org.apache.ibatis.domain.blog.mappers.BlogMapper.lateNestedDiscriminatorPost\").hasNestedResultMaps());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectOneAuthor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectOneAuthor() {    try (SqlSession session = sqlMapper.openSession()) {      Author author = session.selectOne(          \"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor\", new Author(101));      assertEquals(101, author.getId());      assertEquals(Section.NEWS, author.getFavouriteSection());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectOneAuthorAsList", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectOneAuthorAsList() {    try (SqlSession session = sqlMapper.openSession()) {      List<Author> authors = session.selectList(          \"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor\", new Author(101));      assertEquals(101, authors.get(0).getId());      assertEquals(Section.NEWS, authors.get(0).getFavouriteSection());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectOneImmutableAuthor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectOneImmutableAuthor() {    try (SqlSession session = sqlMapper.openSession()) {      ImmutableAuthor author = session.selectOne(          \"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectImmutableAuthor\", new Author(101));      assertEquals(101, author.getId());      assertEquals(Section.NEWS, author.getFavouriteSection());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectOneAuthorWithInlineParams", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectOneAuthorWithInlineParams() {    try (SqlSession session = sqlMapper.openSession()) {      Author author = session.selectOne(          \"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthorWithInlineParams\", new Author(101));      assertEquals(101, author.getId());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldInsertAuthor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertAuthor() {    try (SqlSession session = sqlMapper.openSession()) {      Author expected = new Author(500, \"cbegin\", \"******\", \"cbegin@somewhere.com\", \"Something...\", null);      int updates = session.insert(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.insertAuthor\", expected);      assertEquals(1, updates);      Author actual = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor\", new Author(500));      assertNotNull(actual);      assertEquals(expected.getId(), actual.getId());      assertEquals(expected.getUsername(), actual.getUsername());      assertEquals(expected.getPassword(), actual.getPassword());      assertEquals(expected.getEmail(), actual.getEmail());      assertEquals(expected.getBio(), actual.getBio());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldUpdateAuthorImplicitRollback", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUpdateAuthorImplicitRollback() {    try (SqlSession session = sqlMapper.openSession()) {      Author original = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor\", 101);      original.setEmail(\"new@email.com\");      int updates = session.update(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.updateAuthor\", original);      assertEquals(1, updates);      Author updated = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor\", 101);      assertEquals(original.getEmail(), updated.getEmail());    }    try (SqlSession session = sqlMapper.openSession()) {      Author updated = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor\", 101);      assertEquals(\"jim@ibatis.apache.org\", updated.getEmail());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldUpdateAuthorCommit", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUpdateAuthorCommit() {    Author original;    try (SqlSession session = sqlMapper.openSession()) {      original = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor\", 101);      original.setEmail(\"new@email.com\");      int updates = session.update(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.updateAuthor\", original);      assertEquals(1, updates);      Author updated = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor\", 101);      assertEquals(original.getEmail(), updated.getEmail());      session.commit();    }    try (SqlSession session = sqlMapper.openSession()) {      Author updated = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor\", 101);      assertEquals(original.getEmail(), updated.getEmail());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldUpdateAuthorIfNecessary", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUpdateAuthorIfNecessary() {    Author original;    try (SqlSession session = sqlMapper.openSession()) {      original = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor\", 101);      original.setEmail(\"new@email.com\");      original.setBio(null);      int updates = session.update(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.updateAuthorIfNecessary\", original);      assertEquals(1, updates);      Author updated = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor\", 101);      assertEquals(original.getEmail(), updated.getEmail());      session.commit();    }    try (SqlSession session = sqlMapper.openSession()) {      Author updated = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor\", 101);      assertEquals(original.getEmail(), updated.getEmail());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldDeleteAuthor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldDeleteAuthor() {    try (SqlSession session = sqlMapper.openSession()) {      final int id = 102;      List<Author> authors = session.selectList(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor\", id);      assertEquals(1, authors.size());      int updates = session.delete(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.deleteAuthor\", id);      assertEquals(1, updates);      authors = session.selectList(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor\", id);      assertEquals(0, authors.size());      session.rollback();      authors = session.selectList(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor\", id);      assertEquals(1, authors.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectBlogWithPostsAndAuthorUsingSubSelects", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectBlogWithPostsAndAuthorUsingSubSelects() {    try (SqlSession session = sqlMapper.openSession()) {      Blog blog = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.BlogMapper.selectBlogWithPostsUsingSubSelect\", 1);      assertEquals(\"Jim Business\", blog.getTitle());      assertEquals(2, blog.getPosts().size());      assertEquals(\"Corn nuts\", blog.getPosts().get(0).getSubject());      assertEquals(101, blog.getAuthor().getId());      assertEquals(\"jim\", blog.getAuthor().getUsername());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectBlogWithPostsAndAuthorUsingSubSelectsLazily", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectBlogWithPostsAndAuthorUsingSubSelectsLazily() {    try (SqlSession session = sqlMapper.openSession()) {      Blog blog = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.BlogMapper.selectBlogWithPostsUsingSubSelectLazily\", 1);      Assertions.assertTrue(blog instanceof Proxy);      assertEquals(\"Jim Business\", blog.getTitle());      assertEquals(2, blog.getPosts().size());      assertEquals(\"Corn nuts\", blog.getPosts().get(0).getSubject());      assertEquals(101, blog.getAuthor().getId());      assertEquals(\"jim\", blog.getAuthor().getUsername());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectBlogWithPostsAndAuthorUsingJoin", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectBlogWithPostsAndAuthorUsingJoin() {    try (SqlSession session = sqlMapper.openSession()) {      Blog blog = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.BlogMapper.selectBlogJoinedWithPostsAndAuthor\", 1);      assertEquals(\"Jim Business\", blog.getTitle());      final Author author = blog.getAuthor();      assertEquals(101, author.getId());      assertEquals(\"jim\", author.getUsername());      final List<Post> posts = blog.getPosts();      assertEquals(2, posts.size());      final Post post = blog.getPosts().get(0);      assertEquals(1, post.getId());      assertEquals(\"Corn nuts\", post.getSubject());      final List<Comment> comments = post.getComments();      assertEquals(2, comments.size());      final List<Tag> tags = post.getTags();      assertEquals(3, tags.size());      final Comment comment = comments.get(0);      assertEquals(1, comment.getId());      assertEquals(DraftPost.class, blog.getPosts().get(0).getClass());      assertEquals(Post.class, blog.getPosts().get(1).getClass());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectNestedBlogWithPostsAndAuthorUsingJoin", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectNestedBlogWithPostsAndAuthorUsingJoin() {    try (SqlSession session = sqlMapper.openSession()) {      Blog blog = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.NestedBlogMapper.selectBlogJoinedWithPostsAndAuthor\", 1);      assertEquals(\"Jim Business\", blog.getTitle());      final Author author = blog.getAuthor();      assertEquals(101, author.getId());      assertEquals(\"jim\", author.getUsername());      final List<Post> posts = blog.getPosts();      assertEquals(2, posts.size());      final Post post = blog.getPosts().get(0);      assertEquals(1, post.getId());      assertEquals(\"Corn nuts\", post.getSubject());      final List<Comment> comments = post.getComments();      assertEquals(2, comments.size());      final List<Tag> tags = post.getTags();      assertEquals(3, tags.size());      final Comment comment = comments.get(0);      assertEquals(1, comment.getId());      assertEquals(DraftPost.class, blog.getPosts().get(0).getClass());      assertEquals(Post.class, blog.getPosts().get(1).getClass());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldThrowExceptionIfMappedStatementDoesNotExist", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldThrowExceptionIfMappedStatementDoesNotExist() {    try (SqlSession session = sqlMapper.openSession()) {      session.selectList(\"ThisStatementDoesNotExist\");      fail(\"Expected exception to be thrown due to statement that does not exist.\");    } catch (Exception e) {      assertTrue(e.getMessage().contains(\"does not contain value for ThisStatementDoesNotExist\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldThrowExceptionIfTryingToAddStatementWithSameNameInXml", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldThrowExceptionIfTryingToAddStatementWithSameNameInXml() {    Configuration config = sqlMapper.getConfiguration();    try {      MappedStatement ms = new MappedStatement.Builder(config,          \"org.apache.ibatis.domain.blog.mappers.BlogMapper.selectBlogWithPostsUsingSubSelect\",          Mockito.mock(SqlSource.class), SqlCommandType.SELECT)              .resource(\"org/mybatis/TestMapper.xml\").build();      config.addMappedStatement(ms);      fail(\"Expected exception to be thrown due to statement that already exists.\");    } catch (Exception e) {      assertTrue(e.getMessage().contains(\"already contains value for org.apache.ibatis.domain.blog.mappers.BlogMapper.selectBlogWithPostsUsingSubSelect. please check org/apache/ibatis/builder/BlogMapper.xml and org/mybatis/TestMapper.xml\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldThrowExceptionIfTryingToAddStatementWithSameNameInAnnotation", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldThrowExceptionIfTryingToAddStatementWithSameNameInAnnotation() {    Configuration config = sqlMapper.getConfiguration();    try {      MappedStatement ms = new MappedStatement.Builder(config,          \"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor2\",          Mockito.mock(SqlSource.class), SqlCommandType.SELECT)              .resource(\"org/mybatis/TestMapper.xml\").build();      config.addMappedStatement(ms);      fail(\"Expected exception to be thrown due to statement that already exists.\");    } catch (Exception e) {      assertTrue(e.getMessage().contains(\"already contains value for org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAuthor2. please check org/apache/ibatis/domain/blog/mappers/AuthorMapper.java (best guess) and org/mybatis/TestMapper.xml\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldCacheAllAuthors", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCacheAllAuthors() {    int first;    try (SqlSession session = sqlMapper.openSession()) {      List<Author> authors = session.selectList(\"org.apache.ibatis.builder.CachedAuthorMapper.selectAllAuthors\");      first = System.identityHashCode(authors);      session.commit(); // commit should not be required for read/only activity.    }    int second;    try (SqlSession session = sqlMapper.openSession()) {      List<Author> authors = session.selectList(\"org.apache.ibatis.builder.CachedAuthorMapper.selectAllAuthors\");      second = System.identityHashCode(authors);    }    assertEquals(first, second);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldNotCacheAllAuthors", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldNotCacheAllAuthors() {    int first;    try (SqlSession session = sqlMapper.openSession()) {      List<Author> authors = session.selectList(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors\");      first = System.identityHashCode(authors);    }    int second;    try (SqlSession session = sqlMapper.openSession()) {      List<Author> authors = session.selectList(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors\");      second = System.identityHashCode(authors);    }    assertTrue(first != second);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectAuthorsUsingMapperClass", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectAuthorsUsingMapperClass() {    try (SqlSession session = sqlMapper.openSession()) {      AuthorMapper mapper = session.getMapper(AuthorMapper.class);      List<Author> authors = mapper.selectAllAuthors();      assertEquals(2, authors.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteSelectOneAuthorUsingMapperClass", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteSelectOneAuthorUsingMapperClass() {    try (SqlSession session = sqlMapper.openSession()) {      AuthorMapper mapper = session.getMapper(AuthorMapper.class);      Author author = mapper.selectAuthor(101);      assertEquals(101, author.getId());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteSelectOneAuthorUsingMapperClassThatReturnsALinedHashMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteSelectOneAuthorUsingMapperClassThatReturnsALinedHashMap() {    try (SqlSession session = sqlMapper.openSession()) {      AuthorMapper mapper = session.getMapper(AuthorMapper.class);      LinkedHashMap<String, Object> author = mapper.selectAuthorLinkedHashMap(101);      assertEquals(101, author.get(\"ID\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteSelectAllAuthorsUsingMapperClassThatReturnsSet", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteSelectAllAuthorsUsingMapperClassThatReturnsSet() {    try (SqlSession session = sqlMapper.openSession()) {      AuthorMapper mapper = session.getMapper(AuthorMapper.class);      Collection<Author> authors = mapper.selectAllAuthorsSet();      assertEquals(2, authors.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteSelectAllAuthorsUsingMapperClassThatReturnsVector", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteSelectAllAuthorsUsingMapperClassThatReturnsVector() {    try (SqlSession session = sqlMapper.openSession()) {      AuthorMapper mapper = session.getMapper(AuthorMapper.class);      Collection<Author> authors = mapper.selectAllAuthorsVector();      assertEquals(2, authors.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteSelectAllAuthorsUsingMapperClassThatReturnsLinkedList", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteSelectAllAuthorsUsingMapperClassThatReturnsLinkedList() {    try (SqlSession session = sqlMapper.openSession()) {      AuthorMapper mapper = session.getMapper(AuthorMapper.class);      Collection<Author> authors = mapper.selectAllAuthorsLinkedList();      assertEquals(2, authors.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteSelectAllAuthorsUsingMapperClassThatReturnsAnArray", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteSelectAllAuthorsUsingMapperClassThatReturnsAnArray() {    try (SqlSession session = sqlMapper.openSession()) {      AuthorMapper mapper = session.getMapper(AuthorMapper.class);      Author[] authors = mapper.selectAllAuthorsArray();      assertEquals(2, authors.length);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteSelectOneAuthorUsingMapperClassWithResultHandler", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteSelectOneAuthorUsingMapperClassWithResultHandler() {    try (SqlSession session = sqlMapper.openSession()) {      DefaultResultHandler handler = new DefaultResultHandler();      AuthorMapper mapper = session.getMapper(AuthorMapper.class);      mapper.selectAuthor(101, handler);      Author author = (Author) handler.getResultList().get(0);      assertEquals(101, author.getId());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFailExecutingAnAnnotatedMapperClassWithResultHandler", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailExecutingAnAnnotatedMapperClassWithResultHandler() {    try (SqlSession session = sqlMapper.openSession()) {      DefaultResultHandler handler = new DefaultResultHandler();      AuthorMapper mapper = session.getMapper(AuthorMapper.class);      Assertions.assertThrows(BindingException.class, () -> {        mapper.selectAuthor2(101, handler);      });    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectAuthorsUsingMapperClassWithResultHandler", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectAuthorsUsingMapperClassWithResultHandler() {    try (SqlSession session = sqlMapper.openSession()) {      DefaultResultHandler handler = new DefaultResultHandler();      AuthorMapper mapper = session.getMapper(AuthorMapper.class);      mapper.selectAllAuthors(handler);      assertEquals(2, handler.getResultList().size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFailSelectOneAuthorUsingMapperClassWithTwoResultHandlers", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailSelectOneAuthorUsingMapperClassWithTwoResultHandlers() {    Configuration configuration = new Configuration(sqlMapper.getConfiguration().getEnvironment());    configuration.addMapper(AuthorMapperWithMultipleHandlers.class);    SqlSessionFactory sqlMapperWithMultipleHandlers = new DefaultSqlSessionFactory(configuration);    try (SqlSession sqlSession = sqlMapperWithMultipleHandlers.openSession();) {      DefaultResultHandler handler1 = new DefaultResultHandler();      DefaultResultHandler handler2 = new DefaultResultHandler();      AuthorMapperWithMultipleHandlers mapper = sqlSession.getMapper(AuthorMapperWithMultipleHandlers.class);      Assertions.assertThrows(BindingException.class, () -> mapper.selectAuthor(101, handler1, handler2));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFailSelectOneAuthorUsingMapperClassWithTwoRowBounds", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailSelectOneAuthorUsingMapperClassWithTwoRowBounds() {    Configuration configuration = new Configuration(sqlMapper.getConfiguration().getEnvironment());    configuration.addMapper(AuthorMapperWithRowBounds.class);    SqlSessionFactory sqlMapperWithMultipleHandlers = new DefaultSqlSessionFactory(configuration);    try (SqlSession sqlSession = sqlMapperWithMultipleHandlers.openSession();) {      RowBounds bounds1 = new RowBounds(0, 1);      RowBounds bounds2 = new RowBounds(0, 1);      AuthorMapperWithRowBounds mapper = sqlSession.getMapper(AuthorMapperWithRowBounds.class);      Assertions.assertThrows(BindingException.class, () -> mapper.selectAuthor(101, bounds1, bounds2));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldInsertAuthorUsingMapperClass", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertAuthorUsingMapperClass() {    try (SqlSession session = sqlMapper.openSession()) {      AuthorMapper mapper = session.getMapper(AuthorMapper.class);      Author expected = new Author(500, \"cbegin\", \"******\", \"cbegin@somewhere.com\", \"Something...\", null);      mapper.insertAuthor(expected);      Author actual = mapper.selectAuthor(500);      assertNotNull(actual);      assertEquals(expected.getId(), actual.getId());      assertEquals(expected.getUsername(), actual.getUsername());      assertEquals(expected.getPassword(), actual.getPassword());      assertEquals(expected.getEmail(), actual.getEmail());      assertEquals(expected.getBio(), actual.getBio());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldDeleteAuthorUsingMapperClass", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldDeleteAuthorUsingMapperClass() {    try (SqlSession session = sqlMapper.openSession()) {      AuthorMapper mapper = session.getMapper(AuthorMapper.class);      int count = mapper.deleteAuthor(101);      assertEquals(1, count);      assertNull(mapper.selectAuthor(101));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldUpdateAuthorUsingMapperClass", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUpdateAuthorUsingMapperClass() {    try (SqlSession session = sqlMapper.openSession()) {      AuthorMapper mapper = session.getMapper(AuthorMapper.class);      Author expected = mapper.selectAuthor(101);      expected.setUsername(\"NewUsername\");      int count = mapper.updateAuthor(expected);      assertEquals(1, count);      Author actual = mapper.selectAuthor(101);      assertEquals(expected.getUsername(), actual.getUsername());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectAllPostsUsingMapperClass", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectAllPostsUsingMapperClass() {    try (SqlSession session = sqlMapper.openSession()) {      BlogMapper mapper = session.getMapper(BlogMapper.class);      List<Map> posts = mapper.selectAllPosts();      assertEquals(5, posts.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldLimitResultsUsingMapperClass", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldLimitResultsUsingMapperClass() {    try (SqlSession session = sqlMapper.openSession()) {      BlogMapper mapper = session.getMapper(BlogMapper.class);      List<Map> posts = mapper.selectAllPosts(new RowBounds(0, 2), null);      assertEquals(2, posts.size());      assertEquals(1, posts.get(0).get(\"ID\"));      assertEquals(2, posts.get(1).get(\"ID\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldHandleZeroParameters", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldHandleZeroParameters() {    try (SqlSession session = sqlMapper.openSession()) {      final TestResultHandler resultHandler = new TestResultHandler();      session.select(\"org.apache.ibatis.domain.blog.mappers.BlogMapper.selectAllPosts\", resultHandler);      assertEquals(5, resultHandler.count);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldStopResultHandler", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldStopResultHandler() {    try (SqlSession session = sqlMapper.openSession()) {      final TestResultStopHandler resultHandler = new TestResultStopHandler();      session.select(\"org.apache.ibatis.domain.blog.mappers.BlogMapper.selectAllPosts\", null, resultHandler);      assertEquals(2, resultHandler.count);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldOffsetAndLimitResultsUsingMapperClass", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldOffsetAndLimitResultsUsingMapperClass() {    try (SqlSession session = sqlMapper.openSession()) {      BlogMapper mapper = session.getMapper(BlogMapper.class);      List<Map> posts = mapper.selectAllPosts(new RowBounds(2, 3));      assertEquals(3, posts.size());      assertEquals(3, posts.get(0).get(\"ID\"));      assertEquals(4, posts.get(1).get(\"ID\"));      assertEquals(5, posts.get(2).get(\"ID\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFindPostsAllPostsWithDynamicSql", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFindPostsAllPostsWithDynamicSql() {    try (SqlSession session = sqlMapper.openSession()) {      List<Post> posts = session.selectList(\"org.apache.ibatis.domain.blog.mappers.PostMapper.findPost\");      assertEquals(5, posts.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFindPostByIDWithDynamicSql", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFindPostByIDWithDynamicSql() {    try (SqlSession session = sqlMapper.openSession()) {      List<Post> posts = session.selectList(\"org.apache.ibatis.domain.blog.mappers.PostMapper.findPost\",          new HashMap<String, Integer>() {{            put(\"id\", 1);          }});      assertEquals(1, posts.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFindPostsInSetOfIDsWithDynamicSql", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFindPostsInSetOfIDsWithDynamicSql() {    try (SqlSession session = sqlMapper.openSession()) {      List<Post> posts = session.selectList(\"org.apache.ibatis.domain.blog.mappers.PostMapper.findPost\",          new HashMap<String, List<Integer>>() {{            put(\"ids\", new ArrayList<Integer>() {{              add(1);              add(2);              add(3);            }});          }});      assertEquals(3, posts.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFindPostsWithBlogIdUsingDynamicSql", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFindPostsWithBlogIdUsingDynamicSql() {    try (SqlSession session = sqlMapper.openSession()) {      List<Post> posts = session.selectList(\"org.apache.ibatis.domain.blog.mappers.PostMapper.findPost\",          new HashMap<String, Integer>() {{            put(\"blog_id\", 1);          }});      assertEquals(2, posts.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFindPostsWithAuthorIdUsingDynamicSql", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFindPostsWithAuthorIdUsingDynamicSql() {    try (SqlSession session = sqlMapper.openSession()) {      List<Post> posts = session.selectList(\"org.apache.ibatis.domain.blog.mappers.PostMapper.findPost\",          new HashMap<String, Integer>() {{            put(\"author_id\", 101);          }});      assertEquals(3, posts.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFindPostsWithAuthorAndBlogIdUsingDynamicSql", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFindPostsWithAuthorAndBlogIdUsingDynamicSql() {    try (SqlSession session = sqlMapper.openSession()) {      List<Post> posts = session.selectList(\"org.apache.ibatis.domain.blog.mappers.PostMapper.findPost\",          new HashMap<String, Object>() {{            put(\"ids\", new ArrayList<Integer>() {{              add(1);              add(2);              add(3);            }});            put(\"blog_id\", 1);          }});      assertEquals(2, posts.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFindPostsInList", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFindPostsInList() {    try (SqlSession session = sqlMapper.openSession()) {      List<Post> posts = session.selectList(\"org.apache.ibatis.domain.blog.mappers.PostMapper.selectPostIn\",          new ArrayList<Integer>() {{            add(1);            add(3);            add(5);          }});      assertEquals(3, posts.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFindOddPostsInList", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFindOddPostsInList() {    try (SqlSession session = sqlMapper.openSession()) {      List<Post> posts = session.selectList(\"org.apache.ibatis.domain.blog.mappers.PostMapper.selectOddPostsIn\",          new ArrayList<Integer>() {{            add(0);            add(1);            add(2);            add(3);            add(4);          }});      // we're getting odd indexes, not odd values, 0 is not odd      assertEquals(2, posts.size());      assertEquals(1, posts.get(0).getId());      assertEquals(3, posts.get(1).getId());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectOddPostsInKeysList", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectOddPostsInKeysList() {    try (SqlSession session = sqlMapper.openSession()) {      List<Post> posts = session.selectList(\"org.apache.ibatis.domain.blog.mappers.PostMapper.selectOddPostsInKeysList\",          new HashMap<String, List<Integer>>() {{put(\"keys\",new ArrayList<Integer>() {{            add(0);            add(1);            add(2);            add(3);            add(4);          }});          }});      // we're getting odd indexes, not odd values, 0 is not odd      assertEquals(2, posts.size());      assertEquals(1, posts.get(0).getId());      assertEquals(3, posts.get(1).getId());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "SqlSessionTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "handleResult", "params": ["ResultContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handleResult(ResultContext context) {      count++;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "TestResultHandler", "extends": null, "implements": ["ResultHandler"], "modifiers": ["private", "static"]}}, {"method_name": "handleResult", "params": ["ResultContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handleResult(ResultContext context) {      count++;      if (count == 2) context.stop();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionTest.java", "stars": "15", "class": {"name": "TestResultStopHandler", "extends": null, "implements": ["ResultHandler"], "modifiers": ["private", "static"]}}, {"method_name": "output", "params": ["int", "String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String output(int code,String info, Object obj){\t\tif(info == null){\t\t\tinfo = \"\";\t\t}\t\tif(obj == null){\t\t\tobj = new JSONObject();\t\t}\t\tJSONObject result = new JSONObject();\t\tresult.put(KEY_ERRCODE, code);\t\tresult.put(KEY_ERRINFO, info);\t\tresult.put(KEY_DATA, obj);\t\treturn JSONObject.toJSONString(result, SerializerFeature.DisableCircularReferenceDetect);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogicResult.java", "stars": "2", "class": {"name": "XLogicResult", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "success", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String success(){\t\treturn output(ErrorCode.OK, null, null);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogicResult.java", "stars": "2", "class": {"name": "XLogicResult", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "success", "params": ["JSONObject"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String success(JSONObject data){\t\treturn output(ErrorCode.OK, null, data);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogicResult.java", "stars": "2", "class": {"name": "XLogicResult", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "success", "params": ["JSONArray"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String success(JSONArray data){\t\treturn output(ErrorCode.OK, null, data);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogicResult.java", "stars": "2", "class": {"name": "XLogicResult", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "error", "params": ["String", "JSONObject"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String error(String info, JSONObject data){\t\treturn output(ErrorCode.NOK, info, data);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogicResult.java", "stars": "2", "class": {"name": "XLogicResult", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "error", "params": ["int", "JSONObject"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String error(int code, JSONObject data){\t\treturn output(code, null, data);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogicResult.java", "stars": "2", "class": {"name": "XLogicResult", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "error", "params": ["int", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String error(int code, String info){\t\treturn output(code, info, null);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogicResult.java", "stars": "2", "class": {"name": "XLogicResult", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "error", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String error(String info){\t\treturn output(ErrorCode.NOK, info, null);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogicResult.java", "stars": "2", "class": {"name": "XLogicResult", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "error", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String error(){\t\treturn output(ErrorCode.NOK, null, null);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogicResult.java", "stars": "2", "class": {"name": "XLogicResult", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "errorInternal", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String errorInternal(){\t\treturn output(ErrorCode.INTERNAL_ERROR, \"INTERNAL_ERROR\", null);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogicResult.java", "stars": "2", "class": {"name": "XLogicResult", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "staticOutput", "params": ["int", "String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String staticOutput(int code,String info, Object obj){\t\tif(info == null){\t\t\tinfo = \"\";\t\t}\t\tif(obj == null){\t\t\tobj = new JSONObject();\t\t}\t\tJSONObject result = new JSONObject();\t\tresult.put(KEY_ERRCODE, code);\t\tresult.put(KEY_ERRINFO, info);\t\tresult.put(KEY_DATA, obj);\t\treturn JSONObject.toJSONString(result, SerializerFeature.DisableCircularReferenceDetect);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogicResult.java", "stars": "2", "class": {"name": "XLogicResult", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "errorRequest", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String errorRequest(){\t\treturn staticOutput(ErrorCode.REQEUST_ERROR, \"REQUEST_ERROR\", null);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogicResult.java", "stars": "2", "class": {"name": "XLogicResult", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "errorMethod", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String errorMethod(){\t\treturn staticOutput(ErrorCode.METHOD_ERROR, \"METHOD_ERROR\", null);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogicResult.java", "stars": "2", "class": {"name": "XLogicResult", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "errorParameter", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String errorParameter(String info){\t\treturn staticOutput(ErrorCode.PARAMETER_ERROR, info, null);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogicResult.java", "stars": "2", "class": {"name": "XLogicResult", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "errorValidation", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String errorValidation(){\t\treturn staticOutput(ErrorCode.VALIDATION_ERROR, \"VALIDATION_ERROR\", null);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XLogicResult.java", "stars": "2", "class": {"name": "XLogicResult", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "deserialze", "params": ["DefaultJSONParser", "Type", "Object"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T deserialze(DefaultJSONParser defaultJSONParser, Type type, Object o) {        JSONLexer lexer = defaultJSONParser.getLexer();        String value = lexer.stringVal();        for (ResponseCode responseCode : ResponseCode.values()) {            if (value.equals(responseCode.code())) {                return (T) responseCode;            }        }        throw new RuntimeException(\"no status code: \" + value);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/fastJson/StatusCodeDeserializer.java", "stars": "7", "class": {"name": "StatusCodeDeserializer", "extends": null, "implements": ["ObjectDeserializer"], "modifiers": ["public"]}}, {"method_name": "getFastMatchToken", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getFastMatchToken() {        return 0;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/fastJson/StatusCodeDeserializer.java", "stars": "7", "class": {"name": "StatusCodeDeserializer", "extends": null, "implements": ["ObjectDeserializer"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUp() throws Exception {    try (Reader reader = Resources        .getResourceAsReader(\"org/apache/ibatis/submitted/array_type_handler/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),        \"org/apache/ibatis/submitted/array_type_handler/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/array_type_handler/ArrayTypeHandlerTest.java", "stars": "15", "class": {"name": "ArrayTypeHandlerTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldInsertArrayValue", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldInsertArrayValue() throws Exception {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      User user = new User();      user.setId(1);      user.setName(\"User 1\");      user.setNicknames(new String[] { \"User\", \"one\" });      Mapper mapper = sqlSession.getMapper(Mapper.class);      mapper.insert(user);      sqlSession.commit();      int usersInDatabase = mapper.getUserCount();      assertEquals(1, usersInDatabase);      Integer nicknameCount = mapper.getNicknameCount();      assertEquals(2, nicknameCount);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/array_type_handler/ArrayTypeHandlerTest.java", "stars": "15", "class": {"name": "ArrayTypeHandlerTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldInsertNullValue", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldInsertNullValue() throws Exception {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      User user = new User();      user.setId(1);      user.setName(\"User 1\");      // note how the user does not have nicknames      Mapper mapper = sqlSession.getMapper(Mapper.class);      mapper.insert(user);      sqlSession.commit();      int usersInDatabase = mapper.getUserCount();      assertEquals(1, usersInDatabase);      Integer nicknameCount = mapper.getNicknameCount();      assertNull(nicknameCount);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/array_type_handler/ArrayTypeHandlerTest.java", "stars": "15", "class": {"name": "ArrayTypeHandlerTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tint[] smallPrimes = {2, 3, 5, 7, 11, 13};    //\u521b\u5efa\u6570\u7ec4\u5bf9\u8c61\u5e76\u540c\u65f6\u8d4b\u4e88\u521d\u59cb\u503c\u7684\u7b80\u5316\u4e66\u5199\u5f62\u5f0f\t\tsmallPrimes = new int[] {1, 2, 3, 4, 5};\t\tint [] anonymous = {17, 19, 23, 29, 31, 37};\t\tsmallPrimes = anonymous;\t\tSystem.out.println(Arrays.toString(smallPrimes));\t\t\t\tint[] luckyNumbers = smallPrimes;    //\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u62f7\u8d1d\t\tluckyNumbers[5] = 12;\t\tSystem.out.println(smallPrimes[5]);\t\t\t\tint[] copiedluckyNumbers = Arrays.copyOf(luckyNumbers, luckyNumbers.length);    //\u5c06\u4e00\u4e2a\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u503c\u62f7\u8d1d\u5230\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\u4e2d\t\tSystem.out.println(Arrays.toString(copiedluckyNumbers));\t\t\t\tluckyNumbers = Arrays.copyOf(luckyNumbers, 2 * luckyNumbers.length);    //\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u65b0\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u901a\u5e38\u7528\u6765\u589e\u52a0\u6570\u7ec4\u7684\u5927\u5c0f\t\tSystem.out.println(Arrays.toString(luckyNumbers));\t\t\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Shuzuchuangjian.java", "stars": "2", "class": {"name": "Shuzuchuangjian", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getUserId() {        return userId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftRequest.java", "stars": "1", "class": {"name": "GiveGiftRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUserId", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUserId(long userId) {        this.userId = userId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftRequest.java", "stars": "1", "class": {"name": "GiveGiftRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGiftId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getGiftId() {        return giftId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftRequest.java", "stars": "1", "class": {"name": "GiveGiftRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGiftId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGiftId(String giftId) {        this.giftId = giftId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftRequest.java", "stars": "1", "class": {"name": "GiveGiftRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return count;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftRequest.java", "stars": "1", "class": {"name": "GiveGiftRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCount", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCount(int count) {        this.count = count;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftRequest.java", "stars": "1", "class": {"name": "GiveGiftRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRoomId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getRoomId() {        return roomId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftRequest.java", "stars": "1", "class": {"name": "GiveGiftRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRoomId", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRoomId(long roomId) {        this.roomId = roomId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftRequest.java", "stars": "1", "class": {"name": "GiveGiftRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getType() {        return type;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftRequest.java", "stars": "1", "class": {"name": "GiveGiftRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setType(int type) {        this.type = type;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftRequest.java", "stars": "1", "class": {"name": "GiveGiftRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIsNewApp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getIsNewApp() {        return isNewApp;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftRequest.java", "stars": "1", "class": {"name": "GiveGiftRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIsNewApp", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIsNewApp(int isNewApp) {        this.isNewApp = isNewApp;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftRequest.java", "stars": "1", "class": {"name": "GiveGiftRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlatform", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Platform", "snippet": "    public Platform getPlatform() {        return platform;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftRequest.java", "stars": "1", "class": {"name": "GiveGiftRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPlatform", "params": ["Platform"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlatform(Platform platform) {        this.platform = platform;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftRequest.java", "stars": "1", "class": {"name": "GiveGiftRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"GiveGiftRequest{\" +                \"userId=\" + userId +                \", giftId='\" + giftId + '\\'' +                \", count=\" + count +                \", roomId=\" + roomId +                \", type=\" + type +                \", isNewApp=\" + isNewApp +                \", platform='\" + platform + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/GiveGiftRequest.java", "stars": "1", "class": {"name": "GiveGiftRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_deatil_exo_list_player);        ButterKnife.bind(this);        //GSYBaseActivityDetail \u7684 \u666e\u901a\u6a21\u5f0f\u521d\u59cb\u5316        initVideo();        List<GSYVideoModel> urls = new ArrayList<>();        urls.add(new GSYVideoModel(\"http://7xjmzj.com1.z0.glb.clouddn.com/20171026175005_JObCxCE2.mp4\", \"\u6807\u98981\"));        urls.add(new GSYVideoModel(\"https://media6.smartstudy.com/ae/07/3997/2/dest.m3u8\", \"\u6807\u98983\"));        urls.add(new GSYVideoModel(\"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\", \"\u6807\u98982\"));        detailPlayer.setUp(urls, 0);        //\u4f7f\u7528 exo \u7684 CacheDataSourceFactory \u5b9e\u73b0        detailPlayer.setExoCache(false);        //detailPlayer.setOverrideExtension(\"m3u8\");        //\u589e\u52a0\u5c01\u9762        ImageView imageView = new ImageView(this);        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        imageView.setImageResource(R.mipmap.xxx1);        detailPlayer.setThumbImageView(imageView);        resolveNormalVideoUI();        detailPlayer.setIsTouchWiget(true);        //\u5173\u95ed\u81ea\u52a8\u65cb\u8f6c        detailPlayer.setRotateViewAuto(false);        detailPlayer.setLockLand(false);        detailPlayer.setShowFullAnimation(false);        detailPlayer.setNeedLockFull(true);        detailPlayer.setVideoAllCallBack(this);        detailPlayer.setLockClickListener(new LockClickListener() {            @Override            public void onClick(View view, boolean lock) {                if (orientationUtils != null) {                    //\u914d\u5408\u4e0b\u65b9\u7684onConfigurationChanged                    orientationUtils.setEnable(!lock);                }            }        });        next.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                GSYExoVideoManager.instance().next();            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/DetailExoListPlayer.java", "stars": "2", "class": {"name": "DetailExoListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (orientationUtils != null) {            orientationUtils.backToProtVideo();        }        if (GSYExoVideoManager.backFromWindowFull(this)) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/DetailExoListPlayer.java", "stars": "2", "class": {"name": "DetailExoListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGSYVideoPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYExo2PlayerView", "snippet": "    public GSYExo2PlayerView getGSYVideoPlayer() {        return detailPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/DetailExoListPlayer.java", "stars": "2", "class": {"name": "DetailExoListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGSYVideoOptionBuilder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder getGSYVideoOptionBuilder() {        //\u4e0d\u7528builder\u7684\u6a21\u5f0f        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/DetailExoListPlayer.java", "stars": "2", "class": {"name": "DetailExoListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "clickForFullScreen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clickForFullScreen() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/DetailExoListPlayer.java", "stars": "2", "class": {"name": "DetailExoListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDetailOrientationRotateAuto", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean getDetailOrientationRotateAuto() {        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/DetailExoListPlayer.java", "stars": "2", "class": {"name": "DetailExoListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEnterFullscreen", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnterFullscreen(String url, Object... objects) {        super.onEnterFullscreen(url, objects);        //\u9690\u85cf\u8c03\u5168\u5c4f\u5bf9\u8c61\u7684\u8fd4\u56de\u6309\u952e        GSYVideoPlayer gsyVideoPlayer = (GSYVideoPlayer)objects[1];        gsyVideoPlayer.getBackButton().setVisibility(View.GONE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/DetailExoListPlayer.java", "stars": "2", "class": {"name": "DetailExoListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveNormalVideoUI", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveNormalVideoUI() {        //\u589e\u52a0title        detailPlayer.getTitleTextView().setVisibility(View.VISIBLE);        detailPlayer.getBackButton().setVisibility(View.VISIBLE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/DetailExoListPlayer.java", "stars": "2", "class": {"name": "DetailExoListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurPlay", "params": [], "throws": null, "modifiers": ["private"], "return_type": "GSYVideoPlayer", "snippet": "    private GSYVideoPlayer getCurPlay() {        if (detailPlayer.getFullWindowPlayer() != null) {            return  detailPlayer.getFullWindowPlayer();        }        return detailPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/DetailExoListPlayer.java", "stars": "2", "class": {"name": "DetailExoListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u521b\u5efa\u9501\u5bf9\u8c61,\u4fdd\u8bc1\u552f\u4e00        Object obj = new Object();        // \u521b\u5efa\u4e00\u4e2a\u987e\u5ba2\u7ebf\u7a0b(\u6d88\u8d39\u8005)        new Thread(){            @Override            public void run() {               //\u4e00\u76f4\u7b49\u7740\u4e70\u5305\u5b50               while(true){                   //\u4fdd\u8bc1\u7b49\u5f85\u548c\u5524\u9192\u7684\u7ebf\u7a0b\u53ea\u80fd\u6709\u4e00\u4e2a\u6267\u884c,\u9700\u8981\u4f7f\u7528\u540c\u6b65\u6280\u672f                   synchronized (obj){                       System.out.println(\"\u544a\u77e5\u8001\u677f\u8981\u7684\u5305\u5b50\u7684\u79cd\u7c7b\u548c\u6570\u91cf\");                       //\u8c03\u7528wait\u65b9\u6cd5,\u653e\u5f03cpu\u7684\u6267\u884c,\u8fdb\u5165\u5230WAITING\u72b6\u6001(\u65e0\u9650\u7b49\u5f85)                       try {                           obj.wait();                       } catch (InterruptedException e) {                           e.printStackTrace();                       }                       //\u5524\u9192\u4e4b\u540e\u6267\u884c\u7684\u4ee3\u7801                       System.out.println(\"\u5305\u5b50\u5df2\u7ecf\u505a\u597d\u4e86,\u5f00\u5403!\");                       System.out.println(\"---------------------------------------\");                   }               }            }        }.start();        //\u521b\u5efa\u4e00\u4e2a\u8001\u677f\u7ebf\u7a0b(\u751f\u4ea7\u8005)        new Thread(){            @Override            public void run() {                //\u4e00\u76f4\u505a\u5305\u5b50                while (true){                    //\u82b1\u4e865\u79d2\u505a\u5305\u5b50                    try {                        Thread.sleep(5000);//\u82b15\u79d2\u949f\u505a\u5305\u5b50                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    //\u4fdd\u8bc1\u7b49\u5f85\u548c\u5524\u9192\u7684\u7ebf\u7a0b\u53ea\u80fd\u6709\u4e00\u4e2a\u6267\u884c,\u9700\u8981\u4f7f\u7528\u540c\u6b65\u6280\u672f                    synchronized (obj){                        System.out.println(\"\u8001\u677f5\u79d2\u949f\u4e4b\u540e\u505a\u597d\u5305\u5b50,\u544a\u77e5\u987e\u5ba2,\u53ef\u4ee5\u5403\u5305\u5b50\u4e86\");                        //\u505a\u597d\u5305\u5b50\u4e4b\u540e,\u8c03\u7528notify\u65b9\u6cd5,\u5524\u9192\u987e\u5ba2\u5403\u5305\u5b50                        obj.notify();                    }                }            }        }.start();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/code/06_Thread/src/com/itheima/demo10/WaitAndNotify/Demo01WaitAndNotify(1).java", "stars": "2", "class": {"name": "Demo01WaitAndNotify", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUrl() {        return mUrl;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/model/GSYVideoModel.java", "stars": "2", "class": {"name": "GSYVideoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUrl(String url) {        this.mUrl = url;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/model/GSYVideoModel.java", "stars": "2", "class": {"name": "GSYVideoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTitle() {        return mTitle;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/model/GSYVideoModel.java", "stars": "2", "class": {"name": "GSYVideoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitle(String title) {        this.mTitle = title;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/model/GSYVideoModel.java", "stars": "2", "class": {"name": "GSYVideoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "swagger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Docket", "snippet": "    public Docket swagger() {        return new Docket(DocumentationType.SWAGGER_2).select().apis(RequestHandlerSelectors.basePackage(\"com.upgrad.musichoster.api.controller\")).paths(PathSelectors.any()).build();    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/src/main/java/com/upgrad/musichoster/api/config/SwaggerConfiguration.java", "stars": "2", "class": {"name": "SwaggerConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dispose", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dispose() {        if(this.eventDispatcher != null) {            this.eventDispatcher.dispose();            this.eventDispatcher = null;        }    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/plugin/PluginManager.java", "stars": "2", "class": {"name": "PluginManager", "extends": null, "implements": ["IPluginManager"], "modifiers": ["public"]}}, {"method_name": "registerEventListener", "params": ["IEventListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerEventListener(IEventListener listener) {        if((listener == null) || (this.eventDispatcher == null)) return;        this.eventDispatcher.registerEventListener(listener);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/plugin/PluginManager.java", "stars": "2", "class": {"name": "PluginManager", "extends": null, "implements": ["IPluginManager"], "modifiers": ["public"]}}, {"method_name": "dispatchEvent", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T extends NitroEvent> T dispatchEvent(T event) {        if((event == null) || (this.eventDispatcher == null)) return null;        return this.eventDispatcher.dispatchEvent(event);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/plugin/PluginManager.java", "stars": "2", "class": {"name": "PluginManager", "extends": null, "implements": ["IPluginManager"], "modifiers": ["public"]}}, {"method_name": "getNitroCore", "params": [], "throws": null, "modifiers": ["public"], "return_type": "INitroCore", "snippet": "    public INitroCore getNitroCore() {        return this.nitroCore;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/plugin/PluginManager.java", "stars": "2", "class": {"name": "PluginManager", "extends": null, "implements": ["IPluginManager"], "modifiers": ["public"]}}, {"method_name": "getEventDispatcher", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IEventDispatcher", "snippet": "    public IEventDispatcher getEventDispatcher() {        return this.eventDispatcher;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/plugin/PluginManager.java", "stars": "2", "class": {"name": "PluginManager", "extends": null, "implements": ["IPluginManager"], "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getValue() {    return this.value;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/inmemoryemitter/InMemoryHistoryNode.java", "stars": "18", "class": {"name": "InMemoryHistoryNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTimestamp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "  public Date getTimestamp() {    return this.date;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/inmemoryemitter/InMemoryHistoryNode.java", "stars": "18", "class": {"name": "InMemoryHistoryNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);//        \u7ec3\u4e60\u5185\u5bb9\uff1a\u4f7f\u7528 canvas.drawCircle() \u65b9\u6cd5\u753b\u5706//        \u4e00\u5171\u56db\u4e2a\u5706\uff1a1.\u5b9e\u5fc3\u5706 2.\u7a7a\u5fc3\u5706 3.\u84dd\u8272\u5b9e\u5fc3\u5706 4.\u7ebf\u5bbd\u4e3a 20 \u7684\u7a7a\u5fc3\u5706        canvas.drawCircle(200, 200, 100, paint);        paint.setStyle(Paint.Style.STROKE);        canvas.drawCircle(500, 200, 100, paint);        paint.setStyle(Paint.Style.FILL);        paint.setColor(Color.BLUE);        canvas.drawCircle(200, 500, 100, paint);        paint.setStyle(Paint.Style.STROKE);        paint.setStrokeWidth(20);        paint.setColor(Color.BLACK);        paint.setAntiAlias(true);        canvas.drawCircle(500, 500, 100, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson1/Practice2DrawCircleView.java", "stars": "2", "class": {"name": "Practice2DrawCircleView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStream", "params": ["String", "Object"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "InputStream", "snippet": "\tpublic InputStream getStream(String imageUri, Object extra) throws IOException {\t\tInputStream imageStream = wrappedDownloader.getStream(imageUri, extra);\t\tswitch (Scheme.ofUri(imageUri)) {\t\t\tcase HTTP:\t\t\tcase HTTPS:\t\t\t\treturn new FlushedInputStream(imageStream);\t\t\tdefault:\t\t\t\treturn imageStream;\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/download/SlowNetworkImageDownloader.java", "stars": "74", "class": {"name": "SlowNetworkImageDownloader", "extends": null, "implements": ["ImageDownloader"], "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        covidViewModel = ViewModelProviders.of(this).get(CovidViewModel.class);        // Inflate the layout for this fragment        return inflater.inflate(R.layout.fragment_all_county_case, container, false);    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/AllCountyCaseFragment.java", "stars": "2", "class": {"name": "AllCountyCaseFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onViewCreated", "params": ["View", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        selectCountySpinner = view.findViewById(R.id.selectCountySp);        allCountryRV = view.findViewById(R.id.allCountryRV);        dataProgress = view.findViewById(R.id.dataProgress);        dataProgress.setVisibility(View.VISIBLE);        ArrayAdapter<String> adapter = new ArrayAdapter<String>(getActivity(),android.R.layout.simple_spinner_dropdown_item,countryName);        selectCountySpinner.setAdapter(adapter);        selectCountySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                String countyName = parent.getItemAtPosition(position).toString();                if (countyName.equals(\"All Countries\"))                {                    covidViewModel.getAllCountyWise(\"countries/\").observe(getActivity(), new Observer<List<CountryWiseCasePojo>>() {                        @Override                        public void onChanged(List<CountryWiseCasePojo> countryWiseCasePojos) {                            if (countryWiseCasePojos.size()>0)                            {                                dataProgress.setVisibility(View.GONE);                            }                            AllCountryWiseAdpater allCountryWiseAdpater = new AllCountryWiseAdpater(getActivity(),countryWiseCasePojos);                            LinearLayoutManager llm = new LinearLayoutManager(getActivity());                            allCountryRV.setLayoutManager(llm);                            allCountryRV.setAdapter(allCountryWiseAdpater);                        }                    });                }                else                {                    String endurl = String.format(\"countries/%s\",countyName);                    covidViewModel.getCountyWiseData(endurl).observe(getActivity(), new Observer<CountryWiseCasePojo>() {                        @Override                        public void onChanged(CountryWiseCasePojo countryWiseCasePojo) {                            if (countryWiseCasePojo==null)                            {                                Snackbar.make(getView(),\"Country not found or doesn't have any cases\",Snackbar.LENGTH_SHORT).show();                            }                            else                            {                                List<CountryWiseCasePojo> list = new ArrayList<>();                                list.add(countryWiseCasePojo);                                AllCountryWiseAdpater allCountryWiseAdpater = new AllCountryWiseAdpater(getActivity(),list);                                LinearLayoutManager llm = new LinearLayoutManager(getActivity());                                allCountryRV.setLayoutManager(llm);                                allCountryRV.setAdapter(allCountryWiseAdpater);                            }                        }                    });                }            }            @Override            public void onNothingSelected(AdapterView<?> parent) {            }        });      /*  covidViewModel.getAllCountyWise(\"countries/\").observe(getActivity(), new Observer<List<CountryWiseCasePojo>>() {            @Override            public void onChanged(List<CountryWiseCasePojo> countryWiseCasePojos) {                if (countryWiseCasePojos.size()>0)                {                    dataProgress.setVisibility(View.GONE);                }                AllCountryWiseAdpater allCountryWiseAdpater = new AllCountryWiseAdpater(getActivity(),countryWiseCasePojos);                LinearLayoutManager llm = new LinearLayoutManager(getActivity());                allCountryRV.setLayoutManager(llm);                allCountryRV.setAdapter(allCountryWiseAdpater);            }        });*/    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/AllCountyCaseFragment.java", "stars": "2", "class": {"name": "AllCountyCaseFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMinX", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getMinX() {return minX;}", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getMinY", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getMinY() {return minY;}", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getMaxX", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getMaxX() {return maxX;}", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getMaxY", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getMaxY() {return maxY;}", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCellIndexStrLength", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCellIndexStrLength() {return CELLINDEXSTRLENGTH;}", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getNumGridPartitions", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getNumGridPartitions()    {        return numGridPartitions;    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCellLength", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getCellLength() {return cellLength;}", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCellLengthInMeters", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getCellLengthInMeters() {return cellLengthMeters;}", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getGirdCellsSet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HashSet<String>", "snippet": "    public HashSet<String> getGirdCellsSet() {return girdCellsSet;}", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getGuaranteedNeighboringCells", "params": ["double", "Point"], "throws": null, "modifiers": ["public"], "return_type": "HashSet<String>", "snippet": "    public HashSet<String> getGuaranteedNeighboringCells(double queryRadius, Point queryPoint)    {        //queryRadius = CoordinatesConversion.metersToDD(queryRadius,cellLength,cellLengthMeters); //UNCOMMENT FOR HAVERSINE (METERS)        System.out.println(\"queryRadius in Lat/Lon: \"+ queryRadius);        String queryCellID = queryPoint.gridID;        HashSet<String> guaranteedNeighboringCellsSet = new HashSet<String>();        int guaranteedNeighboringLayers = getGuaranteedNeighboringLayers(queryRadius);        if(guaranteedNeighboringLayers == 0)        {            guaranteedNeighboringCellsSet.add(queryCellID);        }        else if(guaranteedNeighboringLayers > 0)        {            ArrayList<Integer> queryCellIndices = HelperClass.getIntCellIndices(queryCellID);       //converts cellID String->Integer            for(int i = queryCellIndices.get(0) - guaranteedNeighboringLayers; i <= queryCellIndices.get(0) + guaranteedNeighboringLayers; i++)                for(int j = queryCellIndices.get(1) - guaranteedNeighboringLayers; j <= queryCellIndices.get(1) + guaranteedNeighboringLayers; j++)                {                    if(validKey(i,j))                    {                        String neighboringCellKey = HelperClass.padLeadingZeroesToInt(i, CELLINDEXSTRLENGTH) + HelperClass.padLeadingZeroesToInt(j, CELLINDEXSTRLENGTH);                        guaranteedNeighboringCellsSet.add(neighboringCellKey);                    }                }        }        return guaranteedNeighboringCellsSet;    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "validKey", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean validKey(int x, int y){        if(x < numGridPartitions && y < numGridPartitions)        {return true;}        else        {return false;}    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getNeighboringCellsByLayer", "params": ["Point", "int"], "throws": null, "modifiers": ["public"], "return_type": "HashSet<String>", "snippet": "    public HashSet<String> getNeighboringCellsByLayer(Point p, int numNeighboringLayers)    {        //queryRadius = CoordinatesConversion.metersToDD(queryRadius,cellLength,cellLengthMeters); // UNCOMMENT FOR HAVERSINE (METERS)        String givenCellID = p.gridID;        HashSet<String> neighboringCellsSet = new HashSet<String>();        if(numNeighboringLayers <= 0)        {            System.out.println(\"candidateNeighboringLayers cannot be 0 or less\");            System.exit(1); // Unsuccessful termination        }        else //numNeighboringLayers > 0        {            ArrayList<Integer> cellIndices = HelperClass.getIntCellIndices(givenCellID);            for(int i = cellIndices.get(0) - numNeighboringLayers; i <= cellIndices.get(0) + numNeighboringLayers; i++)                for(int j = cellIndices.get(1) - numNeighboringLayers; j <= cellIndices.get(1) + numNeighboringLayers; j++)                {                    if(validKey(i,j))                    {                        String neighboringCellKey = HelperClass.padLeadingZeroesToInt(i, CELLINDEXSTRLENGTH) + HelperClass.padLeadingZeroesToInt(j, CELLINDEXSTRLENGTH);                        neighboringCellsSet.add(neighboringCellKey);                    }                }        }        return neighboringCellsSet;    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getNeighboringCells", "params": ["double", "Point"], "throws": null, "modifiers": ["public"], "return_type": "HashSet<String>", "snippet": "    public HashSet<String> getNeighboringCells(double queryRadius, Point queryPoint)    {        // return all the cells in the set        if(queryRadius == 0){            return this.girdCellsSet;        }        //queryRadius = CoordinatesConversion.metersToDD(queryRadius,cellLength,cellLengthMeters); // UNCOMMENT FOR HAVERSINE (METERS)        String queryCellID = queryPoint.gridID;        HashSet<String> neighboringCellsSet = new HashSet<String>();        int numNeighboringLayers = getCandidateNeighboringLayers(queryRadius);        if(numNeighboringLayers <= 0)        {            System.out.println(\"candidateNeighboringLayers cannot be 0 or less\");            System.exit(1); // Unsuccessful termination        }        else //numNeighboringLayers > 0        {            ArrayList<Integer> queryCellIndices = HelperClass.getIntCellIndices(queryCellID);            for(int i = queryCellIndices.get(0) - numNeighboringLayers; i <= queryCellIndices.get(0) + numNeighboringLayers; i++)                for(int j = queryCellIndices.get(1) - numNeighboringLayers; j <= queryCellIndices.get(1) + numNeighboringLayers; j++)                {                    if(validKey(i,j))                    {                        String neighboringCellKey = HelperClass.padLeadingZeroesToInt(i, CELLINDEXSTRLENGTH) + HelperClass.padLeadingZeroesToInt(j, CELLINDEXSTRLENGTH);                        neighboringCellsSet.add(neighboringCellKey);                    }                }        }        return neighboringCellsSet;    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCandidateNeighboringCells", "params": ["double", "Point", "Set<String>"], "throws": null, "modifiers": ["public"], "return_type": "HashSet<String>", "snippet": "    public HashSet<String> getCandidateNeighboringCells(double queryRadius, Point queryPoint, Set<String> guaranteedNeighboringCellsSet)    {        // queryRadius = CoordinatesConversion.metersToDD(queryRadius,cellLength,cellLengthMeters);  //UNCOMMENT FOR HAVERSINE (METERS)        String queryCellID = queryPoint.gridID;        HashSet<String> candidateNeighboringCellsSet = new HashSet<String>();        int candidateNeighboringLayers = getCandidateNeighboringLayers(queryRadius);        if(candidateNeighboringLayers <= 0)        {            System.out.println(\"candidateNeighboringLayers cannot be 0 or less\");            System.exit(1); // Unsuccessful termination        }        else //candidateNeighboringLayers > 0        {            ArrayList<Integer> queryCellIndices = HelperClass.getIntCellIndices(queryCellID);            int count = 0;            for(int i = queryCellIndices.get(0) - candidateNeighboringLayers; i <= queryCellIndices.get(0) + candidateNeighboringLayers; i++)                for(int j = queryCellIndices.get(1) - candidateNeighboringLayers; j <= queryCellIndices.get(1) + candidateNeighboringLayers; j++)                {                    if(validKey(i,j)) {                        String neighboringCellKey = HelperClass.padLeadingZeroesToInt(i, CELLINDEXSTRLENGTH) + HelperClass.padLeadingZeroesToInt(j, CELLINDEXSTRLENGTH);                        if (!guaranteedNeighboringCellsSet.contains(neighboringCellKey)) // Add key if and only if it exist in the gridCell and is not included in the guaranteed neighbors                        {                            count++;                            candidateNeighboringCellsSet.add(neighboringCellKey);                        }                    }                }            System.out.println(\"Candidate neighbouring cells: \" + count);        }        return candidateNeighboringCellsSet;    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getGuaranteedNeighboringLayers", "params": ["double"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getGuaranteedNeighboringLayers(double queryRadius)    {        double cellDiagonal = cellLength*Math.sqrt(2);        int numberOfLayers = (int)Math.floor((queryRadius/cellDiagonal) - 1); // Subtract 1 because we do not consider the cell with the query object as a layer i        System.out.println(\"Guaranteed Number of Layers: \"+ numberOfLayers );        return numberOfLayers;        // If return value = -1 then not even the cell containing the query is guaranteed to contain r-neighbors        // If return value = 0 then only the cell containing the query is guaranteed to contain r-neighbors        // If return value is a positive integer n, then the n layers around the cell containing the query is guaranteed to contain r-neighbors    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCandidateNeighboringLayers", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCandidateNeighboringLayers(double queryRadius)    {        int numberOfLayers = (int)Math.ceil(queryRadius/cellLength);        return numberOfLayers;    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getNeighboringLayerCells", "params": ["Point", "int"], "throws": null, "modifiers": ["public"], "return_type": "HashSet<String>", "snippet": "    public HashSet<String> getNeighboringLayerCells(Point queryPoint, int layerNumber)    {        String queryCellID = queryPoint.gridID;        HashSet<String> neighboringLayerCellsSet = new HashSet<String>();        HashSet<String> neighboringLayerCellsToExcludeSet = new HashSet<String>();        ArrayList<Integer> queryCellIndices = HelperClass.getIntCellIndices(queryCellID);       //converts cellID String->Integer        //Get the cells to exclude, iff layerNumber is greater than 0        if(layerNumber > 0)        {            for(int i = queryCellIndices.get(0) - layerNumber + 1; i <= queryCellIndices.get(0) + layerNumber - 1; i++)                for(int j = queryCellIndices.get(1) - layerNumber + 1; j <= queryCellIndices.get(1) + layerNumber -1; j++)                {                    if(validKey(i,j)) {                        String neighboringCellKey = HelperClass.padLeadingZeroesToInt(i, CELLINDEXSTRLENGTH) + HelperClass.padLeadingZeroesToInt(j, CELLINDEXSTRLENGTH);                        neighboringLayerCellsToExcludeSet.add(neighboringCellKey);                    }                }        }        for(int i = queryCellIndices.get(0) - layerNumber; i <= queryCellIndices.get(0) + layerNumber; i++)            for(int j = queryCellIndices.get(1) - layerNumber; j <= queryCellIndices.get(1) + layerNumber; j++)            {                if(validKey(i,j))                {                    String neighboringCellKey = HelperClass.padLeadingZeroesToInt(i, CELLINDEXSTRLENGTH) + HelperClass.padLeadingZeroesToInt(j, CELLINDEXSTRLENGTH);                    if (!neighboringLayerCellsToExcludeSet.contains(neighboringCellKey)) // Add key if and only if it exist in the gridCell                    {                        neighboringLayerCellsSet.add(neighboringCellKey);                    }                }            }        return neighboringLayerCellsSet;    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getAllNeighboringLayers", "params": ["Point"], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<HashSet>", "snippet": "    public ArrayList<HashSet<String>> getAllNeighboringLayers(Point p)    {        ArrayList<HashSet<String>> listOfSets = new ArrayList<HashSet<String>>();        for(int i = 0; i < numGridPartitions; i++)        {            HashSet<String> neighboringLayerCellSet = getNeighboringLayerCells(p, i);            if(neighboringLayerCellSet.size() > 0)            {                listOfSets.add(neighboringLayerCellSet);            }            else            {                break; // break the for loop as soon as we find an empty neighboringLayerCellSet            }        }        return listOfSets;    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "UniformGrid", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "filter", "params": ["Tuple2<String,Integer>"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean filter(Tuple2<String, Integer> cellIDCount) throws Exception        {            return CellIDs.contains(cellIDCount.f0);        }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialIndices/UniformGrid.java", "stars": "2", "class": {"name": "getCellsFilteredByLayer", "extends": "RichFilterFunction", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getExitCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExitCode() {    return this.exitCode;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/ProcessFailureException.java", "stars": "18", "class": {"name": "ProcessFailureException", "extends": "RuntimeException", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLogSnippet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getLogSnippet() {    return this.logSnippet;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/ProcessFailureException.java", "stars": "18", "class": {"name": "ProcessFailureException", "extends": "RuntimeException", "implements": null, "modifiers": ["public"]}}, {"method_name": "getWebankUserTotal", "params": [], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int getWebankUserTotal() throws SystemUserManagerException {        final IntHandler intHandler = new IntHandler();        try {            return this.dbOperator.query(IntHandler.GET_WEBANK_USER_TOTAL, intHandler);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find the total of Webank User.\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "findAllWebankUserList", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<WebankUser>", "snippet": "    public List<WebankUser> findAllWebankUserList(String searchName) throws SystemUserManagerException {        List<WebankUser> webankUserList = null;        String querySQL = findAllWebankUserHandler.BASE_SQL_FIND_ALL_WEBANK_USER;        final List<Object> params = new ArrayList<>();        boolean first = true;        try {            if (StringUtils.isNotBlank(searchName)) {                if (first) {                    querySQL += \" WHERE \";                    first = false;                } else {                    querySQL += \" AND \";                }                querySQL += \" full_name LIKE ?\";                params.add('%' + searchName + '%');                first = false;            }            webankUserList = this.dbOperator.query(querySQL, new findAllWebankUserHandler(), params.toArray());        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find Webank User by userName.\", e);        }        return webankUserList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "findAllWebankUserPageList", "params": ["String", "int", "int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<WebankUser>", "snippet": "    public List<WebankUser> findAllWebankUserPageList(String searchName, int pageNum, int pageSize)        throws SystemUserManagerException {        List<WebankUser> webankUserList = null;        String querySQL = findAllWebankUserHandler.BASE_SQL_FIND_ALL_WEBANK_USER;        final List<Object> params = new ArrayList<>();        boolean first = true;        try {            if (StringUtils.isNotBlank(searchName)) {                if (first) {                    querySQL += \" WHERE \";                    first = false;                } else {                    querySQL += \" AND \";                }                querySQL += \" full_name LIKE ?\";                params.add('%' + searchName + '%');                first = false;            }            if (pageNum > -1 && pageSize > 0) {                querySQL += \" Limit ?, ?\";                params.add(pageNum);                params.add(pageSize);            }            webankUserList = this.dbOperator.query(querySQL, new findAllWebankUserHandler(), params.toArray());        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to page find Webank User\", e);        }        return webankUserList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getWebankUserByUserId", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WebankUser", "snippet": "    public WebankUser getWebankUserByUserId(final String userId) throws SystemUserManagerException {        List<WebankUser> webankUserList = null;        try {            webankUserList = this.dbOperator.query(findAllWebankUserHandler.FIND_WEBANK_USER_BY_ID, new findAllWebankUserHandler(), userId);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find Webank User by userId\", e);        }        if (CollectionUtils.isNotEmpty(webankUserList)) {            return webankUserList.get(0);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "findSystemUserPage", "params": ["String", "String", "String", "int", "int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<WtssUser>", "snippet": "    public List<WtssUser> findSystemUserPage(final String userName, final String fullName, final String departmentName, int start, int pageSize)        throws SystemUserManagerException {        List<WtssUser> wtssUserList = null;        String querySQL = SystemUserHandler.BASE_SQL_FIND_WTSS_USER;        final List<Object> params = new ArrayList<>();        boolean first = true;        try {            if (StringUtils.isNotBlank(userName)) {                if (first) {                    querySQL += \" WHERE \";                    first = false;                } else {                    querySQL += \" AND \";                }                querySQL += \" username LIKE ?\";                params.add('%' + userName + '%');                first = false;            }            if (StringUtils.isNotBlank(fullName)) {                if (first) {                    querySQL += \" WHERE \";                    first = false;                } else {                    querySQL += \" AND \";                }                querySQL += \" full_name LIKE ?\";                params.add('%' + fullName + '%');                first = false;            }            if (StringUtils.isNotBlank(departmentName)) {                if (first) {                    querySQL += \" WHERE \";                    first = false;                } else {                    querySQL += \" AND \";                }                querySQL += \" department_name LIKE ?\";                params.add('%' + departmentName + '%');                first = false;            }            if (start > -1 && pageSize > 0) {                querySQL += \" Limit ?, ?\";                params.add(start);                params.add(pageSize);            }            wtssUserList = this.dbOperator.query(querySQL, new SystemUserHandler(), params.toArray());        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to page find WTSS User\", e);        }        return wtssUserList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "addWtssUser", "params": ["WtssUser"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int addWtssUser(final WtssUser wtssUser) throws SystemUserManagerException {        final String INSERT_WTSS_USER = \"INSERT INTO wtss_user (\" + SQL_PARAMS_TABLE_WTSS_USER + \") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\";        try {            return this.dbOperator.update(INSERT_WTSS_USER,                wtssUser.getUserId(),                wtssUser.getUsername(),                wtssUser.getPassword(),                wtssUser.getFullName(),                wtssUser.getDepartmentId(),                wtssUser.getDepartmentName(),                wtssUser.getEmail(),                wtssUser.getProxyUsers(),                wtssUser.getRoleId(),                wtssUser.getUserType(),                wtssUser.getCreateTime(),                wtssUser.getUpdateTime(),                wtssUser.getModifyInfo(),                wtssUser.getModifyType(),                wtssUser.getUserCategory()            );        } catch (final SQLException e) {            throw new SystemUserManagerException(String.format(\"Add User %s Failed\", wtssUser.toString()), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getWtssUserTotal", "params": [], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int getWtssUserTotal() throws SystemUserManagerException {        final IntHandler intHandler = new IntHandler();        try {            return this.dbOperator.query(IntHandler.GET_WTSS_USER_TOTAL, intHandler);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find the total of WTSS User.\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getWtssUserTotal", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int getWtssUserTotal(String username) throws SystemUserManagerException {        final IntHandler intHandler = new IntHandler();        String querySQL = IntHandler.GET_WTSS_USER_TOTAL;        final List<Object> params = new ArrayList<>();        boolean first = true;        try {            if (StringUtils.isNotBlank(username)) {                if (first) {                    querySQL += \" WHERE \";                    first = false;                } else {                    querySQL += \" AND \";                }                querySQL += \" full_name LIKE ?\";                params.add('%' + username + '%');                first = false;            }            return this.dbOperator.query(querySQL, intHandler, params.toArray());        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find the total of WTSS User\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "updateWtssUser", "params": ["WtssUser"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int updateWtssUser(WtssUser wtssUser) throws SystemUserManagerException {        final String INSERT_WTSS_USER = \"UPDATE wtss_user SET \"            + \"password=?, department_id=?, department_name=?, \"            + \"proxy_users=?, role_id=?, user_type=?, update_time=?, user_category=? \"            + \"WHERE user_id=? \";        try {            return this.dbOperator.update(INSERT_WTSS_USER,                wtssUser.getPassword(),                wtssUser.getDepartmentId(),                wtssUser.getDepartmentName(),                wtssUser.getProxyUsers(),                wtssUser.getRoleId(),                wtssUser.getUserType(),                wtssUser.getUpdateTime(),                wtssUser.getUserCategory(),                wtssUser.getUserId());        } catch (final SQLException e) {            throw new SystemUserManagerException(String.format(\"Error update by wtssUser, %s \", wtssUser.toString()), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "updateWtssUser", "params": ["WtssUser", "boolean"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int updateWtssUser(WtssUser wtssUser, boolean synEsb) throws SystemUserManagerException {        final String INSERT_WTSS_USER = \"UPDATE wtss_user SET user_id=?, department_id=?, department_name=?, update_time=?, modify_type=? ,modify_info=? \"            + \"WHERE user_id=? \";        try {            return this.dbOperator.update(INSERT_WTSS_USER,                wtssUser.getUserId(),                wtssUser.getDepartmentId(),                wtssUser.getDepartmentName(),                wtssUser.getUpdateTime(),                wtssUser.getModifyType(),                wtssUser.getModifyInfo(),                wtssUser.getUserId());        } catch (final SQLException e) {            throw new SystemUserManagerException(String.format(\"Error update by esb, %s \", wtssUser.toString()), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "updateWtssUserByName", "params": ["WtssUser", "boolean"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int updateWtssUserByName(WtssUser wtssUser, boolean synEsb) throws SystemUserManagerException {        final String INSERT_WTSS_USER = \"UPDATE wtss_user SET user_id=?, department_id=?, department_name=?, update_time=?, modify_type=? ,modify_info=? \"            + \"WHERE username=? \";        try {            return this.dbOperator.update(INSERT_WTSS_USER,                wtssUser.getUserId(),                wtssUser.getDepartmentId(),                wtssUser.getDepartmentName(),                wtssUser.getUpdateTime(),                wtssUser.getModifyType(),                wtssUser.getModifyInfo(),                wtssUser.getUsername());        } catch (final SQLException e) {            throw new SystemUserManagerException(String.format(\"Error update by name, %s \", wtssUser.toString()), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getWtssUserByUserId", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WtssUser", "snippet": "    public WtssUser getWtssUserByUserId(final String userId) throws SystemUserManagerException {        List<WtssUser> wtssUserList = null;        try {            wtssUserList = this.dbOperator.query(SystemUserHandler.FIND_WTSS_USER_BY_ID, new SystemUserHandler(), userId);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find WTSS User by userId\", e);        }        if (CollectionUtils.isNotEmpty(wtssUserList)) {            return wtssUserList.get(0);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getWtssUserByUsernameAndPassword", "params": ["String", "String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WtssUser", "snippet": "    public WtssUser getWtssUserByUsernameAndPassword(String username, String password) throws SystemUserManagerException {        List<WtssUser> wtssUserList = null;        try {            wtssUserList = this.dbOperator.query(SystemUserHandler.FIND_WTSS_USER_BY_USERNAME_AND_PASSWORD,                new SystemUserHandler(), username, password);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find WTSS User by userName and password.\", e);        }        if (CollectionUtils.isNotEmpty(wtssUserList)) {            return wtssUserList.get(0);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getWtssUserByUsernameAndPassword", "params": ["WtssUser"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WtssUser", "snippet": "    public WtssUser getWtssUserByUsernameAndPassword(WtssUser wtssUser) throws SystemUserManagerException {        List<WtssUser> wtssUserList = null;        try {            String username = wtssUser.getUsername();            String encodePwd = MD5Utils.md5(MD5Utils.md5(wtssUser.getPassword()) + wtssUser.getUserId());            wtssUserList = this.dbOperator.query(SystemUserHandler.FIND_WTSS_USER_BY_USERNAME_AND_PASSWORD,                new SystemUserHandler(), username, encodePwd);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find WTSS User by userName and password.\", e);        }        if (CollectionUtils.isNotEmpty(wtssUserList)) {            return wtssUserList.get(0);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getWtssRoleById", "params": ["int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WtssRole", "snippet": "    public WtssRole getWtssRoleById(int roleId) throws SystemUserManagerException {        List<WtssRole> wtssRoleList = null;        try {            wtssRoleList = this.dbOperator.query(WtssRoleHandler.FIND_WTSS_ROLE_BY_ID, new WtssRoleHandler(), roleId);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find WTSS User by roleId\", e);        }        if (CollectionUtils.isNotEmpty(wtssRoleList)) {            return wtssRoleList.get(0);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getWtssPermissionsById", "params": ["int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WtssPermissions", "snippet": "    public WtssPermissions getWtssPermissionsById(int permissionsId)        throws SystemUserManagerException {        List<WtssPermissions> wtssPermissionsList = null;        try {            wtssPermissionsList = this.dbOperator.query(WtssPermissionsHandler.FIND_WTSS_PERM_BY_ID,                new WtssPermissionsHandler(), permissionsId);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find WTSS Permission by permissionsId\", e);        }        if (CollectionUtils.isNotEmpty(wtssPermissionsList)) {            return wtssPermissionsList.get(0);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getWtssPermissionsListByIds", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<WtssPermissions>", "snippet": "    public List<WtssPermissions> getWtssPermissionsListByIds(String permissionsIds) throws SystemUserManagerException {        List<WtssPermissions> wtssPermissionsList = null;        String sql = WtssPermissionsHandler.FIND_WTSS_PERM_BY_IDS;        sql += \"(\" + permissionsIds + \")\";        try {            wtssPermissionsList = this.dbOperator.query(sql, new WtssPermissionsHandler());        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find WTSS Permission by permissionsIds\", e);        }        return wtssPermissionsList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getWtssUserByUsername", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WtssUser", "snippet": "    public WtssUser getWtssUserByUsername(String username) throws SystemUserManagerException {        List<WtssUser> wtssUserList = null;        try {            wtssUserList = this.dbOperator.query(SystemUserHandler.FIND_WTSS_USER_BY_USERNAME,                new SystemUserHandler(), username);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find WTSS User by userName\", e);        }        if (CollectionUtils.isNotEmpty(wtssUserList)) {            return wtssUserList.get(0);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getWebankDepartmentTotal", "params": [], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int getWebankDepartmentTotal() throws SystemUserManagerException {        final IntHandler intHandler = new IntHandler();        try {            return this.dbOperator.query(IntHandler.GET_WEBANK_DEPARTMENT_TOTAL, intHandler);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find the total of Webank Department\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getWebankDepartmentTotal", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int getWebankDepartmentTotal(final String searchterm) throws SystemUserManagerException {        final IntHandler intHandler = new IntHandler();        String querySQL = IntHandler.GET_WEBANK_DEPARTMENT_TOTAL;        final List<Object> params = new ArrayList<>();        boolean first = true;        try {            if (StringUtils.isNotBlank(searchterm)) {                if (first) {                    querySQL += \" WHERE \";                    first = false;                } else {                    querySQL += \" AND \";                }                querySQL += \" dp_ch_name LIKE ? \";                params.add('%' + searchterm + '%');                first = false;            }            return this.dbOperator.query(querySQL, intHandler, params.toArray());        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find the total of Webank Department\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "findAllWebankDepartmentList", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<WebankDepartment>", "snippet": "    public List<WebankDepartment> findAllWebankDepartmentList(String searchName)        throws SystemUserManagerException {        List<WebankDepartment> webankDepartmentList = null;        String querySQL = WebankDepartmentHandler.FIND_WEBANK_DEPARTMENT_NO_ORG;        final List<Object> params = new ArrayList<>();        boolean first = true;        try {            if (StringUtils.isNotBlank(searchName)) {                querySQL += \" AND \";                querySQL += \" dp_ch_name LIKE ?\";                params.add('%' + searchName + '%');                first = false;            }            webankDepartmentList = this.dbOperator.query(querySQL, new WebankDepartmentHandler(), params.toArray());        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find all Webank Department\", e);        }        return webankDepartmentList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "findAllWebankDepartmentPageList", "params": ["String", "int", "int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<WebankDepartment>", "snippet": "    public List<WebankDepartment> findAllWebankDepartmentPageList(String searchName, int pageNum, int pageSize) throws SystemUserManagerException {        List<WebankDepartment> webankDepartmentList = null;        String querySQL = WebankDepartmentHandler.FIND_WEBANK_DEPARTMENT_NO_ORG;        final List<Object> params = new ArrayList<>();        boolean first = false;        try {            if (StringUtils.isNotBlank(searchName)) {                querySQL += \" AND \";                querySQL += \" dp_ch_name LIKE ?\";                params.add('%' + searchName + '%');                first = false;            }            if (pageNum > -1 && pageSize > 0) {                querySQL += \" Limit ?, ?\";                params.add(pageNum);                params.add(pageSize);            }            webankDepartmentList = this.dbOperator.query(querySQL, new WebankDepartmentHandler(), params.toArray());        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to page find Webank Department\", e);        }        return webankDepartmentList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getWebankDepartmentByDpId", "params": ["int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WebankDepartment", "snippet": "    public WebankDepartment getWebankDepartmentByDpId(final int dpId) throws SystemUserManagerException {        List<WebankDepartment> webankDepartmentList = null;        try {            webankDepartmentList = this.dbOperator.query(WebankDepartmentHandler.FIND_WEBANK_DEPARTMENT_BY_DPID,                new WebankDepartmentHandler(), dpId);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find Webank Department by dpId\", e);        }        if (CollectionUtils.isNotEmpty(webankDepartmentList)) {            return webankDepartmentList.get(0);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getParentDepartmentByPId", "params": ["int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WebankDepartment", "snippet": "    public WebankDepartment getParentDepartmentByPId(final int pId) throws SystemUserManagerException {        List<WebankDepartment> webankDepartmentList = null;        try {            webankDepartmentList = this.dbOperator.query(WebankDepartmentHandler.FIND_WEBANK_DEPARTMENT_BY_PID,                new WebankDepartmentHandler(), pId);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find Webank Department by dpId\", e);        }        if (CollectionUtils.isNotEmpty(webankDepartmentList)) {            return webankDepartmentList.get(0);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "findAllWebankDepartmentPageOrSearch", "params": ["String", "int", "int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<WebankDepartment>", "snippet": "    public List<WebankDepartment> findAllWebankDepartmentPageOrSearch(String searchName, int pageNum, int pageSize) throws SystemUserManagerException {        List<WebankDepartment> webankDepartmentList = null;        String querySQL = FetchWebankDepartmentHandler.FETCH_ALL_WEBANK_DEPARTMENT;        final List<Object> params = new ArrayList<>();        boolean first = true;        try {            if (StringUtils.isNotBlank(searchName)) {                if (first) {                    querySQL += \" WHERE \";                    first = false;                } else {                    querySQL += \" AND \";                }                querySQL += \"c.dp_ch_name LIKE ? \";                params.add('%' + searchName + '%');                first = false;            }            if (pageNum > -1 && pageSize > 0) {                querySQL += \" Limit ?, ?\";                params.add(pageNum);                params.add(pageSize);            }            webankDepartmentList = this.dbOperator.query(querySQL, new FetchWebankDepartmentHandler(), params.toArray());        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to page find Webank Department\", e);        }        return webankDepartmentList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "deleteWtssUser", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int deleteWtssUser(String userId) throws SystemUserManagerException {        final String DELETE_WTSS_USER_BY_ID = \"DELETE FROM wtss_user WHERE user_id=? \";        try {            return this.dbOperator.update(DELETE_WTSS_USER_BY_ID, userId);        } catch (final SQLException e) {            logger.error(\"delet wtss user failed.\", e);            throw new SystemUserManagerException(\"Error deleting wtss user \" + userId);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getWebankUserByUsername", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WebankUser", "snippet": "    public WebankUser getWebankUserByUsername(final String username) throws SystemUserManagerException {        List<WebankUser> webankUserList = null;        try {            webankUserList = this.dbOperator.query(findAllWebankUserHandler.FIND_WEBANK_USER_BY_USERNAME, new findAllWebankUserHandler(), username);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find Webank Department by userName\", e);        }        if (CollectionUtils.isNotEmpty(webankUserList)) {            return webankUserList.get(0);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "addDeparment", "params": ["WebankDepartment"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int addDeparment(WebankDepartment webankDepartment) throws SystemUserManagerException {        return addDeparmentHandel(webankDepartment);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "addDeparmentHandel", "params": ["WebankDepartment"], "throws": ["SystemUserManagerException"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int addDeparmentHandel(final WebankDepartment webankDepartment) throws SystemUserManagerException {        final String INSERT_DEPARMENT = \"INSERT INTO cfg_webank_organization (\" + SQL_PARAMS_TABLE_CFG_WEBANK_ORGANIZATION + \") values (?,?,?,?,?,?,?,?,?)\";        try {            return this.dbOperator.update(INSERT_DEPARMENT,                webankDepartment.getDpId(),                webankDepartment.getPid(),                webankDepartment.getDpName(),                webankDepartment.getDpChName(),                webankDepartment.getOrgId(),                webankDepartment.getOrgName(),                webankDepartment.getDivision(),                webankDepartment.getGroupId(),                webankDepartment.getUploadFlag()            );        } catch (final SQLException e) {            throw new SystemUserManagerException(String.format(\"Add User %s Failed\", webankDepartment.toString()), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "updateDeparment", "params": ["WebankDepartment"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int updateDeparment(WebankDepartment webankDepartment) throws SystemUserManagerException {        final String UPDATE_DEPARMENT_BY_ID = \"UPDATE cfg_webank_organization SET \"            + \"pid=?, dp_name=?, dp_ch_name=?, org_id=?, org_name=?, division=? , group_id=? ,upload_flag=? \"            + \" WHERE dp_id=? \";        try {            int updateResult = this.dbOperator.update(UPDATE_DEPARMENT_BY_ID,                webankDepartment.getPid(),                webankDepartment.getDpName(),                webankDepartment.getDpChName(),                webankDepartment.getOrgId(),                webankDepartment.getOrgName(),                webankDepartment.getDivision(),                webankDepartment.getGroupId(),                webankDepartment.getUploadFlag(),                webankDepartment.getDpId());            return updateResult;        } catch (final SQLException e) {            throw new SystemUserManagerException(String.format(\"Error updating %s \", webankDepartment.toString()), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "deleteDeparment", "params": ["int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int deleteDeparment(int dpId) throws SystemUserManagerException {        final String DELETE_DEPARMENT_BY_ID = \"DELETE FROM cfg_webank_organization WHERE dp_id=? \";        try {            return this.dbOperator.update(DELETE_DEPARMENT_BY_ID, dpId);        } catch (final SQLException e) {            logger.error(\"delet wtss user failed.\", e);            throw new SystemUserManagerException(\"Error deleting deparment \" + dpId);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getSystemUserByDepartmentId", "params": ["int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<WtssUser>", "snippet": "    public List<WtssUser> getSystemUserByDepartmentId(int dpId) throws SystemUserManagerException {        List<WtssUser> wtssUserList = null;        try {            wtssUserList = this.dbOperator.query(SystemUserHandler.FIND_WTSS_USER_BY_DEPARTMENT_ID, new SystemUserHandler(), dpId);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"get SystemUser By DepartmentId failed, caused by:{}\", e);        }        return wtssUserList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getModifySystemUser", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<WtssUser>", "snippet": "    public List<WtssUser> getModifySystemUser(String modifyType) throws SystemUserManagerException {        List<WtssUser> wtssUserList = null;        try {            if (StringUtils.isBlank(modifyType)) {                wtssUserList = this.dbOperator.query(SystemUserHandler.FIND_ALL_MODIFY_WTSS_USER, new SystemUserHandler());            } else {                StringBuilder builder = new StringBuilder();                builder.append(SystemUserHandler.BASE_SQL_FIND_WTSS_USER).append(\" WHERE modify_type=? \").append(\" ORDER BY update_time DESC\");                wtssUserList = this.dbOperator.query(builder.toString(), new SystemUserHandler(), modifyType);            }        } catch (final SQLException e) {            throw new SystemUserManagerException(\"get Modify SystemUser By modifyType failed, caused by:{}\", e);        }        return wtssUserList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getModifySystemUser", "params": ["int", "int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<WtssUser>", "snippet": "    public List<WtssUser> getModifySystemUser(int start, int pageSize) throws SystemUserManagerException {        List<WtssUser> wtssUserList = null;        try {            final List<Object> params = new ArrayList<>();            if (start > -1 && pageSize > 0) {                params.add(start);                params.add(pageSize);            }            wtssUserList = this.dbOperator.query(SystemUserHandler.FIND_ALL_MODIFY_WTSS_USER + \" Limit ?, ?\", new SystemUserHandler(), params.toArray());        } catch (final SQLException e) {            throw new SystemUserManagerException(\"get Modify SystemUser By modifyType failed, caused by:{}\", e);        }        return wtssUserList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getModifySystemUser", "params": ["String", "int", "int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<WtssUser>", "snippet": "    public List<WtssUser> getModifySystemUser(String searchterm, int start, int pageSize)        throws SystemUserManagerException {        List<WtssUser> wtssUserList = null;        try {            String querySQL = SystemUserHandler.FIND_ALL_MODIFY_WTSS_USER;            final List<Object> params = new ArrayList<>();            if (StringUtils.isNotBlank(searchterm)) {                querySQL += \" AND full_name LIKE ?\";                params.add('%' + searchterm + '%');            }            if (start > -1 && pageSize > 0) {                querySQL += \" Limit ?, ?\";                params.add(start);                params.add(pageSize);            }            wtssUserList = this.dbOperator.query(querySQL, new SystemUserHandler(), params.toArray());        } catch (SQLException e) {            throw new SystemUserManagerException(\"Failed to page find WTSS User\", e);        }        return wtssUserList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getModifyInfoSystemUserById", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String getModifyInfoSystemUserById(String userId) throws SystemUserManagerException {        // \u8c03\u7528\u672c\u5730\u65b9\u6cd5\u67e5\u8be2\u7528\u6237        WtssUser wtssUserByUserId = this.getWtssUserByUserId(userId);        if (null == wtssUserByUserId) {            throw new SystemUserManagerException(\"Failed to find WTSS User by userId\");        }        return wtssUserByUserId.getModifyInfo();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getSystemUserByUserName", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WtssUser", "snippet": "    public WtssUser getSystemUserByUserName(final String userName) throws SystemUserManagerException {        List<WtssUser> wtssUserList = null;        try {            wtssUserList = this.dbOperator.query(SystemUserHandler.FIND_WTSS_USER_BY_NAME, new SystemUserHandler(), userName);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find WTSS User by userName\", e);        }        if (CollectionUtils.isNotEmpty(wtssUserList)) {            return wtssUserList.get(0);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getWebankUserByUserName", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WebankUser", "snippet": "    public WebankUser getWebankUserByUserName(final String userName) throws SystemUserManagerException {        List<WebankUser> webankUserList = null;        try {            webankUserList = this.dbOperator.query(findAllWebankUserHandler.FIND_WEBANK_USER_BY_NAME, new findAllWebankUserHandler(), userName);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find Webank User by userId\", e);        }        if (CollectionUtils.isNotEmpty(webankUserList)) {            return webankUserList.get(0);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getDepartmentMaintainerList", "params": ["String", "int", "int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<DepartmentMaintainer>", "snippet": "    public List<DepartmentMaintainer> getDepartmentMaintainerList(String searchterm, int start, int pageSize) throws SystemUserManagerException {        List<DepartmentMaintainer> departmentMaintainerList = null;        try {            String querySQL = DepartmentMaintainerHandler.BASE_SQL_FIND_DEPARTMENT_MAINTAINER;            final List<Object> params = new ArrayList<>();            if (StringUtils.isNotBlank(searchterm)) {                querySQL += \" WHERE department_id LIKE ? or department_name LIKE ? or ops_user LIKE ?\";                params.add('%' + searchterm + '%');                params.add('%' + searchterm + '%');                params.add('%' + searchterm + '%');            }            if (start > -1 && pageSize > 0) {                querySQL += \" Limit ?, ?\";                params.add(start);                params.add(pageSize);            }            departmentMaintainerList = this.dbOperator.query(querySQL, new DepartmentMaintainerHandler(), params.toArray());        } catch (SQLException e) {            throw new SystemUserManagerException(\"Failed to page find department maintainer, caused by:\", e);        }        return departmentMaintainerList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getDepartmentMaintainerList", "params": ["int", "int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<DepartmentMaintainer>", "snippet": "    public List<DepartmentMaintainer> getDepartmentMaintainerList(int start, int pageSize) throws SystemUserManagerException {        List<DepartmentMaintainer> departmentMaintainerList = null;        try {            String querySQL = DepartmentMaintainerHandler.BASE_SQL_FIND_DEPARTMENT_MAINTAINER;            final List<Object> params = new ArrayList<>();            if (start > -1 && pageSize > 0) {                querySQL += \" Limit ?, ?\";                params.add(start);                params.add(pageSize);            }            departmentMaintainerList = this.dbOperator.query(querySQL, new DepartmentMaintainerHandler(), params.toArray());        } catch (SQLException e) {            throw new SystemUserManagerException(\"Failed to page find department maintainer, caused by:\", e);        }        return departmentMaintainerList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getDepMaintainerByDepId", "params": ["long"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "DepartmentMaintainer", "snippet": "    public DepartmentMaintainer getDepMaintainerByDepId(long departmentId) throws SystemUserManagerException {        List<DepartmentMaintainer> departmentMaintainerList = null;        try {            String querySQL = DepartmentMaintainerHandler.FIND_DEPARTMENT_ID_BY_ID;            departmentMaintainerList = this.dbOperator.query(querySQL, new DepartmentMaintainerHandler(), departmentId);        } catch (SQLException e) {            throw new SystemUserManagerException(\"Failed to page find department maintainer, caused by:\", e);        }        if (CollectionUtils.isNotEmpty(departmentMaintainerList)) {            return departmentMaintainerList.get(0);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getDepartmentMaintainerTotal", "params": [], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int getDepartmentMaintainerTotal() throws SystemUserManagerException {        final IntHandler intHandler = new IntHandler();        try {            return this.dbOperator.query(IntHandler.GET_DEPARTMENT_MAINTAINER_TOTAL, intHandler);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Failed to find the total of Department Maintainer.\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "updateDepartmentMaintainer", "params": ["long", "String", "String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int updateDepartmentMaintainer(long departmentId, String departmentName, String depMaintainer) throws SystemUserManagerException {        final String UPDATE_DEPARTMENT_MAINTAINER = \"UPDATE department_maintainer SET \"            + \"department_id=?, department_name=?, ops_user=? \"            + \"WHERE department_id=? \";        try {            return this.dbOperator.update(UPDATE_DEPARTMENT_MAINTAINER, departmentId, departmentName, depMaintainer, departmentId);        } catch (final SQLException e) {            Integer destDepartmentId = Integer.valueOf(departmentId + \"\");            String objectStr = new DepartmentMaintainer(destDepartmentId, departmentName, depMaintainer).toString();            throw new SystemUserManagerException(String.format(\"Error adding %s \", objectStr), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "deleteDepartmentMaintainer", "params": ["Integer"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int deleteDepartmentMaintainer(Integer departmentId) throws SystemUserManagerException {        final String DELETE_DEPARTMENT_MAINTAINER_BY_ID = \"DELETE FROM department_maintainer WHERE department_id=? \";        try {            return this.dbOperator.update(DELETE_DEPARTMENT_MAINTAINER_BY_ID, departmentId);        } catch (final SQLException e) {            throw new SystemUserManagerException(\"Error delete Department Maintainer, id= \" + departmentId);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "addDepartmentMaintainer", "params": ["long", "String", "String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int addDepartmentMaintainer(long departmentId, String departmentName, String userName) throws SystemUserManagerException {        final String INSERT_DEPARTMENT_MAINTAINER = \"INSERT INTO department_maintainer (\" + SQL_PARAMS_TABLE_DEPARTMENT_MAINTAINER + \") values (?,?,?)\";        try {            return this.dbOperator.update(INSERT_DEPARTMENT_MAINTAINER, departmentId, departmentName, userName);        } catch (final SQLException e) {            Integer destDepartmentId = Integer.valueOf(departmentId + \"\");            String objectStr = new DepartmentMaintainer(destDepartmentId, departmentName, userName).toString();            throw new SystemUserManagerException(String.format(\"Add department maintainer %s Failed\", objectStr), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getDepartmentMaintainerDepListByUserName", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "    public  List<Integer> getDepartmentMaintainerDepListByUserName(String loginUserName) throws SystemUserManagerException {        List<DepartmentMaintainer> departmentMaintainerList = null;        try {            String querySql = DepartmentMaintainerHandler.BASE_SQL_FIND_DEPARTMENT_MAINTAINER;            final List<Object> params = new ArrayList<>();            if (StringUtils.isNotBlank(loginUserName)) {                querySql += \" WHERE ops_user LIKE ?\";                params.add('%' + loginUserName + '%');            }            departmentMaintainerList = this.dbOperator.query(querySql, new DepartmentMaintainerHandler(), params.toArray());            if (CollectionUtils.isNotEmpty(departmentMaintainerList)) {                // \u8fc7\u6ee4\u6570\u636e, \u8fc7\u6ee4\u6389\u56e0\u4e3a\u524d\u540e\u7f00\u5339\u914d\u51fa\u6765\u7684\u5783\u573e\u6570\u636e                List<DepartmentMaintainer> realDataList = new ArrayList<>();                for (DepartmentMaintainer departmentMaintainer : departmentMaintainerList) {                    String opsUserStr = departmentMaintainer.getOpsUser().trim();                    // \u8fc7\u6ee4\u5783\u573e\u6570\u636e,\u83b7\u53d6\u6709\u6548\u7684\u8fd0\u7ef4\u4eba\u5458\u4fe1\u606f                    List<String> opsUserList = filterInvalidData(opsUserStr);                    if (CollectionUtils.isNotEmpty(opsUserList)) {                        if (opsUserList.contains(loginUserName)) {                            realDataList.add(departmentMaintainer);                        }                    }                }                return realDataList.stream().map(DepartmentMaintainer::getDepartmentId).collect(Collectors.toList());            } else {                return null;            }        } catch (SQLException e) {            throw new SystemUserManagerException(\"Failed to page find department maintainer depId, caused by:\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getMaintainedProjects", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "    public List<Integer> getMaintainedProjects(String username) throws SystemUserManagerException {        String querySql = \"SELECT pr.id FROM projects pr \"                + \"JOIN wtss_user w on w.username=pr.create_user \"                + \"JOIN department_maintainer d on d.department_id=w.department_id \"                + \"WHERE pr.active=1 and d.ops_user like '%\" + username + \"%'\";        try {            return this.dbOperator.query(querySql, this::getProjectIds);        } catch (SQLException e) {            throw new SystemUserManagerException(\"get maintained projects of \" + username + \" failed\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "filterInvalidData", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "    private List<String> filterInvalidData(String originStr) {        String[] strings = originStr.split(\",\");        List<String> list = new ArrayList<>();        for (String string : strings) {            if (StringUtils.isNotBlank(string)) {                list.add(string);            }        }        return list;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "getProjectIds", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "List<Integer>", "snippet": "    private List<Integer> getProjectIds(ResultSet rs) throws SQLException {        List<Integer> projectIds = new ArrayList<>();        while (rs.next()) {            projectIds.add(rs.getInt(1));        }        return projectIds;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "JdbcSystemUserImpl", "extends": null, "implements": ["SystemUserLoader"], "modifiers": ["public"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<WebankUser>", "snippet": "        public List<WebankUser> handle(final ResultSet rs) throws SQLException {            if (!rs.next()) {                return Collections.emptyList();            }            final List<WebankUser> webankUserList = new ArrayList<>();            do {                final int appId = rs.getInt(1);                final String userId = rs.getString(2);                final String urn = rs.getString(3);                final String fullName = rs.getString(4);                final String displayName = rs.getString(5);                final String title = rs.getString(6);                final long employeeNumber = rs.getLong(7);                final String mangerUrn = rs.getString(8);                final long orgId = rs.getLong(9);                final String defaultGroupName = rs.getString(10);                final String email = rs.getString(11);                final long departmentId = rs.getLong(12);                final String departmentName = rs.getString(13);                final String startDate = rs.getString(14);                final String mobilePhone = rs.getString(15);                final String isActive = rs.getString(16);                final int personGroup = rs.getInt(17);                final long createdTime = rs.getLong(18);                final long modifiedTime = rs.getLong(19);                final WebankUser info = new WebankUser(appId, userId, urn, fullName, displayName, title                    , employeeNumber, mangerUrn, orgId, defaultGroupName, email, departmentId                    , departmentName, startDate, mobilePhone, isActive, personGroup, createdTime, modifiedTime);                webankUserList.add(info);            } while (rs.next());            return webankUserList;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "findAllWebankUserHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<DepartmentMaintainer>", "snippet": "        public List<DepartmentMaintainer> handle(final ResultSet resultSet) throws SQLException {            if (!resultSet.next()) {                return Collections.emptyList();            }            final List<DepartmentMaintainer> departmentMaintainerList = new ArrayList<>();            do {                final int departmentId = resultSet.getInt(1);                final String departmentName = resultSet.getString(2);                final String opsUser = resultSet.getString(3);                final DepartmentMaintainer departmentMaintainer = new DepartmentMaintainer();                departmentMaintainer.setDepartmentId(departmentId);                departmentMaintainer.setDepartmentName(departmentName);                departmentMaintainer.setOpsUser(opsUser);                departmentMaintainerList.add(departmentMaintainer);            } while (resultSet.next());            return departmentMaintainerList;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "DepartmentMaintainerHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<WtssUser>", "snippet": "        public List<WtssUser> handle(final ResultSet rs) throws SQLException {            if (!rs.next()) {                return Collections.emptyList();            }            final List<WtssUser> wtssUserList = new ArrayList<>();            do {                final String userId = rs.getString(1);                final String username = rs.getString(2);                final String password = rs.getString(3);                final String fullName = rs.getString(4);                final long departmentId = rs.getLong(5);                final String departmentName = rs.getString(6);                final String email = rs.getString(7);                final String proxyUsers = rs.getString(8);                final int roleId = rs.getInt(9);                final int userType = rs.getInt(10);                final long createdTime = rs.getLong(11);                final long updateTime = rs.getLong(12);                final String modifyInfo = rs.getString(13);                final String modifyType = rs.getString(14);                final String userCategory = rs.getString(15);                final WtssUser wtssUser = new WtssUser();                wtssUser.setUserId(userId);                wtssUser.setUsername(username);                wtssUser.setPassword(password);                wtssUser.setFullName(fullName);                wtssUser.setDepartmentId(departmentId);                wtssUser.setEmail(email);                wtssUser.setDepartmentName(departmentName);                wtssUser.setProxyUsers(proxyUsers);                wtssUser.setRoleId(roleId);                wtssUser.setUserType(userType);                wtssUser.setCreateTime(createdTime);                wtssUser.setUpdateTime(updateTime);                wtssUser.setModifyInfo(modifyInfo);                wtssUser.setModifyType(modifyType);                wtssUser.setUserCategory(userCategory);                wtssUserList.add(wtssUser);            } while (rs.next());            return wtssUserList;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "SystemUserHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "        public Integer handle(final ResultSet rs) throws SQLException {            if (!rs.next()) {                return 0;            }            return rs.getInt(1);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "IntHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<WtssRole>", "snippet": "        public List<WtssRole> handle(final ResultSet rs) throws SQLException {            if (!rs.next()) {                return Collections.emptyList();            }            final List<WtssRole> wtssRoleList = new ArrayList<>();            do {                final int roleId = rs.getInt(1);                final String roleName = rs.getString(2);                final String permissions_ids = rs.getString(3);                final String description = rs.getString(4);                final long createdTime = rs.getLong(5);                final long updateTime = rs.getLong(6);                final WtssRole info = new WtssRole(roleId, roleName, permissions_ids, description, createdTime, updateTime);                wtssRoleList.add(info);            } while (rs.next());            return wtssRoleList;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "WtssRoleHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<WtssPermissions>", "snippet": "        public List<WtssPermissions> handle(final ResultSet rs) throws SQLException {            if (!rs.next()) {                return Collections.emptyList();            }            final List<WtssPermissions> wtssPermissionsList = new ArrayList<>();            do {                final int permissionsId = rs.getInt(1);                final String rolepermissionsName = rs.getString(2);                final int permissions_value = rs.getInt(3);                final int permissions_type = rs.getInt(4);                final String description = rs.getString(5);                final long createdTime = rs.getLong(6);                final long updateTime = rs.getLong(7);                final WtssPermissions info = new WtssPermissions(permissionsId, rolepermissionsName, permissions_value,                    permissions_type, description, createdTime, updateTime);                wtssPermissionsList.add(info);            } while (rs.next());            return wtssPermissionsList;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "WtssPermissionsHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<WebankDepartment>", "snippet": "        public List<WebankDepartment> handle(final ResultSet rs) throws SQLException {            if (!rs.next()) {                return Collections.emptyList();            }            final List<WebankDepartment> webankDepartmentList = new ArrayList<>();            do {                final long dpId = rs.getLong(1);                final long pid = rs.getLong(2);                final String dpName = rs.getString(3);                final String dpChName = rs.getString(4);                final long orgId = rs.getLong(5);                final String orgName = rs.getString(6);                final String division = rs.getString(7);                final int groupId = rs.getInt(8);                final int uploadFlag = rs.getInt(9);                final WebankDepartment info = new WebankDepartment(dpId, dpName, dpChName, orgId, orgName, division, pid, groupId, uploadFlag);                webankDepartmentList.add(info);            } while (rs.next());            return webankDepartmentList;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "WebankDepartmentHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<WebankDepartment>", "snippet": "        public List<WebankDepartment> handle(final ResultSet rs) throws SQLException {            if (!rs.next()) {                return Collections.emptyList();            }            final List<WebankDepartment> webankDepartmentList = new ArrayList<>();            do {                final long dpId = rs.getLong(1);                final long pid = rs.getLong(2);                final String dpName = rs.getString(3);                final String dpChName = rs.getString(4);                final long orgId = rs.getLong(5);                final String orgName = rs.getString(6);                final String division = rs.getString(7);                final String groupName = rs.getString(8);                final int uploadFlag = rs.getInt(9);                DepartmentGroup departmentGroup = new DepartmentGroup();                departmentGroup.setName(groupName);                final WebankDepartment info = new WebankDepartment(dpId, dpName, dpChName, orgId, orgName, division, pid,uploadFlag);                info.setDepartmentGroup(departmentGroup);                webankDepartmentList.add(info);            } while (rs.next());            return webankDepartmentList;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/JdbcSystemUserImpl.java", "stars": "18", "class": {"name": "FetchWebankDepartmentHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "getMaxConcurrentRunsOneFlow", "params": ["Props"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int getMaxConcurrentRunsOneFlow(final Props azkProps) {    // The default threshold is set to 30 for now, in case some users are affected. We may    // decrease this number in future, to better prevent DDos attacks.    return azkProps.getInt(ConfigurationKeys.MAX_CONCURRENT_RUNS_ONEFLOW,        DEFAULT_MAX_ONCURRENT_RUNS_ONEFLOW);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "setupExecutors", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setupExecutors() throws ExecutorManagerException {    // Todo: deprecate this method  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "disableQueueProcessorThread", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void disableQueueProcessorThread() {    // Todo: deprecate this method  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "enableQueueProcessorThread", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void enableQueueProcessorThread() {    // Todo: deprecate this method  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutorManagerThreadState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "State", "snippet": "  public State getExecutorManagerThreadState() {    // Todo: deprecate this method    return State.RUNNABLE;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "isExecutorManagerThreadActive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isExecutorManagerThreadActive() {    // Todo: deprecate this method    return true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getLastExecutorManagerThreadCheckTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getLastExecutorManagerThreadCheckTime() {    // Todo: deprecate this method    return 1L;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getAllActiveExecutors", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<Executor>", "snippet": "  public Collection<Executor> getAllActiveExecutors() {    List<Executor> executors = new ArrayList<>();    try {      executors = this.executorLoader.fetchActiveExecutors();    } catch (final ExecutorManagerException e) {      logger.error(\"Failed to get all active executors.\", e);    }    return executors;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "fetchExecutor", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "Executor", "snippet": "  public Executor fetchExecutor(final int executorId) throws ExecutorManagerException {    return this.executorLoader.fetchExecutor(executorId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getPrimaryServerHosts", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getPrimaryServerHosts() {    final HashSet<String> ports = new HashSet<>();    try {      for (final Executor executor : this.executorLoader.fetchActiveExecutors()) {        ports.add(executor.getHost() + \":\" + executor.getPort());      }    } catch (final ExecutorManagerException e) {      logger.error(\"Failed to get primary server hosts.\", e);    }    return ports;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getAllActiveExecutorServerHosts", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getAllActiveExecutorServerHosts() {    final Set<String> ports = getPrimaryServerHosts();    // include executor which were initially active and still has flows running    try {      for (final Pair<ExecutionReference, ExecutableFlow> running : this.executorLoader          .fetchActiveFlows().values()) {        final ExecutionReference ref = running.getFirst();        if (ref.getExecutor().isPresent()) {          final Executor executor = ref.getExecutor().get();          ports.add(executor.getHost() + \":\" + executor.getPort());        }      }    } catch (final ExecutorManagerException e) {      logger.error(\"Failed to get all active executor server hosts.\", e);    }    return ports;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getRunningFlows", "params": ["int", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "  public List<Integer> getRunningFlows(final int projectId, final String flowId) {    final List<Integer> executionIds = new ArrayList<>();    try {      executionIds.addAll(getRunningFlowsHelper(projectId, flowId,          this.executorLoader.fetchUnfinishedFlows().values()));    } catch (final ExecutorManagerException e) {      logger.error(\"Failed to get running flows for project \" + projectId + \", flow \"          + flowId, e);    }    return executionIds;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getRunningFlowsHelper", "params": ["int", "String", "Collection<Pair>"], "throws": null, "modifiers": ["private"], "return_type": "List<Integer>", "snippet": "  private List<Integer> getRunningFlowsHelper(final int projectId, final String flowId,      final Collection<Pair<ExecutionReference, ExecutableFlow>> collection) {    final List<Integer> executionIds = new ArrayList<>();    for (final Pair<ExecutionReference, ExecutableFlow> ref : collection) {      if (ref.getSecond().getFlowId().equals(flowId)          && ref.getSecond().getProjectId() == projectId) {        executionIds.add(ref.getFirst().getExecId());      }    }    return executionIds;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getActiveFlowsWithExecutor", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "List<Pair>", "snippet": "  public List<Pair<ExecutableFlow, Optional<Executor>>> getActiveFlowsWithExecutor()      throws IOException {    final List<Pair<ExecutableFlow, Optional<Executor>>> flows = new ArrayList<>();    try {      getActiveFlowsWithExecutorHelper(flows, this.executorLoader.fetchUnfinishedFlows().values());    } catch (final ExecutorManagerException e) {      logger.error(\"Failed to get active flows with executor.\", e);    }    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getActiveFlowsWithExecutorHelper", "params": ["List<Pair>", "Collection<Pair>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void getActiveFlowsWithExecutorHelper(      final List<Pair<ExecutableFlow, Optional<Executor>>> flows,      final Collection<Pair<ExecutionReference, ExecutableFlow>> collection) {    for (final Pair<ExecutionReference, ExecutableFlow> ref : collection) {      flows.add(new Pair<>(ref.getSecond(), ref          .getFirst().getExecutor()));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "isFlowRunning", "params": ["int", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isFlowRunning(final int projectId, final String flowId) {    boolean isRunning = false;    try {      isRunning = isFlowRunningHelper(projectId, flowId,          this.executorLoader.fetchUnfinishedFlows().values());    } catch (final ExecutorManagerException e) {      logger.error(          \"Failed to check if the flow is running for project \" + projectId + \", flow \" + flowId,          e);    }    return isRunning;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "isFlowRunningHelper", "params": ["int", "String", "Collection<Pair>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isFlowRunningHelper(final int projectId, final String flowId,      final Collection<Pair<ExecutionReference, ExecutableFlow>> collection) {    for (final Pair<ExecutionReference, ExecutableFlow> ref : collection) {      if (ref.getSecond().getProjectId() == projectId          && ref.getSecond().getFlowId().equals(flowId)) {        return true;      }    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlow", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutableFlow", "snippet": "  public ExecutableFlow getExecutableFlow(final int execId)      throws ExecutorManagerException {    return this.executorLoader.fetchExecutableFlow(execId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getRunningFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getRunningFlows() {    final ArrayList<ExecutableFlow> flows = new ArrayList<>();    try {      getFlowsHelper(flows, this.executorLoader.fetchUnfinishedFlows().values());    } catch (final ExecutorManagerException e) {      logger.error(\"Failed to get running flows.\", e);    }    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getFlowsHelper", "params": ["ArrayList<ExecutableFlow>", "Collection<Pair>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void getFlowsHelper(final ArrayList<ExecutableFlow> flows,      final Collection<Pair<ExecutionReference, ExecutableFlow>> collection) {    collection.stream().forEach(ref -> flows.add(ref.getSecond()));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getRunningFlowIds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "  public List<Integer> getRunningFlowIds() {    final List<Integer> allIds = new ArrayList<>();    try {      getExecutionIdsHelper(allIds, this.executorLoader.fetchUnfinishedFlows().values());    } catch (final ExecutorManagerException e) {      this.logger.error(\"Failed to get running flow ids.\", e);    }    return allIds;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getQueuedFlowIds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "  public List<Integer> getQueuedFlowIds() {    final List<Integer> allIds = new ArrayList<>();    try {      getExecutionIdsHelper(allIds, this.executorLoader.fetchQueuedFlows());    } catch (final ExecutorManagerException e) {      this.logger.error(\"Failed to get queued flow ids.\", e);    }    return allIds;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutionIdsHelper", "params": ["List<Integer>", "Collection<Pair>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void getExecutionIdsHelper(final List<Integer> allIds,      final Collection<Pair<ExecutionReference, ExecutableFlow>> collection) {    collection.stream().forEach(ref -> allIds.add(ref.getSecond().getExecutionId()));    Collections.sort(allIds);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getQueuedFlowSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getQueuedFlowSize() {    long size = 0L;    try {      size = this.executorLoader.fetchQueuedFlows().size();    } catch (final ExecutorManagerException e) {      this.logger.error(\"Failed to get queued flow size.\", e);    }    return size;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getRecentlyFinishedFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getRecentlyFinishedFlows() {    List<ExecutableFlow> flows = new ArrayList<>();    try {      flows = this.executorLoader.fetchRecentlyFinishedFlows(          RECENTLY_FINISHED_LIFETIME);    } catch (final ExecutorManagerException e) {      logger.error(\"Failed to fetch recently finished flows.\", e);    }    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlows", "params": ["int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getExecutableFlows(final int skip, final int size)      throws ExecutorManagerException {    final List<ExecutableFlow> flows = this.executorLoader.fetchFlowHistory(skip, size);    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getMaintainedExecutableFlows", "params": ["String", "List<Integer>", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getMaintainedExecutableFlows(String username, List<Integer> projectIds, int skip, int size)          throws ExecutorManagerException {    return this.executorLoader.fetchMaintainedFlowHistory(username, projectIds, skip, size);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlowsQuickSearch", "params": ["String", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getExecutableFlowsQuickSearch(final String flowIdContains,                                                            final int skip, final int size) throws ExecutorManagerException {    final List<ExecutableFlow> flows = this.executorLoader.fetchFlowHistoryQuickSearch(                    '%' + flowIdContains + '%', null, skip, size);    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getMaintainedFlowsQuickSearch", "params": ["String", "int", "int", "String", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getMaintainedFlowsQuickSearch(String flowIdContains,                                                            int skip, int size, String username, List<Integer> projectIds) throws ExecutorManagerException {    return Collections.emptyList();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlows", "params": ["String", "String", "String", "String", "String", "long", "long", "int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getExecutableFlows(final String projContain, final String flowContain,                                                 final String execIdContain, final String userContain,                                                 final String status, final long begin, final long end,                                                 final int skip, final int size, int flowType) throws ExecutorManagerException {    final List<ExecutableFlow> flows =            this.executorLoader.fetchFlowHistory(projContain, flowContain, execIdContain, userContain,                    status, begin, end, skip, size, flowType);    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getMaintainedExecutableFlows", "params": ["String", "String", "String", "String", "String", "long", "long", "int", "int", "int", "String", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getMaintainedExecutableFlows(String projContain, String flowContain,                                                    String execIdContain, String userContain, String status, long begin, long end,                                                    int skip, int size, int flowType, String username, List<Integer> projectIds) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableJobs", "params": ["Project", "String", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableJobInfo>", "snippet": "  public List<ExecutableJobInfo> getExecutableJobs(final Project project,      final String jobId, final int skip, final int size) throws ExecutorManagerException {    final List<ExecutableJobInfo> nodes =        this.executorLoader.fetchJobHistory(project.getId(), jobId, skip, size);    return nodes;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getNumberOfJobExecutions", "params": ["Project", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getNumberOfJobExecutions(final Project project, final String jobId)      throws ExecutorManagerException {    return this.executorLoader.fetchNumExecutableNodes(project.getId(), jobId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlowLog", "params": ["ExecutableFlow", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "LogData", "snippet": "  public LogData getExecutableFlowLog(final ExecutableFlow exFlow, final int offset,      final int length) throws ExecutorManagerException {    final Pair<ExecutionReference, ExecutableFlow> pair = this.executorLoader        .fetchActiveFlowByExecId(exFlow.getExecutionId());    if (pair != null) {      final Pair<String, String> typeParam = new Pair<>(\"type\", \"flow\");      final Pair<String, String> offsetParam =          new Pair<>(\"offset\", String.valueOf(offset));      final Pair<String, String> lengthParam =          new Pair<>(\"length\", String.valueOf(length));      @SuppressWarnings(\"unchecked\") final Map<String, Object> result =          this.apiGateway.callWithReference(pair.getFirst(), ConnectorParams.LOG_ACTION,              typeParam, offsetParam, lengthParam);      return LogData.createLogDataFromObject(result);    } else {      final LogData value =          this.executorLoader.fetchLogs(exFlow.getExecutionId(), \"\", 0, offset,              length);      return value;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getLatestLogOffset", "params": ["ExecutableFlow", "String", "Long", "int", "User"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "Long", "snippet": "  public Long getLatestLogOffset(ExecutableFlow exFlow, String jobId, Long length, int attempt, User user) throws ExecutorManagerException {    return 0L;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutionJobLog", "params": ["ExecutableFlow", "String", "int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "LogData", "snippet": "  public LogData getExecutionJobLog(final ExecutableFlow exFlow, final String jobId,      final int offset, final int length, final int attempt) throws ExecutorManagerException {    final Pair<ExecutionReference, ExecutableFlow> pair = this.executorLoader        .fetchActiveFlowByExecId(exFlow.getExecutionId());    if (pair != null) {      final Pair<String, String> typeParam = new Pair<>(\"type\", \"job\");      final Pair<String, String> jobIdParam =          new Pair<>(\"jobId\", jobId);      final Pair<String, String> offsetParam =          new Pair<>(\"offset\", String.valueOf(offset));      final Pair<String, String> lengthParam =          new Pair<>(\"length\", String.valueOf(length));      final Pair<String, String> attemptParam =          new Pair<>(\"attempt\", String.valueOf(attempt));      @SuppressWarnings(\"unchecked\") final Map<String, Object> result =          this.apiGateway.callWithReference(pair.getFirst(), ConnectorParams.LOG_ACTION,              typeParam, jobIdParam, offsetParam, lengthParam, attemptParam);      return LogData.createLogDataFromObject(result);    } else {      final LogData value =          this.executorLoader.fetchLogs(exFlow.getExecutionId(), jobId, attempt,              offset, length);      return value;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutionJobStats", "params": ["ExecutableFlow", "String", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<Object>", "snippet": "  public List<Object> getExecutionJobStats(final ExecutableFlow exFlow, final String jobId,      final int attempt) throws ExecutorManagerException {    final Pair<ExecutionReference, ExecutableFlow> pair =        this.executorLoader.fetchActiveFlowByExecId(exFlow.getExecutionId());    if (pair == null) {      return this.executorLoader.fetchAttachments(exFlow.getExecutionId(), jobId,          attempt);    }    final Pair<String, String> jobIdParam = new Pair<>(\"jobId\", jobId);    final Pair<String, String> attemptParam =        new Pair<>(\"attempt\", String.valueOf(attempt));    @SuppressWarnings(\"unchecked\") final Map<String, Object> result =        this.apiGateway.callWithReference(pair.getFirst(), ConnectorParams.ATTACHMENTS_ACTION,            jobIdParam, attemptParam);    @SuppressWarnings(\"unchecked\") final List<Object> jobStats = (List<Object>) result        .get(\"attachments\");    return jobStats;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getJobLinkUrl", "params": ["ExecutableFlow", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getJobLinkUrl(final ExecutableFlow exFlow, final String jobId, final int attempt) {    // Todo: deprecate this method    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "cancelFlow", "params": ["ExecutableFlow", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancelFlow(final ExecutableFlow exFlow, final String userId)      throws ExecutorManagerException {    synchronized (exFlow) {      final Map<Integer, Pair<ExecutionReference, ExecutableFlow>> unfinishedFlows = this.executorLoader          .fetchUnfinishedFlows();      if (unfinishedFlows.containsKey(exFlow.getExecutionId())) {        final Pair<ExecutionReference, ExecutableFlow> pair = unfinishedFlows            .get(exFlow.getExecutionId());        if (pair.getFirst().getExecutor().isPresent()) {          // Flow is already dispatched to an executor, so call that executor to cancel the flow.          this.apiGateway              .callWithReferenceByUser(pair.getFirst(), ConnectorParams.CANCEL_ACTION, userId);        } else {          // Flow is still queued, need to finalize it and update the status in DB.          ExecutionControllerUtils.finalizeFlow(this.executorLoader, this.alerterHolder, exFlow,              \"Cancelled before dispatching to executor\", null);        }      } else {        throw new ExecutorManagerException(\"Execution \"            + exFlow.getExecutionId() + \" of flow \" + exFlow.getFlowId()            + \" isn't running.\");      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "resumeFlow", "params": ["ExecutableFlow", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void resumeFlow(final ExecutableFlow exFlow, final String userId)      throws ExecutorManagerException {    synchronized (exFlow) {      final Pair<ExecutionReference, ExecutableFlow> pair =          this.executorLoader.fetchActiveFlowByExecId(exFlow.getExecutionId());      if (pair == null) {        throw new ExecutorManagerException(\"Execution \"            + exFlow.getExecutionId() + \" of flow \" + exFlow.getFlowId()            + \" isn't running.\");      }      this.apiGateway          .callWithReferenceByUser(pair.getFirst(), ConnectorParams.RESUME_ACTION, userId);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "setJobDisabled", "params": ["ExecutableFlow", "String", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String setJobDisabled(ExecutableFlow exFlow, String userId, String request) throws Exception {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "setFlowFailed", "params": ["ExecutableFlow", "String", "List<Pair>"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFlowFailed(ExecutableFlow exFlow, String userId, List<Pair<String, String>> param) throws Exception {    synchronized (exFlow) {      final Pair<ExecutionReference, ExecutableFlow> pair =              this.executorLoader.fetchActiveFlowByExecId(exFlow.getExecutionId());      if (pair == null) {        throw new Exception(\"Execution \"                + exFlow.getExecutionId() + \" of flow \" + exFlow.getFlowId()                + \" isn't running.\");      }      this.apiGateway.callForJsonObjectMap(pair.getFirst().getExecutor().get().getHost(),              pair.getFirst().getExecutor().get().getPort(), \"/executor\", param);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "retryFailedJobs", "params": ["ExecutableFlow", "String", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String retryFailedJobs(ExecutableFlow exFlow, String userId, String request) throws Exception {    synchronized (exFlow) {      final Pair<ExecutionReference, ExecutableFlow> pair =              this.executorLoader.fetchActiveFlowByExecId(exFlow.getExecutionId());      if (pair == null) {        throw new Exception(\"Execution \"                + exFlow.getExecutionId() + \" of flow \" + exFlow.getFlowId()                + \" isn't running.\");      }      String url = \"http://\" + pair.getFirst().getExecutor().get().getHost() + \":\" + pair.getFirst().getExecutor().get().getPort() + \"/executor?\"              + \"action=RETRY_FAILED_JOBS&execid=\" + exFlow.getExecutionId() + \"&user=\" + userId;      return this.apiGateway.httpPost(url, request);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "skipFailedJobs", "params": ["ExecutableFlow", "String", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String skipFailedJobs(ExecutableFlow exFlow, String userId, String request) throws Exception {    synchronized (exFlow) {      final Pair<ExecutionReference, ExecutableFlow> pair =              this.executorLoader.fetchActiveFlowByExecId(exFlow.getExecutionId());      if (pair == null) {        throw new Exception(\"Execution \"                + exFlow.getExecutionId() + \" of flow \" + exFlow.getFlowId()                + \" isn't running.\");      }      String url = \"http://\" + pair.getFirst().getExecutor().get().getHost() + \":\" + pair.getFirst().getExecutor().get().getPort() + \"/executor?\"              + \"action=SKIP_FAILED_JOBS&execid=\" + exFlow.getExecutionId() + \"&user=\" + userId;      return this.apiGateway.httpPost(url, request);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "pauseFlow", "params": ["ExecutableFlow", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void pauseFlow(final ExecutableFlow exFlow, final String userId)      throws ExecutorManagerException {    synchronized (exFlow) {      final Pair<ExecutionReference, ExecutableFlow> pair =          this.executorLoader.fetchActiveFlowByExecId(exFlow.getExecutionId());      if (pair == null) {        throw new ExecutorManagerException(\"Execution \"            + exFlow.getExecutionId() + \" of flow \" + exFlow.getFlowId()            + \" isn't running.\");      }      this.apiGateway          .callWithReferenceByUser(pair.getFirst(), ConnectorParams.PAUSE_ACTION, userId);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "retryFailures", "params": ["ExecutableFlow", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void retryFailures(final ExecutableFlow exFlow, final String userId)      throws ExecutorManagerException {    modifyExecutingJobs(exFlow, ConnectorParams.MODIFY_RETRY_FAILURES, userId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "skipAllFailures", "params": ["ExecutableFlow", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void skipAllFailures(ExecutableFlow exFlow, String userId) throws ExecutorManagerException {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "modifyExecutingJobs", "params": ["ExecutableFlow", "String", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["private"], "return_type": "Map<String,Object>", "snippet": "  private Map<String, Object> modifyExecutingJobs(final ExecutableFlow exFlow,      final String command, final String userId, final String... jobIds)      throws ExecutorManagerException {    synchronized (exFlow) {      final Pair<ExecutionReference, ExecutableFlow> pair =          this.executorLoader.fetchActiveFlowByExecId(exFlow.getExecutionId());      if (pair == null) {        throw new ExecutorManagerException(\"Execution \"            + exFlow.getExecutionId() + \" of flow \" + exFlow.getFlowId()            + \" isn't running.\");      }      final Map<String, Object> response;      if (jobIds != null && jobIds.length > 0) {        for (final String jobId : jobIds) {          if (!jobId.isEmpty()) {            final ExecutableNode node = exFlow.getExecutableNode(jobId);            if (node == null) {              throw new ExecutorManagerException(\"Job \" + jobId                  + \" doesn't exist in execution \" + exFlow.getExecutionId()                  + \".\");            }          }        }        final String ids = StringUtils.join(jobIds, ',');        response =            this.apiGateway.callWithReferenceByUser(pair.getFirst(),                ConnectorParams.MODIFY_EXECUTION_ACTION, userId,                new Pair<>(                    ConnectorParams.MODIFY_EXECUTION_ACTION_TYPE, command),                new Pair<>(ConnectorParams.MODIFY_JOBS_LIST, ids));      } else {        response =            this.apiGateway.callWithReferenceByUser(pair.getFirst(),                ConnectorParams.MODIFY_EXECUTION_ACTION, userId,                new Pair<>(                    ConnectorParams.MODIFY_EXECUTION_ACTION_TYPE, command));      }      return response;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "submitExecutableFlow", "params": ["ExecutableFlow", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String submitExecutableFlow(final ExecutableFlow exflow, final String userId)      throws ExecutorManagerException {    final String exFlowKey = exflow.getProjectName() + \".\" + exflow.getId() + \".submitFlow\";    // Use project and flow name to prevent race condition when same flow is submitted by API and    // schedule at the same time    // causing two same flow submission entering this piece.    synchronized (exFlowKey.intern()) {      final String flowId = exflow.getFlowId();      logger.info(\"Submitting execution flow \" + flowId + \" by \" + userId);      String message = \"\";      final int projectId = exflow.getProjectId();      exflow.setSubmitUser(userId);      exflow.setSubmitTime(System.currentTimeMillis());      final List<Integer> running = getRunningFlows(projectId, flowId);      ExecutionOptions options = exflow.getExecutionOptions();      if (options == null) {        options = new ExecutionOptions();      }      if (options.getDisabledJobs() != null) {        FlowUtils.applyDisabledJobs(options.getDisabledJobs(), exflow);      }      if (!running.isEmpty()) {        if (running.size() > this.maxConcurrentRunsOneFlow) {          this.commonMetrics.markSubmitFlowSkip();          throw new ExecutorManagerException(\"Flow \" + flowId              + \" has more than \" + this.maxConcurrentRunsOneFlow + \" concurrent runs. Skipping\",              ExecutorManagerException.Reason.SkippedExecution);        } else if (options.getConcurrentOption().equals(            ExecutionOptions.CONCURRENT_OPTION_PIPELINE)) {          Collections.sort(running);          final Integer runningExecId = running.get(running.size() - 1);          options.setPipelineExecutionId(runningExecId);          message =              \"Flow \" + flowId + \" is already running with exec id \"                  + runningExecId + \". Pipelining level \"                  + options.getPipelineLevel() + \". \\n\";        } else if (options.getConcurrentOption().equals(            ExecutionOptions.CONCURRENT_OPTION_SKIP)) {          this.commonMetrics.markSubmitFlowSkip();          throw new ExecutorManagerException(\"Flow \" + flowId              + \" is already running. Skipping execution.\",              ExecutorManagerException.Reason.SkippedExecution);        } else {          message =              \"Flow \" + flowId + \" is already running with exec id \"                  + StringUtils.join(running, \",\")                  + \". Will execute concurrently. \\n\";        }      }      final boolean memoryCheck =          !ProjectWhitelist.isProjectWhitelisted(exflow.getProjectId(),              ProjectWhitelist.WhitelistType.MemoryCheck);      options.setMemoryCheck(memoryCheck);      // The exflow id is set by the loader. So it's unavailable until after      // this call.      this.executorLoader.uploadExecutableFlow(exflow);      this.commonMetrics.markSubmitFlowSuccess();      message += \"Execution queued successfully with exec id \" + exflow.getExecutionId();      return message;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "callExecutorStats", "params": ["int", "String", "Pair<String,String>"], "throws": ["IOException", "ExecutorManagerException"], "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> callExecutorStats(final int executorId, final String action,      final Pair<String, String>... params) throws IOException, ExecutorManagerException {    final Executor executor = fetchExecutor(executorId);    final List<Pair<String, String>> paramList = new ArrayList<>();    if (params != null) {      paramList.addAll(Arrays.asList(params));    }    paramList.add(new Pair<>(ConnectorParams.ACTION_PARAM, action));    return this.apiGateway.callForJsonObjectMap(executor.getHost(), executor.getPort(),        \"/stats\", paramList);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "callExecutorJMX", "params": ["String", "String", "String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> callExecutorJMX(final String hostPort, final String action,      final String mBean) throws IOException {    final List<Pair<String, String>> paramList =        new ArrayList<>();    paramList.add(new Pair<>(action, \"\"));    if (mBean != null) {      paramList.add(new Pair<>(ConnectorParams.JMX_MBEAN, mBean));    }    final String[] hostPortSplit = hostPort.split(\":\");    return this.apiGateway.callForJsonObjectMap(hostPortSplit[0],        Integer.valueOf(hostPortSplit[1]), \"/jmx\", paramList);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void start() {    this.executorHealthChecker.start();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shutdown() {    this.executorHealthChecker.shutdown();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlows", "params": ["int", "String", "int", "int", "List<ExecutableFlow>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecutableFlows(final int projectId, final String flowId, final int from,      final int length, final List<ExecutableFlow> outputList)      throws ExecutorManagerException {    final List<ExecutableFlow> flows =        this.executorLoader.fetchFlowHistory(projectId, flowId, from, length);    outputList.addAll(flows);    return this.executorLoader.fetchNumExecutableFlows(projectId, flowId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlows", "params": ["int", "String", "int", "int", "Status"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getExecutableFlows(final int projectId, final String flowId,      final int from, final int length, final Status status) throws ExecutorManagerException {    return this.executorLoader.fetchFlowHistory(projectId, flowId, from, length,        status);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlows", "params": ["Project", "String", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getExecutableFlows(Project project, String flowId, int skip, int size) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableJobsMoyenneRunTime", "params": ["Project", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "long", "snippet": "  public long getExecutableJobsMoyenneRunTime(Project project, String jobId) throws ExecutorManagerException {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getNumberOfExecutions", "params": ["Project", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getNumberOfExecutions(Project project, String flowId) throws ExecutorManagerException {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutionJobMetaData", "params": ["ExecutableFlow", "String", "int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "FileIOUtils", "snippet": "  public FileIOUtils.JobMetaData getExecutionJobMetaData(ExecutableFlow exFlow, String jobId, int offset, int length, int attempt) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "pauseExecutingJobs", "params": ["ExecutableFlow", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void pauseExecutingJobs(ExecutableFlow exFlow, String userId, String... jobIds) throws ExecutorManagerException {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "resumeExecutingJobs", "params": ["ExecutableFlow", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void resumeExecutingJobs(ExecutableFlow exFlow, String userId, String... jobIds) throws ExecutorManagerException {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "retryExecutingJobs", "params": ["ExecutableFlow", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void retryExecutingJobs(ExecutableFlow exFlow, String userId, String... jobIds) throws ExecutorManagerException {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "disableExecutingJobs", "params": ["ExecutableFlow", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void disableExecutingJobs(ExecutableFlow exFlow, String userId, String... jobIds) throws ExecutorManagerException {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "enableExecutingJobs", "params": ["ExecutableFlow", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void enableExecutingJobs(ExecutableFlow exFlow, String userId, String... jobIds) throws ExecutorManagerException {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "cancelExecutingJobs", "params": ["ExecutableFlow", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancelExecutingJobs(ExecutableFlow exFlow, String userId, String... jobIds) throws ExecutorManagerException {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getAllExecutionJobLog", "params": ["ExecutableFlow", "String", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getAllExecutionJobLog(ExecutableFlow exFlow, String jobId, int attempt) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getUserExecutableFlows", "params": ["int", "int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getUserExecutableFlows(int skip, int size, String user) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getUserExecutableFlowsByAdvanceFilter", "params": ["String", "String", "String", "String", "String", "long", "long", "int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getUserExecutableFlowsByAdvanceFilter(String projContain, String flowContain, String execIdContain, String userContain, String status, long begin, long end, int skip, int size, int flowType) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getUserExecutableFlowsQuickSearch", "params": ["String", "String", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getUserExecutableFlowsQuickSearch(String flowIdContains, String user, int skip, int size) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getProjectLastExecutableFlow", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutableFlow", "snippet": "  public ExecutableFlow getProjectLastExecutableFlow(int projectId, String flowId) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getDownLoadAllExecutionLog", "params": ["ExecutableFlow"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getDownLoadAllExecutionLog(ExecutableFlow executableFlow) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getJobLogByJobId", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getJobLogByJobId(int execId, String jobName) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "listAllLogFilter", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<LogFilterEntity>", "snippet": "  public List<LogFilterEntity> listAllLogFilter() throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecHistoryTotal", "params": ["Map<String,String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecHistoryTotal(Map<String, String> filterMap) throws ExecutorManagerException {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecHistoryTotal", "params": ["String", "Map<String,String>", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecHistoryTotal(String username, final Map<String, String> filterMap, List<Integer> projectIds)          throws ExecutorManagerException {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getMaintainedExecHistoryTotal", "params": ["String", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getMaintainedExecHistoryTotal(String username, List<Integer> projectIds)          throws ExecutorManagerException {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecHistoryQuickSerachTotal", "params": ["Map<String,String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecHistoryQuickSerachTotal(Map<String, String> filterMap) throws ExecutorManagerException {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getMaintainedFlowsQuickSearchTotal", "params": ["String", "Map<String,String>", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getMaintainedFlowsQuickSearchTotal(String username, final Map<String, String> filterMap, List<Integer> projectIds)          throws ExecutorManagerException {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getUserExecutableFlowsTotalByProjectIdAndFlowId", "params": ["int", "String", "int", "int", "List<ExecutableFlow>", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getUserExecutableFlowsTotalByProjectIdAndFlowId(int projectId, String flowId, int from, int length, List<ExecutableFlow> outputList, String userName) throws ExecutorManagerException {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlowsMoyenneRunTime", "params": ["int", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "long", "snippet": "  public long getExecutableFlowsMoyenneRunTime(int projectId, String flowId, String user) throws ExecutorManagerException {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getUserExecHistoryTotal", "params": ["Map<String,String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getUserExecHistoryTotal(Map<String, String> filterMap) throws ExecutorManagerException {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getUserExecHistoryQuickSerachTotal", "params": ["Map<String,String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getUserExecHistoryQuickSerachTotal(Map<String, String> filterMap) throws ExecutorManagerException {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getUserExecutableFlows", "params": ["String", "String", "String", "String", "String", "String", "long", "long", "int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getUserExecutableFlows(String loginUser, String projContain, String flowContain, String execIdContain, String userContain, String status, long begin, long end, int skip, int size, int flowType) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getTodayExecutableFlowData", "params": ["String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getTodayExecutableFlowData(String userName) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getTodayExecutableFlowDataNew", "params": ["String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getTodayExecutableFlowDataNew(String userName) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getTodayFlowRunTimesByFlowId", "params": ["String", "String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getTodayFlowRunTimesByFlowId(String projectId, String flowId, String usename) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getRealTimeExecFlowData", "params": ["String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "  public List<ExecutableFlow> getRealTimeExecFlowData(String userName) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getRecentExecutableFlow", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutableFlow", "snippet": "  public ExecutableFlow getRecentExecutableFlow(int projectId, String flowId) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExectingFlowsData", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "List<Map>", "snippet": "  public List<Map<String, String>> getExectingFlowsData() throws IOException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutionCycleTotal", "params": ["Optional<String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecutionCycleTotal(Optional<String> usernameOp) throws ExecutorManagerException {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutionCycleTotal", "params": ["String", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecutionCycleTotal(String username, List<Integer> projectIds) throws ExecutorManagerException {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "listExecutionCycleFlows", "params": ["Optional<String>", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutionCycle>", "snippet": "  public List<ExecutionCycle> listExecutionCycleFlows(Optional<String> usernameOP, int offset, int length)          throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "listExecutionCycleFlows", "params": ["String", "List<Integer>", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutionCycle>", "snippet": "  public List<ExecutionCycle> listExecutionCycleFlows(String username, List<Integer> projectIds, int offset, int length)          throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "saveExecutionCycleFlow", "params": ["ExecutionCycle"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int saveExecutionCycleFlow(ExecutionCycle cycleFlow) throws ExecutorManagerException {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutionCycleFlow", "params": ["String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutionCycle", "snippet": "  public ExecutionCycle getExecutionCycleFlow(String projectId, String flowId) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getExecutionCycleFlow", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutionCycle", "snippet": "  public ExecutionCycle getExecutionCycleFlow(int id) throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "updateExecutionFlow", "params": ["ExecutionCycle"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int updateExecutionFlow(ExecutionCycle executionCycle) throws ExecutorManagerException {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getAzkabanProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getAzkabanProps() {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "stopAllCycleFlows", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int stopAllCycleFlows() throws ExecutorManagerException {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "getAllRunningCycleFlows", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutionCycle>", "snippet": "  public List<ExecutionCycle> getAllRunningCycleFlows() throws ExecutorManagerException {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionController.java", "stars": "18", "class": {"name": "ExecutionController", "extends": "EventHandler", "implements": ["ExecutorManagerAdapter"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Computer{\" +                \"CPU='\" + CPU + '\\'' +                \", motherboard='\" + motherboard + '\\'' +                \", RAM='\" + RAM + '\\'' +                \", GPU='\" + GPU + '\\'' +                \", monitor='\" + monitor + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/builder/v2/Computer.java", "stars": "2", "class": {"name": "Computer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildCPU", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ComputerBuilder", "snippet": "        public ComputerBuilder buildCPU(String CPU) {            this.CPU = CPU;            return this;        }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/builder/v2/Computer.java", "stars": "2", "class": {"name": "ComputerBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "buildMotherboard", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ComputerBuilder", "snippet": "        public ComputerBuilder buildMotherboard(String motherboard) {            this.motherboard = motherboard;            return this;        }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/builder/v2/Computer.java", "stars": "2", "class": {"name": "ComputerBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "buildRAM", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ComputerBuilder", "snippet": "        public ComputerBuilder buildRAM(String RAM) {            this.RAM = RAM;            return this;        }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/builder/v2/Computer.java", "stars": "2", "class": {"name": "ComputerBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "buildGPU", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ComputerBuilder", "snippet": "        public ComputerBuilder buildGPU(String GPU) {            this.GPU = GPU;            return this;        }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/builder/v2/Computer.java", "stars": "2", "class": {"name": "ComputerBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "buildMonitor", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ComputerBuilder", "snippet": "        public ComputerBuilder buildMonitor(String monitor) {            this.monitor = monitor;            return this;        }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/builder/v2/Computer.java", "stars": "2", "class": {"name": "ComputerBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Computer", "snippet": "        public Computer build(){            return new Computer(this);        }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/builder/v2/Computer.java", "stars": "2", "class": {"name": "ComputerBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "guardarAutomovilDB", "params": ["Automovil"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void guardarAutomovilDB(Automovil automovil) {        System.out.println(\"Guardando en BD\");    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/S/AutomovilDB.java", "stars": "1", "class": {"name": "AutomovilDB", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eliminarAutomovilDB", "params": ["Automovil"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void eliminarAutomovilDB(Automovil automovil) {        System.out.println(\"Eliminando automovil de la BD\");    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/S/AutomovilDB.java", "stars": "1", "class": {"name": "AutomovilDB", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOperandString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOperandString() {        switch (mode) {        case MODE_IMMEDIATE:            return String.format(\"0x%04X\", operand);        default:            return super.getOperandString();        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/LDX.java", "stars": "4", "class": {"name": "LDX", "extends": "NonBranchInstruction", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLength", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLength() {        switch (mode) {        case MODE_IMMEDIATE:            return 3;        default:            return super.getLength();        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/LDX.java", "stars": "4", "class": {"name": "LDX", "extends": "NonBranchInstruction", "implements": null, "modifiers": ["public"]}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        return \"#extension GL_OES_EGL_image_external : require\\n\" +                \"precision mediump float;\\n\" +                \"varying vec2 vTextureCoord;\\n\" +                \"uniform samplerExternalOES sTexture;\\n\" +                \"const float resolution=1024.0;\\n\" +                \"const float radius = \" + radius + \";\\n\" +                \"vec2 dir =\" + blurTypeString + \"; //\u82e5\u4e3ax\u6a21\u7cca\uff0c\u53ef\u4f20\u5165\uff081.0,0.0\uff09  y\u6a21\u7cca  \uff080.0,1.0\uff09\\n\" +                \"\\n\" +                \"void main() {\\n\" +                \"    //this will be our RGBA sum\\n\" +                \"    vec4 sum = vec4(0.0);\\n\" +                \"    \\n\" +                \"    //our original texcoord for this fragment\\n\" +                \"    vec2 tc = vTextureCoord;\\n\" +                \"    \\n\" +                \"    //the amount to blur, i.e. how far off center to sample from \\n\" +                \"    //1.0 -> blur by one pixel\\n\" +                \"    //2.0 -> blur by two pixels, etc.\\n\" +                \"    float blur = radius/resolution; \\n\" +                \"    \\n\" +                \"    //the direction of our blur\\n\" +                \"    //(1.0, 0.0) -> x-axis blur\\n\" +                \"    //(0.0, 1.0) -> y-axis blur\\n\" +                \"    float hstep = dir.x;\\n\" +                \"    float vstep = dir.y;\\n\" +                \"    \\n\" +                \"    \\n\" +                \"    //apply blurring, using a 9-tap filter with predefined gaussian weights\\n\" +                \"    \\n\" +                \"    sum += texture2D(sTexture, vec2(tc.x - 4.0*blur*hstep, tc.y - 4.0*blur*vstep)) * 0.0162162162;\\n\" +                \"    sum += texture2D(sTexture, vec2(tc.x - 3.0*blur*hstep, tc.y - 3.0*blur*vstep)) * 0.0540540541;\\n\" +                \"    sum += texture2D(sTexture, vec2(tc.x - 2.0*blur*hstep, tc.y - 2.0*blur*vstep)) * 0.1216216216;\\n\" +                \"    sum += texture2D(sTexture, vec2(tc.x - 1.0*blur*hstep, tc.y - 1.0*blur*vstep)) * 0.1945945946;\\n\" +                \"    \\n\" +                \"    sum += texture2D(sTexture, vec2(tc.x, tc.y)) * 0.2270270270;\\n\" +                \"    \\n\" +                \"    sum += texture2D(sTexture, vec2(tc.x + 1.0*blur*hstep, tc.y + 1.0*blur*vstep)) * 0.1945945946;\\n\" +                \"    sum += texture2D(sTexture, vec2(tc.x + 2.0*blur*hstep, tc.y + 2.0*blur*vstep)) * 0.1216216216;\\n\" +                \"    sum += texture2D(sTexture, vec2(tc.x + 3.0*blur*hstep, tc.y + 3.0*blur*vstep)) * 0.0540540541;\\n\" +                \"    sum += texture2D(sTexture, vec2(tc.x + 4.0*blur*hstep, tc.y + 4.0*blur*vstep)) * 0.0162162162;\\n\" +                \"\\n\" +                \"    vec4 cc= texture2D(sTexture,vTextureCoord );\\n\" +                \"\\n\" +                \"    //discard alpha for our simple demo, multiply by vertex color and return\\n\" +                \"    gl_FragColor =vec4(sum.rgb, cc.a);\\n\" +                \"}\";    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/GaussianBlurEffect.java", "stars": "2", "class": {"name": "GaussianBlurEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "shouldFilter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean shouldFilter() {        //\u5171\u4eabRequestContext\uff0c\u4e0a\u4e0b\u6587\u5bf9\u8c61        RequestContext requestContext = RequestContext.getCurrentContext();        HttpServletRequest request = requestContext.getRequest();        System.out.println(request.getRequestURI());        //\u4e0d\u9700\u8981\u6743\u9650\u6821\u9a8cURL//        if (\"/auth/oauth/token\".equalsIgnoreCase(request.getRequestURI())) {//            return false;//        } else if (\"/apigateway/order/api/v1/order/list\".equalsIgnoreCase(request.getRequestURI())) {//            return false;//        } else if (\"/apigateway/order/api/v1/order/find\".equalsIgnoreCase(request.getRequestURI())) {//            return false;//        }                return true;\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/filter/AccessFilter.java", "stars": "2", "class": {"name": "AccessFilter", "extends": "ZuulFilter", "implements": null, "modifiers": ["public"]}}, {"method_name": "filterType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String filterType() {\t\treturn \"pre\";\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/filter/AccessFilter.java", "stars": "2", "class": {"name": "AccessFilter", "extends": "ZuulFilter", "implements": null, "modifiers": ["public"]}}, {"method_name": "filterOrder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int filterOrder() {\t\treturn 0;\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/filter/AccessFilter.java", "stars": "2", "class": {"name": "AccessFilter", "extends": "ZuulFilter", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object run() {\t\tRequestContext requestContext = RequestContext.getCurrentContext();\t\tHttpServletRequest request = requestContext.getRequest();\t\t\t\tlogger.info(\"send {} request to {}\", request.getMethod(), request.getRequestURL().toString());\t\tString url = request.getRequestURL().toString();\t\t// \u5982\u679c\u662f\u767b\u5f55\u94fe\u63a5\uff0c\u5219\u53d1\u8d77\u8bf7\u6c42\t\t// URL: http://localhost:8901/auth/oauth/token?grant_type=password&scope=webclient&username=admin&password=admin\t\tif(\"/auth/oauth/token\".equals(url)){\t\t\treturn null;\t\t}\t\t\t\tObject accessToken = request.getHeader(\"Authorization\");\t\tif (accessToken == null) {\t\t\tlogger.warn(\"Authorization token is empty.\");\t\t\trequestContext.setSendZuulResponse(false);\t\t\trequestContext.setResponseStatusCode(401);\t\t\trequestContext.setResponseBody(\"Authorization token is empty.\");\t\t\treturn null;\t\t} else {\t\t\ttry {\t\t\t\t// \u4f7f\u7528Token\u53bb\u8c03\u7528\uff1ahttp://localhost:8901/auth/user\uff0c\u5982\u679c\u80fd\u8fd4\u56deUser\u4fe1\u606f\uff0c\u5219\u8bc1\u660etoken\u6709\u6548\t\t\t\tUser user = restTempate.getForObject(\"http://localhost:8901/auth/user\", User.class);\t\t\t\t// User user = restTempate.getForObject(\"http://cloud-auth-service/auth/user\", User.class);\t\t\t\tif (user == null) {\t\t\t\t\tlogger.info(\"The user is null...\");\t\t\t\t\trequestContext.setSendZuulResponse(false);\t\t\t\t\trequestContext.setResponseStatusCode(401);\t\t\t\t\trequestContext.setResponseBody(\"Cannot get the user.\");\t\t\t\t}else{\t\t\t\t\tlogger.info(\"Login user: \" + user);\t\t\t\t}\t\t\t\t// TODO \u5229\u7528\u8fd4\u56de\u7684\u6743\u9650\u4fe1\u606f\uff0c\u8fdb\u884c\u6743\u9650\u6821\u9a8c\t\t\t\t// TODO \u5982\u679c\u6ca1\u6709\u6743\u9650\uff0c\u5219\u4e0d\u8bf7\u6c42\u8f6c\u53d1\t\t\t} catch (Exception e) {\t\t\t\te.printStackTrace();\t\t\t}\t\t}\t\t\t\tlogger.info(\"Authorization token is ok\");\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/filter/AccessFilter.java", "stars": "2", "class": {"name": "AccessFilter", "extends": "ZuulFilter", "implements": null, "modifiers": ["public"]}}, {"method_name": "precioMedioAutomovil", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int precioMedioAutomovil() {        return 7800000;    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/L/Renault_L.java", "stars": "1", "class": {"name": "Renault_L", "extends": "AbsAutomovil_L", "implements": null, "modifiers": ["public"]}}, {"method_name": "numAsientos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int numAsientos() {        return 5;    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/L/Renault_L.java", "stars": "1", "class": {"name": "Renault_L", "extends": "AbsAutomovil_L", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnable()    {        plugin = this;        getServer().getPluginManager().registerEvents(new MyListener(), this);    }", "url": "https://raw.githubusercontent.com/Adzwoolly/FriendAnimals/master/src/main/java/uk/adamwoollen/friendanimals/FriendAnimals.java", "stars": "2", "class": {"name": "FriendAnimals", "extends": "JavaPlugin", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onDisable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDisable()    {    }", "url": "https://raw.githubusercontent.com/Adzwoolly/FriendAnimals/master/src/main/java/uk/adamwoollen/friendanimals/FriendAnimals.java", "stars": "2", "class": {"name": "FriendAnimals", "extends": "JavaPlugin", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "drawRect", "params": ["double", "double", "double", "double", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void drawRect(double left, double top, double right, double bottom, int color)    {        if (left < right)        {            double i = left;            left = right;            right = i;        }        if (top < bottom)        {            double j = top;            top = bottom;            bottom = j;        }        float f3 = (float)(color >> 24 & 255) / 255.0F;        float f = (float)(color >> 16 & 255) / 255.0F;        float f1 = (float)(color >> 8 & 255) / 255.0F;        float f2 = (float)(color & 255) / 255.0F;        Tessellator tessellator = Tessellator.getInstance();        BufferBuilder bufferbuilder = tessellator.getBuffer();        GlStateManager.enableBlend();        GlStateManager.disableTexture2D();        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);        GlStateManager.color(f, f1, f2, f3);        bufferbuilder.begin(7, DefaultVertexFormats.POSITION);        bufferbuilder.pos(left, bottom, 0.0D).endVertex();        bufferbuilder.pos(right, bottom, 0.0D).endVertex();        bufferbuilder.pos(right, top, 0.0D).endVertex();        bufferbuilder.pos(left, top, 0.0D).endVertex();        tessellator.draw();        GlStateManager.enableTexture2D();        GlStateManager.disableBlend();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/RenderUtil.java", "stars": "12", "class": {"name": "RenderUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "glEnableOutlineMode", "params": ["Color"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void glEnableOutlineMode(final Color color) {        buffer.put(0, color.getRed() / 255.0f);        buffer.put(1, color.getGreen() / 255.0f);        buffer.put(2, color.getBlue() / 255.0f);        buffer.put(3, color.getAlpha() / 255.0f);        mc.entityRenderer.disableLightmap();        GL11.glTexEnv(8960, 8705, buffer);        GL11.glTexEnvi(8960, 8704, 34160);        GL11.glTexEnvi(8960, 34161, 7681);        GL11.glTexEnvi(8960, 34176, 34166);        GL11.glTexEnvi(8960, 34192, 768);        GL11.glTexEnvi(8960, 34162, 7681);        GL11.glTexEnvi(8960, 34184, 5890);        GL11.glTexEnvi(8960, 34200, 770);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/RenderUtil.java", "stars": "12", "class": {"name": "RenderUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "glDisableOutlineMode", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void glDisableOutlineMode() {        GL11.glTexEnvi(8960, 8704, 8448);        GL11.glTexEnvi(8960, 34161, 8448);        GL11.glTexEnvi(8960, 34162, 8448);        GL11.glTexEnvi(8960, 34176, 5890);        GL11.glTexEnvi(8960, 34184, 5890);        GL11.glTexEnvi(8960, 34192, 768);        GL11.glTexEnvi(8960, 34200, 770);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/RenderUtil.java", "stars": "12", "class": {"name": "RenderUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "drawBorderedRect", "params": ["float", "float", "float", "float", "float", "int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void drawBorderedRect(final float x, final float y, final float x2, final float y2, final float l1, final int col1, final int col2) {        Gui.drawRect((int)x, (int)y, (int)x2, (int)y2, col2);        final float f = (col1 >> 24 & 0xFF) / 255.0f;        final float f2 = (col1 >> 16 & 0xFF) / 255.0f;        final float f3 = (col1 >> 8 & 0xFF) / 255.0f;        final float f4 = (col1 & 0xFF) / 255.0f;        GL11.glEnable(3042);        GL11.glDisable(3553);        GL11.glBlendFunc(770, 771);        GL11.glEnable(2848);        GL11.glPushMatrix();        GL11.glColor4f(f2, f3, f4, f);        GL11.glLineWidth(l1);        GL11.glBegin(1);        GL11.glVertex2d(x, y);        GL11.glVertex2d(x, y2);        GL11.glVertex2d(x2, y2);        GL11.glVertex2d(x2, y);        GL11.glVertex2d(x, y);        GL11.glVertex2d(x2, y);        GL11.glVertex2d(x, y2);        GL11.glVertex2d(x2, y2);        GL11.glEnd();        GL11.glPopMatrix();        GL11.glEnable(3553);        GL11.glDisable(3042);        GL11.glDisable(2848);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/RenderUtil.java", "stars": "12", "class": {"name": "RenderUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "drawBorderedRect2", "params": ["float", "float", "float", "float", "float", "int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void drawBorderedRect2(float x, float y, float width, float height, float lineSize, int color, int borderColor) {        drawRect2(x, y, width, height, color);        drawRect2(x, y, lineSize, height, borderColor);        drawRect2(x, y, width, lineSize, borderColor);        drawRect2(x + width - lineSize, y, lineSize, height, borderColor);        drawRect2(x, y + height - lineSize, width, lineSize, borderColor);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/RenderUtil.java", "stars": "12", "class": {"name": "RenderUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "drawRect2", "params": ["float", "float", "float", "float", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void drawRect2(float x, float y, float w, float h, int color) {        float lvt_5_2_;        float p_drawRect_2_ = x + w;        float p_drawRect_3_ = y + h;        if (x < p_drawRect_2_) {            lvt_5_2_ = x;            x = p_drawRect_2_;            p_drawRect_2_ = lvt_5_2_;        }        if (y < p_drawRect_3_) {            lvt_5_2_ = y;            y = p_drawRect_3_;            p_drawRect_3_ = lvt_5_2_;        }        float lvt_5_3_ = (float)(color >> 24 & 255) / 255.0F;        float lvt_6_1_ = (float)(color >> 16 & 255) / 255.0F;        float lvt_7_1_ = (float)(color >> 8 & 255) / 255.0F;        float lvt_8_1_ = (float)(color & 255) / 255.0F;        Tessellator lvt_9_1_ = Tessellator.getInstance();        BufferBuilder lvt_10_1_ = lvt_9_1_.getBuffer();        GlStateManager.enableBlend();        GlStateManager.disableTexture2D();        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);        GlStateManager.color(lvt_6_1_, lvt_7_1_, lvt_8_1_, lvt_5_3_);        lvt_10_1_.begin(7, DefaultVertexFormats.POSITION);        lvt_10_1_.pos(x, p_drawRect_3_, 0.0D).endVertex();        lvt_10_1_.pos(p_drawRect_2_, p_drawRect_3_, 0.0D).endVertex();        lvt_10_1_.pos(p_drawRect_2_, y, 0.0D).endVertex();        lvt_10_1_.pos(x, y, 0.0D).endVertex();        lvt_9_1_.draw();        GlStateManager.enableTexture2D();        GlStateManager.disableBlend();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/RenderUtil.java", "stars": "12", "class": {"name": "RenderUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "drawImage", "params": ["ResourceLocation", "int", "int", "int", "int", "int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void drawImage(ResourceLocation loc, int x, int y, int textureX, int textureY, int width, int height) {        mc.renderEngine.bindTexture(loc);        mc.ingameGUI.drawTexturedModalRect(x, y, textureX, textureY, width, height);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/RenderUtil.java", "stars": "12", "class": {"name": "RenderUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "drawRoundedRect", "params": ["float", "float", "float", "float", "float", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void drawRoundedRect(final float x0, final float y0, final float x1, final float y1, final float radius, final int color) {        final int numberOfArcs = 18;        final float angleIncrement = 90.0f / numberOfArcs;        final float a = (color >> 24 & 0xFF) / 255.0f;        final float r = (color >> 16 & 0xFF) / 255.0f;        final float g = (color >> 8 & 0xFF) / 255.0f;        final float b = (color & 0xFF) / 255.0f;        GL11.glDisable(2884);        GL11.glDisable(3553);        GL11.glEnable(3042);        GL11.glBlendFunc(770, 771);        // Gui.drawRect(770, 771, 1, 0);        GL11.glColor4f(r, g, b, a);        GL11.glBegin(5);        GL11.glVertex2f(x0 + radius, (float)y0);        GL11.glVertex2f(x0 + radius, (float)y1);        GL11.glVertex2f(x1 - radius, (float)y0);        GL11.glVertex2f(x1 - radius, (float)y1);        GL11.glEnd();        GL11.glBegin(5);        GL11.glVertex2f((float)x0, y0 + radius);        GL11.glVertex2f(x0 + radius, y0 + radius);        GL11.glVertex2f((float)x0, y1 - radius);        GL11.glVertex2f(x0 + radius, y1 - radius);        GL11.glEnd();        GL11.glBegin(5);        GL11.glVertex2f((float)x1, y0 + radius);        GL11.glVertex2f(x1 - radius, y0 + radius);        GL11.glVertex2f((float)x1, y1 - radius);        GL11.glVertex2f(x1 - radius, y1 - radius);        GL11.glEnd();        GL11.glBegin(6);        float centerX = x1 - radius;        float centerY = y0 + radius;        GL11.glVertex2f(centerX, centerY);        for (int i = 0; i <= numberOfArcs; ++i) {            final float angle = i * angleIncrement;            GL11.glVertex2f((float)(centerX + radius * Math.cos(Math.toRadians(angle))), (float)(centerY - radius * Math.sin(Math.toRadians(angle))));        }        GL11.glEnd();        GL11.glBegin(6);        centerX = x0 + radius;        centerY = y0 + radius;        GL11.glVertex2f(centerX, centerY);        for (int i = 0; i <= numberOfArcs; ++i) {            final float angle = i * angleIncrement;            GL11.glVertex2f((float)(centerX - radius * Math.cos(Math.toRadians(angle))), (float)(centerY - radius * Math.sin(Math.toRadians(angle))));        }        GL11.glEnd();        GL11.glBegin(6);        centerX = x0 + radius;        centerY = y1 - radius;        GL11.glVertex2f(centerX, centerY);        for (int i = 0; i <= numberOfArcs; ++i) {            final float angle = i * angleIncrement;            GL11.glVertex2f((float)(centerX - radius * Math.cos(Math.toRadians(angle))), (float)(centerY + radius * Math.sin(Math.toRadians(angle))));        }        GL11.glEnd();        GL11.glBegin(6);        centerX = x1 - radius;        centerY = y1 - radius;        GL11.glVertex2f(centerX, centerY);        for (int i = 0; i <= numberOfArcs; ++i) {            final float angle = i * angleIncrement;            GL11.glVertex2f((float)(centerX + radius * Math.cos(Math.toRadians(angle))), (float)(centerY + radius * Math.sin(Math.toRadians(angle))));        }        GL11.glEnd();        GL11.glEnable(3553);        GL11.glEnable(2884);        GL11.glDisable(3042);        GlStateManager.disableBlend();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/RenderUtil.java", "stars": "12", "class": {"name": "RenderUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "drawScaledCustomSizeModalRect", "params": ["double", "double", "float", "float", "int", "int", "int", "int", "float", "float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void drawScaledCustomSizeModalRect(double x, double y, float u, float v, int uWidth, int vHeight, int width, int height, float tileWidth, float tileHeight)    {        float f = 1.0F / tileWidth;        float f1 = 1.0F / tileHeight;        Tessellator tessellator = Tessellator.getInstance();        BufferBuilder bufferbuilder = tessellator.getBuffer();        bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);        bufferbuilder.pos(x, (y + height), 0.0D).tex((u * f), ((v + (float)vHeight) * f1)).endVertex();        bufferbuilder.pos((x + width), (y + height), 0.0D).tex(((u + (float)uWidth) * f), ((v + (float)vHeight) * f1)).endVertex();        bufferbuilder.pos((x + width), y, 0.0D).tex(((u + (float)uWidth) * f), (v * f1)).endVertex();        bufferbuilder.pos(x, y, 0.0D).tex((u * f), (v * f1)).endVertex();        tessellator.draw();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/RenderUtil.java", "stars": "12", "class": {"name": "RenderUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "drawBox", "params": ["AxisAlignedBB"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void drawBox(AxisAlignedBB boundingBox) {        if (boundingBox == null) {            return;        }        GlStateManager.glBegin(GL11.GL_QUADS);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.minY, (float) boundingBox.maxZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.minY, (float) boundingBox.maxZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.maxY, (float) boundingBox.maxZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.maxY, (float) boundingBox.maxZ);        GlStateManager.glEnd();        GlStateManager.glBegin(GL11.GL_QUADS);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.minY, (float) boundingBox.maxZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.minY, (float) boundingBox.maxZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.maxY, (float) boundingBox.maxZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.maxY, (float) boundingBox.maxZ);        GlStateManager.glEnd();        GlStateManager.glBegin(GL11.GL_QUADS);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.minY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.minY, (float) boundingBox.maxZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.maxY, (float) boundingBox.maxZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.maxY, (float) boundingBox.minZ);        GlStateManager.glEnd();        GlStateManager.glBegin(GL11.GL_QUADS);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.minY, (float) boundingBox.maxZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.minY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.maxY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.maxY, (float) boundingBox.maxZ);        GlStateManager.glEnd();        GlStateManager.glBegin(GL11.GL_QUADS);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.minY, (float) boundingBox.maxZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.minY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.maxY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.maxY, (float) boundingBox.maxZ);        GlStateManager.glEnd();        GlStateManager.glBegin(GL11.GL_QUADS);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.minY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.minY, (float) boundingBox.maxZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.maxY, (float) boundingBox.maxZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.maxY, (float) boundingBox.minZ);        GlStateManager.glEnd();        GlStateManager.glBegin(GL11.GL_QUADS);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.minY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.minY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.maxY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.maxY, (float) boundingBox.minZ);        GlStateManager.glEnd();        GlStateManager.glBegin(GL11.GL_QUADS);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.minY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.minY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.maxY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.maxY, (float) boundingBox.minZ);        GlStateManager.glEnd();        GlStateManager.glBegin(GL11.GL_QUADS);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.maxY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.maxY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.maxY, (float) boundingBox.maxZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.maxY, (float) boundingBox.maxZ);        GlStateManager.glEnd();        GlStateManager.glBegin(GL11.GL_QUADS);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.maxY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.maxY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.maxY, (float) boundingBox.maxZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.maxY, (float) boundingBox.maxZ);        GlStateManager.glEnd();        GlStateManager.glBegin(GL11.GL_QUADS);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.minY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.minY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.minY, (float) boundingBox.maxZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.minY, (float) boundingBox.maxZ);        GlStateManager.glEnd();        GlStateManager.glBegin(GL11.GL_QUADS);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.minY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.minY, (float) boundingBox.minZ);        GlStateManager.glVertex3f((float) boundingBox.minX, (float) boundingBox.minY, (float) boundingBox.maxZ);        GlStateManager.glVertex3f((float) boundingBox.maxX, (float) boundingBox.minY, (float) boundingBox.maxZ);        GlStateManager.glEnd();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/RenderUtil.java", "stars": "12", "class": {"name": "RenderUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "drawOutlinedBox", "params": ["AxisAlignedBB"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void drawOutlinedBox(AxisAlignedBB bb) {        GL11.glBegin(GL11.GL_LINES);        {            GL11.glVertex3d(bb.minX, bb.minY, bb.minZ);            GL11.glVertex3d(bb.maxX, bb.minY, bb.minZ);            GL11.glVertex3d(bb.maxX, bb.minY, bb.minZ);            GL11.glVertex3d(bb.maxX, bb.minY, bb.maxZ);            GL11.glVertex3d(bb.maxX, bb.minY, bb.maxZ);            GL11.glVertex3d(bb.minX, bb.minY, bb.maxZ);            GL11.glVertex3d(bb.minX, bb.minY, bb.maxZ);            GL11.glVertex3d(bb.minX, bb.minY, bb.minZ);            GL11.glVertex3d(bb.minX, bb.minY, bb.minZ);            GL11.glVertex3d(bb.minX, bb.maxY, bb.minZ);            GL11.glVertex3d(bb.maxX, bb.minY, bb.minZ);            GL11.glVertex3d(bb.maxX, bb.maxY, bb.minZ);            GL11.glVertex3d(bb.maxX, bb.minY, bb.maxZ);            GL11.glVertex3d(bb.maxX, bb.maxY, bb.maxZ);            GL11.glVertex3d(bb.minX, bb.minY, bb.maxZ);            GL11.glVertex3d(bb.minX, bb.maxY, bb.maxZ);            GL11.glVertex3d(bb.minX, bb.maxY, bb.minZ);            GL11.glVertex3d(bb.maxX, bb.maxY, bb.minZ);            GL11.glVertex3d(bb.maxX, bb.maxY, bb.minZ);            GL11.glVertex3d(bb.maxX, bb.maxY, bb.maxZ);            GL11.glVertex3d(bb.maxX, bb.maxY, bb.maxZ);            GL11.glVertex3d(bb.minX, bb.maxY, bb.maxZ);            GL11.glVertex3d(bb.minX, bb.maxY, bb.maxZ);            GL11.glVertex3d(bb.minX, bb.maxY, bb.minZ);        }        GL11.glEnd();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/RenderUtil.java", "stars": "12", "class": {"name": "RenderUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "drawESPOutline", "params": ["AxisAlignedBB", "float", "float", "float", "float", "float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void drawESPOutline(AxisAlignedBB bb, float red, float green, float blue, float alpha, float width) {        GL11.glPushMatrix();        GL11.glEnable(3042);        GL11.glBlendFunc(770, 771);        GL11.glDisable(3553);        GL11.glEnable(2848);        GL11.glDisable(2929);        GL11.glDepthMask(false);        GL11.glLineWidth(width);        GL11.glColor4f(red / 255f, green / 255f, blue / 255f, alpha / 255f);        RenderUtil.drawOutlinedBox(bb);        GL11.glDisable(2848);        GL11.glEnable(3553);        GL11.glEnable(2929);        GL11.glDepthMask(true);        GL11.glDisable(3042);        GL11.glPopMatrix();        GL11.glColor4f(1f, 1f, 1f, 1f);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/RenderUtil.java", "stars": "12", "class": {"name": "RenderUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "drawESP", "params": ["AxisAlignedBB", "float", "float", "float", "float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void drawESP(AxisAlignedBB bb, float red, float green, float blue, float alpha) {        GL11.glPushMatrix();        GL11.glEnable(3042);        GL11.glBlendFunc(770, 771);        GL11.glDisable(3553);        GL11.glEnable(2848);        GL11.glDisable(2929);        GL11.glDepthMask(false);        GL11.glColor4f(red / 255f, green / 255f, blue / 255f, alpha / 255f);        RenderUtil.drawBox(bb);        GL11.glDisable(2848);        GL11.glEnable(3553);        GL11.glEnable(2929);        GL11.glDepthMask(true);        GL11.glDisable(3042);        GL11.glPopMatrix();        GL11.glColor4f(1f, 1f, 1f, 1f);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/RenderUtil.java", "stars": "12", "class": {"name": "RenderUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "isInViewFrustrum", "params": ["Entity"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isInViewFrustrum(Entity entity) {        return isInViewFrustrum(entity.getEntityBoundingBox()) || entity.ignoreFrustumCheck;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/RenderUtil.java", "stars": "12", "class": {"name": "RenderUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "isInViewFrustrum", "params": ["AxisAlignedBB"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isInViewFrustrum(AxisAlignedBB bb) {        Entity current = mc.getRenderViewEntity();        frustrum.setPosition(Objects.requireNonNull(current).posX, current.posY, current.posZ);        return frustrum.isBoundingBoxInFrustum(bb);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/RenderUtil.java", "stars": "12", "class": {"name": "RenderUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "scheduleAll", "params": ["Project", "String"], "throws": ["SchedulerException", "ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void scheduleAll(final Project project, final String submitUser)      throws SchedulerException, ProjectManagerException {    for (final Flow flow : project.getFlows()) {      //todo chengren311: we should validate embedded flow shouldn't have flow trigger defined.      if (flow.isEmbeddedFlow()) {        // skip scheduling embedded flow since embedded flow are not allowed to have flow trigger        continue;      }      final String flowFileName = flow.getId() + \".flow\";      final int latestFlowVersion = this.projectLoader          .getLatestFlowVersion(flow.getProjectId(), flow              .getVersion(), flowFileName);      if (latestFlowVersion > 0) {        final File tempDir = Files.createTempDir();        final File flowFile;        try {          flowFile = this.projectLoader              .getUploadedFlowFile(project.getId(), project.getVersion(),                  flowFileName, latestFlowVersion, tempDir);          final FlowTrigger flowTrigger = FlowLoaderUtils.getFlowTriggerFromYamlFile(flowFile);          if (flowTrigger != null) {            final Map<String, Object> contextMap = ImmutableMap                .of(FlowTriggerQuartzJob.SUBMIT_USER, submitUser,                    FlowTriggerQuartzJob.FLOW_TRIGGER, flowTrigger,                    FlowTriggerQuartzJob.FLOW_ID, flow.getId(),                    FlowTriggerQuartzJob.FLOW_VERSION, latestFlowVersion,                    FlowTriggerQuartzJob.PROJECT_ID, project.getId());            logger.info(\"scheduling flow \" + flow.getProjectId() + \".\" + flow.getId());            this.scheduler                .registerJob(flowTrigger.getSchedule().getCronExpression(), new QuartzJobDescription                    (FlowTriggerQuartzJob.class, FlowTriggerQuartzJob.JOB_NAME,                        generateGroupName(flow), contextMap));          }        } catch (final Exception ex) {          logger.error(String.format(\"error in registering flow [project: %s, flow: %s]\", project              .getName(), flow.getId()), ex);        } finally {          FlowLoaderUtils.cleanUpDir(tempDir);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "FlowTriggerScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pauseFlowTrigger", "params": ["int", "String"], "throws": ["SchedulerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void pauseFlowTrigger(final int projectId, final String flowId) throws SchedulerException {    logger.info(String.format(\"pausing flow trigger for [projectId:%s, flowId:%s]\", projectId,        flowId));    this.scheduler.pauseJob(FlowTriggerQuartzJob.JOB_NAME, generateGroupName(projectId, flowId));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "FlowTriggerScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resumeFlowTrigger", "params": ["int", "String"], "throws": ["SchedulerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void resumeFlowTrigger(final int projectId, final String flowId) throws      SchedulerException {    logger.info(        String.format(\"resuming flow trigger for [projectId:%s, flowId:%s]\", projectId, flowId));    this.scheduler.resumeJob(FlowTriggerQuartzJob.JOB_NAME, generateGroupName(projectId, flowId));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "FlowTriggerScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScheduledFlowTriggerJobs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ScheduledFlowTrigger>", "snippet": "  public List<ScheduledFlowTrigger> getScheduledFlowTriggerJobs() {    try {      final Scheduler quartzScheduler = this.scheduler.getScheduler();      final List<String> groupNames = quartzScheduler.getJobGroupNames();      final List<ScheduledFlowTrigger> flowTriggerJobDetails = new ArrayList<>();      for (final String groupName : groupNames) {        final JobKey jobKey = new JobKey(FlowTriggerQuartzJob.JOB_NAME, groupName);        ScheduledFlowTrigger scheduledFlowTrigger = null;        try {          final JobDetail job = quartzScheduler.getJobDetail(jobKey);          final JobDataMap jobDataMap = job.getJobDataMap();          final String flowId = jobDataMap.getString(FlowTriggerQuartzJob.FLOW_ID);          final int projectId = jobDataMap.getInt(FlowTriggerQuartzJob.PROJECT_ID);          final FlowTrigger flowTrigger = (FlowTrigger) jobDataMap              .get(FlowTriggerQuartzJob.FLOW_TRIGGER);          final String submitUser = jobDataMap.getString(FlowTriggerQuartzJob.SUBMIT_USER);          final List<? extends Trigger> quartzTriggers = quartzScheduler.getTriggersOfJob(jobKey);          final boolean isPaused = this.scheduler              .isJobPaused(FlowTriggerQuartzJob.JOB_NAME, groupName);          scheduledFlowTrigger = new ScheduledFlowTrigger(projectId,              this.projectManager.getProject(projectId).getName(),              flowId, flowTrigger, submitUser, quartzTriggers.isEmpty() ? null              : quartzTriggers.get(0), isPaused);        } catch (final Exception ex) {          logger.error(String.format(\"unable to get flow trigger by job key %s\", jobKey), ex);          scheduledFlowTrigger = null;        }        flowTriggerJobDetails.add(scheduledFlowTrigger);      }      return flowTriggerJobDetails;    } catch (final Exception ex) {      logger.error(\"unable to get scheduled flow triggers\", ex);      return new ArrayList<>();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "FlowTriggerScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unscheduleAll", "params": ["Project"], "throws": ["SchedulerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void unscheduleAll(final Project project) throws SchedulerException {    for (final Flow flow : project.getFlows()) {      logger.info(\"unscheduling flow\" + flow.getProjectId() + \".\" + flow.getId() + \" if it has \"          + \" schedule\");      if (!flow.isEmbeddedFlow()) {        try {          this.scheduler.unregisterJob(FlowTriggerQuartzJob.JOB_NAME, generateGroupName(flow));        } catch (final Exception ex) {          logger.info(\"error when unregistering job\", ex);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "FlowTriggerScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateGroupName", "params": ["Flow"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String generateGroupName(final Flow flow) {    return generateGroupName(flow.getProjectId(), flow.getId());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "FlowTriggerScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateGroupName", "params": ["int", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String generateGroupName(final int projectId, final String flowId) {    return String.valueOf(projectId) + \".\" + flowId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "FlowTriggerScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void start() {    this.scheduler.start();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "FlowTriggerScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shutdown() {    this.scheduler.shutdown();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "FlowTriggerScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isPaused", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isPaused() {      return this.isPaused;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "ScheduledFlowTrigger", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getProjectId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getProjectId() {      return this.projectId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "ScheduledFlowTrigger", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getProjectName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getProjectName() {      return this.projectName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "ScheduledFlowTrigger", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getFlowId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFlowId() {      return this.flowId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "ScheduledFlowTrigger", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getFlowTrigger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FlowTrigger", "snippet": "    public FlowTrigger getFlowTrigger() {      return this.flowTrigger;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "ScheduledFlowTrigger", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDependencyListJson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDependencyListJson() {      return new GsonBuilder().setPrettyPrinting().create()          .toJson(this.flowTrigger.getDependencies());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "ScheduledFlowTrigger", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getQuartzTrigger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Trigger", "snippet": "    public Trigger getQuartzTrigger() {      return this.quartzTrigger;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "ScheduledFlowTrigger", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSubmitUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSubmitUser() {      return this.submitUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerScheduler.java", "stars": "18", "class": {"name": "ScheduledFlowTrigger", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "asString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String asString() {        if (null == this.getRawData()) {            return null;        }        return (String) this.getRawData();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/StringColumn.java", "stars": "23", "class": {"name": "StringColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "validateDoubleSpecific", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void validateDoubleSpecific(final String data) {        if (\"NaN\".equals(data) || \"Infinity\".equals(data)                || \"-Infinity\".equals(data)) {            throw DataXException.asDataXException(                    CommonErrorCode.CONVERT_NOT_SUPPORT,                    String.format(\"String[\\\"%s\\\"]\u5c5e\u4e8eDouble\u7279\u6b8a\u7c7b\u578b\uff0c\u4e0d\u80fd\u8f6c\u4e3a\u5176\u4ed6\u7c7b\u578b .\", data));        }        return;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/StringColumn.java", "stars": "23", "class": {"name": "StringColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBigInteger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigInteger", "snippet": "    public BigInteger asBigInteger() {        if (null == this.getRawData()) {            return null;        }        this.validateDoubleSpecific((String) this.getRawData());        try {            return this.asBigDecimal().toBigInteger();        } catch (Exception e) {            throw DataXException.asDataXException(                    CommonErrorCode.CONVERT_NOT_SUPPORT, String.format(                            \"String[\\\"%s\\\"]\u4e0d\u80fd\u8f6c\u4e3aBigInteger .\", this.asString()));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/StringColumn.java", "stars": "23", "class": {"name": "StringColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asLong", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long asLong() {        if (null == this.getRawData()) {            return null;        }        this.validateDoubleSpecific((String) this.getRawData());        try {            BigInteger integer = this.asBigInteger();            OverFlowUtil.validateLongNotOverFlow(integer);            return integer.longValue();        } catch (Exception e) {            throw DataXException.asDataXException(                    CommonErrorCode.CONVERT_NOT_SUPPORT,                    String.format(\"String[\\\"%s\\\"]\u4e0d\u80fd\u8f6c\u4e3aLong .\", this.asString()));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/StringColumn.java", "stars": "23", "class": {"name": "StringColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBigDecimal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal asBigDecimal() {        if (null == this.getRawData()) {            return null;        }        this.validateDoubleSpecific((String) this.getRawData());        try {            return new BigDecimal(this.asString());        } catch (Exception e) {            throw DataXException.asDataXException(                    CommonErrorCode.CONVERT_NOT_SUPPORT, String.format(                            \"String [\\\"%s\\\"] \u4e0d\u80fd\u8f6c\u4e3aBigDecimal .\", this.asString()));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/StringColumn.java", "stars": "23", "class": {"name": "StringColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asDouble", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double asDouble() {        if (null == this.getRawData()) {            return null;        }        String data = (String) this.getRawData();        if (\"NaN\".equals(data)) {            return Double.NaN;        }        if (\"Infinity\".equals(data)) {            return Double.POSITIVE_INFINITY;        }        if (\"-Infinity\".equals(data)) {            return Double.NEGATIVE_INFINITY;        }        BigDecimal decimal = this.asBigDecimal();        OverFlowUtil.validateDoubleNotOverFlow(decimal);        return decimal.doubleValue();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/StringColumn.java", "stars": "23", "class": {"name": "StringColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBoolean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean asBoolean() {        if (null == this.getRawData()) {            return null;        }        if (\"true\".equalsIgnoreCase(this.asString())) {            return true;        }        if (\"false\".equalsIgnoreCase(this.asString())) {            return false;        }        throw DataXException.asDataXException(                CommonErrorCode.CONVERT_NOT_SUPPORT,                String.format(\"String[\\\"%s\\\"]\u4e0d\u80fd\u8f6c\u4e3aBool .\", this.asString()));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/StringColumn.java", "stars": "23", "class": {"name": "StringColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date asDate() {        try {            return ColumnCast.string2Date(this);        } catch (Exception e) {            throw DataXException.asDataXException(                    CommonErrorCode.CONVERT_NOT_SUPPORT,                    String.format(\"String[\\\"%s\\\"]\u4e0d\u80fd\u8f6c\u4e3aDate .\", this.asString()));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/StringColumn.java", "stars": "23", "class": {"name": "StringColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] asBytes() {        try {            return ColumnCast.string2Bytes(this);        } catch (Exception e) {            throw DataXException.asDataXException(                    CommonErrorCode.CONVERT_NOT_SUPPORT,                    String.format(\"String[\\\"%s\\\"]\u4e0d\u80fd\u8f6c\u4e3aBytes .\", this.asString()));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/StringColumn.java", "stars": "23", "class": {"name": "StringColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(widthMeasureSpec, widthMeasureSpec);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYMeet-android/master/app/src/main/java/com/mediaroom/ui/MyFrameLayout.java", "stars": "2", "class": {"name": "MyFrameLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u7b2c\u4e00\u652f\u961f\u4f0d        ArrayList<String> one = new ArrayList<>();        one.add(\"\u8fea\u4e3d\u70ed\u5df4\");        one.add(\"\u5b8b\u8fdc\u6865\");        one.add(\"\u82cf\u661f\u6cb3\");        one.add(\"\u77f3\u7834\u5929\");        one.add(\"\u77f3\u4e2d\u7389\");        one.add(\"\u8001\u5b50\");        one.add(\"\u5e84\u5b50\");        one.add(\"\u6d2a\u4e03\u516c\");        //1. \u7b2c\u4e00\u4e2a\u961f\u4f0d\u53ea\u8981\u540d\u5b57\u4e3a3\u4e2a\u5b57\u7684\u6210\u5458\u59d3\u540d\uff1b\u5b58\u50a8\u5230\u4e00\u4e2a\u65b0\u96c6\u5408\u4e2d\u3002        ArrayList<String> one1 = new ArrayList<>();        for (String name : one) {            if(name.length()==3){                one1.add(name);            }        }        //2. \u7b2c\u4e00\u4e2a\u961f\u4f0d\u7b5b\u9009\u4e4b\u540e\u53ea\u8981\u524d3\u4e2a\u4eba\uff1b\u5b58\u50a8\u5230\u4e00\u4e2a\u65b0\u96c6\u5408\u4e2d\u3002        ArrayList<String> one2 = new ArrayList<>();        for (int i = 0; i <3 ; i++) {            one2.add(one1.get(i));//i = 0,1,2        }        //\u7b2c\u4e8c\u652f\u961f\u4f0d        ArrayList<String> two = new ArrayList<>();        two.add(\"\u53e4\u529b\u5a1c\u624e\");        two.add(\"\u5f20\u65e0\u5fcc\");        two.add(\"\u8d75\u4e3d\u9896\");        two.add(\"\u5f20\u4e09\u4e30\");        two.add(\"\u5c3c\u53e4\u62c9\u65af\u8d75\u56db\");        two.add(\"\u5f20\u5929\u7231\");        two.add(\"\u5f20\u4e8c\u72d7\");        //3. \u7b2c\u4e8c\u4e2a\u961f\u4f0d\u53ea\u8981\u59d3\u5f20\u7684\u6210\u5458\u59d3\u540d\uff1b\u5b58\u50a8\u5230\u4e00\u4e2a\u65b0\u96c6\u5408\u4e2d\u3002        ArrayList<String> two1 = new ArrayList<>();        for (String name : two) {            if(name.startsWith(\"\u5f20\")){                two1.add(name);            }        }        //4. \u7b2c\u4e8c\u4e2a\u961f\u4f0d\u7b5b\u9009\u4e4b\u540e\u4e0d\u8981\u524d2\u4e2a\u4eba\uff1b\u5b58\u50a8\u5230\u4e00\u4e2a\u65b0\u96c6\u5408\u4e2d\u3002        ArrayList<String> two2 = new ArrayList<>();        for (int i = 2; i <two1.size() ; i++) {            two2.add(two1.get(i)); //i \u4e0d\u5305\u542b0 1        }        //5. \u5c06\u4e24\u4e2a\u961f\u4f0d\u5408\u5e76\u4e3a\u4e00\u4e2a\u961f\u4f0d\uff1b\u5b58\u50a8\u5230\u4e00\u4e2a\u65b0\u96c6\u5408\u4e2d\u3002        ArrayList<String> all = new ArrayList<>();        all.addAll(one2);        all.addAll(two2);        //6. \u6839\u636e\u59d3\u540d\u521b\u5efaPerson\u5bf9\u8c61\uff1b\u5b58\u50a8\u5230\u4e00\u4e2a\u65b0\u96c6\u5408\u4e2d\u3002        ArrayList<Person> list = new ArrayList<>();        for (String name : all) {            list.add(new Person(name));        }        //7. \u6253\u5370\u6574\u4e2a\u961f\u4f0d\u7684Person\u5bf9\u8c61\u4fe1\u606f\u3002        for (Person person : list) {            System.out.println(person);        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/24.%E3%80%90Stream%E6%B5%81%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%91%E7%AC%94%E8%AE%B0/code/13_StreamAndMethodReference/src/com/itheima/demo03/Stream/Demo01StreamTest.java", "stars": "2", "class": {"name": "Demo01StreamTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isInStock", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isInStock() {    return inStock;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/CartItem.java", "stars": "15", "class": {"name": "CartItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setInStock", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setInStock(boolean inStock) {    this.inStock = inStock;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/CartItem.java", "stars": "15", "class": {"name": "CartItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getTotal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "  public BigDecimal getTotal() {    return total;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/CartItem.java", "stars": "15", "class": {"name": "CartItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getItem", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Item", "snippet": "  public Item getItem() {    return item;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/CartItem.java", "stars": "15", "class": {"name": "CartItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setItem", "params": ["Item"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setItem(Item item) {    this.item = item;    calculateTotal();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/CartItem.java", "stars": "15", "class": {"name": "CartItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getQuantity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getQuantity() {    return quantity;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/CartItem.java", "stars": "15", "class": {"name": "CartItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setQuantity", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setQuantity(int quantity) {    this.quantity = quantity;    calculateTotal();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/CartItem.java", "stars": "15", "class": {"name": "CartItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "incrementQuantity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void incrementQuantity() {    quantity++;    calculateTotal();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/CartItem.java", "stars": "15", "class": {"name": "CartItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "calculateTotal", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void calculateTotal() {    if (item != null && item.getListPrice() != null) {      total = item.getListPrice().multiply(new BigDecimal(quantity));    } else {      total = null;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/CartItem.java", "stars": "15", "class": {"name": "CartItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "calcularCostoFabricacion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float calcularCostoFabricacion(){        int contador = 0;        for(int i=0; i < getReceta().getListaingrediente().size();i++){            contador += getReceta().getListaingrediente().get(i).getPrecioUnidad();        }        contador += contador * (getPorcentajeComplejidad()/100);        return contador;    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/Roja.java", "stars": "2", "class": {"name": "Roja", "extends": "TipoCerveza", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Roja{}\"+super.toString();    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/Roja.java", "stars": "2", "class": {"name": "Roja", "extends": "TipoCerveza", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid setUp() {\t\tthis.mvc = MockMvcBuilders.webAppContextSetup(this.context).build();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jpa/src/test/java/smoketest/jpa/SampleJpaApplicationTests.java", "stars": "47572", "class": {"name": "SampleJpaApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testHome", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid testHome() throws Exception {\t\tthis.mvc.perform(get(\"/\")).andExpect(status().isOk()).andExpect(xpath(\"//tbody/tr\").nodeCount(4));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jpa/src/test/java/smoketest/jpa/SampleJpaApplicationTests.java", "stars": "47572", "class": {"name": "SampleJpaApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreateDialog", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "Dialog", "snippet": "    public Dialog onCreateDialog(Bundle savedInstanceState) {        return new AlertDialog.Builder(getActivity())                .setTitle(R.string.vpn_not_installed)                .setMessage(R.string.vpn_info)                .setPositiveButton(R.string.vpn_download, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialogInterface, int i) {                        try {                            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"market://details?id=\" + VPNManager.PACKAGE_VPNHT)));                        } catch (android.content.ActivityNotFoundException anfe) {                            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://play.google.com/store/apps/details?id=\" + VPNManager.PACKAGE_VPNHT)));                        }                    }                })                .setNeutralButton(R.string.vpn_later, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialogInterface, int i) {                        dismiss();                    }                })                .setNegativeButton(R.string.vpn_hide, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        PrefUtils.save(getActivity(), Prefs.SHOW_VPN, false);                    }                })                .create();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/VPNInfoDialogFragment.java", "stars": "4", "class": {"name": "VPNInfoDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": ["FragmentManager"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void show(FragmentManager fm) {        VPNInfoDialogFragment dialogFragment = new VPNInfoDialogFragment();        dialogFragment.show(fm, \"overlay_fragment\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/VPNInfoDialogFragment.java", "stars": "4", "class": {"name": "VPNInfoDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "handle", "params": ["WxMpXmlMessage", "Map<String,Object>", "WxMpService", "WxSessionManager"], "throws": ["WxErrorException"], "modifiers": ["public"], "return_type": "WxMpXmlOutMessage", "snippet": "  public WxMpXmlOutMessage handle(WxMpXmlMessage wxMessage,                                  Map<String, Object> context, WxMpService weixinService,                                  WxSessionManager sessionManager) throws WxErrorException {    this.logger.info(\"\u65b0\u5173\u6ce8\u7528\u6237 OPENID: \" + wxMessage.getFromUser());    // \u83b7\u53d6\u5fae\u4fe1\u7528\u6237\u57fa\u672c\u4fe1\u606f    WxMpUser userWxInfo = weixinService.getUserService()        .userInfo(wxMessage.getFromUser(), null);    if (userWxInfo != null) {      // TODO \u53ef\u4ee5\u6dfb\u52a0\u5173\u6ce8\u7528\u6237\u5230\u672c\u5730    }    WxMpXmlOutMessage responseResult = null;    try {      responseResult = handleSpecial(wxMessage);    } catch (Exception e) {      this.logger.error(e.getMessage(), e);    }    if (responseResult != null) {      return responseResult;    }    try {      return new TextBuilder().build(\"\u611f\u8c22\u5173\u6ce8\", wxMessage, weixinService);    } catch (Exception e) {      this.logger.error(e.getMessage(), e);    }    return null;  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/handler/SubscribeHandler.java", "stars": "2", "class": {"name": "SubscribeHandler", "extends": "AbstractHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleSpecial", "params": ["WxMpXmlMessage"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "WxMpXmlOutMessage", "snippet": "  private WxMpXmlOutMessage handleSpecial(WxMpXmlMessage wxMessage)      throws Exception {    //TODO\t      return null;  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/handler/SubscribeHandler.java", "stars": "2", "class": {"name": "SubscribeHandler", "extends": "AbstractHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getKey() {    return key;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/IntBoolMapEntry.java", "stars": "15", "class": {"name": "IntBoolMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setKey", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setKey(Integer key) {    this.key = key;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/IntBoolMapEntry.java", "stars": "15", "class": {"name": "IntBoolMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "  public Boolean getValue() {    return value;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/IntBoolMapEntry.java", "stars": "15", "class": {"name": "IntBoolMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValue", "params": ["Boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setValue(Boolean value) {    this.value = value;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/IntBoolMapEntry.java", "stars": "15", "class": {"name": "IntBoolMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object o) {    if (this == o)      return true;    if (o == null || getClass() != o.getClass())      return false;    IntBoolMapEntry mapEntry = (IntBoolMapEntry) o;    if (key != null ? !key.equals(mapEntry.key) : mapEntry.key != null)      return false;    if (value != null ? !value.equals(mapEntry.value) : mapEntry.value != null)      return false;    return true;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/IntBoolMapEntry.java", "stars": "15", "class": {"name": "IntBoolMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    int result = key != null ? key.hashCode() : 0;    result = 31 * result + (value != null ? value.hashCode() : 0);    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/IntBoolMapEntry.java", "stars": "15", "class": {"name": "IntBoolMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return '{' + key.toString() + '=' + value + '}';  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/IntBoolMapEntry.java", "stars": "15", "class": {"name": "IntBoolMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "copyBeanProperties", "params": ["Class<?>", "Object", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void copyBeanProperties(Class<?> type, Object sourceBean, Object destinationBean) {    Class<?> parent = type;    while (parent != null) {      final Field[] fields = parent.getDeclaredFields();      for (Field field : fields) {        try {          try {            field.set(destinationBean, field.get(sourceBean));          } catch (IllegalAccessException e) {            if (Reflector.canControlMemberAccessible()) {              field.setAccessible(true);              field.set(destinationBean, field.get(sourceBean));            } else {              throw e;            }          }        } catch (Exception e) {          // Nothing useful to do, will only fail on final fields, which will be ignored.        }      }      parent = parent.getSuperclass();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/property/PropertyCopier.java", "stars": "15", "class": {"name": "PropertyCopier", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getDao", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "IBaseDao<T>", "snippet": "    protected abstract IBaseDao<T> getDao();    /**     * Add     *     */    @Override    public boolean add(T t) {        return getDao().insert(t) > 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/service/AbstractGenericService.java", "stars": "23", "class": {"name": "AbstractGenericService", "extends": null, "implements": ["IBaseService"], "modifiers": ["public", "abstract"]}}, {"method_name": "add", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean add(T t) {        return getDao().insert(t) > 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/service/AbstractGenericService.java", "stars": "23", "class": {"name": "AbstractGenericService", "extends": null, "implements": ["IBaseService"], "modifiers": ["public", "abstract"]}}, {"method_name": "delete", "params": ["List<Object>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean delete(List<Object> ids) {        return getDao().delete(ids) > 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/service/AbstractGenericService.java", "stars": "23", "class": {"name": "AbstractGenericService", "extends": null, "implements": ["IBaseService"], "modifiers": ["public", "abstract"]}}, {"method_name": "delete", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean delete(String ids) {        String[] idsStr = ids.split(\",\");        List<Object> list = new ArrayList<Object>();        for (String id : idsStr) {            list.add(Long.valueOf(id));        }        logger.info(\"Delete ids: \" + ids);        return delete(list);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/service/AbstractGenericService.java", "stars": "23", "class": {"name": "AbstractGenericService", "extends": null, "implements": ["IBaseService"], "modifiers": ["public", "abstract"]}}, {"method_name": "update", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean update(T t) {        return getDao().update(t) > 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/service/AbstractGenericService.java", "stars": "23", "class": {"name": "AbstractGenericService", "extends": null, "implements": ["IBaseService"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCount", "params": ["PageQuery"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getCount(PageQuery pageQuery) {        return getDao().count(pageQuery);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/service/AbstractGenericService.java", "stars": "23", "class": {"name": "AbstractGenericService", "extends": null, "implements": ["IBaseService"], "modifiers": ["public", "abstract"]}}, {"method_name": "get", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T get(Object id) {        return queryFilter(getDao().selectOne(id));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/service/AbstractGenericService.java", "stars": "23", "class": {"name": "AbstractGenericService", "extends": null, "implements": ["IBaseService"], "modifiers": ["public", "abstract"]}}, {"method_name": "findPage", "params": ["PageQuery"], "throws": null, "modifiers": ["public"], "return_type": "PageList<T>", "snippet": "    public PageList<T> findPage(PageQuery pageQuery) {        long totalCount = getDao().count(pageQuery);        int currentPage = pageQuery.getPage();        int pageSize = pageQuery.getPageSize();        PageList<T> page = new PageList<T>(new Paginator(currentPage, pageSize, (int) totalCount));        int offset = currentPage > 0 ? (currentPage - 1) * pageSize : 0;        List<T> result = getDao().findPage(pageQuery, new RowBounds(offset, pageSize));        page.setData(queryFilter(result));        return page;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/service/AbstractGenericService.java", "stars": "23", "class": {"name": "AbstractGenericService", "extends": null, "implements": ["IBaseService"], "modifiers": ["public", "abstract"]}}, {"method_name": "selectAllList", "params": ["PageQuery"], "throws": null, "modifiers": ["public"], "return_type": "List<T>", "snippet": "    public List<T> selectAllList(PageQuery pageQuery) {        return queryFilter(getDao().selectAllList(pageQuery));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/service/AbstractGenericService.java", "stars": "23", "class": {"name": "AbstractGenericService", "extends": null, "implements": ["IBaseService"], "modifiers": ["public", "abstract"]}}, {"method_name": "queryFilter", "params": ["T"], "throws": null, "modifiers": ["protected"], "return_type": "T", "snippet": "    protected T queryFilter(T t){        return t;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/service/AbstractGenericService.java", "stars": "23", "class": {"name": "AbstractGenericService", "extends": null, "implements": ["IBaseService"], "modifiers": ["public", "abstract"]}}, {"method_name": "queryFilter", "params": ["List<T>"], "throws": null, "modifiers": ["final", "protected"], "return_type": "List<T>", "snippet": "    final protected List<T> queryFilter(List<T> list){        List<T> result = new ArrayList<>();        for(T t : list){            result.add(queryFilter(t));        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/service/AbstractGenericService.java", "stars": "23", "class": {"name": "AbstractGenericService", "extends": null, "implements": ["IBaseService"], "modifiers": ["public", "abstract"]}}, {"method_name": "intercept", "params": ["Invocation"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object intercept(Invocation invocation) throws Throwable {    return invocation.proceed();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ExamplePlugin.java", "stars": "15", "class": {"name": "ExamplePlugin", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "plugin", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object plugin(Object target) {    return Plugin.wrap(target, this);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ExamplePlugin.java", "stars": "15", "class": {"name": "ExamplePlugin", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "setProperties", "params": ["Properties"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setProperties(Properties properties) {    this.properties = properties;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ExamplePlugin.java", "stars": "15", "class": {"name": "ExamplePlugin", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "getProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Properties", "snippet": "  public Properties getProperties() {    return properties;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ExamplePlugin.java", "stars": "15", "class": {"name": "ExamplePlugin", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "onItemRightClick", "params": ["World", "EntityPlayer", "EnumHand"], "throws": null, "modifiers": ["public"], "return_type": "ActionResult<ItemStack>", "snippet": "    public ActionResult<ItemStack> onItemRightClick(World worldIn, EntityPlayer playerIn, EnumHand handIn) {        if (!worldIn.isRemote) {            ItemStack stack = playerIn.getHeldItem(handIn);            IEVEStorageItem eve = stack.getCapability(CapabilityEVE.EVE_ITEM, null);            eve.setEVE(new Eve(0, 1000, 0, 1, 1));        }        return super.onItemRightClick(worldIn, playerIn, handIn);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemBattery/ItemBattery.java", "stars": "2", "class": {"name": "ItemBattery", "extends": "PhaseItemEveBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "validate", "params": ["MethodNode", "Frame<AbstractValue>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean validate(MethodNode method, Frame<AbstractValue>[] frames) {\t\treturn validator.test(method, frames);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/exception/ResolvableAnalyzerException.java", "stars": "12", "class": {"name": "ResolvableAnalyzerException", "extends": "AnalyzerException", "implements": null, "modifiers": ["public"]}}, {"method_name": "clone", "params": [], "throws": ["CloneNotSupportedException"], "modifiers": ["protected"], "return_type": "Object", "snippet": "    protected Object clone() throws CloneNotSupportedException {        return super.clone();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/prototype/clone/Author.java", "stars": "2", "class": {"name": "Author", "extends": null, "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "route", "params": ["TriggerParam", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "    public ReturnT<String> route(TriggerParam triggerParam, List<String> addressList) {        return new ReturnT<String>(addressList.get(addressList.size()-1));    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/route/strategy/ExecutorRouteLast.java", "stars": "1", "class": {"name": "ExecutorRouteLast", "extends": "ExecutorRouter", "implements": null, "modifiers": ["public"]}}, {"method_name": "dummy", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void dummy() {  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/CachingSimpleExecutorTest.java", "stars": "15", "class": {"name": "CachingSimpleExecutorTest", "extends": "BaseExecutorTest", "implements": null, "modifiers": []}}, {"method_name": "createExecutor", "params": ["Transaction"], "throws": null, "modifiers": ["protected"], "return_type": "Executor", "snippet": "  protected Executor createExecutor(Transaction transaction) {    return new CachingExecutor(new SimpleExecutor(config, transaction));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/CachingSimpleExecutorTest.java", "stars": "15", "class": {"name": "CachingSimpleExecutorTest", "extends": "BaseExecutorTest", "implements": null, "modifiers": []}}, {"method_name": "activate", "params": ["VipPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void activate(VipPlayer vipPlayer) {        UUID uuid = vipPlayer.getUuid();        Player player = Bukkit.getPlayer(uuid);        type.getPermissions().apply(player, type);        type.getCommands().apply(player, type);        type.getItems().apply(player, type);        type.getTitle().apply(player, type);        vipPlayer.addVip(type.getIdentifier(), this);    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/entity/Vip.java", "stars": "2", "class": {"name": "Vip", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "increaseTime", "params": ["Long"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void increaseTime(Long time) {        this.time += time;    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/entity/Vip.java", "stars": "2", "class": {"name": "Vip", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reduceTime", "params": ["Long"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void reduceTime(Long time) {        this.time -= time;    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/entity/Vip.java", "stars": "2", "class": {"name": "Vip", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "prepareMessage", "params": ["String", "Player"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String prepareMessage(String message, Player player) {        PrettyName prettyName = type.getPrettyName();        String prettyNameString = prettyName.isPresent() ? prettyName.getSection() : type.getIdentifier();        return message                .replace(\"{player}\", player.getName())                .replace(\"{name}\", type.getIdentifier())                .replace(\"{pretty_name}\", prettyNameString);    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/entity/Vip.java", "stars": "2", "class": {"name": "Vip", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tint x = 7;\t\tint a = 2 * x++;\t\tSystem.out.println(x);\t\tSystem.out.println(a);\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Shu.java", "stars": "2", "class": {"name": "Shu", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["synchronized", "private", "static"], "return_type": "void", "snippet": "  private static synchronized void init() {    if (sqlSessionFactory == null)      try {        final String resource = \"org/apache/ibatis/submitted/primitive_result_type/ibatis.xml\";        Reader reader = Resources.getResourceAsReader(resource);        sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);      } catch (Exception e) {        throw new RuntimeException(e);      }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitive_result_type/IbatisConfig.java", "stars": "15", "class": {"name": "IbatisConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSession", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "SqlSession", "snippet": "  public static SqlSession getSession() {    if (sqlSessionFactory == null) {      init();    }    return sqlSessionFactory.openSession();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitive_result_type/IbatisConfig.java", "stars": "15", "class": {"name": "IbatisConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSqlSessionFactory", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "SqlSessionFactory", "snippet": "  public static SqlSessionFactory getSqlSessionFactory() {    init();    return sqlSessionFactory;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitive_result_type/IbatisConfig.java", "stars": "15", "class": {"name": "IbatisConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Substring", "snippet": "\tprotected Substring getInstance() {\t\treturn new MinimalAbsentWord(alphabetLength,log2alphabetLength,bitsToEncodeAlphabetLength,bwtLength,log2BWTLength,bitsToEncodeBWTLength);\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/MinimalAbsentWord.java", "stars": "2", "class": {"name": "MinimalAbsentWord", "extends": "MaximalRepeat", "implements": null, "modifiers": ["public"]}}, {"method_name": "visited", "params": ["Stream", "RigidStream", "SimpleStream", "Substring", "Substring"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void visited(Stream stack, RigidStream characterStack, SimpleStream pointerStack, Substring[] cache, Substring[] leftExtensions) {\t\tsuper.visited(stack,characterStack,pointerStack,cache,leftExtensions);\t\tif (leftContext<2) return;\t\tint i, j;\t\tlastMinimalAbsent=-1;\t\tfor (i=1; i<alphabetLength+1; i++) {  // Discarding $#$\t\t\tif (leftExtensions[i].frequency()==0) continue;\t\t\tfor (j=1; j<alphabetLength+1; j++) {\t\t\t\tif (bwtIntervals[j][1]<bwtIntervals[j][0]) continue;\t\t\t\tif (leftExtensions[i].bwtIntervals[j][1]>=leftExtensions[i].bwtIntervals[j][0]) continue;\t\t\t\tlastMinimalAbsent++;\t\t\t\tminimalAbsent[lastMinimalAbsent][0]=i-1;\t\t\t\tminimalAbsent[lastMinimalAbsent][1]=j-1;\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/MinimalAbsentWord.java", "stars": "2", "class": {"name": "MinimalAbsentWord", "extends": "MaximalRepeat", "implements": null, "modifiers": ["public"]}}, {"method_name": "onARadNetworkChange", "params": ["ARadNetworkManager", "IARadEffective"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onARadNetworkChange(ARadNetworkManager.NetworkEventType type, IARadEffective toAdd) {        if (type == ARadNetworkManager.NetworkEventType.ADD) {            if (MathHelper.distanceB2B(toAdd.getPos(), pos) <= 10d && toAdd instanceof TileEveBase) {                listEffects.add(toAdd);            }        } else if (type == ARadNetworkManager.NetworkEventType.REMOVE) {            listEffects.remove(toAdd);        }    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/TileEntity/TileARadTest/TileARadTest.java", "stars": "2", "class": {"name": "TileARadTest", "extends": "TileARadBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRegister", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRegister() {        listEffects.addAll(ARadNetworkManager.instance.getWithinRadius(world.provider.getDimension(), pos, 10d).collect(Collectors.toList()));    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/TileEntity/TileARadTest/TileARadTest.java", "stars": "2", "class": {"name": "TileARadTest", "extends": "TileARadBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRemove", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRemove() {        super.onRemove();    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/TileEntity/TileARadTest/TileARadTest.java", "stars": "2", "class": {"name": "TileARadTest", "extends": "TileARadBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "check", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void check() {        listEffects.forEach(iaRadEffective -> {            if (iaRadEffective instanceof TileEveBase) {                IEVEStorage storage = ((TileEveBase) iaRadEffective).getCapability(CapabilityEVE.EVE, null);                if (storage != null) {                    Phase.logger.info(iaRadEffective.getUUID());                    Phase.logger.info(iaRadEffective.getPos());                }            }        });    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/TileEntity/TileARadTest/TileARadTest.java", "stars": "2", "class": {"name": "TileARadTest", "extends": "TileARadBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);//        \u7ec3\u4e60\u5185\u5bb9\uff1a\u4f7f\u7528 canvas.drawOval() \u65b9\u6cd5\u753b\u692d\u5706        canvas.drawOval(100, 100, 300, 200, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson1/Practice5DrawOvalView.java", "stars": "2", "class": {"name": "Practice5DrawOvalView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDatos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Dato", "snippet": "    public Dato getDatos() {         if(dato == null){           dato = new Dato(\"Datos ApiService\");        }        return dato;    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/D/APIService.java", "stars": "1", "class": {"name": "APIService", "extends": null, "implements": ["IConexion"], "modifiers": ["public"]}}, {"method_name": "setDatos", "params": ["Dato"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDatos(Dato dato) {        this.dato = dato;    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/D/APIService.java", "stars": "1", "class": {"name": "APIService", "extends": null, "implements": ["IConexion"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CheckBoxRenderer.java", "stars": "2", "class": {"name": "CheckBoxRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CheckBoxRenderer.java", "stars": "2", "class": {"name": "CheckBoxRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        NoteApprover noteApprover = new NoteApprover();        VideoApprover videoApprover = new VideoApprover();        Course course = new Course();        course.setName(\"SpringCloud Alibaba\u5fae\u670d\u52a1\u67b6\u6784\");        course.setNote(\"SpringCloud Alibaba\u5fae\u670d\u52a1\u67b6\u6784\u7684\u7b14\u8bb0\");        course.setVideo(\"SpringCloud Alibaba\u5fae\u670d\u52a1\u67b6\u6784\u7684\u89c6\u9891\");        noteApprover.setNextApprover(videoApprover);        noteApprover.deploy(course);    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/chainofresponsibility/ApproverTest.java", "stars": "2", "class": {"name": "ApproverTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOperandString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOperandString() {        switch (mode) {        case MODE_IMMEDIATE:            return String.format(\"0x%04X\", operand);        default:            return super.getOperandString();        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/CPX.java", "stars": "4", "class": {"name": "CPX", "extends": "NonBranchInstruction", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLength", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLength() {        switch (mode) {        case MODE_IMMEDIATE:            return 3;        default:            return super.getLength();        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/CPX.java", "stars": "4", "class": {"name": "CPX", "extends": "NonBranchInstruction", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAttachedToWindow ()\t{\t\tn_onAttachedToWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewRenderer.java", "stars": "2", "class": {"name": "ListViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAttachedToWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAttachedToWindow ();\tpublic void onDetachedFromWindow ()\t{\t\tn_onDetachedFromWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewRenderer.java", "stars": "2", "class": {"name": "ListViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDetachedFromWindow ()\t{\t\tn_onDetachedFromWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewRenderer.java", "stars": "2", "class": {"name": "ListViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDetachedFromWindow ();\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewRenderer.java", "stars": "2", "class": {"name": "ListViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewRenderer.java", "stars": "2", "class": {"name": "ListViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic void onRefresh ()\t{\t\tn_onRefresh ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewRenderer.java", "stars": "2", "class": {"name": "ListViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onRefresh", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onRefresh ()\t{\t\tn_onRefresh ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewRenderer.java", "stars": "2", "class": {"name": "ListViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onRefresh", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onRefresh ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewRenderer.java", "stars": "2", "class": {"name": "ListViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewRenderer.java", "stars": "2", "class": {"name": "ListViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ListViewRenderer.java", "stars": "2", "class": {"name": "ListViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onOffsetChanged", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onOffsetChanged (android.support.design.widget.AppBarLayout p0, int p1)\t{\t\tn_onOffsetChanged (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutTemplatedContentRenderer.java", "stars": "2", "class": {"name": "ShellFlyoutTemplatedContentRenderer", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onOffsetChanged", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onOffsetChanged (android.support.design.widget.AppBarLayout p0, int p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutTemplatedContentRenderer.java", "stars": "2", "class": {"name": "ShellFlyoutTemplatedContentRenderer", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutTemplatedContentRenderer.java", "stars": "2", "class": {"name": "ShellFlyoutTemplatedContentRenderer", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutTemplatedContentRenderer.java", "stars": "2", "class": {"name": "ShellFlyoutTemplatedContentRenderer", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, \"Hello\", null);    verify(ps).setString(1, \"Hello\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/StringTypeHandlerTest.java", "stars": "15", "class": {"name": "StringTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getString(\"column\")).thenReturn(\"Hello\");    assertEquals(\"Hello\", TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/StringTypeHandlerTest.java", "stars": "15", "class": {"name": "StringTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    // Unnecessary  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/StringTypeHandlerTest.java", "stars": "15", "class": {"name": "StringTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getString(1)).thenReturn(\"Hello\");    assertEquals(\"Hello\", TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/StringTypeHandlerTest.java", "stars": "15", "class": {"name": "StringTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    // Unnecessary  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/StringTypeHandlerTest.java", "stars": "15", "class": {"name": "StringTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getString(1)).thenReturn(\"Hello\");    assertEquals(\"Hello\", TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/StringTypeHandlerTest.java", "stars": "15", "class": {"name": "StringTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    // Unnecessary  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/StringTypeHandlerTest.java", "stars": "15", "class": {"name": "StringTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "aceita", "params": ["TentativaPagamento"], "throws": null, "modifiers": ["public"], "return_type": "Optional<Pagador>", "snippet": "\tpublic Optional<Pagador> aceita(@NotNull TentativaPagamento tentativaPagamento) {\t\tTipoPagamento tipoPagamento = tentativaPagamento.getTipoPagamento();\t\t\t\tif(tipoPagamento.aceitaOnline && !tipoPagamento.equals(TipoPagamento.elo)) {\t\t\treturn Optional.of(new GatewayRede(autorizadorDeTransacoes,tentativaPagamento));\t\t}\t\t\t\treturn Optional.empty();\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/processadores/ProcessadorRede.java", "stars": "9", "class": {"name": "ProcessadorRede", "extends": null, "implements": ["ProcessadorPagamento"], "modifiers": ["public"]}}, {"method_name": "evaluate", "params": ["Record", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Record", "snippet": "    public Record evaluate(Record record, Object... paras) {        int columnIndex;        String padType;        int length;        String padString;        try {            if (paras.length != 4) {                throw new RuntimeException(\"dx_pad paras must be 4\");            }            columnIndex = (Integer) paras[0];            padType = (String) paras[1];            length = Integer.valueOf((String) paras[2]);            padString = (String) paras[3];        } catch (Exception e) {            throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_ILLEGAL_PARAMETER, \"paras:\" + Arrays.asList(paras).toString() + \" => \" + e.getMessage());        }        Column column = record.getColumn(columnIndex);        try {            String oriValue = column.asString();            //\u5982\u679c\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u4f5c\u4e3a\u7a7a\u5b57\u7b26\u4e32\u5904\u7406            if (oriValue == null) {                oriValue = \"\";            }            String newValue;            if (!padType.equalsIgnoreCase(\"r\") && !padType.equalsIgnoreCase(\"l\")) {                throw new RuntimeException(String.format(\"dx_pad first para(%s) support l or r\", padType));            }            if (length <= oriValue.length()) {                newValue = oriValue.substring(0, length);            } else {                newValue = doPad(padType, oriValue, length, padString);            }            record.setColumn(columnIndex, new StringColumn(newValue));        } catch (Exception e) {            throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_RUN_EXCEPTION, e.getMessage(), e);        }        return record;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/PadTransformer.java", "stars": "23", "class": {"name": "PadTransformer", "extends": "Transformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "doPad", "params": ["String", "String", "int", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String doPad(String padType, String oriValue, int length, String padString) {        String finalPad = \"\";        int NeedLength = length - oriValue.length();        while (NeedLength > 0) {            if (NeedLength >= padString.length()) {                finalPad += padString;                NeedLength -= padString.length();            } else {                finalPad += padString.substring(0, NeedLength);                NeedLength = 0;            }        }        if (padType.equalsIgnoreCase(\"l\")) {            return finalPad + oriValue;        } else {            return oriValue + finalPad;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/PadTransformer.java", "stars": "23", "class": {"name": "PadTransformer", "extends": "Transformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMd5Digest", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "MessageDigest", "snippet": "  private static MessageDigest getMd5Digest() {    MessageDigest digest = null;    try {      digest = MessageDigest.getInstance(\"MD5\");    } catch (final NoSuchAlgorithmException e) {      // Should never get here.    }    return digest;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Md5Hasher.java", "stars": "18", "class": {"name": "Md5Hasher", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "md5Hash", "params": ["File"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "byte", "snippet": "  public static byte[] md5Hash(final File file) throws IOException {    final MessageDigest digest = getMd5Digest();    final FileInputStream fStream = new FileInputStream(file);    final BufferedInputStream bStream = new BufferedInputStream(fStream);    final DigestInputStream blobStream = new DigestInputStream(bStream, digest);    final byte[] buffer = new byte[BYTE_BUFFER_SIZE];    int num = 0;    do {      num = blobStream.read(buffer);    } while (num > 0);    bStream.close();    return digest.digest();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/Md5Hasher.java", "stars": "18", "class": {"name": "Md5Hasher", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getCid() {        return cid;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/RelationShipDomain.java", "stars": "2", "class": {"name": "RelationShipDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCid", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCid(Integer cid) {        this.cid = cid;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/RelationShipDomain.java", "stars": "2", "class": {"name": "RelationShipDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getMid() {        return mid;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/RelationShipDomain.java", "stars": "2", "class": {"name": "RelationShipDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMid", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMid(Integer mid) {        this.mid = mid;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/RelationShipDomain.java", "stars": "2", "class": {"name": "RelationShipDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUrl(String magnetUrl) {        if(magnetUrl == null) {            mCanOpen = false;            return;        }        Uri uri = Uri.parse(magnetUrl);        List<Intent> filteredShareIntents = new ArrayList<>();        Intent torrentIntent = new Intent(Intent.ACTION_VIEW, uri);        List<ResolveInfo> resolveInfoList = mContext.getPackageManager().queryIntentActivities(torrentIntent, PackageManager.MATCH_DEFAULT_ONLY);        for (ResolveInfo info : resolveInfoList) {            if (!info.activityInfo.packageName.contains(\"pct.droid\")) {     // Black listing the app its self                Intent targetedShare = new Intent(Intent.ACTION_VIEW, uri);                targetedShare.setPackage(info.activityInfo.packageName);                filteredShareIntents.add(targetedShare);            }        }        if (filteredShareIntents.size() > 0){            Intent filteredIntent = Intent.createChooser(filteredShareIntents.remove(0), mContext.getString(R.string.open_with));            filteredIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, filteredShareIntents.toArray(new Parcelable[filteredShareIntents.size()]));            mOpenIntent = filteredIntent;            mCanOpen = true;        } else {            mCanOpen = false;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/torrent/Magnet.java", "stars": "4", "class": {"name": "Magnet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "open", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void open(Activity activity) {        if(mOpenIntent != null) {            activity.startActivity(mOpenIntent);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/torrent/Magnet.java", "stars": "4", "class": {"name": "Magnet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "canOpen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean canOpen() {        return mCanOpen;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/torrent/Magnet.java", "stars": "4", "class": {"name": "Magnet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "String", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType)      throws SQLException {    SQLXML sqlxml = ps.getConnection().createSQLXML();    try {      sqlxml.setString(parameter);      ps.setSQLXML(i, sqlxml);    } finally {      sqlxml.free();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/SqlxmlTypeHandler.java", "stars": "15", "class": {"name": "SqlxmlTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getNullableResult(ResultSet rs, String columnName) throws SQLException {    return sqlxmlToString(rs.getSQLXML(columnName));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/SqlxmlTypeHandler.java", "stars": "15", "class": {"name": "SqlxmlTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    return sqlxmlToString(rs.getSQLXML(columnIndex));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/SqlxmlTypeHandler.java", "stars": "15", "class": {"name": "SqlxmlTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    return sqlxmlToString(cs.getSQLXML(columnIndex));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/SqlxmlTypeHandler.java", "stars": "15", "class": {"name": "SqlxmlTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "sqlxmlToString", "params": ["SQLXML"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String sqlxmlToString(SQLXML sqlxml) throws SQLException {    if (sqlxml == null) {      return null;    }    try {      return sqlxml.getString();    } finally {      sqlxml.free();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/SqlxmlTypeHandler.java", "stars": "15", "class": {"name": "SqlxmlTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/resultmapwithassociationstest/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/resultmapwithassociationstest/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/resultmapwithassociationstest/ResultMapWithAssociationsTest.java", "stars": "15", "class": {"name": "ResultMapWithAssociationsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFindAllPersonRecordsWithAssociatedAddressRecord", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFindAllPersonRecordsWithAssociatedAddressRecord() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<Person> resultList = mapper.findAll();      Assertions.assertEquals(3, resultList.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/resultmapwithassociationstest/ResultMapWithAssociationsTest.java", "stars": "15", "class": {"name": "ResultMapWithAssociationsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        return inflater.inflate(R.layout.fragment_symtom, container, false);    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/SymtomFragment.java", "stars": "2", "class": {"name": "SymtomFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["CloneNotSupportedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws CloneNotSupportedException {        Author author = new Author(\"\u9694\u58c1\u8001\u738b\");        Book book = new Book(author,\"\u300a\u9694\u58c1\u8001\u738b\u5e26\u4f60\u5b66Java\u300b\");        System.out.println(\"\u521d\u59cb\u5316\u7684\u4e66\uff1a\" + book);        for(int i = 1; i <= 10; i++){            System.out.println(\"\u5370\u5237\u7b2c\" + i + \"\u672c\u4e66\");            Object clone = book.clone();            System.out.println(clone);        }    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/prototype/clone/Printing.java", "stars": "2", "class": {"name": "Printing", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        //\u521b\u5efaFileInputStream\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u7ed1\u5b9a\u8981\u8bfb\u53d6\u7684\u6570\u636e\u6e90        FileInputStream fis = new FileInputStream(\"09_IOAndProperties\\\\b.txt\");        //\u4f7f\u7528FileInputStream\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5read\u8bfb\u53d6\u6587\u4ef6        //int read(byte[] b) \u4ece\u8f93\u5165\u6d41\u4e2d\u8bfb\u53d6\u4e00\u5b9a\u6570\u91cf\u7684\u5b57\u8282\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u7f13\u51b2\u533a\u6570\u7ec4 b \u4e2d\u3002        /*byte[] bytes = new byte[2];        int len = fis.read(bytes);        System.out.println(len);//2        //System.out.println(Arrays.toString(bytes));//[65, 66]        System.out.println(new String(bytes));//AB        len = fis.read(bytes);        System.out.println(len);//2        System.out.println(new String(bytes));//CD        len = fis.read(bytes);        System.out.println(len);//1        System.out.println(new String(bytes));//ED        len = fis.read(bytes);        System.out.println(len);//-1        System.out.println(new String(bytes));//ED*/        /*            \u53d1\u73b0\u4ee5\u4e0a\u8bfb\u53d6\u65f6\u4e00\u4e2a\u91cd\u590d\u7684\u8fc7\u7a0b,\u53ef\u4ee5\u4f7f\u7528\u5faa\u73af\u4f18\u5316            \u4e0d\u77e5\u9053\u6587\u4ef6\u4e2d\u6709\u591a\u5c11\u5b57\u8282,\u6240\u4ee5\u4f7f\u7528while\u5faa\u73af            while\u5faa\u73af\u7ed3\u675f\u7684\u6761\u4ef6,\u8bfb\u53d6\u5230-1\u7ed3\u675f         */        byte[] bytes = new byte[1024];//\u5b58\u50a8\u8bfb\u53d6\u5230\u7684\u591a\u4e2a\u5b57\u8282        int len = 0; //\u8bb0\u5f55\u6bcf\u6b21\u8bfb\u53d6\u7684\u6709\u6548\u5b57\u8282\u4e2a\u6570        while((len = fis.read(bytes))!=-1){            //String(byte[] bytes, int offset, int length) \u628a\u5b57\u8282\u6570\u7ec4\u7684\u4e00\u90e8\u5206\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 offset:\u6570\u7ec4\u7684\u5f00\u59cb\u7d22\u5f15 length:\u8f6c\u6362\u7684\u5b57\u8282\u4e2a\u6570            System.out.println(new String(bytes,0,len));        }        //\u91ca\u653e\u8d44\u6e90        fis.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/20.%E3%80%90%E5%AD%97%E8%8A%82%E6%B5%81%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/09_IOAndProperties/src/com/itheima/demo02/InputStream/Demo02InputStream.java", "stars": "2", "class": {"name": "Demo02InputStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["ServletConfig"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void init(final ServletConfig config) throws ServletException {    super.init(config);    final AzkabanWebServer server = (AzkabanWebServer) getApplication();    this.triggerManager = server.getTriggerManager();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/TriggerManagerServlet.java", "stars": "18", "class": {"name": "TriggerManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleGet", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void handleGet(final HttpServletRequest req, final HttpServletResponse resp,      final Session session) throws ServletException, IOException {    if (hasParam(req, \"ajax\")) {      handleAJAXAction(req, resp, session);    } else {      handleGetAllSchedules(req, resp, session);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/TriggerManagerServlet.java", "stars": "18", "class": {"name": "TriggerManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleAJAXAction", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleAJAXAction(final HttpServletRequest req,      final HttpServletResponse resp, final Session session) throws ServletException,      IOException {    final HashMap<String, Object> ret = new HashMap<>();    final String ajaxName = getParam(req, \"ajax\");    try {      if (ajaxName.equals(\"expireTrigger\")) {        ajaxExpireTrigger(req, ret, session.getUser());      }    } catch (final Exception e) {      ret.put(\"error\", e.getMessage());    }    if (ret != null) {      this.writeJSON(resp, ret);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/TriggerManagerServlet.java", "stars": "18", "class": {"name": "TriggerManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleGetAllSchedules", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleGetAllSchedules(final HttpServletRequest req,      final HttpServletResponse resp, final Session session) throws ServletException,      IOException {    final Page page =        newPage(req, resp, session,            \"azkaban/webapp/servlet/velocity/triggerspage.vm\");    final List<Trigger> triggers = this.triggerManager.getTriggers();    String languageType = LoadJsonUtils.getLanguageType();    page.add(\"currentlangType\", languageType);    page.add(\"triggers\", triggers);    page.render();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/TriggerManagerServlet.java", "stars": "18", "class": {"name": "TriggerManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handlePost", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void handlePost(final HttpServletRequest req, final HttpServletResponse resp,      final Session session) throws ServletException, IOException {    if (hasParam(req, \"ajax\")) {      handleAJAXAction(req, resp, session);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/TriggerManagerServlet.java", "stars": "18", "class": {"name": "TriggerManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxExpireTrigger", "params": ["HttpServletRequest", "Map<String,Object>", "User"], "throws": ["ServletException", "TriggerManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void ajaxExpireTrigger(final HttpServletRequest req,      final Map<String, Object> ret, final User user) throws ServletException,      TriggerManagerException {    final int triggerId = getIntParam(req, \"triggerId\");    final Trigger t = this.triggerManager.getTrigger(triggerId);    if (t == null) {      ret.put(\"message\", \"Trigger with ID \" + triggerId + \" does not exist\");      ret.put(\"status\", \"error\");      return;    }    this.triggerManager.expireTrigger(triggerId);    logger.info(\"User '\" + user.getUserId() + \" has removed trigger \"        + t.getDescription());    ret.put(\"status\", \"success\");    ret.put(\"message\", \"trigger \" + triggerId + \" removed from Schedules.\");    return;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/TriggerManagerServlet.java", "stars": "18", "class": {"name": "TriggerManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "salvar", "params": ["Produto"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void salvar(Produto produto) {        produtoDao.salvar(produto);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/ProdutoServiceImpl.java", "stars": "2", "class": {"name": "ProdutoServiceImpl", "extends": null, "implements": ["ProdutoService"], "modifiers": ["public"]}}, {"method_name": "salvarNaTabela", "params": ["Produto", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void salvarNaTabela(Produto produto, Integer tabelaId) {        produtoDao.salvarNaTabela(produto, tabelaId);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/ProdutoServiceImpl.java", "stars": "2", "class": {"name": "ProdutoServiceImpl", "extends": null, "implements": ["ProdutoService"], "modifiers": ["public"]}}, {"method_name": "recuperarPorTabela", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "List<Produto>", "snippet": "    public List<Produto> recuperarPorTabela(Integer tabelaId) {        return produtoDao.recuperarPorTabela(tabelaId);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/ProdutoServiceImpl.java", "stars": "2", "class": {"name": "ProdutoServiceImpl", "extends": null, "implements": ["ProdutoService"], "modifiers": ["public"]}}, {"method_name": "recuperar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Produto>", "snippet": "    public List<Produto> recuperar() {        return produtoDao.recuperar();    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/ProdutoServiceImpl.java", "stars": "2", "class": {"name": "ProdutoServiceImpl", "extends": null, "implements": ["ProdutoService"], "modifiers": ["public"]}}, {"method_name": "recuperarPorId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Produto", "snippet": "    public Produto recuperarPorId(Integer produtoId) {        return produtoDao.recuperarPorId(produtoId);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/ProdutoServiceImpl.java", "stars": "2", "class": {"name": "ProdutoServiceImpl", "extends": null, "implements": ["ProdutoService"], "modifiers": ["public"]}}, {"method_name": "recuperarPorTabelaIdEProdutoId", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Produto", "snippet": "    public Produto recuperarPorTabelaIdEProdutoId(Integer tabelaId, Integer produtoId) {        return produtoDao.recuperarPorTabelaIdEProdutoId(tabelaId, produtoId);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/ProdutoServiceImpl.java", "stars": "2", "class": {"name": "ProdutoServiceImpl", "extends": null, "implements": ["ProdutoService"], "modifiers": ["public"]}}, {"method_name": "atualizar", "params": ["Produto"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void atualizar(Produto produto) {        produtoDao.atualizar(produto);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/ProdutoServiceImpl.java", "stars": "2", "class": {"name": "ProdutoServiceImpl", "extends": null, "implements": ["ProdutoService"], "modifiers": ["public"]}}, {"method_name": "atualizarNaTabela", "params": ["Produto", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void atualizarNaTabela(Produto produto, Integer tabelaId) {        produtoDao.atualizarNaTabela(produto, tabelaId);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/ProdutoServiceImpl.java", "stars": "2", "class": {"name": "ProdutoServiceImpl", "extends": null, "implements": ["ProdutoService"], "modifiers": ["public"]}}, {"method_name": "excluir", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void excluir(Integer produtoId) {        produtoDao.excluir(produtoId);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/ProdutoServiceImpl.java", "stars": "2", "class": {"name": "ProdutoServiceImpl", "extends": null, "implements": ["ProdutoService"], "modifiers": ["public"]}}, {"method_name": "excluirNaTabela", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void excluirNaTabela(Integer tabelaId, Integer produtoId) {        produtoDao.excluir(recuperarPorTabelaIdEProdutoId(tabelaId, produtoId).getId());    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/ProdutoServiceImpl.java", "stars": "2", "class": {"name": "ProdutoServiceImpl", "extends": null, "implements": ["ProdutoService"], "modifiers": ["public"]}}, {"method_name": "setLocal", "params": ["int", "AbstractValue"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setLocal(int index, AbstractValue value) {\t\tif (value != UninitializedValue.UNINITIALIZED_VALUE) {\t\t\t// Check against reserved slots used by double and long locals\t\t\tif(reservedSlots.contains(index))\t\t\t\tthrow new IllegalStateException(\"Cannot set local[\" + index + \"] \" +\t\t\t\t\t\t\"since it is reserved by a double/long (which reserves two slots)\");\t\t\tif(value.getValue() instanceof Double || value.getValue() instanceof Long)\t\t\t\treservedSlots.add(index + 1);\t\t}\t\t// Update local\t\tsuper.setLocal(index, value);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimFrame.java", "stars": "12", "class": {"name": "SimFrame", "extends": "Frame", "implements": null, "modifiers": ["public"]}}, {"method_name": "merge", "params": ["Frame<AbstractValue>", "Interpreter<AbstractValue>"], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean merge(Frame<? extends AbstractValue> frame, Interpreter<AbstractValue> interpreter) throws AnalyzerException {\t\treturn super.merge(frame, interpreter);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimFrame.java", "stars": "12", "class": {"name": "SimFrame", "extends": "Frame", "implements": null, "modifiers": ["public"]}}, {"method_name": "merge", "params": ["Frame<AbstractValue>", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean merge(Frame<? extends AbstractValue> frame, boolean[] localsUsed) {\t\treturn super.merge(frame, localsUsed);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimFrame.java", "stars": "12", "class": {"name": "SimFrame", "extends": "Frame", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tRSocketServer.create(SocketAcceptor.forRequestStream(p -> Flux.interval(Duration.ofSeconds(1))\t\t                                                              .log()\t\t                                                              .map(i -> DefaultPayload.create(\"Hello \" + i))))\t\t             .bind(TcpServerTransport.create(\"localhost\", 8000))\t\t             .subscribe();\t\tAtomicInteger totalRetries = new AtomicInteger();\t\tMono<RSocket> connectionMono = RSocketConnector\t\t\t\t.create()\t\t\t\t.reconnect(\t\t\t\t\tRetry.backoff(Long.MAX_VALUE, Duration.ofMillis(100))\t\t\t\t\t\t .maxBackoff(Duration.ofMinutes(1))\t\t\t\t\t     .doBeforeRetry(rs -> LOG.error(\"Retrying to connect, failed with signal {}\", rs))\t\t\t\t\t\t .filter(t -> totalRetries.getAndIncrement() < 10)\t\t\t\t)\t\t\t\t.connect(TcpClientTransport.create(\"localhost\", 8001));\t\tconnectionMono\t\t\t\t.flatMap(rsocket -> {\t\t\t\t\trsocket.requestStream(EmptyPayload.INSTANCE)\t\t\t\t\t       .subscribe();\t\t\t\t\treturn rsocket.onClose().doOnError(t -> LOG.error(\"Connection \" +\t\t\t\t\t\t\t\"failed with error\", t));\t\t\t\t})\t\t\t\t.retryWhen(Retry.indefinitely().filter(t -> totalRetries.getAndIncrement() < 10))\t\t\t\t.block();\t\tLOG.info(\"Terminated\");\t}", "url": "https://raw.githubusercontent.com/OlegDokuka/rsocket-reconnect-demo/master/src/main/java/io/rsocket/examples/ReconnectExampleMain.java", "stars": "5", "class": {"name": "ReconnectExampleMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new BlockCustomFlower());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.DECORATIONS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/OrangeAmaranthBlock.java", "stars": "2", "class": {"name": "OrangeAmaranthBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/OrangeAmaranthBlock.java", "stars": "2", "class": {"name": "OrangeAmaranthBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["FMLCommonSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init(FMLCommonSetupEvent event) {\t\tFlowersFeature feature = new DefaultFlowersFeature(BlockClusterFeatureConfig::func_227300_a_) {\t\t\t@Override\t\t\tpublic BlockState getFlowerToPlace(Random random, BlockPos bp, BlockClusterFeatureConfig fc) {\t\t\t\treturn block.getDefaultState();\t\t\t}\t\t\t@Override\t\t\tpublic boolean place(IWorld world, ChunkGenerator generator, Random random, BlockPos pos, BlockClusterFeatureConfig config) {\t\t\t\tDimensionType dimensionType = world.getDimension().getType();\t\t\t\tboolean dimensionCriteria = false;\t\t\t\tif (dimensionType == DimensionType.OVERWORLD)\t\t\t\t\tdimensionCriteria = true;\t\t\t\tif (!dimensionCriteria)\t\t\t\t\treturn false;\t\t\t\treturn super.place(world, generator, random, pos, config);\t\t\t}\t\t};\t\tfor (Biome biome : ForgeRegistries.BIOMES.getValues()) {\t\t\tboolean biomeCriteria = false;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"jungle\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"jungle_hills\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"jungle_edge\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"modified_jungle\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"modified_jungle_edge\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (!biomeCriteria)\t\t\t\tcontinue;\t\t\tbiome.addFeature(GenerationStage.Decoration.VEGETAL_DECORATION,\t\t\t\t\tfeature.withConfiguration(\t\t\t\t\t\t\t(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(block.getDefaultState()), new SimpleBlockPlacer()))\t\t\t\t\t\t\t\t\t.tries(64).build())\t\t\t\t\t\t\t.withPlacement(Placement.COUNT_HEIGHTMAP_32.configure(new FrequencyConfig(40))));\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/OrangeAmaranthBlock.java", "stars": "2", "class": {"name": "OrangeAmaranthBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(OrangeAmaranthBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/OrangeAmaranthBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(OrangeAmaranthBlock.block, (int) (1)));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/OrangeAmaranthBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPlantType", "params": ["IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "PlantType", "snippet": "\t\tpublic PlantType getPlantType(IBlockReader world, BlockPos pos) {\t\t\treturn PlantType.Plains;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/OrangeAmaranthBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getResultMapping", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ResultMapping", "snippet": "  public ResultMapping getResultMapping() {    return resultMapping;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/Discriminator.java", "stars": "15", "class": {"name": "Discriminator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDiscriminatorMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "  public Map<String, String> getDiscriminatorMap() {    return discriminatorMap;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/Discriminator.java", "stars": "15", "class": {"name": "Discriminator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMapIdFor", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getMapIdFor(String s) {    return discriminatorMap.get(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/Discriminator.java", "stars": "15", "class": {"name": "Discriminator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Discriminator", "snippet": "    public Discriminator build() {      assert discriminator.resultMapping != null;      assert discriminator.discriminatorMap != null;      assert !discriminator.discriminatorMap.isEmpty();      //lock down map      discriminator.discriminatorMap = Collections.unmodifiableMap(discriminator.discriminatorMap);      return discriminator;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/Discriminator.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "intercept", "params": ["Invocation"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object intercept(Invocation invocation) throws Throwable {        StatementHandler statementHandler = (StatementHandler) invocation.getTarget();        MetaObject metaStatementHandler = MetaObject.forObject(statementHandler, DEFAULT_OBJECT_FACTORY,                DEFAULT_OBJECT_WRAPPER_FACTORY, REFLECTOR_FACTORY);        RowBounds rowBounds = (RowBounds) metaStatementHandler.getValue(\"delegate.rowBounds\");        while (metaStatementHandler.hasGetter(\"h\")) {            Object object = metaStatementHandler.getValue(\"h\");            metaStatementHandler = MetaObject.forObject(object, DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY, REFLECTOR_FACTORY);        }        while (metaStatementHandler.hasGetter(\"target\")) {            Object object = metaStatementHandler.getValue(\"target\");            metaStatementHandler = MetaObject.forObject(object, DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY, REFLECTOR_FACTORY);        }        Configuration configuration = (Configuration) metaStatementHandler.getValue(\"delegate.configuration\");        String pageSqlId = null;        if (configuration != null) {            pageSqlId = configuration.getVariables().getProperty(\"pageSqlId\");        }        if (null == pageSqlId || \"\".equals(pageSqlId)) {            pageSqlId = DEFAULT_PAGE_SQL_ID;        }        MappedStatement mappedStatement = (MappedStatement)                metaStatementHandler.getValue(\"delegate.mappedStatement\");        if (mappedStatement.getId().matches(pageSqlId)) {            BoundSql boundSql = (BoundSql) metaStatementHandler.getValue(\"delegate.boundSql\");            Object parameterObject = boundSql.getParameterObject();            if (parameterObject == null) {                throw new NullPointerException(\"parameterObject is null!\");            } else {                String sql = boundSql.getSql();                // Reconstruct sql                String pageSql = sql + \" LIMIT \" + rowBounds.getOffset() + \",\" + rowBounds.getLimit();                metaStatementHandler.setValue(\"delegate.boundSql.sql\", pageSql);                metaStatementHandler.setValue(\"delegate.rowBounds.offset\", RowBounds.NO_ROW_OFFSET);                metaStatementHandler.setValue(\"delegate.rowBounds.limit\", RowBounds.NO_ROW_LIMIT);            }        }        return invocation.proceed();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/mybatis/plugin/PaginationInterceptor.java", "stars": "23", "class": {"name": "PaginationInterceptor", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "plugin", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object plugin(Object target) {        return Plugin.wrap(target, this);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/mybatis/plugin/PaginationInterceptor.java", "stars": "23", "class": {"name": "PaginationInterceptor", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "setProperties", "params": ["Properties"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProperties(Properties properties) {        //To change body of implemented methods use File | Settings | File Templates.    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/mybatis/plugin/PaginationInterceptor.java", "stars": "23", "class": {"name": "PaginationInterceptor", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "addCorsMappings", "params": ["CorsRegistry"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addCorsMappings(CorsRegistry registry) {        //\u6240\u6709\u8bf7\u6c42\u90fd\u5141\u8bb8\u8de8\u57df\uff0c\u4f7f\u7528\u8fd9\u79cd\u914d\u7f6e\u65b9\u6cd5\u5c31\u4e0d\u80fd\u5728 interceptor \u4e2d\u518d\u914d\u7f6e header \u4e86        registry.addMapping(\"/**\")                .allowCredentials(true)                .allowedOrigins(\"http://localhost:8080\")                .allowedMethods(\"POST\", \"GET\", \"PUT\", \"OPTIONS\", \"DELETE\")                .allowedHeaders(\"*\")                .maxAge(3600);    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/config/MyWebConfigurer.java", "stars": "2", "class": {"name": "MyWebConfigurer", "extends": null, "implements": ["WebMvcConfigurer"], "modifiers": ["public"]}}, {"method_name": "addResourceHandlers", "params": ["ResourceHandlerRegistry"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addResourceHandlers(ResourceHandlerRegistry registry) {        registry.addResourceHandler(\"/api/file/**\").addResourceLocations(\"file:\" + \"d:/work/img/\");    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/config/MyWebConfigurer.java", "stars": "2", "class": {"name": "MyWebConfigurer", "extends": null, "implements": ["WebMvcConfigurer"], "modifiers": ["public"]}}, {"method_name": "addInterceptors", "params": ["InterceptorRegistry"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addInterceptors(InterceptorRegistry registry) {        registry.addInterceptor(new LoginInterceptor())                .addPathPatterns(\"/**\")                .excludePathPatterns(\"/api/login\")                .excludePathPatterns(\"/api/covers\")                .excludePathPatterns(\"/api/logout\");    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/config/MyWebConfigurer.java", "stars": "2", "class": {"name": "MyWebConfigurer", "extends": null, "implements": ["WebMvcConfigurer"], "modifiers": ["public"]}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void load() {        super.load();        register(new Watermark(), new ArrayList(), new TargetHUD(), new Speed());        getRegistry().values().forEach(HudComponent::init);        loadComponents();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/ComponentManager.java", "stars": "12", "class": {"name": "ComponentManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "unload", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unload() {        saveComponents();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/ComponentManager.java", "stars": "12", "class": {"name": "ComponentManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "register", "params": ["HudComponent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void register(HudComponent... components) {        for (HudComponent component : components) {            if (component.getLabel() != null)                include(component.getLabel().toLowerCase(), component);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/ComponentManager.java", "stars": "12", "class": {"name": "ComponentManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "saveComponents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveComponents() {        if (getValues().isEmpty()) {            directory.delete();        }        File[] files = directory.listFiles();        if (!directory.exists()) {            directory.mkdir();        } else if (files != null) {            for (File file : files) {                file.delete();            }        }        getValues().forEach(comp -> {            File file = new File(directory, comp.getLabel() + \".json\");            JsonObject node = new JsonObject();            comp.save(node);            if (node.entrySet().isEmpty()) {                return;            }            try {                file.createNewFile();            } catch (IOException e) {                return;            }            try (Writer writer = new FileWriter(file)) {                writer.write(new GsonBuilder().setPrettyPrinting().create().toJson(node));            } catch (IOException e) {                file.delete();            }        });        files = directory.listFiles();        if (files == null || files.length == 0) {            directory.delete();        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/ComponentManager.java", "stars": "12", "class": {"name": "ComponentManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadComponents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadComponents() {        getValues().forEach(comp -> {            final File file = new File(directory, comp.getLabel() + \".json\");            if (!file.exists()) {                return;            }            try (Reader reader = new FileReader(file)) {                JsonElement node = new JsonParser().parse(reader);                if (!node.isJsonObject()) {                    return;                }                comp.load(node.getAsJsonObject());            } catch (IOException e) {            }        });    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/ComponentManager.java", "stars": "12", "class": {"name": "ComponentManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "find", "params": ["Class<HudComponent>"], "throws": null, "modifiers": ["public"], "return_type": "HudComponent", "snippet": "    public HudComponent find(Class<? extends HudComponent> clazz) {        return getValues().stream().filter(m -> m.getClass() == clazz).findFirst().orElse(null);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/ComponentManager.java", "stars": "12", "class": {"name": "ComponentManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "find", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "HudComponent", "snippet": "    public HudComponent find(String find) {        HudComponent m = pull(find.replaceAll(\" \", \"\"));        if (pull(find.replaceAll(\" \", \"\")) != null)            m = pull(find.replaceAll(\" \", \"\"));        return m;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/ComponentManager.java", "stars": "12", "class": {"name": "ComponentManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "isSupportStream", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSupportStream(){            return false;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/spi/EnhancedReader.java", "stars": "23", "class": {"name": "Job", "extends": "AbstractJobPlugin", "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "transportMode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TransportMode", "snippet": "        public TransportMode transportMode(){            return TransportMode.OFFLINE;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/spi/EnhancedReader.java", "stars": "23", "class": {"name": "Job", "extends": "AbstractJobPlugin", "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "syncMetaData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MetaSchema", "snippet": "        public MetaSchema syncMetaData(){            return null;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/spi/EnhancedReader.java", "stars": "23", "class": {"name": "Job", "extends": "AbstractJobPlugin", "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "startRead", "params": ["ChannelOutput"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startRead(ChannelOutput outputStream){            //do nothing        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/spi/EnhancedReader.java", "stars": "23", "class": {"name": "Task", "extends": "AbstractTaskPlugin", "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "selectBlogsSql", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String selectBlogsSql() {    return new SQL() {      {        SELECT(\"*\");        FROM(\"BLOG\");      }    }.toString();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BoundBlogSql.java", "stars": "15", "class": {"name": "BoundBlogSql", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["int", "int"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void execute(int state, int action);    public abstract void press(ComponentStatus status);    public abstract void release(ComponentStatus status);}", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/KeyProcessor.java", "stars": "4", "class": {"name": "KeyProcessor", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "press", "params": ["ComponentStatus"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void press(ComponentStatus status);    public abstract void release(ComponentStatus status);}", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/KeyProcessor.java", "stars": "4", "class": {"name": "KeyProcessor", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "release", "params": ["ComponentStatus"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void release(ComponentStatus status);}", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/KeyProcessor.java", "stars": "4", "class": {"name": "KeyProcessor", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getFixedContext", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "Context", "snippet": "    public static Context getFixedContext(Context context) {        // \u535a\u5ba2\u5730\u5740\uff1ahttps://blog.csdn.net/qq_34206863/article/details/103660307        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {            // \u4e0d\u7528\u4e0a\u4e0b\u6587            return context.createConfigurationContext(new Configuration());        }        return context;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserView", "extends": "WebView", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUrl() {        String originalUrl = super.getOriginalUrl();        // \u907f\u514d\u5f00\u59cb\u65f6\u540c\u65f6\u52a0\u8f7d\u4e24\u4e2a\u5730\u5740\u800c\u5bfc\u81f4\u7684\u5d29\u6e83        if (originalUrl != null) {            return originalUrl;        }        return super.getUrl();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserView", "extends": "WebView", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResume() {        super.onResume();        resumeTimers();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserView", "extends": "WebView", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPause() {        super.onPause();        pauseTimers();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserView", "extends": "WebView", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        ((ViewGroup) getParent()).removeView(this);        //\u6e05\u9664\u5386\u53f2\u8bb0\u5f55        clearHistory();        //\u505c\u6b62\u52a0\u8f7d        stopLoading();        //\u52a0\u8f7d\u4e00\u4e2a\u7a7a\u767d\u9875        loadUrl(\"about:blank\");        setBrowserChromeClient(null);        setBrowserViewClient(null);        //\u79fb\u9664WebView\u6240\u6709\u7684View\u5bf9\u8c61        removeAllViews();        //\u9500\u6bc1\u6b64\u7684WebView\u7684\u5185\u90e8\u72b6\u6001        destroy();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserView", "extends": "WebView", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setWebViewClient", "params": ["WebViewClient"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWebViewClient(WebViewClient client) {        super.setWebViewClient(client);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserView", "extends": "WebView", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setBrowserViewClient", "params": ["BrowserViewClient"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBrowserViewClient(BrowserViewClient client) {        super.setWebViewClient(client);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserView", "extends": "WebView", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setWebChromeClient", "params": ["WebChromeClient"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWebChromeClient(WebChromeClient client) {        super.setWebChromeClient(client);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserView", "extends": "WebView", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setBrowserChromeClient", "params": ["BrowserChromeClient"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBrowserChromeClient(BrowserChromeClient client) {        super.setWebChromeClient(client);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserView", "extends": "WebView", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onReceivedError", "params": ["WebView", "WebResourceRequest", "WebResourceError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {            if (request.isForMainFrame()) {                onReceivedError(view,                        error.getErrorCode(), error.getDescription().toString(),                        request.getUrl().toString());            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserViewClient", "extends": "WebViewClient", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onReceivedError", "params": ["WebView", "int", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {            super.onReceivedError(view, errorCode, description, failingUrl);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserViewClient", "extends": "WebViewClient", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onReceivedSslError", "params": ["WebView", "SslErrorHandler", "SslError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {            // \u6ce8\u610f\u4e00\u5b9a\u8981\u53bb\u9664\u8fd9\u884c\u4ee3\u7801\uff0c\u5426\u5219\u8bbe\u7f6e\u65e0\u6548\u3002            //super.onReceivedSslError(view, handler, error);            // Android\u9ed8\u8ba4\u7684\u5904\u7406\u65b9\u5f0f            //handler.cancel();            // \u63a5\u53d7\u6240\u6709\u7f51\u7ad9\u7684\u8bc1\u4e66            handler.proceed();        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserViewClient", "extends": "WebViewClient", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "shouldOverrideUrlLoading", "params": ["WebView", "WebResourceRequest"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {            return shouldOverrideUrlLoading(view, request.getUrl().toString());        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserViewClient", "extends": "WebViewClient", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "shouldOverrideUrlLoading", "params": ["WebView", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean shouldOverrideUrlLoading(WebView view, final String url) {            String scheme = Uri.parse(url).getScheme();            if (scheme != null) {                scheme = scheme.toLowerCase();            }            if (\"http\".equalsIgnoreCase(scheme) || \"https\".equalsIgnoreCase(scheme)) {                view.loadUrl(url);            }            // \u5df2\u7ecf\u5904\u7406\u8be5\u94fe\u63a5\u8bf7\u6c42            return true;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserViewClient", "extends": "WebViewClient", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onShowCustomView", "params": ["View", "CustomViewCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onShowCustomView(View view, CustomViewCallback callback) {            if (mActivity == null) {                return;            }            mCustomViewCallback = callback;            // \u7ed9Activity\u8bbe\u7f6e\u6a2a\u5c4f            mActivity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);            if (mCustomView != null) {                mWebView.setVisibility(View.GONE);                mCustomViewCallback.onCustomViewHidden();                mWebView.setVisibility(View.VISIBLE);                return;            }            mWebView.addView(view);            mCustomView = view;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserChromeClient", "extends": "WebChromeClient", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onHideCustomView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onHideCustomView() {            // \u4e0d\u662f\u5168\u5c4f\u64ad\u653e\u72b6\u6001\u5c31\u4e0d\u5f80\u4e0b\u6267\u884c            if (mActivity == null || mCustomView == null || mCustomViewCallback == null) {                return;            }            // \u7ed9Activity\u8bbe\u7f6e\u7ad6\u5c4f            mActivity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);            mWebView.removeView(mCustomView);            mCustomView = null;            mWebView.setVisibility(View.GONE);            mCustomViewCallback.onCustomViewHidden();            mWebView.setVisibility(View.VISIBLE);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserChromeClient", "extends": "WebChromeClient", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onJsAlert", "params": ["WebView", "String", "String", "JsResult"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean onJsAlert(WebView view, String url, String message, final JsResult result) {            if (mActivity == null) {                return super.onJsAlert(view, url, message, result);            } else {                new ToastDialog.Builder(mActivity)                        .setType(ToastDialog.Type.WARN)                        .setMessage(message)                        .addOnDismissListener(dialog -> result.confirm())                        .show();                return true;            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserChromeClient", "extends": "WebChromeClient", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onJsConfirm", "params": ["WebView", "String", "String", "JsResult"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean onJsConfirm(WebView view, String url, String message, final JsResult result) {            if (mActivity == null) {                return super.onJsConfirm(view, url, message, result);            } else {                new MessageDialog.Builder(mActivity)                        .setMessage(message)                        .setCancelable(false)                        .setListener(new MessageDialog.OnListener() {                            @Override                            public void onConfirm(BaseDialog dialog) {                                result.confirm();                            }                            @Override                            public void onCancel(BaseDialog dialog) {                                result.cancel();                            }                        })                        .show();                return true;            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserChromeClient", "extends": "WebChromeClient", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onJsPrompt", "params": ["WebView", "String", "String", "String", "JsPromptResult"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, final JsPromptResult result) {            if (mActivity == null){                return super.onJsPrompt(view, url, message, defaultValue, result);            } else {                new InputDialog.Builder(mActivity)                        .setContent(defaultValue)                        .setHint(message)                        .setListener(new InputDialog.OnListener() {                            @Override                            public void onConfirm(BaseDialog dialog, String content) {                                result.confirm(content);                            }                            @Override                            public void onCancel(BaseDialog dialog) {                                result.cancel();                            }                        })                        .show();                return true;            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/BrowserView.java", "stars": "1", "class": {"name": "BrowserChromeClient", "extends": "WebChromeClient", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "copy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MessageCriteria", "snippet": "    public MessageCriteria copy() {        return new MessageCriteria(this);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/dto/MessageCriteria.java", "stars": "2", "class": {"name": "MessageCriteria", "extends": null, "implements": ["Serializable", "Criteria"], "modifiers": ["public"]}}, {"method_name": "copy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MessageTypeFilter", "snippet": "        public MessageTypeFilter copy() {            return new MessageTypeFilter(this);        }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/dto/MessageCriteria.java", "stars": "2", "class": {"name": "MessageTypeFilter", "extends": "Filter", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.home_grid);\t\ttextView = (TextView) findViewById(R.id.albumTitle);\t\tdataSectionView = (LinearLayout) this.findViewById(R.id.dataSection);\t\tframeView = (LinearLayout) AlbumActivity.this.findViewById(R.id.frame);\t\talbumList = (ArrayList<Album>) getIntent().getSerializableExtra(\"album\");\t\tgetData(albumList);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/AlbumActivity.java", "stars": "74", "class": {"name": "AlbumActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": ["List<Album>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void getData(final List<Album> albumList) {\t\tfinal GridView view = new GridView(this);\t\tgetGridProperties(view);\t\tview.setAdapter(new AlbumsAdapter(AlbumActivity.this, 0, albumList));\t\tString[] urls = new String[albumList.size()];\t\tfor (int i = 0; i < albumList.size(); i++) {\t\t\turls[i] = albumList.get(i).getCoverPhoto();\t\t}\t\tview.setOnItemClickListener(new OnItemClickListener() {\t\t\t@Override\t\t\tpublic void onItemClick(AdapterView<?> parent, View v, int position, long id) {\t\t\t\tshowPhoto(view, albumList, position);\t\t\t\tphotoListFlag = true;\t\t\t}\t\t});\t\tdataSectionView.addView(view);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/AlbumActivity.java", "stars": "74", "class": {"name": "AlbumActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "showPhoto", "params": ["GridView", "List<Album>", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void showPhoto(final GridView gridView, final List<Album> albumList, int position) {\t\tAlbum bean = albumList.get(position);\t\tLog.d(\"LifeView\", \"Album Clicked\");\t\tfinal List<Photo> photoList = bean.getPhotos();\t\tPhotoAdapter photoAdapter = new PhotoAdapter(AlbumActivity.this, 0, photoList);\t\tgridView.setAdapter(photoAdapter);\t\ttextView.setText(bean.getName());\t\tfinal ImageLoader imageLoader = new ImageLoader(AlbumActivity.this);\t\tgridView.setOnItemClickListener(new OnItemClickListener() {\t\t\t@Override\t\t\tpublic void onItemClick(AdapterView<?> parent, View v, int position, long id) {\t\t\t\tToast.makeText(AlbumActivity.this, \"Loading Photo..... Please Wait\", Toast.LENGTH_SHORT).show();\t\t\t\tLog.d(\"LifeView\", \"Photo Clicked\");\t\t\t\tdataSectionView.setVisibility(View.GONE);\t\t\t\tphotoListFlag = false;\t\t\t\tphotoFlag = true;\t\t\t\tPhoto photoBean = photoList.get(position);\t\t\t\tImageView picture = (ImageView) AlbumActivity.this.findViewById(R.id.picture);\t\t\t\tTextView pictureTitle = (TextView) AlbumActivity.this.findViewById(R.id.pictureTitle);\t\t\t\tframeView.setVisibility(View.VISIBLE);\t\t\t\timageLoader.DisplayImage(photoBean.getLargeImage(), picture);\t\t\t\tpictureTitle.setText(photoBean.getTitle());\t\t\t}\t\t});\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/AlbumActivity.java", "stars": "74", "class": {"name": "AlbumActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGridProperties", "params": ["GridView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void getGridProperties(GridView view) {\t\tview.setNumColumns(3);\t\tview.setVerticalSpacing(5);\t\tview.setScrollBarStyle(view.SCROLLBARS_OUTSIDE_OVERLAY);\t\tview.setScrollingCacheEnabled(false);\t\tview.setGravity(Gravity.TOP);\t\tview.setSelector(new ColorDrawable(Color.parseColor(\"#00000000\")));\t\tview.setClipChildren(true);\t\tview.setPadding(5, 5, 5, 5);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/AlbumActivity.java", "stars": "74", "class": {"name": "AlbumActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "clearView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clearView() {\t\tdataSectionView.removeAllViews();\t\tdataSectionView.invalidate();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/AlbumActivity.java", "stars": "74", "class": {"name": "AlbumActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onBackPressed() {\t\tif (photoListFlag) {\t\t\tclearView();\t\t\tgetData(albumList);\t\t\tphotoListFlag = false;\t\t} else if (photoFlag) {\t\t\tgetData(albumList);\t\t\tframeView.setVisibility(View.GONE);\t\t\tdataSectionView.setVisibility(View.VISIBLE);\t\t\tphotoFlag = false;\t\t\tphotoListFlag = true;\t\t} else\t\t\tfinish();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/AlbumActivity.java", "stars": "74", "class": {"name": "AlbumActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDestroy() {\t\tsuper.onDestroy();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/AlbumActivity.java", "stars": "74", "class": {"name": "AlbumActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "isSignalNode", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isSignalNode(String jobType){        String[] nodes = LinkisJobTypeConf.SIGNAL_NODES.getValue().split(\",\");        for(String node : nodes){            if (node.equalsIgnoreCase(jobType)) {                return true;            }        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/utils/LinkisJobTypeUtils.java", "stars": "18", "class": {"name": "LinkisJobTypeUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNbMasquesAdulteUsageUnique", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getNbMasquesAdulteUsageUnique() {        return getNombreOuZero(nbMasquesAdulteUsageUnique);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/application/ui/data/DistributionMasqueUI.java", "stars": "5", "class": {"name": "DistributionMasqueUI", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNbMasquesAdulteReutilisable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getNbMasquesAdulteReutilisable() {        return getNombreOuZero(nbMasquesAdulteReutilisable);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/application/ui/data/DistributionMasqueUI.java", "stars": "5", "class": {"name": "DistributionMasqueUI", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNbMasquesEnfantUsageUnique", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getNbMasquesEnfantUsageUnique() {        return getNombreOuZero(nbMasquesEnfantUsageUnique);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/application/ui/data/DistributionMasqueUI.java", "stars": "5", "class": {"name": "DistributionMasqueUI", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNbMasquesEnfantReutilisable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getNbMasquesEnfantReutilisable() {        return getNombreOuZero(nbMasquesEnfantReutilisable);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/application/ui/data/DistributionMasqueUI.java", "stars": "5", "class": {"name": "DistributionMasqueUI", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNombreOuZero", "params": ["Integer"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getNombreOuZero(Integer nombre) {        return nombre == null ? 0 : nombre;    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/application/ui/data/DistributionMasqueUI.java", "stars": "5", "class": {"name": "DistributionMasqueUI", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValue.java", "stars": "2", "class": {"name": "PmsProductAttributeValue", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValue.java", "stars": "2", "class": {"name": "PmsProductAttributeValue", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getProductId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getProductId() {        return productId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValue.java", "stars": "2", "class": {"name": "PmsProductAttributeValue", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setProductId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProductId(Long productId) {        this.productId = productId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValue.java", "stars": "2", "class": {"name": "PmsProductAttributeValue", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getProductAttributeId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getProductAttributeId() {        return productAttributeId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValue.java", "stars": "2", "class": {"name": "PmsProductAttributeValue", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setProductAttributeId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProductAttributeId(Long productAttributeId) {        this.productAttributeId = productAttributeId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValue.java", "stars": "2", "class": {"name": "PmsProductAttributeValue", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getValue() {        return value;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValue.java", "stars": "2", "class": {"name": "PmsProductAttributeValue", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setValue", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValue(String value) {        this.value = value;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValue.java", "stars": "2", "class": {"name": "PmsProductAttributeValue", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        StringBuilder sb = new StringBuilder();        sb.append(getClass().getSimpleName());        sb.append(\" [\");        sb.append(\"Hash = \").append(hashCode());        sb.append(\", id=\").append(id);        sb.append(\", productId=\").append(productId);        sb.append(\", productAttributeId=\").append(productAttributeId);        sb.append(\", value=\").append(value);        sb.append(\", serialVersionUID=\").append(serialVersionUID);        sb.append(\"]\");        return sb.toString();    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeValue.java", "stars": "2", "class": {"name": "PmsProductAttributeValue", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        subComponents.forEach(Component::init);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "moved", "params": ["float", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void moved(float x, float y) {        this.x = x + offsetx;        this.y = y + offsety;        subComponents.forEach(subComponents->subComponents.moved(getX(),getY()));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onGuiClosed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onGuiClosed() {        subComponents.forEach(subComponents->subComponents.onGuiClosed());    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "drawScreen", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawScreen(int mx, int my, float partialTicks) {        subComponents.forEach(subComponents->subComponents.drawScreen(mx,my,partialTicks));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mouseClicked", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mouseClicked(int mx, int my, int button) {        subComponents.forEach(subComponents->subComponents.mouseClicked(mx,my,button));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mouseReleased", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mouseReleased(int mx, int my, int button) {        subComponents.forEach(subComponents->subComponents.mouseReleased(mx,my,button));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "keyTyped", "params": ["char", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void keyTyped(char character,int key) {        subComponents.forEach(subComponents->subComponents.keyTyped(character,key));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getX", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getX() {        return x;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setX", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setX(float x) {        this.x = x;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getY", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getY() {        return y;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setY", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setY(float y) {        this.y = y;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getW", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getW() {        return w;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setW", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setW(float w) {        this.w = w;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getH", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getH() {        return h;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setH", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setH(float h) {        this.h = h;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLabel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLabel() {        return label;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLabel", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLabel(String label) {        this.label = label;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOffsetx", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getOffsetx() {        return offsetx;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOffsetx", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOffsetx(float offsetx) {        this.offsetx = offsetx;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOffsety", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getOffsety() {        return offsety;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOffsety", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOffsety(float offsety) {        this.offsety = offsety;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubComponents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Component>", "snippet": "    public ArrayList<Component> getSubComponents() {        return subComponents;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/Component.java", "stars": "12", "class": {"name": "Component", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getfileContent", "params": ["Project", "int"], "throws": null, "modifiers": ["static"], "return_type": "String", "snippet": "    static String getfileContent(Project project, int index) {        File file = new File(Settings.getPath(project, index));        try {            return FileUtils.readFileToString(file, \"UTF-8\");        } catch (IOException e) {            return null;        }    }", "url": "https://raw.githubusercontent.com/Norbert515/flutter_localizer/master/src/JSONModifier.java", "stars": "23", "class": {"name": "JSONModifier", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveFile", "params": ["Project", "String", "int"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "    static void saveFile(Project project, String data, int index) {        File file = new File(Settings.getPath(project, index));        try {            FileUtils.write(file, data, \"UTF-8\");        } catch (IOException ignored) {        }    }", "url": "https://raw.githubusercontent.com/Norbert515/flutter_localizer/master/src/JSONModifier.java", "stars": "23", "class": {"name": "JSONModifier", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addTranslation", "params": ["Project", "String", "String", "int"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "    static void addTranslation(Project project, String key, String value, int index) {        Gson gson = new GsonBuilder().setPrettyPrinting().create();        String fileContent = getfileContent(project, index);        if(fileContent == null) {            return;        }        Map jsonMap = gson.fromJson(fileContent, Map.class);        if(jsonMap == null) {            jsonMap = new HashMap();        }        jsonMap.put(key, value);        String json = gson.toJson(jsonMap);        saveFile(project, json, index);    }", "url": "https://raw.githubusercontent.com/Norbert515/flutter_localizer/master/src/JSONModifier.java", "stars": "23", "class": {"name": "JSONModifier", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "int", "snippet": "    public abstract int getCount();    public abstract IPagerTitleView getTitleView(Context context, int index);    public abstract IPagerIndicator getIndicator(Context context);    public float getTitleWeight(Context context, int index) {        return 1;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/abs/CommonNavigatorAdapter.java", "stars": "1", "class": {"name": "CommonNavigatorAdapter", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getTitleView", "params": ["Context", "int"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "IPagerTitleView", "snippet": "    public abstract IPagerTitleView getTitleView(Context context, int index);    public abstract IPagerIndicator getIndicator(Context context);    public float getTitleWeight(Context context, int index) {        return 1;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/abs/CommonNavigatorAdapter.java", "stars": "1", "class": {"name": "CommonNavigatorAdapter", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getIndicator", "params": ["Context"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "IPagerIndicator", "snippet": "    public abstract IPagerIndicator getIndicator(Context context);    public float getTitleWeight(Context context, int index) {        return 1;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/abs/CommonNavigatorAdapter.java", "stars": "1", "class": {"name": "CommonNavigatorAdapter", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getTitleWeight", "params": ["Context", "int"], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getTitleWeight(Context context, int index) {        return 1;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/abs/CommonNavigatorAdapter.java", "stars": "1", "class": {"name": "CommonNavigatorAdapter", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "registerDataSetObserver", "params": ["DataSetObserver"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void registerDataSetObserver(DataSetObserver observer) {        mDataSetObservable.registerObserver(observer);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/abs/CommonNavigatorAdapter.java", "stars": "1", "class": {"name": "CommonNavigatorAdapter", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "unregisterDataSetObserver", "params": ["DataSetObserver"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void unregisterDataSetObserver(DataSetObserver observer) {        mDataSetObservable.unregisterObserver(observer);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/abs/CommonNavigatorAdapter.java", "stars": "1", "class": {"name": "CommonNavigatorAdapter", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "notifyDataSetChanged", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void notifyDataSetChanged() {        mDataSetObservable.notifyChanged();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/abs/CommonNavigatorAdapter.java", "stars": "1", "class": {"name": "CommonNavigatorAdapter", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "notifyDataSetInvalidated", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void notifyDataSetInvalidated() {        mDataSetObservable.notifyInvalidated();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/abs/CommonNavigatorAdapter.java", "stars": "1", "class": {"name": "CommonNavigatorAdapter", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "register", "params": ["Class<LanguageDriver>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void register(Class<? extends LanguageDriver> cls) {    if (cls == null) {      throw new IllegalArgumentException(\"null is not a valid Language Driver\");    }    LANGUAGE_DRIVER_MAP.computeIfAbsent(cls, k -> {      try {        return k.getDeclaredConstructor().newInstance();      } catch (Exception ex) {        throw new ScriptingException(\"Failed to load language driver for \" + cls.getName(), ex);      }    });  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/LanguageDriverRegistry.java", "stars": "15", "class": {"name": "LanguageDriverRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "register", "params": ["LanguageDriver"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void register(LanguageDriver instance) {    if (instance == null) {      throw new IllegalArgumentException(\"null is not a valid Language Driver\");    }    Class<? extends LanguageDriver> cls = instance.getClass();    if (!LANGUAGE_DRIVER_MAP.containsKey(cls)) {      LANGUAGE_DRIVER_MAP.put(cls, instance);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/LanguageDriverRegistry.java", "stars": "15", "class": {"name": "LanguageDriverRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDriver", "params": ["Class<LanguageDriver>"], "throws": null, "modifiers": ["public"], "return_type": "LanguageDriver", "snippet": "  public LanguageDriver getDriver(Class<? extends LanguageDriver> cls) {    return LANGUAGE_DRIVER_MAP.get(cls);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/LanguageDriverRegistry.java", "stars": "15", "class": {"name": "LanguageDriverRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDefaultDriver", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LanguageDriver", "snippet": "  public LanguageDriver getDefaultDriver() {    return getDriver(getDefaultDriverClass());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/LanguageDriverRegistry.java", "stars": "15", "class": {"name": "LanguageDriverRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDefaultDriverClass", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Class<LanguageDriver>", "snippet": "  public Class<? extends LanguageDriver> getDefaultDriverClass() {    return defaultDriverClass;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/LanguageDriverRegistry.java", "stars": "15", "class": {"name": "LanguageDriverRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDefaultDriverClass", "params": ["Class<LanguageDriver>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDefaultDriverClass(Class<? extends LanguageDriver> defaultDriverClass) {    register(defaultDriverClass);    this.defaultDriverClass = defaultDriverClass;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/LanguageDriverRegistry.java", "stars": "15", "class": {"name": "LanguageDriverRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRegistry", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<K,V>", "snippet": "    public Map<K, V> getRegistry() {        return registry;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/HashMapManager.java", "stars": "12", "class": {"name": "HashMapManager", "extends": null, "implements": ["IManager"], "modifiers": ["public"]}}, {"method_name": "getValues", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<V>", "snippet": "    public Collection<V> getValues() {        return registry.values();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/HashMapManager.java", "stars": "12", "class": {"name": "HashMapManager", "extends": null, "implements": ["IManager"], "modifiers": ["public"]}}, {"method_name": "has", "params": ["K"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean has(K check) {        return registry.containsKey(check);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/HashMapManager.java", "stars": "12", "class": {"name": "HashMapManager", "extends": null, "implements": ["IManager"], "modifiers": ["public"]}}, {"method_name": "include", "params": ["K", "V"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void include(K key, V val){        if(!has(key))            registry.put(key, val);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/HashMapManager.java", "stars": "12", "class": {"name": "HashMapManager", "extends": null, "implements": ["IManager"], "modifiers": ["public"]}}, {"method_name": "exclude", "params": ["K"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void exclude(K key){        if(has(key))            registry.remove(key);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/HashMapManager.java", "stars": "12", "class": {"name": "HashMapManager", "extends": null, "implements": ["IManager"], "modifiers": ["public"]}}, {"method_name": "pull", "params": ["K"], "throws": null, "modifiers": ["public"], "return_type": "V", "snippet": "    public V pull(K key) {        return registry.get(key);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/HashMapManager.java", "stars": "12", "class": {"name": "HashMapManager", "extends": null, "implements": ["IManager"], "modifiers": ["public"]}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void load() {    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/HashMapManager.java", "stars": "12", "class": {"name": "HashMapManager", "extends": null, "implements": ["IManager"], "modifiers": ["public"]}}, {"method_name": "unload", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unload() {    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/HashMapManager.java", "stars": "12", "class": {"name": "HashMapManager", "extends": null, "implements": ["IManager"], "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, \"Hello\", null);    verify(ps).setNString(1, \"Hello\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/NStringTypeHandlerTest.java", "stars": "15", "class": {"name": "NStringTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getNString(\"column\")).thenReturn(\"Hello\");    assertEquals(\"Hello\", TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/NStringTypeHandlerTest.java", "stars": "15", "class": {"name": "NStringTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    // Unnecessary  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/NStringTypeHandlerTest.java", "stars": "15", "class": {"name": "NStringTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getNString(1)).thenReturn(\"Hello\");    assertEquals(\"Hello\", TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/NStringTypeHandlerTest.java", "stars": "15", "class": {"name": "NStringTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    // Unnecessary  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/NStringTypeHandlerTest.java", "stars": "15", "class": {"name": "NStringTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getNString(1)).thenReturn(\"Hello\");    assertEquals(\"Hello\", TYPE_HANDLER.getResult(cs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/NStringTypeHandlerTest.java", "stars": "15", "class": {"name": "NStringTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    // Unnecessary  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/NStringTypeHandlerTest.java", "stars": "15", "class": {"name": "NStringTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        Set<Integer> set = new HashSet<>();        //\u4f7f\u7528add\u65b9\u6cd5\u5f80\u96c6\u5408\u4e2d\u6dfb\u52a0\u5143\u7d20        set.add(1);        set.add(3);        set.add(2);        set.add(1);        //\u4f7f\u7528\u8fed\u4ee3\u5668\u904d\u5386set\u96c6\u5408        Iterator<Integer> it = set.iterator();        while (it.hasNext()){            Integer n = it.next();            System.out.println(n);//1,2,3        }        //\u4f7f\u7528\u589e\u5f3afor\u904d\u5386set\u96c6\u5408        System.out.println(\"-----------------\");        for (Integer i : set) {            System.out.println(i);        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/14.%E3%80%90List%E3%80%81Set%E3%80%91-%E7%AC%94%E8%AE%B0/code/03_ListAndSet/src/com/itheima/demo02/Set/Demo01Set.java", "stars": "2", "class": {"name": "Demo01Set", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "notFoundException", "params": ["DistributorNotFoundException"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Object>", "snippet": "\t\tpublic ResponseEntity<Object> notFoundException(DistributorNotFoundException distributornotfoundexception){\t\t\treturn new ResponseEntity<>(distributornotfoundexception.getMessage(),HttpStatus.NOT_FOUND);\t\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/exception/GlobalExceptionHandler.java", "stars": "1", "class": {"name": "GlobalExceptionHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/DarkOakParquetSlabBlock.java", "stars": "2", "class": {"name": "DarkOakParquetSlabBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, state.get(TYPE) == SlabType.DOUBLE ? 2 : 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/DarkOakParquetSlabBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "SlabBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "convertEmptyViewLayoutParams", "params": ["ViewGroup"], "throws": null, "modifiers": ["private", "static"], "return_type": "FrameLayout", "snippet": "\tprivate static FrameLayout.LayoutParams convertEmptyViewLayoutParams(ViewGroup.LayoutParams lp) {\t\tFrameLayout.LayoutParams newLp = null;\t\tif (null != lp) {\t\t\tnewLp = new FrameLayout.LayoutParams(lp);\t\t\tif (lp instanceof LinearLayout.LayoutParams) {\t\t\t\tnewLp.gravity = ((LinearLayout.LayoutParams) lp).gravity;\t\t\t} else {\t\t\t\tnewLp.gravity = Gravity.CENTER;\t\t\t}\t\t}\t\treturn newLp;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getShowIndicator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean getShowIndicator() {\t\treturn mShowIndicator;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onScroll", "params": ["AbsListView", "int", "int", "int"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void onScroll(final AbsListView view, final int firstVisibleItem, final int visibleItemCount,\t\t\tfinal int totalItemCount) {\t\tif (DEBUG) {\t\t\tLog.d(LOG_TAG, \"First Visible: \" + firstVisibleItem + \". Visible Count: \" + visibleItemCount\t\t\t\t\t+ \". Total Items:\" + totalItemCount);\t\t}\t\t/**\t\t * Set whether the Last Item is Visible. lastVisibleItemIndex is a\t\t * zero-based index, so we minus one totalItemCount to check\t\t */\t\tif (null != mOnLastItemVisibleListener) {\t\t\tmLastItemVisible = (totalItemCount > 0) && (firstVisibleItem + visibleItemCount >= totalItemCount - 1);\t\t}\t\t// If we're showing the indicator, check positions...\t\tif (getShowIndicatorInternal()) {\t\t\tupdateIndicatorViewsVisibility();\t\t}\t\t// Finally call OnScrollListener if we have one\t\tif (null != mOnScrollListener) {\t\t\tmOnScrollListener.onScroll(view, firstVisibleItem, visibleItemCount, totalItemCount);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onScrollStateChanged", "params": ["AbsListView", "int"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void onScrollStateChanged(final AbsListView view, final int state) {\t\t/**\t\t * Check that the scrolling has stopped, and that the last item is\t\t * visible.\t\t */\t\tif (state == OnScrollListener.SCROLL_STATE_IDLE && null != mOnLastItemVisibleListener && mLastItemVisible) {\t\t\tmOnLastItemVisibleListener.onLastItemVisible();\t\t}\t\tif (null != mOnScrollListener) {\t\t\tmOnScrollListener.onScrollStateChanged(view, state);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setAdapter", "params": ["ListAdapter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAdapter(ListAdapter adapter) {\t\t((AdapterView<ListAdapter>) mRefreshableView).setAdapter(adapter);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setEmptyView", "params": ["View"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void setEmptyView(View newEmptyView) {\t\tFrameLayout refreshableViewWrapper = getRefreshableViewWrapper();\t\tif (null != newEmptyView) {\t\t\t// New view needs to be clickable so that Android recognizes it as a\t\t\t// target for Touch Events\t\t\tnewEmptyView.setClickable(true);\t\t\tViewParent newEmptyViewParent = newEmptyView.getParent();\t\t\tif (null != newEmptyViewParent && newEmptyViewParent instanceof ViewGroup) {\t\t\t\t((ViewGroup) newEmptyViewParent).removeView(newEmptyView);\t\t\t}\t\t\t// We need to convert any LayoutParams so that it works in our\t\t\t// FrameLayout\t\t\tFrameLayout.LayoutParams lp = convertEmptyViewLayoutParams(newEmptyView.getLayoutParams());\t\t\tif (null != lp) {\t\t\t\trefreshableViewWrapper.addView(newEmptyView, lp);\t\t\t} else {\t\t\t\trefreshableViewWrapper.addView(newEmptyView);\t\t\t}\t\t}\t\tif (mRefreshableView instanceof EmptyViewMethodAccessor) {\t\t\t((EmptyViewMethodAccessor) mRefreshableView).setEmptyViewInternal(newEmptyView);\t\t} else {\t\t\tmRefreshableView.setEmptyView(newEmptyView);\t\t}\t\tmEmptyView = newEmptyView;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOnItemClickListener", "params": ["OnItemClickListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setOnItemClickListener(OnItemClickListener listener) {\t\tmRefreshableView.setOnItemClickListener(listener);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOnLastItemVisibleListener", "params": ["OnLastItemVisibleListener"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void setOnLastItemVisibleListener(OnLastItemVisibleListener listener) {\t\tmOnLastItemVisibleListener = listener;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOnScrollListener", "params": ["OnScrollListener"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void setOnScrollListener(OnScrollListener listener) {\t\tmOnScrollListener = listener;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setScrollEmptyView", "params": ["boolean"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void setScrollEmptyView(boolean doScroll) {\t\tmScrollEmptyView = doScroll;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setShowIndicator", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setShowIndicator(boolean showIndicator) {\t\tmShowIndicator = showIndicator;\t\tif (getShowIndicatorInternal()) {\t\t\t// If we're set to Show Indicator, add/update them\t\t\taddIndicatorViews();\t\t} else {\t\t\t// If not, then remove then\t\t\tremoveIndicatorViews();\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onPullToRefresh", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onPullToRefresh() {\t\tsuper.onPullToRefresh();\t\tif (getShowIndicatorInternal()) {\t\t\tswitch (getCurrentMode()) {\t\t\t\tcase PULL_FROM_END:\t\t\t\t\tmIndicatorIvBottom.pullToRefresh();\t\t\t\t\tbreak;\t\t\t\tcase PULL_FROM_START:\t\t\t\t\tmIndicatorIvTop.pullToRefresh();\t\t\t\t\tbreak;\t\t\t\tdefault:\t\t\t\t\t// NO-OP\t\t\t\t\tbreak;\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onRefreshing", "params": ["boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onRefreshing(boolean doScroll) {\t\tsuper.onRefreshing(doScroll);\t\tif (getShowIndicatorInternal()) {\t\t\tupdateIndicatorViewsVisibility();\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onReleaseToRefresh", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onReleaseToRefresh() {\t\tsuper.onReleaseToRefresh();\t\tif (getShowIndicatorInternal()) {\t\t\tswitch (getCurrentMode()) {\t\t\t\tcase PULL_FROM_END:\t\t\t\t\tmIndicatorIvBottom.releaseToRefresh();\t\t\t\t\tbreak;\t\t\t\tcase PULL_FROM_START:\t\t\t\t\tmIndicatorIvTop.releaseToRefresh();\t\t\t\t\tbreak;\t\t\t\tdefault:\t\t\t\t\t// NO-OP\t\t\t\t\tbreak;\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onReset", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onReset() {\t\tsuper.onReset();\t\tif (getShowIndicatorInternal()) {\t\t\tupdateIndicatorViewsVisibility();\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "handleStyledAttributes", "params": ["TypedArray"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void handleStyledAttributes(TypedArray a) {\t\t// Set Show Indicator to the XML value, or default value\t\tmShowIndicator = a.getBoolean(R.styleable.PullToRefresh_ptrShowIndicator, !isPullToRefreshOverScrollEnabled());\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "isReadyForPullStart", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean isReadyForPullStart() {\t\treturn isFirstItemVisible();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "isReadyForPullEnd", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean isReadyForPullEnd() {\t\treturn isLastItemVisible();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onScrollChanged", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onScrollChanged(int l, int t, int oldl, int oldt) {\t\tsuper.onScrollChanged(l, t, oldl, oldt);\t\tif (null != mEmptyView && !mScrollEmptyView) {\t\t\tmEmptyView.scrollTo(-l, -t);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "updateUIForMode", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void updateUIForMode() {\t\tsuper.updateUIForMode();\t\t// Check Indicator Views consistent with new Mode\t\tif (getShowIndicatorInternal()) {\t\t\taddIndicatorViews();\t\t} else {\t\t\tremoveIndicatorViews();\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "addIndicatorViews", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void addIndicatorViews() {\t\tMode mode = getMode();\t\tFrameLayout refreshableViewWrapper = getRefreshableViewWrapper();\t\tif (mode.showHeaderLoadingLayout() && null == mIndicatorIvTop) {\t\t\t// If the mode can pull down, and we don't have one set already\t\t\tmIndicatorIvTop = new IndicatorLayout(getContext(), Mode.PULL_FROM_START);\t\t\tFrameLayout.LayoutParams params = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,\t\t\t\t\tViewGroup.LayoutParams.WRAP_CONTENT);\t\t\tparams.rightMargin = getResources().getDimensionPixelSize(R.dimen.indicator_right_padding);\t\t\tparams.gravity = Gravity.TOP | Gravity.RIGHT;\t\t\trefreshableViewWrapper.addView(mIndicatorIvTop, params);\t\t} else if (!mode.showHeaderLoadingLayout() && null != mIndicatorIvTop) {\t\t\t// If we can't pull down, but have a View then remove it\t\t\trefreshableViewWrapper.removeView(mIndicatorIvTop);\t\t\tmIndicatorIvTop = null;\t\t}\t\tif (mode.showFooterLoadingLayout() && null == mIndicatorIvBottom) {\t\t\t// If the mode can pull down, and we don't have one set already\t\t\tmIndicatorIvBottom = new IndicatorLayout(getContext(), Mode.PULL_FROM_END);\t\t\tFrameLayout.LayoutParams params = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,\t\t\t\t\tViewGroup.LayoutParams.WRAP_CONTENT);\t\t\tparams.rightMargin = getResources().getDimensionPixelSize(R.dimen.indicator_right_padding);\t\t\tparams.gravity = Gravity.BOTTOM | Gravity.RIGHT;\t\t\trefreshableViewWrapper.addView(mIndicatorIvBottom, params);\t\t} else if (!mode.showFooterLoadingLayout() && null != mIndicatorIvBottom) {\t\t\t// If we can't pull down, but have a View then remove it\t\t\trefreshableViewWrapper.removeView(mIndicatorIvBottom);\t\t\tmIndicatorIvBottom = null;\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getShowIndicatorInternal", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean getShowIndicatorInternal() {\t\treturn mShowIndicator && isPullToRefreshEnabled();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "isFirstItemVisible", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean isFirstItemVisible() {\t\tfinal Adapter adapter = mRefreshableView.getAdapter();\t\tif (null == adapter || adapter.isEmpty()) {\t\t\tif (DEBUG) {\t\t\t\tLog.d(LOG_TAG, \"isFirstItemVisible. Empty View.\");\t\t\t}\t\t\treturn true;\t\t} else {\t\t\t/**\t\t\t * This check should really just be:\t\t\t * mRefreshableView.getFirstVisiblePosition() == 0, but PtRListView\t\t\t * internally use a HeaderView which messes the positions up. For\t\t\t * now we'll just add one to account for it and rely on the inner\t\t\t * condition which checks getTop().\t\t\t */\t\t\tif (mRefreshableView.getFirstVisiblePosition() <= 1) {\t\t\t\tfinal View firstVisibleChild = mRefreshableView.getChildAt(0);\t\t\t\tif (firstVisibleChild != null) {\t\t\t\t\treturn firstVisibleChild.getTop() >= mRefreshableView.getTop();\t\t\t\t}\t\t\t}\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "isLastItemVisible", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean isLastItemVisible() {\t\tfinal Adapter adapter = mRefreshableView.getAdapter();\t\tif (null == adapter || adapter.isEmpty()) {\t\t\tif (DEBUG) {\t\t\t\tLog.d(LOG_TAG, \"isLastItemVisible. Empty View.\");\t\t\t}\t\t\treturn true;\t\t} else {\t\t\tfinal int lastItemPosition = mRefreshableView.getCount() - 1;\t\t\tfinal int lastVisiblePosition = mRefreshableView.getLastVisiblePosition();\t\t\tif (DEBUG) {\t\t\t\tLog.d(LOG_TAG, \"isLastItemVisible. Last Item Position: \" + lastItemPosition + \" Last Visible Pos: \"\t\t\t\t\t\t+ lastVisiblePosition);\t\t\t}\t\t\t/**\t\t\t * This check should really just be: lastVisiblePosition ==\t\t\t * lastItemPosition, but PtRListView internally uses a FooterView\t\t\t * which messes the positions up. For me we'll just subtract one to\t\t\t * account for it and rely on the inner condition which checks\t\t\t * getBottom().\t\t\t */\t\t\tif (lastVisiblePosition >= lastItemPosition - 1) {\t\t\t\tfinal int childIndex = lastVisiblePosition - mRefreshableView.getFirstVisiblePosition();\t\t\t\tfinal View lastVisibleChild = mRefreshableView.getChildAt(childIndex);\t\t\t\tif (lastVisibleChild != null) {\t\t\t\t\treturn lastVisibleChild.getBottom() <= mRefreshableView.getBottom();\t\t\t\t}\t\t\t}\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "removeIndicatorViews", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void removeIndicatorViews() {\t\tif (null != mIndicatorIvTop) {\t\t\tgetRefreshableViewWrapper().removeView(mIndicatorIvTop);\t\t\tmIndicatorIvTop = null;\t\t}\t\tif (null != mIndicatorIvBottom) {\t\t\tgetRefreshableViewWrapper().removeView(mIndicatorIvBottom);\t\t\tmIndicatorIvBottom = null;\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "updateIndicatorViewsVisibility", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void updateIndicatorViewsVisibility() {\t\tif (null != mIndicatorIvTop) {\t\t\tif (!isRefreshing() && isReadyForPullStart()) {\t\t\t\tif (!mIndicatorIvTop.isVisible()) {\t\t\t\t\tmIndicatorIvTop.show();\t\t\t\t}\t\t\t} else {\t\t\t\tif (mIndicatorIvTop.isVisible()) {\t\t\t\t\tmIndicatorIvTop.hide();\t\t\t\t}\t\t\t}\t\t}\t\tif (null != mIndicatorIvBottom) {\t\t\tif (!isRefreshing() && isReadyForPullEnd()) {\t\t\t\tif (!mIndicatorIvBottom.isVisible()) {\t\t\t\t\tmIndicatorIvBottom.show();\t\t\t\t}\t\t\t} else {\t\t\t\tif (mIndicatorIvBottom.isVisible()) {\t\t\t\t\tmIndicatorIvBottom.hide();\t\t\t\t}\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java", "stars": "74", "class": {"name": "PullToRefreshAdapterViewBase", "extends": "PullToRefreshBase", "implements": ["OnScrollListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutTemplatedContentRenderer_HeaderContainer.java", "stars": "2", "class": {"name": "ShellFlyoutTemplatedContentRenderer_HeaderContainer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutTemplatedContentRenderer_HeaderContainer.java", "stars": "2", "class": {"name": "ShellFlyoutTemplatedContentRenderer_HeaderContainer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(GeraNotasApp.class, args);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/GeraNotasApp.java", "stars": "2", "class": {"name": "GeraNotasApp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onAnimationsFinished", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAnimationsFinished ()\t{\t\tn_onAnimationsFinished ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/RecyclerView_ItemAnimator_ItemAnimatorFinishedListenerImplementor.java", "stars": "2", "class": {"name": "RecyclerView_ItemAnimator_ItemAnimatorFinishedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAnimationsFinished", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAnimationsFinished ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/RecyclerView_ItemAnimator_ItemAnimatorFinishedListenerImplementor.java", "stars": "2", "class": {"name": "RecyclerView_ItemAnimator_ItemAnimatorFinishedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/RecyclerView_ItemAnimator_ItemAnimatorFinishedListenerImplementor.java", "stars": "2", "class": {"name": "RecyclerView_ItemAnimator_ItemAnimatorFinishedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/RecyclerView_ItemAnimator_ItemAnimatorFinishedListenerImplementor.java", "stars": "2", "class": {"name": "RecyclerView_ItemAnimator_ItemAnimatorFinishedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "JobLogReportHelper", "snippet": "    public static JobLogReportHelper getInstance() {        return instance;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobLogReportHelper.java", "stars": "1", "class": {"name": "JobLogReportHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        logrThread = new Thread(() -> {            long lastCleanLogTime = 0;            while (!toStop) {                // 1\u3001log-report refresh: refresh log report in 3 days                try {                    for (int i = 0; i < 3; i++) {                        // today                        Calendar itemDay = Calendar.getInstance();                        itemDay.add(Calendar.DAY_OF_MONTH, -i);                        itemDay.set(Calendar.HOUR_OF_DAY, 0);                        itemDay.set(Calendar.MINUTE, 0);                        itemDay.set(Calendar.SECOND, 0);                        itemDay.set(Calendar.MILLISECOND, 0);                        Date todayFrom = itemDay.getTime();                        itemDay.set(Calendar.HOUR_OF_DAY, 23);                        itemDay.set(Calendar.MINUTE, 59);                        itemDay.set(Calendar.SECOND, 59);                        itemDay.set(Calendar.MILLISECOND, 999);                        Date todayTo = itemDay.getTime();                        // refresh log-report every minute                        XxlJobLogReport xxlJobLogReport = new XxlJobLogReport();                        xxlJobLogReport.setTriggerDay(todayFrom);                        xxlJobLogReport.setRunningCount(0);                        xxlJobLogReport.setSucCount(0);                        xxlJobLogReport.setFailCount(0);                        Map<String, Object> triggerCountMap = XxlJobAdminConfig.getAdminConfig().getXxlJobLogDao().findLogReport(todayFrom, todayTo);                        if (triggerCountMap != null && triggerCountMap.size() > 0) {                            int triggerDayCount = triggerCountMap.containsKey(\"triggerDayCount\") ? Integer.valueOf(String.valueOf(triggerCountMap.get(\"triggerDayCount\"))) : 0;                            int triggerDayCountRunning = triggerCountMap.containsKey(\"triggerDayCountRunning\") ? Integer.valueOf(String.valueOf(triggerCountMap.get(\"triggerDayCountRunning\"))) : 0;                            int triggerDayCountSuc = triggerCountMap.containsKey(\"triggerDayCountSuc\") ? Integer.valueOf(String.valueOf(triggerCountMap.get(\"triggerDayCountSuc\"))) : 0;                            int triggerDayCountFail = triggerDayCount - triggerDayCountRunning - triggerDayCountSuc;                            xxlJobLogReport.setRunningCount(triggerDayCountRunning);                            xxlJobLogReport.setSucCount(triggerDayCountSuc);                            xxlJobLogReport.setFailCount(triggerDayCountFail);                        }                        // do refresh                        int ret = XxlJobAdminConfig.getAdminConfig().getXxlJobLogReportDao().update(xxlJobLogReport);                        if (ret < 1) {                            XxlJobAdminConfig.getAdminConfig().getXxlJobLogReportDao().save(xxlJobLogReport);                        }                    }                } catch (Exception e) {                    if (!toStop) {                        logger.error(\">>>>>>>>>>> xxl-job, job log report thread error:\", e);                    }                }                // 2\u3001log-clean: switch open & once each day                if (XxlJobAdminConfig.getAdminConfig().getLogretentiondays() > 0                        && System.currentTimeMillis() - lastCleanLogTime > 24 * 60 * 60 * 1000) {                    // expire-time                    Calendar expiredDay = Calendar.getInstance();                    expiredDay.add(Calendar.DAY_OF_MONTH, -1 * XxlJobAdminConfig.getAdminConfig().getLogretentiondays());                    expiredDay.set(Calendar.HOUR_OF_DAY, 0);                    expiredDay.set(Calendar.MINUTE, 0);                    expiredDay.set(Calendar.SECOND, 0);                    expiredDay.set(Calendar.MILLISECOND, 0);                    Date clearBeforeTime = expiredDay.getTime();                    // clean expired log                    List<Long> logIds = null;                    do {                        logIds = XxlJobAdminConfig.getAdminConfig().getXxlJobLogDao().findClearLogIds(0, 0, clearBeforeTime, 0, 1000);                        if (logIds != null && logIds.size() > 0) {                            XxlJobAdminConfig.getAdminConfig().getXxlJobLogDao().clearLog(logIds);                        }                    } while (logIds != null && logIds.size() > 0);                    // update clean time                    lastCleanLogTime = System.currentTimeMillis();                }                try {                    TimeUnit.MINUTES.sleep(1);                } catch (Exception e) {                    if (!toStop) {                        logger.error(e.getMessage(), e);                    }                }            }            logger.info(\">>>>>>>>>>> xxl-job, job log report thread stop\");        });        logrThread.setDaemon(true);        logrThread.setName(\"xxl-job, admin JobLogReportHelper\");        logrThread.start();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobLogReportHelper.java", "stars": "1", "class": {"name": "JobLogReportHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toStop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void toStop() {        toStop = true;        // interrupt and wait        logrThread.interrupt();        try {            logrThread.join();        } catch (InterruptedException e) {            logger.error(e.getMessage(), e);        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobLogReportHelper.java", "stars": "1", "class": {"name": "JobLogReportHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessageConfiguration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IMessageConfiguration", "snippet": "    public IMessageConfiguration getMessageConfiguration() {        return this.messageConfiguration;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/events/messages/MessageConfigurationEvent.java", "stars": "2", "class": {"name": "MessageConfigurationEvent", "extends": "CommunicationEvent", "implements": null, "modifiers": ["public"]}}, {"method_name": "findAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Role>", "snippet": "    public List<Role> findAll() {        return rolesMapper.findAll();    }", "url": "https://raw.githubusercontent.com/wanzicong/mybatis-study/master/src/main/java/com/mybatis/service/RolesService.java", "stars": "1", "class": {"name": "RolesService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findAllRoleAndUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Role>", "snippet": "    public List<Role> findAllRoleAndUser() {        return rolesMapper.findAllRoleAndUser();    }", "url": "https://raw.githubusercontent.com/wanzicong/mybatis-study/master/src/main/java/com/mybatis/service/RolesService.java", "stars": "1", "class": {"name": "RolesService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onAttachedToWindow() {        super.onAttachedToWindow();        animator.start();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice11CameraRotateView.java", "stars": "2", "class": {"name": "Practice11CameraRotateView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDetachedFromWindow() {        super.onDetachedFromWindow();        animator.end();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice11CameraRotateView.java", "stars": "2", "class": {"name": "Practice11CameraRotateView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDegree", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDegree(int degree) {        this.degree = degree;        invalidate();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice11CameraRotateView.java", "stars": "2", "class": {"name": "Practice11CameraRotateView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        canvas.save();        camera.save();// \u4fdd\u5b58 Camera \u7684\u72b6\u6001        camera.rotateX(degree); // \u65cb\u8f6c Camera \u7684\u4e09\u7ef4\u7a7a\u95f4        camera.applyToCanvas(canvas); // \u628a\u65cb\u8f6c\u6295\u5f71\u5230 Canvas        camera.restore();// \u6062\u590d Camera \u7684\u72b6\u6001        canvas.drawBitmap(bitmap, point1.x, point1.y, paint);        canvas.restore();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice11CameraRotateView.java", "stars": "2", "class": {"name": "Practice11CameraRotateView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "damageItem", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void damageItem(){    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Helper/ItemHelper.java", "stars": "2", "class": {"name": "ItemHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void contextLoads() {    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/RemettantApplicationTest.java", "stars": "5", "class": {"name": "RemettantApplicationTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/call_setters_on_nulls/mybatis-config-2.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/call_setters_on_nulls/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/DoNotCallSettersOnNullsTest.java", "stars": "15", "class": {"name": "DoNotCallSettersOnNullsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldCallNullOnMappedProperty", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCallNullOnMappedProperty() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUserMapped(1);      Assertions.assertFalse(user.nullReceived);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/DoNotCallSettersOnNullsTest.java", "stars": "15", "class": {"name": "DoNotCallSettersOnNullsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldCallNullOnAutomaticMapping", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCallNullOnAutomaticMapping() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUserUnmapped(1);      Assertions.assertFalse(user.nullReceived);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/DoNotCallSettersOnNullsTest.java", "stars": "15", "class": {"name": "DoNotCallSettersOnNullsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldCallNullOnMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCallNullOnMap() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Map user = mapper.getUserInMap(1);      Assertions.assertFalse(user.containsKey(\"NAME\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/DoNotCallSettersOnNullsTest.java", "stars": "15", "class": {"name": "DoNotCallSettersOnNullsTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "doInBackground", "params": ["Void"], "throws": null, "modifiers": ["protected"], "return_type": "Bitmap", "snippet": "        protected Bitmap doInBackground(Void... params) {            URL url;            Bitmap bmp = null;            try {                url = new URL(_imageSource);                bmp = BitmapFactory.decodeStream(url.openConnection().getInputStream());            } catch (Exception ignored) {                Log.e(TAG, \"Exception\", ignored);            }            return bmp;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PinItDemo/src/com/pinterest/samples/pinit/DemoHelper.java", "stars": "74", "class": {"name": "RemoteImageTask", "extends": "AsyncTask", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onPostExecute", "params": ["Bitmap"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void onPostExecute(Bitmap bmp) {            _image.setImageBitmap(bmp);            if (_callback != null)                _callback.onTaskFinished(bmp);        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PinItDemo/src/com/pinterest/samples/pinit/DemoHelper.java", "stars": "74", "class": {"name": "RemoteImageTask", "extends": "AsyncTask", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)throws Exception{\t\tSpringApplication.run(EurekaServerApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-eureka-service/src/main/java/com/iiht/stock/eureka/EurekaServerApplication.java", "stars": "2", "class": {"name": "EurekaServerApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "route", "params": ["TriggerParam", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "    public ReturnT<String> route(TriggerParam triggerParam, List<String> addressList) {        String address = addressList.get(localRandom.nextInt(addressList.size()));        return new ReturnT<String>(address);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/route/strategy/ExecutorRouteRandom.java", "stars": "1", "class": {"name": "ExecutorRouteRandom", "extends": "ExecutorRouter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void setUp() throws SQLException {    st = StatementLogger.newInstance(statement, log, 1);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/jdbc/StatementLoggerTest.java", "stars": "15", "class": {"name": "StatementLoggerTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldPrintLog", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void shouldPrintLog() throws SQLException {    when(log.isDebugEnabled()).thenReturn(true);    st.executeQuery(\"select 1\");    verify(log).debug(contains(\"Executing: select 1\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/jdbc/StatementLoggerTest.java", "stars": "15", "class": {"name": "StatementLoggerTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldPrintLogForUpdate", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void shouldPrintLogForUpdate() throws SQLException {    when(log.isDebugEnabled()).thenReturn(true);    when(statement.execute(anyString())).thenReturn(true);    String sql = \"update name = '' from test\";    boolean execute = st.execute(sql);    verify(log).debug(contains(sql));    Assertions.assertTrue(execute);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/jdbc/StatementLoggerTest.java", "stars": "15", "class": {"name": "StatementLoggerTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldNotPrintLog", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void shouldNotPrintLog() throws SQLException {    st.getResultSet();    st.close();    verify(log, times(0)).debug(anyString());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/jdbc/StatementLoggerTest.java", "stars": "15", "class": {"name": "StatementLoggerTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/simplelistparameter/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/simplelistparameter/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/simplelistparameter/SimpleListParameterTest.java", "stars": "15", "class": {"name": "SimpleListParameterTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetACar", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetACar() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      CarMapper carMapper = sqlSession.getMapper(CarMapper.class);      Car car = new Car();      car.setDoors(Arrays.asList(\"2\", \"4\"));      List<Car> cars = carMapper.getCar(car);      Assertions.assertNotNull(cars);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/simplelistparameter/SimpleListParameterTest.java", "stars": "15", "class": {"name": "SimpleListParameterTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldResolveGenericFieldGetterType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldResolveGenericFieldGetterType() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      CarMapper carMapper = sqlSession.getMapper(CarMapper.class);      Rv rv = new Rv();      rv.doors1 = Arrays.asList(\"2\", \"4\");      List<Rv> rvs = carMapper.getRv1(rv);      Assertions.assertNotNull(rvs);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/simplelistparameter/SimpleListParameterTest.java", "stars": "15", "class": {"name": "SimpleListParameterTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldResolveGenericMethodGetterType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldResolveGenericMethodGetterType() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      CarMapper carMapper = sqlSession.getMapper(CarMapper.class);      Rv rv = new Rv();      rv.setDoors2(Arrays.asList(\"2\", \"4\"));      List<Rv> rvs = carMapper.getRv2(rv);      Assertions.assertNotNull(rvs);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/simplelistparameter/SimpleListParameterTest.java", "stars": "15", "class": {"name": "SimpleListParameterTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getAge", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getAge() {        return age;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/ProcessInfo.java", "stars": "2", "class": {"name": "ProcessInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAge", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAge(Integer age) {        this.age = age;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/ProcessInfo.java", "stars": "2", "class": {"name": "ProcessInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGender", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getGender() {        return gender;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/ProcessInfo.java", "stars": "2", "class": {"name": "ProcessInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGender", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGender(Integer gender) {        this.gender = gender;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/ProcessInfo.java", "stars": "2", "class": {"name": "ProcessInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eval", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void eval() throws Exception {        eval(tree,global);    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/Interpreter/Interpreter.java", "stars": "2", "class": {"name": "Interpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eval", "params": ["AST_Node", "Environment"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void eval(AST_Node tree,Environment env) throws Exception {        List<AST_Node> children= tree.children;        for(AST_Node child:children){            if(child.name.equals(\"epsilon\"))                continue;            else if(child.name.equals(\"assign\")){                int a=eval_exp(child.children.get(3), env);                env.addVariable(child.children.get(1).value,new Variable(\"number\",a+\"\"));            }            else if(child.name.equals(\"update\")){                int a=eval_exp(child.children.get(2), env);                env.updateVariable(child.children.get(0).value,new Variable(\"number\",a+\"\"));            }            else if(child.name.equals(\"if_else_statement\")){                boolean condition= eval_condition(child.children.get(2),env);                if(condition){                    Environment new_env=new Environment(env);                    eval(child.children.get(5),new_env);                }                else                {                    eval(child.children.get(9),env);                }            }            else if(child.name.equals(\"if_statement\")){                boolean condition= eval_condition(child.children.get(2),env);                if(condition){                    eval(child.children.get(5),env);                }            }            else if(child.name.equals(\"while_statement\")){                boolean condition= eval_condition(child.children.get(2),env);                while(condition){                    Environment new_env=new Environment(env);                    eval(child.children.get(5),new_env);                    condition= eval_condition(child.children.get(2),env);                }            }            else if(child.name.equals(\"function_definition\")){                List<String> list= eval_functional_definition_optional_params(child.children.get(3),env);                AST_Node fbody= child.children.get(6);                env.addFunction(child.children.get(1).value,new Function(fbody,list,env));            }            else if(child.name.equals(\"function_call\")){                eval_function_call(child,env);            }            else if(child.name.equals(\"return_statement\")){                if(env.parent==null)                    throw new Exception(\"invalid return statement in global Environment\");                if(child.children.size()==2){                    env.parent.addVariable(\"function output\", new Variable(\"number\",\"\"));                }                else{                    int a=eval_exp(child.children.get(1),env);                    env.parent.addVariable(\"function output\", new Variable(\"number\",a+\"\"));                }                throw new Exception(\"\");            }            else if(child.name.equals(\"statement\"))                eval(child,env);        }    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/Interpreter/Interpreter.java", "stars": "2", "class": {"name": "Interpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eval_exp", "params": ["AST_Node", "Environment"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int eval_exp(AST_Node tree, Environment env) throws Exception {        //System.out.println(\"exp \"+tree);        if(tree.children.size()==3){            AST_Node operator=tree.children.get(1);            int a=eval_exp_1(tree.children.get(0),env);            int b=eval_exp(tree.children.get(2),env);            if(operator.name.equals(\"add\")){                return a+b;            }            else if(operator.name.equals(\"sub\")) {                return a-b;            }        }        return eval_exp_1(tree.children.get(0),env);    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/Interpreter/Interpreter.java", "stars": "2", "class": {"name": "Interpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eval_exp_1", "params": ["AST_Node", "Environment"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int eval_exp_1(AST_Node tree, Environment env) throws Exception {        //System.out.println(\"exp_1 \"+tree);        if(tree.children.size()==3){            AST_Node operator=tree.children.get(1);            int a=eval_exp_2(tree.children.get(0),env);            int b=eval_exp_1(tree.children.get(2),env);            if(operator.name.equals(\"mul\")){                return a*b;            }            else if(operator.name.equals(\"divide\")) {                //check if b is zero                return a/b;            }            else if(operator.name.equals(\"modulo\"))                return a%b;        }        return eval_exp_2(tree.children.get(0),env);    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/Interpreter/Interpreter.java", "stars": "2", "class": {"name": "Interpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eval_exp_2", "params": ["AST_Node", "Environment"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int eval_exp_2(AST_Node tree, Environment env) throws Exception {       // System.out.println(\"exp_2 \"+tree);        if(tree.children.size()==2){            AST_Node operator=tree.children.get(0);            int a=eval_exp_3(tree.children.get(1),env);            if(operator.name.equals(\"increment\")){                return ++a;            }            else if(operator.name.equals(\"decrement\")) {                //check if b is zero                return --a;            }            else if(operator.name.equals(\"add\"))                return (+1)*a;            else if(operator.name.equals(\"sub\"))                return (-1)*a;        }        return eval_exp_3(tree.children.get(0),env);    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/Interpreter/Interpreter.java", "stars": "2", "class": {"name": "Interpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eval_exp_3", "params": ["AST_Node", "Environment"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int eval_exp_3(AST_Node tree, Environment env) throws Exception {        if(tree.children.size()==2){            AST_Node operator=tree.children.get(1);            int a=eval_exp_4(tree.children.get(0),env);            if(operator.name.equals(\"increment\")){                return ++a;            }            else if(operator.name.equals(\"decrement\")) {                //check if b is zero                return --a;            }        }        return eval_exp_4(tree.children.get(0),env);    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/Interpreter/Interpreter.java", "stars": "2", "class": {"name": "Interpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eval_exp_4", "params": ["AST_Node", "Environment"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int eval_exp_4(AST_Node tree, Environment env) throws Exception {        //System.out.println(tree);        AST_Node node=tree.children.get(0);        if(node.name.equals(\"identifier\"))        {            Variable a=env.variableLookUp(node.value);            if(!a.dataType.equals(\"number\"))                throw new Exception(node.value+\" is not a number\");            return Integer.parseInt(a.value);        }        else if(node.name.equals(\"function_call\")){            eval_function_call(node, env);            String ans=env.variableLookUp(\"function output\").value;            if(ans.equals(\"\"))                throw new Exception(\" function does return anything\");            return Integer.parseInt(ans);        }        else{            return number(node, env);        }    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/Interpreter/Interpreter.java", "stars": "2", "class": {"name": "Interpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "number", "params": ["AST_Node", "Environment"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int number(AST_Node tree, Environment env){        return Integer.parseInt(tree.value);    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/Interpreter/Interpreter.java", "stars": "2", "class": {"name": "Interpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eval_condition", "params": ["AST_Node", "Environment"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean eval_condition(AST_Node tree, Environment env) throws Exception {        int a = eval_exp(tree.children.get(0),env);        int b = eval_exp(tree.children.get(2),env);        return eval_comparator(tree.children.get(1),a,b);    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/Interpreter/Interpreter.java", "stars": "2", "class": {"name": "Interpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eval_comparator", "params": ["AST_Node", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean eval_comparator(AST_Node tree,int a, int b) {        tree=tree.children.get(0);        if(tree.name.equals(\"equals\"))            return a==b;        else if(tree.name.equals(\"greaterThanEqual\"))            return a>=b;        else if(tree.name.equals(\"lesserThanEqual\"))            return a<=b;        else if(tree.name.equals(\"lesserThan\"))            return a<b;        else if(tree.name.equals(\"greaterThan\"))            return a>b;        //unknown operator        return true;    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/Interpreter/Interpreter.java", "stars": "2", "class": {"name": "Interpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eval_optional_params", "params": ["AST_Node", "Environment"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "List<Variable>", "snippet": "    private List<Variable> eval_optional_params(AST_Node tree, Environment env) throws Exception {        if(tree.children.size()==1){          return new ArrayList<>();        }        else{            List<Variable> ans= eval_params(tree.children.get(1),env);            int a= eval_exp(tree.children.get(0),env);            ans.add(0,new Variable(\"number\",a+\"\"));            return ans;        }    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/Interpreter/Interpreter.java", "stars": "2", "class": {"name": "Interpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eval_params", "params": ["AST_Node", "Environment"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "List<Variable>", "snippet": "    private List<Variable> eval_params(AST_Node tree, Environment env) throws Exception {        if(tree.children.size()==1){            return new ArrayList<>();        }        else{            List<Variable> ans= eval_params(tree.children.get(2),env);            int a= eval_exp(tree.children.get(1),env);            ans.add(0,new Variable(\"number\",a+\"\"));            return ans;        }    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/Interpreter/Interpreter.java", "stars": "2", "class": {"name": "Interpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eval_functional_definition_optional_params", "params": ["AST_Node", "Environment"], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "    private List<String>   eval_functional_definition_optional_params(AST_Node tree, Environment env){        if(tree.children.size()==1)        {            return new ArrayList<>();        }        else{            List<String> ans=eval_functional_definition_params(tree.children.get(1),env);            ans.add(0,tree.children.get(0).value);            return ans;        }    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/Interpreter/Interpreter.java", "stars": "2", "class": {"name": "Interpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eval_functional_definition_params", "params": ["AST_Node", "Environment"], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "    private List<String> eval_functional_definition_params(AST_Node tree, Environment env) {        if(tree.children.size()==1){            return new ArrayList<>();        }        else{            List<String> ans=eval_functional_definition_params(tree.children.get(2),env);            ans.add(0,tree.children.get(1).value);            return ans;        }    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/Interpreter/Interpreter.java", "stars": "2", "class": {"name": "Interpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eval_function_call", "params": ["AST_Node", "Environment"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void eval_function_call(AST_Node tree, Environment env) throws Exception {        Function function=env.functionLookUp(tree.children.get(0).value);        List<Variable> params=eval_optional_params(tree.children.get(2),env);        if(params.size()!=function.fparam.size()){            throw new Exception(tree.children.get(0).name+\" expects \"+function.fparam.size()+\" number of parameters but \"+params.size()+\" number of paramaters are be passed\");        }        Environment new_env=new Environment(function.env);        for(int i=0;i<function.fparam.size();i++){            new_env.addVariable(function.fparam.get(i),params.get(i));        }        try {            eval(function.fbody, new_env);        }        catch(Exception e){        }    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/Interpreter/Interpreter.java", "stars": "2", "class": {"name": "Interpreter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void setUp() {        ((Logger) LoggerFactory.getLogger(DistributionMasquePersistanceJdbc.class)).addAppender(loggingEventAppender);        distributionMasquePersistanceJdbc = new DistributionMasquePersistanceJdbc(                distributionMasqueDatabaseRepository,                distributionMasqueDatabaseMapper,                objectMapper,                ClockFixture.clock());    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/infrastructure/database/DistributionMasquePersistanceJdbcTest.java", "stars": "5", "class": {"name": "DistributionMasquePersistanceJdbcTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "tearDown", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void tearDown() {        ((Logger) LoggerFactory.getLogger(DistributionMasquePersistanceJdbc.class)).detachAppender(loggingEventAppender);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/infrastructure/database/DistributionMasquePersistanceJdbcTest.java", "stars": "5", "class": {"name": "DistributionMasquePersistanceJdbcTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "recupererParDemandeur_devrait_recuperer_les_distributions_masques_du_demandeur", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void recupererParDemandeur_devrait_recuperer_les_distributions_masques_du_demandeur() {        // Given        String demandeur = \"08c71b89ac55b6826a2daa9fe89edea26de\";        DistributionMasqueDatabase distributionMasqueDatabase1 = aDistributionMasqueDatabase(demandeur, ADULTE_USAGE_UNIQUE);        DistributionMasqueDatabase distributionMasqueDatabase2 = aDistributionMasqueDatabase(demandeur, ADULTE_REUTILISABLE);        DistributionMasque distributionMasque1 = aDistributionMasque();        DistributionMasque distributionMasque2 = aDistributionMasque();        LocalDateTime dateDistribution = ClockFixture.now().minusDays(15);        when(distributionMasqueDatabaseRepository.findByDemandeurAndDateDistributionIsGreaterThanEqual(demandeur, dateDistribution))                .thenReturn(List.of(distributionMasqueDatabase1, distributionMasqueDatabase2));        when(distributionMasqueDatabaseMapper.toDistributionMasque(distributionMasqueDatabase1)).thenReturn(distributionMasque1);        when(distributionMasqueDatabaseMapper.toDistributionMasque(distributionMasqueDatabase2)).thenReturn(distributionMasque2);        // When        List<DistributionMasque> distributionMasques = distributionMasquePersistanceJdbc.recupererParDemandeurSurLes15DerniersJours(demandeur);        // Then        assertThat(distributionMasques).containsExactlyInAnyOrder(distributionMasque1, distributionMasque2);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/infrastructure/database/DistributionMasquePersistanceJdbcTest.java", "stars": "5", "class": {"name": "DistributionMasquePersistanceJdbcTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "persister_devrait_sauvegarder_les_distributions_de_masques_en_base", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void persister_devrait_sauvegarder_les_distributions_de_masques_en_base() {        // Given        DistributionMasque distributionMasque1 = aDistributionMasque();        DistributionMasque distributionMasque2 = aDistributionMasque();        DistributionMasqueDatabase distributionMasqueDatabase1 = aDistributionMasqueDatabase(\"demandeur1\");        DistributionMasqueDatabase distributionMasqueDatabase2 = aDistributionMasqueDatabase(\"demandeur2\");        when(distributionMasqueDatabaseMapper.toDistributionMasqueDatabase(distributionMasque1)).thenReturn(distributionMasqueDatabase1);        when(distributionMasqueDatabaseMapper.toDistributionMasqueDatabase(distributionMasque2)).thenReturn(distributionMasqueDatabase2);        // When        distributionMasquePersistanceJdbc.persister(List.of(distributionMasque1, distributionMasque2));        // Then        verify(distributionMasqueDatabaseRepository).save(distributionMasqueDatabase1);        verify(distributionMasqueDatabaseRepository).save(distributionMasqueDatabase2);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/infrastructure/database/DistributionMasquePersistanceJdbcTest.java", "stars": "5", "class": {"name": "DistributionMasquePersistanceJdbcTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "persister_devrait_logger_la_distribution_de_masques_en_json", "params": [], "throws": ["JsonProcessingException"], "modifiers": [], "return_type": "void", "snippet": "    void persister_devrait_logger_la_distribution_de_masques_en_json() throws JsonProcessingException {        // Given        DistributionMasque distributionMasque = aDistributionMasque();        DistributionMasqueDatabase distributionMasqueDatabase = aDistributionMasqueDatabase();        when(distributionMasqueDatabaseMapper.toDistributionMasqueDatabase(distributionMasque)).thenReturn(distributionMasqueDatabase);        String distributionMasqueDatabaseJson = \"{\\\"dateDistribution\\\":\\\"2018-08-05T19:43:00\\\",\\\"nbMasques\\\":23,\\\"typeMasque\\\":\\\"USAGE_UNIQUE\\\",\\\"nbPersonnes\\\":1,\\\"modeSaisie\\\":\\\"MANUEL\\\",\\\"codePostal\\\":\\\"75001\\\",\\\"typeRemettant\\\":\\\"Mairie\\\"}\";        when(objectMapper.writeValueAsString(distributionMasqueDatabase)).thenReturn(distributionMasqueDatabaseJson);        // When        distributionMasquePersistanceJdbc.persister(List.of(distributionMasque));        // Then        verify(loggingEventAppender).doAppend(loggingEventArgumentCaptor.capture());        assertThat(loggingEventArgumentCaptor.getValue().getMessage()).isEqualTo(distributionMasqueDatabaseJson);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/infrastructure/database/DistributionMasquePersistanceJdbcTest.java", "stars": "5", "class": {"name": "DistributionMasquePersistanceJdbcTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "persister_devrait_logger_une_erreur_quand_le_log_de_distribution_echoue", "params": [], "throws": ["JsonProcessingException"], "modifiers": [], "return_type": "void", "snippet": "    void persister_devrait_logger_une_erreur_quand_le_log_de_distribution_echoue() throws JsonProcessingException {        // Given        DistributionMasque distributionMasque = aDistributionMasque();        DistributionMasqueDatabase distributionMasqueDatabase = aDistributionMasqueDatabase();        when(distributionMasqueDatabaseMapper.toDistributionMasqueDatabase(distributionMasque)).thenReturn(distributionMasqueDatabase);        doThrow(JsonProcessingException.class).when(objectMapper).writeValueAsString(distributionMasqueDatabase);        // When        distributionMasquePersistanceJdbc.persister(List.of(distributionMasque));        // Then        verify(loggingEventAppender).doAppend(loggingEventArgumentCaptor.capture());        assertThat(loggingEventArgumentCaptor.getValue().getMessage()).isEqualTo(\"Erreur lors de la production de log de distribution de masque\");    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/infrastructure/database/DistributionMasquePersistanceJdbcTest.java", "stars": "5", "class": {"name": "DistributionMasquePersistanceJdbcTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        write_utf_8();    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/java2/Stream/OutputStreamWriterDemo.java", "stars": "2", "class": {"name": "OutputStreamWriterDemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "write_utf_8", "params": [], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void write_utf_8() throws IOException {        //1\u3001\u521b\u5efa OutputStreamWriter \u5bf9\u8c61\uff0c\u6784\u9020\u65b9\u6cd5\u4e2d\u4f20\u9012\u5b57\u8282\u8f93\u51fa\u6d41\u548c\u6307\u5b9a\u7684\u7f16\u7801\u8868\u540d\u79f0        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(\"/Users/chengcheng/Desktop/test/abc/abc.txt\"), \"utf-8\");        //2\u3001\u4f7f\u7528 OutputStreamWriter \u5bf9\u8c61\u4e2d\u7684 write \u65b9\u6cd5\uff0c\u628a\u5b57\u7b26\u8f6c\u6362\u4e3a\u5b57\u8282\u5b58\u50a8\u7f13\u51b2\u533a\u4e2d\uff08\u7f16\u7801\uff09        osw.write(\"\u4f60\u597d\");        //3\u3001\u4f7f\u7528 OutputStreamWriter \u5bf9\u8c61\u4e2d\u7684 flush \u65b9\u6cd5\uff0c\u628a\u5185\u5b58\u7f13\u51b2\u533a\u4e2d\u7684\u5b57\u8282\u5237\u65b0\u5230\u6587\u4ef6\u4e2d\uff08\u4f7f\u7528\u5b57\u8282\u6d41\u5199\u5b57\u8282\u7684\u8fc7\u7a0b\uff09        osw.flush();        //4\u3001\u91ca\u653e\u8d44\u6e90        osw.close();    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/java2/Stream/OutputStreamWriterDemo.java", "stars": "2", "class": {"name": "OutputStreamWriterDemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onAnimationUpdate", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAnimationUpdate (android.view.View p0)\t{\t\tn_onAnimationUpdate (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/ViewPropertyAnimatorUpdateListenerImplementor.java", "stars": "2", "class": {"name": "ViewPropertyAnimatorUpdateListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAnimationUpdate", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAnimationUpdate (android.view.View p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/ViewPropertyAnimatorUpdateListenerImplementor.java", "stars": "2", "class": {"name": "ViewPropertyAnimatorUpdateListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/ViewPropertyAnimatorUpdateListenerImplementor.java", "stars": "2", "class": {"name": "ViewPropertyAnimatorUpdateListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/ViewPropertyAnimatorUpdateListenerImplementor.java", "stars": "2", "class": {"name": "ViewPropertyAnimatorUpdateListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "getKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getKey() {        return key;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/vm/KeyAndPasswordVM.java", "stars": "2", "class": {"name": "KeyAndPasswordVM", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setKey", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setKey(String key) {        this.key = key;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/vm/KeyAndPasswordVM.java", "stars": "2", "class": {"name": "KeyAndPasswordVM", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNewPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getNewPassword() {        return newPassword;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/vm/KeyAndPasswordVM.java", "stars": "2", "class": {"name": "KeyAndPasswordVM", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNewPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNewPassword(String newPassword) {        this.newPassword = newPassword;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/vm/KeyAndPasswordVM.java", "stars": "2", "class": {"name": "KeyAndPasswordVM", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSelf", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SQL", "snippet": "  public SQL getSelf() {    return this;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/SQL.java", "stars": "15", "class": {"name": "SQL", "extends": "AbstractSQL", "implements": null, "modifiers": ["public"]}}, {"method_name": "getField1", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "  public Long getField1() {    return field1;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/overwritingproperties/Bar.java", "stars": "15", "class": {"name": "Bar", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setField1", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setField1(Long field1) {    this.field1 = field1;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/overwritingproperties/Bar.java", "stars": "15", "class": {"name": "Bar", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "tokenStore", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TokenStore", "snippet": "    public TokenStore tokenStore() {        //JWT\u4ee4\u724c\u5b58\u50a8\u65b9\u6848        return new JwtTokenStore(jwtAccessTokenConverter());    }", "url": "https://raw.githubusercontent.com/okhurley/oauth2/master/oauth2_uaa/src/main/java/com/okhurley/uaa/config/TokenConfig.java", "stars": "2", "class": {"name": "TokenConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "jwtAccessTokenConverter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JwtAccessTokenConverter", "snippet": "    public JwtAccessTokenConverter jwtAccessTokenConverter() {        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();        converter.setSigningKey(SIGNING_KEY); //\u5bf9\u79f0\u79d8\u94a5\uff0c\u8d44\u6e90\u670d\u52a1\u5668\u4f7f\u7528\u8be5\u79d8\u94a5\u6765\u9a8c\u8bc1        return converter;    }", "url": "https://raw.githubusercontent.com/okhurley/oauth2/master/oauth2_uaa/src/main/java/com/okhurley/uaa/config/TokenConfig.java", "stars": "2", "class": {"name": "TokenConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getForegroundColorCode", "params": ["ILoggingEvent"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getForegroundColorCode(ILoggingEvent iLoggingEvent) {    switch (iLoggingEvent.getLevel().toInt()) {      case Level.ERROR_INT:        return ANSIConstants.RED_FG;      case Level.WARN_INT:        return ANSIConstants.YELLOW_FG;      case Level.INFO_INT:        return ANSIConstants.GREEN_FG;      case Level.DEBUG_INT:        return ANSIConstants.MAGENTA_FG;      default:        return null;    }  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/ansi/logback/LogBackAnsiConverter.java", "stars": "3", "class": {"name": "LogBackAnsiConverter", "extends": "ForegroundCompositeConverterBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBatchUpdateException", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BatchUpdateException", "snippet": "  public BatchUpdateException getBatchUpdateException() {    return batchUpdateException;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BatchExecutorException.java", "stars": "15", "class": {"name": "BatchExecutorException", "extends": "ExecutorException", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSuccessfulBatchResults", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<BatchResult>", "snippet": "  public List<BatchResult> getSuccessfulBatchResults() {    return successfulBatchResults;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BatchExecutorException.java", "stars": "15", "class": {"name": "BatchExecutorException", "extends": "ExecutorException", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFailingSqlStatement", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getFailingSqlStatement() {    return batchResult.getSql();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BatchExecutorException.java", "stars": "15", "class": {"name": "BatchExecutorException", "extends": "ExecutorException", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFailingStatementId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getFailingStatementId() {    return batchResult.getMappedStatement().getId();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BatchExecutorException.java", "stars": "15", "class": {"name": "BatchExecutorException", "extends": "ExecutorException", "implements": null, "modifiers": ["public"]}}, {"method_name": "send", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String send(String[] mail) {\t\tProperties properties = new Properties();\t\tproperties.put(\"mail.transport.protocol\", \"smtp\");// \u8fde\u63a5\u534f\u8bae        properties.put(\"mail.smtp.host\", \"smtp.exmail.qq.com\");// \u4e3b\u673a\u540d        properties.put(\"mail.smtp.port\", \"587\");// \u7aef\u53e3\u53f7        properties.put(\"mail.smtp.auth\", \"true\");//\u8bbe\u7f6esmtp\u662f\u5426\u9700\u8981\u8ba4\u8bc1        properties.put(\"mail.smtp.ssl.enable\", \"true\");// \u8bbe\u7f6e\u662f\u5426\u4f7f\u7528ssl\u5b89\u5168\u8fde\u63a5 ---\u4e00\u822c\u90fd\u4f7f\u7528        properties.put(\"mail.debug\", \"false\");// \u8bbe\u7f6e\u662f\u5426\u663e\u793adebug\u4fe1\u606f true \u4f1a\u5728\u63a7\u5236\u53f0\u663e\u793a\u76f8\u5173\u4fe1\u606f        try{            Session session = Session.getInstance(properties);            Message message = new MimeMessage(session);            message.setFrom(new InternetAddress(Data.fromMail));            message.setRecipient(Message.RecipientType.TO, new InternetAddress(Data.toMail));            message.setSubject(mail[0]);            message.setText(mail[1]);            message.setSentDate(new Date());            Transport transport = session.getTransport();            transport.connect(Data.fromMail, Data.fromMailPw);//\u767b\u5f55\u53d1\u4fe1\u8d26\u53f7            transport.sendMessage(message, message.getAllRecipients());            transport.close();            return \"\u90ae\u4ef6\u53d1\u9001\u6210\u529f!\";        }catch (Exception e){            return \"\u90ae\u4ef6\u53d1\u9001\u5931\u8d25!\";        }\t}", "url": "https://raw.githubusercontent.com/meethigher/cpdaily-submit/master/SendMail.java", "stars": "2", "class": {"name": "SendMail", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(EurekaApplication.class);    }", "url": "https://raw.githubusercontent.com/okhurley/oauth2/master/oauth2_eureka/src/main/java/com/okhurley/eureka/EurekaApplication.java", "stars": "2", "class": {"name": "EurekaApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPropertyOfVolume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPropertyOfVolume() {        String m = Application.getProperties().getProperty(PROPERTY_SOUND_VOLUME);        if (m == null) {            return DEFAULT_VOLUME;        }        else {            int value;            try {                value = Integer.parseInt(m);            }            catch (NumberFormatException e) {                value = DEFAULT_VOLUME;            }            return value;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractSoundProcessor.java", "stars": "4", "class": {"name": "AbstractSoundProcessor", "extends": "Thread", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "setPropertyOfVolume", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPropertyOfVolume(int volume) {        setVolume(volume);        Application.getProperties().setProperty(PROPERTY_SOUND_VOLUME, Integer.toString(volume));    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractSoundProcessor.java", "stars": "4", "class": {"name": "AbstractSoundProcessor", "extends": "Thread", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "setVolume", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setVolume(int volume) {        this.volume = volume;        this.amplitude = calculateAmplitude(volume) * (Math.pow(2, SAMPLING_BIT_LENGTH - 1) - 1);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractSoundProcessor.java", "stars": "4", "class": {"name": "AbstractSoundProcessor", "extends": "Thread", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "setLineOn", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLineOn() {        status = 1;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractSoundProcessor.java", "stars": "4", "class": {"name": "AbstractSoundProcessor", "extends": "Thread", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "setLineOff", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLineOff() {        status = 0;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractSoundProcessor.java", "stars": "4", "class": {"name": "AbstractSoundProcessor", "extends": "Thread", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "calculateAmplitude", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "double", "snippet": "    private double calculateAmplitude(int volume) {        if (volume == 0) {            return 0;        }        else {            double dB = COEFF * (Math.log10(volume) - 2.0);            double amplitude = Math.pow(10.0, Math.log10(2.0) / 3 * dB) * 0.8;            return amplitude;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractSoundProcessor.java", "stars": "4", "class": {"name": "AbstractSoundProcessor", "extends": "Thread", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "setFrequency", "params": ["long", "double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFrequency(long time, double frequency) {        computer.getTimeManager().addEvent(time, new ChangeFrequencyCommand(frequency));    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractSoundProcessor.java", "stars": "4", "class": {"name": "AbstractSoundProcessor", "extends": "Thread", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "changeFrequency", "params": ["double"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void changeFrequency(double frequency);    public abstract float tick();    @Override    public void reset() {        Thread.State state = this.getState();        if (state == State.NEW || state == State.TERMINATED) {            this.start();        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractSoundProcessor.java", "stars": "4", "class": {"name": "AbstractSoundProcessor", "extends": "Thread", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "tick", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "float", "snippet": "    public abstract float tick();    @Override    public void reset() {        Thread.State state = this.getState();        if (state == State.NEW || state == State.TERMINATED) {            this.start();        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractSoundProcessor.java", "stars": "4", "class": {"name": "AbstractSoundProcessor", "extends": "Thread", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reset() {        Thread.State state = this.getState();        if (state == State.NEW || state == State.TERMINATED) {            this.start();        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractSoundProcessor.java", "stars": "4", "class": {"name": "AbstractSoundProcessor", "extends": "Thread", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "execute", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute() {        // \u5225\u30b9\u30ec\u30c3\u30c9\u306b\u3066\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u5b9f\u884c\u3055\u308c\u308b\u305f\u3081\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u306e\u51e6\u7406\u306f\u4e0d\u8981\u3002    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractSoundProcessor.java", "stars": "4", "class": {"name": "AbstractSoundProcessor", "extends": "Thread", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        while (true) {            int len = 20;            for (int t = 0; t < len; t++) {                buffer[t] = (byte)(status * amplitude * tick());            }            line.write(buffer, 0, len);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractSoundProcessor.java", "stars": "4", "class": {"name": "AbstractSoundProcessor", "extends": "Thread", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "execute", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void execute() {            changeFrequency(frequency);        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractSoundProcessor.java", "stars": "4", "class": {"name": "ChangeFrequencyCommand", "extends": null, "implements": ["EventCommand"], "modifiers": []}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String toString() {            return String.format(\"change frequency to %d\", (int)frequency);        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractSoundProcessor.java", "stars": "4", "class": {"name": "ChangeFrequencyCommand", "extends": null, "implements": ["EventCommand"], "modifiers": []}}, {"method_name": "getMainName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMainName() {        return mainName;    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/model/Sandwich.java", "stars": "2", "class": {"name": "Sandwich", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMainName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMainName(String mainName) {        this.mainName = mainName;    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/model/Sandwich.java", "stars": "2", "class": {"name": "Sandwich", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAlsoKnownAs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getAlsoKnownAs() {        return alsoKnownAs;    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/model/Sandwich.java", "stars": "2", "class": {"name": "Sandwich", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAlsoKnownAs", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAlsoKnownAs(List<String> alsoKnownAs) {        this.alsoKnownAs = alsoKnownAs;    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/model/Sandwich.java", "stars": "2", "class": {"name": "Sandwich", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlaceOfOrigin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPlaceOfOrigin() {        return placeOfOrigin;    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/model/Sandwich.java", "stars": "2", "class": {"name": "Sandwich", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPlaceOfOrigin", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlaceOfOrigin(String placeOfOrigin) {        this.placeOfOrigin = placeOfOrigin;    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/model/Sandwich.java", "stars": "2", "class": {"name": "Sandwich", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return description;    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/model/Sandwich.java", "stars": "2", "class": {"name": "Sandwich", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDescription(String description) {        this.description = description;    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/model/Sandwich.java", "stars": "2", "class": {"name": "Sandwich", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getImage() {        return image;    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/model/Sandwich.java", "stars": "2", "class": {"name": "Sandwich", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setImage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setImage(String image) {        this.image = image;    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/model/Sandwich.java", "stars": "2", "class": {"name": "Sandwich", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIngredients", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getIngredients() {        return ingredients;    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/model/Sandwich.java", "stars": "2", "class": {"name": "Sandwich", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIngredients", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIngredients(List<String> ingredients) {        this.ingredients = ingredients;    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/model/Sandwich.java", "stars": "2", "class": {"name": "Sandwich", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getActiveHeartBeat", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getActiveHeartBeat() {        return activeHeartBeat;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setActiveHeartBeat", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setActiveHeartBeat(Long activeHeartBeat) {        this.activeHeartBeat = activeHeartBeat;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIdleHeartBeat", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getIdleHeartBeat() {        return idleHeartBeat;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIdleHeartBeat", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIdleHeartBeat(Long idleHeartBeat) {        this.idleHeartBeat = idleHeartBeat;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWaitAllocTimeInSec", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getWaitAllocTimeInSec() {        return waitAllocTimeInSec;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobLogDir", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getJobLogDir() {        return jobLogDir;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobLogHistory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getJobLogHistory() {        return jobLogHistory;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEngineDataXHome", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEngineDataXHome() {        return engineDataXHome;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEngineDataXLogFile", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEngineDataXLogFile() {        return engineDataXLogFile;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEngineDataXConfFile", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEngineDataXConfFile() {        return engineDataXConfFile;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEngineDataXProcSrc", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEngineDataXProcSrc() {        return engineDataXProcSrc;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNetworkInterface", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getNetworkInterface() {        return networkInterface;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEngineSqoopShell", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEngineSqoopShell() {        return engineSqoopShell;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobLogLimitNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getJobLogLimitNum() {        return jobLogLimitNum;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLinuxSudoUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLinuxSudoUser() {        return linuxSudoUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEngineDataXPythonShell", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEngineDataXPythonShell() {        return engineDataXPythonShell;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEngineDataXPythonScript", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEngineDataXPythonScript() {        return engineDataXPythonScript;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEngineDataXJavaMainClass", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEngineDataXJavaMainClass() {        return engineDataXJavaMainClass;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEngineDataXJavaClassPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEngineDataXJavaClassPath() {        return engineDataXJavaClassPath;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEngineDataXMethod", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEngineDataXMethod() {        return engineDataXMethod;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEngineDataXJavaLogConf", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEngineDataXJavaLogConf() {        return engineDataXJavaLogConf;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isNodeDefault", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isNodeDefault() {        return nodeDefault;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNodeTabs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getNodeTabs() {        return nodeTabs;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/ExecutorConfiguration.java", "stars": "23", "class": {"name": "ExecutorConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "UmsAdminPermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNull() {            addCriterion(\"id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNotNull() {            addCriterion(\"id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdEqualTo(Long value) {            addCriterion(\"id =\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotEqualTo(Long value) {            addCriterion(\"id <>\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThan(Long value) {            addCriterion(\"id >\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"id >=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThan(Long value) {            addCriterion(\"id <\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThanOrEqualTo(Long value) {            addCriterion(\"id <=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIn(List<Long> values) {            addCriterion(\"id in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotIn(List<Long> values) {            addCriterion(\"id not in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdBetween(Long value1, Long value2) {            addCriterion(\"id between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotBetween(Long value1, Long value2) {            addCriterion(\"id not between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdIsNull() {            addCriterion(\"admin_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdIsNotNull() {            addCriterion(\"admin_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdEqualTo(Long value) {            addCriterion(\"admin_id =\", value, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdNotEqualTo(Long value) {            addCriterion(\"admin_id <>\", value, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdGreaterThan(Long value) {            addCriterion(\"admin_id >\", value, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"admin_id >=\", value, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdLessThan(Long value) {            addCriterion(\"admin_id <\", value, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdLessThanOrEqualTo(Long value) {            addCriterion(\"admin_id <=\", value, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdIn(List<Long> values) {            addCriterion(\"admin_id in\", values, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdNotIn(List<Long> values) {            addCriterion(\"admin_id not in\", values, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdBetween(Long value1, Long value2) {            addCriterion(\"admin_id between\", value1, value2, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminIdNotBetween(Long value1, Long value2) {            addCriterion(\"admin_id not between\", value1, value2, \"adminId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdIsNull() {            addCriterion(\"permission_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdIsNotNull() {            addCriterion(\"permission_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdEqualTo(Long value) {            addCriterion(\"permission_id =\", value, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdNotEqualTo(Long value) {            addCriterion(\"permission_id <>\", value, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdGreaterThan(Long value) {            addCriterion(\"permission_id >\", value, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"permission_id >=\", value, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdLessThan(Long value) {            addCriterion(\"permission_id <\", value, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdLessThanOrEqualTo(Long value) {            addCriterion(\"permission_id <=\", value, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdIn(List<Long> values) {            addCriterion(\"permission_id in\", values, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdNotIn(List<Long> values) {            addCriterion(\"permission_id not in\", values, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdBetween(Long value1, Long value2) {            addCriterion(\"permission_id between\", value1, value2, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdNotBetween(Long value1, Long value2) {            addCriterion(\"permission_id not between\", value1, value2, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeIsNull() {            addCriterion(\"type is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeIsNotNull() {            addCriterion(\"type is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeEqualTo(Integer value) {            addCriterion(\"type =\", value, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeNotEqualTo(Integer value) {            addCriterion(\"type <>\", value, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeGreaterThan(Integer value) {            addCriterion(\"type >\", value, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeGreaterThanOrEqualTo(Integer value) {            addCriterion(\"type >=\", value, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeLessThan(Integer value) {            addCriterion(\"type <\", value, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeLessThanOrEqualTo(Integer value) {            addCriterion(\"type <=\", value, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeIn(List<Integer> values) {            addCriterion(\"type in\", values, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeNotIn(List<Integer> values) {            addCriterion(\"type not in\", values, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeBetween(Integer value1, Integer value2) {            addCriterion(\"type between\", value1, value2, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeNotBetween(Integer value1, Integer value2) {            addCriterion(\"type not between\", value1, value2, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminPermissionRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(null)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedRoseBlock.java", "stars": "2", "class": {"name": "PottedRoseBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedRoseBlock.java", "stars": "2", "class": {"name": "PottedRoseBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "isNormalCube", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean isNormalCube(BlockState state, IBlockReader worldIn, BlockPos pos) {\t\t\treturn false;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedRoseBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "propagatesSkylightDown", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean propagatesSkylightDown(BlockState state, IBlockReader reader, BlockPos pos) {\t\t\treturn true;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedRoseBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getShape", "params": ["BlockState", "IBlockReader", "BlockPos", "ISelectionContext"], "throws": null, "modifiers": ["public"], "return_type": "VoxelShape", "snippet": "\t\tpublic VoxelShape getShape(BlockState state, IBlockReader world, BlockPos pos, ISelectionContext context) {\t\t\treturn VoxelShapes.create(0.312D, 0D, 0.312D, 0.688D, 0.375D, 0.688D);\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedRoseBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "tickRate", "params": ["IWorldReader"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int tickRate(IWorldReader world) {\t\t\treturn 0;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedRoseBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(RoseBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedRoseBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMaterialColor", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "MaterialColor", "snippet": "\t\tpublic MaterialColor getMaterialColor(BlockState state, IBlockReader blockAccess, BlockPos pos) {\t\t\treturn MaterialColor.STONE;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedRoseBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPushReaction", "params": ["BlockState"], "throws": null, "modifiers": ["public"], "return_type": "PushReaction", "snippet": "\t\tpublic PushReaction getPushReaction(BlockState state) {\t\t\treturn PushReaction.DESTROY;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedRoseBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(Blocks.FLOWER_POT, (int) (1)));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedRoseBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "removedByPlayer", "params": ["BlockState", "World", "BlockPos", "PlayerEntity", "boolean", "IFluidState"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean removedByPlayer(BlockState state, World world, BlockPos pos, PlayerEntity entity, boolean willHarvest, IFluidState fluid) {\t\t\tboolean retval = super.removedByPlayer(state, world, pos, entity, willHarvest, fluid);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tRosePlayerProcedure.executeProcedure($_dependencies);\t\t\t}\t\t\treturn retval;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedRoseBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onExplosionDestroy", "params": ["World", "BlockPos", "Explosion"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onExplosionDestroy(World world, BlockPos pos, Explosion e) {\t\t\tsuper.onExplosionDestroy(world, pos, e);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tRoseExplosionProcedure.executeProcedure($_dependencies);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedRoseBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onBlockActivated", "params": ["BlockState", "World", "BlockPos", "PlayerEntity", "Hand", "BlockRayTraceResult"], "throws": null, "modifiers": ["public"], "return_type": "ActionResultType", "snippet": "\t\tpublic ActionResultType onBlockActivated(BlockState state, World world, BlockPos pos, PlayerEntity entity, Hand hand,\t\t\t\tBlockRayTraceResult hit) {\t\t\tsuper.onBlockActivated(state, world, pos, entity, hand, hit);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\tDirection direction = hit.getFace();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"entity\", entity);\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tRightClickedRoseProcedure.executeProcedure($_dependencies);\t\t\t}\t\t\treturn ActionResultType.SUCCESS;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedRoseBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/BirchParquetBlock.java", "stars": "2", "class": {"name": "BirchParquetBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/BirchParquetBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tint n;\t\tScanner sc = new Scanner(System.in);\t\tSystem.out.println(\"enter no of rows:\");\t\tn = sc.nextInt();\t\tint k;\t\tfor(int i = 1;i <= n; i++) {\t\t\tk = 0;\t\t\tfor(int j = 1 ;j <= i ; j++) {\t\t\t\twhile(k < n-i) { \t\t\t\t\tSystem.out.print(\" \");\t\t\t\t\tk = k + 1;\t\t\t\t}\t\t\t\tif(j == i) {\t\t\t\t\tSystem.out.print(\"*\");\t\t\t\t}\t\t\t\telse {\t\t\t\t\tSystem.out.print(\"* \");\t\t\t\t}\t\t\t}\t\t\tSystem.out.print(\"\\n\");\t\t}\t\t//second part:-\t\tfor(int i = 1; i <= n; i++) {\t\t\tk = 0;\t\t\tfor(int j = 1; j <= n-i;j++) {\t\t\t\twhile(k != i) {\t\t\t\t\tSystem.out.print(\" \");\t\t\t\t\tk++;\t\t\t\t}\t\t\t\tif(j == n-i) {\t\t\t\t\tSystem.out.print(\"*\");\t\t\t\t}\t\t\t\telse {\t\t\t\t\tSystem.out.print(\"* \");\t\t\t\t}\t\t\t}\t\t\tSystem.out.print(\"\\n\");\t\t}\t\tsc.close();\t}", "url": "https://raw.githubusercontent.com/likith22/java-programs/master/Diamond.java", "stars": "3", "class": {"name": "Diamond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasWrapperFor", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasWrapperFor(Object object) {    return false;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/DefaultObjectWrapperFactory.java", "stars": "15", "class": {"name": "DefaultObjectWrapperFactory", "extends": null, "implements": ["ObjectWrapperFactory"], "modifiers": ["public"]}}, {"method_name": "getWrapperFor", "params": ["MetaObject", "Object"], "throws": null, "modifiers": ["public"], "return_type": "ObjectWrapper", "snippet": "  public ObjectWrapper getWrapperFor(MetaObject metaObject, Object object) {    throw new ReflectionException(\"The DefaultObjectWrapperFactory should never be called to provide an ObjectWrapper.\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/DefaultObjectWrapperFactory.java", "stars": "15", "class": {"name": "DefaultObjectWrapperFactory", "extends": null, "implements": ["ObjectWrapperFactory"], "modifiers": ["public"]}}, {"method_name": "exibirPaginaPrincipal", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String exibirPaginaPrincipal(HttpServletRequest request, HttpServletResponse response) {\t\treturn \"restrict/home.jsp\";\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/BookAction.java", "stars": "2", "class": {"name": "BookAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "prepararAlteracao", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String prepararAlteracao(HttpServletRequest request, HttpServletResponse response) {\t\ttry {\t\t\tString idStr = request.getParameter(\"id\");\t\t\tLong idLong = new Long((idStr == null ? \"-1\" : idStr));\t\t\tBook u = (Book) bookDAO.findById(idLong);\t\t\trequest.setAttribute(\"book\", u);\t\t\treturn \"restrict/book/edit.jsp\";\t\t} catch (Exception e) {\t\t\trequest.setAttribute(\"msgexception\", isNull(e) ? \"Erro com valor nulo\" : e.getMessage() ) ;\t\t\tthrow new LibrarySystemException(e);\t\t}\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/BookAction.java", "stars": "2", "class": {"name": "BookAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "prepararCadastro", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String prepararCadastro(HttpServletRequest request, HttpServletResponse response) {\t\trequest.setAttribute(\"book\", new Book());\t\treturn \"restrict/book/edit.jsp\";\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/BookAction.java", "stars": "2", "class": {"name": "BookAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "cadastrar", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String cadastrar(HttpServletRequest request, HttpServletResponse response) {\t\ttry {\t\t\tBook book = new Book();\t        book.setAuthor(request.getParameter(\"author\"));\t        \t        book.setTitle(request.getParameter(\"title\"));\t        \t        book.setSummary(request.getParameter(\"summary\"));\t        \t        String ano = request.getParameter(\"ano\");\t        book.setAno(ano != null ? Integer.parseInt(ano) : null );\t\t\tbookDAO.save(book);\t\t\trequest.setAttribute(\"books\", bookDAO.findAll());\t\t\trequest.setAttribute(\"msgSucesso\", \"Book cadastrado com sucesso\");\t\t\treturn \"restrict/book/list.jsp\";\t\t} catch (Exception e) {\t\t\trequest.setAttribute(\"msgexception\", isNull(e) ? \"Erro com valor nulo\" : e.getMessage() ) ;\t\t\tthrow new LibrarySystemException(e);\t\t}\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/BookAction.java", "stars": "2", "class": {"name": "BookAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "cadastrarse", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String cadastrarse(HttpServletRequest request, HttpServletResponse response) {\t\ttry {\t\t\tBook book = new Book();\t        book.setAuthor(request.getParameter(\"author\"));\t        \t        book.setTitle(request.getParameter(\"title\"));\t        \t        book.setSummary(request.getParameter(\"summary\"));\t        \t        String ano = request.getParameter(\"ano\");\t        book.setAno(ano != null ? Integer.parseInt(ano) : null );\t\t\tbookDAO.save(book);\t\t\trequest.setAttribute(\"books\", bookDAO.findAll());\t\t\trequest.setAttribute(\"msgSucesso\", \"Book cadastrado com sucesso\");\t\t\treturn new LoginAction().entrar(request, response);\t\t} catch (Exception e) {\t\t\trequest.setAttribute(\"msgexception\", isNull(e) ? \"Erro com valor nulo\" : e.getMessage() ) ;\t\t\tthrow new LibrarySystemException(e);\t\t}\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/BookAction.java", "stars": "2", "class": {"name": "BookAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "prepararCadastrarse", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String prepararCadastrarse(HttpServletRequest request, HttpServletResponse response) {\t\trequest.setAttribute(\"book\", new Book());\t\treturn \"restrict/book/edit.jsp\";\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/BookAction.java", "stars": "2", "class": {"name": "BookAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "alterar", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String alterar(HttpServletRequest request, HttpServletResponse response) {\t\ttry {\t\t\tString idStr = request.getParameter(\"id\");\t\t\tBook book = new Book();\t        book.setId(new Long(idStr == null ? \"-1\" : idStr));\t        \t        book.setAuthor(request.getParameter(\"author\"));\t        \t        book.setTitle(request.getParameter(\"title\"));\t        \t        book.setSummary(request.getParameter(\"summary\"));\t        String ano = request.getParameter(\"ano\");\t        book.setAno(ano != null ? Integer.parseInt(ano) : null );\t        bookDAO.update(book);\t\t\trequest.setAttribute(\"msgSucesso\", \"Book alterado com sucesso\");\t\t\trequest.setAttribute(\"books\", bookDAO.findAll());\t\t} catch (Exception e) {\t\t\trequest.setAttribute(\"msgexception\", isNull(e) ? \"Erro com valor nulo\" : e.getMessage() ) ;\t\t\tthrow new LibrarySystemException(e);\t\t}\t\treturn \"restrict/book/list.jsp\";\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/BookAction.java", "stars": "2", "class": {"name": "BookAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "listar", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String listar(HttpServletRequest request, HttpServletResponse response) {\t\ttry {\t\t\trequest.setAttribute(\"books\", bookDAO.findAll());\t\t} catch (Exception e) {\t\t\trequest.setAttribute(\"msgexception\", isNull(e) ? \"Erro com valor nulo\" : e.getMessage() ) ;\t\t\tthrow new LibrarySystemException(e);\t\t}\t\treturn \"restrict/book/list.jsp\";\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/BookAction.java", "stars": "2", "class": {"name": "BookAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "listarSemLogar", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String listarSemLogar(HttpServletRequest request, HttpServletResponse response) {\t\ttry {\t\t\trequest.setAttribute(\"books\", bookDAO.findAll());\t\t} catch (Exception e) {\t\t\trequest.setAttribute(\"msgexception\", isNull(e) ? \"Erro com valor nulo\" : e.getMessage() ) ;\t\t\tthrow new LibrarySystemException(e);\t\t}\t\t\t\treturn \"public/lista_book_publico.jsp\";\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/BookAction.java", "stars": "2", "class": {"name": "BookAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "remover", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String remover(HttpServletRequest request, HttpServletResponse response) {\t\ttry {\t\t\tString idStr = request.getParameter(\"id\");\t\t\tBook book = new Book();\t\t\tbook.setId(new Long(idStr == null ? \"-1\" : idStr));\t\t\tbookDAO.remove(book);\t\t\trequest.setAttribute(\"books\", bookDAO.findAll());\t\t\trequest.setAttribute(\"msgSucesso\", \"Book removido com sucesso\");\t\t} catch (Exception e) {\t\t\trequest.setAttribute(\"msgexception\", isNull(e) ? \"Erro com valor nulo\" : e.getMessage() ) ;\t\t\tthrow new LibrarySystemException(e);\t\t}\t\treturn \"restrict/book/list.jsp\";\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/BookAction.java", "stars": "2", "class": {"name": "BookAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "isNull", "params": ["Exception"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isNull(Exception e) {\t\treturn e==null || e.getMessage ()== null || e.getMessage ().trim().contentEquals(\"null\");\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/control/actions/BookAction.java", "stars": "2", "class": {"name": "BookAction", "extends": "Action", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        //\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u5668ServerSocket,\u548c\u7cfb\u7edf\u8981\u6307\u5b9a\u7684\u7aef\u53e3\u53f7        ServerSocket server = new ServerSocket(8080);        /*            \u6d4f\u89c8\u5668\u89e3\u6790\u670d\u52a1\u5668\u56de\u5199\u7684html\u9875\u9762,\u9875\u9762\u4e2d\u5982\u679c\u6709\u56fe\u7247,\u90a3\u4e48\u6d4f\u89c8\u5668\u5c31\u4f1a\u5355\u72ec\u7684\u5f00\u542f\u4e00\u4e2a\u7ebf\u7a0b,\u8bfb\u53d6\u670d\u52a1\u5668\u7684\u56fe\u7247            \u6211\u4eec\u5c31\u7684\u8ba9\u670d\u52a1\u5668\u4e00\u76f4\u5904\u4e8e\u76d1\u542c\u72b6\u6001,\u5ba2\u6237\u7aef\u8bf7\u6c42\u4e00\u6b21,\u670d\u52a1\u5668\u5c31\u56de\u5199\u4e00\u6b21         */        while(true){            //\u4f7f\u7528accept\u65b9\u6cd5\u83b7\u53d6\u5230\u8bf7\u6c42\u7684\u5ba2\u6237\u7aef\u5bf9\u8c61(\u6d4f\u89c8\u5668)            Socket socket = server.accept();            new Thread(new Runnable() {                @Override                public void run() {                    try {                        //\u4f7f\u7528Socket\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5getInputStream,\u83b7\u53d6\u5230\u7f51\u7edc\u5b57\u8282\u8f93\u5165\u6d41InputStream\u5bf9\u8c61                        InputStream is = socket.getInputStream();                        //\u4f7f\u7528\u7f51\u7edc\u5b57\u8282\u8f93\u5165\u6d41InputStream\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5read\u8bfb\u53d6\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u4fe1\u606f                        /*byte[] bytes = new byte[1024];                        int len = 0;                        while((len = is.read(bytes))!=-1){                            System.out.println(new String(bytes,0,len));                        }*/                        //\u628ais\u7f51\u7edc\u5b57\u8282\u8f93\u5165\u6d41\u5bf9\u8c61,\u8f6c\u6362\u4e3a\u5b57\u7b26\u7f13\u51b2\u8f93\u5165\u6d41                        BufferedReader br = new BufferedReader(new InputStreamReader(is));                        //\u628a\u5ba2\u6237\u7aef\u8bf7\u6c42\u4fe1\u606f\u7684\u7b2c\u4e00\u884c\u8bfb\u53d6\u51fa\u6765 GET /11_Net/web/index.html HTTP/1.1                        String line = br.readLine();                        System.out.println(line);                        //\u628a\u8bfb\u53d6\u7684\u4fe1\u606f\u8fdb\u884c\u5207\u5272,\u53ea\u8981\u4e2d\u95f4\u90e8\u5206 /11_Net/web/index.html                        String[] arr = line.split(\" \");                        //\u628a\u8def\u5f84\u524d\u8fb9\u7684/\u53bb\u6389,\u8fdb\u884c\u622a\u53d6 11_Net/web/index.html                        String htmlpath = arr[1].substring(1);                        //\u521b\u5efa\u4e00\u4e2a\u672c\u5730\u5b57\u8282\u8f93\u5165\u6d41,\u6784\u9020\u65b9\u6cd5\u4e2d\u7ed1\u5b9a\u8981\u8bfb\u53d6\u7684html\u8def\u5f84                        FileInputStream fis = new FileInputStream(htmlpath);                        //\u4f7f\u7528Socket\u4e2d\u7684\u65b9\u6cd5getOutputStream\u83b7\u53d6\u7f51\u7edc\u5b57\u8282\u8f93\u51fa\u6d41OutputStream\u5bf9\u8c61                        OutputStream os = socket.getOutputStream();                        // \u5199\u5165HTTP\u534f\u8bae\u54cd\u5e94\u5934,\u56fa\u5b9a\u5199\u6cd5                        os.write(\"HTTP/1.1 200 OK\\r\\n\".getBytes());                        os.write(\"Content-Type:text/html\\r\\n\".getBytes());                        // \u5fc5\u987b\u8981\u5199\u5165\u7a7a\u884c,\u5426\u5219\u6d4f\u89c8\u5668\u4e0d\u89e3\u6790                        os.write(\"\\r\\n\".getBytes());                        //\u4e00\u8bfb\u4e00\u5199\u590d\u5236\u6587\u4ef6,\u628a\u670d\u52a1\u8bfb\u53d6\u7684html\u6587\u4ef6\u56de\u5199\u5230\u5ba2\u6237\u7aef                        int len = 0;                        byte[] bytes = new byte[1024];                        while((len = fis.read(bytes))!=-1){                            os.write(bytes,0,len);                        }                        //\u91ca\u653e\u8d44\u6e90                        fis.close();                        socket.close();                    }catch (IOException e){                        e.printStackTrace();                    }                }            }).start();        }        //server.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/22.%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/11_Net/src/com/itheima/demo04/BSTCP/TCPServerThread.java", "stars": "2", "class": {"name": "TCPServerThread", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String generate(String url) {        String extension = getExtension(url);        String name = ProxyCacheUtils.computeMD5(url);        return TextUtils.isEmpty(extension) ? name : name + \".\" + extension;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/Md5FileNameGenerator.java", "stars": "2", "class": {"name": "Md5FileNameGenerator", "extends": null, "implements": ["FileNameGenerator"], "modifiers": ["public"]}}, {"method_name": "getExtension", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getExtension(String url) {        int dotIndex = url.lastIndexOf('.');        int slashIndex = url.lastIndexOf('/');        return dotIndex != -1 && dotIndex > slashIndex && dotIndex + 2 + MAX_EXTENSION_LENGTH > url.length() ?                url.substring(dotIndex + 1, url.length()) : \"\";    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/Md5FileNameGenerator.java", "stars": "2", "class": {"name": "Md5FileNameGenerator", "extends": null, "implements": ["FileNameGenerator"], "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, OFFSET_DATE_TIME, null);    verify(ps).setObject(1, OFFSET_DATE_TIME);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/OffsetDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "OffsetDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getObject(\"column\", OffsetDateTime.class)).thenReturn(OFFSET_DATE_TIME);    assertEquals(OFFSET_DATE_TIME, TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/OffsetDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "OffsetDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getObject(\"column\", OffsetDateTime.class)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/OffsetDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "OffsetDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getObject(1, OffsetDateTime.class)).thenReturn(OFFSET_DATE_TIME);    assertEquals(OFFSET_DATE_TIME, TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/OffsetDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "OffsetDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getObject(1, OffsetDateTime.class)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/OffsetDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "OffsetDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getObject(1, OffsetDateTime.class)).thenReturn(OFFSET_DATE_TIME);    assertEquals(OFFSET_DATE_TIME, TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/OffsetDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "OffsetDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getObject(1, OffsetDateTime.class)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/OffsetDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "OffsetDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTitle() {        return title;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/BookEntry.java", "stars": "6", "class": {"name": "BookEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAuthors", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String[] getAuthors() {        return authors;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/BookEntry.java", "stars": "6", "class": {"name": "BookEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRating", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getRating() {        return rating;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/BookEntry.java", "stars": "6", "class": {"name": "BookEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getISBN", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getISBN() {        return ISBN;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/BookEntry.java", "stars": "6", "class": {"name": "BookEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPages", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPages() {        return pages;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/BookEntry.java", "stars": "6", "class": {"name": "BookEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        String output = this.title;        output += \"\\nby \";        for (int i = 0; i < this.authors.length; i++) {            output += authors[i];            if (i != this.authors.length - 1) {                output += \", \";            }        }        output += \"\\nRating: \" + String.format(\"%.2f\", this.rating);        output += \"\\nISBN: \" + this.ISBN;        output += \"\\n\" + Integer.toString(this.pages) + \" pages\";        return output;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/BookEntry.java", "stars": "6", "class": {"name": "BookEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object obj) {        if (obj == null) {            return false;        }        if (!(obj instanceof BookEntry)) {            return false;        }        BookEntry book = (BookEntry) obj;        // Value equality check        if (this.title.equals(book.getTitle()) &&            this.ISBN.equals(book.getISBN()) &&            Arrays.deepEquals(this.authors, book.getAuthors()) &&            this.rating == book.getRating() &&            this.pages == book.getPages()) {            return true;        }        else {            return false;        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/BookEntry.java", "stars": "6", "class": {"name": "BookEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        int result = Objects.hash(title, rating, ISBN, pages);        result = 31 * result + Arrays.hashCode(authors);        return result;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/BookEntry.java", "stars": "6", "class": {"name": "BookEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCraftItem", "params": ["CraftItemEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCraftItem(CraftItemEvent event) {\t\t// Pega o player que tentou realizar o crafiting\t\tPlayer player = (Player) event.getWhoClicked();\t\t// Pega o item que houve a tentativa de crafiting\t\tMaterial item = event.getInventory().getResult().getType();\t\t\t\t//S\u00f3 funciona no Survival\t\tif (player.getGameMode().equals(GameMode.SURVIVAL)) {\t\t\t// If para comparar se \u00e9 um crafting v\u00e1lido\t\t\tif (!WhitelistBlock.isValidCraft(item)) {\t\t\t\tMensagensUsuario.blockCraftMessageToUser(player, \"Voc\u00ea n\u00e3o pode craftar \" + item);\t\t\t\t// Canecela a a\u00e7\u00e3o de crafting para o case de ser um item inv\u00e1lido\t\t\t\tevent.setCancelled(true);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/argoninc/Whitelist_Craft_Place/master/src/main/java/com/github/argoninc/Listener/ListenerCraft.java", "stars": "2", "class": {"name": "ListenerCraft", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "onPlaceBlock", "params": ["BlockPlaceEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPlaceBlock(BlockPlaceEvent event) {\t\tPlayer player = event.getPlayer();\t\tMaterial item = event.getBlockPlaced().getType();\t\t//S\u00f3 funciona no Survival\t\tif (player.getGameMode().equals(GameMode.SURVIVAL)) {\t\t\t// If para comparar se \u00e9 um crafting v\u00e1lido\t\t\tif (!WhitelistBlock.isValidPlace(item)) {\t\t\t\tMensagensUsuario.blockPlaceMessageToUser(player, \"Voc\u00ea n\u00e3o pode colocar \" + item);\t\t\t\t// Canecela a a\u00e7\u00e3o de crafting para o case de ser um item inv\u00e1lido\t\t\t\tevent.setCancelled(true);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/argoninc/Whitelist_Craft_Place/master/src/main/java/com/github/argoninc/Listener/ListenerCraft.java", "stars": "2", "class": {"name": "ListenerCraft", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "onPlayerInteract", "params": ["PlayerInteractEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPlayerInteract(PlayerInteractEvent event) {\t\tPlayer player = event.getPlayer();\t\tMaterial itemMainHand = player.getInventory().getItemInMainHand().getType();\t\tMaterial itemSecondHand = player.getInventory().getItemInOffHand().getType();\t\t//S\u00f3 funciona no Survival\t\tif (player.getGameMode().equals(GameMode.SURVIVAL)) {\t\t\tif (event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) {\t\t\t\t//Compara nas duas m\u00e3os os itens\t\t\t\tif (!WhitelistBlock.isValidUse(itemMainHand) || !WhitelistBlock.isValidUse(itemSecondHand)) {\t\t\t\t\tMensagensUsuario.blockInteractMessageToUser(player,\t\t\t\t\t\t\t\"Voc\u00ea n\u00e3o pode usar esse item, recomenda-se descart\u00e1-lo\");\t\t\t\t\tevent.setCancelled(true);\t\t\t\t}\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/argoninc/Whitelist_Craft_Place/master/src/main/java/com/github/argoninc/Listener/ListenerCraft.java", "stars": "2", "class": {"name": "ListenerCraft", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "extractQueryFromFile", "params": ["Properties"], "throws": ["HiveViaAzkabanException"], "modifiers": ["private"], "return_type": "String", "snippet": "  private String extractQueryFromFile(Properties properties)      throws HiveViaAzkabanException {    String file = properties.getProperty(HIVE_QUERY_FILE);    if (file == null)      return null;    LOG.info(\"Attempting to read query from file: \" + file);    StringBuilder contents = new StringBuilder();    BufferedReader br = null;    try {      br = new BufferedReader(new FileReader(file));      String line;      while ((line = br.readLine()) != null) {        contents.append(line);        contents.append(System.getProperty(\"line.separator\"));      }    } catch (IOException e) {      throw new HiveViaAzkabanException(e);    } finally {      if (br != null)        try {          br.close();        } catch (IOException e) {          LOG.info(\"IOException in close io stream, caused by: \" + e);        }    }    return contents.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/azkaban/hive/actions/ExecuteHiveQuery.java", "stars": "18", "class": {"name": "ExecuteHiveQuery", "extends": null, "implements": ["HiveAction"], "modifiers": ["public"]}}, {"method_name": "extractQueryFromURL", "params": ["Properties"], "throws": ["HiveViaAzkabanException"], "modifiers": ["private"], "return_type": "String", "snippet": "  private String extractQueryFromURL(Properties properties)      throws HiveViaAzkabanException {    String url = properties.getProperty(HIVE_QUERY_URL);    if (url == null)      return null;    LOG.info(\"Attempting to retrieve query from URL: \" + url);    StringBuilder contents = new StringBuilder();    BufferedReader br = null;    try {      URL queryURL = new URL(url);      br = new BufferedReader(new InputStreamReader(queryURL.openStream()));      String line;      while ((line = br.readLine()) != null) {        contents.append(line);        contents.append(System.getProperty(\"line.separator\"));      }    } catch (IOException e) {      throw new HiveViaAzkabanException(e);    } finally {      if (br != null)        try {          br.close();        } catch (IOException e) {          LOG.info(\"IOException in close io stream, caused by: \" + e);        }    }    return contents.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/azkaban/hive/actions/ExecuteHiveQuery.java", "stars": "18", "class": {"name": "ExecuteHiveQuery", "extends": null, "implements": ["HiveAction"], "modifiers": ["public"]}}, {"method_name": "determineQuery", "params": ["String", "String", "String", "String"], "throws": ["HiveViaAzkabanException"], "modifiers": ["private"], "return_type": "String", "snippet": "  private String determineQuery(String singleLine, String multiLine,      String queryFromFile, String queryFromURL) throws HiveViaAzkabanException {    int specifiedValues = 0;    for (String s : new String[] { singleLine, multiLine, queryFromFile,        queryFromURL }) {      if (s != null)        specifiedValues++;    }    if (specifiedValues == 0)      throw new HiveViaAzkabanException(\"Must specify \" + HIVE_QUERY + \" xor \"          + HIVE_QUERY + \".nn xor \" + HIVE_QUERY_FILE + \" xor \"          + HIVE_QUERY_URL + \" in properties. Exiting.\");    if (specifiedValues != 1)      throw new HiveViaAzkabanException(\"Must specify only \" + HIVE_QUERY          + \" or \" + HIVE_QUERY + \".nn or \" + HIVE_QUERY_FILE + \" or \"          + HIVE_QUERY_URL + \" in properties, not more than one. Exiting.\");    if (singleLine != null) {      LOG.info(\"Returning \" + HIVE_QUERY + \" = \" + singleLine);      return singleLine;    } else if (multiLine != null) {      LOG.info(\"Returning consolidated \" + HIVE_QUERY + \".nn = \" + multiLine);      return multiLine;    } else if (queryFromFile != null) {      LOG.info(\"Returning query from file \" + queryFromFile);      return queryFromFile;    } else {      LOG.info(\"Returning query from URL \" + queryFromURL);      return queryFromURL;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/azkaban/hive/actions/ExecuteHiveQuery.java", "stars": "18", "class": {"name": "ExecuteHiveQuery", "extends": null, "implements": ["HiveAction"], "modifiers": ["public"]}}, {"method_name": "extractMultilineQuery", "params": ["Properties"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String extractMultilineQuery(Properties properties) {    ArrayList<String> lines = new ArrayList<String>();    for (int i = 0; i < 100; i++) {      String padded = String.format(\"%02d\", i);      String value = properties.getProperty(HIVE_QUERY + \".\" + padded);      if (value != null) {        lines.add(value);      }    }    return Utils.joinNewlines(lines);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/azkaban/hive/actions/ExecuteHiveQuery.java", "stars": "18", "class": {"name": "ExecuteHiveQuery", "extends": null, "implements": ["HiveAction"], "modifiers": ["public"]}}, {"method_name": "execute", "params": [], "throws": ["HiveViaAzkabanException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void execute() throws HiveViaAzkabanException {    try {      hqe.executeQuery(q);    } catch (HiveQueryExecutionException e) {      throw new HiveViaAzkabanException(e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/azkaban/hive/actions/ExecuteHiveQuery.java", "stars": "18", "class": {"name": "ExecuteHiveQuery", "extends": null, "implements": ["HiveAction"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/generictyperesolution/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/generictyperesolution/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/generictyperesolution/GenericTypeResolutionTest.java", "stars": "15", "class": {"name": "GenericTypeResolutionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User criteria = new User();      criteria.setId(1);      User result = mapper.getUser(criteria);      assertEquals(\"User1\", result.getName());      assertEquals(Integer.valueOf(12), result.getFld1());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/generictyperesolution/GenericTypeResolutionTest.java", "stars": "15", "class": {"name": "GenericTypeResolutionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldInsertAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertAUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = new User();      user.setName(\"User2\");      user.fld2 = 56;      mapper.insertUser(user);      User result = mapper.getUserByName(\"User2\");      assertNotNull(result);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/generictyperesolution/GenericTypeResolutionTest.java", "stars": "15", "class": {"name": "GenericTypeResolutionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getDescricao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getDescricao() {\t\treturn descricao;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/model/ComentarioInput.java", "stars": "2", "class": {"name": "ComentarioInput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDescricao", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDescricao(String descricao) {\t\tthis.descricao = descricao;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/model/ComentarioInput.java", "stars": "2", "class": {"name": "ComentarioInput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "upload", "params": ["MultipartFile", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String upload(MultipartFile file, String fileName) {        //\u6784\u9020\u4e00\u4e2a\u5e26\u6307\u5b9aZone\u5bf9\u8c61\u7684\u914d\u7f6e\u7c7b        Configuration cfg = new Configuration(Zone.zone0());        //...\u5176\u4ed6\u53c2\u6570\u53c2\u8003\u7c7b\u6ce8\u91ca        UploadManager uploadManager = new UploadManager(cfg);        //\u9ed8\u8ba4\u4e0d\u6307\u5b9akey\u7684\u60c5\u51b5\u4e0b\uff0c\u4ee5\u6587\u4ef6\u5185\u5bb9\u7684hash\u503c\u4f5c\u4e3a\u6587\u4ef6\u540d        String key = null;        Auth auth = Auth.create(ACCESS_KEY, SECRET_KEY);        String upToken = auth.uploadToken(BUCKET);        try {            Response response = null;            response = uploadManager.put(file.getInputStream(), fileName, upToken, null, null);            //\u89e3\u6790\u4e0a\u4f20\u6210\u529f\u7684\u7ed3\u679c            DefaultPutRet putRet = new Gson().fromJson(response.bodyString(), DefaultPutRet.class);            System.out.println(putRet.key);            System.out.println(putRet.hash);            return putRet.key;        } catch (QiniuException ex) {            Response r = ex.response;            System.err.println(r.toString());            try {                System.err.println(r.bodyString());            } catch (QiniuException ex2) {                //ignore            }        } catch (IOException e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/api/QiniuCloudService.java", "stars": "2", "class": {"name": "QiniuCloudService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.activity_phone_verify;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PhoneVerifyActivity.java", "stars": "1", "class": {"name": "PhoneVerifyActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        InputTextHelper.with(this)                .addView(mCodeView)                .setMain(mCommitView)                .setListener(helper -> mCodeView.getText().toString().length() == 4)                .build();        setOnClickListener(R.id.cv_phone_verify_countdown, R.id.btn_phone_verify_commit);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PhoneVerifyActivity.java", "stars": "1", "class": {"name": "PhoneVerifyActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        mPhoneView.setText(String.format(getString(R.string.phone_verify_current_phone), \"18888888888\"));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PhoneVerifyActivity.java", "stars": "1", "class": {"name": "PhoneVerifyActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        switch (v.getId()) {            case R.id.cv_phone_verify_countdown:                if (true) {                    toast(R.string.common_code_send_hint);                    return;                }                // \u83b7\u53d6\u9a8c\u8bc1\u7801                EasyHttp.post(this)                        .api(new GetCodeApi()                        .setPhone(mPhoneView.getText().toString()))                        .request(new HttpCallback<HttpData<Void>>(this) {                            @Override                            public void onSucceed(HttpData<Void> data) {                                toast(R.string.common_code_send_hint);                            }                        });                break;            case R.id.btn_phone_verify_commit:                if (true) {                    // \u8df3\u8f6c\u5230\u7ed1\u5b9a\u624b\u673a\u53f7\u9875\u9762                    PhoneResetActivity.start(getActivity(), mCodeView.getText().toString());                    finish();                    return;                }                // \u9a8c\u8bc1\u7801\u6821\u9a8c                EasyHttp.post(this)                        .api(new VerifyCodeApi()                        .setPhone(mPhoneView.getText().toString())                        .setCode(mCodeView.getText().toString()))                        .request(new HttpCallback<HttpData<Void>>(this) {                            @Override                            public void onSucceed(HttpData<Void> data) {                                // \u8df3\u8f6c\u5230\u7ed1\u5b9a\u624b\u673a\u53f7\u9875\u9762                                PhoneResetActivity.start(getActivity(), mCodeView.getText().toString());                                finish();                            }                        });                break;            default:                break;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/PhoneVerifyActivity.java", "stars": "1", "class": {"name": "PhoneVerifyActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "consumerConfigs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> consumerConfigs(){        Map<String, Object> props = new HashMap<>();        props.put(                ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,                kafkaUrl);        props.put(                ConsumerConfig.GROUP_ID_CONFIG,                \"groupId\");        props.put(                ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,                StringDeserializer.class);        props.put(                ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,                StringDeserializer.class);        return props;    }", "url": "https://raw.githubusercontent.com/camelya58/kafka-sample/master/kafka-consumer/src/main/java/com/example/kafka/kafkaconsumer/config/KafkaConfig.java", "stars": "2", "class": {"name": "KafkaConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "consumerFactory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ConsumerFactory<String,String>", "snippet": "    public ConsumerFactory<String, String> consumerFactory(){        return new DefaultKafkaConsumerFactory<>(consumerConfigs());    }", "url": "https://raw.githubusercontent.com/camelya58/kafka-sample/master/kafka-consumer/src/main/java/com/example/kafka/kafkaconsumer/config/KafkaConfig.java", "stars": "2", "class": {"name": "KafkaConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "kafkaListenerContainerFactory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "KafkaListenerContainerFactory<ConcurrentMessageListenerContainer>", "snippet": "    public KafkaListenerContainerFactory<ConcurrentMessageListenerContainer<String, String>> kafkaListenerContainerFactory(){        ConcurrentKafkaListenerContainerFactory<String, String> factory = new ConcurrentKafkaListenerContainerFactory<>();        factory.setConsumerFactory(consumerFactory());        return factory;    }", "url": "https://raw.githubusercontent.com/camelya58/kafka-sample/master/kafka-consumer/src/main/java/com/example/kafka/kafkaconsumer/config/KafkaConfig.java", "stars": "2", "class": {"name": "KafkaConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "receiver", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ReceiverService", "snippet": "    public ReceiverService receiver(){        return new ReceiverService();    }", "url": "https://raw.githubusercontent.com/camelya58/kafka-sample/master/kafka-consumer/src/main/java/com/example/kafka/kafkaconsumer/config/KafkaConfig.java", "stars": "2", "class": {"name": "KafkaConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDatasourceById", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "DataSource", "snippet": "    protected DataSource getDatasourceById(String dsId) {        DataSource ds = dataSourceService.getDetail(dsId);        boolean match = null != ds;        if(match && !ds.getSourceType().toLowerCase()                .equals(TypeEnums.ELASTICSEARCH.v())){            LOG.error(\"Data source id: \" + dsId + \", type:\" + ds.getSourceType() + \", is not elasticsearch\");            match = false;        }        if(!match){            throw new EndPointException(\"exchange.elastic_meta.invalid.data_source.id\",null,dsId);        }        ds.resolveParams();        return ds;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/ElasticMetaDbServiceImpl.java", "stars": "23", "class": {"name": "ElasticMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDBConnection", "params": ["DataSource", "File"], "throws": null, "modifiers": ["protected"], "return_type": "ElasticSearch", "snippet": "    protected ElasticSearch.ElasticMeta getDBConnection(DataSource dataSource, File keytab) {        try {            Map<String, Object> parameters = dataSource.getParameterMap();            String elasticUrls = String.valueOf(parameters.getOrDefault(PARAM_ES_URLS, \"\"));            String[] endPoints = elasticUrls.split(DEFAULT_ENDPOINT_SPLIT);            return ElasticSearch.buildClient(endPoints,                    String.valueOf(parameters.getOrDefault(PARAM_DEFAULT_USERNAME, \"\")),                    String.valueOf(CryptoUtils.string2Object(                            String.valueOf(parameters.getOrDefault(PARAM_DEFAULT_PASSWORD, \"\"))))                    );        }catch(Exception e){            LOG.error(\"Get ElasticSearch RestClient failed, message: \" + e.getMessage(), e);            throw new EndPointException(\"exchange.elastic_meta.failed.to.connect\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/ElasticMetaDbServiceImpl.java", "stars": "23", "class": {"name": "ElasticMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDBConnection", "params": ["DataSource"], "throws": null, "modifiers": ["protected"], "return_type": "ElasticSearch", "snippet": "    protected ElasticSearch.ElasticMeta getDBConnection(DataSource dataSource) {        return getDBConnection(dataSource, null);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/ElasticMetaDbServiceImpl.java", "stars": "23", "class": {"name": "ElasticMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDatabases0", "params": ["ElasticSearch"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getDatabases0(ElasticSearch.ElasticMeta connection) {        //Get indices        try{            return connection.getAllIndices();        }catch (Exception e){            LOG.error(\"Get Elastic indices error, message: \" + e.getMessage(), e);            throw new EndPointException(\"exchange.elastic_meta.failed.get.index_info\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/ElasticMetaDbServiceImpl.java", "stars": "23", "class": {"name": "ElasticMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTables0", "params": ["ElasticSearch", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getTables0(ElasticSearch.ElasticMeta connection, String index) {        //Get types        try{            return connection.getTypes(index);        }catch (Exception e){            LOG.error(\"Get Elastic types error, message: \" + e.getMessage(), e);            throw new EndPointException(\"exchange.elastic_meta.failed.get.type_info\", e,index);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/ElasticMetaDbServiceImpl.java", "stars": "23", "class": {"name": "ElasticMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPartitions0", "params": ["ElasticSearch", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "MetaPartitionInfo", "snippet": "    public MetaPartitionInfo getPartitions0(ElasticSearch.ElasticMeta connection, String database, String table) {        throw new EndPointException(\"exchange.elastic_meta.unsupported.request.interface\", null);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/ElasticMetaDbServiceImpl.java", "stars": "23", "class": {"name": "ElasticMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": null, "modifiers": ["public"]}}, {"method_name": "getColumns0", "params": ["ElasticSearch", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<MetaColumnInfo>", "snippet": "    public List<MetaColumnInfo> getColumns0(ElasticSearch.ElasticMeta connection, String index, String type) {        try {            Map<Object, Object> props = connection.getProps(index, type);            List<MetaColumnInfo> metaColumnInfoList = new ArrayList<>();            resolveMetaColumn(metaColumnInfoList, null, props, ElasticSearch.DEFAULT_NAME_SPLIT);            return metaColumnInfoList;        } catch (Exception e) {            LOG.error(\"Get Elastic columns error, message: \" + e.getMessage(), e);            throw new EndPointException(\"exchange.elastic_meta.failed.get.column\", e,index,type);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/ElasticMetaDbServiceImpl.java", "stars": "23", "class": {"name": "ElasticMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": ["ElasticSearch"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void close(ElasticSearch.ElasticMeta connection) {        try {            connection.close();        } catch (IOException e) {            LOG.error(\"Close ElasticSearch connection failed, message: \" + e.getMessage(), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/ElasticMetaDbServiceImpl.java", "stars": "23", "class": {"name": "ElasticMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveMetaColumn", "params": ["List<MetaColumnInfo>", "MetaColumnInfo", "Map<Object,Object>", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveMetaColumn(List<MetaColumnInfo> metaColumnInfoList,                                   MetaColumnInfo column, Map<Object, Object> propsMap, String columnNameSeparator){        propsMap.forEach((key, value) ->{            if(value instanceof Map){                Map metaMap = (Map)value;                if(null != metaMap.get(DEFAULT_TYPE_NAME)){                    MetaColumnInfo levelColumn = new MetaColumnInfo();                    if(null != column) {                        levelColumn.setName(column.getName() + columnNameSeparator + key);                    }else{                        levelColumn.setName(String.valueOf(key));                    }                    levelColumn.setType(String.valueOf(metaMap.get(DEFAULT_TYPE_NAME)));                    metaColumnInfoList.add(levelColumn);                }else if(null != metaMap.get(ElasticSearch.ElasticMeta.FIELD_PROPS)                        && metaMap.get(ElasticSearch.ElasticMeta.FIELD_PROPS) instanceof Map){                    MetaColumnInfo levelColumn = column;                    if(null == levelColumn){                        levelColumn = new MetaColumnInfo();                        levelColumn.setName(String.valueOf(key));                    }else{                        levelColumn.setName(levelColumn.getName() + columnNameSeparator + key);                    }                    resolveMetaColumn(metaColumnInfoList, levelColumn, (Map)metaMap.get(ElasticSearch.ElasticMeta.FIELD_PROPS),                            columnNameSeparator);                }            }        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/ElasticMetaDbServiceImpl.java", "stars": "23", "class": {"name": "ElasticMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tPersistence.createEntityManagerFactory(\"MeusPedidosPU\");\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/util/GeradorDeTabelas.java", "stars": "1", "class": {"name": "GeradorDeTabelas", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getProjectId() {    return this.projectId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectLogEvent.java", "stars": "18", "class": {"name": "ProjectLogEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUser() {    return this.user;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectLogEvent.java", "stars": "18", "class": {"name": "ProjectLogEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getTime() {    return this.time;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectLogEvent.java", "stars": "18", "class": {"name": "ProjectLogEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "EventType", "snippet": "  public EventType getType() {    return this.type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectLogEvent.java", "stars": "18", "class": {"name": "ProjectLogEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getMessage() {    return this.message;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/ProjectLogEvent.java", "stars": "18", "class": {"name": "ProjectLogEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addUrl", "params": ["UrlParam"], "throws": ["DefaultException", "JsonProcessingException"], "modifiers": ["public"], "return_type": "Response", "snippet": "  public Response addUrl(UrlParam urlParam) throws DefaultException, JsonProcessingException {    CommonUtil.isNotNull(urlParam);    Map<String, String> paraMap = new HashMap<>();    paraMap.put(\"appid\", urlParam.getAppid());    paraMap.put(\"appkey\", urlParam.getAppkey());    paraMap.put(\"type\", Const.OPERATION_ADD);    paraMap.put(\"url\", urlParam.getUrl());    if (StringUtils.isNotEmpty(urlParam.getVisitType())) {      paraMap.put(\"visit_type\", urlParam.getVisitType());    }    if (StringUtils.isNotEmpty(urlParam.getGroupId())) {      paraMap.put(\"group_id\", urlParam.getGroupId());    }    if (StringUtils.isNotEmpty(urlParam.getTitle())) {      paraMap.put(\"title\", urlParam.getTitle());    }    if (StringUtils.isNotEmpty(urlParam.getKeywords())) {      paraMap.put(\"keywords\", urlParam.getKeywords());    }    if (StringUtils.isNotEmpty(urlParam.getDescription())) {      paraMap.put(\"description\", urlParam.getDescription());    }    String result = httpClient.doPost(REQUEST_URL, paraMap);    return objectMapper.readValue(result, new TypeReference<Response>() {    });  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/DomainUrlProtectService.java", "stars": "2", "class": {"name": "DomainUrlProtectService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteUrl", "params": ["UrlParam"], "throws": ["DefaultException", "JsonProcessingException"], "modifiers": ["public"], "return_type": "Response", "snippet": "  public Response deleteUrl(UrlParam urlParam) throws DefaultException, JsonProcessingException {    CommonUtil.isNotNull(urlParam);    Map<String, String> paraMap = new HashMap<>();    paraMap.put(\"appid\", urlParam.getAppid());    paraMap.put(\"appkey\", urlParam.getAppkey());    paraMap.put(\"type\", Const.OPERATION_DELETE);    if(StringUtils.isNotEmpty(urlParam.getId())){      paraMap.put(\"id\", urlParam.getId());    }else{      if(StringUtils.isEmpty(urlParam.getUrl())){        throw new DefaultException(\"url\u548cid\uff0c\u81f3\u5c11\u8981\u4f20\u4e00\u4e2a\");      }      paraMap.put(\"url\", urlParam.getUrl());    }    if (StringUtils.isNotEmpty(urlParam.getGroupId())) {      paraMap.put(\"group_id\", urlParam.getGroupId());    }    String result = httpClient.doPost(REQUEST_URL, paraMap);    return objectMapper.readValue(result, new TypeReference<Response>() {    });  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/DomainUrlProtectService.java", "stars": "2", "class": {"name": "DomainUrlProtectService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateUrl", "params": ["UrlParam"], "throws": ["DefaultException", "JsonProcessingException"], "modifiers": ["public"], "return_type": "Response", "snippet": "  public Response updateUrl(UrlParam urlParam) throws DefaultException, JsonProcessingException {    CommonUtil.isNotNull(urlParam);    Map<String, String> paraMap = new HashMap<>();    paraMap.put(\"appid\", urlParam.getAppid());    paraMap.put(\"appkey\", urlParam.getAppkey());    paraMap.put(\"type\", Const.OPERATION_EDIT);    paraMap.put(\"url\", urlParam.getUrl());    if (StringUtils.isNotEmpty(urlParam.getGroupId())) {      paraMap.put(\"group_id\", urlParam.getGroupId());    }    if (StringUtils.isNotEmpty(urlParam.getVisitType())) {      paraMap.put(\"visit_type\", urlParam.getVisitType());    }    if (StringUtils.isNotEmpty(urlParam.getNewLandDomainUrl())) {      paraMap.put(\"new_land_domain_url\", urlParam.getNewLandDomainUrl());    }    if (StringUtils.isNotEmpty(urlParam.getTitle())) {      paraMap.put(\"title\", urlParam.getTitle());    }    if (StringUtils.isNotEmpty(urlParam.getKeywords())) {      paraMap.put(\"keywords\", urlParam.getKeywords());    }    if (StringUtils.isNotEmpty(urlParam.getDescription())) {      paraMap.put(\"description\", urlParam.getDescription());    }    String result = httpClient.doPost(REQUEST_URL, paraMap);    return objectMapper.readValue(result, new TypeReference<Response>() {    });  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/DomainUrlProtectService.java", "stars": "2", "class": {"name": "DomainUrlProtectService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listUrl", "params": ["UrlParam"], "throws": ["DefaultException", "JsonProcessingException"], "modifiers": ["public"], "return_type": "Response<UrlArrayVO>", "snippet": "  public Response<UrlArrayVO<UrlVO>> listUrl(UrlParam urlParam) throws DefaultException, JsonProcessingException {    CommonUtil.isNotNull(urlParam);    Map<String, String> paraMap = new HashMap<>();    paraMap.put(\"appid\", urlParam.getAppid());    paraMap.put(\"appkey\", urlParam.getAppkey());    paraMap.put(\"type\", Const.OPERATION_LIST);    if (StringUtils.isNotEmpty(urlParam.getGroupId())) {      paraMap.put(\"group_id\", urlParam.getGroupId());    }    if (StringUtils.isNotEmpty(urlParam.getUrl())) {      paraMap.put(\"url\", urlParam.getUrl());    }    if (StringUtils.isNotEmpty(urlParam.getPage())) {      paraMap.put(\"page\", urlParam.getPage());    }    if (StringUtils.isNotEmpty(urlParam.getRows())) {      paraMap.put(\"rows\", urlParam.getRows());    }    String result = httpClient.doPost(REQUEST_URL, paraMap);    return objectMapper.readValue(result, new TypeReference<Response<UrlArrayVO<UrlVO>>>() {    });  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/DomainUrlProtectService.java", "stars": "2", "class": {"name": "DomainUrlProtectService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listLandDomain", "params": ["UrlParam"], "throws": ["DefaultException", "JsonProcessingException"], "modifiers": ["public"], "return_type": "Response<UrlArrayVO>", "snippet": "  public Response<UrlArrayVO<UrlVO>> listLandDomain(UrlParam urlParam) throws DefaultException, JsonProcessingException {    CommonUtil.isNotNull(urlParam);    Map<String, String> paraMap = new HashMap<>();    paraMap.put(\"appid\", urlParam.getAppid());    paraMap.put(\"appkey\", urlParam.getAppkey());    paraMap.put(\"type\", Const.OPERATION_LIST_LAND_DOMAIN);    if (StringUtils.isNotEmpty(urlParam.getDomain())) {      paraMap.put(\"domain\", urlParam.getDomain());    }    String result = httpClient.doPost(REQUEST_URL, paraMap);    return objectMapper.readValue(result, new TypeReference<Response<UrlArrayVO<UrlVO>>>() {    });  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/DomainUrlProtectService.java", "stars": "2", "class": {"name": "DomainUrlProtectService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "highFrequencyCheck", "params": ["UrlParam"], "throws": ["DefaultException", "JsonProcessingException"], "modifiers": ["public"], "return_type": "Response<DomainCheckResultVO>", "snippet": "  public Response<DomainCheckResultVO> highFrequencyCheck(UrlParam urlParam) throws DefaultException, JsonProcessingException {    CommonUtil.isNotNull(urlParam);    Map<String, String> paraMap = new HashMap<>();    paraMap.put(\"appid\", urlParam.getAppid());    paraMap.put(\"appkey\", urlParam.getAppkey());    paraMap.put(\"type\", Const.OPERATION_HIGH_FREQUENCY_CHECK);    paraMap.put(\"url\", urlParam.getUrl());    if (StringUtils.isNotEmpty(urlParam.getCheckType())) {      paraMap.put(\"check_type\", urlParam.getCheckType());    }    String result = httpClient.doPost(REQUEST_URL, paraMap);    return objectMapper.readValue(result, new TypeReference<Response<DomainCheckResultVO>>() {    });  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/DomainUrlProtectService.java", "stars": "2", "class": {"name": "DomainUrlProtectService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dynamicSetURIParameters", "params": ["UrlParam"], "throws": ["DefaultException", "JsonProcessingException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String dynamicSetURIParameters(UrlParam urlParam) throws DefaultException, JsonProcessingException {    CommonUtil.isNotNull(urlParam);    String domainUrl = getDomainUrl(urlParam);    domainUrl = domainUrl.endsWith(\"/\") ? domainUrl : StringUtils.join(domainUrl, \"/\");    ObjectMapper objectMapper = new ObjectMapper();    objectMapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);    String urlParamJsonString = objectMapper.writeValueAsString(urlParam);    String base64EncodedString = CharacterUtil.base64Encode(urlParamJsonString);    String url = StringUtils.join(domainUrl, base64EncodedString);    String weiboShortUrl = getWechatShortUrl(urlParam, url);    return  weiboShortUrl;//    Map<String, String> paraMap = new HashMap<>();//    paraMap.put(\"appid\", urlParam.getAppid());//    paraMap.put(\"appkey\", urlParam.getAppkey());//    paraMap.put(\"group_id\", urlParam.getGroupId());//    paraMap.put(\"request_uri\", urlParam.getRequestUri());//    if (StringUtils.isNotEmpty(urlParam.getVisitType())) {//      paraMap.put(\"visit_type\", urlParam.getVisitType());//    }//    if (StringUtils.isNotEmpty(urlParam.getTitle())) {//      paraMap.put(\"title\", urlParam.getTitle());//    }//    if (StringUtils.isNotEmpty(urlParam.getKeywords())) {//      paraMap.put(\"keywords\", urlParam.getKeywords());//    }//    if (StringUtils.isNotEmpty(urlParam.getDescription())) {//      paraMap.put(\"description\", urlParam.getDescription());//    }    // TODO have API to call?//    String result = httpClient.doPost(REQUEST_URL, paraMap);//    return objectMapper.readValue(result, new TypeReference<Response>() {//    });  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/DomainUrlProtectService.java", "stars": "2", "class": {"name": "DomainUrlProtectService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDomainUrl", "params": ["UrlParam"], "throws": ["DefaultException", "JsonProcessingException"], "modifiers": ["private"], "return_type": "String", "snippet": "  private String getDomainUrl(UrlParam urlParam) throws DefaultException, JsonProcessingException {    UrlParam newUrlParam = new UrlParam(Integer.valueOf(urlParam.getAppid()), urlParam.getAppkey());    newUrlParam.setLayerType(\"layer_top\");    ShortUrlService shortUrlService = new ShortUrlService();    Response<UrlArrayVO<EntryDomainUrlVO>> response = shortUrlService.listEntryDomainUrl(newUrlParam);    if(!\"1\".equals(response.getCode())){      throw new DefaultException(response.getMessage());    }    Map<String, String> dMap = new HashMap();    response.getData().getList().stream().findFirst().ifPresent(entryDomainUrlVO -> {      dMap.put(\"domain\", StringUtils.join(entryDomainUrlVO.getScheme(), entryDomainUrlVO.getDomain()));    });    if(dMap.isEmpty()){      throw new DefaultException(\"\u5148\u5230https://www.wechaturl.us/user/index.html#business_management/user_short_domain_list \u6dfb\u52a0\u4e00\u4e2a\u77ed\u7f51\u5740(\u5b50)\u57df\u540d\uff0c\u7c7b\u578b\u9009\u62e9<\u5165\u53e3\u57df\u540d>\");    }    return dMap.get(\"domain\");  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/DomainUrlProtectService.java", "stars": "2", "class": {"name": "DomainUrlProtectService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWechatShortUrl", "params": ["UrlParam", "String"], "throws": ["DefaultException", "JsonProcessingException"], "modifiers": ["private"], "return_type": "String", "snippet": "  private String getWechatShortUrl(UrlParam urlParam, String url) throws DefaultException, JsonProcessingException {    UrlParam newUrlParam = new UrlParam(Integer.valueOf(urlParam.getAppid()), urlParam.getAppkey(), url);    ShortUrlService shortUrlService = new ShortUrlService();    Response<ShortUrlVO> response = shortUrlService.transferLongToShortUrl(newUrlParam);    if(!\"1\".equals(response.getCode())){      throw new DefaultException(response.getMessage());    }    return response.getData().getShortUrl();  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/DomainUrlProtectService.java", "stars": "2", "class": {"name": "DomainUrlProtectService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "refresh", "params": ["boolean", "String"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<String>", "snippet": "    public ResponseEntity<String> refresh(@RequestParam(AuthConstraints.TICKT_REFRESH_PARAM)boolean ticketRefresh,                                          @RequestParam(AuthConstraints.DEFAULT_SSO_COOKIE)String token){        Map<String, String> claims = tokenBuilder.getAuthMessage(token);        if(ticketRefresh) {            String ticket = claims.getOrDefault(AuthConstraints.TICKET_NAME, \"\");            if (StringUtils.isBlank(ticket) || !storage.exist(ticket)) {                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);            }        }else{            try {                tokenBuilder.validate(token, sessionInMinutes);            }catch(ExpireTimeOutException e){                LOG.info(\"Token Session expired: \" + token.substring(0, 6) +  \"****\");                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);            }        }        Map<String, String> headers = tokenBuilder.getAuthHeader(token);        AuthTokenBean tokenBean = new AuthTokenBean();        tokenBean.setClaims(claims);        tokenBean.setHeaders(headers);        try{            String newToken = tokenBuilder.build(tokenBean);            LOG.info(\"Refresh TOKEN: \"  + newToken.substring(0, 6) + \"****\");            return ResponseEntity.ok().body(newToken);        } catch(UnsupportedEncodingException e){            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/gateway/src/main/java/com/webank/wedatasphere/exchangis/gateway/auth/TokenController.java", "stars": "23", "class": {"name": "TokenController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "servRefresh", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<String>", "snippet": "    public ResponseEntity<String> servRefresh(@RequestParam(value = AuthConstraints.TOKEN_REFRESH_ID)String id,                                        @RequestParam(value = AuthConstraints.TOKEN_REFRESH_PWD)String pwd){        List<String> allowedUris = whiteList.getList(id, pwd, null);        if(allowedUris.isEmpty()){            return ResponseEntity.status(401).body(null);        }        AuthTokenBean tokenBean = new AuthTokenBean();        Map<String, String> headers = tokenBean.getHeaders();        headers.put(AuthConstraints.ALLOWEDURIS, Json.toJson(allowedUris, String.class));        try {            String token = tokenBuilder.build(tokenBean);            LOG.info(\"Refresh SERVICE-TOKEN: \" + token.substring(0, 6) + \"****\");            return ResponseEntity.ok().body(token);        } catch (UnsupportedEncodingException e) {            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/gateway/src/main/java/com/webank/wedatasphere/exchangis/gateway/auth/TokenController.java", "stars": "23", "class": {"name": "TokenController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handle", "params": ["WxMpXmlMessage", "Map<String,Object>", "WxMpService", "WxSessionManager"], "throws": null, "modifiers": ["public"], "return_type": "WxMpXmlOutMessage", "snippet": "  public WxMpXmlOutMessage handle(WxMpXmlMessage wxMessage,                                  Map<String, Object> context, WxMpService wxMpService,                                  WxSessionManager sessionManager) {    // TODO \u5904\u7406\u95e8\u5e97\u5ba1\u6838\u4e8b\u4ef6    return null;  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/handler/StoreCheckNotifyHandler.java", "stars": "2", "class": {"name": "StoreCheckNotifyHandler", "extends": "AbstractHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "ordererRemove", "params": ["Map<String,String>", "InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void ordererRemove(Map<String, String> removedOrdererHostConfig, InitConfigEntity configEntity) {        // log.info(\"\u4e3b\u8282\u70b9\u542f\u52a8 cli \u5bb9\u5668\");        log.info(\"The master node starts the cli container\");        // \u542f\u52a8\u4e00\u4e2a cli \u5bb9\u5668        if (!fabricCliService.createCliContainer(modeService.getInstallPath() + \"cli\", configEntity)) {            // log.error(\"\u521b\u5efacli\u5bb9\u5668\u5931\u8d25\");            log.error(\"Failed to create cli container\");            return;        }        // \u6536\u96c6\u6240\u6709\u8282\u70b9\u52a0\u5165\u7684\u901a\u9053        // log.info(\"\u83b7\u53d6\u6240\u6709\u8282\u70b9\u52a0\u5165\u7684\u901a\u9053\u5217\u8868\");        log.info(\"Get channel list info\");        Set<String> channelList = new HashSet<>();        try {            channelList.addAll(fabricCliService.getAllChannels(configEntity));        } catch (IOException e) {            // log.error(\"\u83b7\u53d6\u8282\u70b9\u52a0\u5165\u7684\u6240\u6709\u901a\u9053\u5f02\u5e38\", e);            log.error(\"Exception occur when get channel list info\", e);            e.printStackTrace();        }        // log.info(\"\u7f29\u5bb9orderer-\u83b7\u53d6\u7684\u901a\u9053\u5217\u8868\uff1a\" + JSON.toJSONString(channelList));        // log.info(\"\u4fee\u6539\u7f51\u7edc\u914d\u7f6e\");        log.info(\"scale down orderer - Obtained channel list\uff1a\" + JSON.toJSONString(channelList));        log.info(\"Modify network configuration\");        Map<String, String> oldOrdererConfig = configEntity.getOrdererHostConfig();        oldOrdererConfig.putAll(removedOrdererHostConfig);        for (String host : removedOrdererHostConfig.keySet()) {            // log.info(\"\u7f29\u5bb9orderer-oldOrdererConfig=\" + JSON.toJSONString(oldOrdererConfig));            log.info(\"scale down orderer-oldOrdererConfig=\" + JSON.toJSONString(oldOrdererConfig));            oldOrdererConfig.remove(host);            // \u4fee\u6539\u7f51\u7edc\u914d\u7f6e            // log.info(\"\u5c06\u79fb\u9664\u7684 orderer(s) \u4ece\u7cfb\u7edf\u901a\u9053\u4e2d\u79fb\u9664\");            log.info(\"stop the orderer(s) and remove from the system channel\");            // \u5148\u4fee\u6539\u7cfb\u7edf\u901a\u9053            if (!updateService.updateNetworkConfig(configEntity.getNetwork() + \"-sys-channel\", configEntity, oldOrdererConfig)) {                // log.error(String.format(\"\u4e3a\u7cfb\u7edf\u901a\u9053 %s \u66f4\u65b0\u7f51\u7edc\u914d\u7f6e\u5931\u8d25\", configEntity.getNetwork() + \"-sys-channel\"));                log.error(String.format(\"Failed to update network configuration for system channel %s\", configEntity.getNetwork() + \"-sys-channel\"));                return;            }            channelList.remove(configEntity.getNetwork() + \"-sys-channel\");            for (String channelName : channelList) {                // log.info(String.format(\"\u5c06\u79fb\u9664\u7684 orderer(s) \u4ece\u901a\u9053 %s \u4e2d\u79fb\u9664\", channelName));                log.info(String.format(\"Remove the  orderer(s) from channel %s\", channelName));                if (!updateService.updateNetworkConfig(channelName, configEntity, oldOrdererConfig)) {                    // log.error(String.format(\"\u4e3a\u901a\u9053 %s \u66f4\u65b0\u7f51\u7edc\u914d\u7f6e\u5931\u8d25\", channelName));                    log.error(String.format(\"Failed to update network configuration for channel %s\", channelName));                }            }        }        // log.info(\"\u79fb\u9664\u4e3b\u8282\u70b9\u76ee\u5f55\u4e0b\u7684\u8bc1\u4e66\");        log.info(\"Delete the certificate in the master node directory\");        fileService.removeCertFile(RoleEnum.ORDER, configEntity, removedOrdererHostConfig, true);        // log.info(\"\u79fb\u9664 orderer(s) \u8282\u70b9\");        log.info(\"Remove orderer(s) node\");        removeOrdererContainer(removedOrdererHostConfig, configEntity);        // log.info(\"\u5c06\u5df2\u79fb\u9664\u7684 orderer(s) \u8282\u70b9\u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664\");        log.info(\"Remove the orderer(s) node from the database\");        // \u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664        for (String host : removedOrdererHostConfig.keySet()) {            String ip = removedOrdererHostConfig.get(host);            int index = ip.lastIndexOf(\":\");            String port = ip.substring(index + 1);            ip = ip.substring(0, index);            NodeDO nodeDO = new NodeDO();            nodeDO.setRole(RoleEnum.ORDER);            nodeDO.setOrgMspId(configEntity.getOrgMSPID());            nodeDO.setHostName(host);            nodeDO.setIp(ip);            nodeDO.setPort(Integer.parseInt(port));            try {                this.checkPointDb.deleteNodeRecord(nodeDO);            } catch (SQLException e) {                // log.error(String.format(\"\u5c06\u8282\u70b9 %s \u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664\u5f02\u5e38\", host), e);                log.error(String.format(\"Exception when deleting node %s from database\", host), e);                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/OrdererRemoveBiz.java", "stars": "7", "class": {"name": "OrdererRemoveBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeOrdererContainer", "params": ["Map<String,String>", "InitConfigEntity"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void removeOrdererContainer(Map<String, String> removedOrdererHostConfig, InitConfigEntity configEntity) {        // \u901a\u77e5\u8282\u70b9\u79fb\u9664        // \u6839\u636eIP\u5206\u7ec4        Map<String, List<String>> groups = new HashMap<>(16);        for (String host : removedOrdererHostConfig.keySet()) {            String ip = removedOrdererHostConfig.get(host);            int index = ip.lastIndexOf(\":\");            String port = ip.substring(index + 1);            ip = ip.substring(0, index);            List<String> hostList;            if (groups.containsKey(ip)) {                hostList = groups.get(ip);            } else {                hostList = new ArrayList<>();                groups.put(ip, hostList);            }            hostList.add(host + \":\" + port);        }        String stopNodeFilePath = modeService.getInitDir() + \"template/stopNode.sh\";        for (String ip : groups.keySet()) {            RemoveCmd peerRemoveCmd = updateService.createRemoveCmd(ip, groups.get(ip), RoleEnum.ORDER);            peerRemoveCmd.setOrdererDomain(configEntity.getOrdererDomain());            if (NetUtil.ipIsMine(ip)) {                try {                    FileUtils.copyFile(new File(stopNodeFilePath), new File(modeService.getInstallPath() + \"stopNode.sh\"));                } catch (Exception e) {                    // log.info(\"\u590d\u5236stopNode.sh\u53d1\u751f\u5f02\u5e38\");                    log.info(\"An exception occurred while copying stopNode.sh\");                    return;                }                updateService.removeNode(RoleEnum.ORDER, peerRemoveCmd.getOrdererDomain(), peerRemoveCmd.getHostNames(), peerRemoveCmd.getPorts());            } else {                String stopFilePath = modeService.getInitDir() + \"template/stopNode.sh\";                String url = \"http://\" + ip + \":8080/v1/install/remove\";                do {                    try {                        String result = this.httpClient.sendFileAndJson(url, stopFilePath, JSONObject.toJSONString(peerRemoveCmd));                        if (!StringUtils.isEmpty(result)) {                            HttpInstallResponse response = JSONObject.parseObject(result, HttpInstallResponse.class);                            if (ResponseCode.SUCCESS.getCode().equalsIgnoreCase(response.getCode())) {                                break;                            }                        }                        // log.warn(String.format(\"\u7ed9\u8282\u70b9 %s \u53d1\u9001\u79fb\u9664\u547d\u4ee4\u8fd4\u56de\u5931\u8d25\uff0c\u7a0d\u540e\u91cd\u8bd5\", ip));                        log.warn(String.format(\"Failed to send remove command to node %s, try again later\", ip));                    } catch (Exception e) {                        // log.warn(String.format(\"\u7ed9\u8282\u70b9 %s \u53d1\u9001\u79fb\u9664\u547d\u4ee4\u5f02\u5e38\uff0c\u7a0d\u540e\u91cd\u8bd5\", ip), e);                        log.warn(String.format(\"Exception occurred when sending remove command to node %s, try again later\", ip), e);                        e.printStackTrace();                    }                    try {                        Thread.sleep(5000);                    } catch (Exception e) {                        e.printStackTrace();                    }                } while (true);            }        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/OrdererRemoveBiz.java", "stars": "7", "class": {"name": "OrdererRemoveBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "discount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void discount() {        basicDiscount.discount();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/business/AbstractDiscountDecorate.java", "stars": "2", "class": {"name": "AbstractDiscountDecorate", "extends": "BasicDiscount", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "expandBusiness", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void expandBusiness();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/business/AbstractDiscountDecorate.java", "stars": "2", "class": {"name": "AbstractDiscountDecorate", "extends": "BasicDiscount", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "split", "params": ["int"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "List<Configuration>", "snippet": "        public abstract List<Configuration> split(int adviceNumber);    }    public static abstract class Task extends EnhancedReader.Task {", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/spi/Reader.java", "stars": "23", "class": {"name": "Job", "extends": "EnhancedReader", "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "startRead", "params": ["RecordSender"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "        public abstract void startRead(RecordSender recordSender);    }}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/spi/Reader.java", "stars": "23", "class": {"name": "Task", "extends": "EnhancedReader", "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUrl() {    return url;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainUrlMonitorVO.java", "stars": "2", "class": {"name": "DomainUrlMonitorVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUrl(String url) {    this.url = url;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainUrlMonitorVO.java", "stars": "2", "class": {"name": "DomainUrlMonitorVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCheckType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCheckType() {    return checkType;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainUrlMonitorVO.java", "stars": "2", "class": {"name": "DomainUrlMonitorVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCheckType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCheckType(String checkType) {    this.checkType = checkType;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainUrlMonitorVO.java", "stars": "2", "class": {"name": "DomainUrlMonitorVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getStatus() {    return status;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainUrlMonitorVO.java", "stars": "2", "class": {"name": "DomainUrlMonitorVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setStatus(String status) {    this.status = status;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainUrlMonitorVO.java", "stars": "2", "class": {"name": "DomainUrlMonitorVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getIsMonitor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getIsMonitor() {    return isMonitor;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainUrlMonitorVO.java", "stars": "2", "class": {"name": "DomainUrlMonitorVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setIsMonitor", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setIsMonitor(String isMonitor) {    this.isMonitor = isMonitor;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainUrlMonitorVO.java", "stars": "2", "class": {"name": "DomainUrlMonitorVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getFrequency", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getFrequency() {    return frequency;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainUrlMonitorVO.java", "stars": "2", "class": {"name": "DomainUrlMonitorVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setFrequency", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFrequency(String frequency) {    this.frequency = frequency;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainUrlMonitorVO.java", "stars": "2", "class": {"name": "DomainUrlMonitorVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getLastCheckDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getLastCheckDate() {    return lastCheckDate;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainUrlMonitorVO.java", "stars": "2", "class": {"name": "DomainUrlMonitorVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setLastCheckDate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLastCheckDate(String lastCheckDate) {    this.lastCheckDate = lastCheckDate;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainUrlMonitorVO.java", "stars": "2", "class": {"name": "DomainUrlMonitorVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCheckTimes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCheckTimes() {    return checkTimes;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainUrlMonitorVO.java", "stars": "2", "class": {"name": "DomainUrlMonitorVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCheckTimes", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCheckTimes(String checkTimes) {    this.checkTimes = checkTimes;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainUrlMonitorVO.java", "stars": "2", "class": {"name": "DomainUrlMonitorVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object o) {    if (this == o) return true;    if (!(o instanceof DomainUrlMonitorVO)) return false;    DomainUrlMonitorVO that = (DomainUrlMonitorVO) o;    return Objects.equals(getUrl(), that.getUrl()) &&            Objects.equals(getCheckType(), that.getCheckType()) &&            Objects.equals(getStatus(), that.getStatus()) &&            Objects.equals(getIsMonitor(), that.getIsMonitor()) &&            Objects.equals(getFrequency(), that.getFrequency()) &&            Objects.equals(getLastCheckDate(), that.getLastCheckDate()) &&            Objects.equals(getCheckTimes(), that.getCheckTimes());  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainUrlMonitorVO.java", "stars": "2", "class": {"name": "DomainUrlMonitorVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return Objects.hash(getUrl(), getCheckType(), getStatus(), getIsMonitor(), getFrequency(), getLastCheckDate(), getCheckTimes());  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainUrlMonitorVO.java", "stars": "2", "class": {"name": "DomainUrlMonitorVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "run", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run(String... args) {\t\tSystem.out.println(\"Spring Boot Ant Example\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-ant/src/main/java/smoketest/ant/SampleAntApplication.java", "stars": "47572", "class": {"name": "SampleAntApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleAntApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-ant/src/main/java/smoketest/ant/SampleAntApplication.java", "stars": "47572", "class": {"name": "SampleAntApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "createGardenField", "params": ["GardenFieldDTO"], "throws": null, "modifiers": ["public"], "return_type": "GardenFieldDTO", "snippet": "    public GardenFieldDTO createGardenField(GardenFieldDTO gardenFieldDTO) {        User currentUser = securityHelperService.getLoggedInUser();        if (gardenFieldDTO.getOwner() != null && !gardenFieldDTO.getOwner().getId().equals(currentUser.getId())) {            throw new MissingAuthorityForGardenFieldServiceException();        }        if (currentUser.getStripeAccountVerified() == null || !currentUser.getStripeAccountVerified()) {            throw new MissingStripeVerificationServiceException();        }        GardenField entity = gardenFieldMapper.toEntity(gardenFieldDTO);        entity.setOwner(currentUser);        entity = gardenFieldRepository.save(entity);        return gardenFieldMapper.toDto(entity);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/GardenFieldService.java", "stars": "2", "class": {"name": "GardenFieldService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllGardenFields", "params": ["Pageable"], "throws": null, "modifiers": ["public"], "return_type": "Page<GardenFieldDTO>", "snippet": "    public Page<GardenFieldDTO> getAllGardenFields(Pageable pageable) {        return gardenFieldRepository.findAll(pageable).map(gardenFieldMapper::toDto);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/GardenFieldService.java", "stars": "2", "class": {"name": "GardenFieldService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findOne", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "GardenFieldDTO", "snippet": "    public GardenFieldDTO findOne(Long id) {        return gardenFieldRepository.findById(id).map(gardenFieldMapper::toDto).orElseThrow(GardenFieldNotFoundServiceException::new);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/GardenFieldService.java", "stars": "2", "class": {"name": "GardenFieldService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllUserGardenfields", "params": ["Pageable"], "throws": null, "modifiers": ["public"], "return_type": "Page<GardenFieldDTO>", "snippet": "    public Page<GardenFieldDTO> getAllUserGardenfields(Pageable pageable) {        return gardenFieldRepository.findAllByOwner(pageable, this.securityHelperService.getLoggedInUser()).map(gardenFieldMapper::toDto);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/GardenFieldService.java", "stars": "2", "class": {"name": "GardenFieldService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateGardenField", "params": ["GardenFieldDTO"], "throws": null, "modifiers": ["public"], "return_type": "Optional<GardenFieldDTO>", "snippet": "    public Optional<GardenFieldDTO> updateGardenField(GardenFieldDTO gardenFieldDTO) {        return Optional.of(gardenFieldRepository            .findById(gardenFieldDTO.getId()))            .filter(Optional::isPresent)            .map(Optional::get)            .map(gardenField -> {                securityHelperService.checkAuthority(gardenField.getOwner().getId());                gardenField.setName(gardenFieldDTO.getName());                gardenField.setDescription(gardenFieldDTO.getDescription());                gardenField.setSizeInM2(gardenFieldDTO.getSizeInM2());                gardenField.setPricePerM2(gardenFieldDTO.getPricePerM2());                gardenField.setLatitude(gardenFieldDTO.getLatitude());                gardenField.setLongitude(gardenFieldDTO.getLongitude());                gardenField.setCity(gardenFieldDTO.getCity());                gardenField.setRoofed(gardenFieldDTO.getRoofed());                gardenField.setGlassHouse(gardenFieldDTO.getGlassHouse());                gardenField.setHigh(gardenFieldDTO.getHigh());                gardenField.setWater(gardenFieldDTO.getWater());                gardenField.setElectricity(gardenFieldDTO.getElectricity());                gardenField.setPhValue(gardenFieldDTO.getPhValue());                //This allows changing a gardenfield to a different user/owner!                gardenField.setOwner(userRepository.findById(gardenFieldDTO.getOwner().getId())                    .orElseThrow(GardenFieldWithoutOwnerServiceException::new));                gardenFieldRepository.save(gardenField);                log.debug(\"Changed Information for GardenField: {}\", gardenFieldDTO);                return gardenField;            })            .map(gardenFieldMapper::toDto);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/GardenFieldService.java", "stars": "2", "class": {"name": "GardenFieldService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteGardenField", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteGardenField(Long id) {        gardenFieldRepository.findById(id).ifPresent(gardenField -> {            securityHelperService.checkAuthority(gardenField.getOwner().getId());            gardenField.setDeleted(Instant.now());            imageStorageService.deleteImages(id);            gardenFieldRepository.save(gardenField);            log.debug(\"Deleted GardenField: {}\", gardenField);        });    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/GardenFieldService.java", "stars": "2", "class": {"name": "GardenFieldService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "filterGardenFields", "params": ["Pageable", "GardenFieldFilterCriteria"], "throws": null, "modifiers": ["public"], "return_type": "Page<GardenFieldDTO>", "snippet": "    public Page<GardenFieldDTO> filterGardenFields(Pageable pageable, @Nullable GardenFieldFilterCriteria gardenFieldFilterCriteria) {        final String validationResult = gardenFieldFilterCriteriaValidator.isValid(gardenFieldFilterCriteria);        if (validationResult.isEmpty()) {            if (gardenFieldFilterCriteria == null || gardenFieldFilterCriteria.checkAllNull()) {                return gardenFieldRepository.findAll(pageable).map(gardenFieldMapper::toDto);            }            return gardenFieldRepository.filter(pageable, gardenFieldFilterCriteria).map(gardenFieldMapper::toDto);        } else {            throw new GardenFieldFilterCriteriaValidationServiceException(validationResult);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/GardenFieldService.java", "stars": "2", "class": {"name": "GardenFieldService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "autocomplete", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<GardenFieldDTO>", "snippet": "    public List<GardenFieldDTO> autocomplete(@Nullable final String partialSearchString) {        return this.gardenFieldRepository.autocompleteSearch(partialSearchString)            .stream().map(gardenFieldMapper::toDto).collect(Collectors.toList());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/GardenFieldService.java", "stars": "2", "class": {"name": "GardenFieldService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFilterBoundaries", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FilterBoundariesDTO", "snippet": "    public FilterBoundariesDTO getFilterBoundaries() {        FilterBoundariesDTO filterBoundariesDTO = new FilterBoundariesDTO();        filterBoundariesDTO.setMinPrice(Math.floor(gardenFieldRepository.getMinPriceForPerMonth()));        filterBoundariesDTO.setMaxPrice(Math.ceil(gardenFieldRepository.getMaxPriceForSizePerMonth()));        filterBoundariesDTO.setMinSize(Math.floor(gardenFieldRepository.getMinSize()));        filterBoundariesDTO.setMaxSize(Math.ceil(gardenFieldRepository.getMaxSize()));        return filterBoundariesDTO;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/GardenFieldService.java", "stars": "2", "class": {"name": "GardenFieldService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "BigDecimal", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, BigDecimal parameter, JdbcType jdbcType)      throws SQLException {    ps.setBigDecimal(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BigDecimalTypeHandler.java", "stars": "15", "class": {"name": "BigDecimalTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "  public BigDecimal getNullableResult(ResultSet rs, String columnName)      throws SQLException {    return rs.getBigDecimal(columnName);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BigDecimalTypeHandler.java", "stars": "15", "class": {"name": "BigDecimalTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "  public BigDecimal getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    return rs.getBigDecimal(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BigDecimalTypeHandler.java", "stars": "15", "class": {"name": "BigDecimalTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "  public BigDecimal getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    return cs.getBigDecimal(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BigDecimalTypeHandler.java", "stars": "15", "class": {"name": "BigDecimalTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "cast", "params": ["Class<?>", "Type", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "Object", "snippet": "    protected Object cast(Class<?> target, Type[] neededGenerics, Object value) {        Class<? extends ConfigurationBase> configClass = target.asSubclass(ConfigurationBase.class);        Constructor<? extends ConfigurationBase> constructor = CACHED_CONSTRUCTORS.get(configClass);        if (constructor == null) {            try {                constructor = configClass.getDeclaredConstructor();                constructor.setAccessible(true);            } catch (NoSuchMethodException e) {                return null;            }            CACHED_CONSTRUCTORS.put(configClass, constructor);        }        ConfigurationBase config = null;        try {            config = constructor.newInstance();        } catch (InstantiationException ignore) {        } catch (IllegalAccessException e) {            e.printStackTrace();            return null;        } catch (InvocationTargetException e) {            e.getCause().printStackTrace();        }    /*if (config != null) {        config.load();    }*/        return config;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/ConfigurationBaseTypeConversion.java", "stars": "3", "class": {"name": "ConfigurationBaseTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "isApplicable", "params": ["Class<?>", "Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isApplicable(Class<?> target, Object value) {        return ConfigurationBase.class.isAssignableFrom(target) && value instanceof Map;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/ConfigurationBaseTypeConversion.java", "stars": "3", "class": {"name": "ConfigurationBaseTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "getParametersRequired", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getParametersRequired() {        return -1;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/ConfigurationBaseTypeConversion.java", "stars": "3", "class": {"name": "ConfigurationBaseTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException", "ClassNotFoundException", "IllegalAccessException", "InstantiationException", "InvocationTargetException", "NoSuchMethodException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException, ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException, NoSuchMethodException {        //\u53ef\u4ee5\u521b\u5efa\u4efb\u610f\u7c7b\u7684\u5bf9\u8c61\uff0c\u53ef\u4ee5\u6267\u884c\u4efb\u610f\u65b9\u6cd5        /*         * \u524d\u63d0\uff1a\u4e0d\u80fd\u6539\u53d8\u8be5\u7c7b\u7684\u4efb\u4f55\u4ee3\u7801\uff0c\u53ef\u4ee5\u521b\u5efa\u4efb\u610f\u7c7b\u7684\u5bf9\u8c61\uff0c\u53ef\u4ee5\u6267\u884c\u4efb\u610f\u65b9\u6cd5         *///        Person p = new Person();//        p.eat();        //1\u3001\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6        //1.1 \u521b\u5efa properties \u5bf9\u8c61        Properties pro = new Properties();        //1.2 \u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\uff0c\u8f6c\u5316\u4e3a\u4e00\u4e2a\u96c6\u5408        //1.2.1 \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u914d\u7f6e\u6587\u4ef6        ClassLoader classLoader = reflectTest.class.getClassLoader();        InputStream is = classLoader.getResourceAsStream(\"java2/itcast/pro.properties\");        System.out.println(is);        pro.load(is);        //2\u3001\u83b7\u53d6\u914d\u7f6e\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u6570\u636e        String className = pro.getProperty(\"className\");        String methodName = pro.getProperty(\"methodName\");        //System.out.println(className);        //3\u3001\u52a0\u8f7d\u8fdb\u5185\u5b58        Class<?> cls = Class.forName(className);        //4\u3001\u521b\u5efa\u5bf9\u8c61        Object obj = cls.newInstance();        //5\u3001\u83b7\u53d6\u5bf9\u8c61\u65b9\u6cd5        Method method = cls.getMethod(methodName);        //6\u3001\u6267\u884c\u65b9\u6cd5        method.invoke(obj);    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/java2/itcast/reflect/reflectTest.java", "stars": "2", "class": {"name": "reflectTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTransaction", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Transaction", "snippet": "  public Transaction getTransaction() {    if (closed) {      throw new ExecutorException(\"Executor was closed.\");    }    return transaction;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "close", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void close(boolean forceRollback) {    try {      try {        rollback(forceRollback);      } finally {        if (transaction != null) {          transaction.close();        }      }    } catch (SQLException e) {      // Ignore.  There's nothing that can be done at this point.      log.warn(\"Unexpected exception on closing transaction.  Cause: \" + e);    } finally {      transaction = null;      deferredLoads = null;      localCache = null;      localOutputParameterCache = null;      closed = true;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "isClosed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isClosed() {    return closed;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "update", "params": ["MappedStatement", "Object"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int update(MappedStatement ms, Object parameter) throws SQLException {    ErrorContext.instance().resource(ms.getResource()).activity(\"executing an update\").object(ms.getId());    if (closed) {      throw new ExecutorException(\"Executor was closed.\");    }    clearLocalCache();    return doUpdate(ms, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "flushStatements", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<BatchResult>", "snippet": "  public List<BatchResult> flushStatements() throws SQLException {    return flushStatements(false);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "flushStatements", "params": ["boolean"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<BatchResult>", "snippet": "  public List<BatchResult> flushStatements(boolean isRollBack) throws SQLException {    if (closed) {      throw new ExecutorException(\"Executor was closed.\");    }    return doFlushStatements(isRollBack);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "query", "params": ["MappedStatement", "Object", "RowBounds", "ResultHandler"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<E>", "snippet": "  public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {    BoundSql boundSql = ms.getBoundSql(parameter);    CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);    return query(ms, parameter, rowBounds, resultHandler, key, boundSql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "query", "params": ["MappedStatement", "Object", "RowBounds", "ResultHandler", "CacheKey", "BoundSql"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<E>", "snippet": "  public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {    ErrorContext.instance().resource(ms.getResource()).activity(\"executing a query\").object(ms.getId());    if (closed) {      throw new ExecutorException(\"Executor was closed.\");    }    if (queryStack == 0 && ms.isFlushCacheRequired()) {      clearLocalCache();    }    List<E> list;    try {      queryStack++;      list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;      if (list != null) {        handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);      } else {        list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);      }    } finally {      queryStack--;    }    if (queryStack == 0) {      for (DeferredLoad deferredLoad : deferredLoads) {        deferredLoad.load();      }      // issue #601      deferredLoads.clear();      if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {        // issue #482        clearLocalCache();      }    }    return list;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "queryCursor", "params": ["MappedStatement", "Object", "RowBounds"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Cursor<E>", "snippet": "  public <E> Cursor<E> queryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds) throws SQLException {    BoundSql boundSql = ms.getBoundSql(parameter);    return doQueryCursor(ms, parameter, rowBounds, boundSql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "deferLoad", "params": ["MappedStatement", "MetaObject", "String", "CacheKey", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void deferLoad(MappedStatement ms, MetaObject resultObject, String property, CacheKey key, Class<?> targetType) {    if (closed) {      throw new ExecutorException(\"Executor was closed.\");    }    DeferredLoad deferredLoad = new DeferredLoad(resultObject, property, key, localCache, configuration, targetType);    if (deferredLoad.canLoad()) {      deferredLoad.load();    } else {      deferredLoads.add(new DeferredLoad(resultObject, property, key, localCache, configuration, targetType));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "createCacheKey", "params": ["MappedStatement", "Object", "RowBounds", "BoundSql"], "throws": null, "modifiers": ["public"], "return_type": "CacheKey", "snippet": "  public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql) {    if (closed) {      throw new ExecutorException(\"Executor was closed.\");    }    CacheKey cacheKey = new CacheKey();    cacheKey.update(ms.getId());    cacheKey.update(rowBounds.getOffset());    cacheKey.update(rowBounds.getLimit());    cacheKey.update(boundSql.getSql());    List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();    TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();    // mimic DefaultParameterHandler logic    for (ParameterMapping parameterMapping : parameterMappings) {      if (parameterMapping.getMode() != ParameterMode.OUT) {        Object value;        String propertyName = parameterMapping.getProperty();        if (boundSql.hasAdditionalParameter(propertyName)) {          value = boundSql.getAdditionalParameter(propertyName);        } else if (parameterObject == null) {          value = null;        } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {          value = parameterObject;        } else {          MetaObject metaObject = configuration.newMetaObject(parameterObject);          value = metaObject.getValue(propertyName);        }        cacheKey.update(value);      }    }    if (configuration.getEnvironment() != null) {      // issue #176      cacheKey.update(configuration.getEnvironment().getId());    }    return cacheKey;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "isCached", "params": ["MappedStatement", "CacheKey"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isCached(MappedStatement ms, CacheKey key) {    return localCache.getObject(key) != null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "commit", "params": ["boolean"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void commit(boolean required) throws SQLException {    if (closed) {      throw new ExecutorException(\"Cannot commit, transaction is already closed\");    }    clearLocalCache();    flushStatements();    if (required) {      transaction.commit();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "rollback", "params": ["boolean"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void rollback(boolean required) throws SQLException {    if (!closed) {      try {        clearLocalCache();        flushStatements(true);      } finally {        if (required) {          transaction.rollback();        }      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "clearLocalCache", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void clearLocalCache() {    if (!closed) {      localCache.clear();      localOutputParameterCache.clear();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "doUpdate", "params": ["MappedStatement", "Object"], "throws": ["SQLException"], "modifiers": ["abstract", "protected"], "return_type": "int", "snippet": "  protected abstract int doUpdate(MappedStatement ms, Object parameter)      throws SQLException;  protected abstract List<BatchResult> doFlushStatements(boolean isRollback)      throws SQLException;  protected abstract <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)      throws SQLException;  protected abstract <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql)      throws SQLException;  protected void closeStatement(Statement statement) {    if (statement != null) {      try {        statement.close();      } catch (SQLException e) {        // ignore      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "doFlushStatements", "params": ["boolean"], "throws": ["SQLException"], "modifiers": ["abstract", "protected"], "return_type": "List<BatchResult>", "snippet": "  protected abstract List<BatchResult> doFlushStatements(boolean isRollback)      throws SQLException;  protected abstract <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)      throws SQLException;  protected abstract <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql)      throws SQLException;  protected void closeStatement(Statement statement) {    if (statement != null) {      try {        statement.close();      } catch (SQLException e) {        // ignore      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "doQuery", "params": ["MappedStatement", "Object", "RowBounds", "ResultHandler", "BoundSql"], "throws": ["SQLException"], "modifiers": ["abstract", "protected"], "return_type": "List<E>", "snippet": "  protected abstract <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)      throws SQLException;  protected abstract <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql)      throws SQLException;  protected void closeStatement(Statement statement) {    if (statement != null) {      try {        statement.close();      } catch (SQLException e) {        // ignore      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "doQueryCursor", "params": ["MappedStatement", "Object", "RowBounds", "BoundSql"], "throws": ["SQLException"], "modifiers": ["abstract", "protected"], "return_type": "Cursor<E>", "snippet": "  protected abstract <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql)      throws SQLException;  protected void closeStatement(Statement statement) {    if (statement != null) {      try {        statement.close();      } catch (SQLException e) {        // ignore      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "closeStatement", "params": ["Statement"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void closeStatement(Statement statement) {    if (statement != null) {      try {        statement.close();      } catch (SQLException e) {        // ignore      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "applyTransactionTimeout", "params": ["Statement"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void applyTransactionTimeout(Statement statement) throws SQLException {    StatementUtil.applyTransactionTimeout(statement, statement.getQueryTimeout(), transaction.getTimeout());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "handleLocallyCachedOutputParameters", "params": ["MappedStatement", "CacheKey", "Object", "BoundSql"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleLocallyCachedOutputParameters(MappedStatement ms, CacheKey key, Object parameter, BoundSql boundSql) {    if (ms.getStatementType() == StatementType.CALLABLE) {      final Object cachedParameter = localOutputParameterCache.getObject(key);      if (cachedParameter != null && parameter != null) {        final MetaObject metaCachedParameter = configuration.newMetaObject(cachedParameter);        final MetaObject metaParameter = configuration.newMetaObject(parameter);        for (ParameterMapping parameterMapping : boundSql.getParameterMappings()) {          if (parameterMapping.getMode() != ParameterMode.IN) {            final String parameterName = parameterMapping.getProperty();            final Object cachedValue = metaCachedParameter.getValue(parameterName);            metaParameter.setValue(parameterName, cachedValue);          }        }      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "queryFromDatabase", "params": ["MappedStatement", "Object", "RowBounds", "ResultHandler", "CacheKey", "BoundSql"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "List<E>", "snippet": "  private <E> List<E> queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {    List<E> list;    localCache.putObject(key, EXECUTION_PLACEHOLDER);    try {      list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);    } finally {      localCache.removeObject(key);    }    localCache.putObject(key, list);    if (ms.getStatementType() == StatementType.CALLABLE) {      localOutputParameterCache.putObject(key, parameter);    }    return list;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "getConnection", "params": ["Log"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "Connection", "snippet": "  protected Connection getConnection(Log statementLog) throws SQLException {    Connection connection = transaction.getConnection();    if (statementLog.isDebugEnabled()) {      return ConnectionLogger.newInstance(connection, statementLog, queryStack);    } else {      return connection;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "setExecutorWrapper", "params": ["Executor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setExecutorWrapper(Executor wrapper) {    this.wrapper = wrapper;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "BaseExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public", "abstract"]}}, {"method_name": "canLoad", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean canLoad() {      return localCache.getObject(key) != null && localCache.getObject(key) != EXECUTION_PLACEHOLDER;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "DeferredLoad", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void load() {      @SuppressWarnings(\"unchecked\")      // we suppose we get back a List      List<Object> list = (List<Object>) localCache.getObject(key);      Object value = resultExtractor.extractObjectFromList(list, targetType);      resultObject.setValue(property, value);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/BaseExecutor.java", "stars": "15", "class": {"name": "DeferredLoad", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        if (BuildConfig.DEBUG) {            Utils.enableStrictMode();        }        super.onCreate(savedInstanceState);        if (getSupportFragmentManager().findFragmentByTag(TAG) == null) {            final FragmentTransaction ft = getSupportFragmentManager().beginTransaction();            ft.add(android.R.id.content, new ImageGridFragment(), TAG);            ft.commit();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageGridActivity.java", "stars": "74", "class": {"name": "ImageGridActivity", "extends": "FragmentActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        Random rand = new Random();        //Set enemies speed (start)        enemies2.forEach(e -> {            e.speed = 10 + rand.nextInt(30);        });        while (!collision2) {            enemies2.forEach(e -> {                e.setLocation(e.getX()+ e.speed, e.getY() );                //Reuse enemies + change speed                if (e.getX() >= Utils.WIN_SIZE) {                    e.setLocation(0, rand.nextInt(Utils.WIN_SIZE - Utils.ENEMEY2_SIZE));                    e.speed = 10 + rand.nextInt(40);                }                //Check collision                if (e.getX() < character.getX() + Utils.CHARACTER_SIZE &&                        e.getX() + Utils.ENEMEY2_SIZE > character.getX() &&                        e.getY() < character.getY() + Utils.CHARACTER_SIZE &&                        e.getY() + Utils.ENEMEY2_SIZE > character.getY()) {                    //Shut this thread                    collision2 = true;                    //Shut the other thread too                    Controller.collision=true;                    //Stop the timer                    MainWindow.end= System.currentTimeMillis();                    new Final();                }            });            try {                Thread.sleep(200);            } catch (InterruptedException ignored) {            }        }    }", "url": "https://raw.githubusercontent.com/radudioane99/Shape-Storm/master/Controller2.java", "stars": "2", "class": {"name": "Controller2", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": ["String"], "throws": ["ExecutionException", "InterruptedException"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String getValue(String key) throws ExecutionException, InterruptedException {        String value = \"\";        KV kvClient = client.getKVClient();        ByteSequence byteSequence = ByteSequence.from(key, StandardCharsets.UTF_8);        GetResponse getResponse = kvClient.get(byteSequence).get();        if (getResponse.getKvs().size() > 0) {            KeyValue keyValue = getResponse.getKvs().get(0);            value = Optional.ofNullable(keyValue.getValue()).map(v -> v.toString(StandardCharsets.UTF_8)).orElse(\"\");        }        return value;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/component/EtcdComponent.java", "stars": "4", "class": {"name": "EtcdComponent", "extends": null, "implements": ["EnvironmentAware", "InitializingBean"], "modifiers": ["public"]}}, {"method_name": "watch", "params": ["String", "Consumer<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void watch(String key, Consumer<String> consumer) {        Watch watchClient = client.getWatchClient();        ByteSequence byteSequence = ByteSequence.from(key, StandardCharsets.UTF_8);        //watch\u4e00\u6b21\u5373\u53ef        watchClient.watch(byteSequence, watchResponse -> {            for (WatchEvent event : watchResponse.getEvents()) {                WatchEvent.EventType eventType = event.getEventType();                if (eventType == WatchEvent.EventType.PUT) {                    LOG.info(\"etcd watch put key={}\", key);                    //\u65b0\u589e\u6216\u66f4\u65b0                    String value = Optional.ofNullable(event.getKeyValue().getValue()).map(v -> v.toString(StandardCharsets.UTF_8)).orElse(\"\");                    consumer.accept(value);                } else if (eventType == WatchEvent.EventType.DELETE) {                    //\u5220\u9664                    LOG.warn(\"etcd watch ignore delete key={}\", key);                }            }        });    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/component/EtcdComponent.java", "stars": "4", "class": {"name": "EtcdComponent", "extends": null, "implements": ["EnvironmentAware", "InitializingBean"], "modifiers": ["public"]}}, {"method_name": "setEnvironment", "params": ["Environment"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEnvironment(Environment environment) {        this.environment = (ConfigurableEnvironment) environment;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/component/EtcdComponent.java", "stars": "4", "class": {"name": "EtcdComponent", "extends": null, "implements": ["EnvironmentAware", "InitializingBean"], "modifiers": ["public"]}}, {"method_name": "afterPropertiesSet", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterPropertiesSet() throws Exception {        this.imEtcdConfigProperties = EtcdConfigPropertiesUtil.buildEtcdConfigProperties(environment);        ClientBuilder clientBuilder = Client.builder().endpoints(imEtcdConfigProperties.getServerAddr().toArray(new String[0]));        if (!StringUtils.isEmpty(imEtcdConfigProperties.getUsername())) {            clientBuilder.user(ByteSequence.from(imEtcdConfigProperties.getUsername(), StandardCharsets.UTF_8));        }        if (!StringUtils.isEmpty(imEtcdConfigProperties.getPassword())) {            clientBuilder.password(ByteSequence.from(imEtcdConfigProperties.getPassword(), StandardCharsets.UTF_8));        }        clientBuilder.loadBalancerPolicy(\"round_robin\");        this.client = clientBuilder.build();        LOG.info(\"etcdComponent init success\");    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/component/EtcdComponent.java", "stars": "4", "class": {"name": "EtcdComponent", "extends": null, "implements": ["EnvironmentAware", "InitializingBean"], "modifiers": ["public"]}}, {"method_name": "consumeCargoCreateCompletedEvent", "params": ["SampleEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void consumeCargoCreateCompletedEvent(SampleEvent event) {        service.consumeSampleEvent(event);    }", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/consumer/SampleConsumer.java", "stars": "2", "class": {"name": "SampleConsumer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "preHandle", "params": ["HttpServletRequest", "HttpServletResponse", "Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean preHandle(HttpServletRequest req, HttpServletResponse resp, Object handler) throws Exception {//        if (!check) {//            return true;//        }//        String referer = req.getHeader(\"referer\");//        String host = req.getServerName();//        // \u9a8c\u8bc1\u975eget\u8bf7\u6c42//        if (!\"GET\".equals(req.getMethod())) {//            if (referer == null) {//                // \u72b6\u6001\u7f6e\u4e3a404//                resp.setStatus(HttpServletResponse.SC_NOT_FOUND);//                return false;//            }//            java.net.URL url = null;//            try {//                url = new java.net.URL(referer);//            } catch (MalformedURLException e) {//                // URL\u89e3\u6790\u5f02\u5e38\uff0c\u4e5f\u7f6e\u4e3a404//                resp.setStatus(HttpServletResponse.SC_NOT_FOUND);//                return false;//            }//            // \u9996\u5148\u5224\u65ad\u8bf7\u6c42\u57df\u540d\u548creferer\u57df\u540d\u662f\u5426\u76f8\u540c//            if (!host.equals(url.getHost())) {//                // \u5982\u679c\u4e0d\u7b49\uff0c\u5224\u65ad\u662f\u5426\u5728\u767d\u540d\u5355\u4e2d//                if (refererDomain != null) {//                    for (String s : refererDomain) {//                        if (s.equals(url.getHost())) {//                            return true;//                        }//                    }//                }////                resultInfo(resp, ResponseCode.REFERER_ERROR);//                logger.error(\"------->>> referer\u6821\u9a8c\u98ce\u9669 \uff0c\u7981\u6b62\u8bbf\u95ee\");//                return false;//            }//        }        return true;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-main/src/main/java/com/cgb/bcpinstall/main/interceptor/RefererInterceptor.java", "stars": "7", "class": {"name": "RefererInterceptor", "extends": "HandlerInterceptorAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "resultInfo", "params": ["HttpServletResponse", "ResponseCode"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void resultInfo(HttpServletResponse response, ResponseCode code) throws Exception {        BaseResponse resp = new BaseResponse();        resp.setCode(code);        response.setContentType(\"application/json;charset=UTF-8\");        PrintWriter writer = response.getWriter();        writer.write(JSONObject.toJSONString(resp, SerializerFeature.WriteEnumUsingToString));        writer.flush();        writer.close();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-main/src/main/java/com/cgb/bcpinstall/main/interceptor/RefererInterceptor.java", "stars": "7", "class": {"name": "RefererInterceptor", "extends": "HandlerInterceptorAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/language/MapperConfig.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/language/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/LanguageTest.java", "stars": "15", "class": {"name": "LanguageTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testDynamicSelectWithPropertyParams", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testDynamicSelectWithPropertyParams() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter p = new Parameter(true, \"Fli%\");      List<Name> answer = sqlSession.selectList(\"selectNames\", p);      assertEquals(3, answer.size());      for (Name n : answer) {        assertEquals(\"Flintstone\", n.getLastName());      }      p = new Parameter(false, \"Fli%\");      answer = sqlSession.selectList(\"selectNames\", p);      assertEquals(3, answer.size());      for (Name n : answer) {        assertNull(n.getLastName());      }      p = new Parameter(false, \"Rub%\");      answer = sqlSession.selectList(\"selectNames\", p);      assertEquals(2, answer.size());      for (Name n : answer) {        assertNull(n.getLastName());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/LanguageTest.java", "stars": "15", "class": {"name": "LanguageTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testDynamicSelectWithExpressionParams", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testDynamicSelectWithExpressionParams() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter p = new Parameter(true, \"Fli\");      List<Name> answer = sqlSession.selectList(\"selectNamesWithExpressions\", p);      assertEquals(3, answer.size());      for (Name n : answer) {        assertEquals(\"Flintstone\", n.getLastName());      }      p = new Parameter(false, \"Fli\");      answer = sqlSession.selectList(\"selectNamesWithExpressions\", p);      assertEquals(3, answer.size());      for (Name n : answer) {        assertNull(n.getLastName());      }      p = new Parameter(false, \"Rub\");      answer = sqlSession.selectList(\"selectNamesWithExpressions\", p);      assertEquals(2, answer.size());      for (Name n : answer) {        assertNull(n.getLastName());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/LanguageTest.java", "stars": "15", "class": {"name": "LanguageTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testDynamicSelectWithIteration", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testDynamicSelectWithIteration() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      int[] ids = { 2, 4, 5 };      Map<String, Object> param = new HashMap<>();      param.put(\"ids\", ids);      List<Name> answer = sqlSession.selectList(\"selectNamesWithIteration\", param);      assertEquals(3, answer.size());      for (int i = 0; i < ids.length; i++) {        assertEquals(ids[i], answer.get(i).getId());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/LanguageTest.java", "stars": "15", "class": {"name": "LanguageTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testLangRaw", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testLangRaw() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter p = new Parameter(true, \"Fli%\");      List<Name> answer = sqlSession.selectList(\"selectRaw\", p);      assertEquals(3, answer.size());      for (Name n : answer) {        assertEquals(\"Flintstone\", n.getLastName());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/LanguageTest.java", "stars": "15", "class": {"name": "LanguageTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testLangRawWithInclude", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testLangRawWithInclude() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter p = new Parameter(true, \"Fli%\");      List<Name> answer = sqlSession.selectList(\"selectRawWithInclude\", p);      assertEquals(3, answer.size());      for (Name n : answer) {        assertEquals(\"Flintstone\", n.getLastName());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/LanguageTest.java", "stars": "15", "class": {"name": "LanguageTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testLangRawWithIncludeAndCData", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testLangRawWithIncludeAndCData() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter p = new Parameter(true, \"Fli%\");      List<Name> answer = sqlSession.selectList(\"selectRawWithIncludeAndCData\", p);      assertEquals(3, answer.size());      for (Name n : answer) {        assertEquals(\"Flintstone\", n.getLastName());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/LanguageTest.java", "stars": "15", "class": {"name": "LanguageTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testLangXmlTags", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testLangXmlTags() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter p = new Parameter(true, \"Fli%\");      List<Name> answer = sqlSession.selectList(\"selectXml\", p);      assertEquals(3, answer.size());      for (Name n : answer) {        assertEquals(\"Flintstone\", n.getLastName());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/LanguageTest.java", "stars": "15", "class": {"name": "LanguageTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testLangRawWithMapper", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testLangRawWithMapper() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter p = new Parameter(true, \"Fli%\");      Mapper m = sqlSession.getMapper(Mapper.class);      List<Name> answer = m.selectRawWithMapper(p);      assertEquals(3, answer.size());      for (Name n : answer) {        assertEquals(\"Flintstone\", n.getLastName());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/LanguageTest.java", "stars": "15", "class": {"name": "LanguageTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testLangVelocityWithMapper", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testLangVelocityWithMapper() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter p = new Parameter(true, \"Fli%\");      Mapper m = sqlSession.getMapper(Mapper.class);      List<Name> answer = m.selectVelocityWithMapper(p);      assertEquals(3, answer.size());      for (Name n : answer) {        assertEquals(\"Flintstone\", n.getLastName());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/LanguageTest.java", "stars": "15", "class": {"name": "LanguageTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testLangXmlWithMapper", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testLangXmlWithMapper() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter p = new Parameter(true, \"Fli%\");      Mapper m = sqlSession.getMapper(Mapper.class);      List<Name> answer = m.selectXmlWithMapper(p);      assertEquals(3, answer.size());      for (Name n : answer) {        assertEquals(\"Flintstone\", n.getLastName());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/LanguageTest.java", "stars": "15", "class": {"name": "LanguageTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testLangXmlWithMapperAndSqlSymbols", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testLangXmlWithMapperAndSqlSymbols() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter p = new Parameter(true, \"Fli%\");      Mapper m = sqlSession.getMapper(Mapper.class);      List<Name> answer = m.selectXmlWithMapperAndSqlSymbols(p);      assertEquals(3, answer.size());      for (Name n : answer) {        assertEquals(\"Flintstone\", n.getLastName());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/LanguageTest.java", "stars": "15", "class": {"name": "LanguageTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "preHandle", "params": ["HttpServletRequest", "HttpServletResponse", "Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        String remote = request.getRemoteAddr();        String localIp = Inet4Address.getLocalHost().getHostAddress();        return StringUtils.isNotBlank(remote) && remote.equals(localIp);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/auth/TaskProcessAuthInterceptor.java", "stars": "23", "class": {"name": "TaskProcessAuthInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "isWatched", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isWatched() {        return watched;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/Watched.java", "stars": "4", "class": {"name": "Watched", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setWatched", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWatched(boolean watched) {        this.watched = watched;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/shows/Watched.java", "stars": "4", "class": {"name": "Watched", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\tpublic View getView(final int position, View convertView, ViewGroup parent) {\t\tView view = convertView;\t\tViewHolder holder;\t\tif (view == null) {\t\t\tLayoutInflater inflater = (LayoutInflater) activity\t\t\t\t\t.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\t\t\tview = inflater.inflate(row, null);\t\t\tholder = new ViewHolder();\t\t\tview.setTag(holder);\t\t} else {\t\t\tholder = (ViewHolder) view.getTag();\t\t}\t\tif ((items == null) || ((position + 1) > items.size()))\t\t\treturn view;\t\tobjBean = items.get(position);\t\tholder.tvname = (TextView) view.findViewById(R.id.tvname);\t\tholder.tvPhoneNo = (TextView) view.findViewById(R.id.tvphone);\t\tif (holder.tvname != null && null != objBean.getName()\t\t\t\t&& objBean.getName().trim().length() > 0) {\t\t\tholder.tvname.setText(Html.fromHtml(objBean.getName()));\t\t}\t\tif (holder.tvPhoneNo != null && null != objBean.getPhoneNo()\t\t\t\t&& objBean.getPhoneNo().trim().length() > 0) {\t\t\tholder.tvPhoneNo.setText(Html.fromHtml(objBean.getPhoneNo()));\t\t}\t\treturn view;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android%20Contact%20ListView/src/com/samir/ContanctAdapter.java", "stars": "74", "class": {"name": "ContanctAdapter", "extends": "ArrayAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tDiffUI ui = new DiffUI();\t\tui.start();\t}", "url": "https://raw.githubusercontent.com/TheKodeToad/DiffUI/master/src/main/java/me/thekodetoad/diffui/DiffUIMain.java", "stars": "1", "class": {"name": "DiffUIMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void update(Object object) {    throw new CacheException(\"Not allowed to update a NullCacheKey instance.\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/NullCacheKey.java", "stars": "15", "class": {"name": "NullCacheKey", "extends": "CacheKey", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "updateAll", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateAll(Object[] objects) {    throw new CacheException(\"Not allowed to update a NullCacheKey instance.\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/NullCacheKey.java", "stars": "15", "class": {"name": "NullCacheKey", "extends": "CacheKey", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "insertPatientInfo", "params": ["Patient"], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean insertPatientInfo(@RequestBody Patient patient) {        return patientDao.savePatientInfo(patient);    }", "url": "https://raw.githubusercontent.com/chandureddys/spring-boot-doc-appointment/master/src/main/java/com/docappointment/project/PatientsController.java", "stars": "2", "class": {"name": "PatientsController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() {        logger.info(\"Setup test\");        clientCaller = new ClientCaller(HOST_PORT, PROTO_FOLDER.toString(), FULL_METHOD);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/test/vn/zalopay/benchmark/ClientCallerTest.java", "stars": "3", "class": {"name": "ClientCallerTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void test() {        logger.info(\"Main test\");        clientCaller.buildRequest(REQUEST_FILE.toString(), REQUEST_JSON);        DynamicMessage resp = clientCaller.call(10000);        logger.info(String.format(\"At ClientCaller response data= %s\", resp));    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/test/vn/zalopay/benchmark/ClientCallerTest.java", "stars": "3", "class": {"name": "ClientCallerTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWorkspaceRoot", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "Path", "snippet": "    private static Path getWorkspaceRoot() {        return Paths.get(\".\").toAbsolutePath();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/test/vn/zalopay/benchmark/ClientCallerTest.java", "stars": "3", "class": {"name": "ClientCallerTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(null)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedLavenderBlock.java", "stars": "2", "class": {"name": "PottedLavenderBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedLavenderBlock.java", "stars": "2", "class": {"name": "PottedLavenderBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "isNormalCube", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean isNormalCube(BlockState state, IBlockReader worldIn, BlockPos pos) {\t\t\treturn false;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedLavenderBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "propagatesSkylightDown", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean propagatesSkylightDown(BlockState state, IBlockReader reader, BlockPos pos) {\t\t\treturn true;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedLavenderBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getShape", "params": ["BlockState", "IBlockReader", "BlockPos", "ISelectionContext"], "throws": null, "modifiers": ["public"], "return_type": "VoxelShape", "snippet": "\t\tpublic VoxelShape getShape(BlockState state, IBlockReader world, BlockPos pos, ISelectionContext context) {\t\t\treturn VoxelShapes.create(0.312D, 0D, 0.312D, 0.688D, 0.375D, 0.688D);\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedLavenderBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "tickRate", "params": ["IWorldReader"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int tickRate(IWorldReader world) {\t\t\treturn 0;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedLavenderBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(LavenderBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedLavenderBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMaterialColor", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "MaterialColor", "snippet": "\t\tpublic MaterialColor getMaterialColor(BlockState state, IBlockReader blockAccess, BlockPos pos) {\t\t\treturn MaterialColor.STONE;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedLavenderBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPushReaction", "params": ["BlockState"], "throws": null, "modifiers": ["public"], "return_type": "PushReaction", "snippet": "\t\tpublic PushReaction getPushReaction(BlockState state) {\t\t\treturn PushReaction.DESTROY;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedLavenderBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(Blocks.FLOWER_POT, (int) (1)));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedLavenderBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "removedByPlayer", "params": ["BlockState", "World", "BlockPos", "PlayerEntity", "boolean", "IFluidState"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean removedByPlayer(BlockState state, World world, BlockPos pos, PlayerEntity entity, boolean willHarvest, IFluidState fluid) {\t\t\tboolean retval = super.removedByPlayer(state, world, pos, entity, willHarvest, fluid);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tCustomFlowerPotBlockDestroyedByExplosionBlockDestroyedByPlayerProcedure.executeProcedure($_dependencies);\t\t\t}\t\t\treturn retval;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedLavenderBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onExplosionDestroy", "params": ["World", "BlockPos", "Explosion"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onExplosionDestroy(World world, BlockPos pos, Explosion e) {\t\t\tsuper.onExplosionDestroy(world, pos, e);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tCustomFlowerPotBlockDestroyedByExplosionBlockDestroyedByExplosionProcedure.executeProcedure($_dependencies);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedLavenderBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onBlockActivated", "params": ["BlockState", "World", "BlockPos", "PlayerEntity", "Hand", "BlockRayTraceResult"], "throws": null, "modifiers": ["public"], "return_type": "ActionResultType", "snippet": "\t\tpublic ActionResultType onBlockActivated(BlockState state, World world, BlockPos pos, PlayerEntity entity, Hand hand,\t\t\t\tBlockRayTraceResult hit) {\t\t\tsuper.onBlockActivated(state, world, pos, entity, hand, hit);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\tDirection direction = hit.getFace();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"entity\", entity);\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tPottedLavenderOnBlockRightClickedProcedure.executeProcedure($_dependencies);\t\t\t}\t\t\treturn ActionResultType.SUCCESS;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedLavenderBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "solution", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "\tpublic static int[] solution(int[] a, int k) {        // write your code in Java SE 8        \t\t\t\tif (k == 0 || a.length == 0) return a;                int len = a.length;        if (len < k) {            k = k % len;        }                rotate(a, a.length - k, a.length - 1);        rotate(a, 0, a.length - k - 1);        rotate(a, 0, a.length - 1);                return a;    }", "url": "https://raw.githubusercontent.com/njcodernoob/codility-java-solutions/master/ArrayRotation.java", "stars": "2", "class": {"name": "ArrayRotation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rotate", "params": ["int", "int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void rotate(int[] a, int start, int end) {                while (start < end) {            int temp = a[start];            a[start] = a[end];            a[end] = temp;                        start++;            end--;        }        }", "url": "https://raw.githubusercontent.com/njcodernoob/codility-java-solutions/master/ArrayRotation.java", "stars": "2", "class": {"name": "ArrayRotation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t// TODO Auto-generated method stub\t\tint array[] = { 3, 8, 9, 7, 6 };\t\tSystem.out.println(solution(array, 3));\t}", "url": "https://raw.githubusercontent.com/njcodernoob/codility-java-solutions/master/ArrayRotation.java", "stars": "2", "class": {"name": "ArrayRotation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOpacity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getOpacity ()\t{\t\treturn n_getOpacity ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellRenderer_SplitDrawable.java", "stars": "2", "class": {"name": "ShellRenderer_SplitDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getOpacity", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getOpacity ();\tpublic void draw (android.graphics.Canvas p0)\t{\t\tn_draw (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellRenderer_SplitDrawable.java", "stars": "2", "class": {"name": "ShellRenderer_SplitDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "draw", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void draw (android.graphics.Canvas p0)\t{\t\tn_draw (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellRenderer_SplitDrawable.java", "stars": "2", "class": {"name": "ShellRenderer_SplitDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_draw", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_draw (android.graphics.Canvas p0);\tpublic void setAlpha (int p0)\t{\t\tn_setAlpha (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellRenderer_SplitDrawable.java", "stars": "2", "class": {"name": "ShellRenderer_SplitDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "setAlpha", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAlpha (int p0)\t{\t\tn_setAlpha (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellRenderer_SplitDrawable.java", "stars": "2", "class": {"name": "ShellRenderer_SplitDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_setAlpha", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_setAlpha (int p0);\tpublic void setColorFilter (android.graphics.ColorFilter p0)\t{\t\tn_setColorFilter (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellRenderer_SplitDrawable.java", "stars": "2", "class": {"name": "ShellRenderer_SplitDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "setColorFilter", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setColorFilter (android.graphics.ColorFilter p0)\t{\t\tn_setColorFilter (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellRenderer_SplitDrawable.java", "stars": "2", "class": {"name": "ShellRenderer_SplitDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_setColorFilter", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_setColorFilter (android.graphics.ColorFilter p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellRenderer_SplitDrawable.java", "stars": "2", "class": {"name": "ShellRenderer_SplitDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellRenderer_SplitDrawable.java", "stars": "2", "class": {"name": "ShellRenderer_SplitDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellRenderer_SplitDrawable.java", "stars": "2", "class": {"name": "ShellRenderer_SplitDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        if(null != this.inputStream) {            BufferedWriter writer = null;            File workDir = TaskProcessUtils.getWorkDir(taskProcess);            Logger fileLogger = logger;            try{                if(null != workDir){                    writer = new BufferedWriter(new FileWriter(new File(workDir, loggerName), true));                    BufferedWriter finalWriter = writer;                    fileLogger = (Logger) Proxy.newProxyInstance(logger.getClass().getClassLoader(),                            new Class[]{Logger.class}, (proxy, method, args) -> {                                String pattern = \"debug|trace|info|error\";                                if(method.getName().matches(pattern)){                                    finalWriter.write(args[0] + \"\\n\");                                    if(immediateFlush){                                        finalWriter.flush();                                    }                                    return null;                                }                                return method.invoke(proxy, args);                            });                }                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));                String line;                while ((line = reader.readLine()) != null) {                    parser.parseLoggerOutput(line);                    fileLogger.info(line);                }            } catch (Exception e) {                //Ignore            } finally{                if(null != writer){                    try {                        writer.flush();                        writer.close();                    } catch (IOException e) {                        //Ignore                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/daemons/LoggerDaemon.java", "stars": "23", "class": {"name": "LoggerDaemon", "extends": "AbstractTaskDaemon", "implements": null, "modifiers": ["public"]}}, {"method_name": "isImmediateFlush", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isImmediateFlush() {        return immediateFlush;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/daemons/LoggerDaemon.java", "stars": "23", "class": {"name": "LoggerDaemon", "extends": "AbstractTaskDaemon", "implements": null, "modifiers": ["public"]}}, {"method_name": "setImmediateFlush", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setImmediateFlush(boolean immediateFlush) {        this.immediateFlush = immediateFlush;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/daemons/LoggerDaemon.java", "stars": "23", "class": {"name": "LoggerDaemon", "extends": "AbstractTaskDaemon", "implements": null, "modifiers": ["public"]}}, {"method_name": "send", "params": ["JsonObject"], "throws": null, "modifiers": ["public"], "return_type": "MessageProducer<JsonObject>", "snippet": "    public MessageProducer<JsonObject> send(JsonObject message) {        validateMessage(message);        return delegate.send(message);    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPIMessageProducer.java", "stars": "9", "class": {"name": "AsyncAPIMessageProducer", "extends": null, "implements": ["MessageProducer"], "modifiers": ["public"]}}, {"method_name": "send", "params": ["JsonObject", "Handler<AsyncResult>"], "throws": null, "modifiers": ["public"], "return_type": "MessageProducer<JsonObject>", "snippet": "    public <R> MessageProducer<JsonObject> send(JsonObject message,        Handler<AsyncResult<Message<R>>> replyHandler) {        validateMessage(message);        return delegate.send(message, replyHandler);    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPIMessageProducer.java", "stars": "9", "class": {"name": "AsyncAPIMessageProducer", "extends": null, "implements": ["MessageProducer"], "modifiers": ["public"]}}, {"method_name": "exceptionHandler", "params": ["Handler<Throwable>"], "throws": null, "modifiers": ["public"], "return_type": "MessageProducer<JsonObject>", "snippet": "    public MessageProducer<JsonObject> exceptionHandler(Handler<Throwable> handler) {        return delegate.exceptionHandler(handler);    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPIMessageProducer.java", "stars": "9", "class": {"name": "AsyncAPIMessageProducer", "extends": null, "implements": ["MessageProducer"], "modifiers": ["public"]}}, {"method_name": "write", "params": ["JsonObject"], "throws": null, "modifiers": ["public"], "return_type": "MessageProducer<JsonObject>", "snippet": "    public MessageProducer<JsonObject> write(JsonObject data) {        validateMessage(data);        return delegate.write(data);    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPIMessageProducer.java", "stars": "9", "class": {"name": "AsyncAPIMessageProducer", "extends": null, "implements": ["MessageProducer"], "modifiers": ["public"]}}, {"method_name": "write", "params": ["JsonObject", "Handler<AsyncResult>"], "throws": null, "modifiers": ["public"], "return_type": "MessageProducer<JsonObject>", "snippet": "    public MessageProducer<JsonObject> write(JsonObject data, Handler<AsyncResult<Void>> handler) {        try {            validateMessage(data);        } catch (ValidationException e) {            notifyException(handler, e);            return this;        }        return delegate.write(data, handler);    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPIMessageProducer.java", "stars": "9", "class": {"name": "AsyncAPIMessageProducer", "extends": null, "implements": ["MessageProducer"], "modifiers": ["public"]}}, {"method_name": "setWriteQueueMaxSize", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "MessageProducer<JsonObject>", "snippet": "    public MessageProducer<JsonObject> setWriteQueueMaxSize(int maxSize) {        return delegate.setWriteQueueMaxSize(maxSize);    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPIMessageProducer.java", "stars": "9", "class": {"name": "AsyncAPIMessageProducer", "extends": null, "implements": ["MessageProducer"], "modifiers": ["public"]}}, {"method_name": "writeQueueFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean writeQueueFull() {        return delegate.writeQueueFull();    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPIMessageProducer.java", "stars": "9", "class": {"name": "AsyncAPIMessageProducer", "extends": null, "implements": ["MessageProducer"], "modifiers": ["public"]}}, {"method_name": "drainHandler", "params": ["Handler<Void>"], "throws": null, "modifiers": ["public"], "return_type": "MessageProducer<JsonObject>", "snippet": "    public MessageProducer<JsonObject> drainHandler(Handler<Void> handler) {        return delegate.drainHandler(handler);    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPIMessageProducer.java", "stars": "9", "class": {"name": "AsyncAPIMessageProducer", "extends": null, "implements": ["MessageProducer"], "modifiers": ["public"]}}, {"method_name": "deliveryOptions", "params": ["DeliveryOptions"], "throws": null, "modifiers": ["public"], "return_type": "MessageProducer<JsonObject>", "snippet": "    public MessageProducer<JsonObject> deliveryOptions(DeliveryOptions options) {        return delegate.deliveryOptions(options);    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPIMessageProducer.java", "stars": "9", "class": {"name": "AsyncAPIMessageProducer", "extends": null, "implements": ["MessageProducer"], "modifiers": ["public"]}}, {"method_name": "address", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String address() {        return delegate.address();    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPIMessageProducer.java", "stars": "9", "class": {"name": "AsyncAPIMessageProducer", "extends": null, "implements": ["MessageProducer"], "modifiers": ["public"]}}, {"method_name": "end", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void end() {        delegate.end();    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPIMessageProducer.java", "stars": "9", "class": {"name": "AsyncAPIMessageProducer", "extends": null, "implements": ["MessageProducer"], "modifiers": ["public"]}}, {"method_name": "end", "params": ["Handler<AsyncResult>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void end(Handler<AsyncResult<Void>> handler) {        delegate.end(handler);    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPIMessageProducer.java", "stars": "9", "class": {"name": "AsyncAPIMessageProducer", "extends": null, "implements": ["MessageProducer"], "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void close() {        delegate.close();    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPIMessageProducer.java", "stars": "9", "class": {"name": "AsyncAPIMessageProducer", "extends": null, "implements": ["MessageProducer"], "modifiers": ["public"]}}, {"method_name": "close", "params": ["Handler<AsyncResult>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void close(Handler<AsyncResult<Void>> handler) {        delegate.close(handler);    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPIMessageProducer.java", "stars": "9", "class": {"name": "AsyncAPIMessageProducer", "extends": null, "implements": ["MessageProducer"], "modifiers": ["public"]}}, {"method_name": "validateMessage", "params": ["JsonObject"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void validateMessage(JsonObject message) {        if (message != null) {            messageSchema.validate(new JSONObject(message.toString()));        }    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPIMessageProducer.java", "stars": "9", "class": {"name": "AsyncAPIMessageProducer", "extends": null, "implements": ["MessageProducer"], "modifiers": ["public"]}}, {"method_name": "notifyException", "params": ["Handler<AsyncResult>", "ValidationException"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private <R> void notifyException(Handler<AsyncResult<Void>> replyHandler,        ValidationException e) {        replyHandler.handle(new AsyncResult<>() {            @Override            public Void result() {                return null;            }            @Override            public Throwable cause() {                return e;            }            @Override            public boolean succeeded() {                return false;            }            @Override            public boolean failed() {                return true;            }        });    }", "url": "https://raw.githubusercontent.com/hvalls/vertx-asyncapi-contract/master/src/main/java/com/hvalls/vertx/asyncapi/AsyncAPIMessageProducer.java", "stars": "9", "class": {"name": "AsyncAPIMessageProducer", "extends": null, "implements": ["MessageProducer"], "modifiers": ["public"]}}, {"method_name": "newInstance", "params": ["String", "String", "String", "String", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "booking_detail_view", "snippet": "    public static booking_detail_view newInstance(String bid,String p_id,String start_date,String booking_date,String status,String nop) {        booking_detail_view fragment = new booking_detail_view();        Bundle args = new Bundle();        args.putString(ARG_PARAM1, bid);        args.putString(ARG_PARAM2, p_id);        args.putString(ARG_PARAM3, start_date);        args.putString(ARG_PARAM4, booking_date);        args.putString(ARG_PARAM5, status);        args.putString(ARG_PARAM6, nop);        fragment.setArguments(args);        return fragment;    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/booking_detail_view.java", "stars": "2", "class": {"name": "booking_detail_view", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (getArguments() != null) {            bid = Integer.parseInt(getArguments().getString(ARG_PARAM1));            p_id = getArguments().getString(ARG_PARAM2);            start_date = getArguments().getString(ARG_PARAM3);            booking_date = getArguments().getString(ARG_PARAM4);            status = getArguments().getString(ARG_PARAM5);            nop = Integer.parseInt(getArguments().getString(ARG_PARAM6));        }    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/booking_detail_view.java", "stars": "2", "class": {"name": "booking_detail_view", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        if (!((MainActivity)getActivity()).isNetworkAvailable(getContext()))        {            Toast.makeText(getContext(),\"No Internet Connectivity\",Toast.LENGTH_LONG).show();            getActivity().finish();        }        View view = inflater.inflate(R.layout.fragment_booking_detail_view, container, false);        pbar = view.findViewById(R.id.progress);        pbar1 = view.findViewById(R.id.progress_cancel);        tv_view = view.findViewById(R.id.tv_travellers_detail);        main_booking_detail = view.findViewById(R.id.booking_detail_main);        p_id_et = view.findViewById(R.id.p_id);        bid_et = view.findViewById(R.id.b_id);        start_date_et = view.findViewById(R.id.start_date);        status_et = view.findViewById(R.id.status);        nop_et = view.findViewById(R.id.no_of_persons_b);        booking_date_et=view.findViewById(R.id.booking_date);        p_id_et.setText(p_id);        bid_et.setText(String.valueOf(bid));        start_date_et.setText(start_date);        status_et.setText(status);        nop_et.setText(String.valueOf(nop));        booking_date_et.setText(booking_date);        cancel=view.findViewById(R.id.cancel);        cancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                pbar1.setVisibility(View.VISIBLE);                Retrofit retrofit = new Retrofit.Builder().baseUrl(APIUrl.BASE_URL).                        addConverterFactory(GsonConverterFactory.create()).build();                APIService service = retrofit.create(APIService.class);                Call<Result_1> call = service.cancelbooking(\"booking_cancel\",bid,p_id);                call.enqueue(new Callback<Result_1>() {                    @Override                    public void onResponse(Call<Result_1> call, Response<Result_1> response) {                        result_1 = response.body();                        if (\"Booking Deleted\".equals(result_1.res))                        {                            pbar1.setVisibility(View.INVISIBLE);                            Toast.makeText(getContext(),\"Booking cancelled , refund is initiated \\n you will recieve the email shortly \",Toast.LENGTH_LONG).show();                            getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.frame_layout,bookings_view.newInstance(),\"bookings_view\").addToBackStack(null).commit();                        }                        else                        {                            pbar1.setVisibility(View.INVISIBLE);                            Toast.makeText(getContext(),\"Cannot cancel booking , please try later \",Toast.LENGTH_LONG).show();                        }                    }                    @Override                    public void onFailure(Call<Result_1> call, Throwable t) {                        pbar1.setVisibility(View.INVISIBLE);                        Toast.makeText(getContext(),\"Error Encountered !!\",Toast.LENGTH_LONG).show();                        Log.e(\"Error\", t.getMessage());                    }                });            }        });        recyclerView = view.findViewById(R.id.traveller_list);        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));        recyclerViewAdapter = new RecyclerViewAdapter_2(getActivity(), passenger_details);        recyclerView.setAdapter(recyclerViewAdapter);        Retrofit retrofit = new Retrofit.Builder().baseUrl(APIUrl.BASE_URL).                addConverterFactory(GsonConverterFactory.create()).build();        APIService service = retrofit.create(APIService.class);        Call<List<Passenger_details>> call = service.get_passenger_details(\"get_passenger_details\",bid);        call.enqueue(new Callback<List<Passenger_details>>() {            @Override            public void onResponse(Call<List<Passenger_details>> call, Response<List<Passenger_details>> response) {                passenger_details = (ArrayList) response.body();                if (passenger_details.get(0).b_id != 0 && !passenger_details.get(0).p_name.equals(\"NONE\"))                {                pbar.setVisibility(View.INVISIBLE);                main_booking_detail.setVisibility(View.VISIBLE);                recyclerViewAdapter.setmultiplePackages(passenger_details);                recyclerViewAdapter.notifyDataSetChanged();                }                else                {                    pbar.setVisibility(View.INVISIBLE);                    main_booking_detail.setVisibility(View.VISIBLE);                    Toast.makeText(getContext(),\"No Passenger Booked\",Toast.LENGTH_LONG).show();                    tv_view.setText(\"No passengers Booked\");                    recyclerView.setVisibility(View.GONE);                }            }            @Override            public void onFailure(Call<List<Passenger_details>> call, Throwable t) {                pbar.setVisibility(View.INVISIBLE);                Toast.makeText(getContext(),\"Error Encounter !!\",Toast.LENGTH_LONG).show();                getActivity().finish();                Log.e(\"Error\", t.getMessage());            }        });        return view;    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/booking_detail_view.java", "stars": "2", "class": {"name": "booking_detail_view", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onButtonPressed", "params": ["Uri"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onButtonPressed(Uri uri) {    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/booking_detail_view.java", "stars": "2", "class": {"name": "booking_detail_view", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttach", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAttach(Context context) {        super.onAttach(context);    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/booking_detail_view.java", "stars": "2", "class": {"name": "booking_detail_view", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetach", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDetach() {        super.onDetach();    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/booking_detail_view.java", "stars": "2", "class": {"name": "booking_detail_view", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/Platform_ModalContainer.java", "stars": "2", "class": {"name": "Platform_ModalContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/Platform_ModalContainer.java", "stars": "2", "class": {"name": "Platform_ModalContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/Platform_ModalContainer.java", "stars": "2", "class": {"name": "Platform_ModalContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/Platform_ModalContainer.java", "stars": "2", "class": {"name": "Platform_ModalContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(@NonNull LayoutInflater inflater,                             ViewGroup container, Bundle savedInstanceState) {        homeViewModel =                ViewModelProviders.of(this).get(HomeViewModel.class);        View root = inflater.inflate(R.layout.fragment_home, container, false);        final TextView textView = root.findViewById(R.id.text_home);        homeViewModel.getText().observe(getViewLifecycleOwner(), new Observer<String>() {            @Override            public void onChanged(@Nullable String s) {                textView.setText(s);            }        });        return root;    }", "url": "https://raw.githubusercontent.com/dahilu/BeautyOverview/master/app/src/main/java/com/example/beautyoverview/ui/home/HomeFragment.java", "stars": "1", "class": {"name": "HomeFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDao", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "IBaseDao<ExecutorNode>", "snippet": "    protected IBaseDao<ExecutorNode> getDao() {        return execNodeDao;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeServiceImpl", "extends": "AbstractGenericService", "implements": ["ExecNodeService"], "modifiers": ["public"]}}, {"method_name": "updateHeartbeat", "params": ["ExecutorNode"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int updateHeartbeat(ExecutorNode node) {        return execNodeDao.updateHeartbeat(node);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeServiceImpl", "extends": "AbstractGenericService", "implements": ["ExecNodeService"], "modifiers": ["public"]}}, {"method_name": "getByAddress", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ExecutorNode", "snippet": "    public ExecutorNode getByAddress(String address) {        return execNodeDao.getByAddress(address);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeServiceImpl", "extends": "AbstractGenericService", "implements": ["ExecNodeService"], "modifiers": ["public"]}}, {"method_name": "add", "params": ["ExecutorNode"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean add(ExecutorNode executorNode) {        boolean result = super.add(executorNode);        if(result && !executorNode.getTabNames().isEmpty()){            ExecNodeTabRelation relation = new ExecNodeTabRelation();            relation.setNodeId(executorNode.getId());            relation.setTabNames(executorNode.getTabNames());            execNodeInfoService.attachTab(relation);        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/service/impl/ExecNodeServiceImpl.java", "stars": "23", "class": {"name": "ExecNodeServiceImpl", "extends": "AbstractGenericService", "implements": ["ExecNodeService"], "modifiers": ["public"]}}, {"method_name": "getUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "User", "snippet": "    public User getUser() {        return this.user;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/support/UserDetail.java", "stars": "1", "class": {"name": "UserDetail", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUser", "params": ["User"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUser(User user) {        this.user = user;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/support/UserDetail.java", "stars": "1", "class": {"name": "UserDetail", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": ["List<GSYVideoModel>", "boolean", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean setUp(List<GSYVideoModel> url, boolean cacheWithPlay, int position) {        return setUp(url, cacheWithPlay, position, null, new HashMap<String, String>());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/ListGSYVideoPlayer.java", "stars": "2", "class": {"name": "ListGSYVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": ["List<GSYVideoModel>", "boolean", "int", "File"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean setUp(List<GSYVideoModel> url, boolean cacheWithPlay, int position, File cachePath) {        return setUp(url, cacheWithPlay, position, cachePath, new HashMap<String, String>());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/ListGSYVideoPlayer.java", "stars": "2", "class": {"name": "ListGSYVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": ["List<GSYVideoModel>", "boolean", "int", "File", "Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean setUp(List<GSYVideoModel> url, boolean cacheWithPlay, int position, File cachePath, Map<String, String> mapHeadData) {        return setUp(url, cacheWithPlay, position, cachePath, mapHeadData, true);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/ListGSYVideoPlayer.java", "stars": "2", "class": {"name": "ListGSYVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": ["List<GSYVideoModel>", "boolean", "int", "File", "Map<String,String>", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean setUp(List<GSYVideoModel> url, boolean cacheWithPlay, int position, File cachePath, Map<String, String> mapHeadData, boolean changeState) {        mUriList = url;        mPlayPosition = position;        mMapHeadData = mapHeadData;        GSYVideoModel gsyVideoModel = url.get(position);        boolean set = setUp(gsyVideoModel.getUrl(), cacheWithPlay, cachePath, gsyVideoModel.getTitle(), changeState);        if (!TextUtils.isEmpty(gsyVideoModel.getTitle())) {            mTitleTextView.setText(gsyVideoModel.getTitle());        }        return set;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/ListGSYVideoPlayer.java", "stars": "2", "class": {"name": "ListGSYVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "cloneParams", "params": ["GSYBaseVideoPlayer", "GSYBaseVideoPlayer"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void cloneParams(GSYBaseVideoPlayer from, GSYBaseVideoPlayer to) {        super.cloneParams(from, to);        ListGSYVideoPlayer sf = (ListGSYVideoPlayer) from;        ListGSYVideoPlayer st = (ListGSYVideoPlayer) to;        st.mPlayPosition = sf.mPlayPosition;        st.mUriList = sf.mUriList;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/ListGSYVideoPlayer.java", "stars": "2", "class": {"name": "ListGSYVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "startWindowFullscreen", "params": ["Context", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYBaseVideoPlayer", "snippet": "    public GSYBaseVideoPlayer startWindowFullscreen(Context context, boolean actionBar, boolean statusBar) {        GSYBaseVideoPlayer gsyBaseVideoPlayer = super.startWindowFullscreen(context, actionBar, statusBar);        if (gsyBaseVideoPlayer != null) {            ListGSYVideoPlayer listGSYVideoPlayer = (ListGSYVideoPlayer) gsyBaseVideoPlayer;            GSYVideoModel gsyVideoModel = mUriList.get(mPlayPosition);            if (!TextUtils.isEmpty(gsyVideoModel.getTitle())) {                listGSYVideoPlayer.mTitleTextView.setText(gsyVideoModel.getTitle());            }        }        return gsyBaseVideoPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/ListGSYVideoPlayer.java", "stars": "2", "class": {"name": "ListGSYVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveNormalVideoShow", "params": ["View", "ViewGroup", "GSYVideoPlayer"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void resolveNormalVideoShow(View oldF, ViewGroup vp, GSYVideoPlayer gsyVideoPlayer) {        if (gsyVideoPlayer != null) {            ListGSYVideoPlayer listGSYVideoPlayer = (ListGSYVideoPlayer) gsyVideoPlayer;            GSYVideoModel gsyVideoModel = mUriList.get(mPlayPosition);            if (!TextUtils.isEmpty(gsyVideoModel.getTitle())) {                mTitleTextView.setText(gsyVideoModel.getTitle());            }        }        super.resolveNormalVideoShow(oldF, vp, gsyVideoPlayer);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/ListGSYVideoPlayer.java", "stars": "2", "class": {"name": "ListGSYVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCompletion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCompletion() {        releaseNetWorkState();        if (mPlayPosition < (mUriList.size())) {            return;        }        super.onCompletion();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/ListGSYVideoPlayer.java", "stars": "2", "class": {"name": "ListGSYVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAutoCompletion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAutoCompletion() {        if (playNext()) {            return;        }        super.onAutoCompletion();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/ListGSYVideoPlayer.java", "stars": "2", "class": {"name": "ListGSYVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "prepareVideo", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void prepareVideo() {        super.prepareVideo();        if (mHadPlay && mPlayPosition < (mUriList.size())) {            setViewShowState(mLoadingProgressBar, VISIBLE);            if (mLoadingProgressBar instanceof ENDownloadView) {                ((ENDownloadView) mLoadingProgressBar).start();            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/ListGSYVideoPlayer.java", "stars": "2", "class": {"name": "ListGSYVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPrepared", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPrepared() {        super.onPrepared();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/ListGSYVideoPlayer.java", "stars": "2", "class": {"name": "ListGSYVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeUiToNormal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void changeUiToNormal() {        super.changeUiToNormal();        if (mHadPlay && mPlayPosition < (mUriList.size())) {            setViewShowState(mThumbImageViewLayout, GONE);            setViewShowState(mTopContainer, INVISIBLE);            setViewShowState(mBottomContainer, INVISIBLE);            setViewShowState(mStartButton, GONE);            setViewShowState(mLoadingProgressBar, VISIBLE);            setViewShowState(mBottomProgressBar, INVISIBLE);            setViewShowState(mLockScreen, GONE);            if (mLoadingProgressBar instanceof ENDownloadView) {                ((ENDownloadView) mLoadingProgressBar).start();            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/ListGSYVideoPlayer.java", "stars": "2", "class": {"name": "ListGSYVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "playNext", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean playNext() {        if (mPlayPosition < (mUriList.size() - 1)) {            mPlayPosition += 1;            GSYVideoModel gsyVideoModel = mUriList.get(mPlayPosition);            mSaveChangeViewTIme = 0;            setUp(mUriList, mCache, mPlayPosition, null, mMapHeadData, false);            if (!TextUtils.isEmpty(gsyVideoModel.getTitle())) {                mTitleTextView.setText(gsyVideoModel.getTitle());            }            startPlayLogic();            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/ListGSYVideoPlayer.java", "stars": "2", "class": {"name": "ListGSYVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "tags", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String tags() {        return BASE_DIR + \"tags\";    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/controller/ContentTagsController.java", "stars": "1", "class": {"name": "ContentTagsController", "extends": "ContentBaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "showOne", "params": ["String", "Model", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String showOne(@PathVariable String name, Model model, HttpServletResponse response) {        // \u5148\u770b\u6709\u65e0\u8fd9\u4e2a\u6807\u7b7e        Tag tag = tagsService.findTagIfExist(name);        if (tag == null) {            response.setStatus(HttpStatus.NOT_FOUND.value());            return BASE_DIR + \"404\";        }        List<TagArticlesVO> vos = tagsService.findArticlesByTagName(name);        model.addAttribute(\"tag\", tag);        model.addAttribute(\"posts\", vos);        return BASE_DIR + \"tag\";    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/controller/ContentTagsController.java", "stars": "1", "class": {"name": "ContentTagsController", "extends": "ContentBaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["AbstractFile"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void add(AbstractFile file) {        throw new UnsupportedOperationException(\"\u4e0d\u652f\u6301\u8be5\u64cd\u4f5c\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/composite/transparent/VideoFile.java", "stars": "2", "class": {"name": "VideoFile", "extends": "AbstractFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["AbstractFile"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void remove(AbstractFile file) {        throw new UnsupportedOperationException(\"\u4e0d\u652f\u6301\u8be5\u64cd\u4f5c\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/composite/transparent/VideoFile.java", "stars": "2", "class": {"name": "VideoFile", "extends": "AbstractFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "getChild", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "AbstractFile", "snippet": "    public AbstractFile getChild(int i) {        throw new UnsupportedOperationException(\"\u4e0d\u652f\u6301\u8be5\u64cd\u4f5c\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/composite/transparent/VideoFile.java", "stars": "2", "class": {"name": "VideoFile", "extends": "AbstractFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "killVirus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void killVirus() {        System.out.println(\"**\u5bf9\u89c6\u9891\u6587\u4ef6\" + name + \"\u8fdb\u884c\u6740\u6bd2\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/composite/transparent/VideoFile.java", "stars": "2", "class": {"name": "VideoFile", "extends": "AbstractFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "CategoriesAdapter", "snippet": "    public CategoriesAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        context = parent.getContext();        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_category, parent, false);        return new ViewHolder(view);    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/recyclerview/CategoriesAdapter.java", "stars": "4", "class": {"name": "CategoriesAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["CategoriesAdapter", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(CategoriesAdapter.ViewHolder holder, int position) {        holder.categoryName.setText(data.get(position).getName());        GlideUtil.set(data.get(position).getIconUrl(), holder.icon, context);    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/recyclerview/CategoriesAdapter.java", "stars": "4", "class": {"name": "CategoriesAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return data.size();    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/recyclerview/CategoriesAdapter.java", "stars": "4", "class": {"name": "CategoriesAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);//       sx \u548c sy \u662f x \u65b9\u5411\u548c y \u65b9\u5411\u7684\u9519\u5207\u7cfb\u6570        canvas.save();        canvas.skew(0, 0.5f);        canvas.drawBitmap(bitmap, point1.x, point1.y, paint);        canvas.restore();        canvas.save();        canvas.skew(-0.5f, 0);        canvas.drawBitmap(bitmap, point2.x, point2.y, paint);        canvas.restore();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice06SkewView.java", "stars": "2", "class": {"name": "Practice06SkewView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(FlywaydbApplication.class, args);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/flyway/src/main/java/com/yyj/flywaydb/FlywaydbApplication.java", "stars": "2", "class": {"name": "FlywaydbApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loginFtpServer", "params": ["FtpConnParams"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loginFtpServer(FtpConnParams connParams) {        this.ftpClient = new FTPClient();        try {            this.ftpClient.setControlEncoding(\"UTF-8\");            this.ftpClient.setDefaultTimeout(connParams.getTimeout());            this.ftpClient.setConnectTimeout(connParams.getTimeout());            this.ftpClient.setDataTimeout(connParams.getTimeout());            // \u8fde\u63a5\u767b\u5f55            this.ftpClient.connect(connParams.getHost(), connParams.getPort());            this.ftpClient.login(connParams.getUsername(), (String) CryptoUtils.string2Object(connParams.getPassword()));            this.ftpClient.enterRemotePassiveMode();            this.ftpClient.enterLocalPassiveMode();            int reply = this.ftpClient.getReplyCode();            if (!FTPReply.isPositiveCompletion(reply)) {                this.ftpClient.disconnect();                String message = String                        .format(\"\u4e0eftp\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\u5931\u8d25,host:%s, port:%s, username:%s, replyCode:%s\",                                connParams.getHost(), connParams.getPort(), connParams.getUsername(), reply);                LOG.error(message);                throw DataXException.asDataXException(                        FtpWriterErrorCode.FAIL_LOGIN, message);            }        } catch (UnknownHostException e) {            String message = String.format(                    \"\u8bf7\u786e\u8ba4ftp\u670d\u52a1\u5668\u5730\u5740\u662f\u5426\u6b63\u786e\uff0c\u65e0\u6cd5\u8fde\u63a5\u5230\u5730\u5740\u4e3a: [%s] \u7684ftp\u670d\u52a1\u5668, errorMessage:%s\",                    connParams.getHost(), e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(                    FtpWriterErrorCode.FAIL_LOGIN, message, e);        } catch (IllegalArgumentException e) {            String message = String.format(                    \"\u8bf7\u786e\u8ba4\u8fde\u63a5ftp\u670d\u52a1\u5668\u7aef\u53e3\u662f\u5426\u6b63\u786e\uff0c\u9519\u8bef\u7684\u7aef\u53e3: [%s], errorMessage:%s\", connParams.getPort(),                    e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(                    FtpWriterErrorCode.FAIL_LOGIN, message, e);        } catch (Exception e) {            String message = String                    .format(\"\u4e0eftp\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\u5931\u8d25,host:%s, port:%s, username:%s, errorMessage:%s\",                            connParams.getHost(), connParams.getPort(), connParams.getUsername(), e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(                    FtpWriterErrorCode.FAIL_LOGIN, message, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/StandardFtpHelperImpl.java", "stars": "23", "class": {"name": "StandardFtpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "logoutFtpServer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void logoutFtpServer() {        if (this.ftpClient.isConnected()) {            try {                this.ftpClient.logout();            } catch (IOException e) {                String message = String.format(                        \"\u4e0eftp\u670d\u52a1\u5668\u65ad\u5f00\u8fde\u63a5\u5931\u8d25, errorMessage:%s\", e.getMessage());                LOG.error(message);                throw DataXException.asDataXException(                        FtpWriterErrorCode.FAIL_DISCONNECT, message, e);            } finally {                if (this.ftpClient.isConnected()) {                    try {                        this.ftpClient.disconnect();                    } catch (IOException e) {                        String message = String.format(                                \"\u4e0eftp\u670d\u52a1\u5668\u65ad\u5f00\u8fde\u63a5\u5931\u8d25, errorMessage:%s\",                                e.getMessage());                        LOG.error(message);                        throw DataXException.asDataXException(                                FtpWriterErrorCode.FAIL_DISCONNECT, message, e);                    }                }                this.ftpClient = null;            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/StandardFtpHelperImpl.java", "stars": "23", "class": {"name": "StandardFtpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "mkdir", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mkdir(String directoryPath) {        String message = String.format(\"\u521b\u5efa\u76ee\u5f55:%s\u65f6\u53d1\u751f\u5f02\u5e38,\u8bf7\u786e\u8ba4\u4e0eftp\u670d\u52a1\u5668\u7684\u8fde\u63a5\u6b63\u5e38,\u62e5\u6709\u76ee\u5f55\u521b\u5efa\u6743\u9650\",                directoryPath);        try {            this.printWorkingDirectory();            boolean isDirExist = this.ftpClient                    .changeWorkingDirectory(directoryPath);            if (!isDirExist) {                int replayCode = this.ftpClient.mkd(directoryPath);                message = String                        .format(\"%s,replayCode:%s\", message, replayCode);                if (replayCode != FTPReply.COMMAND_OK                        && replayCode != FTPReply.PATHNAME_CREATED) {                    throw DataXException.asDataXException(                            FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION,                            message);                }            }        } catch (IOException e) {            message = String.format(\"%s, errorMessage:%s\", message,                    e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(                    FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/StandardFtpHelperImpl.java", "stars": "23", "class": {"name": "StandardFtpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "mkDirRecursive", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mkDirRecursive(String directoryPath) {        StringBuilder dirPath = new StringBuilder();        dirPath.append(IOUtils.DIR_SEPARATOR_UNIX);        String[] dirSplit = StringUtils.split(directoryPath, IOUtils.DIR_SEPARATOR_UNIX);        String message = String.format(\"\u521b\u5efa\u76ee\u5f55:%s\u65f6\u53d1\u751f\u5f02\u5e38,\u8bf7\u786e\u8ba4\u4e0eftp\u670d\u52a1\u5668\u7684\u8fde\u63a5\u6b63\u5e38,\u62e5\u6709\u76ee\u5f55\u521b\u5efa\u6743\u9650\", directoryPath);        try {            // ftp server\u4e0d\u652f\u6301\u9012\u5f52\u521b\u5efa\u76ee\u5f55,\u53ea\u80fd\u4e00\u7ea7\u4e00\u7ea7\u521b\u5efa            for (String dirName : dirSplit) {                if(StringUtils.isNotBlank(dirName)) {                    dirPath.append(dirName);                    boolean mkdirSuccess = mkDirSingleHierarchy(dirPath.toString());                    dirPath.append(IOUtils.DIR_SEPARATOR_UNIX);                    if (!mkdirSuccess) {                        throw DataXException.asDataXException(                                FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION,                                message);                    }                }            }        } catch (IOException e) {            message = String.format(\"%s, errorMessage:%s\", message,                    e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(                    FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/StandardFtpHelperImpl.java", "stars": "23", "class": {"name": "StandardFtpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "mkDirSingleHierarchy", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean mkDirSingleHierarchy(String directoryPath) throws IOException {        boolean isDirExist = this.ftpClient                .changeWorkingDirectory(directoryPath);        // \u5982\u679cdirectoryPath\u76ee\u5f55\u4e0d\u5b58\u5728,\u5219\u521b\u5efa        if (!isDirExist) {            int replayCode = this.ftpClient.mkd(directoryPath);            if (replayCode != FTPReply.COMMAND_OK                    && replayCode != FTPReply.PATHNAME_CREATED) {                return false;            }        }        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/StandardFtpHelperImpl.java", "stars": "23", "class": {"name": "StandardFtpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "getOutputStream", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "OutputStream", "snippet": "    public OutputStream getOutputStream(String filePath) {        try {            this.printWorkingDirectory();            String parentDir = filePath.substring(0,                    StringUtils.lastIndexOf(filePath, IOUtils.DIR_SEPARATOR));            this.ftpClient.changeWorkingDirectory(parentDir);            this.printWorkingDirectory();            //            OutputStream writeOutputStream = this.ftpClient                    .appendFileStream(filePath);            String message = String.format(                    \"\u6253\u5f00FTP\u6587\u4ef6[%s]\u83b7\u53d6\u5199\u51fa\u6d41\u65f6\u51fa\u9519,\u8bf7\u786e\u8ba4\u6587\u4ef6%s\u6709\u6743\u9650\u521b\u5efa\uff0c\u6709\u6743\u9650\u5199\u51fa\u7b49\", filePath,                    filePath);            if (null == writeOutputStream) {                throw DataXException.asDataXException(                        FtpWriterErrorCode.OPEN_FILE_ERROR, message);            }            return writeOutputStream;        } catch (IOException e) {            String message = String.format(                    \"\u5199\u51fa\u6587\u4ef6 : [%s] \u65f6\u51fa\u9519,\u8bf7\u786e\u8ba4\u6587\u4ef6:[%s]\u5b58\u5728\u4e14\u914d\u7f6e\u7684\u7528\u6237\u6709\u6743\u9650\u5199, errorMessage:%s\",                    filePath, filePath, e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(                    FtpWriterErrorCode.OPEN_FILE_ERROR, message);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/StandardFtpHelperImpl.java", "stars": "23", "class": {"name": "StandardFtpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "getRemoteFileContent", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRemoteFileContent(String filePath) {        try {            this.completePendingCommand();            this.printWorkingDirectory();            String parentDir = filePath.substring(0,                    StringUtils.lastIndexOf(filePath, IOUtils.DIR_SEPARATOR));            this.ftpClient.changeWorkingDirectory(parentDir);            this.printWorkingDirectory();            ByteArrayOutputStream outputStream = new ByteArrayOutputStream(22);            this.ftpClient.retrieveFile(filePath, outputStream);            String result = outputStream.toString();            IOUtils.closeQuietly(outputStream);            return result;        } catch (IOException e) {            String message = String.format(                    \"\u8bfb\u53d6\u6587\u4ef6 : [%s] \u65f6\u51fa\u9519,\u8bf7\u786e\u8ba4\u6587\u4ef6:[%s]\u5b58\u5728\u4e14\u914d\u7f6e\u7684\u7528\u6237\u6709\u6743\u9650\u8bfb\u53d6, errorMessage:%s\",                    filePath, filePath, e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(                    FtpWriterErrorCode.OPEN_FILE_ERROR, message);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/StandardFtpHelperImpl.java", "stars": "23", "class": {"name": "StandardFtpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "getAllFilesInDir", "params": ["String", "String", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "    public Set<String> getAllFilesInDir(String dir, String prefixFileName, boolean recurse, boolean fullFileName) {        Set<String> allFilesWithPointedPrefix = new HashSet<String>();        try {            boolean isDirExist = this.ftpClient.changeWorkingDirectory(dir);            if (!isDirExist) {                throw DataXException.asDataXException(                        FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION,                        String.format(\"\u8fdb\u5165\u76ee\u5f55[%s]\u5931\u8d25\", dir));            }            this.printWorkingDirectory();            FTPFile[] fs = this.ftpClient.listFiles(dir);            LOG.debug(String.format(\"ls: %s\",                    JSON.toJSONString(fs, SerializerFeature.UseSingleQuotes)));            StringBuilder dirBuilder = new StringBuilder(dir);            if(!dirBuilder.toString().endsWith(String.valueOf(IOUtils.DIR_SEPARATOR))){                dirBuilder.append(IOUtils.DIR_SEPARATOR);            }            for (FTPFile ff : fs) {                String strName = ff.getName();                if (\".\".equals(strName) || \"..\".equals(strName)) {                    continue;                }                if(hasPrefixFileName(strName, prefixFileName)){                    if(fullFileName){                        allFilesWithPointedPrefix.add(dirBuilder.toString() + strName);                    }else {                        allFilesWithPointedPrefix.add(strName);                    }                    if(ff.isDirectory()){                        if (recurse) {                            Set<String> childWithPrefixFiles = getAllFilesInDir(dirBuilder.toString() + strName, prefixFileName, true, fullFileName);                            for (String childWithPrefixFile : childWithPrefixFiles) {                                if(fullFileName){                                    allFilesWithPointedPrefix.add(dirBuilder.toString() + strName + IOUtils.DIR_SEPARATOR + childWithPrefixFile);                                }else {                                    allFilesWithPointedPrefix.add(strName + IOUtils.DIR_SEPARATOR + childWithPrefixFile);                                }                            }                        }                    }                }            }        } catch (IOException e) {            String message = String                    .format(\"\u83b7\u53d6path:[%s] \u4e0b\u6587\u4ef6\u5217\u8868\u65f6\u53d1\u751fI/O\u5f02\u5e38,\u8bf7\u786e\u8ba4\u4e0eftp\u670d\u52a1\u5668\u7684\u8fde\u63a5\u6b63\u5e38,\u62e5\u6709\u76ee\u5f55ls\u6743\u9650, errorMessage:%s\",                            dir, e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(                    FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);        }        return allFilesWithPointedPrefix;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/StandardFtpHelperImpl.java", "stars": "23", "class": {"name": "StandardFtpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "deleteFiles", "params": ["Set<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteFiles(Set<String> filesToDelete) {        String eachFile = null;        boolean deleteOk = false;        try {            this.printWorkingDirectory();            for (String each : filesToDelete) {                LOG.info(String.format(\"delete file [%s].\", each));                eachFile = each;                deleteOk = this.ftpClient.deleteFile(each);                if (!deleteOk) {                    String message = String.format(                            \"\u5220\u9664\u6587\u4ef6:[%s] \u65f6\u5931\u8d25,\u8bf7\u786e\u8ba4\u6307\u5b9a\u6587\u4ef6\u6709\u5220\u9664\u6743\u9650\", eachFile);                    throw DataXException.asDataXException(                            FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION,                            message);                }            }        } catch (IOException e) {            String message = String.format(                    \"\u5220\u9664\u6587\u4ef6:[%s] \u65f6\u53d1\u751f\u5f02\u5e38,\u8bf7\u786e\u8ba4\u6307\u5b9a\u6587\u4ef6\u6709\u5220\u9664\u6743\u9650,\u4ee5\u53ca\u7f51\u7edc\u4ea4\u4e92\u6b63\u5e38, errorMessage:%s\",                    eachFile, e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(                    FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/StandardFtpHelperImpl.java", "stars": "23", "class": {"name": "StandardFtpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "printWorkingDirectory", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void printWorkingDirectory() {        try {            LOG.info(String.format(\"current working directory:%s\",                    this.ftpClient.printWorkingDirectory()));        } catch (Exception e) {            LOG.warn(String.format(\"printWorkingDirectory error:%s\",                    e.getMessage()));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/StandardFtpHelperImpl.java", "stars": "23", "class": {"name": "StandardFtpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "completePendingCommand", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void completePendingCommand() {        /*         * Q:After I perform a file transfer to the server,         * printWorkingDirectory() returns null. A:You need to call         * completePendingCommand() after transferring the file. wiki:         * http://wiki.apache.org/commons/Net/FrequentlyAskedQuestions         */        try {            boolean isOk = this.ftpClient.completePendingCommand();            if (!isOk) {                throw DataXException.asDataXException(                        FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION,                        \"\u5b8c\u6210ftp completePendingCommand\u64cd\u4f5c\u53d1\u751f\u5f02\u5e38\");            }        } catch (IOException e) {            String message = String.format(                    \"\u5b8c\u6210ftp completePendingCommand\u64cd\u4f5c\u53d1\u751f\u5f02\u5e38, errorMessage:%s\",                    e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(                    FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/StandardFtpHelperImpl.java", "stars": "23", "class": {"name": "StandardFtpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "rename", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void rename(String srcPath, String destPath) {        try {            this.ftpClient.rename(srcPath, destPath);        } catch (IOException e) {            String message = String.format(\"rename srcPath:%s to destPath:%s error, message:%s ,please check your internet connection\",                    srcPath, destPath, e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(FtpWriterErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/StandardFtpHelperImpl.java", "stars": "23", "class": {"name": "StandardFtpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "moveToDirectory", "params": ["List<String>", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void moveToDirectory(List<String> srcPaths, String destDirPath) {        //not support    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/StandardFtpHelperImpl.java", "stars": "23", "class": {"name": "StandardFtpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "isFileExist", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFileExist(String filePath) {        //not support        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/StandardFtpHelperImpl.java", "stars": "23", "class": {"name": "StandardFtpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "hasPrefixFileName", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean hasPrefixFileName(String originalName, String prefixFileName){        if(StringUtils.isBlank(prefixFileName)){            return true;        }        return originalName != null && originalName.startsWith(prefixFileName);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/util/StandardFtpHelperImpl.java", "stars": "23", "class": {"name": "StandardFtpHelperImpl", "extends": null, "implements": ["IFtpHelper"], "modifiers": ["public"]}}, {"method_name": "getOptionSyntax", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOptionSyntax() {        return \"[<command>]\";    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/command/HelpCommand.java", "stars": "2", "class": {"name": "HelpCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "displayOptionUsage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayOptionUsage() {        println(\"  <command>   The name of the command to get help for\");        Command.displayAvailableCommands();    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/command/HelpCommand.java", "stars": "2", "class": {"name": "HelpCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return \"help\";    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/command/HelpCommand.java", "stars": "2", "class": {"name": "HelpCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return \"Display help about a command\";    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/command/HelpCommand.java", "stars": "2", "class": {"name": "HelpCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["Deque<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute(Deque<String> options) {        if (options.isEmpty()) {            displayUsage();        } else {            ensureMaxArgumentCount(options, 1);            String commandName = options.remove();            Command c = Command.valueOf(commandName);            if (c == null) {                userFailed(\"Unknown command \" + commandName);                return;            }            c.displayUsage();        }    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/command/HelpCommand.java", "stars": "2", "class": {"name": "HelpCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTokenList", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTokenList(List<String> tokenList) {        SyntaxAnalysis.tokenList = tokenList;//        System.out.println(tokenList);    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "analysis", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void analysis() {        nextToken();        while (pointer < tokenList.size()) {            treeResult = TreeNode.preOrder(Goal(), treeResult, \"|-\").append(\"\\r\\n\");        }    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "output", "params": ["String"], "throws": ["FileNotFoundException", "UnsupportedEncodingException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void output(String outputFilename) throws FileNotFoundException, UnsupportedEncodingException {        PrintWriter writer = new PrintWriter(outputFilename, \"UTF-8\");        writer.write(treeResult.toString());        writer.close();    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "errorOutput", "params": ["String"], "throws": ["UnsupportedEncodingException", "IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void errorOutput(String errorFilename) throws UnsupportedEncodingException, IOException {        PrintWriter writer = new PrintWriter(errorFilename, \"UTF-8\");        for (String temp : errorList)            writer.write(temp + \"\\n\");        writer.close();    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nextToken", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void nextToken() {        if (pointer < tokenList.size()) {            String temp = tokenList.get(pointer);            String[] info = temp.split(\",\");            if(info.length==2){                currentToken = TokenType.valueOf(info[1]);                currentValue = info[0];            }else {                currentToken = TokenType.valueOf(\"COMMA\");                currentValue = \",\";            }            pointer++;        }    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNextWord", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void getNextWord() {        if (pointer < tokenList.size()) {            String temp = tokenList.get(pointer);            String[] info = temp.split(\",\");            if(info.length==2){                nextToken = TokenType.valueOf(info[1]);                nextValue = info[0];            }else {                nextToken = TokenType.valueOf(\"COMMA\");                nextValue = \",\";            }        }    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "match", "params": ["TokenType"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean match(TokenType need) {        if (currentToken == need) {            nextToken();            return true;        } else {            String errorInfo = \"The \" + pointer + \" Token : <\" +                    currentToken + \" , \" + currentValue                    + \"> is wrong , The expected token type is \\\"\" +                    need + \"\\\".\";//            System.out.println(pointer+\"  \"+currentToken+\"  \"+currentValue);            System.err.println(errorInfo);            errorList.add(errorInfo);            nextToken();            return false;        }    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "Goal", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode Goal() {        TreeNode goal = new TreeNode();        goal.setStatement(Statement.GOAL);        goal.children.add(MainClass());        while (currentToken == TokenType.CLASS) {            goal.children.add(ClassDeclaration());        }        goal.setTokenType(TokenType.EOF);        goal.setValue(\"EOF\");        match(TokenType.EOF);        return goal;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "MainClass", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode MainClass() {        TreeNode mainClass = new TreeNode();        mainClass.setStatement(Statement.MAINCLASS);        match(TokenType.CLASS);        mainClass.setTokenType(TokenType.IDENTIFIER);        mainClass.setValue(currentValue);        match(TokenType.IDENTIFIER);        match(TokenType.LBRACE);        match(TokenType.PUBLIC);        match(TokenType.STATIC);        match(TokenType.VOID);        match(TokenType.MAIN);        match(TokenType.LPAREN);        match(TokenType.STRING);        match(TokenType.LBRACKET);        match(TokenType.RBRACKET);        mainClass.setValue(mainClass.getValue() + \"%\" + currentValue);        match(TokenType.IDENTIFIER);        match(TokenType.RPAREN);        match(TokenType.LBRACE);//        getNextWord();//        while (currentToken == TokenType.INT || currentToken == TokenType.BOOLEAN || (currentToken == TokenType.IDENTIFIER && nextToken == TokenType.IDENTIFIER)) {//            mainClass.children.add(VarDeclaration());//            getNextWord();//        }        mainClass.children.add(Statement());        match(TokenType.RBRACE);        match(TokenType.RBRACE);        return mainClass;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ClassDeclaration", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode ClassDeclaration() {        TreeNode classDeclaration = new TreeNode();        classDeclaration.setStatement(Statement.CLASSDECLARATION);        match(TokenType.CLASS);        classDeclaration.setTokenType(TokenType.IDENTIFIER);        classDeclaration.setValue(currentValue);        match(TokenType.IDENTIFIER);        if (currentToken == TokenType.EXTENDS) {            match(TokenType.EXTENDS);            classDeclaration.setValue(classDeclaration.getValue() + \"%\" + currentValue);            match(TokenType.IDENTIFIER);        }        match(TokenType.LBRACE);        while (currentToken == TokenType.INT || currentToken == TokenType.BOOLEAN || currentToken == TokenType.IDENTIFIER) {            classDeclaration.children.add(VarDeclaration());        }        while (currentToken == TokenType.PUBLIC) {            classDeclaration.children.add(MethodDeclaration());        }        match(TokenType.RBRACE);        return classDeclaration;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "VarDeclaration", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode VarDeclaration() {        TreeNode varDeclaration = new TreeNode();        varDeclaration.setStatement(Statement.VARDECLARATION);        varDeclaration.children.add(Type());        varDeclaration.setTokenType(TokenType.IDENTIFIER);        varDeclaration.setValue(currentValue);        match(TokenType.IDENTIFIER);        match(TokenType.SEMICOLON);        return varDeclaration;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "MethodDeclaration", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode MethodDeclaration() {        TreeNode methodDeclaration = new TreeNode();        methodDeclaration.setStatement(Statement.METHODDECLARATION);        match(TokenType.PUBLIC);        methodDeclaration.children.add(Type());        methodDeclaration.setTokenType(TokenType.IDENTIFIER);        methodDeclaration.setValue(currentValue);        match(TokenType.IDENTIFIER);        match(TokenType.LPAREN);        if (currentToken == TokenType.INT || currentToken == TokenType.BOOLEAN || currentToken == TokenType.IDENTIFIER) {            methodDeclaration.children.add(Type());            methodDeclaration.setValue(methodDeclaration.getValue() + \"%\" + currentValue);            match(TokenType.IDENTIFIER);            while (currentToken == TokenType.COMMA) {                match(TokenType.COMMA);                methodDeclaration.children.add(Type());                methodDeclaration.setValue(methodDeclaration.getValue() + \"%\" + currentValue);                match(TokenType.IDENTIFIER);            }        }        match(TokenType.RPAREN);        match(TokenType.LBRACE);        getNextWord();        while (currentToken == TokenType.INT || currentToken == TokenType.BOOLEAN || (currentToken == TokenType.IDENTIFIER && nextToken == TokenType.IDENTIFIER)) {            methodDeclaration.children.add(VarDeclaration());            getNextWord();        }        getNextWord();        while (currentToken == TokenType.LBRACE                || currentToken == TokenType.IF                || currentToken == TokenType.WHILE                || currentToken == TokenType.SYSTEMOUTPRINTLN                || (currentToken == TokenType.IDENTIFIER && nextToken == TokenType.EQUAL)                || (currentToken == TokenType.IDENTIFIER && nextToken == TokenType.LBRACKET)) {            methodDeclaration.children.add(Statement());            getNextWord();        }        match(TokenType.RETURN);        methodDeclaration.children.add(Expression());        match(TokenType.SEMICOLON);        match(TokenType.RBRACE);        return methodDeclaration;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "Type", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode Type() {        TreeNode type = new TreeNode();        type.setStatement(Statement.TYPE);        getNextWord();        TokenType thisNextToken=nextToken;        switch (currentToken) {            case INT:                if (thisNextToken == TokenType.LBRACKET) {                    match(TokenType.INT);                    match(TokenType.LBRACKET);                    match(TokenType.RBRACKET);                } else {                    match(TokenType.INT);                }                break;            case BOOLEAN:                match(TokenType.BOOLEAN);                break;            case IDENTIFIER:                type.setTokenType(TokenType.IDENTIFIER);                type.setValue(currentValue);                match(TokenType.IDENTIFIER);                break;            default:                String errorInfo = \"The \" + pointer + \" Token : <\" +                        currentToken + \" , \" + currentValue                        + \"> is wrong , The expected token type is \\\"\" +                        \"TYPE\" + \"\\\".\";                System.err.println(errorInfo);                errorList.add(errorInfo);                nextToken();        }        return type;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "Statements", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode Statements() {        TreeNode statements = new TreeNode();        statements.setStatement(Statement.STATEMENTS);        match(TokenType.LBRACE);        getNextWord();        while (currentToken == TokenType.LBRACE                || currentToken == TokenType.IF                || currentToken == TokenType.WHILE                || currentToken == TokenType.SYSTEMOUTPRINTLN                || (currentToken == TokenType.IDENTIFIER && nextToken == TokenType.EQUAL)                || (currentToken == TokenType.IDENTIFIER && nextToken == TokenType.LBRACKET)) {            statements.children.add(Statement());            getNextWord();        }        match(TokenType.RBRACE);        return statements;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "IfStatement", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode IfStatement() {        TreeNode ifStatement = new TreeNode();        ifStatement.setStatement(Statement.IFSTATEMENT);        match(TokenType.IF);        match(TokenType.LPAREN);        ifStatement.children.add(Expression());        match(TokenType.RPAREN);        ifStatement.children.add(Statement());        match(TokenType.ELSE);        ifStatement.children.add(Statement());        return ifStatement;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "WhileStatement", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode WhileStatement() {        TreeNode whileStatement = new TreeNode();        whileStatement.setStatement(Statement.WHILESTATEMENT);        match(TokenType.WHILE);        match(TokenType.LPAREN);        whileStatement.children.add(Expression());        match(TokenType.RPAREN);        whileStatement.children.add(Statement());        return whileStatement;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "PrintStatement", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode PrintStatement() {        TreeNode printStatement = new TreeNode();        printStatement.setStatement(Statement.PRINTSTATEMENT);        match(TokenType.SYSTEMOUTPRINTLN);        match(TokenType.LPAREN);        printStatement.children.add(Expression());        match(TokenType.RPAREN);        match(TokenType.SEMICOLON);        return printStatement;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "AssignStatement", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode AssignStatement() {        TreeNode assignStatement = new TreeNode();        assignStatement.setStatement(Statement.ASSIGNSTATEMENT);        assignStatement.setTokenType(TokenType.IDENTIFIER);        assignStatement.setValue(currentValue);        match(TokenType.IDENTIFIER);        match(TokenType.EQUAL);        assignStatement.children.add(Expression());        match(TokenType.SEMICOLON);        return assignStatement;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ArrayStatement", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode ArrayStatement() {        TreeNode arrayStatement = new TreeNode();        arrayStatement.setStatement(Statement.ARRAYSTATEMENT);        arrayStatement.setTokenType(TokenType.IDENTIFIER);        arrayStatement.setValue(currentValue);        match(TokenType.IDENTIFIER);        match(TokenType.LBRACKET);        arrayStatement.children.add(Expression());        match(TokenType.RBRACKET);        match(TokenType.EQUAL);        arrayStatement.children.add(Expression());        match(TokenType.SEMICOLON);        return arrayStatement;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "Statement", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode Statement() {        TreeNode statement = new TreeNode();        statement.setStatement(Statement.STATEMENT);        getNextWord();        TokenType thisNextToken=nextToken;        switch (currentToken) {            case LBRACE:                statement.children.add(Statements());                break;            case IF:                statement.children.add(IfStatement());                break;            case WHILE:                statement.children.add(WhileStatement());                break;            case SYSTEMOUTPRINTLN:                statement.children.add(PrintStatement());                break;            case IDENTIFIER:                if (thisNextToken == TokenType.EQUAL) {                    statement.children.add(AssignStatement());                }                if (thisNextToken == TokenType.LBRACKET) {                    statement.children.add(ArrayStatement());                }                break;        }//        if (currentToken == TokenType.LBRACE) {//            statement.children.add(Statements());//        }//        if (currentToken == TokenType.IF) {//            statement.children.add(IfStatement());//        }//        if (currentToken == TokenType.WHILE) {//            statement.children.add(WhileStatement());//        }//        if (currentToken == TokenType.SYSTEMOUTPRINTLN) {//            statement.children.add(PrintStatement());//        }//        if (currentToken == TokenType.IDENTIFIER && nextToken == TokenType.EQUAL) {//            statement.children.add(AssignStatement());//        }//        if (currentToken == TokenType.IDENTIFIER && nextToken == TokenType.LBRACKET) {//            statement.children.add(ArrayStatement());//        }        return statement;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "IntExpression", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode IntExpression() {        TreeNode intExpression = new TreeNode();        intExpression.setStatement(Statement.INTEXPRESSION);        intExpression.setTokenType(TokenType.INTEGERLITERAL);        intExpression.setValue(currentValue);        match(TokenType.INTEGERLITERAL);        intExpression.children.add(L());        return intExpression;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "TrueExpression", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode TrueExpression() {        TreeNode trueExpression = new TreeNode();        trueExpression.setStatement(Statement.TRUEEXPRESSION);        match(TokenType.TRUE);        trueExpression.children.add(L());        return trueExpression;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "FalseExpression", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode FalseExpression() {        TreeNode falseExpression = new TreeNode();        falseExpression.setStatement(Statement.FALSEEXPRESSION);        match(TokenType.FALSE);        falseExpression.children.add(L());        return falseExpression;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "IdentifierExpression", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode IdentifierExpression() {        TreeNode identifierExpression = new TreeNode();        identifierExpression.setStatement(Statement.IDENTIFIEREXPRESSION);        identifierExpression.setTokenType(TokenType.IDENTIFIER);        identifierExpression.setValue(currentValue);        match(TokenType.IDENTIFIER);        identifierExpression.children.add(L());        return identifierExpression;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ThisExpression", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode ThisExpression() {        TreeNode thisExpression = new TreeNode();        thisExpression.setStatement(Statement.THISEXPRESSION);        match(TokenType.THIS);        thisExpression.children.add(L());        return thisExpression;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "NewArrayExpression", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode NewArrayExpression() {        TreeNode newArrayExpression = new TreeNode();        newArrayExpression.setStatement(Statement.NEWARRAYEXPRESSION);        match(TokenType.NEW);        match(TokenType.INT);        match(TokenType.LBRACKET);        newArrayExpression.children.add(Expression());        match(TokenType.RBRACKET);        newArrayExpression.children.add(L());        return newArrayExpression;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "NewExpression", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode NewExpression() {        TreeNode newExpression = new TreeNode();        newExpression.setStatement(Statement.NEWEXPRESSION);        match(TokenType.NEW);        newExpression.setTokenType(TokenType.IDENTIFIER);        newExpression.setValue(currentValue);        match(TokenType.IDENTIFIER);        match(TokenType.LPAREN);        match(TokenType.RPAREN);        newExpression.children.add(L());        return newExpression;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "NoExpression", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode NoExpression() {        TreeNode noExpression = new TreeNode();        noExpression.setStatement(Statement.NOEXPRESSION);        match(TokenType.EXCLAMATION);        noExpression.children.add(Expression());        noExpression.children.add(L());        return noExpression;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "BraceExpression", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode BraceExpression() {        TreeNode braceExpression = new TreeNode();        braceExpression.setStatement(Statement.BRACEEXPREESION);        match(TokenType.LPAREN);        braceExpression.children.add(Expression());        match(TokenType.RPAREN);        braceExpression.children.add(L());        return braceExpression;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "Expression", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode Expression() {        TreeNode expression = new TreeNode();        expression.setStatement(Statement.EXPRESSION);        getNextWord();        TokenType thisNextToken=nextToken;        switch (currentToken) {            case INTEGERLITERAL:                expression.children.add(IntExpression());                break;            case TRUE:                expression.children.add(TrueExpression());                break;            case FALSE:                expression.children.add(FalseExpression());                break;            case IDENTIFIER:                expression.children.add(IdentifierExpression());                break;            case THIS:                expression.children.add(ThisExpression());                break;            case NEW:                if (thisNextToken == TokenType.INT) {                    expression.children.add(NewArrayExpression());                }                if (thisNextToken == TokenType.IDENTIFIER) {                    expression.children.add(NewExpression());                }                break;            case EXCLAMATION:                expression.children.add(NoExpression());                break;            case LPAREN:                expression.children.add(BraceExpression());                break;            default:                String errorInfo = \"The \" + pointer + \" Token : <\" +                        currentToken + \" , \" + currentValue                        + \"> is wrong , The expected token type is \\\"\" +                        \"Expression\" + \"\\\".\";                System.err.println(errorInfo);                errorList.add(errorInfo);                nextToken();        }//        if (currentToken == TokenType.INTEGERLITERAL) {//            expression.children.add(IntExpression());//        }//        if (currentToken == TokenType.TRUE) {//            expression.children.add(TrueExpression());//        }//        if (currentToken == TokenType.FALSE) {//            expression.children.add(FalseExpression());//        }//        if (currentToken == TokenType.IDENTIFIER) {//            expression.children.add(IdentifierExpression());//        }//        if (currentToken == TokenType.THIS) {//            expression.children.add(ThisExpression());//        }//        if (currentToken == TokenType.NEW && nextToken == TokenType.INT) {//            expression.children.add(NewArrayExpression());//        }//        if (currentToken == TokenType.NEW && nextToken == TokenType.IDENTIFIER) {//            expression.children.add(NewExpression());//        }//        if (currentToken == TokenType.EXCLAMATION) {//            expression.children.add(NoExpression());//        }//        if (currentToken == TokenType.LPAREN) {//            expression.children.add(BraceExpression());//        }        return expression;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "OPL", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode OPL() {        TreeNode opL = new TreeNode();        opL.setStatement(Statement.OPL);        switch (currentToken) {            case DOUBLEAND:                match(TokenType.DOUBLEAND);                break;            case LESSTHEN:                match(TokenType.LESSTHEN);                break;            case PLUS:                match(TokenType.PLUS);                break;            case HYPHEN:                match(TokenType.HYPHEN);                break;            case MULTIPLY:                match(TokenType.MULTIPLY);                break;            default:                String errorInfo = \"The \" + pointer + \" Token : <\" +                        currentToken + \" , \" + currentValue                        + \"> is wrong , The expected token type is \\\"\" +                        \"OPL\" + \"\\\".\";                System.err.println(errorInfo);                errorList.add(errorInfo);                nextToken();        }        opL.children.add(Expression());        opL.children.add(L());        return opL;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ExpressionL", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode ExpressionL() {        TreeNode expressionL = new TreeNode();        expressionL.setStatement(Statement.EXPRESSIONL);        match(TokenType.LBRACKET);        expressionL.children.add(Expression());        match(TokenType.RBRACKET);        expressionL.children.add(L());        return expressionL;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "LengthL", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode LengthL() {        TreeNode lengthL = new TreeNode();        lengthL.setStatement(Statement.LENGTHL);        match(TokenType.FULLSTOP);        match(TokenType.LENGTH);        lengthL.children.add(L());        return lengthL;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "MethodL", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode MethodL() {        TreeNode methodL = new TreeNode();        methodL.setStatement(Statement.METHODL);        match(TokenType.FULLSTOP);        methodL.setTokenType(TokenType.IDENTIFIER);        methodL.setValue(currentValue);        match(TokenType.IDENTIFIER);        match(TokenType.LPAREN);        getNextWord();        if (currentToken == TokenType.INTEGERLITERAL                || currentToken == TokenType.TRUE                || currentToken == TokenType.FALSE                || currentToken == TokenType.IDENTIFIER                || currentToken == TokenType.THIS                || currentToken == TokenType.NEW && nextToken == TokenType.INT                || currentToken == TokenType.NEW && nextToken == TokenType.IDENTIFIER                || currentToken == TokenType.EXCLAMATION                || currentToken == TokenType.LPAREN) {            methodL.children.add(Expression());            while (currentToken == TokenType.COMMA) {                match(TokenType.COMMA);                methodL.children.add(Expression());            }        }        match(TokenType.RPAREN);        methodL.children.add(L());        return methodL;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "NullL", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode NullL() {        TreeNode nullL = new TreeNode();        nullL.setStatement(Statement.NULLL);        return nullL;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "L", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "TreeNode", "snippet": "    private static TreeNode L() {        TreeNode L = new TreeNode();        L.setStatement(Statement.L);        getNextWord();        TokenType thisNextToken=nextToken;        switch (currentToken){            case DOUBLEAND:                L.children.add(OPL());                break;            case LESSTHEN:                L.children.add(OPL());                break;            case PLUS:                L.children.add(OPL());                break;            case HYPHEN:                L.children.add(OPL());                break;            case MULTIPLY:                L.children.add(OPL());                break;            case LBRACKET:                L.children.add(ExpressionL());            case FULLSTOP:                if( thisNextToken == TokenType.LENGTH){                    L.children.add(LengthL());                }                if(thisNextToken == TokenType.IDENTIFIER){                    L.children.add(MethodL());                }                break;            default:                L.children.add(NullL());                break;        }//        if (currentToken == TokenType.DOUBLEAND//                || currentToken == TokenType.LESSTHEN//                || currentToken == TokenType.PLUS//                || currentToken == TokenType.HYPHEN//                || currentToken == TokenType.MULTIPLY) {//            L.children.add(OPL());//        } else if (currentToken == TokenType.LBRACKET) {//            L.children.add(ExpressionL());//        } else if (currentToken == TokenType.FULLSTOP && nextToken == TokenType.LENGTH) {//            L.children.add(LengthL());//        } else if (currentToken == TokenType.FULLSTOP && nextToken == TokenType.IDENTIFIER) {//            L.children.add(MethodL());//        } else {//            L.children.add(NullL());//        }        return L;    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/SyntaxAnalysis.java", "stars": "2", "class": {"name": "SyntaxAnalysis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Float", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Float parameter, JdbcType jdbcType)      throws SQLException {    ps.setFloat(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/FloatTypeHandler.java", "stars": "15", "class": {"name": "FloatTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Float", "snippet": "  public Float getNullableResult(ResultSet rs, String columnName)      throws SQLException {    float result = rs.getFloat(columnName);    return result == 0 && rs.wasNull() ? null : result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/FloatTypeHandler.java", "stars": "15", "class": {"name": "FloatTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Float", "snippet": "  public Float getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    float result = rs.getFloat(columnIndex);    return result == 0 && rs.wasNull() ? null : result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/FloatTypeHandler.java", "stars": "15", "class": {"name": "FloatTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Float", "snippet": "  public Float getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    float result = cs.getFloat(columnIndex);    return result == 0 && cs.wasNull() ? null : result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/FloatTypeHandler.java", "stars": "15", "class": {"name": "FloatTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "bindDrawFrameTexture", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void bindDrawFrameTexture() {        super.bindDrawFrameTexture();        //\u7ed1\u5b9a\u6ce8\u5165bitmap        int mFilterInputTextureUniform2 = GLES20.glGetUniformLocation(getProgram(), \"sTexture2\");        GLES20.glActiveTexture(GLES20.GL_TEXTURE3);        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mTexturesBitmap[0]);        GLES20.glUniform1i(mFilterInputTextureUniform2, mTexturesBitmap[0]);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/GSYVideoGLViewCustomRender3.java", "stars": "2", "class": {"name": "GSYVideoGLViewCustomRender3", "extends": "GSYVideoGLViewSimpleRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSurfaceCreated", "params": ["GL10", "EGLConfig"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSurfaceCreated(GL10 glUnused, EGLConfig config) {        super.onSurfaceCreated(glUnused, config);        Bitmap bitmap = BitmapFactory.decodeResource(mSurfaceView.getResources(), R.drawable.video_brightness_6_white_36dp);        //\u521b\u5efabitmap        GLES20.glGenTextures(1, mTexturesBitmap, 0);        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mTexturesBitmap[0]);        GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,                GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_NEAREST);        GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,                GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);        GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,                GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);        GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,                GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bitmap, 0);        bitmap.recycle();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/GSYVideoGLViewCustomRender3.java", "stars": "2", "class": {"name": "GSYVideoGLViewCustomRender3", "extends": "GSYVideoGLViewSimpleRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFragmentShader", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String getFragmentShader() {        return mBitmapEffect.getShader(mSurfaceView);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/GSYVideoGLViewCustomRender3.java", "stars": "2", "class": {"name": "GSYVideoGLViewCustomRender3", "extends": "GSYVideoGLViewSimpleRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run() {\t\tif (waitIfPaused()) return;\t\tif (delayIfNeed()) return;\t\tReentrantLock loadFromUriLock = imageLoadingInfo.loadFromUriLock;\t\tlog(LOG_START_DISPLAY_IMAGE_TASK);\t\tif (loadFromUriLock.isLocked()) {\t\t\tlog(LOG_WAITING_FOR_IMAGE_LOADED);\t\t}\t\tloadFromUriLock.lock();\t\tBitmap bmp;\t\ttry {\t\t\tif (checkTaskIsNotActual()) return;\t\t\tbmp = configuration.memoryCache.get(memoryCacheKey);\t\t\tif (bmp == null) {\t\t\t\tbmp = tryLoadBitmap();\t\t\t\tif (imageViewCollected) return; // listener callback already was fired\t\t\t\tif (bmp == null) return; // listener callback already was fired\t\t\t\tif (checkTaskIsNotActual() || checkTaskIsInterrupted()) return;\t\t\t\tif (options.shouldPreProcess()) {\t\t\t\t\tlog(LOG_PREPROCESS_IMAGE);\t\t\t\t\tbmp = options.getPreProcessor().process(bmp);\t\t\t\t\tif (bmp == null) {\t\t\t\t\t\tL.e(ERROR_PRE_PROCESSOR_NULL);\t\t\t\t\t}\t\t\t\t}\t\t\t\tif (bmp != null && options.isCacheInMemory()) {\t\t\t\t\tlog(LOG_CACHE_IMAGE_IN_MEMORY);\t\t\t\t\tconfiguration.memoryCache.put(memoryCacheKey, bmp);\t\t\t\t}\t\t\t} else {\t\t\t\tloadedFrom = LoadedFrom.MEMORY_CACHE;\t\t\t\tlog(LOG_GET_IMAGE_FROM_MEMORY_CACHE_AFTER_WAITING);\t\t\t}\t\t\tif (bmp != null && options.shouldPostProcess()) {\t\t\t\tlog(LOG_POSTPROCESS_IMAGE);\t\t\t\tbmp = options.getPostProcessor().process(bmp);\t\t\t\tif (bmp == null) {\t\t\t\t\tL.e(ERROR_POST_PROCESSOR_NULL, memoryCacheKey);\t\t\t\t}\t\t\t}\t\t} finally {\t\t\tloadFromUriLock.unlock();\t\t}\t\tif (checkTaskIsNotActual() || checkTaskIsInterrupted()) return;\t\tDisplayBitmapTask displayBitmapTask = new DisplayBitmapTask(bmp, imageLoadingInfo, engine, loadedFrom);\t\tdisplayBitmapTask.setLoggingEnabled(writeLogs);\t\thandler.post(displayBitmapTask);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "waitIfPaused", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean waitIfPaused() {\t\tAtomicBoolean pause = engine.getPause();\t\tsynchronized (pause) {\t\t\tif (pause.get()) {\t\t\t\tlog(LOG_WAITING_FOR_RESUME);\t\t\t\ttry {\t\t\t\t\tpause.wait();\t\t\t\t} catch (InterruptedException e) {\t\t\t\t\tL.e(LOG_TASK_INTERRUPTED, memoryCacheKey);\t\t\t\t\treturn true;\t\t\t\t}\t\t\t\tlog(LOG_RESUME_AFTER_PAUSE);\t\t\t}\t\t}\t\treturn checkTaskIsNotActual();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "delayIfNeed", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean delayIfNeed() {\t\tif (options.shouldDelayBeforeLoading()) {\t\t\tlog(LOG_DELAY_BEFORE_LOADING, options.getDelayBeforeLoading(), memoryCacheKey);\t\t\ttry {\t\t\t\tThread.sleep(options.getDelayBeforeLoading());\t\t\t} catch (InterruptedException e) {\t\t\t\tL.e(LOG_TASK_INTERRUPTED, memoryCacheKey);\t\t\t\treturn true;\t\t\t}\t\t\treturn checkTaskIsNotActual();\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "checkTaskIsNotActual", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean checkTaskIsNotActual() {\t\tImageView imageView = checkImageViewRef();\t\treturn imageView == null || checkImageViewReused(imageView);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "checkImageViewRef", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ImageView", "snippet": "\tprivate ImageView checkImageViewRef() {\t\tImageView imageView = imageViewRef.get();\t\tif (imageView == null) {\t\t\timageViewCollected = true;\t\t\tlog(LOG_TASK_CANCELLED_IMAGEVIEW_LOST);\t\t\tfireCancelEvent();\t\t}\t\treturn imageView;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "checkImageViewReused", "params": ["ImageView"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean checkImageViewReused(ImageView imageView) {\t\tString currentCacheKey = engine.getLoadingUriForView(imageView);\t\t// Check whether memory cache key (image URI) for current ImageView is actual.\t\t// If ImageView is reused for another task then current task should be cancelled.\t\tboolean imageViewWasReused = !memoryCacheKey.equals(currentCacheKey);\t\tif (imageViewWasReused) {\t\t\tlog(LOG_TASK_CANCELLED_IMAGEVIEW_REUSED);\t\t\tfireCancelEvent();\t\t}\t\treturn imageViewWasReused;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "checkTaskIsInterrupted", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean checkTaskIsInterrupted() {\t\tboolean interrupted = Thread.interrupted();\t\tif (interrupted) log(LOG_TASK_INTERRUPTED);\t\treturn interrupted;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "tryLoadBitmap", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Bitmap", "snippet": "\tprivate Bitmap tryLoadBitmap() {\t\tFile imageFile = getImageFileInDiscCache();\t\tBitmap bitmap = null;\t\ttry {\t\t\tif (imageFile.exists()) {\t\t\t\tlog(LOG_LOAD_IMAGE_FROM_DISC_CACHE);\t\t\t\tloadedFrom = LoadedFrom.DISC_CACHE;\t\t\t\tbitmap = decodeImage(Scheme.FILE.wrap(imageFile.getAbsolutePath()));\t\t\t\tif (imageViewCollected) return null;\t\t\t}\t\t\tif (bitmap == null || bitmap.getWidth() <= 0 || bitmap.getHeight() <= 0) {\t\t\t\tlog(LOG_LOAD_IMAGE_FROM_NETWORK);\t\t\t\tloadedFrom = LoadedFrom.NETWORK;\t\t\t\tString imageUriForDecoding = options.isCacheOnDisc() ? tryCacheImageOnDisc(imageFile) : uri;\t\t\t\tif (!checkTaskIsNotActual()) {\t\t\t\t\tbitmap = decodeImage(imageUriForDecoding);\t\t\t\t\tif (imageViewCollected) return null;\t\t\t\t\tif (bitmap == null || bitmap.getWidth() <= 0 || bitmap.getHeight() <= 0) {\t\t\t\t\t\tfireFailEvent(FailType.DECODING_ERROR, null);\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t} catch (IllegalStateException e) {\t\t\tfireFailEvent(FailType.NETWORK_DENIED, null);\t\t} catch (IOException e) {\t\t\tL.e(e);\t\t\tfireFailEvent(FailType.IO_ERROR, e);\t\t\tif (imageFile.exists()) {\t\t\t\timageFile.delete();\t\t\t}\t\t} catch (OutOfMemoryError e) {\t\t\tL.e(e);\t\t\tfireFailEvent(FailType.OUT_OF_MEMORY, e);\t\t} catch (Throwable e) {\t\t\tL.e(e);\t\t\tfireFailEvent(FailType.UNKNOWN, e);\t\t}\t\treturn bitmap;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "getImageFileInDiscCache", "params": [], "throws": null, "modifiers": ["private"], "return_type": "File", "snippet": "\tprivate File getImageFileInDiscCache() {\t\tDiscCacheAware discCache = configuration.discCache;\t\tFile imageFile = discCache.get(uri);\t\tFile cacheDir = imageFile.getParentFile();\t\tif (cacheDir == null || (!cacheDir.exists() && !cacheDir.mkdirs())) {\t\t\timageFile = configuration.reserveDiscCache.get(uri);\t\t\tcacheDir = imageFile.getParentFile();\t\t\tif (cacheDir != null && !cacheDir.exists()) {\t\t\t\tcacheDir.mkdirs();\t\t\t}\t\t}\t\treturn imageFile;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "decodeImage", "params": ["String"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Bitmap", "snippet": "\tprivate Bitmap decodeImage(String imageUri) throws IOException {\t\tImageView imageView = checkImageViewRef();\t\tif (imageView == null) return null;\t\tViewScaleType viewScaleType = ViewScaleType.fromImageView(imageView);\t\tImageDecodingInfo decodingInfo = new ImageDecodingInfo(memoryCacheKey, imageUri, targetSize, viewScaleType, getDownloader(), options);\t\treturn decoder.decode(decodingInfo);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "tryCacheImageOnDisc", "params": ["File"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "\tprivate String tryCacheImageOnDisc(File targetFile) {\t\tlog(LOG_CACHE_IMAGE_ON_DISC);\t\ttry {\t\t\tint width = configuration.maxImageWidthForDiscCache;\t\t\tint height = configuration.maxImageHeightForDiscCache;\t\t\tboolean saved = false;\t\t\tif (width > 0 || height > 0) {\t\t\t\tsaved = downloadSizedImage(targetFile, width, height);\t\t\t}\t\t\tif (!saved) {\t\t\t\tdownloadImage(targetFile);\t\t\t}\t\t\tconfiguration.discCache.put(uri, targetFile);\t\t\treturn Scheme.FILE.wrap(targetFile.getAbsolutePath());\t\t} catch (IOException e) {\t\t\tL.e(e);\t\t\treturn uri;\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "downloadSizedImage", "params": ["File", "int", "int"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean downloadSizedImage(File targetFile, int maxWidth, int maxHeight) throws IOException {\t\t// Download, decode, compress and save image\t\tImageSize targetImageSize = new ImageSize(maxWidth, maxHeight);\t\tDisplayImageOptions specialOptions = new DisplayImageOptions.Builder().cloneFrom(options).imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();\t\tImageDecodingInfo decodingInfo = new ImageDecodingInfo(memoryCacheKey, uri, targetImageSize, ViewScaleType.FIT_INSIDE, getDownloader(), specialOptions);\t\tBitmap bmp = decoder.decode(decodingInfo);\t\tif (bmp == null) return false;\t\tif (configuration.processorForDiscCache != null) {\t\t\tlog(LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISC);\t\t\tbmp = configuration.processorForDiscCache.process(bmp);\t\t\tif (bmp == null) {\t\t\t\tL.e(ERROR_PROCESSOR_FOR_DISC_CACHE_NULL, memoryCacheKey);\t\t\t\treturn false;\t\t\t}\t\t}\t\tOutputStream os = new BufferedOutputStream(new FileOutputStream(targetFile), BUFFER_SIZE);\t\tboolean savedSuccessfully;\t\ttry {\t\t\tsavedSuccessfully = bmp.compress(configuration.imageCompressFormatForDiscCache, configuration.imageQualityForDiscCache, os);\t\t} finally {\t\t\tIoUtils.closeSilently(os);\t\t}\t\tbmp.recycle();\t\treturn savedSuccessfully;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "downloadImage", "params": ["File"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void downloadImage(File targetFile) throws IOException {\t\tInputStream is = getDownloader().getStream(uri, options.getExtraForDownloader());\t\ttry {\t\t\tOutputStream os = new BufferedOutputStream(new FileOutputStream(targetFile), BUFFER_SIZE);\t\t\ttry {\t\t\t\tIoUtils.copyStream(is, os);\t\t\t} finally {\t\t\t\tIoUtils.closeSilently(os);\t\t\t}\t\t} finally {\t\t\tIoUtils.closeSilently(is);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "fireFailEvent", "params": ["FailType", "Throwable"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void fireFailEvent(final FailType failType, final Throwable failCause) {\t\tif (!Thread.interrupted()) {\t\t\thandler.post(new Runnable() {\t\t\t\t@Override\t\t\t\tpublic void run() {\t\t\t\t\tImageView imageView = imageViewRef.get();\t\t\t\t\tif (imageView != null && options.shouldShowImageOnFail()) {\t\t\t\t\t\timageView.setImageResource(options.getImageOnFail());\t\t\t\t\t}\t\t\t\t\tlistener.onLoadingFailed(uri, imageView, new FailReason(failType, failCause));\t\t\t\t}\t\t\t});\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "fireCancelEvent", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void fireCancelEvent() {\t\tif (!Thread.interrupted()) {\t\t\thandler.post(new Runnable() {\t\t\t\t@Override\t\t\t\tpublic void run() {\t\t\t\t\tlistener.onLoadingCancelled(uri, imageViewRef.get());\t\t\t\t}\t\t\t});\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "getDownloader", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ImageDownloader", "snippet": "\tprivate ImageDownloader getDownloader() {\t\tImageDownloader d;\t\tif (engine.isNetworkDenied()) {\t\t\td = networkDeniedDownloader;\t\t} else if (engine.isSlowNetwork()) {\t\t\td = slowNetworkDownloader;\t\t} else {\t\t\td = downloader;\t\t}\t\treturn d;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "getLoadingUri", "params": [], "throws": null, "modifiers": [], "return_type": "String", "snippet": "\tString getLoadingUri() {\t\treturn uri;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "log", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void log(String message) {\t\tif (writeLogs) L.d(message, memoryCacheKey);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "log", "params": ["String", "Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void log(String message, Object... args) {\t\tif (writeLogs) L.d(message, args);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java", "stars": "74", "class": {"name": "LoadAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": ["final"]}}, {"method_name": "getSchemaFetcher", "params": ["String", "DataSource", "int", "JdbcStoragePlugin"], "throws": null, "modifiers": ["public"], "return_type": "JdbcSchemaFetcher", "snippet": "  public JdbcSchemaFetcher getSchemaFetcher(final String name, final DataSource dataSource, final int timeout,      final JdbcStoragePlugin.Config config) {    return new BigQuerySchemaFetcher(name, dataSource, timeout, config);  }", "url": "https://raw.githubusercontent.com/panoramichq/dremio-bigquery-connector/master/src/main/java/com/dremio/exec/store/jdbc/conf/BigQueryDialect.java", "stars": "2", "class": {"name": "BigQueryDialect", "extends": "ArpDialect", "implements": null, "modifiers": ["public"]}}, {"method_name": "supportsNestedAggregations", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean supportsNestedAggregations() {    return false;  }", "url": "https://raw.githubusercontent.com/panoramichq/dremio-bigquery-connector/master/src/main/java/com/dremio/exec/store/jdbc/conf/BigQueryDialect.java", "stars": "2", "class": {"name": "BigQueryDialect", "extends": "ArpDialect", "implements": null, "modifiers": ["public"]}}, {"method_name": "usePrepareForColumnMetadata", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean usePrepareForColumnMetadata() {      return true;    }", "url": "https://raw.githubusercontent.com/panoramichq/dremio-bigquery-connector/master/src/main/java/com/dremio/exec/store/jdbc/conf/BigQueryDialect.java", "stars": "2", "class": {"name": "BigQuerySchemaFetcher", "extends": "JdbcSchemaFetcher", "implements": null, "modifiers": ["static"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_input_url_detail);        ButterKnife.bind(this);        url = \"https://res.exexm.com/cw_145225549855002\";        //\u589e\u52a0\u5c01\u9762        ImageView imageView = new ImageView(this);        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        imageView.setImageResource(R.mipmap.xxx1);        resolveNormalVideoUI();        //\u5916\u90e8\u8f85\u52a9\u7684\u65cb\u8f6c\uff0c\u5e2e\u52a9\u5168\u5c4f        orientationUtils = new OrientationUtils(this, detailPlayer);        //\u521d\u59cb\u5316\u4e0d\u6253\u5f00\u5916\u90e8\u7684\u65cb\u8f6c        orientationUtils.setEnable(false);        gsyVideoOptionBuilder = new GSYVideoOptionBuilder()                .setThumbImageView(imageView)                .setIsTouchWiget(true)                .setRotateViewAuto(false)                .setLockLand(false)                .setShowFullAnimation(false)                .setNeedLockFull(true)                .setSeekRatio(1)                .setUrl(url)                .setCacheWithPlay(cache)                .setVideoTitle(\"\u6d4b\u8bd5\u89c6\u9891\")                .setVideoAllCallBack(new GSYSampleCallBack() {                    @Override                    public void onPrepared(String url, Object... objects) {                        super.onPrepared(url, objects);                        //\u5f00\u59cb\u64ad\u653e\u4e86\u624d\u80fd\u65cb\u8f6c\u548c\u5168\u5c4f                        orientationUtils.setEnable(true);                        isPlay = true;                    }                    @Override                    public void onQuitFullscreen(String url, Object... objects) {                        super.onQuitFullscreen(url, objects);                        if (orientationUtils != null) {                            orientationUtils.backToProtVideo();                        }                    }                });        gsyVideoOptionBuilder.build(detailPlayer);        detailPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //\u76f4\u63a5\u6a2a\u5c4f                orientationUtils.resolveByClick();                //\u7b2c\u4e00\u4e2atrue\u662f\u5426\u9700\u8981\u9690\u85cfactionbar\uff0c\u7b2c\u4e8c\u4e2atrue\u662f\u5426\u9700\u8981\u9690\u85cfstatusbar                detailPlayer.startWindowFullscreen(InputUrlDetailActivity.this, true, true);            }        });        detailPlayer.setLockClickListener(new LockClickListener() {            @Override            public void onClick(View view, boolean lock) {                if (orientationUtils != null) {                    //\u914d\u5408\u4e0b\u65b9\u7684onConfigurationChanged                    orientationUtils.setEnable(!lock);                }            }        });        inputUrl.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                showInputDialog();            }        });        detailPlayer.postDelayed(new Runnable() {            @Override            public void run() {                ImageView testImage = findViewById(R.id.test_image_view);                Glide.with(InputUrlDetailActivity.this.getApplicationContext())                        .load(\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1525708180755&di=078af5aedf4b44268425be46bf25e407&imgtype=0&src=http%3A%2F%2Fc.hiphotos.baidu.com%2Fzhidao%2Fpic%2Fitem%2F203fb80e7bec54e78494e3a3bb389b504fc26a17.jpg\")                        .into(testImage);            }        }, 5000);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/InputUrlDetailActivity.java", "stars": "2", "class": {"name": "InputUrlDetailActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (orientationUtils != null) {            orientationUtils.backToProtVideo();        }        if (GSYVideoManager.backFromWindowFull(this)) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/InputUrlDetailActivity.java", "stars": "2", "class": {"name": "InputUrlDetailActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        getCurPlay().onVideoPause();        super.onPause();        isPause = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/InputUrlDetailActivity.java", "stars": "2", "class": {"name": "InputUrlDetailActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        getCurPlay().onVideoResume();        super.onResume();        isPause = false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/InputUrlDetailActivity.java", "stars": "2", "class": {"name": "InputUrlDetailActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        if (isPlay) {            getCurPlay().release();        }        //GSYPreViewManager.instance().releaseMediaPlayer();        if (orientationUtils != null)            orientationUtils.releaseListener();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/InputUrlDetailActivity.java", "stars": "2", "class": {"name": "InputUrlDetailActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onConfigurationChanged", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        //\u5982\u679c\u65cb\u8f6c\u4e86\u5c31\u5168\u5c4f        if (isPlay && !isPause) {            detailPlayer.onConfigurationChanged(this, newConfig, orientationUtils, true, true);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/InputUrlDetailActivity.java", "stars": "2", "class": {"name": "InputUrlDetailActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurPlay", "params": [], "throws": null, "modifiers": ["private"], "return_type": "GSYVideoPlayer", "snippet": "    private GSYVideoPlayer getCurPlay() {        if (detailPlayer.getFullWindowPlayer() != null) {            return  detailPlayer.getFullWindowPlayer();        }        return detailPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/InputUrlDetailActivity.java", "stars": "2", "class": {"name": "InputUrlDetailActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "playVideo", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void playVideo() {        detailPlayer.release();        gsyVideoOptionBuilder.setUrl(url)                .setCacheWithPlay(cache)                .setVideoTitle(\"\u6d4b\u8bd5\u89c6\u9891\")                .build(detailPlayer);        gsyVideoOptionBuilder.build(detailPlayer);        detailPlayer.postDelayed(new Runnable() {            @Override            public void run() {                detailPlayer.startPlayLogic();            }        }, 1000);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/InputUrlDetailActivity.java", "stars": "2", "class": {"name": "InputUrlDetailActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveNormalVideoUI", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveNormalVideoUI() {        //\u589e\u52a0title        detailPlayer.getTitleTextView().setVisibility(View.GONE);        detailPlayer.getBackButton().setVisibility(View.GONE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/InputUrlDetailActivity.java", "stars": "2", "class": {"name": "InputUrlDetailActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "showInputDialog", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void showInputDialog() {        final CustomInputDialog customInputDialog = new CustomInputDialog(this);        customInputDialog.setInput(url);        customInputDialog.setCache(cache);        customInputDialog.setTitle(\"\u8bf7\u8f93\u5165URL\");        customInputDialog.setButton(DialogInterface.BUTTON_POSITIVE, \"\u786e\u5b9a\", new CustomInputDialog.OnClickListener() {            @Override            public void onInputChanged(String input, boolean cache) {                url = input;                InputUrlDetailActivity.this.cache = cache;            }            @Override            public void onClick(DialogInterface dialog, int which) {                url = customInputDialog.getEditMessage().getText().toString();                playVideo();            }        });        customInputDialog.setCancelable(true);        customInputDialog.show();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/InputUrlDetailActivity.java", "stars": "2", "class": {"name": "InputUrlDetailActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCodigo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getCodigo() {\t\treturn codigo;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/NotaCompra.java", "stars": "3", "class": {"name": "NotaCompra", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCodigo", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCodigo(int codigo) {\t\tthis.codigo = codigo;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/NotaCompra.java", "stars": "3", "class": {"name": "NotaCompra", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGarantiaPadrao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalDateTime", "snippet": "\tpublic LocalDateTime getGarantiaPadrao() {\t\treturn garantiaPadrao;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/NotaCompra.java", "stars": "3", "class": {"name": "NotaCompra", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGarantiaPadrao", "params": ["LocalDateTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setGarantiaPadrao(LocalDateTime garantiaPadrao) {\t\tthis.garantiaPadrao = garantiaPadrao;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/NotaCompra.java", "stars": "3", "class": {"name": "NotaCompra", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGarantiaExtendida", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalDateTime", "snippet": "\tpublic LocalDateTime getGarantiaExtendida() {\t\treturn garantiaExtendida;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/NotaCompra.java", "stars": "3", "class": {"name": "NotaCompra", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGarantiaExtendida", "params": ["LocalDateTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setGarantiaExtendida(LocalDateTime garantiaExtendida) {\t\tthis.garantiaExtendida = garantiaExtendida;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/NotaCompra.java", "stars": "3", "class": {"name": "NotaCompra", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValorTotal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "\tpublic float getValorTotal() {\t\treturn valorTotal;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/NotaCompra.java", "stars": "3", "class": {"name": "NotaCompra", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValorTotal", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setValorTotal(float valorTotal) {\t\tthis.valorTotal = valorTotal;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/NotaCompra.java", "stars": "3", "class": {"name": "NotaCompra", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataCompra", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalDateTime", "snippet": "\tpublic LocalDateTime getDataCompra() {\t\treturn dataCompra;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/NotaCompra.java", "stars": "3", "class": {"name": "NotaCompra", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataCompra", "params": ["LocalDateTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDataCompra(LocalDateTime dataCompra) {\t\tthis.dataCompra = dataCompra;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/NotaCompra.java", "stars": "3", "class": {"name": "NotaCompra", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataEntrega", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalDateTime", "snippet": "\tpublic LocalDateTime getDataEntrega() {\t\treturn dataEntrega;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/NotaCompra.java", "stars": "3", "class": {"name": "NotaCompra", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataEntrega", "params": ["LocalDateTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDataEntrega(LocalDateTime dataEntrega) {\t\tthis.dataEntrega = dataEntrega;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/NotaCompra.java", "stars": "3", "class": {"name": "NotaCompra", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCliente", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Cliente", "snippet": "\tpublic Cliente getCliente() {\t\treturn cliente;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/NotaCompra.java", "stars": "3", "class": {"name": "NotaCompra", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCliente", "params": ["Cliente"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCliente(Cliente cliente) {\t\tthis.cliente = cliente;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/NotaCompra.java", "stars": "3", "class": {"name": "NotaCompra", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProduto", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Produto", "snippet": "\tpublic Produto getProduto() {\t\treturn produto;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/NotaCompra.java", "stars": "3", "class": {"name": "NotaCompra", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProduto", "params": ["Produto"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setProduto(Produto produto) {\t\tthis.produto = produto;\t}", "url": "https://raw.githubusercontent.com/vinicius058/projetoecommerce/master/src/main/java/br/com/ecommerce/projetoecommerce/entity/NotaCompra.java", "stars": "3", "class": {"name": "NotaCompra", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newAnimal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Animal", "snippet": "    public Animal newAnimal() {        System.out.println(\"\u65b0\u9a6c\u51fa\u751f\");        return new Horse();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/factorymethod/HorseFarm.java", "stars": "2", "class": {"name": "HorseFarm", "extends": null, "implements": ["AnimalFarm"], "modifiers": ["public"]}}, {"method_name": "testClasses", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testClasses(String classPath) {\t\tClassNode node = getFromName(classPath);\t\tfor (MethodNode mn : node.methods)\t\t\tassertDoesNotThrow(() -> assertNotNull(TestUtils.getFrames(node.name, mn)));\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/java/me/coley/analysis/validation/pass/TestJavacClasses.java", "stars": "12", "class": {"name": "TestJavacClasses", "extends": "TestUtils", "implements": null, "modifiers": ["public"]}}, {"method_name": "validate", "params": ["DataSourceModel"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void validate(DataSourceModel ma) throws Exception {        Map<String, Object> params = ma.resolveParams();        Set<String> keys = params.keySet();        if(!keys.contains(PARAM_SFTP_HOST) ||                StringUtils.isBlank(String.valueOf(params.get(PARAM_SFTP_HOST)))){            throw new Exception(PARAM_SFTP_HOST + \" cannot be null\");        }        if(!keys.contains(PARAM_SFTP_PORT)){            throw new Exception(PARAM_SFTP_PORT + \" cannot be null\");        }        try{            Integer.valueOf(String.valueOf(params.get(PARAM_SFTP_PORT)));        }catch(NumberFormatException e){            throw new Exception(PARAM_SFTP_PORT + \" is not a number\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/checks/SftpConnCheck.java", "stars": "23", "class": {"name": "SftpConnCheck", "extends": "AbstractDataSourceConnCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "check", "params": ["DataSource", "File"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void check(DataSource ds, File file) throws Exception {        Map<String, Object> parameters = ds.resolveParams();        String host = String.valueOf(parameters.get(PARAM_SFTP_HOST));        int port = Integer.parseInt(String.valueOf(parameters.get(PARAM_SFTP_PORT)));        String username = String.valueOf(parameters.get(PARAM_DEFAULT_USERNAME));        String password = String.valueOf(parameters.get(PARAM_DEFAULT_PASSWORD));        String path = \"\";        File keyFileTmp = null;        try {            String authType = String.valueOf(parameters.getOrDefault(PARAM_AUTH_TYPE, \"\"));            if(StringUtils.isNotBlank(authType) && AuthType.KEYFILE.equals(authType)) {                if (null == file && ds.getId() > 0) {                    file = getAuthFileFromDataSource(ds, AuthType.KEYFILE, conf.getStoreTmp());                    keyFileTmp = file;                }                if (null != file) {                    path = file.getPath();                }            }            Sftp.SftpConnection connection = Sftp.login(host, port, username,                    path,                    password, CONNECT_TIMEOUT_IN_SECONDS * 1000);            connection.disconnect();        }finally{            if(null != keyFileTmp){                if(!keyFileTmp.delete()){                    logger.info(\"Delete key temp file Failed, Path:\" + keyFileTmp.getPath());                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/checks/SftpConnCheck.java", "stars": "23", "class": {"name": "SftpConnCheck", "extends": "AbstractDataSourceConnCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "test", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void test(){        List<XxlJobGroup> list = xxlJobGroupDao.findAll();        List<XxlJobGroup> list2 = xxlJobGroupDao.findByAddressType(0);        XxlJobGroup group = new XxlJobGroup();        group.setAppName(\"setAppName\");        group.setTitle(\"setTitle\");        group.setOrder(1);        group.setAddressType(0);        group.setAddressList(\"setAddressList\");        int ret = xxlJobGroupDao.save(group);        XxlJobGroup group2 = xxlJobGroupDao.load(group.getId());        group2.setAppName(\"setAppName2\");        group2.setTitle(\"setTitle2\");        group2.setOrder(2);        group2.setAddressType(2);        group2.setAddressList(\"setAddressList2\");        int ret2 = xxlJobGroupDao.update(group2);        int ret3 = xxlJobGroupDao.remove(group.getId());    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/test/java/com/avon/rga/dao/XxlJobGroupDaoTest.java", "stars": "1", "class": {"name": "XxlJobGroupDaoTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getState() {    return state;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/Zip.java", "stars": "15", "class": {"name": "Zip", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setState", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setState(String state) {    this.state = state;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/Zip.java", "stars": "15", "class": {"name": "Zip", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCity() {    return city;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/Zip.java", "stars": "15", "class": {"name": "Zip", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCity", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCity(String city) {    this.city = city;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/Zip.java", "stars": "15", "class": {"name": "Zip", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getZipCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getZipCode() {    return zipCode;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/Zip.java", "stars": "15", "class": {"name": "Zip", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setZipCode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setZipCode(int zipCode) {    this.zipCode = zipCode;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/Zip.java", "stars": "15", "class": {"name": "Zip", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testListTeamLinks", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testListTeamLinks() {        List<LinkTeamVO> linkTeamVOS = linksService.listTeamLinks();        System.out.println(linkTeamVOS);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/test/java/cn/tsxygfy/beyond/LinksServiceTest.java", "stars": "1", "class": {"name": "LinksServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "annotationOnMethodTrace", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void annotationOnMethodTrace(){    }", "url": "https://raw.githubusercontent.com/he303954106/AOP_Demo/master/app/src/main/java/com/netease/aop/login/aspect/LifecycleAspect.java", "stars": "2", "class": {"name": "LifecycleAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "weaveOnMethodJoinPoint", "params": ["ProceedingJoinPoint"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object weaveOnMethodJoinPoint(ProceedingJoinPoint joinPoint) throws Throwable {        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();        String className = methodSignature.getDeclaringType().getSimpleName();        String methodName = methodSignature.getName();        Log.i(className, \"before joinPoint proceed className = \" + className + \" methodName = \" + methodName);        Object result  = joinPoint.proceed();        Log.i(className, \"after joinPoint proceed className = \" + className + \" methodName = \" + methodName);        return result;    }", "url": "https://raw.githubusercontent.com/he303954106/AOP_Demo/master/app/src/main/java/com/netease/aop/login/aspect/LifecycleAspect.java", "stars": "2", "class": {"name": "LifecycleAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "register", "params": ["Task"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void register(Task task) {        this.workers.register(task);    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/main/java/os/failsafe/executor/FailsafeExecutor.java", "stars": "2", "class": {"name": "FailsafeExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        executor.scheduleWithFixedDelay(() -> {            while (submitNextExecution().isPresent()) {            }        }, initialDelay, delay, TimeUnit.MILLISECONDS);    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/main/java/os/failsafe/executor/FailsafeExecutor.java", "stars": "2", "class": {"name": "FailsafeExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() {        this.workers.stop();        executor.shutdown();    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/main/java/os/failsafe/executor/FailsafeExecutor.java", "stars": "2", "class": {"name": "FailsafeExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["Task"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String execute(Task.Instance instance) {        return taskInstances.create(instance.name, instance.parameter);    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/main/java/os/failsafe/executor/FailsafeExecutor.java", "stars": "2", "class": {"name": "FailsafeExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "submitNextExecution", "params": [], "throws": null, "modifiers": [], "return_type": "Optional<Future>", "snippet": "    Optional<Future<String>> submitNextExecution() {        if (workers.allWorkersBusy()) {            return Optional.empty();        }        try (Connection connection = dataSource.getConnection()) {            Optional<TaskInstance> possibleTask = taskInstances.findNextTask(connection);            if (possibleTask.isEmpty()) {                return Optional.empty();            }            TaskInstance taskInstance = possibleTask.get();            boolean taken = taskInstance.take(connection);            if (!taken) {                return submitNextExecution();            }            return Optional.of(workers.execute(taskInstance));        } catch (Exception e) {            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/main/java/os/failsafe/executor/FailsafeExecutor.java", "stars": "2", "class": {"name": "FailsafeExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\treturn getLeft().generateCode() + getRight().generateCode();\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmSEQ.java", "stars": "3", "class": {"name": "StmSEQ", "extends": "StmBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\tgetLeft().checkType();\t\tgetRight().checkType();\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmSEQ.java", "stars": "3", "class": {"name": "StmSEQ", "extends": "StmBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws InterruptedException {\t\tsetUp(\"chrome\", \"https://opensource-demo.orangehrmlive.com/\");\t\tdriver.findElement(By.id(\"txtUsername\")).sendKeys(\"Admin\");\t\tWebElement password = driver.findElement(By.name(\"txtPassword\"));\t\tpassword.sendKeys(\"admin123\");\t\t// lets pretend click is not working\t\t// driver.findElement(By.className(\"button\")).click();\t\t// to perform mouse and keybord operations:\t\t// Use Actions class to login\t\tActions act = new Actions(driver);\t\tWebElement loginBtn = driver.findElement(By.className(\"button\"));\t\t// right click\t\t//\tact.moveToElement(loginBtn).contextClick().perform();\t\t// double click\t\t// act.moveToElement(loginBtn).doubleClick().perform();\t\t// click\t\tact.moveToElement(loginBtn).click().perform();\t\tThread.sleep(2000);\t\t// hover over\t\tWebElement leave = driver.findElement(By.linkText(\"Leave\"));\t\tWebElement leaveList = driver.findElement(By.linkText(\"Leave List\"));//\tact.moveToElement(leave).click().perform();\t\tThread.sleep(2000);//\tact.moveToElement(leaveList).click().perform();\t\tWebElement pim = driver.findElement(By.linkText(\"PIM\"));\t\tWebElement addEmp = driver.findElement(By.linkText(\"Add Employee\"));\t\tWebElement firstName = driver.findElement(By.id(\"firstName\"));\t\tWebElement middleName = driver.findElement(By.id(\"middleName\"));\t\tThread.sleep(2000);\t\tact.moveToElement(pim).click().perform();\t\tThread.sleep(2000);\t\tact.moveToElement(addEmp).click().perform();\t\tdriver.quit();\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class7/ActionsClass.java", "stars": "3", "class": {"name": "ActionsClass", "extends": "CommonMethods", "implements": null, "modifiers": ["public"]}}, {"method_name": "initChannel", "params": ["SocketChannel"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initChannel(SocketChannel socketChannel) {        ChannelPipeline pipeline = socketChannel.pipeline();        pipeline                .addLast(new NettyDecoder(this.nettyServer))                .addLast(new NettyConnectionHandler(this.nettyServer));    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/server/netty/NettyChannelInitializer.java", "stars": "2", "class": {"name": "NettyChannelInitializer", "extends": "ChannelInitializer", "implements": null, "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid contextLoads() {\t}", "url": "https://raw.githubusercontent.com/ELATTARIYassine/Angular-SpringBoot-cinema-management/master/backend/src/test/java/com/shanks/cinema/CinemaApplicationTests.java", "stars": "2", "class": {"name": "CinemaApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "execute", "params": ["Request", "Request"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Response", "snippet": "    public Response execute(Request request, Request.Options options) throws IOException {        //When the request has the 'Host-Port' header        //use it instead of balancing, the header can be modified dynamically        Map<String, Collection<String>> headers = new LinkedHashMap<>(                request.headers());        Collection<String> hostPorts = headers.getOrDefault(HOST_PORT, Collections.emptyList());        //Put token which wrapped by sso cookie into request headers        String clientName = URI.create(request.url()).getHost();        if(StringUtils.isNotBlank(System.getProperty(AuthConstraints.ENV_SERV_TOKEN)) &&                 !clientName.equals(AuthConstraints.GATEWAY_CLIENT)){            headers.put(\"Cookie\",                    Collections.singleton(AuthConstraints.DEFAULT_SSO_COOKIE + \"=\"                            + System.getProperty(AuthConstraints.ENV_SERV_TOKEN)));        }        headers.put(\"X-Requested-With\", Collections.singleton(\"XMLHttpRequest\"));        IClientConfig requestConfig = getClientConfig(options, clientName);        URI uri;        boolean withLoadBalance = true;        if(!hostPorts.isEmpty()){            String hostPort = hostPorts.iterator().next();            uri = replaceHost(request.url(), clientName, hostPort);            withLoadBalance = false;        }else{            uri = replaceHost(request.url(), clientName, \"\");        }        LabelLoadBalancerFactory.FeignLabelLoadBalancer.LbClientRequest                lbClientRequest = new LabelLoadBalancerFactory.FeignLabelLoadBalancer.LbClientRequest(                this.delegate, request, headers, uri);        LabelLoadBalancerFactory.FeignLabelLoadBalancer lb = this.lbClientFactory.create(clientName);        try {            return withLoadBalance ? lb.executeWithLoadBalancer(lbClientRequest, requestConfig).toResponse()            : lb.execute(lbClientRequest, requestConfig).toResponse();        }catch(Exception e){            Throwable timeout = findTimeoutException(e);            if(null != timeout) {                Server server = lbClientRequest.getChosenServer();                throw new RpcReqTimeoutException(null == server?\"\" : server.getHostPort(), e);            }            IOException io = findIOException(e);            if(null != io){                throw io;            }            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFeignClient.java", "stars": "23", "class": {"name": "LabelLoadBalancerFeignClient", "extends": null, "implements": ["Client"], "modifiers": ["public"]}}, {"method_name": "findIOException", "params": ["Throwable"], "throws": null, "modifiers": ["private"], "return_type": "IOException", "snippet": "    private IOException findIOException(Throwable throwable){        if(throwable == null){            return null;        }        if (throwable instanceof IOException){            return (IOException)throwable;        }        return findIOException(throwable.getCause());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFeignClient.java", "stars": "23", "class": {"name": "LabelLoadBalancerFeignClient", "extends": null, "implements": ["Client"], "modifiers": ["public"]}}, {"method_name": "findTimeoutException", "params": ["Throwable"], "throws": null, "modifiers": ["private"], "return_type": "Throwable", "snippet": "    private Throwable findTimeoutException(Throwable throwable){        Throwable cause = throwable;        while(null != cause){            if(cause instanceof TimeoutException || cause instanceof SocketTimeoutException){                return cause;            }            cause = cause.getCause();        }        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFeignClient.java", "stars": "23", "class": {"name": "LabelLoadBalancerFeignClient", "extends": null, "implements": ["Client"], "modifiers": ["public"]}}, {"method_name": "getClientConfig", "params": ["Request", "String"], "throws": null, "modifiers": ["private"], "return_type": "IClientConfig", "snippet": "    private IClientConfig getClientConfig(Request.Options options, String clientName){        IClientConfig requestConfig;        if(options == DEFAULT_OPTIONS){            requestConfig = this.clientFactory.getClientConfig(clientName);        }else{            requestConfig = new DefaultClientConfigImpl();            requestConfig.set(CommonClientConfigKey.ConnectTimeout,                    options.connectTimeoutMillis());            requestConfig.set(CommonClientConfigKey.ReadTimeout, options.readTimeoutMillis());        }        return requestConfig;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFeignClient.java", "stars": "23", "class": {"name": "LabelLoadBalancerFeignClient", "extends": null, "implements": ["Client"], "modifiers": ["public"]}}, {"method_name": "replaceHost", "params": ["String", "String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "URI", "snippet": "    private static URI replaceHost(String originalUrl, String clientName, String host){        return URI.create(originalUrl.replaceFirst(clientName, host));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFeignClient.java", "stars": "23", "class": {"name": "LabelLoadBalancerFeignClient", "extends": null, "implements": ["Client"], "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Context", "StreamInfo"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "    public static Intent startActivity(Context context, @NonNull StreamInfo info) {        return startActivity(context, info, 0);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/VideoPlayerActivity.java", "stars": "4", "class": {"name": "VideoPlayerActivity", "extends": "ButterBaseActivity", "implements": ["VideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Context", "StreamInfo", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "    public static Intent startActivity(Context context, @NonNull StreamInfo info, long resumePosition) {        Intent i = new Intent(context, VideoPlayerActivity.class);        if (info == null){            throw new IllegalArgumentException(\"StreamInfo must not be null\");        }        i.putExtra(INFO, info);        i.putExtra(BaseVideoPlayerFragment.RESUME_POSITION, resumePosition);        context.startActivity(i);        return i;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/VideoPlayerActivity.java", "stars": "4", "class": {"name": "VideoPlayerActivity", "extends": "ButterBaseActivity", "implements": ["VideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        MobileButterApplication.getAppContext()                .getComponent()                .inject(this);        super.onCreate(savedInstanceState, R.layout.activity_videoplayer);        mFragment = (VideoPlayerFragment) getSupportFragmentManager().findFragmentById(R.id.video_fragment);        setShowCasting(true);        mResumePosition = getIntent().getLongExtra(BaseVideoPlayerFragment.RESUME_POSITION, 0);        mStreamInfo = getIntent().getParcelableExtra(INFO);        if (TextUtils.equals(getIntent().getAction(), Intent.ACTION_VIEW)) {            Bundle extras = getIntent().getExtras();            mStreamInfo = new StreamInfo(\"\");            /* Started from external application 'content' */            Uri data = getIntent().getData();            if (data != null && TextUtils.equals(data.getScheme(), \"content\")) {                // Mail-based apps - download the stream to a temporary file and play it                if(data.getHost().equals(\"com.fsck.k9.attachmentprovider\")                        || data.getHost().equals(\"gmail-ls\")) {                    InputStream is = null;                    OutputStream os = null;                    try {                        Cursor cursor = getContentResolver().query(data,                                new String[]{MediaStore.MediaColumns.DISPLAY_NAME}, null, null, null);                        if (cursor != null) {                            cursor.moveToFirst();                            String filename = cursor.getString(cursor.getColumnIndex(MediaStore.MediaColumns.DISPLAY_NAME));                            cursor.close();                            Timber.i(\"Getting file \" + filename + \" from content:// URI\");                            is = getContentResolver().openInputStream(data);                            os = new FileOutputStream(Environment.getExternalStorageDirectory().getPath() + \"/Download/\" + filename);                            byte[] buffer = new byte[1024];                            int bytesRead = 0;                            while((bytesRead = is.read(buffer)) >= 0) {                                os.write(buffer, 0, bytesRead);                            }                            mStreamInfo.setVideoLocation(AndroidUtil.PathToUri(Environment.getExternalStorageDirectory().getPath() + \"/Download/\" + filename).toString());                        }                    } catch (Exception e) {                        Timber.e(\"Couldn't download file from mail URI\");                        return;                    } finally {                        try {                            if(is != null) is.close();                            if(os != null) os.close();                        } catch (IOException e) {                            e.printStackTrace();                        }                    }                }                // Media or MMS URI                else if (TextUtils.equals(data.getAuthority(), \"media\")){                    try {                        Cursor cursor = getContentResolver().query(data,                                new String[]{ MediaStore.Video.Media.DATA }, null, null, null);                        if (cursor != null) {                            int column_index = cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DATA);                            if (cursor.moveToFirst())                                mStreamInfo.setVideoLocation(AndroidUtil.PathToUri(cursor.getString(column_index)).toString());                            cursor.close();                        }                        // other content-based URI (probably file pickers)                        else {                            mStreamInfo.setVideoLocation(data.toString());                        }                    } catch (Exception e) {                        mStreamInfo.setVideoLocation(data.toString());                        if (data.getScheme() == null)                            mStreamInfo.setVideoLocation(AndroidUtil.PathToUri(data.getPath()).toString());                        Timber.e(\"Couldn't read the file from media or MMS\");                    }                } else {                    ParcelFileDescriptor inputPFD = null;                    try {                        inputPFD = getContentResolver().openFileDescriptor(data, \"r\");                        if (AndroidUtil.isHoneycombMr1OrLater())                            mStreamInfo.setVideoLocation(AndroidUtil.LocationToUri(\"fd://\" + inputPFD.getFd()).toString());                        else {                            String fdString = inputPFD.getFileDescriptor().toString();                            mStreamInfo.setVideoLocation(AndroidUtil.LocationToUri(\"fd://\" + fdString.substring(15, fdString.length() - 1)).toString());                        }                    } catch (FileNotFoundException e) {                        Timber.e(\"Couldn't understand the intent\");                        return;                    }                }            } /* External application */            else if (getIntent().getDataString() != null) {                // Plain URI                final String location = getIntent().getDataString();                // Remove VLC prefix if needed                if (location.startsWith(\"vlc://\")) {                    mStreamInfo.setVideoLocation(AndroidUtil.LocationToUri(location.substring(6)).toString());                } else {                    data = getIntent().getData();                    if (data.getScheme() == null)                        mStreamInfo.setVideoLocation(AndroidUtil.PathToUri(data.getPath()).toString());                    else                        mStreamInfo.setVideoLocation(data.toString());                }            } else {                Timber.e(\"Couldn't understand the intent\");                return;            }            // Try to get the position            if(extras != null)                mResumePosition = extras.getLong(\"position\", -1);        }        if(mStreamInfo == null) {            finish();            return;        }        mTitle = mStreamInfo.getTitle() == null ? getString(R.string.the_video) : mStreamInfo.getTitle();        mFragment.onMediaReady();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/VideoPlayerActivity.java", "stars": "4", "class": {"name": "VideoPlayerActivity", "extends": "ButterBaseActivity", "implements": ["VideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        if(null != mService && mService.checkStopped())            finish();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/VideoPlayerActivity.java", "stars": "4", "class": {"name": "VideoPlayerActivity", "extends": "ButterBaseActivity", "implements": ["VideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        if(mService != null)            mService.removeListener(mFragment);        super.onPause();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/VideoPlayerActivity.java", "stars": "4", "class": {"name": "VideoPlayerActivity", "extends": "ButterBaseActivity", "implements": ["VideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onOptionsItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                showExitDialog();                return true;        }        return super.onOptionsItemSelected(item);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/VideoPlayerActivity.java", "stars": "4", "class": {"name": "VideoPlayerActivity", "extends": "ButterBaseActivity", "implements": ["VideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        showExitDialog();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/VideoPlayerActivity.java", "stars": "4", "class": {"name": "VideoPlayerActivity", "extends": "ButterBaseActivity", "implements": ["VideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "showExitDialog", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void showExitDialog() {        OptionDialogFragment.show(getSupportFragmentManager(), getString(R.string.leave_videoplayer_title), String.format(getString(R.string.leave_videoplayer_message), mTitle), getString(android.R.string.yes), getString(android.R.string.no), new OptionDialogFragment.Listener() {            @Override            public void onSelectionPositive() {                if (mService != null)                    mService.stopStreaming();                finish();            }            @Override            public void onSelectionNegative() {            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/VideoPlayerActivity.java", "stars": "4", "class": {"name": "VideoPlayerActivity", "extends": "ButterBaseActivity", "implements": ["VideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "getResumePosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getResumePosition() {        return mResumePosition;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/VideoPlayerActivity.java", "stars": "4", "class": {"name": "VideoPlayerActivity", "extends": "ButterBaseActivity", "implements": ["VideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "getInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StreamInfo", "snippet": "    public StreamInfo getInfo() {        return mStreamInfo;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/VideoPlayerActivity.java", "stars": "4", "class": {"name": "VideoPlayerActivity", "extends": "ButterBaseActivity", "implements": ["VideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "getService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TorrentService", "snippet": "    public TorrentService getService() {        return mService;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/VideoPlayerActivity.java", "stars": "4", "class": {"name": "VideoPlayerActivity", "extends": "ButterBaseActivity", "implements": ["VideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onTorrentServiceDisconnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTorrentServiceDisconnected() {        if (null!=mFragment){            mService.removeListener(mFragment);        }        super.onTorrentServiceDisconnected();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/VideoPlayerActivity.java", "stars": "4", "class": {"name": "VideoPlayerActivity", "extends": "ButterBaseActivity", "implements": ["VideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onTorrentServiceConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTorrentServiceConnected() {        super.onTorrentServiceConnected();        if(mService.checkStopped()) {            finish();            return;        }        mService.addListener(mFragment);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/VideoPlayerActivity.java", "stars": "4", "class": {"name": "VideoPlayerActivity", "extends": "ButterBaseActivity", "implements": ["VideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return this.name;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBean.java", "stars": "18", "class": {"name": "NodeBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(final String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBean.java", "stars": "18", "class": {"name": "NodeBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getConfig", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "  public Map<String, String> getConfig() {    return this.config;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBean.java", "stars": "18", "class": {"name": "NodeBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setConfig", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setConfig(final Map<String, String> config) {    this.config = config;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBean.java", "stars": "18", "class": {"name": "NodeBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDependsOn", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getDependsOn() {    return this.dependsOn;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBean.java", "stars": "18", "class": {"name": "NodeBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDependsOn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDependsOn(final List<String> dependsOn) {    this.dependsOn = dependsOn;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBean.java", "stars": "18", "class": {"name": "NodeBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getType() {    return this.type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBean.java", "stars": "18", "class": {"name": "NodeBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setType(final String type) {    this.type = type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBean.java", "stars": "18", "class": {"name": "NodeBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCondition() {    return this.condition;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBean.java", "stars": "18", "class": {"name": "NodeBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCondition", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCondition(final String condition) {    this.condition = condition;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBean.java", "stars": "18", "class": {"name": "NodeBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getNodes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<NodeBean>", "snippet": "  public List<NodeBean> getNodes() {    return this.nodes;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBean.java", "stars": "18", "class": {"name": "NodeBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setNodes", "params": ["List<NodeBean>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNodes(final List<NodeBean> nodes) {    this.nodes = nodes;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBean.java", "stars": "18", "class": {"name": "NodeBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getProps() {    final Props props = new Props(null, this.getConfig());    props.put(Constants.NODE_TYPE, this.getType());    return props;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBean.java", "stars": "18", "class": {"name": "NodeBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getTrigger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FlowTriggerBean", "snippet": "  public FlowTriggerBean getTrigger() {    return this.trigger;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBean.java", "stars": "18", "class": {"name": "NodeBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setTrigger", "params": ["FlowTriggerBean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTrigger(final FlowTriggerBean trigger) {    this.trigger = trigger;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBean.java", "stars": "18", "class": {"name": "NodeBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"NodeBean{\" +        \"name='\" + this.name + '\\'' +        \", config=\" + this.config +        \", dependsOn=\" + this.dependsOn +        \", type='\" + this.type + '\\'' +        \", condition='\" + this.condition + '\\'' +        \", nodes=\" + this.nodes +        \", trigger=\" + this.trigger +        '}';  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBean.java", "stars": "18", "class": {"name": "NodeBean", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        File file = new File(\"c:\\\\abc\");        getAllFile(file);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo03Filter/Demo01Filter.java", "stars": "2", "class": {"name": "Demo01Filter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllFile", "params": ["File"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void getAllFile(File dir){        File[] files = dir.listFiles(new FileFilterImpl());//\u4f20\u9012\u8fc7\u6ee4\u5668\u5bf9\u8c61        for (File f : files) {            //\u5bf9\u904d\u5386\u5f97\u5230\u7684File\u5bf9\u8c61f\u8fdb\u884c\u5224\u65ad,\u5224\u65ad\u662f\u5426\u662f\u6587\u4ef6\u5939            if(f.isDirectory()){                //f\u662f\u4e00\u4e2a\u6587\u4ef6\u5939,\u5219\u7ee7\u7eed\u904d\u5386\u8fd9\u4e2a\u6587\u4ef6\u5939                //\u6211\u4eec\u53d1\u73b0getAllFile\u65b9\u6cd5\u5c31\u662f\u4f20\u9012\u6587\u4ef6\u5939,\u904d\u5386\u6587\u4ef6\u5939\u7684\u65b9\u6cd5                //\u6240\u4ee5\u76f4\u63a5\u8c03\u7528getAllFile\u65b9\u6cd5\u5373\u53ef:\u9012\u5f52(\u81ea\u5df1\u8c03\u7528\u81ea\u5df1)                getAllFile(f);            }else{                //f\u662f\u4e00\u4e2a\u6587\u4ef6,\u76f4\u63a5\u6253\u5370\u5373\u53ef                System.out.println(f);            }        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo03Filter/Demo01Filter.java", "stars": "2", "class": {"name": "Demo01Filter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "LoadingBeamingDialogFragment", "snippet": "    public static LoadingBeamingDialogFragment newInstance() {        return new LoadingBeamingDialogFragment();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/LoadingBeamingDialogFragment.java", "stars": "4", "class": {"name": "LoadingBeamingDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        View v = LayoutInflater.from(new ContextThemeWrapper(getActivity(), R.style.Theme_Butter)).inflate(R.layout                .fragment_loading_detail, container, false);        ButterKnife.bind(this, v);        mTextView.setText(R.string.starting_beam);        return v;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/LoadingBeamingDialogFragment.java", "stars": "4", "class": {"name": "LoadingBeamingDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setStyle(STYLE_NO_FRAME, R.style.Theme_Dialog_Transparent);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/LoadingBeamingDialogFragment.java", "stars": "4", "class": {"name": "LoadingBeamingDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCancel", "params": ["DialogInterface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCancel(DialogInterface dialog) {        if (mOnCancelListener != null)            mOnCancelListener.onCancel(dialog);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/LoadingBeamingDialogFragment.java", "stars": "4", "class": {"name": "LoadingBeamingDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnCancelListener", "params": ["DialogInterface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnCancelListener(DialogInterface.OnCancelListener onCancelListener) {        mOnCancelListener = onCancelListener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/LoadingBeamingDialogFragment.java", "stars": "4", "class": {"name": "LoadingBeamingDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "support", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String support() {        return \"min-len\";    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/validator/MinLenValidator.java", "stars": "13", "class": {"name": "MinLenValidator", "extends": null, "implements": ["IValidator"], "modifiers": ["public"]}}, {"method_name": "validate", "params": ["Object", "Node"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean validate(Object input, Node node) {        if (input instanceof String) {            int len = NumberUtils.toInt(DomUtils.getNodeAttributeValue(node, \"value\"), 0);            return len <= 0 || input.toString().length() >= len;        }        return false;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/validator/MinLenValidator.java", "stars": "13", "class": {"name": "MinLenValidator", "extends": null, "implements": ["IValidator"], "modifiers": ["public"]}}, {"method_name": "save", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int save(T entity) {        try {            Long next = idGenerator.getNext(getEntityClass());            Field idField = getEntityClass().getDeclaredField(\"id\");            idField.setAccessible(true);            if (idField.getType().equals(Long.class)) {                idField.setLong(entity, next);            } else {                idField.setInt(entity, Integer.parseInt(next.toString()));            }            mongoTemplate.insert(entity);            return 1;        } catch (Exception e) {            return 0;        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/BaseMongoServiceImpl.java", "stars": "1", "class": {"name": "BaseMongoServiceImpl", "extends": null, "implements": ["BaseMongoService"], "modifiers": ["public"]}}, {"method_name": "update", "params": ["Query", "Update"], "throws": null, "modifiers": ["public"], "return_type": "UpdateResult", "snippet": "    public UpdateResult update(Query query, Update update) {        if (update == null) {            return null;        }        update.set(\"updateDate\", LocalDateTime.now());        return mongoTemplate.updateMulti(query, update, this.getEntityClass());    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/BaseMongoServiceImpl.java", "stars": "1", "class": {"name": "BaseMongoServiceImpl", "extends": null, "implements": ["BaseMongoService"], "modifiers": ["public"]}}, {"method_name": "remove", "params": ["Query"], "throws": null, "modifiers": ["public"], "return_type": "DeleteResult", "snippet": "    public DeleteResult remove(Query query) {        return mongoTemplate.remove(query, this.getEntityClass());    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/BaseMongoServiceImpl.java", "stars": "1", "class": {"name": "BaseMongoServiceImpl", "extends": null, "implements": ["BaseMongoService"], "modifiers": ["public"]}}, {"method_name": "findAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<T>", "snippet": "    public List<T> findAll() {        return mongoTemplate.findAll(this.getEntityClass());    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/BaseMongoServiceImpl.java", "stars": "1", "class": {"name": "BaseMongoServiceImpl", "extends": null, "implements": ["BaseMongoService"], "modifiers": ["public"]}}, {"method_name": "find", "params": ["Query"], "throws": null, "modifiers": ["public"], "return_type": "List<T>", "snippet": "    public List<T> find(Query query) {        return mongoTemplate.find(query, this.getEntityClass());    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/BaseMongoServiceImpl.java", "stars": "1", "class": {"name": "BaseMongoServiceImpl", "extends": null, "implements": ["BaseMongoService"], "modifiers": ["public"]}}, {"method_name": "findOne", "params": ["Query"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T findOne(Query query) {        return mongoTemplate.findOne(query, this.getEntityClass());    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/BaseMongoServiceImpl.java", "stars": "1", "class": {"name": "BaseMongoServiceImpl", "extends": null, "implements": ["BaseMongoService"], "modifiers": ["public"]}}, {"method_name": "count", "params": ["Query"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long count(Query query) {        return mongoTemplate.count(query, this.getEntityClass());    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/BaseMongoServiceImpl.java", "stars": "1", "class": {"name": "BaseMongoServiceImpl", "extends": null, "implements": ["BaseMongoService"], "modifiers": ["public"]}}, {"method_name": "getEntityClass", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Class<T>", "snippet": "    public Class<T> getEntityClass() {        return ReflectionUtils.getSuperClassGenricType(getClass());    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/BaseMongoServiceImpl.java", "stars": "1", "class": {"name": "BaseMongoServiceImpl", "extends": null, "implements": ["BaseMongoService"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        this.setContentView(R.layout.single_list_item_view);                 TextView txtProduct = (TextView) findViewById(R.id.product_label);                 Intent i = getIntent();        // getting attached intent data        String product = i.getStringExtra(\"product\");        // displaying selected product name        txtProduct.setText(product);             }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/AndroidListViewActivity/src/com/example/androidlistviewactivity/SingleListItem.java", "stars": "74", "class": {"name": "SingleListItem", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "spin", "params": ["MethodHandles", "Class<?>", "DynamicConstantDesc<?>"], "throws": null, "modifiers": ["public", "static"], "return_type": "MethodHandle", "snippet": "    public static MethodHandle spin(MethodHandles.Lookup lookup, Class<?> kType, DynamicConstantDesc<?> constantDesc) {        return spin(lookup, kType, toObjectWeb(constantDesc));    }", "url": "https://raw.githubusercontent.com/sstewartgallus/jsystemf/master/src/com/sstewartgallus/runtime/LdcStub.java", "stars": "5", "class": {"name": "LdcStub", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "toObjectWeb", "params": ["DynamicConstantDesc<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "ConstantDynamic", "snippet": "    private static ConstantDynamic toObjectWeb(DynamicConstantDesc<?> k) {        return new ConstantDynamic(k.constantName(), k.constantType().descriptorString(), toObjectWeb(k.bootstrapMethod()), k.bootstrapArgs());    }", "url": "https://raw.githubusercontent.com/sstewartgallus/jsystemf/master/src/com/sstewartgallus/runtime/LdcStub.java", "stars": "5", "class": {"name": "LdcStub", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "toObjectWeb", "params": ["DirectMethodHandleDesc"], "throws": null, "modifiers": ["private", "static"], "return_type": "Handle", "snippet": "    private static Handle toObjectWeb(DirectMethodHandleDesc k) {        return new Handle(k.refKind(), Type.getType(k.owner().descriptorString()).getInternalName(), k.methodName(), k.lookupDescriptor(), k.isOwnerInterface());    }", "url": "https://raw.githubusercontent.com/sstewartgallus/jsystemf/master/src/com/sstewartgallus/runtime/LdcStub.java", "stars": "5", "class": {"name": "LdcStub", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "spin", "params": ["MethodHandles", "Class<?>", "ConstantDynamic"], "throws": null, "modifiers": ["private", "static"], "return_type": "MethodHandle", "snippet": "    private static MethodHandle spin(MethodHandles.Lookup lookup, Class<?> kType, ConstantDynamic constantDesc) {        var myname = Type.getInternalName(LdcStub.class);        var newclassname = myname + \"Impl\";        // fixme... privatise as much as possible...        var cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);        cw.visit(V14, ACC_FINAL | ACC_PUBLIC, newclassname, null, null, null);        {            var mw = cw.visitMethod(ACC_PUBLIC, \"resolve\", methodType(kType).descriptorString(), null, null);            mw.visitCode();            mw.visitLdcInsn(constantDesc);            mw.visitInsn(ARETURN);            mw.visitMaxs(0, 0);            mw.visitEnd();        }        cw.visitEnd();        var bytes = cw.toByteArray();        var klass = AnonClassLoader.defineClass(lookup.lookupClass().getClassLoader(), bytes);        MethodHandle resolve;        try {            resolve = lookup().findStatic(klass, \"resolve\", methodType(kType));        } catch (NoSuchMethodException | IllegalAccessException e) {            throw new RuntimeException(e);        }        return resolve;    }", "url": "https://raw.githubusercontent.com/sstewartgallus/jsystemf/master/src/com/sstewartgallus/runtime/LdcStub.java", "stars": "5", "class": {"name": "LdcStub", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUp() throws Exception {    final AzkabanDataSource datasource = new AzDBTestUtility.EmbeddedH2BasicDataSource();    final DatabaseTransOperator operator = new DatabaseTransOperator(new QueryRunner(),        datasource.getConnection());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/test/java/azkaban/db/DatabaseTransOperatorTest.java", "stars": "18", "class": {"name": "DatabaseTransOperatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testQuery", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testQuery() throws Exception {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/test/java/azkaban/db/DatabaseTransOperatorTest.java", "stars": "18", "class": {"name": "DatabaseTransOperatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUpdate", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testUpdate() throws Exception {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/test/java/azkaban/db/DatabaseTransOperatorTest.java", "stars": "18", "class": {"name": "DatabaseTransOperatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAdminConfig", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "XxlJobAdminConfig", "snippet": "    public static XxlJobAdminConfig getAdminConfig() {        return adminConfig;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/conf/XxlJobAdminConfig.java", "stars": "1", "class": {"name": "XxlJobAdminConfig", "extends": null, "implements": ["InitializingBean", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "afterPropertiesSet", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterPropertiesSet() throws Exception {        adminConfig = this;        xxlJobScheduler = new XxlJobScheduler();        xxlJobScheduler.init();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/conf/XxlJobAdminConfig.java", "stars": "1", "class": {"name": "XxlJobAdminConfig", "extends": null, "implements": ["InitializingBean", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "destroy", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void destroy() throws Exception {        xxlJobScheduler.destroy();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/conf/XxlJobAdminConfig.java", "stars": "1", "class": {"name": "XxlJobAdminConfig", "extends": null, "implements": ["InitializingBean", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "getI18n", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getI18n() {        return i18n;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/conf/XxlJobAdminConfig.java", "stars": "1", "class": {"name": "XxlJobAdminConfig", "extends": null, "implements": ["InitializingBean", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "getAccessToken", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAccessToken() {        return accessToken;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/conf/XxlJobAdminConfig.java", "stars": "1", "class": {"name": "XxlJobAdminConfig", "extends": null, "implements": ["InitializingBean", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "getEmailUserName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEmailUserName() {        return emailUserName;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/conf/XxlJobAdminConfig.java", "stars": "1", "class": {"name": "XxlJobAdminConfig", "extends": null, "implements": ["InitializingBean", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "getTriggerPoolFastMax", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTriggerPoolFastMax() {        if (triggerPoolFastMax < 200) {            return 200;        }        return triggerPoolFastMax;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/conf/XxlJobAdminConfig.java", "stars": "1", "class": {"name": "XxlJobAdminConfig", "extends": null, "implements": ["InitializingBean", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "getTriggerPoolSlowMax", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTriggerPoolSlowMax() {        if (triggerPoolSlowMax < 100) {            return 100;        }        return triggerPoolSlowMax;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/conf/XxlJobAdminConfig.java", "stars": "1", "class": {"name": "XxlJobAdminConfig", "extends": null, "implements": ["InitializingBean", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "getLogretentiondays", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLogretentiondays() {        if (logretentiondays < 7) {            return -1;  // Limit greater than or equal to 7, otherwise close        }        return logretentiondays;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/conf/XxlJobAdminConfig.java", "stars": "1", "class": {"name": "XxlJobAdminConfig", "extends": null, "implements": ["InitializingBean", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "getXxlJobLogDao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "XxlJobLogDao", "snippet": "    public XxlJobLogDao getXxlJobLogDao() {        return xxlJobLogDao;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/conf/XxlJobAdminConfig.java", "stars": "1", "class": {"name": "XxlJobAdminConfig", "extends": null, "implements": ["InitializingBean", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "getXxlJobInfoDao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "XxlJobInfoService", "snippet": "    public XxlJobInfoService getXxlJobInfoDao() {        return xxlJobInfoDao;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/conf/XxlJobAdminConfig.java", "stars": "1", "class": {"name": "XxlJobAdminConfig", "extends": null, "implements": ["InitializingBean", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "getXxlJobRegistryDao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "XxlJobRegistryDao", "snippet": "    public XxlJobRegistryDao getXxlJobRegistryDao() {        return xxlJobRegistryDao;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/conf/XxlJobAdminConfig.java", "stars": "1", "class": {"name": "XxlJobAdminConfig", "extends": null, "implements": ["InitializingBean", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "getXxlJobGroupDao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "XxlJobGroupService", "snippet": "    public XxlJobGroupService getXxlJobGroupDao() {        return xxlJobGroupDao;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/conf/XxlJobAdminConfig.java", "stars": "1", "class": {"name": "XxlJobAdminConfig", "extends": null, "implements": ["InitializingBean", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "getXxlJobLogReportDao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "XxlJobLogReportDao", "snippet": "    public XxlJobLogReportDao getXxlJobLogReportDao() {        return xxlJobLogReportDao;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/conf/XxlJobAdminConfig.java", "stars": "1", "class": {"name": "XxlJobAdminConfig", "extends": null, "implements": ["InitializingBean", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "getMailSender", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JavaMailSender", "snippet": "    public JavaMailSender getMailSender() {        return mailSender;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/conf/XxlJobAdminConfig.java", "stars": "1", "class": {"name": "XxlJobAdminConfig", "extends": null, "implements": ["InitializingBean", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "process", "params": ["RequestEvent", "SipLayer", "ServerTransaction"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void process(RequestEvent evt, SipLayer layer, ServerTransaction transaction) {\t\t\t\tthis.layer = layer;\t\tthis.transaction = transaction;\t\t\t\tRequest request = evt.getRequest();\t\t\t\tif (new String(request.getRawContent()).contains(\"<CmdType>Keepalive</CmdType>\")) {\t\t\tlogger.info(\"\u63a5\u6536\u5230KeepAlive\u6d88\u606f\");\t\t\tprocessMessageKeepAlive(evt);\t\t} else if (new String(request.getRawContent()).contains(\"<CmdType>Catalog</CmdType>\")) {\t\t\tlogger.info(\"\u63a5\u6536\u5230Catalog\u6d88\u606f\");\t\t\tprocessMessageCatalogList(evt);\t\t} else if (new String(request.getRawContent()).contains(\"<CmdType>DeviceInfo</CmdType>\")) {\t\t\tlogger.info(\"\u63a5\u6536\u5230DeviceInfo\u6d88\u606f\");\t\t\tprocessMessageDeviceInfo(evt);\t\t} else if (new String(request.getRawContent()).contains(\"<CmdType>Alarm</CmdType>\")) {\t\t\tlogger.info(\"\u63a5\u6536\u5230Alarm\u6d88\u606f\");\t\t\tprocessMessageAlarm(evt);\t\t} else if (new String(request.getRawContent()).contains(\"<CmdType>RecordInfo</CmdType>\")) {\t\t\tlogger.info(\"\u63a5\u6536\u5230RecordInfo\u6d88\u606f\");\t\t\tprocessMessageRecordInfo(evt);\t\t}\t\t\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/request/impl/MessageRequestProcessor.java", "stars": "29", "class": {"name": "MessageRequestProcessor", "extends": null, "implements": ["ISIPRequestProcessor"], "modifiers": ["public"]}}, {"method_name": "processMessageDeviceInfo", "params": ["RequestEvent"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void processMessageDeviceInfo(RequestEvent evt) {\t\ttry {\t\t\tElement rootElement = getRootElement(evt);\t\t\tElement deviceIdElement = rootElement.element(\"DeviceID\");\t\t\tString deviceId = deviceIdElement.getText().toString();\t\t\t\t\t\tDevice device = storager.queryVideoDevice(deviceId);\t\t\tif (device == null) {\t\t\t\treturn;\t\t\t}\t\t\tdevice.setName(XmlUtil.getText(rootElement,\"DeviceName\"));\t\t\tdevice.setManufacturer(XmlUtil.getText(rootElement,\"Manufacturer\"));\t\t\tdevice.setModel(XmlUtil.getText(rootElement,\"Model\"));\t\t\tdevice.setFirmware(XmlUtil.getText(rootElement,\"Firmware\"));\t\t\tstorager.update(device);\t\t\t\t\t\tRequestMessage msg = new RequestMessage();\t\t\tmsg.setDeviceId(deviceId);\t\t\tmsg.setType(DeferredResultHolder.CALLBACK_CMD_DEVICEINFO);\t\t\tmsg.setData(device);\t\t\tdeferredResultHolder.invokeResult(msg);\t\t} catch (DocumentException e) {\t\t\te.printStackTrace();\t\t}\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/request/impl/MessageRequestProcessor.java", "stars": "29", "class": {"name": "MessageRequestProcessor", "extends": null, "implements": ["ISIPRequestProcessor"], "modifiers": ["public"]}}, {"method_name": "processMessageCatalogList", "params": ["RequestEvent"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void processMessageCatalogList(RequestEvent evt) {\t\ttry {\t\t\tElement rootElement = getRootElement(evt);\t\t\tElement deviceIdElement = rootElement.element(\"DeviceID\");\t\t\tString deviceId = deviceIdElement.getText().toString();\t\t\tElement deviceListElement = rootElement.element(\"DeviceList\");\t\t\tif (deviceListElement == null) {\t\t\t\treturn;\t\t\t}\t\t\tIterator<Element> deviceListIterator = deviceListElement.elementIterator();\t\t\tif (deviceListIterator != null) {\t\t\t\tDevice device = storager.queryVideoDevice(deviceId);\t\t\t\tif (device == null) {\t\t\t\t\treturn;\t\t\t\t}\t\t\t\tMap<String, DeviceChannel> channelMap = device.getChannelMap();\t\t\t\tif (channelMap == null) {\t\t\t\t\tchannelMap = new HashMap<String, DeviceChannel>(5);\t\t\t\t\tdevice.setChannelMap(channelMap);\t\t\t\t}\t\t\t\t// \u904d\u5386DeviceList\t\t\t\twhile (deviceListIterator.hasNext()) {\t\t\t\t\tElement itemDevice = deviceListIterator.next();\t\t\t\t\tElement channelDeviceElement = itemDevice.element(\"DeviceID\");\t\t\t\t\tif (channelDeviceElement == null) {\t\t\t\t\t\tcontinue;\t\t\t\t\t}\t\t\t\t\tString channelDeviceId = channelDeviceElement.getText().toString();\t\t\t\t\tElement channdelNameElement = itemDevice.element(\"Name\");\t\t\t\t\tString channelName = channdelNameElement != null ? channdelNameElement.getText().toString() : \"\";\t\t\t\t\tElement statusElement = itemDevice.element(\"Status\");\t\t\t\t\tString status = statusElement != null ? statusElement.getText().toString() : \"ON\";\t\t\t\t\tDeviceChannel deviceChannel = channelMap.containsKey(channelDeviceId) ? channelMap.get(channelDeviceId) : new DeviceChannel();\t\t\t\t\tdeviceChannel.setName(channelName);\t\t\t\t\tdeviceChannel.setChannelId(channelDeviceId);\t\t\t\t\tif(status.equals(\"ON\")) {\t\t\t\t\t\tdeviceChannel.setStatus(1);\t\t\t\t\t}\t\t\t\t\tif(status.equals(\"OFF\")) {\t\t\t\t\t\tdeviceChannel.setStatus(0);\t\t\t\t\t}\t\t\t\t\tdeviceChannel.setManufacture(XmlUtil.getText(itemDevice,\"Manufacturer\"));\t\t\t\t\tdeviceChannel.setModel(XmlUtil.getText(itemDevice,\"Model\"));\t\t\t\t\tdeviceChannel.setOwner(XmlUtil.getText(itemDevice,\"Owner\"));\t\t\t\t\tdeviceChannel.setCivilCode(XmlUtil.getText(itemDevice,\"CivilCode\"));\t\t\t\t\tdeviceChannel.setBlock(XmlUtil.getText(itemDevice,\"Block\"));\t\t\t\t\tdeviceChannel.setAddress(XmlUtil.getText(itemDevice,\"Address\"));\t\t\t\t\tdeviceChannel.setParental(itemDevice.element(\"Parental\") == null? 0:Integer.parseInt(XmlUtil.getText(itemDevice,\"Parental\")));\t\t\t\t\tdeviceChannel.setParentId(XmlUtil.getText(itemDevice,\"ParentId\"));\t\t\t\t\tdeviceChannel.setSafetyWay(itemDevice.element(\"SafetyWay\") == null? 0:Integer.parseInt(XmlUtil.getText(itemDevice,\"SafetyWay\")));\t\t\t\t\tdeviceChannel.setRegisterWay(itemDevice.element(\"RegisterWay\") == null? 1:Integer.parseInt(XmlUtil.getText(itemDevice,\"RegisterWay\")));\t\t\t\t\tdeviceChannel.setCertNum(XmlUtil.getText(itemDevice,\"CertNum\"));\t\t\t\t\tdeviceChannel.setCertifiable(itemDevice.element(\"Certifiable\") == null? 0:Integer.parseInt(XmlUtil.getText(itemDevice,\"Certifiable\")));\t\t\t\t\tdeviceChannel.setErrCode(itemDevice.element(\"ErrCode\") == null? 0:Integer.parseInt(XmlUtil.getText(itemDevice,\"ErrCode\")));\t\t\t\t\tdeviceChannel.setEndTime(XmlUtil.getText(itemDevice,\"EndTime\"));\t\t\t\t\tdeviceChannel.setSecrecy(XmlUtil.getText(itemDevice,\"Secrecy\"));\t\t\t\t\tdeviceChannel.setIpAddress(XmlUtil.getText(itemDevice,\"IPAddress\"));\t\t\t\t\tdeviceChannel.setPort(itemDevice.element(\"Port\") == null? 0:Integer.parseInt(XmlUtil.getText(itemDevice,\"Port\")));\t\t\t\t\tdeviceChannel.setPassword(XmlUtil.getText(itemDevice,\"Password\"));\t\t\t\t\tdeviceChannel.setLongitude(itemDevice.element(\"Longitude\") == null? 0.00:Double.parseDouble(XmlUtil.getText(itemDevice,\"Longitude\")));\t\t\t\t\tdeviceChannel.setLatitude(itemDevice.element(\"Latitude\") == null? 0.00:Double.parseDouble(XmlUtil.getText(itemDevice,\"Latitude\")));\t\t\t\t\tchannelMap.put(channelDeviceId, deviceChannel);\t\t\t\t}\t\t\t\t// \u66f4\u65b0\t\t\t\tstorager.update(device);\t\t\t\tRequestMessage msg = new RequestMessage();\t\t\t\tmsg.setDeviceId(deviceId);\t\t\t\tmsg.setType(DeferredResultHolder.CALLBACK_CMD_CATALOG);\t\t\t\tmsg.setData(device);\t\t\t\tdeferredResultHolder.invokeResult(msg);\t\t\t}\t\t} catch (DocumentException e) {\t\t\te.printStackTrace();\t\t}\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/request/impl/MessageRequestProcessor.java", "stars": "29", "class": {"name": "MessageRequestProcessor", "extends": null, "implements": ["ISIPRequestProcessor"], "modifiers": ["public"]}}, {"method_name": "processMessageAlarm", "params": ["RequestEvent"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void processMessageAlarm(RequestEvent evt) {\t\ttry {\t\t\tElement rootElement = getRootElement(evt);\t\t\tElement deviceIdElement = rootElement.element(\"DeviceID\");\t\t\tString deviceId = deviceIdElement.getText().toString();\t\t\t\t\t\tDevice device = storager.queryVideoDevice(deviceId);\t\t\tif (device == null) {\t\t\t\treturn;\t\t\t}\t\t\tdevice.setName(XmlUtil.getText(rootElement,\"DeviceName\"));\t\t\tdevice.setManufacturer(XmlUtil.getText(rootElement,\"Manufacturer\"));\t\t\tdevice.setModel(XmlUtil.getText(rootElement,\"Model\"));\t\t\tdevice.setFirmware(XmlUtil.getText(rootElement,\"Firmware\"));\t\t\tstorager.update(device);\t\t\tcmder.catalogQuery(device);\t\t} catch (DocumentException e) {\t\t\te.printStackTrace();\t\t}\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/request/impl/MessageRequestProcessor.java", "stars": "29", "class": {"name": "MessageRequestProcessor", "extends": null, "implements": ["ISIPRequestProcessor"], "modifiers": ["public"]}}, {"method_name": "processMessageKeepAlive", "params": ["RequestEvent"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void processMessageKeepAlive(RequestEvent evt){\t\ttry {\t\t\tRequest request = evt.getRequest();\t\t\tResponse response = layer.getMessageFactory().createResponse(Response.OK,request);\t\t\tElement rootElement = getRootElement(evt);\t\t\tElement deviceIdElement = rootElement.element(\"DeviceID\");\t\t\ttransaction.sendResponse(response);\t\t\tpublisher.onlineEventPublish(deviceIdElement.getText(), VideoManagerConstants.EVENT_ONLINE_KEEPLIVE);\t\t} catch (ParseException | SipException | InvalidArgumentException | DocumentException e) {\t\t\te.printStackTrace();\t\t}\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/request/impl/MessageRequestProcessor.java", "stars": "29", "class": {"name": "MessageRequestProcessor", "extends": null, "implements": ["ISIPRequestProcessor"], "modifiers": ["public"]}}, {"method_name": "processMessageRecordInfo", "params": ["RequestEvent"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void processMessageRecordInfo(RequestEvent evt) {\t\ttry {\t\t\tRecordInfo recordInfo = new RecordInfo();\t\t\tElement rootElement = getRootElement(evt);\t\t\tElement deviceIdElement = rootElement.element(\"DeviceID\");\t\t\tString deviceId = deviceIdElement.getText().toString();\t\t\trecordInfo.setDeviceId(deviceId);\t\t\trecordInfo.setName(XmlUtil.getText(rootElement,\"Name\"));\t\t\trecordInfo.setSumNum(Integer.parseInt(XmlUtil.getText(rootElement,\"SumNum\")));\t\t\tString sn = XmlUtil.getText(rootElement,\"SN\");\t\t\tElement recordListElement = rootElement.element(\"RecordList\");\t\t\tif (recordListElement == null) {\t\t\t\treturn;\t\t\t}\t\t\t\t\t\tIterator<Element> recordListIterator = recordListElement.elementIterator();\t\t\tList<RecordItem> recordList = new ArrayList<RecordItem>();\t\t\tif (recordListIterator != null) {\t\t\t\tRecordItem record = new RecordItem();\t\t\t\t// \u904d\u5386DeviceList\t\t\t\twhile (recordListIterator.hasNext()) {\t\t\t\t\tElement itemRecord = recordListIterator.next();\t\t\t\t\tElement recordElement = itemRecord.element(\"DeviceID\");\t\t\t\t\tif (recordElement == null) {\t\t\t\t\t\tcontinue;\t\t\t\t\t}\t\t\t\t\trecord = new RecordItem();\t\t\t\t\trecord.setDeviceId(XmlUtil.getText(itemRecord,\"DeviceID\"));\t\t\t\t\trecord.setName(XmlUtil.getText(itemRecord,\"Name\"));\t\t\t\t\trecord.setFilePath(XmlUtil.getText(itemRecord,\"FilePath\"));\t\t\t\t\trecord.setAddress(XmlUtil.getText(itemRecord,\"Address\"));\t\t\t\t\trecord.setStartTime(DateUtil.ISO8601Toyyyy_MM_dd_HH_mm_ss(XmlUtil.getText(itemRecord,\"StartTime\")));\t\t\t\t\trecord.setEndTime(DateUtil.ISO8601Toyyyy_MM_dd_HH_mm_ss(XmlUtil.getText(itemRecord,\"EndTime\")));\t\t\t\t\trecord.setSecrecy(itemRecord.element(\"Secrecy\") == null? 0:Integer.parseInt(XmlUtil.getText(itemRecord,\"Secrecy\")));\t\t\t\t\trecord.setType(XmlUtil.getText(itemRecord,\"Type\"));\t\t\t\t\trecord.setRecordId(XmlUtil.getText(itemRecord,\"RecorderID\"));\t\t\t\t\trecordList.add(record);\t\t\t\t}\t\t\t\trecordInfo.setRecordList(recordList);\t\t\t}\t\t\t\t\t\t// \u5b58\u5728\u5f55\u50cf\u4e14\u5982\u679c\u5f53\u524d\u5f55\u50cf\u660e\u7ec6\u4e2a\u6570\u5c0f\u4e8e\u603b\u6761\u6570\uff0c\u8bf4\u660e\u62c6\u5305\u8fd4\u56de\uff0c\u9700\u8981\u7ec4\u88c5\uff0c\u6682\u4e0d\u8fd4\u56de\t\t\tif (recordInfo.getSumNum() > 0 && recordList.size() > 0 && recordList.size() < recordInfo.getSumNum()) {\t\t\t\t// \u4e3a\u9632\u6b62\u8fde\u7eed\u8bf7\u6c42\u8be5\u8bbe\u5907\u7684\u5f55\u50cf\u6570\u636e\uff0c\u8fd4\u56de\u6570\u636e\u9519\u4e71\uff0c\u7279\u589e\u52a0sn\u8fdb\u884c\u533a\u5206\t\t\t\tString cacheKey = CACHE_RECORDINFO_KEY+deviceId+sn;\t\t\t\t// TODO \u6682\u65f6\u76f4\u63a5\u64cd\u4f5credis\u5b58\u50a8\uff0c\u540e\u7eed\u5c01\u88c5\u4e13\u7528\u7f13\u5b58\u63a5\u53e3\uff0c\u6539\u4e3a\u672c\u5730\u5185\u5b58\u7f13\u5b58\t\t\t\tif (redis.hasKey(cacheKey)) {\t\t\t\t\tList<RecordItem> previousList = (List<RecordItem>) redis.get(cacheKey);\t\t\t\t\tif (previousList != null && previousList.size() > 0) {\t\t\t\t\t\trecordList.addAll(previousList);\t\t\t\t\t}\t\t\t\t\t// \u672c\u5206\u652f\u8868\u793a\u5f55\u50cf\u5217\u8868\u88ab\u62c6\u5305\uff0c\u4e14\u52a0\u4e0a\u4e4b\u524d\u7684\u6570\u636e\u8fd8\u662f\u4e0d\u591f,\u4fdd\u5b58\u7f13\u5b58\u8fd4\u56de\uff0c\u7b49\u5f85\u4e0b\u4e2a\u5305\u518d\u5904\u7406\t\t\t\t\tif (recordList.size() < recordInfo.getSumNum()) {\t\t\t\t\t\tredis.set(cacheKey, recordList, 180);\t\t\t\t\t\treturn;\t\t\t\t\t} else {\t\t\t\t\t\t// \u672c\u5206\u652f\u8868\u793a\u5f55\u50cf\u88ab\u62c6\u5305\uff0c\u4f46\u52a0\u4e0a\u4e4b\u524d\u7684\u6570\u636e\u591f\u8db3\u591f\uff0c\u8fd4\u56de\u54cd\u5e94\t\t\t\t\t\t// \u56e0\u8bbe\u5907\u5fc3\u8df3\u6709\u76d1\u542credis\u8fc7\u671f\u673a\u5236\uff0c\u4e3a\u63d0\u9ad8\u6027\u80fd\uff0c\u6b64\u5904\u624b\u52a8\u5220\u9664\t\t\t\t\t\tredis.del(cacheKey);\t\t\t\t\t}\t\t\t\t} else {\t\t\t\t\t// \u672c\u5206\u652f\u6709\u4e24\u79cd\u53ef\u80fd\uff1a1\u3001\u5f55\u50cf\u5217\u8868\u88ab\u62c6\u5305\uff0c\u4e14\u662f\u7b2c\u4e00\u4e2a\u5305,\u76f4\u63a5\u4fdd\u5b58\u7f13\u5b58\u8fd4\u56de\uff0c\u7b49\u5f85\u4e0b\u4e2a\u5305\u518d\u5904\u7406\t\t\t\t\t//             2\u3001\u4e4b\u524d\u6709\u5305\uff0c\u4f46\u8d85\u65f6\u6e05\u7a7a\u4e86\uff0c\u90a3\u4e48\u8fd9\u6b21sn\u6279\u6b21\u7684\u54cd\u5e94\u6570\u636e\u5df2\u7ecf\u4e0d\u5b8c\u6574\uff0c\u7b49\u5f85\u8fc7\u671f\u65f6\u95f4\u540eredis\u81ea\u52a8\u6e05\u7a7a\u6570\u636e\t\t\t\t\tredis.set(cacheKey, recordList, 180);\t\t\t\t\treturn;\t\t\t\t}\t\t\t\t\t\t\t}\t\t\t// \u8d70\u5230\u8fd9\u91cc\uff0c\u6709\u4ee5\u4e0b\u53ef\u80fd\uff1a1\u3001\u6ca1\u6709\u5f55\u50cf\u4fe1\u606f,\u7b2c\u4e00\u6b21\u6536\u5230recordinfo\u7684\u6d88\u606f\u5373\u8fd4\u56de\u54cd\u5e94\u6570\u636e\uff0c\u65e0redis\u64cd\u4f5c\t\t\t//               2\u3001\u6709\u5f55\u50cf\u6570\u636e\uff0c\u4e14\u7b2c\u4e00\u6b21\u5373\u6536\u5230\u5b8c\u6574\u6570\u636e\uff0c\u8fd4\u56de\u54cd\u5e94\u6570\u636e\uff0c\u65e0redis\u64cd\u4f5c\t\t\t//\t             3\u3001\u6709\u5f55\u50cf\u6570\u636e\uff0c\u5728\u8d85\u65f6\u65f6\u95f4\u5185\u6536\u5230\u591a\u6b21\u5305\u7ec4\u88c5\u540e\u6570\u91cf\u8db3\u591f\uff0c\u8fd4\u56de\u6570\u636e\t\t\tRequestMessage msg = new RequestMessage();\t\t\tmsg.setDeviceId(deviceId);\t\t\tmsg.setType(DeferredResultHolder.CALLBACK_CMD_RECORDINFO);\t\t\tmsg.setData(recordInfo);\t\t\tdeferredResultHolder.invokeResult(msg);\t\t} catch (DocumentException e) {\t\t\te.printStackTrace();\t\t}\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/request/impl/MessageRequestProcessor.java", "stars": "29", "class": {"name": "MessageRequestProcessor", "extends": null, "implements": ["ISIPRequestProcessor"], "modifiers": ["public"]}}, {"method_name": "getRootElement", "params": ["RequestEvent"], "throws": ["DocumentException"], "modifiers": ["private"], "return_type": "Element", "snippet": "\tprivate Element getRootElement(RequestEvent evt) throws DocumentException {\t\tRequest request = evt.getRequest();\t\tSAXReader reader = new SAXReader();\t\treader.setEncoding(\"GB2312\");\t\tDocument xml = reader.read(new ByteArrayInputStream(request.getRawContent()));\t\treturn xml.getRootElement();\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/request/impl/MessageRequestProcessor.java", "stars": "29", "class": {"name": "MessageRequestProcessor", "extends": null, "implements": ["ISIPRequestProcessor"], "modifiers": ["public"]}}, {"method_name": "useAppContext", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void useAppContext() {        // Context of the app under test.        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();        assertEquals(\"com.example.beautyoverview\", appContext.getPackageName());    }", "url": "https://raw.githubusercontent.com/dahilu/BeautyOverview/master/app/src/androidTest/java/com/example/beautyoverview/ExampleInstrumentedTest.java", "stars": "1", "class": {"name": "ExampleInstrumentedTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "id", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "EmployeeBuilder", "snippet": "    public EmployeeBuilder id(int id) {        this.id = id;        return this;    }", "url": "https://raw.githubusercontent.com/HouariZegai/JavaTutorials/master/JDBCWorkshop/src/main/java/com/houarizegai/jdbcworkshop/model/EmployeeBuilder.java", "stars": "6", "class": {"name": "EmployeeBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "name", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "EmployeeBuilder", "snippet": "    public EmployeeBuilder name(String name) {        this.name = name;        return this;    }", "url": "https://raw.githubusercontent.com/HouariZegai/JavaTutorials/master/JDBCWorkshop/src/main/java/com/houarizegai/jdbcworkshop/model/EmployeeBuilder.java", "stars": "6", "class": {"name": "EmployeeBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gender", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "EmployeeBuilder", "snippet": "    public EmployeeBuilder gender(boolean gender) {        this.gender = gender;        return this;    }", "url": "https://raw.githubusercontent.com/HouariZegai/JavaTutorials/master/JDBCWorkshop/src/main/java/com/houarizegai/jdbcworkshop/model/EmployeeBuilder.java", "stars": "6", "class": {"name": "EmployeeBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "salary", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "EmployeeBuilder", "snippet": "    public EmployeeBuilder salary(double salary) {        this.salary = salary;        return this;    }", "url": "https://raw.githubusercontent.com/HouariZegai/JavaTutorials/master/JDBCWorkshop/src/main/java/com/houarizegai/jdbcworkshop/model/EmployeeBuilder.java", "stars": "6", "class": {"name": "EmployeeBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Employee", "snippet": "    public Employee build() {        return new Employee(id, name, gender, salary);    }", "url": "https://raw.githubusercontent.com/HouariZegai/JavaTutorials/master/JDBCWorkshop/src/main/java/com/houarizegai/jdbcworkshop/model/EmployeeBuilder.java", "stars": "6", "class": {"name": "EmployeeBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleSessionApplication.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-session/src/main/java/smoketest/session/SampleSessionApplication.java", "stars": "47572", "class": {"name": "SampleSessionApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "CallRepository", "snippet": "    public static CallRepository getInstance() {        return SingletonHolder.sInstance;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/repository/CallRepository.java", "stars": "1", "class": {"name": "CallRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkCallPluginVersion", "params": ["UpdatePackageRequest", "ApiObserver<UpdatePackageResult>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void checkCallPluginVersion(UpdatePackageRequest request, ApiObserver<UpdatePackageResult> apiObserver){        CallService callService = ApiClient.getInstance().createApi(CallService.class);        callService.checkCallPluginVersion(request).map(bridge -> {            if (bridge == null) {                throw new ApiException(ApiException.CODE_FAILED, \"Fetch data failure!\");            } else if (bridge.getCode() != 1) {                throw new ApiException(bridge.getCode(), bridge.getMsg());            }            return bridge;        }).compose(RxSchedulers.apply()).subscribe(apiObserver);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/repository/CallRepository.java", "stars": "1", "class": {"name": "CallRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createChannel", "params": ["CreateChannelRequest", "ApiObserver<CreateChannelResult>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void createChannel(CreateChannelRequest request, ApiObserver<CreateChannelResult> apiObserver){        CallService callService = ApiClient.getInstance().createApi(CallService.class);        callService.createChannel(request).map(bridge -> {            if (bridge == null) {                throw new ApiException(ApiException.CODE_FAILED, \"Fetch data failure!\");            } else if (bridge.getCode() != 1) {                throw new ApiException(bridge.getCode(), bridge.getMsg());            }            return bridge;        }).compose(RxSchedulers.apply()).subscribe(apiObserver);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/repository/CallRepository.java", "stars": "1", "class": {"name": "CallRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "joinChannel", "params": ["JoinChannelRequest", "ApiObserver<JoinChannelResult>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void joinChannel(JoinChannelRequest request, ApiObserver<JoinChannelResult> apiObserver){        CallService callService = ApiClient.getInstance().createApi(CallService.class);        callService.joinChannel(request).map(bridge -> {            if (bridge == null) {                throw new ApiException(ApiException.CODE_FAILED, \"Fetch data failure!\");            } else if (bridge.getCode() != 1) {                throw new ApiException(bridge.getCode(), bridge.getMsg());            }            return bridge;        }).compose(RxSchedulers.apply()).subscribe(apiObserver);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/repository/CallRepository.java", "stars": "1", "class": {"name": "CallRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "heartbeat", "params": ["HeartBeatRequest", "ApiObserver<HeartBeatResult>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void heartbeat(HeartBeatRequest request, ApiObserver<HeartBeatResult> apiObserver){        CallService callService = ApiClient.getInstance().createApi(CallService.class);        callService.heartbeat(request).map(bridge -> {            if (bridge == null) {                throw new ApiException(ApiException.CODE_FAILED, \"Fetch data failure!\");            } else if (bridge.getCode() != 1) {                throw new ApiException(bridge.getCode(), bridge.getMsg());            }            return bridge;        }).compose(RxSchedulers.apply()).subscribe(apiObserver);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/repository/CallRepository.java", "stars": "1", "class": {"name": "CallRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "heartbeatV2", "params": ["HeartBeatRequest", "ApiObserver<HeartBeatResult2>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void heartbeatV2(HeartBeatRequest request, ApiObserver<HeartBeatResult2> apiObserver){        CallService callService = ApiClient.getInstance().createApi(CallService.class);        callService.heartbeatV2(request).map(bridge -> {            if (bridge == null) {                throw new ApiException(ApiException.CODE_FAILED, \"Fetch data failure!\");            } else if (bridge.getCode() != 1) {                throw new ApiException(bridge.getCode(), bridge.getMsg());            }            return bridge;        }).compose(RxSchedulers.apply()).subscribe(apiObserver);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/repository/CallRepository.java", "stars": "1", "class": {"name": "CallRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "leaveChannel", "params": ["LeaveChannelRequest", "ApiObserver<BaseResult>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void leaveChannel(LeaveChannelRequest request, ApiObserver<BaseResult> apiObserver){        CallService callService = ApiClient.getInstance().createApi(CallService.class);        callService.leaveChannel(request).map(bridge -> {            if (bridge == null) {                throw new ApiException(ApiException.CODE_FAILED, \"Fetch data failure!\");            } else if (bridge.getCode() != 1) {                throw new ApiException(bridge.getCode(), bridge.getMsg());            }            return bridge;        }).compose(RxSchedulers.apply()).subscribe(apiObserver);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/repository/CallRepository.java", "stars": "1", "class": {"name": "CallRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "refuse", "params": ["RefuseRequest", "ApiObserver<BaseResult>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void refuse(RefuseRequest request, ApiObserver<BaseResult> apiObserver){        CallService callService = ApiClient.getInstance().createApi(CallService.class);        callService.refuse(request).map(bridge -> {            if (bridge == null) {                throw new ApiException(ApiException.CODE_FAILED, \"Fetch data failure!\");            } else if (bridge.getCode() != 1) {                throw new ApiException(bridge.getCode(), bridge.getMsg());            }            return bridge;        }).compose(RxSchedulers.apply()).subscribe(apiObserver);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/repository/CallRepository.java", "stars": "1", "class": {"name": "CallRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "giftList", "params": ["GiftListRequest", "ApiObserver<GiftListResult>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void giftList(GiftListRequest request, ApiObserver<GiftListResult> apiObserver){        CallService callService = ApiClient.getInstance().createApi(CallService.class);        callService.giftList(request).map(bridge -> {            if (bridge == null) {                throw new ApiException(ApiException.CODE_FAILED, \"Fetch data failure!\");            } else if (bridge.getCode() != 1) {                throw new ApiException(bridge.getCode(), bridge.getMsg());            }            return bridge;        }).compose(RxSchedulers.apply()).subscribe(apiObserver);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/repository/CallRepository.java", "stars": "1", "class": {"name": "CallRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "giftSend", "params": ["GiveGiftRequest", "ApiObserver<BaseResult>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void giftSend(GiveGiftRequest request, ApiObserver<BaseResult> apiObserver){        CallService callService = ApiClient.getInstance().createApi(CallService.class);        callService.giftSend(request).map(bridge -> {            if (bridge == null) {                throw new ApiException(ApiException.CODE_FAILED, \"Fetch data failure!\");            } else if (bridge.getCode() != 1) {                throw new ApiException(bridge.getCode(), bridge.getMsg());            }            return bridge;        }).compose(RxSchedulers.apply()).subscribe(apiObserver);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/repository/CallRepository.java", "stars": "1", "class": {"name": "CallRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendGiftMessage", "params": ["GiveGiftMsgRequest", "ApiObserver<BaseResult>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendGiftMessage(GiveGiftMsgRequest request, ApiObserver<BaseResult> apiObserver){        CallService callService = ApiClient.getInstance().createApi(CallService.class);        callService.sendMessageNewGift(request).map(bridge -> {            if (bridge == null) {                throw new ApiException(ApiException.CODE_FAILED, \"Fetch data failure!\");            } else if (bridge.getCode() != 1) {                throw new ApiException(bridge.getCode(), bridge.getMsg());            }            return bridge;        }).compose(RxSchedulers.apply()).subscribe(apiObserver);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/repository/CallRepository.java", "stars": "1", "class": {"name": "CallRepository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCode() {        return code;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/ModelBridge.java", "stars": "1", "class": {"name": "ModelBridge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCode(int code) {        this.code = code;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/ModelBridge.java", "stars": "1", "class": {"name": "ModelBridge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMsg() {        return msg;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/ModelBridge.java", "stars": "1", "class": {"name": "ModelBridge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMsg(String msg) {        this.msg = msg;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/ModelBridge.java", "stars": "1", "class": {"name": "ModelBridge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getData() {        return data;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/ModelBridge.java", "stars": "1", "class": {"name": "ModelBridge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setData", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(T data) {        this.data = data;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/ModelBridge.java", "stars": "1", "class": {"name": "ModelBridge", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tdouble x = 10000.0 / 3.0;\t\tSystem.out.printf(\"%8.2f\\n\", x);\t\tSystem.out.printf(\"%tc\", new Date(0));\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Shuchu.java", "stars": "2", "class": {"name": "Shuchu", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": ["Show"], "throws": null, "modifiers": ["public", "static"], "return_type": "ShowDetailFragment", "snippet": "    public static ShowDetailFragment newInstance(Show show) {        sShow = show;        return new ShowDetailFragment();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/ShowDetailFragment.java", "stars": "4", "class": {"name": "ShowDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/ShowDetailFragment.java", "stars": "4", "class": {"name": "ShowDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        mRoot = inflater.inflate(R.layout.fragment_showdetail, container, false);        ButterKnife.bind(this, mRoot);        if (VersionUtils.isJellyBean() && container != null) {            int minHeight = container.getMinimumHeight() + PixelUtils.getPixelsFromDp(mActivity, 48);            mRoot.setMinimumHeight(minHeight);            mViewPager.setMinimumHeight(minHeight);        }        if(sShow == null)            return mRoot;        mTabs.setTabMode(TabLayout.MODE_SCROLLABLE);        mTabs.setTabGravity(TabLayout.GRAVITY_CENTER);        mIsTablet = mCoverImage != null;        List<Fragment> fragments = new ArrayList<>();        if (mIsTablet) {            Double rating = Double.parseDouble(sShow.rating);            mTitle.setText(sShow.title);            mRating.setProgress(rating.intValue());            String metaDataStr = sShow.year;            if (sShow.status != null) {                metaDataStr += \" \u2022 \";                if (sShow.status == Show.Status.CONTINUING) {                    metaDataStr += getString(R.string.continuing);                } else {                    metaDataStr += getString(R.string.ended);                }            }            if (!TextUtils.isEmpty(sShow.genre)) {                metaDataStr += \" \u2022 \";                metaDataStr += sShow.genre;            }            mMeta.setText(metaDataStr);            if (!TextUtils.isEmpty(sShow.synopsis)) {                mSynopsis.setText(sShow.synopsis);                mSynopsis.post(new Runnable() {                    @Override                    public void run() {                        boolean ellipsized = false;                        Layout layout = mSynopsis.getLayout();                        if (layout == null) return;                        int lines = layout.getLineCount();                        if (lines > 0) {                            int ellipsisCount = layout.getEllipsisCount(lines - 1);                            if (ellipsisCount > 0) {                                ellipsized = true;                            }                        }                        mReadMore.setVisibility(ellipsized ? View.VISIBLE : View.GONE);                    }                });            } else {                mSynopsis.setClickable(false);                mReadMore.setVisibility(View.GONE);            }            Picasso.get().load(sShow.image).into(mCoverImage);            // Use reflection to set indicator color            try {                Field field = TabLayout.class.getDeclaredField(\"mTabStrip\");                field.setAccessible(true);                Object ob = field.get(mTabs);                Class<?> c = Class.forName(\"android.support.design.widget.TabLayout$SlidingTabStrip\");                Method method = c.getDeclaredMethod(\"setSelectedIndicatorColor\", int.class);                method.setAccessible(true);                method.invoke(ob, sShow.color);            } catch (NoSuchFieldException e) {                e.printStackTrace();            } catch (NoSuchMethodException e) {                e.printStackTrace();            } catch (InvocationTargetException e) {                e.printStackTrace();            } catch (IllegalAccessException e) {                e.printStackTrace();            } catch (ClassNotFoundException e) {                e.printStackTrace();            }        } else {            mBackground.post(new Runnable() {                @Override                public void run() {                    mBackground.getLayoutParams().height = mBackground.getLayoutParams().height - mTabs.getHeight();                }            });            fragments.add(ShowDetailAboutFragment.newInstance(sShow));        }        final ArrayList<Integer> availableSeasons = new ArrayList<>();        for (Episode episode : sShow.episodes) {            if (!availableSeasons.contains(episode.season)) {                availableSeasons.add(episode.season);            }        }        Collections.sort(availableSeasons);        boolean hasSpecial = availableSeasons.indexOf(0) > -1;        if (hasSpecial)            availableSeasons.remove(availableSeasons.indexOf(0));        for (int seasonInt : availableSeasons) {            fragments.add(ShowDetailSeasonFragment.newInstance(sShow, seasonInt));        }        if (hasSpecial)            fragments.add(ShowDetailSeasonFragment.newInstance(sShow, 0));        ShowDetailPagerAdapter fragmentPagerAdapter = new ShowDetailPagerAdapter(mActivity, getChildFragmentManager(), fragments);        mViewPager.setAdapter(fragmentPagerAdapter);        mTabs.setupWithViewPager(mViewPager);        mTabs.setOnTabSelectedListener(new TabLayout.ViewPagerOnTabSelectedListener(mViewPager));        mViewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(mTabs));        if(fragmentPagerAdapter.getCount() == 1) {            mTabs.setTabMode(TabLayout.MODE_FIXED);        }        mActivity.setSubScrollListener(mOnScrollListener);        return mRoot;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/ShowDetailFragment.java", "stars": "4", "class": {"name": "ShowDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetach", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDetach() {        super.onDetach();        mActivity.setSubScrollListener(null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/ShowDetailFragment.java", "stars": "4", "class": {"name": "ShowDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "openReadMore", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void openReadMore(View v) {        if (getFragmentManager().findFragmentByTag(\"overlay_fragment\") != null)            return;        SynopsisDialogFragment synopsisDialogFragment = new SynopsisDialogFragment();        Bundle b = new Bundle();        b.putString(\"text\", sShow.synopsis);        synopsisDialogFragment.setArguments(b);        synopsisDialogFragment.show(getFragmentManager(), \"overlay_fragment\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/ShowDetailFragment.java", "stars": "4", "class": {"name": "ShowDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "openDialog", "params": ["String", "String", "DialogInterface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void openDialog(String title, String[] items, DialogInterface.OnClickListener onClickListener) {        StringArraySelectorDialogFragment.show(mActivity.getSupportFragmentManager(), title, items, -1, onClickListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/ShowDetailFragment.java", "stars": "4", "class": {"name": "ShowDetailFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.items.add(() -> new ItemCustom());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/item/GlowstoneShardItem.java", "stars": "2", "class": {"name": "GlowstoneShardItem", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemEnchantability", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getItemEnchantability() {\t\t\treturn 0;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/item/GlowstoneShardItem.java", "stars": "2", "class": {"name": "ItemCustom", "extends": "Item", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getUseDuration", "params": ["ItemStack"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getUseDuration(ItemStack itemstack) {\t\t\treturn 0;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/item/GlowstoneShardItem.java", "stars": "2", "class": {"name": "ItemCustom", "extends": "Item", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDestroySpeed", "params": ["ItemStack", "BlockState"], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "\t\tpublic float getDestroySpeed(ItemStack par1ItemStack, BlockState par2Block) {\t\t\treturn 1F;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/item/GlowstoneShardItem.java", "stars": "2", "class": {"name": "ItemCustom", "extends": "Item", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onHostResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onHostResume() {        registerReceiver();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetInfoModule.java", "stars": "2", "class": {"name": "NetInfoModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onHostPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onHostPause() {        unregisterReceiver();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetInfoModule.java", "stars": "2", "class": {"name": "NetInfoModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onHostDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onHostDestroy() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetInfoModule.java", "stars": "2", "class": {"name": "NetInfoModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentConnectivity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCurrentConnectivity() {        if (mNoNetworkPermission) {            return ERROR_MISSING_PERMISSION;        }        return mConnectivity;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetInfoModule.java", "stars": "2", "class": {"name": "NetInfoModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isConnectionMetered", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnectionMetered() {        if (mNoNetworkPermission) {            return false;        }        return ConnectivityManagerCompat.isActiveNetworkMetered(mConnectivityManager);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetInfoModule.java", "stars": "2", "class": {"name": "NetInfoModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerReceiver", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void registerReceiver() {        IntentFilter filter = new IntentFilter();        filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);        mContext.registerReceiver(mConnectivityBroadcastReceiver, filter);        mConnectivityBroadcastReceiver.setRegistered(true);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetInfoModule.java", "stars": "2", "class": {"name": "NetInfoModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unregisterReceiver", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void unregisterReceiver() {        if (mConnectivityBroadcastReceiver.isRegistered()) {            mContext.unregisterReceiver(mConnectivityBroadcastReceiver);            mConnectivityBroadcastReceiver.setRegistered(false);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetInfoModule.java", "stars": "2", "class": {"name": "NetInfoModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateAndSendConnectionType", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateAndSendConnectionType() {        String currentConnectivity = getCurrentConnectionType();        // It is possible to get multiple broadcasts for the same connectivity change, so we only        // update and send an event when the connectivity has indeed changed.        if (!currentConnectivity.equalsIgnoreCase(mConnectivity)) {            mConnectivity = currentConnectivity;            sendConnectivityChangedEvent();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetInfoModule.java", "stars": "2", "class": {"name": "NetInfoModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentConnectionType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCurrentConnectionType() {        try {            NetworkInfo networkInfo = mConnectivityManager.getActiveNetworkInfo();            if (networkInfo == null || !networkInfo.isConnected()) {                return CONNECTION_TYPE_NONE;            } else if (ConnectivityManager.isNetworkTypeValid(networkInfo.getType())) {                return networkInfo.getTypeName().toUpperCase();            } else {                return CONNECTION_TYPE_UNKNOWN;            }        } catch (SecurityException e) {            mNoNetworkPermission = true;            return CONNECTION_TYPE_UNKNOWN;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetInfoModule.java", "stars": "2", "class": {"name": "NetInfoModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendConnectivityChangedEvent", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendConnectivityChangedEvent() {        if (mNetChangeListener != null) {            mNetChangeListener.changed(mConnectivity);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetInfoModule.java", "stars": "2", "class": {"name": "NetInfoModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRegistered", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setRegistered(boolean registered) {            isRegistered = registered;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetInfoModule.java", "stars": "2", "class": {"name": "ConnectivityBroadcastReceiver", "extends": "BroadcastReceiver", "implements": null, "modifiers": ["private"]}}, {"method_name": "isRegistered", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isRegistered() {            return isRegistered;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetInfoModule.java", "stars": "2", "class": {"name": "ConnectivityBroadcastReceiver", "extends": "BroadcastReceiver", "implements": null, "modifiers": ["private"]}}, {"method_name": "onReceive", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onReceive(Context context, Intent intent) {            if (intent.getAction().equals(ConnectivityManager.CONNECTIVITY_ACTION)) {                updateAndSendConnectionType();            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetInfoModule.java", "stars": "2", "class": {"name": "ConnectivityBroadcastReceiver", "extends": "BroadcastReceiver", "implements": null, "modifiers": ["private"]}}, {"method_name": "get", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ConcurrentHashMap<Integer,Pair>", "snippet": "  public ConcurrentHashMap<Integer, Pair<ExecutionReference, ExecutableFlow>> get() {    return this.runningExecutions;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/RunningExecutions.java", "stars": "18", "class": {"name": "RunningExecutions", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "provideCache", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "Cache", "snippet": "    public Cache provideCache(Context context) {        int cacheSize = 10 * 1024 * 1024;        File cacheLocation = new File(                PrefUtils.get(context, Prefs.STORAGE_LOCATION, StorageUtils.getIdealCacheDirectory(context)                        .toString()));        cacheLocation.mkdirs();        return new Cache(cacheLocation, cacheSize);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/data/DataModule.java", "stars": "4", "class": {"name": "DataModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "provideOkHttpClient", "params": ["Cache"], "throws": null, "modifiers": ["public"], "return_type": "OkHttpClient", "snippet": "    public OkHttpClient provideOkHttpClient(Cache cache) {        return new Builder()                .connectTimeout(30, TimeUnit.SECONDS)                .readTimeout(60, TimeUnit.SECONDS)                .retryOnConnectionFailure(true)                .cache(cache)                .build();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/data/DataModule.java", "stars": "4", "class": {"name": "DataModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "providePicasso", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "Picasso", "snippet": "    public Picasso providePicasso(Context context) {        return new Picasso.Builder(context).build();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/data/DataModule.java", "stars": "4", "class": {"name": "DataModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "provideObjectMapper", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ObjectMapper", "snippet": "    public ObjectMapper provideObjectMapper() {        return new ObjectMapper();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/data/DataModule.java", "stars": "4", "class": {"name": "DataModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "demo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String demo() {        return \"demo\";    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/controller/FaceController.java", "stars": "2", "class": {"name": "FaceController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "faceSearchByImage", "params": ["MultipartFile"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "Result<FaceSearchResDto>", "snippet": "    public Result<FaceSearchResDto> faceSearchByImage(MultipartFile file) throws Exception {        File tmp = File.createTempFile(\"tmp.jpg\", null);        file.transferTo(tmp);        FileInputStream inputFile = new FileInputStream(tmp);        byte[] buffer = new byte[inputFile.available()];        inputFile.read(buffer);        inputFile.close();        return faceSearch(Base64.encodeBase64String(buffer));    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/controller/FaceController.java", "stars": "2", "class": {"name": "FaceController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "faceSearch", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "Result<FaceSearchResDto>", "snippet": "    public Result<FaceSearchResDto> faceSearch(@RequestBody String base64File) throws Exception {        InputStream inputStream = new ByteArrayInputStream(Base64.decodeBase64(base64File));        BufferedImage bufImage = ImageIO.read(inputStream);        if (null == bufImage) return Results.newFailedResult(ErrorCodeEnum.NO_FACE_DETECTED);        ImageInfo imageInfo = ImageUtil.bufferedImage2ImageInfo(bufImage);        inputStream.close();        //\u4eba\u8138\u7279\u5f81\u83b7\u53d6        byte[] bytes = faceEngineService.extractFaceFeature(imageInfo);        if (bytes == null) {            return Results.newFailedResult(ErrorCodeEnum.NO_FACE_DETECTED);        }        //\u4eba\u8138\u6bd4\u5bf9\uff0c\u83b7\u53d6\u6bd4\u5bf9\u7ed3\u679c        List<FaceUserInfo> userFaceInfoList = faceEngineService.compareFaceFeature(bytes, 1);        if (CollectionUtil.isNotEmpty(userFaceInfoList)) {            FaceUserInfo faceUserInfo = userFaceInfoList.get(0);            FaceSearchResDto faceSearchResDto = new FaceSearchResDto();            BeanUtil.copyProperties(faceUserInfo, faceSearchResDto);            List<ProcessInfo> processInfoList = faceEngineService.process(imageInfo);            if (CollectionUtil.isNotEmpty(processInfoList)) {                //\u4eba\u8138\u68c0\u6d4b                List<FaceInfo> faceInfoList = faceEngineService.detectFaces(imageInfo);                int left = faceInfoList.get(0).getRect().getLeft();                int top = faceInfoList.get(0).getRect().getTop();                int width = faceInfoList.get(0).getRect().getRight() - left;                int height = faceInfoList.get(0).getRect().getBottom() - top;                Graphics2D graphics2D = bufImage.createGraphics();                graphics2D.setColor(Color.RED);//\u7ea2\u8272                BasicStroke stroke = new BasicStroke(5f);                graphics2D.setStroke(stroke);                graphics2D.drawRect(left, top, width, height);                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();                ImageIO.write(bufImage, \"jpg\", outputStream);                byte[] bytes1 = outputStream.toByteArray();                faceSearchResDto.setImage(\"data:image/jpeg;base64,\" + Base64Utils.encodeToString(bytes1));                faceSearchResDto.setAge(processInfoList.get(0).getAge());                faceSearchResDto.setGender(processInfoList.get(0).getGender().equals(1) ? \"\u5973\" : \"\u7537\");            }            Result<FaceSearchResDto> resDtoResult = Results.newSuccessResult(faceSearchResDto);            logger.info(resDtoResult.toString());            return resDtoResult;        }        logger.info(\"unknown people\");        base64ToFile(faceFilePath + \"/other\", base64File, System.currentTimeMillis() + \".jpg\");//        return Results.newFailedResult(ErrorCodeEnum.FACE_DOES_NOT_MATCH);        return Results.newSuccessResult(FaceSearchResDto.builder().name(\"\u5ba2\u4eba\").build());    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/controller/FaceController.java", "stars": "2", "class": {"name": "FaceController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "detectFaces", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "List<FaceInfo>", "snippet": "    public List<FaceInfo> detectFaces(String image) throws IOException {        byte[] bytes = Base64Utils.decodeFromString(image.trim());        InputStream inputStream = new ByteArrayInputStream(bytes);        ImageInfo imageInfo = ImageUtil.getRGBData(inputStream);        inputStream.close();        return faceEngineService.detectFaces(imageInfo);    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/controller/FaceController.java", "stars": "2", "class": {"name": "FaceController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "refresh", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void refresh() {        faceEngineService.loadFace();    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/controller/FaceController.java", "stars": "2", "class": {"name": "FaceController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "base64ToFile", "params": ["String", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void base64ToFile(String destPath, String base64, String fileName) {        File file = null;        //\u521b\u5efa\u6587\u4ef6\u76ee\u5f55        String filePath = destPath;        File dir = new File(filePath);        if (!dir.exists() && !dir.isDirectory()) {            dir.mkdirs();        }        BufferedOutputStream bos = null;        java.io.FileOutputStream fos = null;        try {//            byte[] bytes = Base64.getDecoder().decode(base64);            byte[] bytes = Base64.decodeBase64(base64);            file = new File(filePath + \"/\" + fileName);            fos = new java.io.FileOutputStream(file);            bos = new BufferedOutputStream(fos);            bos.write(bytes);        } catch (Exception e) {            e.printStackTrace();        } finally {            if (bos != null) {                try {                    bos.close();                } catch (IOException e) {                    e.printStackTrace();                }            }            if (fos != null) {                try {                    fos.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/controller/FaceController.java", "stars": "2", "class": {"name": "FaceController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onSecurityMachineEvent", "params": ["SecurityMachineEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSecurityMachineEvent(SecurityMachineEvent event) {        event.getConnection().processComposer(new SecurityMachineComposer(event.getParser().getMachineId()));    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/listeners/SecurityMessagesListener.java", "stars": "2", "class": {"name": "SecurityMessagesListener", "extends": null, "implements": ["IMessageListener"], "modifiers": ["public"]}}, {"method_name": "onSecurityTicketEvent", "params": ["SecurityTicketEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSecurityTicketEvent(SecurityTicketEvent event) {        event.getConnection().processComposer(new SecurityAuthenticatedComposer());    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/listeners/SecurityMessagesListener.java", "stars": "2", "class": {"name": "SecurityMessagesListener", "extends": null, "implements": ["IMessageListener"], "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/AcaciaTanbarkBlock.java", "stars": "2", "class": {"name": "AcaciaTanbarkBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/AcaciaTanbarkBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "FallingBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    Configuration configuration = new Configuration();    Environment environment = new Environment(\"development\", new JdbcTransactionFactory(),      new UnpooledDataSource(\"org.hsqldb.jdbcDriver\", \"jdbc:hsqldb:mem:HsqldbSQLTest\", \"sa\", \"\"));    configuration.setEnvironment(environment);    configuration.setUseGeneratedKeys(true);    configuration.addMapper(Mapper.class);    Properties properties = new Properties();    properties.setProperty(\"schema\", \"\");    configuration.setVariables(properties);    sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),      \"org/apache/ibatis/submitted/sql/CreateDB-hsqldb.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sql/HsqldbSQLTest.java", "stars": "15", "class": {"name": "HsqldbSQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testFetchFirst", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testFetchFirst() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      {        List<User> users = mapper.findAll(0, 2);        assertEquals(2, users.size());        assertEquals(\"Jimmy\", users.get(0).getName());        assertEquals(\"Iwao\", users.get(1).getName());      }      {        List<User> users = mapper.findAll(1, 2);        assertEquals(2, users.size());        assertEquals(\"Iwao\", users.get(0).getName());        assertEquals(\"Kazuki\", users.get(1).getName());      }      {        List<User> users = mapper.findAll(2, 2);        assertEquals(1, users.size());        assertEquals(\"Kazuki\", users.get(0).getName());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sql/HsqldbSQLTest.java", "stars": "15", "class": {"name": "HsqldbSQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "furnaceFuelBurnTimeEvent", "params": ["FurnaceFuelBurnTimeEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void furnaceFuelBurnTimeEvent(FurnaceFuelBurnTimeEvent event) {\t\tif (event.getItemStack().getItem() == new ItemStack(AcaciaTanbarkBlock.block, (int) (1)).getItem())\t\t\tevent.setBurnTime(1600);\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/fuel/AcaciaFuel.java", "stars": "2", "class": {"name": "AcaciaFuel", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["Context", "StarDriverResult"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initialize(Context context, StarDriverResult result) {        try {            // simulation initialization code            Thread.sleep(23);        } catch (InterruptedException e) {            result.success = false;            result.errorMessage = e.toString();            return;        }        result.success = true;    }", "url": "https://raw.githubusercontent.com/succlz123/StarDriver-APT/master/app/src/main/java/org/succlz123/stardriver/app/task/AppInitLogger.java", "stars": "4", "class": {"name": "AppInitLogger", "extends": "IStarDriver", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTriggerManager", "params": ["TriggerManager"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void setTriggerManager(final TriggerManager trm) {    triggerManager = trm;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/CreateTriggerAction.java", "stars": "18", "class": {"name": "CreateTriggerAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "createFromJson", "params": ["Object"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "CreateTriggerAction", "snippet": "  public static CreateTriggerAction createFromJson(final Object obj) throws Exception {    final Map<String, Object> jsonObj = (HashMap<String, Object>) obj;    if (!jsonObj.get(\"type\").equals(type)) {      throw new Exception(\"Cannot create action of \" + type + \" from \"          + jsonObj.get(\"type\"));    }    final String actionId = (String) jsonObj.get(\"actionId\");    final Trigger trigger = Trigger.fromJson(jsonObj.get(\"trigger\"));    return new CreateTriggerAction(actionId, trigger);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/CreateTriggerAction.java", "stars": "18", "class": {"name": "CreateTriggerAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getType() {    return type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/CreateTriggerAction.java", "stars": "18", "class": {"name": "CreateTriggerAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "fromJson", "params": ["Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "CreateTriggerAction", "snippet": "  public CreateTriggerAction fromJson(final Object obj) throws Exception {    return createFromJson(obj);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/CreateTriggerAction.java", "stars": "18", "class": {"name": "CreateTriggerAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "toJson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object toJson() {    final Map<String, Object> jsonObj = new HashMap<>();    jsonObj.put(\"actionId\", this.actionId);    jsonObj.put(\"type\", type);    jsonObj.put(\"trigger\", this.trigger.toJson());    return jsonObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/CreateTriggerAction.java", "stars": "18", "class": {"name": "CreateTriggerAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "doAction", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void doAction() throws Exception {    triggerManager.insertTrigger(this.trigger);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/CreateTriggerAction.java", "stars": "18", "class": {"name": "CreateTriggerAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getDescription() {    return \"create another: \" + this.trigger.getDescription();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/CreateTriggerAction.java", "stars": "18", "class": {"name": "CreateTriggerAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return this.actionId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/CreateTriggerAction.java", "stars": "18", "class": {"name": "CreateTriggerAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "setContext", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setContext(final Map<String, Object> context) {    this.context = context;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/CreateTriggerAction.java", "stars": "18", "class": {"name": "CreateTriggerAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "getJobLevelSLAOptions", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<SlaOption>", "snippet": "  public static List<SlaOption> getJobLevelSLAOptions(final ExecutableFlow flow) {    final Set<String> jobLevelSLAs = new HashSet<>(        Arrays.asList(SlaOption.TYPE_JOB_FINISH, SlaOption.TYPE_JOB_SUCCEED));    return flow.getSlaOptions().stream()        .filter(slaOption -> jobLevelSLAs.contains(slaOption.getType()))        .collect(Collectors.toList());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowLevelSLAOptions", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<SlaOption>", "snippet": "  public static List<SlaOption> getFlowLevelSLAOptions(final ExecutableFlow flow) {    final Set<String> flowLevelSLAs = new HashSet<>(        Arrays.asList(SlaOption.TYPE_FLOW_FINISH, SlaOption.TYPE_FLOW_SUCCEED));    return flow.getSlaOptions().stream()        .filter(slaOption -> flowLevelSLAs.contains(slaOption.getType()))        .collect(Collectors.toList());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fromObject", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "SlaOption", "snippet": "  public static SlaOption fromObject(final Object object) {    final HashMap<String, Object> slaObj = (HashMap<String, Object>) object;    final String type = (String) slaObj.get(\"type\");    final List<String> actions = (List<String>) slaObj.get(\"actions\");    final Map<String, Object> info = (Map<String, Object>) slaObj.get(\"info\");    final String level = (String) slaObj.get(\"level\");    return new SlaOption(type, actions, info, level);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createSlaMessage", "params": ["SlaOption", "ExecutableFlow"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String createSlaMessage(final SlaOption slaOption, final ExecutableFlow flow) {    final String type = slaOption.getType();    final int execId = flow.getExecutionId();    if (type.equals(SlaOption.TYPE_FLOW_FINISH)) {      final String flowName =          (String) slaOption.getInfo().get(SlaOption.INFO_FLOW_NAME);      final String duration =          (String) slaOption.getInfo().get(SlaOption.INFO_DURATION);      final String basicinfo =          \"SLA \u544a\u8b66: Your flow \" + flowName + \" failed to FINISH within \"              + duration + \"#br\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f : #br\"              + \"Flow \" + flowName + \"#br\"              + \"\u6267\u884cID: \" + execId + \"#br\"              + \"\u9884\u8ba1\u8d85\u65f6\u65f6\u95f4: \" + duration + \"#br\"              + \"\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(flow.getStartTime())) + \"#br\"              + \"\u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(flow.getEndTime())) + \"#br\";      final String actual = \"Flow \u73b0\u5728\u7684\u72b6\u6001\u662f \" + flow.getStatus();      return basicinfo + expected + actual;    } else if (type.equals(SlaOption.TYPE_FLOW_SUCCEED)) {      final String flowName =          (String) slaOption.getInfo().get(SlaOption.INFO_FLOW_NAME);      final String duration =          (String) slaOption.getInfo().get(SlaOption.INFO_DURATION);      final String basicinfo =          \"SLA \u544a\u8b66: Your flow \" + flowName + \" failed to SUCCEED within \"              + duration + \"#br\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f : #br\"              + \"Flow \" + flowName + \"#br\"              + \"\u6267\u884cID: \" + execId + \"#br\"              + \"\u9884\u8ba1\u8d85\u65f6\u65f6\u95f4: \" + duration + \"#br\"              + \"\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(flow.getStartTime())) + \"#br\"              + \"\u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(flow.getEndTime())) + \"#br\";      final String actual = \"Flow \u73b0\u5728\u7684\u72b6\u6001\u662f \" + flow.getStatus();      return basicinfo + expected + actual;    } else if (type.equals(SlaOption.TYPE_JOB_FINISH)) {      final String jobName =          (String) slaOption.getInfo().get(SlaOption.INFO_JOB_NAME);      final String duration =          (String) slaOption.getInfo().get(SlaOption.INFO_DURATION);      ExecutableNode job = flow.getExecutableNode(jobName);      final String basicinfo =          \"SLA \u544a\u8b66: Your job \" + jobName + \" failed to FINISH within \"              + duration + \"#br\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f : #br\"              + \"Job \" + jobName + \"#br\"              + \"\u9884\u8ba1\u8d85\u65f6\u65f6\u95f4: \" + duration + \"#br\"              + \"\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(job.getStartTime())) + \"#br\"              + \"\u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(job.getEndTime())) + \"#br\";      final String actual = \"Job \u73b0\u5728\u7684\u72b6\u6001\u662f \" + job.getStatus();      return basicinfo + expected + actual;    } else if (type.equals(SlaOption.TYPE_JOB_SUCCEED)) {      final String jobName =          (String) slaOption.getInfo().get(SlaOption.INFO_JOB_NAME);      final String duration =          (String) slaOption.getInfo().get(SlaOption.INFO_DURATION);      ExecutableNode job = flow.getExecutableNode(jobName);      final String basicinfo =          \"SLA \u544a\u8b66: Your job \" + jobName + \" failed to SUCCEED within \"              + duration + \"#br\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f : #br\"              + \"Job \" + jobName + \"#br\"              + \"\u9884\u8ba1\u8d85\u65f6\u65f6\u95f4: \" + duration + \"#br\"              + \"\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(job.getStartTime())) + \"#br\"              + \"\u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(job.getEndTime())) + \"#br\";      final String actual = \"Job \u73b0\u5728\u7684\u72b6\u6001\u662f \" + job.getStatus();      return basicinfo + expected + actual;    } else {      return \"Unrecognized SLA type \" + type;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createFinishSlaMessage", "params": ["SlaOption", "ExecutableFlow"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String createFinishSlaMessage(final SlaOption slaOption, final ExecutableFlow flow) {    final String type = slaOption.getType();//    final int execId = flow.getExecutionId();    if (type.equals(SlaOption.TYPE_FLOW_SUCCESS_EMAILS)) {//Flow \u6267\u884c\u6210\u529f \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildSlaMessageText(flow, slaOption, \"Flow\",\"SUCCESS\");    } else if (type.equals(SlaOption.TYPE_FLOW_FAILURE_EMAILS)) {//Flow \u6267\u884c\u5931\u8d25 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildSlaMessageText(flow, slaOption, \"Flow\",\"FAILURE\");    }  else if (type.equals(SlaOption.TYPE_FLOW_FINISH_EMAILS)) {//Flow \u6267\u884c\u5b8c\u6210 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildSlaMessageText(flow, slaOption, \"Flow\",\"FINISH\");    } else if (type.equals(SlaOption.TYPE_JOB_SUCCESS_EMAILS)) {//Job \u6267\u884c\u6210\u529f \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildSlaMessageText(flow, slaOption, \"Job\",\"SUCCESS\");    } else if (type.equals(SlaOption.TYPE_JOB_FAILURE_EMAILS)) {//Job \u6267\u884c\u5931\u8d25 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildSlaMessageText(flow, slaOption, \"Job\",\"FAILURE\");    }  else if (type.equals(SlaOption.TYPE_JOB_FINISH_EMAILS)) {//Job \u6267\u884c\u5b8c\u6210 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildSlaMessageText(flow, slaOption, \"Job\",\"FINISH\");    } else {      return \"Unrecognized SLA type \" + type;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getType() {    return this.type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setType(final String type) {    this.type = type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> getInfo() {    return this.info;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setInfo", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setInfo(final Map<String, Object> info) {    this.info = info;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getActions", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getActions() {    return this.actions;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setActions", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setActions(final List<String> actions) {    this.actions = actions;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getLevel() {    return level;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLevel", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLevel(String level) {    this.level = level;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTimeSet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getTimeSet() {    return timeSet;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTimeSet", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTimeSet(String timeSet) {    this.timeSet = timeSet;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEmailAction", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getEmailAction() {    return emailAction;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEmailAction", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setEmailAction(String emailAction) {    this.emailAction = emailAction;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getKillAction", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getKillAction() {    return killAction;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setKillAction", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setKillAction(String killAction) {    this.killAction = killAction;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> toObject() {    final HashMap<String, Object> slaObj = new HashMap<>();    slaObj.put(\"type\", this.type);    slaObj.put(\"info\", this.info);    slaObj.put(\"actions\", this.actions);    slaObj.put(\"level\", this.level);    return slaObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toWebObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object toWebObject() {    final HashMap<String, Object> slaObj = new HashMap<>();    if (this.type.equals(TYPE_FLOW_FINISH) || this.type.equals(TYPE_FLOW_SUCCEED)) {      slaObj.put(\"id\", \"\");    } else {      slaObj.put(\"id\", this.info.get(INFO_JOB_NAME));      slaObj.put(\"embeddedId\", null != this.info.get(INFO_EMBEDDED_ID) ? this.info.get(INFO_EMBEDDED_ID) : \"\");    }    slaObj.put(\"duration\", this.info.get(INFO_DURATION));    if (this.type.equals(TYPE_FLOW_FINISH) || this.type.equals(TYPE_JOB_FINISH)) {      slaObj.put(\"rule\", \"FINISH\");    } else if (this.type.equals(TYPE_FLOW_SUCCEED) || this.type.equals(TYPE_JOB_SUCCEED)) {      slaObj.put(\"rule\", \"SUCCESS\");    } else if (this.type.equals(TYPE_FLOW_FAILURE_EMAILS) || this.type.equals(TYPE_JOB_FAILURE_EMAILS)){      slaObj.put(\"rule\", \"FAILURE EMAILS\");    } else if (this.type.equals(TYPE_FLOW_SUCCESS_EMAILS) || this.type.equals(TYPE_JOB_SUCCESS_EMAILS)){      slaObj.put(\"rule\", \"SUCCESS EMAILS\");    } else {      slaObj.put(\"rule\", \"FINISH EMAILS\");    }    final List<String> actionsObj = new ArrayList<>();    for (final String act : this.actions) {      if (act.equals(ACTION_ALERT)) {        actionsObj.add(\"EMAIL\");      } else {        actionsObj.add(\"KILL\");      }    }    slaObj.put(\"actions\", actionsObj);    slaObj.put(\"level\", this.level);    return slaObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"Sla of \" + getType() + getInfo() + getActions();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildSlaMessageText", "params": ["ExecutableFlow", "SlaOption", "String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String buildSlaMessageText(ExecutableFlow flow, SlaOption slaOption, String taskType, String runStatus){    final int execId = flow.getExecutionId();    String slaText = \"Finish Sla Message Bulid\";    runStatus = \"Finish\".equals(runStatus) ? \"Finish\":runStatus;    if(\"Flow\".equals(taskType)){      final String flowName =          (String) slaOption.getInfo().get(SlaOption.INFO_FLOW_NAME);      final String basicInfo =          \"SLA \u544a\u8b66: Your flow \" + flowName + \" \" + runStatus + \" ! #br\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f: #br\"              + \"Flow \" + flowName + \" in execution \" + execId + \" is expected to FINISH from \"              + fmt.print(new DateTime(flow.getStartTime())) + \"#br\"              + \"Flow \u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(flow.getStartTime())) + \" \u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(flow.getEndTime())) + \".#br\"              + \"Flow \u6267\u884c\u8017\u65f6\uff1a\" + Utils.formatDuration(flow.getStartTime(), flow.getEndTime()) + \".#br\";      final String actual = \"Flow \u73b0\u5728\u7684\u72b6\u6001\u662f: \" + runStatus + \" !\";      slaText = basicInfo + expected + actual;    } else {      final String jobName =          (String) slaOption.getInfo().get(SlaOption.INFO_JOB_NAME);      ExecutableNode job = flow.getExecutableNode(jobName);      final String basicInfo =          \"SLA \u544a\u8b66: Your job \" + jobName + \" \" + runStatus + \" in execution \" + execId + \".#br\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f: #br\"              + \"Job \u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(job.getStartTime())) + \" \u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(job.getEndTime())) + \".#br\"              + \"Job \u6267\u884c\u8017\u65f6\uff1a\" + Utils.formatDuration(job.getStartTime(), job.getEndTime()) + \".#br\"              + \"Job \u5c5e\u4e8e Flow: \" + flow.getId() + \".#br\";      final String actual = \"Job \u73b0\u5728\u7684\u72b6\u6001\u662f: \" + runStatus + \" !\";      slaText = basicInfo + expected + actual;    }    return slaText;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/sla/SlaOption.java", "stars": "18", "class": {"name": "SlaOption", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "actionPerformed", "params": ["AnActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void actionPerformed(@NotNull AnActionEvent anActionEvent) {        Project project = anActionEvent.getData(CommonDataKeys.PROJECT);        assert project != null;        String path = Settings.getPath(project, 0);        String path2 = Settings.getPath(project, 1);        String replacement = Settings.getReplacementString(project);        DialogBuilder builder = new DialogBuilder(project);        JComponent content = new JPanel();        content.setLayout(new BoxLayout(content, BoxLayout.Y_AXIS));        content.setAlignmentX(Component.LEFT_ALIGNMENT);        /// 1        JLabel selectFileLocationPath = new JLabel();        selectFileLocationPath.setText(\"Select the file location of the default json localization file\");        content.add(selectFileLocationPath);        TextFieldWithBrowseButton jsonLocationTextField = new TextFieldWithBrowseButton();        jsonLocationTextField.setText(path);        jsonLocationTextField.addBrowseFolderListener(\"Choose json file\", \"Choose a localization file, it has to be in JSON format\", project, FileChooserDescriptorFactory.createSingleFileDescriptor());        jsonLocationTextField.setMaximumSize(new Dimension(Short.MAX_VALUE,                56));        content.add(jsonLocationTextField);        ///        /// Two        JLabel selectFileLocationPath2 = new JLabel();        selectFileLocationPath2.setText(\"Select the file location of another json localization file\");        content.add(selectFileLocationPath2);        TextFieldWithBrowseButton jsonLocationTextField2 = new TextFieldWithBrowseButton();        jsonLocationTextField2.setText(path2);        jsonLocationTextField2.addBrowseFolderListener(\"Choose json file\", \"Choose a localization file, it has to be in JSON format\", project, FileChooserDescriptorFactory.createSingleFileDescriptor());        jsonLocationTextField2.setMaximumSize(new Dimension(Short.MAX_VALUE,                56));        content.add(jsonLocationTextField2);        ///        JLabel replacementLabel = new JLabel();        replacementLabel.setText(\"The code that should replace the Text. \\n '$$' will be replaced by the key in CamelCase\");        content.add(replacementLabel);        JTextField replacementTextField = new JTextField();        replacementTextField.setText(replacement);        replacementTextField.setMaximumSize(new Dimension(Short.MAX_VALUE,                56));        content.add(replacementTextField);        builder.setDimensionServiceKey(\"GrepConsoleTailFileDialog\");        builder.setTitle(\"Choose your json path\");        builder.centerPanel(content);        builder.removeAllActions();        builder.addOkAction();        builder.addCancelAction();        builder.setOkOperation(() -> {            String location = jsonLocationTextField.getText();            Settings.savePath(project, location, 0);            Settings.savePath(project, jsonLocationTextField2.getText(), 1);            String replacementText = replacementTextField.getText();            Settings.saveReplacement(project, replacementText);            builder.getDialogWrapper().close(1);        });        builder.show();    }", "url": "https://raw.githubusercontent.com/Norbert515/flutter_localizer/master/src/SetUpExtractString.java", "stars": "23", "class": {"name": "SetUpExtractString", "extends": "AnAction", "implements": null, "modifiers": ["public"]}}, {"method_name": "doAsciiStringSplit", "params": ["String", "String", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String[] doAsciiStringSplit(String left, String right, int expectSliceNumber) {        int radix = 128;        BigInteger[] tempResult = doBigIntegerSplit(stringToBigInteger(left, radix),                stringToBigInteger(right, radix), expectSliceNumber);        String[] result = new String[tempResult.length];        //\u5904\u7406\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u56e0\u4e3a\uff1a\u5728\u8f6c\u6362\u4e3a\u6570\u5b57\uff0c\u518d\u8fd8\u539f\u7684\u65f6\u5019\uff0c\u5982\u679c\u9996\u5b57\u7b26\u521a\u597d\u662f basic,\u5219\u4e0d\u77e5\u9053\u5e94\u8be5\u6dfb\u52a0\u591a\u5c11\u4e2a basic\uff09        result[0] = left;        result[tempResult.length - 1] = right;        for (int i = 1, len = tempResult.length - 1; i < len; i++) {            result[i] = bigIntegerToString(tempResult[i], radix);        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/util/RangeSplitUtil.java", "stars": "23", "class": {"name": "RangeSplitUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "doLongSplit", "params": ["long", "long", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long[] doLongSplit(long left, long right, int expectSliceNumber) {        BigInteger[] result = doBigIntegerSplit(BigInteger.valueOf(left),                BigInteger.valueOf(right), expectSliceNumber);        long[] returnResult = new long[result.length];        for (int i = 0, len = result.length; i < len; i++) {            returnResult[i] = result[i].longValue();        }        return returnResult;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/util/RangeSplitUtil.java", "stars": "23", "class": {"name": "RangeSplitUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "doBigIntegerSplit", "params": ["BigInteger", "BigInteger", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "BigInteger", "snippet": "    public static BigInteger[] doBigIntegerSplit(BigInteger left, BigInteger right, int expectSliceNumber) {        if (expectSliceNumber < 1) {            throw new IllegalArgumentException(String.format(                    \"\u5207\u5206\u4efd\u6570\u4e0d\u80fd\u5c0f\u4e8e1. \u6b64\u5904:expectSliceNumber=[%s].\", expectSliceNumber));        }        if (null == left || null == right) {            throw new IllegalArgumentException(String.format(                    \"\u5bf9 BigInteger \u8fdb\u884c\u5207\u5206\u65f6\uff0c\u5176\u5de6\u53f3\u533a\u95f4\u4e0d\u80fd\u4e3a null. \u6b64\u5904:left=[%s],right=[%s].\", left, right));        }        if (left.compareTo(right) == 0) {            return new BigInteger[]{left, right};        } else {            // \u8c03\u6574\u5927\u5c0f\u987a\u5e8f\uff0c\u786e\u4fdd left < right            if (left.compareTo(right) > 0) {                BigInteger temp = left;                left = right;                right = temp;            }            //left < right            BigInteger endAndStartGap = right.subtract(left);            BigInteger step = endAndStartGap.divide(BigInteger.valueOf(expectSliceNumber));            BigInteger remainder = endAndStartGap.remainder(BigInteger.valueOf(expectSliceNumber));            //remainder \u4e0d\u53ef\u80fd\u8d85\u8fc7expectSliceNumber,\u6240\u4ee5\u4e0d\u9700\u8981\u68c0\u67e5remainder\u7684 Integer \u7684\u8303\u56f4            // \u8fd9\u91cc\u4e0d\u80fd step.intValue()==0\uff0c\u56e0\u4e3a\u53ef\u80fd\u6ea2\u51fa            if (step.compareTo(BigInteger.ZERO) == 0) {                expectSliceNumber = remainder.intValue();            }            BigInteger[] result = new BigInteger[expectSliceNumber + 1];            result[0] = left;            result[expectSliceNumber] = right;            BigInteger lowerBound;            BigInteger upperBound = left;            for (int i = 1; i < expectSliceNumber; i++) {                lowerBound = upperBound;                upperBound = lowerBound.add(step);                upperBound = upperBound.add((remainder.compareTo(BigInteger.valueOf(i)) >= 0)                        ? BigInteger.ONE : BigInteger.ZERO);                result[i] = upperBound;            }            return result;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/util/RangeSplitUtil.java", "stars": "23", "class": {"name": "RangeSplitUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "checkIfBetweenRange", "params": ["int", "int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void checkIfBetweenRange(int value, int left, int right) {        if (value < left || value > right) {            throw new IllegalArgumentException(String.format(\"parameter can not <[%s] or >[%s].\",                    left, right));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/util/RangeSplitUtil.java", "stars": "23", "class": {"name": "RangeSplitUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "stringToBigInteger", "params": ["String", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "BigInteger", "snippet": "    public static BigInteger stringToBigInteger(String aString, int radix) {        if (null == aString) {            throw new IllegalArgumentException(\"\u53c2\u6570 bigInteger \u4e0d\u80fd\u4e3a\u7a7a.\");        }        checkIfBetweenRange(radix, 1, 128);        BigInteger result = BigInteger.ZERO;        BigInteger radixBigInteger = BigInteger.valueOf(radix);        int tempChar;        int k = 0;        for (int i = aString.length() - 1; i >= 0; i--) {            tempChar = aString.charAt(i);            if (tempChar >= 128) {                throw new IllegalArgumentException(String.format(\"\u6839\u636e\u5b57\u7b26\u4e32\u8fdb\u884c\u5207\u5206\u65f6\u4ec5\u652f\u6301 ASCII \u5b57\u7b26\u4e32\uff0c\u800c\u5b57\u7b26\u4e32:[%s]\u975e ASCII \u5b57\u7b26\u4e32.\", aString));            }            result = result.add(BigInteger.valueOf(tempChar).multiply(radixBigInteger.pow(k)));            k++;        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/util/RangeSplitUtil.java", "stars": "23", "class": {"name": "RangeSplitUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "bigIntegerToString", "params": ["BigInteger", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String bigIntegerToString(BigInteger bigInteger, int radix) {        if (null == bigInteger) {            throw new IllegalArgumentException(\"\u53c2\u6570 bigInteger \u4e0d\u80fd\u4e3a\u7a7a.\");        }        checkIfBetweenRange(radix, 1, 128);        StringBuilder resultStringBuilder = new StringBuilder();        List<Integer> list = new ArrayList<Integer>();        BigInteger radixBigInteger = BigInteger.valueOf(radix);        BigInteger currentValue = bigInteger;        BigInteger quotient = currentValue.divide(radixBigInteger);        while (quotient.compareTo(BigInteger.ZERO) > 0) {            list.add(currentValue.remainder(radixBigInteger).intValue());            currentValue = currentValue.divide(radixBigInteger);            quotient = currentValue;        }        Collections.reverse(list);        if (list.isEmpty()) {            list.add(0, bigInteger.remainder(radixBigInteger).intValue());        }        Map<Integer, Character> map = new HashMap<Integer, Character>();        for (int i = 0; i < radix; i++) {            map.put(i, (char) (i));        }//        String msg = String.format(\"%s \u8f6c\u4e3a %s \u8fdb\u5236\uff0c\u7ed3\u679c\u4e3a\uff1a%s\", bigInteger.longValue(), radix, list);//        System.out.println(msg);        for (Integer aList : list) {            resultStringBuilder.append(map.get(aList));        }        return resultStringBuilder.toString();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/util/RangeSplitUtil.java", "stars": "23", "class": {"name": "RangeSplitUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getMinAndMaxCharacter", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Pair<Character,Character>", "snippet": "    public static Pair<Character, Character> getMinAndMaxCharacter(String aString) {        if (!isPureAscii(aString)) {            throw new IllegalArgumentException(String.format(\"\u6839\u636e\u5b57\u7b26\u4e32\u8fdb\u884c\u5207\u5206\u65f6\u4ec5\u652f\u6301 ASCII \u5b57\u7b26\u4e32\uff0c\u800c\u5b57\u7b26\u4e32:[%s]\u975e ASCII \u5b57\u7b26\u4e32.\", aString));        }        char min = aString.charAt(0);        char max = min;        char temp;        for (int i = 1, len = aString.length(); i < len; i++) {            temp = aString.charAt(i);            min = min < temp ? min : temp;            max = max > temp ? max : temp;        }        return new ImmutablePair<Character, Character>(min, max);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/util/RangeSplitUtil.java", "stars": "23", "class": {"name": "RangeSplitUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isPureAscii", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean isPureAscii(String aString) {        if (null == aString) {            return false;        }        for (int i = 0, len = aString.length(); i < len; i++) {            char ch = aString.charAt(i);            if (ch >= 127 || ch < 0) {                return false;            }        }        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/util/RangeSplitUtil.java", "stars": "23", "class": {"name": "RangeSplitUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        // \u4f7f\u7528 Paint.setTextAlign() \u6765\u8c03\u6574\u6587\u5b57\u5bf9\u9f50\u65b9\u5f0f        // \u7b2c\u4e00\u5904\uff1a\u4f7f\u7528 Paint.Align.LEFT        paint.setTextAlign(Paint.Align.LEFT);        canvas.drawText(text, getWidth() / 2, 100, paint);        // \u7b2c\u4e8c\u5904\uff1a\u4f7f\u7528 Paint.Align.CENTER        paint.setTextAlign(Paint.Align.CENTER);        canvas.drawText(text, getWidth() / 2, 200, paint);        // \u7b2c\u4e09\u5904\uff1a\u4f7f\u7528 Paint.Align.RIGHT        paint.setTextAlign(Paint.Align.RIGHT);        canvas.drawText(text, getWidth() / 2, 300, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson3/Practice10SetTextAlignView.java", "stars": "2", "class": {"name": "Practice10SetTextAlignView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "startElement", "params": ["String", "String", "String", "Attributes"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {        if (qName.equalsIgnoreCase(DATA)) {            application = new JSONObject();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastApplicationsParser.java", "stars": "4", "class": {"name": "NetcastApplicationsParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "endElement", "params": ["String", "String", "String"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void endElement(String uri, String localName, String qName) throws SAXException {        try {            if (qName.equalsIgnoreCase(DATA)) {                applicationList.put(application);            }            else if (qName.equalsIgnoreCase(AUID)) {                application.put(\"id\", value);            }            else if (qName.equalsIgnoreCase(NAME)) {                application.put(\"title\", value);            }            else if (qName.equalsIgnoreCase(TYPE)) {                application.put(TYPE, value);            }            else if (qName.equalsIgnoreCase(CPID)) {                application.put(CPID, value);            }            else if (qName.equalsIgnoreCase(ADULT)) {                application.put(ADULT, value);            }            else if (qName.equalsIgnoreCase(ICON_NAME)) {                application.put(ICON_NAME, value);            }            value = null;        } catch (JSONException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastApplicationsParser.java", "stars": "4", "class": {"name": "NetcastApplicationsParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "characters", "params": ["char", "int", "int"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void characters(char[] ch, int start, int length) throws SAXException {        value = new String(ch, start, length);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastApplicationsParser.java", "stars": "4", "class": {"name": "NetcastApplicationsParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getApplications", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JSONArray", "snippet": "    public JSONArray getApplications() {        return applicationList;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastApplicationsParser.java", "stars": "4", "class": {"name": "NetcastApplicationsParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "doGet", "params": ["String", "Map<String,String>", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String doGet(String url, Map<String, String> requestHeaders, String cookie) {        HttpClient httpClient = new HttpClient();        httpClient.getParams().setConnectionManagerTimeout(1 * 1000);        httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(2 * 1000);        httpClient.getHttpConnectionManager().getParams().setSoTimeout(4 * 1000);        httpClient.getHttpConnectionManager().getParams().setTcpNoDelay(true);        HttpMethod method = new GetMethod(url);        method.setRequestHeader(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36\");        if (requestHeaders != null ) {            for (String requestHeader : requestHeaders.keySet()) {                method.setRequestHeader(requestHeader, requestHeaders.get(requestHeader));            }        }        if (cookie == null) {            method.getParams().setCookiePolicy(CookiePolicy.IGNORE_COOKIES);            method.setRequestHeader(\"Cookie\", \"special-cookie=value\");        } else {            method.getParams().setCookiePolicy(CookiePolicy.DEFAULT);            method.setRequestHeader(\"Cookie\", cookie);        }        method.setRequestHeader(\"Connection\", \"close\");        int retry = 0;        HttpHandleException exception = new HttpHandleException(\"request fail\");        do {            try {                httpClient.executeMethod(method);                StringBuilder stringBuilder = new StringBuilder();                try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(method.getResponseBodyAsStream()));) {                    String lineString = null;                    while ((lineString = bufferedReader.readLine()) != null) {                        stringBuilder.append(lineString);                    }                }                if (0 != retry) {                    LOGGER.info(\"httphandle retry success, retry={}, info={}\", retry,                            exception.getMessage().replace(\"Exception\", \"\"));                }                // \u8fd4\u56de                return stringBuilder.toString();            } catch (URIException e) {                exception = new HttpHandleException(e);            } catch (IOException e) {                exception = new HttpHandleException(e);            } catch (Exception e) {                exception = new HttpHandleException(e);            } finally {                // \u5173\u95ed\u54cd\u5e94                method.releaseConnection();            }        } while (++retry < 3);        throw exception;    }", "url": "https://raw.githubusercontent.com/buhuaqi/baidu-index/master/src/main/java/com/baidu/index/http/HttpHandle.java", "stars": "13", "class": {"name": "HttpHandle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "canDrawEntityOutlines", "params": ["CallbackInfoReturnable<Boolean>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void canDrawEntityOutlines(CallbackInfoReturnable<Boolean> cr){        if(client.getCameraEntity() instanceof CameraEntity){            cr.setReturnValue(false);            cr.cancel();        }    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/mixin/WorldRendererMixin.java", "stars": "5", "class": {"name": "WorldRendererMixin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFocusedEntity", "params": ["Camera"], "throws": null, "modifiers": ["private"], "return_type": "Entity", "snippet": "    private Entity getFocusedEntity(Camera camera){        if(client.getCameraEntity() instanceof CameraEntity){            return client.player;        }        return camera.getFocusedEntity();    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/mixin/WorldRendererMixin.java", "stars": "5", "class": {"name": "WorldRendererMixin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "flush", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean flush() {        this.someString = null;        this.machineId = null;        this.version = null;        return true;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/parser/security/SecurityMachineParser.java", "stars": "2", "class": {"name": "SecurityMachineParser", "extends": null, "implements": ["IMessageParser"], "modifiers": ["public"]}}, {"method_name": "parse", "params": ["IMessageDataWrapper"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean parse(IMessageDataWrapper wrapper) {        if(wrapper == null) return false;        this.someString = wrapper.readString();        this.machineId = wrapper.readString();        this.version = wrapper.readString();        return true;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/parser/security/SecurityMachineParser.java", "stars": "2", "class": {"name": "SecurityMachineParser", "extends": null, "implements": ["IMessageParser"], "modifiers": ["public"]}}, {"method_name": "getSomeString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSomeString() {        return this.someString;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/parser/security/SecurityMachineParser.java", "stars": "2", "class": {"name": "SecurityMachineParser", "extends": null, "implements": ["IMessageParser"], "modifiers": ["public"]}}, {"method_name": "getMachineId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMachineId() {        return this.machineId;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/parser/security/SecurityMachineParser.java", "stars": "2", "class": {"name": "SecurityMachineParser", "extends": null, "implements": ["IMessageParser"], "modifiers": ["public"]}}, {"method_name": "getVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getVersion() {        return this.version;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/parser/security/SecurityMachineParser.java", "stars": "2", "class": {"name": "SecurityMachineParser", "extends": null, "implements": ["IMessageParser"], "modifiers": ["public"]}}, {"method_name": "dispose", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dispose() {        if(this.buffer != null) {            this.buffer.release();            this.buffer = null;        }    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/codec/evawire/EvaWireDataWrapper.java", "stars": "2", "class": {"name": "EvaWireDataWrapper", "extends": null, "implements": ["IMessageDataWrapper"], "modifiers": ["public"]}}, {"method_name": "readByte", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int readByte() {        return this.buffer.readByte();    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/codec/evawire/EvaWireDataWrapper.java", "stars": "2", "class": {"name": "EvaWireDataWrapper", "extends": null, "implements": ["IMessageDataWrapper"], "modifiers": ["public"]}}, {"method_name": "readBytes", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ByteBuf", "snippet": "    public ByteBuf readBytes(int length) {        return this.buffer.readBytes(length);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/codec/evawire/EvaWireDataWrapper.java", "stars": "2", "class": {"name": "EvaWireDataWrapper", "extends": null, "implements": ["IMessageDataWrapper"], "modifiers": ["public"]}}, {"method_name": "readBoolean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean readBoolean() {        return (this.buffer.readByte() == 1);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/codec/evawire/EvaWireDataWrapper.java", "stars": "2", "class": {"name": "EvaWireDataWrapper", "extends": null, "implements": ["IMessageDataWrapper"], "modifiers": ["public"]}}, {"method_name": "readShort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int readShort() {        return this.buffer.readShort();    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/codec/evawire/EvaWireDataWrapper.java", "stars": "2", "class": {"name": "EvaWireDataWrapper", "extends": null, "implements": ["IMessageDataWrapper"], "modifiers": ["public"]}}, {"method_name": "readInt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int readInt() {        return this.buffer.readInt();    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/codec/evawire/EvaWireDataWrapper.java", "stars": "2", "class": {"name": "EvaWireDataWrapper", "extends": null, "implements": ["IMessageDataWrapper"], "modifiers": ["public"]}}, {"method_name": "readString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String readString() {        return this.readBytes(this.readShort()).toString(Charset.defaultCharset());    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/codec/evawire/EvaWireDataWrapper.java", "stars": "2", "class": {"name": "EvaWireDataWrapper", "extends": null, "implements": ["IMessageDataWrapper"], "modifiers": ["public"]}}, {"method_name": "getHeader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getHeader() {        return this.header;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/codec/evawire/EvaWireDataWrapper.java", "stars": "2", "class": {"name": "EvaWireDataWrapper", "extends": null, "implements": ["IMessageDataWrapper"], "modifiers": ["public"]}}, {"method_name": "bytesAvailable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean bytesAvailable() {        return (this.buffer.readableBytes() > 0);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/codec/evawire/EvaWireDataWrapper.java", "stars": "2", "class": {"name": "EvaWireDataWrapper", "extends": null, "implements": ["IMessageDataWrapper"], "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getCount() {\t\treturn data.length;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/socialauth-android/src/org/brickred/socialauth/android/ShareButtonAdapter.java", "stars": "74", "class": {"name": "ShareButtonAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object getItem(int position) {\t\treturn position;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/socialauth-android/src/org/brickred/socialauth/android/ShareButtonAdapter.java", "stars": "74", "class": {"name": "ShareButtonAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long getItemId(int position) {\t\treturn position;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/socialauth-android/src/org/brickred/socialauth/android/ShareButtonAdapter.java", "stars": "74", "class": {"name": "ShareButtonAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\tpublic View getView(int position, View convertView, ViewGroup parent) {\t\tTextView text;\t\tif (convertView == null) {\t\t\ttext = new TextView(ctx);\t\t} else {\t\t\ttext = (TextView) convertView;\t\t}\t\ttext.setText(data[position]);\t\tfinal Drawable image;\t\timage = ctx.getResources().getDrawable(imagesdata[position]);\t\tif (Util.UI_DENSITY == 320 || Util.UI_DENSITY == 240)\t\t\timage.setBounds(0, 0, 50, 50);\t\telse\t\t\timage.setBounds(0, 0, 30, 30);\t\ttext.setCompoundDrawables(image, null, null, null);\t\ttext.setPadding(14, 7, 7, 7);\t\ttext.setTextColor(Color.BLACK);\t\ttext.setCompoundDrawablePadding(10);\t\ttext.setGravity(Gravity.CENTER_VERTICAL);\t\treturn text;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/socialauth-android/src/org/brickred/socialauth/android/ShareButtonAdapter.java", "stars": "74", "class": {"name": "ShareButtonAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(SpringBootStartApplication.class, args);    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-start/src/main/java/com/soft1851/springboot/start/SpringBootStartApplication.java", "stars": "3", "class": {"name": "SpringBootStartApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubscriberMethods", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "SubscriberMethod", "snippet": "    public synchronized SubscriberMethod[] getSubscriberMethods() {        int length = methodInfos.length;        SubscriberMethod[] methods = new SubscriberMethod[length];        for (int i = 0; i < length; i++) {            SubscriberMethodInfo info = methodInfos[i];            methods[i] = createSubscriberMethod(info.methodName, info.eventType, info.threadMode,                    info.priority, info.sticky);        }        return methods;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/meta/SimpleSubscriberInfo.java", "stars": "7", "class": {"name": "SimpleSubscriberInfo", "extends": "AbstractSubscriberInfo", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.mainrotate);\t\tiv=(ImageView)findViewById(R.id.imageView1);\t\tAnimation a = new RotateAnimation(0.0f, 360.0f,                Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF,                0.5f);        a.setRepeatCount(-1);        a.setDuration(1000);        iv.startAnimation(a);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/rotatecenter/src/com/example/rotatecenter/MainrotateActivity.java", "stars": "74", "class": {"name": "MainrotateActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onCreateOptionsMenu(Menu menu) {\t\t// Inflate the menu; this adds items to the action bar if it is present.\t\tgetMenuInflater().inflate(R.menu.mainrotate, menu);\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/rotatecenter/src/com/example/rotatecenter/MainrotateActivity.java", "stars": "74", "class": {"name": "MainrotateActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "wrapException", "params": ["String", "Exception"], "throws": null, "modifiers": ["public", "static"], "return_type": "RuntimeException", "snippet": "  public static RuntimeException wrapException(String message, Exception e) {    return new PersistenceException(ErrorContext.instance().message(message).cause(e).toString(), e);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/exceptions/ExceptionFactory.java", "stars": "15", "class": {"name": "ExceptionFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fromObject", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "ExecutionAttempt", "snippet": "  public static ExecutionAttempt fromObject(final Object obj) {    final Map<String, Object> map = (Map<String, Object>) obj;    final TypedMapWrapper<String, Object> wrapper =        new TypedMapWrapper<>(map);    final int attempt = wrapper.getInt(ATTEMPT_PARAM);    final long startTime = wrapper.getLong(STARTTIME_PARAM);    final long endTime = wrapper.getLong(ENDTIME_PARAM);    final Status status = Status.valueOf(wrapper.getString(STATUS_PARAM));    return new ExecutionAttempt(attempt, startTime, endTime, status);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionAttempt.java", "stars": "18", "class": {"name": "ExecutionAttempt", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getStartTime() {    return this.startTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionAttempt.java", "stars": "18", "class": {"name": "ExecutionAttempt", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEndTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getEndTime() {    return this.endTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionAttempt.java", "stars": "18", "class": {"name": "ExecutionAttempt", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Status", "snippet": "  public Status getStatus() {    return this.status;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionAttempt.java", "stars": "18", "class": {"name": "ExecutionAttempt", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAttempt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getAttempt() {    return this.attempt;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionAttempt.java", "stars": "18", "class": {"name": "ExecutionAttempt", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> toObject() {    final HashMap<String, Object> attempts = new HashMap<>();    attempts.put(ATTEMPT_PARAM, this.attempt);    attempts.put(STARTTIME_PARAM, this.startTime);    attempts.put(ENDTIME_PARAM, this.endTime);    attempts.put(STATUS_PARAM, this.status.toString());    return attempts;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionAttempt.java", "stars": "18", "class": {"name": "ExecutionAttempt", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStorager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IVideoManagerStorager", "snippet": "\tpublic IVideoManagerStorager getStorager() {\t\tif (\"redis\".equals(vmConfig.getDatabase().toLowerCase())) {\t\t\treturn redisStorager;\t\t} else  if (\"jdbc\".equals(vmConfig.getDatabase().toLowerCase())) {\t\t\treturn jdbcStorager;\t\t}\t\treturn redisStorager;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/storager/VideoManagerStoragerFactory.java", "stars": "29", "class": {"name": "VideoManagerStoragerFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "JobFailMonitorHelper", "snippet": "\tpublic static JobFailMonitorHelper getInstance(){\t\treturn instance;\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobFailMonitorHelper.java", "stars": "1", "class": {"name": "JobFailMonitorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void start(){\t\tmonitorThread = new Thread(new Runnable() {\t\t\t@Override\t\t\tpublic void run() {\t\t\t\t// monitor\t\t\t\twhile (!toStop) {\t\t\t\t\ttry {\t\t\t\t\t\tList<Long> failLogIds = XxlJobAdminConfig.getAdminConfig().getXxlJobLogDao().findFailJobLogIds(1000);\t\t\t\t\t\tif (failLogIds!=null && !failLogIds.isEmpty()) {\t\t\t\t\t\t\tfor (long failLogId: failLogIds) {\t\t\t\t\t\t\t\t// lock log\t\t\t\t\t\t\t\tint lockRet = XxlJobAdminConfig.getAdminConfig().getXxlJobLogDao().updateAlarmStatus(failLogId, 0, -1);\t\t\t\t\t\t\t\tif (lockRet < 1) {\t\t\t\t\t\t\t\t\tcontinue;\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\tXxlJobLog log = XxlJobAdminConfig.getAdminConfig().getXxlJobLogDao().load(failLogId);\t\t\t\t\t\t\t\tXxlJobInfo info = XxlJobAdminConfig.getAdminConfig().getXxlJobInfoDao().loadById(log.getJobId());\t\t\t\t\t\t\t\t// 1\u3001fail retry monitor\t\t\t\t\t\t\t\tif (log.getExecutorFailRetryCount() > 0) {\t\t\t\t\t\t\t\t\tJobTriggerPoolHelper.trigger(log.getJobId(), TriggerTypeEnum.RETRY, (log.getExecutorFailRetryCount()-1), log.getExecutorShardingParam(), log.getExecutorParam());\t\t\t\t\t\t\t\t\tString retryMsg = \"<br><br><span style=\\\"color:#F39C12;\\\" > >>>>>>>>>>>\"+ I18nUtil.getString(\"jobconf_trigger_type_retry\") +\"<<<<<<<<<<< </span><br>\";\t\t\t\t\t\t\t\t\tlog.setTriggerMsg(log.getTriggerMsg() + retryMsg);\t\t\t\t\t\t\t\t\tXxlJobAdminConfig.getAdminConfig().getXxlJobLogDao().updateTriggerInfo(log);\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t// 2\u3001fail alarm monitor\t\t\t\t\t\t\t\tint newAlarmStatus = 0;\t\t// \u544a\u8b66\u72b6\u6001\uff1a0-\u9ed8\u8ba4\u3001-1=\u9501\u5b9a\u72b6\u6001\u30011-\u65e0\u9700\u544a\u8b66\u30012-\u544a\u8b66\u6210\u529f\u30013-\u544a\u8b66\u5931\u8d25\t\t\t\t\t\t\t\tif (info!=null && info.getAlarmEmail()!=null && info.getAlarmEmail().trim().length()>0) {\t\t\t\t\t\t\t\t\tboolean alarmResult = true;\t\t\t\t\t\t\t\t\ttry {\t\t\t\t\t\t\t\t\t\talarmResult = failAlarm(info, log);\t\t\t\t\t\t\t\t\t} catch (Exception e) {\t\t\t\t\t\t\t\t\t\talarmResult = false;\t\t\t\t\t\t\t\t\t\tlogger.error(e.getMessage(), e);\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\tnewAlarmStatus = alarmResult?2:3;\t\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\t\tnewAlarmStatus = 1;\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\tXxlJobAdminConfig.getAdminConfig().getXxlJobLogDao().updateAlarmStatus(failLogId, -1, newAlarmStatus);\t\t\t\t\t\t\t}\t\t\t\t\t\t}\t\t\t\t\t} catch (Exception e) {\t\t\t\t\t\tif (!toStop) {\t\t\t\t\t\t\tlogger.error(\">>>>>>>>>>> xxl-job, job fail monitor thread error:{}\", e);\t\t\t\t\t\t}\t\t\t\t\t}                    try {                        TimeUnit.SECONDS.sleep(10);                    } catch (Exception e) {                        if (!toStop) {                            logger.error(e.getMessage(), e);                        }                    }                }\t\t\t\tlogger.info(\">>>>>>>>>>> xxl-job, job fail monitor thread stop\");\t\t\t}\t\t});\t\tmonitorThread.setDaemon(true);\t\tmonitorThread.setName(\"xxl-job, admin JobFailMonitorHelper\");\t\tmonitorThread.start();\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobFailMonitorHelper.java", "stars": "1", "class": {"name": "JobFailMonitorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toStop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void toStop(){\t\ttoStop = true;\t\t// interrupt and wait\t\tmonitorThread.interrupt();\t\ttry {\t\t\tmonitorThread.join();\t\t} catch (InterruptedException e) {\t\t\tlogger.error(e.getMessage(), e);\t\t}\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobFailMonitorHelper.java", "stars": "1", "class": {"name": "JobFailMonitorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "failAlarm", "params": ["XxlJobInfo", "XxlJobLog"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean failAlarm(XxlJobInfo info, XxlJobLog jobLog){\t\tboolean alarmResult = true;\t\t// send monitor email\t\tif (info!=null && info.getAlarmEmail()!=null && info.getAlarmEmail().trim().length()>0) {\t\t\t// alarmContent\t\t\tString alarmContent = \"Alarm Job LogId=\" + jobLog.getId();\t\t\tif (jobLog.getTriggerCode() != ReturnT.SUCCESS_CODE) {\t\t\t\talarmContent += \"<br>TriggerMsg=<br>\" + jobLog.getTriggerMsg();\t\t\t}\t\t\tif (jobLog.getHandleCode()>0 && jobLog.getHandleCode() != ReturnT.SUCCESS_CODE) {\t\t\t\talarmContent += \"<br>HandleCode=\" + jobLog.getHandleMsg();\t\t\t}\t\t\t// email info\t\t\tXxlJobGroup group = XxlJobAdminConfig.getAdminConfig().getXxlJobGroupDao().load(Integer.valueOf(info.getJobGroup()));\t\t\tString personal = I18nUtil.getString(\"admin_name_full\");\t\t\tString title = I18nUtil.getString(\"jobconf_monitor\");\t\t\tString content = MessageFormat.format(mailBodyTemplate,\t\t\t\t\tgroup!=null?group.getTitle():\"null\",\t\t\t\t\tinfo.getId(),\t\t\t\t\tinfo.getJobDesc(),\t\t\t\t\talarmContent);\t\t\tSet<String> emailSet = new HashSet<String>(Arrays.asList(info.getAlarmEmail().split(\",\")));\t\t\tfor (String email: emailSet) {\t\t\t\t// make mail\t\t\t\ttry {\t\t\t\t\tMimeMessage mimeMessage = XxlJobAdminConfig.getAdminConfig().getMailSender().createMimeMessage();\t\t\t\t\tMimeMessageHelper helper = new MimeMessageHelper(mimeMessage, true);\t\t\t\t\thelper.setFrom(XxlJobAdminConfig.getAdminConfig().getEmailUserName(), personal);\t\t\t\t\thelper.setTo(email);\t\t\t\t\thelper.setSubject(title);\t\t\t\t\thelper.setText(content, true);\t\t\t\t\tXxlJobAdminConfig.getAdminConfig().getMailSender().send(mimeMessage);\t\t\t\t} catch (Exception e) {\t\t\t\t\tlogger.error(\">>>>>>>>>>> xxl-job, job fail alarm email send error, JobLogId:{}\", jobLog.getId(), e);\t\t\t\t\talarmResult = false;\t\t\t\t}\t\t\t}\t\t}\t\t// do something, custom alarm strategy, such as sms\t\treturn alarmResult;\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobFailMonitorHelper.java", "stars": "1", "class": {"name": "JobFailMonitorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConfig", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Optional<BlockPlacementLimitConfig>", "snippet": "    public Optional<BlockPlacementLimitConfig> getConfig() {        return Optional.ofNullable(this.config);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/BlockPlacementLimit.java", "stars": "3", "class": {"name": "BlockPlacementLimit", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "load", "params": ["BlockPlacementLimitConfig"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void load(BlockPlacementLimitConfig config) {        this.config = config;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/BlockPlacementLimit.java", "stars": "3", "class": {"name": "BlockPlacementLimit", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "onPlayerPlaceBlock", "params": ["BlockPlaceEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPlayerPlaceBlock(BlockPlaceEvent event) {        if (!isApplicable(event.getPlayer(), event.getBlock())) return;        PlayerBlockPlacementLimit playerLimit = getPlayerLimit(event.getPlayer());        Material blockType = event.getBlock().getType();        if (hasReachedLimit(event.getPlayer(), blockType)) {            event.getPlayer().sendMessage(                    ChatColor.DARK_RED                            + \"You reached your limit of \"                            + playerLimit.getLimit(blockType).orElse(0)                            + \" for placing \"                            + blockType.name());            event.setCancelled(true);            return;        }    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/BlockPlacementLimit.java", "stars": "3", "class": {"name": "BlockPlacementLimit", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "afterBlockPlaceEvent", "params": ["BlockPlaceEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterBlockPlaceEvent(BlockPlaceEvent event) {        if (!isApplicable(event.getPlayer(), event.getBlock())) return;        getPlayerLimit(event.getPlayer()).getLimit(event.getBlock().getType()).ifPresent(limit -> {            Block block = event.getBlock();            Player player = event.getPlayer();            Material blockType = block.getType();            int placedBlockAmount = addPlacedBlock(player, event.getBlock());            player.sendMessage(ChatColor.AQUA                    + \"You placed \"                    + placedBlockAmount                    + \"/\"                    + limit                    + \" of \"                    + blockType.name());        });    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/BlockPlacementLimit.java", "stars": "3", "class": {"name": "BlockPlacementLimit", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "onBlockBreak", "params": ["BlockBreakEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBlockBreak(BlockBreakEvent event) {        if (!isApplicable(event.getPlayer(), event.getBlock())) return;        if (!hasPlacedBlock(event.getPlayer(), event.getBlock())) return;        getPlayerLimit(event.getPlayer()).getLimit(event.getBlock().getType()).ifPresent(limit -> {            int newCount = removePlacedBlock(event.getPlayer(), event.getBlock());            event.getPlayer().sendMessage(ChatColor.AQUA                    + \"You removed a placed block. You placed \"                    + newCount                    + \"/\"                    + limit                    + \" of \"                    + event.getBlock().getType().name());        });    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/BlockPlacementLimit.java", "stars": "3", "class": {"name": "BlockPlacementLimit", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "addPlacedBlock", "params": ["Player", "Block"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int addPlacedBlock(Player player, Block block) {        return getPlayerLimit(player).addBlock(block);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/BlockPlacementLimit.java", "stars": "3", "class": {"name": "BlockPlacementLimit", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "removePlacedBlock", "params": ["Player", "Block"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int removePlacedBlock(Player player, Block block) {        return getPlayerLimit(player).removeBlock(block);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/BlockPlacementLimit.java", "stars": "3", "class": {"name": "BlockPlacementLimit", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "getPlacedBlockAmount", "params": ["Player", "Material"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPlacedBlockAmount(Player player, Material blockType) {        return getPlayerLimit(player).getCount(blockType);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/BlockPlacementLimit.java", "stars": "3", "class": {"name": "BlockPlacementLimit", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "hasReachedLimit", "params": ["Player", "Material"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasReachedLimit(Player player, Material blockType) {        PlayerBlockPlacementLimit playerLimit = getPlayerLimit(player);        Optional<Integer> limit = playerLimit.getLimit(blockType);        return limit.isPresent()                && playerLimit.getCount(blockType)                >= limit.get();    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/BlockPlacementLimit.java", "stars": "3", "class": {"name": "BlockPlacementLimit", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "hasPlacedBlock", "params": ["Player", "Block"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasPlacedBlock(Player player, Block block) {        return getPlayerLimit(player).hasPlacedBlock(block);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/BlockPlacementLimit.java", "stars": "3", "class": {"name": "BlockPlacementLimit", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "isApplicable", "params": ["Player", "Block"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isApplicable(Player player, Block block) {        boolean isLimitedBlock = getConfig().map(config -> config.hasLimit(block.getType())).orElse(false);        boolean hasPermission = player.hasPermission(getPermission());        boolean isExcluded = player.hasPermission(Constants.PERMISSION_EXCLUDE_FROM_LIMITS);        return isLimitedBlock                && hasPermission                && !isExcluded;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/BlockPlacementLimit.java", "stars": "3", "class": {"name": "BlockPlacementLimit", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "getPlayerLimit", "params": ["Player"], "throws": null, "modifiers": ["private"], "return_type": "PlayerBlockPlacementLimit", "snippet": "    private PlayerBlockPlacementLimit getPlayerLimit(Player player) {        PlayerBlockPlacementLimit playerLimit = getLimitsManager().getPlayerLimit(player);        registerLimit(playerLimit);        return playerLimit;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/BlockPlacementLimit.java", "stars": "3", "class": {"name": "BlockPlacementLimit", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "registerLimit", "params": ["PlayerBlockPlacementLimit"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void registerLimit(PlayerBlockPlacementLimit playerLimit) {        getConfig().ifPresent(config -> playerLimit.registerLimitConfig(getIdentifier(), config));    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/BlockPlacementLimit.java", "stars": "3", "class": {"name": "BlockPlacementLimit", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "getPermission", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getPermission() {        return Constants.PERMISSION_PREFIX + getIdentifier();    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/BlockPlacementLimit.java", "stars": "3", "class": {"name": "BlockPlacementLimit", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "getBaseService", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "IBaseService<T>", "snippet": "    public abstract IBaseService<T> getBaseService();    private Class<T> actualType;    @SuppressWarnings(\"unchecked\")    protected Class<T> getActualType(){        if(actualType == null){            synchronized (this){                ParameterizedType ptClass = (ParameterizedType) this.getClass().getGenericSuperclass();                actualType = (Class<T>) ptClass.getActualTypeArguments()[0];            }        }        return actualType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/controller/AbstractGenericController.java", "stars": "23", "class": {"name": "AbstractGenericController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getActualType", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Class<T>", "snippet": "    protected Class<T> getActualType(){        if(actualType == null){            synchronized (this){                ParameterizedType ptClass = (ParameterizedType) this.getClass().getGenericSuperclass();                actualType = (Class<T>) ptClass.getActualTypeArguments()[0];            }        }        return actualType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/controller/AbstractGenericController.java", "stars": "23", "class": {"name": "AbstractGenericController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "show", "params": ["java", "HttpServletRequest"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "Response<T>", "snippet": "    public Response<T> show(@PathVariable java.lang.Long id, HttpServletRequest request) throws Exception {        if(!hasDataAuth(getActualType(), DataAuthScope.READ, request, getBaseService().get(id))){            return new Response<T>().errorResponse(CodeConstant.AUTH_ERROR, null, \"\u6ca1\u6709\u64cd\u4f5c\u6743\u9650(Unauthorized)\");        }        T t = getBaseService().get(id);        return new Response<T>().successResponse(t);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/controller/AbstractGenericController.java", "stars": "23", "class": {"name": "AbstractGenericController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "delete", "params": ["java", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<T>", "snippet": "    public Response<T> delete(@PathVariable java.lang.Long id, HttpServletRequest request) {        if(!hasDataAuth(getActualType(), DataAuthScope.DELETE, request, getBaseService().get(id))){            return new Response<T>().errorResponse(CodeConstant.AUTH_ERROR, null, \"\u6ca1\u6709\u64cd\u4f5c\u6743\u9650(Unauthorized)\");        }        boolean result = getBaseService().delete(String.valueOf(id));        return result ? new Response<T>().successResponse(null) : new Response<T>().errorResponse(1, null, \"\u5220\u9664\u5931\u8d25(Delete failed)\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/controller/AbstractGenericController.java", "stars": "23", "class": {"name": "AbstractGenericController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "delBatch", "params": ["HttpServletRequest", "Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "Response<T>", "snippet": "    public Response<T> delBatch(HttpServletRequest request, @RequestBody Map<String, String> map) {        String ids = map.get(\"ids\");        boolean result = false;        if(StringUtils.isNotBlank(ids)){            String[] idArray = ids.split(\",\");            //How can be more faster?            T[] dataArray = (T[])new Object[idArray.length];            for(int i = 0 ; i < idArray.length; i ++){                dataArray[i] = getBaseService().get(idArray[i]);            }            if(!hasDataAuth(getActualType(), DataAuthScope.DELETE, request, dataArray)){                return new Response<T>().errorResponse(CodeConstant.AUTH_ERROR, null, \"\u6ca1\u6709\u64cd\u4f5c\u6743\u9650(Unauthorized)\");            }            result = getBaseService().delete(ids);        }        return result ? new Response<T>().successResponse(null) : new Response<T>().errorResponse(1, null, \"\u5220\u9664\u5931\u8d25(Delete failed)\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/controller/AbstractGenericController.java", "stars": "23", "class": {"name": "AbstractGenericController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "pageList", "params": ["E", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> pageList(E pageQuery, HttpServletRequest request) {        PageList<T> list = null;        int pageSize  = pageQuery.getPageSize();        if (pageSize == 0){            pageQuery.setPageSize(10);        }        String username = security.getUserName(request);        if(StringUtils.isNotBlank(username)) {            security.bindUserInfoAndDataAuth(pageQuery, request,                    security.userExternalDataAuthGetter(getActualType()).get(username));        }        list = getBaseService().findPage(pageQuery);        list.getData().forEach(element -> {            //Bind authority scopes            security.bindAuthScope(element, security.externalDataAuthScopeGetter(getActualType()).get(element));        });        return new Response<>().successResponse(list);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/controller/AbstractGenericController.java", "stars": "23", "class": {"name": "AbstractGenericController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "selectAll", "params": ["E", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<List>", "snippet": "    public Response<List<T>> selectAll(E pageQuery, HttpServletRequest request) {        String username = security.getUserName(request);        if(StringUtils.isNotBlank(username)) {            security.bindUserInfoAndDataAuth(pageQuery, request,                    security.userExternalDataAuthGetter(getActualType()).get(username));        }        List<T> data = getBaseService().selectAllList(pageQuery);        data.forEach(element -> {            //Bind authority scopes            security.bindAuthScope(data, security.externalDataAuthScopeGetter(getActualType()).get(element));        });        return new Response<List<T>>().successResponse(data);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/controller/AbstractGenericController.java", "stars": "23", "class": {"name": "AbstractGenericController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "add", "params": ["T", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<T>", "snippet": "    public Response<T> add(@Valid @RequestBody T t,HttpServletRequest request) {        security.bindUserInfo(t, request);        boolean result = getBaseService().add(t);        return result ? new Response<T>().successResponse(null) : new Response<T>().errorResponse(1, null, \"\u6dfb\u52a0\u5931\u8d25(Add failed)\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/controller/AbstractGenericController.java", "stars": "23", "class": {"name": "AbstractGenericController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "update", "params": ["T", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<T>", "snippet": "    public Response<T> update(@Valid @RequestBody T t,HttpServletRequest request) {        //TODO Cannot get id        if(!hasDataAuth(getActualType(), DataAuthScope.WRITE, request, t)){            return new Response<T>().errorResponse(CodeConstant.AUTH_ERROR, null, \"\u6ca1\u6709\u64cd\u4f5c\u6743\u9650(Unauthorized)\");        }        security.bindUserInfo(t, request);        boolean result = getBaseService().update(t);        return result ? new Response<T>().successResponse(null) : new Response<T>().errorResponse(1, null, \"\u66f4\u65b0\u5931\u8d25(Update failed)\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/controller/AbstractGenericController.java", "stars": "23", "class": {"name": "AbstractGenericController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setOffset", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setOffset(int offset) {\t\tthis.offset = offset;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TreeType.java", "stars": "3", "class": {"name": "TreeType", "extends": null, "implements": ["Type"], "modifiers": ["public"]}}, {"method_name": "getOffset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getOffset() {\t\treturn offset;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TreeType.java", "stars": "3", "class": {"name": "TreeType", "extends": null, "implements": ["Type"], "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object getData() {\t\treturn data;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TreeType.java", "stars": "3", "class": {"name": "TreeType", "extends": null, "implements": ["Type"], "modifiers": ["public"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getSize() {\t\treturn size;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TreeType.java", "stars": "3", "class": {"name": "TreeType", "extends": null, "implements": ["Type"], "modifiers": ["public"]}}, {"method_name": "getLeft", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Type", "snippet": "\tpublic Type getLeft() {\t\treturn left;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TreeType.java", "stars": "3", "class": {"name": "TreeType", "extends": null, "implements": ["Type"], "modifiers": ["public"]}}, {"method_name": "getRight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Type", "snippet": "\tpublic Type getRight() {\t\treturn right;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TreeType.java", "stars": "3", "class": {"name": "TreeType", "extends": null, "implements": ["Type"], "modifiers": ["public"]}}, {"method_name": "setSize", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void setSize() {\t\tswitch (typeCode) {\t\tcase ARRAY:\t\t\tsize = (Integer)data * left.getSize();\t\t\tbreak;\t\tcase BOOLEAN:\t\tcase FLOAT:\t\tcase INTEGER:\t\tcase POINTER:\t\tcase ENUM:\t\tcase STRING:\t\t\tsize = typeCode.getSize();\t\t\tbreak;\t\tcase FEATURE:\t\t\tsize = left.getSize();\t\t\tbreak;\t\tcase PRODUCT:\t\t\tsize = left.getSize() + right.getSize();\t\t\tbreak;\t\tcase STRUCT:\t\t\t\tMap<String, Type> map = (Map<String, Type>) data;\t\t\t\tSet<String> listKeys = map.keySet();\t\t\t\tIterator<String> iterator = listKeys.iterator();\t\t\t\twhile(iterator.hasNext()) {\t\t\t\t\tString key = iterator.next();\t\t\t\t\tsize += map.get(key).getSize();\t\t\t\t}\t\t\tbreak;\t\tcase FUNCTION:\t\t\tbreak;\t\tcase LIST:\t\t\tbreak;\t\tcase NAME:\t\t\tbreak;\t\tdefault:\t\t\tbreak;\t\t}\t\t\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TreeType.java", "stars": "3", "class": {"name": "TreeType", "extends": null, "implements": ["Type"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\tswitch (typeCode) {\t\tcase FUNCTION:\t\t\treturn \" -> \" + left;\t\tcase INTEGER:\t\t\treturn \"integer\";\t\tcase LIST:\t\t\treturn \"list(\" + left + \")\";\t\tcase STRING:\t\t\treturn \"string\";\t\tcase BOOLEAN:\t\t\treturn \"boolean\";\t\tcase ARRAY:\t\t\treturn \"array(\" + left + \")\";\t\tcase ENUM:\t\t\treturn \"enum(\" + data.toString() + \")\";\t\tcase POINTER:\t\t\treturn \"pointer(\" + left + \")\";\t\tcase STRUCT:\t\t\tString s1 = \"data:\" + data;\t\t\tString s2 = \"size:\" + size;\t\t\tString s3 = \"id:\" + offset;\t\t\treturn \"struct[\" + s1 + \", \" + s2 + \", \" + s3 + \"]\";\t\tcase PRODUCT:\t\t\treturn left + \"\" + right;\t\tcase FEATURE:\t\t\treturn data.toString() + \":\" + left + \";\";\t\tcase FLOAT:\t\t\treturn \"float\";\t\tcase NAME:\t\t\treturn \"name(\" + data.toString() + \")\";\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TreeType.java", "stars": "3", "class": {"name": "TreeType", "extends": null, "implements": ["Type"], "modifiers": ["public"]}}, {"method_name": "getTypeCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TypeCode", "snippet": "\tpublic TypeCode getTypeCode() {\t\treturn typeCode;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TreeType.java", "stars": "3", "class": {"name": "TreeType", "extends": null, "implements": ["Type"], "modifiers": ["public"]}}, {"method_name": "assertType", "params": ["Code", "Type"], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void assertType(Code code, Type type) throws TypeException {\t\tif (!this.equals(type))\t\t\tthrow new TypeException(\"erreur de type: \" + toString() + \" \u2260 \" + type, code.getLine(), code.getColumn());\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TreeType.java", "stars": "3", "class": {"name": "TreeType", "extends": null, "implements": ["Type"], "modifiers": ["public"]}}, {"method_name": "assertType", "params": ["Code", "TypeCode"], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void assertType(Code code, TypeCode typeCode) throws TypeException {\t\tif (this.getTypeCode() != typeCode)\t\t\tthrow new TypeException(\"erreur de type: \" + toString(), code.getLine(), code.getColumn());\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TreeType.java", "stars": "3", "class": {"name": "TreeType", "extends": null, "implements": ["Type"], "modifiers": ["public"]}}, {"method_name": "assertType", "params": ["Code", "TypeCode"], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void assertType(Code code, TypeCode[] typeCodes) throws TypeException {\t\tboolean flag = false;\t\tfor (TypeCode typeCode : typeCodes) {\t\t\tif (this.getTypeCode() == typeCode) {\t\t\t\tflag = true;\t\t\t\tbreak;\t\t\t}\t\t}\t\tif (!flag) {\t\t\tString types = \"{\";\t\t\tfor (TypeCode typeCode : typeCodes) {\t\t\t\ttypes += typeCode.toString() + \" \";\t\t\t}\t\t\ttypes += \"}\";\t\t\tthrow new TypeException(\"erreur de type: \" + toString() + \" \u2260 \" + types, code.getLine(), code.getColumn());\t\t}\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TreeType.java", "stars": "3", "class": {"name": "TreeType", "extends": null, "implements": ["Type"], "modifiers": ["public"]}}, {"method_name": "generatePrefCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generatePrefCode() {\t\tString result = \"\";\t\tswitch (typeCode) {\t\tcase ARRAY:\t\t\tresult += left.generatePrefCode();\t\t\tbreak;\t\tcase BOOLEAN:\t\tcase ENUM:\t\tcase FLOAT:\t\tcase INTEGER:\t\tcase STRING:\t\tcase STRUCT:\t\tcase VOID:\t\t\tresult += typeCode.getPref();\t\t\tbreak;\t\tcase POINTER:\t\t\tresult = left.generatePrefCode();\t\t\tresult += typeCode.getPref();\t\t\tbreak;\t\tcase FUNCTION:\t\t\tresult += left.generatePrefCode();\t\t\tbreak;\t\tdefault:\t\t\tbreak;\t\t}\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TreeType.java", "stars": "3", "class": {"name": "TreeType", "extends": null, "implements": ["Type"], "modifiers": ["public"]}}, {"method_name": "generateSuffCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateSuffCode() throws CodeException {\t\tString result = \"\";\t\tswitch (typeCode) {\t\tcase ARRAY:\t\t\tresult = \"[\" + data + \"]\" + left.generateSuffCode();\t\t\tbreak;\t\tcase STRING:\t\t\tresult = typeCode.getSuff();\t\t\tbreak;\t\tcase STRUCT:\t\t\tresult = \"[\" + size + \"]\";\t\t\tbreak;\t\tcase FUNCTION:\t\t\tresult += \"(\";\t\t\tresult += ((Environment)data).generateCode();\t\t\tresult += \")\";\t\t\t\t\t\tbreak;\t\tdefault:\t\t\tbreak;\t\t}\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TreeType.java", "stars": "3", "class": {"name": "TreeType", "extends": null, "implements": ["Type"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int hashCode() {\t\tfinal int prime = 31;\t\tint result = 1;\t\tresult = prime * result + ((data == null) ? 0 : data.hashCode());\t\tresult = prime * result + ((left == null) ? 0 : left.hashCode());\t\tresult = prime * result + ((right == null) ? 0 : right.hashCode());\t\tresult = prime * result + size;\t\tresult = prime * result + ((typeCode == null) ? 0 : typeCode.hashCode());\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TreeType.java", "stars": "3", "class": {"name": "TreeType", "extends": null, "implements": ["Type"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean equals(Object obj) {\t\tif (this == obj)\t\t\treturn true;\t\tif (obj == null)\t\t\treturn false;\t\tif (getClass() != obj.getClass())\t\t\treturn false;\t\tTreeType other = (TreeType) obj;\t\tif ((typeCode == TypeCode.NAME) || (other.typeCode == TypeCode.NAME))\t\t\treturn true;\t\tif (typeCode != other.typeCode)\t\t\treturn false;\t\tif (data == null) {\t\t\tif (other.data != null)\t\t\t\treturn false;\t\t} else if (!data.equals(other.data))\t\t\treturn false;\t\tif (left == null) {\t\t\tif (other.left != null)\t\t\t\treturn false;\t\t} else if (!left.equals(other.left))\t\t\treturn false;\t\tif (right == null) {\t\t\tif (other.right != null)\t\t\t\treturn false;\t\t} else if (!right.equals(other.right))\t\t\treturn false;\t\tif (size != other.size)\t\t\treturn false;\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/type/TreeType.java", "stars": "3", "class": {"name": "TreeType", "extends": null, "implements": ["Type"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getId() {        return id;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/ValidateStatement.java", "stars": "13", "class": {"name": "ValidateStatement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getCode() {        return code;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/ValidateStatement.java", "stars": "13", "class": {"name": "ValidateStatement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMessage() {        return message;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/ValidateStatement.java", "stars": "13", "class": {"name": "ValidateStatement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNodes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "NodeList", "snippet": "    public NodeList getNodes() {        return nodes;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/ValidateStatement.java", "stars": "13", "class": {"name": "ValidateStatement", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "beginDocument", "params": ["XmlPullParser", "String"], "throws": ["XmlPullParserException", "IOException"], "modifiers": ["private", "static", "final"], "return_type": "void", "snippet": "    private static final void beginDocument(XmlPullParser parser, String firstElementName)            throws XmlPullParserException, IOException {        int type;        while ((type = parser.next()) != XmlPullParser.START_TAG                && type != XmlPullParser.END_DOCUMENT) {        }        if (type != XmlPullParser.START_TAG) {            throw new XmlPullParserException(\"No start tag found\");        }        if (!parser.getName().equals(firstElementName)) {            throw new XmlPullParserException(\"Unexpected start tag: found \" + parser.getName()                    + \", expected \" + firstElementName);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/CupcakeContentSyncer.java", "stars": "74", "class": {"name": "CupcakeContentSyncer", "extends": "ContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "getAuthenticator", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "DatabaseAuthenticator", "snippet": "    private DatabaseAuthenticator getAuthenticator(String type) {        return mAuthenticators.get(type);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/CupcakeContentSyncer.java", "stars": "74", "class": {"name": "CupcakeContentSyncer", "extends": "ContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "setIsSyncable", "params": ["Account", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIsSyncable(Account account, String authority, int syncable) {        if (account == null || authority == null) {            throw new NullPointerException();        }        // All accounts are syncable by default    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/CupcakeContentSyncer.java", "stars": "74", "class": {"name": "CupcakeContentSyncer", "extends": "ContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "getIsSyncable", "params": ["Account", "String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getIsSyncable(Account account, String authority) {        if (account == null || authority == null) {            throw new NullPointerException();        }        // All accounts are syncable by default        return 1;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/CupcakeContentSyncer.java", "stars": "74", "class": {"name": "CupcakeContentSyncer", "extends": "ContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "setSyncAutomatically", "params": ["Account", "String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSyncAutomatically(Account account, String authority, boolean sync) {        if (account == null || authority == null) {            throw new NullPointerException();        }        DatabaseAuthenticator authenticator = getAuthenticator(account.type);        if (authenticator != null) {            authenticator.setSyncAutomatically(account, authority, sync);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/CupcakeContentSyncer.java", "stars": "74", "class": {"name": "CupcakeContentSyncer", "extends": "ContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "getSyncAutomatically", "params": ["Account", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean getSyncAutomatically(Account account, String authority) {        if (account == null || authority == null) {            throw new NullPointerException();        }        DatabaseAuthenticator authenticator = getAuthenticator(account.type);        if (authenticator != null) {            return authenticator.getSyncAutomatically(account, authority);        } else {            return false;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/CupcakeContentSyncer.java", "stars": "74", "class": {"name": "CupcakeContentSyncer", "extends": "ContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "querySyncAdapterServices", "params": [], "throws": null, "modifiers": ["private"], "return_type": "List<ResolveInfo>", "snippet": "    private List<ResolveInfo> querySyncAdapterServices() {        PackageManager pm = mContext.getPackageManager();        Intent intent = new Intent(\"android.content.SyncAdapter\");        int flags = PackageManager.GET_META_DATA;        return pm.queryIntentServices(intent, flags);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/CupcakeContentSyncer.java", "stars": "74", "class": {"name": "CupcakeContentSyncer", "extends": "ContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "requestSync", "params": ["Account", "String", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void requestSync(Account account, String authority, Bundle extras) {        if (account == null || authority == null) {            throw new NullPointerException();        }        for (ResolveInfo service : querySyncAdapterServices()) {            try {                ServiceInfo info = service.serviceInfo;                PackageManager pm = mContext.getPackageManager();                Resources resources = pm.getResourcesForApplication(info.packageName);                Bundle metaData = info.metaData;                int resId = metaData.getInt(\"android.content.SyncAdapter\");                XmlResourceParser xml = resources.getXml(resId);                try {                    beginDocument(xml, \"sync-adapter\");                    String contentAuthority = xml.getAttributeValue(NAMESPACE, \"contentAuthority\");                    String accountType = xml.getAttributeValue(NAMESPACE, \"accountType\");                    String supportsUploadingValue = xml.getAttributeValue(NAMESPACE,                            \"supportsUploading\");                    boolean supportsUploading = \"true\".equals(supportsUploadingValue);                    if (contentAuthority.equals(authority)) {                        if (accountType.equals(account.type)) {                            Intent serviceIntent = new Intent(                                    AbstractSyncService.ACTION_REQUEST_SYNC);                            serviceIntent.setClassName(info.packageName, info.name);                            serviceIntent.putExtra(AbstractSyncService.EXTRA_ACCOUNT_NAME,                                    account.name);                            serviceIntent.putExtra(AbstractSyncService.EXTRA_ACCOUNT_TYPE,                                    account.type);                            serviceIntent.putExtra(AbstractSyncService.EXTRA_AUTHORITY, authority);                            serviceIntent.putExtra(AbstractSyncService.EXTRA_BUNDLE, extras);                            serviceIntent.putExtra(AbstractSyncService.EXTRA_SUPPORTS_UPLOADING,                                    supportsUploading);                            mContext.startService(serviceIntent);                        }                    }                } finally {                    xml.close();                }            } catch (Exception e) {                Log.e(LOG_TAG, \"Could not read SyncAdapter meta-data\", e);            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/CupcakeContentSyncer.java", "stars": "74", "class": {"name": "CupcakeContentSyncer", "extends": "ContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "getAlarmManager", "params": [], "throws": null, "modifiers": ["private"], "return_type": "AlarmManager", "snippet": "    private AlarmManager getAlarmManager() {        return (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/CupcakeContentSyncer.java", "stars": "74", "class": {"name": "CupcakeContentSyncer", "extends": "ContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "createOperation", "params": ["Account", "String", "Bundle"], "throws": null, "modifiers": ["private"], "return_type": "PendingIntent", "snippet": "    private PendingIntent createOperation(Account account, String authority, Bundle extras) {        return PeriodicSyncReceiver.createPendingIntent(mContext, account, authority, extras);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/CupcakeContentSyncer.java", "stars": "74", "class": {"name": "CupcakeContentSyncer", "extends": "ContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "addPeriodicSync", "params": ["Account", "String", "Bundle", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addPeriodicSync(Account account, String authority, Bundle extras, long pollFrequency) {        long pollFrequencyMsec = pollFrequency * DateUtils.SECOND_IN_MILLIS;        AlarmManager manager = getAlarmManager();        int type = AlarmManager.ELAPSED_REALTIME_WAKEUP;        long triggerAtTime = SystemClock.elapsedRealtime() + pollFrequencyMsec;        long interval = pollFrequencyMsec;        PendingIntent operation = createOperation(account, authority, extras);        manager.setInexactRepeating(type, triggerAtTime, interval, operation);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/CupcakeContentSyncer.java", "stars": "74", "class": {"name": "CupcakeContentSyncer", "extends": "ContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "removePeriodicSync", "params": ["Account", "String", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removePeriodicSync(Account account, String authority, Bundle extras) {        AlarmManager manager = getAlarmManager();        PendingIntent operation = createOperation(account, authority, extras);        manager.cancel(operation);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/CupcakeContentSyncer.java", "stars": "74", "class": {"name": "CupcakeContentSyncer", "extends": "ContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "builder", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Builder", "snippet": "    public static Builder builder() {        return new Builder();    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/AsyncExecutor.java", "stars": "7", "class": {"name": "AsyncExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "create", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "AsyncExecutor", "snippet": "    public static AsyncExecutor create() {        return new Builder().build();    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/AsyncExecutor.java", "stars": "7", "class": {"name": "AsyncExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["RunnableEx"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute(final RunnableEx runnable) {        threadPool.execute(new Runnable() {            @Override            public void run() {                try {                    runnable.run();                } catch (Exception e) {                    EventMessage event;                    try {//                        event = failureEventConstructor.newInstance(e);                        event = new EventMessage(null,ExceptionKey.METHOD_EXCEPTION);                        event.setEventExeption(new EventMessage.PostEventExeption(-1,e.getMessage()));                    } catch (Exception e1) {                        eventBus.getLogger().log(Level.SEVERE, \"Original exception:\", e);                        throw new RuntimeException(\"Could not create failure event\", e1);                    }                    if (event instanceof HasExecutionScope) {                        ((HasExecutionScope) event).setExecutionScope(scope);                    }                    eventBus.post(event);                }            }        });    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/AsyncExecutor.java", "stars": "7", "class": {"name": "AsyncExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "threadPool", "params": ["Executor"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder threadPool(Executor threadPool) {            this.threadPool = threadPool;            return this;        }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/AsyncExecutor.java", "stars": "7", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "failureEventType", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder failureEventType(Class<?> failureEventType) {            this.failureEventType = failureEventType;            return this;        }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/AsyncExecutor.java", "stars": "7", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "eventBus", "params": ["KeventBus"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder eventBus(KeventBus eventBus) {            this.eventBus = eventBus;            return this;        }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/AsyncExecutor.java", "stars": "7", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AsyncExecutor", "snippet": "        public AsyncExecutor build() {            return buildForScope(null);        }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/AsyncExecutor.java", "stars": "7", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "buildForScope", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "AsyncExecutor", "snippet": "        public AsyncExecutor buildForScope(Object executionContext) {            if (eventBus == null) {                eventBus = KeventBus.getDefault();            }            if (threadPool == null) {                threadPool = Executors.newCachedThreadPool();            }            if (failureEventType == null) {                failureEventType = ThrowableFailureEvent.class;            }            return new AsyncExecutor(threadPool, eventBus, failureEventType, executionContext);        }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/AsyncExecutor.java", "stars": "7", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        ArrayList<String> list = new ArrayList<>();        //\u5f80\u96c6\u5408\u4e2d\u6dfb\u52a0\u591a\u4e2a\u5143\u7d20        /*list.add(\"a\");        list.add(\"b\");        list.add(\"c\");        list.add(\"d\");        list.add(\"e\");*/        //public static <T> boolean addAll(Collection<T> c, T... elements):\u5f80\u96c6\u5408\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u5143\u7d20\u3002        Collections.addAll(list,\"a\",\"b\",\"c\",\"d\",\"e\");        System.out.println(list);//[a, b, c, d, e]        //public static void shuffle(List<?> list) \u6253\u4e71\u987a\u5e8f:\u6253\u4e71\u96c6\u5408\u987a\u5e8f\u3002        Collections.shuffle(list);        System.out.println(list);//[b, d, c, a, e], [b, d, c, a, e]    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/14.%E3%80%90List%E3%80%81Set%E3%80%91-%E7%AC%94%E8%AE%B0/code/03_ListAndSet/src/com/itheima/demo05/Collections/Demo01Collections.java", "stars": "2", "class": {"name": "Demo01Collections", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "UmsRolePermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "UmsRolePermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "UmsRolePermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "UmsRolePermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "UmsRolePermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "UmsRolePermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "UmsRolePermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "UmsRolePermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "UmsRolePermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "UmsRolePermissionRelationExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNull() {            addCriterion(\"id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNotNull() {            addCriterion(\"id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdEqualTo(Long value) {            addCriterion(\"id =\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotEqualTo(Long value) {            addCriterion(\"id <>\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThan(Long value) {            addCriterion(\"id >\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"id >=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThan(Long value) {            addCriterion(\"id <\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThanOrEqualTo(Long value) {            addCriterion(\"id <=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIn(List<Long> values) {            addCriterion(\"id in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotIn(List<Long> values) {            addCriterion(\"id not in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdBetween(Long value1, Long value2) {            addCriterion(\"id between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotBetween(Long value1, Long value2) {            addCriterion(\"id not between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdIsNull() {            addCriterion(\"role_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdIsNotNull() {            addCriterion(\"role_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdEqualTo(Long value) {            addCriterion(\"role_id =\", value, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdNotEqualTo(Long value) {            addCriterion(\"role_id <>\", value, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdGreaterThan(Long value) {            addCriterion(\"role_id >\", value, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"role_id >=\", value, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdLessThan(Long value) {            addCriterion(\"role_id <\", value, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdLessThanOrEqualTo(Long value) {            addCriterion(\"role_id <=\", value, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdIn(List<Long> values) {            addCriterion(\"role_id in\", values, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdNotIn(List<Long> values) {            addCriterion(\"role_id not in\", values, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdBetween(Long value1, Long value2) {            addCriterion(\"role_id between\", value1, value2, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRoleIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRoleIdNotBetween(Long value1, Long value2) {            addCriterion(\"role_id not between\", value1, value2, \"roleId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdIsNull() {            addCriterion(\"permission_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdIsNotNull() {            addCriterion(\"permission_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdEqualTo(Long value) {            addCriterion(\"permission_id =\", value, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdNotEqualTo(Long value) {            addCriterion(\"permission_id <>\", value, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdGreaterThan(Long value) {            addCriterion(\"permission_id >\", value, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"permission_id >=\", value, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdLessThan(Long value) {            addCriterion(\"permission_id <\", value, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdLessThanOrEqualTo(Long value) {            addCriterion(\"permission_id <=\", value, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdIn(List<Long> values) {            addCriterion(\"permission_id in\", values, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdNotIn(List<Long> values) {            addCriterion(\"permission_id not in\", values, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdBetween(Long value1, Long value2) {            addCriterion(\"permission_id between\", value1, value2, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPermissionIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPermissionIdNotBetween(Long value1, Long value2) {            addCriterion(\"permission_id not between\", value1, value2, \"permissionId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelationExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "initDatabase", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void initDatabase() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/sptests/MapperConfig.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    ScriptRunner runner = new ScriptRunner(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection());    runner.setDelimiter(\"go\");    runner.setLogWriter(null);    runner.setErrorLogWriter(null);    BaseDataTest.runScript(runner, \"org/apache/ibatis/submitted/sptests/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testAdderAsSelect", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testAdderAsSelect() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter parameter = new Parameter();      parameter.setAddend1(2);      parameter.setAddend2(3);      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      spMapper.adderAsSelect(parameter);      assertEquals((Integer) 5, parameter.getSum());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testAdderAsSelectDoubleCall1", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testAdderAsSelectDoubleCall1() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter parameter = new Parameter();      parameter.setAddend1(2);      parameter.setAddend2(3);      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      spMapper.adderAsSelect(parameter);      assertEquals((Integer) 5, parameter.getSum());      parameter = new Parameter();      parameter.setAddend1(2);      parameter.setAddend2(3);      spMapper.adderAsSelect(parameter);      assertEquals((Integer) 5, parameter.getSum());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testAdderAsSelectDoubleCall2", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testAdderAsSelectDoubleCall2() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter parameter = new Parameter();      parameter.setAddend1(2);      parameter.setAddend2(3);      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      spMapper.adderAsSelect(parameter);      assertEquals((Integer) 5, parameter.getSum());      parameter = new Parameter();      parameter.setAddend1(4);      parameter.setAddend2(5);      spMapper.adderAsSelect(parameter);      assertEquals((Integer) 9, parameter.getSum());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testAdderAsUpdate", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testAdderAsUpdate() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter parameter = new Parameter();      parameter.setAddend1(2);      parameter.setAddend2(3);      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      spMapper.adderAsUpdate(parameter);      assertEquals((Integer) 5, parameter.getSum());      parameter = new Parameter();      parameter.setAddend1(2);      parameter.setAddend2(3);      spMapper.adderAsUpdate(parameter);      assertEquals((Integer) 5, parameter.getSum());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testEchoDate", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testEchoDate() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      HashMap<String, Object> parameter = new HashMap<>();      Date now = new Date();      parameter.put(\"input date\", now);      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      spMapper.echoDate(parameter);      java.sql.Date outDate = new java.sql.Date(now.getTime());      assertEquals(outDate.toString(), parameter.get(\"output date\").toString());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testAdderAsUpdateWithParameterMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testAdderAsUpdateWithParameterMap() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Map<String, Object> parms = new HashMap<>();      parms.put(\"addend1\", 3);      parms.put(\"addend2\", 4);      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      spMapper.adderWithParameterMap(parms);      assertEquals(7, parms.get(\"sum\"));      parms = new HashMap<>();      parms.put(\"addend1\", 2);      parms.put(\"addend2\", 3);      spMapper.adderWithParameterMap(parms);      assertEquals(5, parms.get(\"sum\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCallWithResultSet1", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCallWithResultSet1() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      Name name = spMapper.getName(1);      assertNotNull(name);      assertEquals(\"Wilma\", name.getFirstName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCallWithResultSet2", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCallWithResultSet2() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      Map<String, Object> parms = new HashMap<>();      parms.put(\"lowestId\", 1);      List<Name> names = spMapper.getNames(parms);      assertEquals(3, names.size());      assertEquals(3, parms.get(\"totalRows\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCallWithResultSet3", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCallWithResultSet3() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      Map<String, Object> parms = new HashMap<>();      parms.put(\"lowestId\", 2);      List<Name> names = spMapper.getNames(parms);      assertEquals(2, parms.get(\"totalRows\"));      assertEquals(2, names.size());      parms = new HashMap<>();      parms.put(\"lowestId\", 3);      names = spMapper.getNames(parms);      assertEquals(1, names.size());      assertEquals(1, parms.get(\"totalRows\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCallWithResultSet4", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCallWithResultSet4() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      Map<String, Object> parms = new HashMap<>();      parms.put(\"lowestId\", 2);      List<Name> names = spMapper.getNames(parms);      assertEquals(2, parms.get(\"totalRows\"));      assertEquals(2, names.size());      parms = new HashMap<>();      parms.put(\"lowestId\", 2);      names = spMapper.getNames(parms);      assertEquals(2, names.size());      assertEquals(2, parms.get(\"totalRows\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testGetNamesWithArray", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void testGetNamesWithArray() throws SQLException {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      Array array = sqlSession.getConnection().createArrayOf(\"int\", new Integer[] { 1, 2, 5 });      Map<String, Object> parms = new HashMap<>();      parms.put(\"ids\", array);      List<Name> names = spMapper.getNamesWithArray(parms);      Object[] returnedIds = (Object[]) parms.get(\"returnedIds\");      assertEquals(4, returnedIds.length);      assertEquals(3, parms.get(\"requestedRows\"));      assertEquals(2, names.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testGetNamesAndItems", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testGetNamesAndItems() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      List<List<?>> results = spMapper.getNamesAndItems();      assertEquals(2, results.size());      assertEquals(4, results.get(0).size());      assertEquals(3, results.get(1).size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testAdderAsSelectAnnotated", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testAdderAsSelectAnnotated() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter parameter = new Parameter();      parameter.setAddend1(2);      parameter.setAddend2(3);      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      spMapper.adderAsSelectAnnotated(parameter);      assertEquals((Integer) 5, parameter.getSum());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testAdderAsSelectDoubleCallAnnotated1", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testAdderAsSelectDoubleCallAnnotated1() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter parameter = new Parameter();      parameter.setAddend1(2);      parameter.setAddend2(3);      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      spMapper.adderAsSelectAnnotated(parameter);      assertEquals((Integer) 5, parameter.getSum());      parameter = new Parameter();      parameter.setAddend1(2);      parameter.setAddend2(3);      spMapper.adderAsSelectAnnotated(parameter);      assertEquals((Integer) 5, parameter.getSum());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testAdderAsSelectDoubleCallAnnotated2", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testAdderAsSelectDoubleCallAnnotated2() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter parameter = new Parameter();      parameter.setAddend1(2);      parameter.setAddend2(3);      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      spMapper.adderAsSelectAnnotated(parameter);      assertEquals((Integer) 5, parameter.getSum());      parameter = new Parameter();      parameter.setAddend1(4);      parameter.setAddend2(5);      spMapper.adderAsSelectAnnotated(parameter);      assertEquals((Integer) 9, parameter.getSum());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testAdderAsUpdateAnnotated", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testAdderAsUpdateAnnotated() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Parameter parameter = new Parameter();      parameter.setAddend1(2);      parameter.setAddend2(3);      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      spMapper.adderAsUpdateAnnotated(parameter);      assertEquals((Integer) 5, parameter.getSum());      parameter = new Parameter();      parameter.setAddend1(2);      parameter.setAddend2(3);      spMapper.adderAsUpdateAnnotated(parameter);      assertEquals((Integer) 5, parameter.getSum());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCallWithResultSet1Annotated", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCallWithResultSet1Annotated() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      Name name = spMapper.getNameAnnotated(1);      assertNotNull(name);      assertEquals(\"Wilma\", name.getFirstName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCallWithResultSet1_a2", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCallWithResultSet1_a2() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      Name name = spMapper.getNameAnnotatedWithXMLResultMap(1);      assertNotNull(name);      assertEquals(\"Wilma\", name.getFirstName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCallWithResultSet2_a1", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCallWithResultSet2_a1() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      Map<String, Object> parms = new HashMap<>();      parms.put(\"lowestId\", 1);      List<Name> names = spMapper.getNamesAnnotated(parms);      assertEquals(3, names.size());      assertEquals(3, parms.get(\"totalRows\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCallWithResultSet2_a2", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCallWithResultSet2_a2() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      Map<String, Object> parms = new HashMap<>();      parms.put(\"lowestId\", 1);      List<Name> names = spMapper.getNamesAnnotatedWithXMLResultMap(parms);      assertEquals(3, names.size());      assertEquals(3, parms.get(\"totalRows\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCallWithResultSet3_a1", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCallWithResultSet3_a1() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      Map<String, Object> parms = new HashMap<>();      parms.put(\"lowestId\", 2);      List<Name> names = spMapper.getNamesAnnotated(parms);      assertEquals(2, parms.get(\"totalRows\"));      assertEquals(2, names.size());      parms = new HashMap<>();      parms.put(\"lowestId\", 3);      names = spMapper.getNamesAnnotated(parms);      assertEquals(1, names.size());      assertEquals(1, parms.get(\"totalRows\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCallWithResultSet3_a2", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCallWithResultSet3_a2() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      Map<String, Object> parms = new HashMap<>();      parms.put(\"lowestId\", 2);      List<Name> names = spMapper.getNamesAnnotatedWithXMLResultMap(parms);      assertEquals(2, parms.get(\"totalRows\"));      assertEquals(2, names.size());      parms = new HashMap<>();      parms.put(\"lowestId\", 3);      names = spMapper.getNamesAnnotatedWithXMLResultMap(parms);      assertEquals(1, names.size());      assertEquals(1, parms.get(\"totalRows\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCallWithResultSet4_a1", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCallWithResultSet4_a1() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      Map<String, Object> parms = new HashMap<>();      parms.put(\"lowestId\", 2);      List<Name> names = spMapper.getNamesAnnotated(parms);      assertEquals(2, parms.get(\"totalRows\"));      assertEquals(2, names.size());      parms = new HashMap<>();      parms.put(\"lowestId\", 2);      names = spMapper.getNamesAnnotated(parms);      assertEquals(2, names.size());      assertEquals(2, parms.get(\"totalRows\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCallWithResultSet4_a2", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCallWithResultSet4_a2() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      Map<String, Object> parms = new HashMap<>();      parms.put(\"lowestId\", 2);      List<Name> names = spMapper.getNamesAnnotatedWithXMLResultMap(parms);      assertEquals(2, parms.get(\"totalRows\"));      assertEquals(2, names.size());      parms = new HashMap<>();      parms.put(\"lowestId\", 2);      names = spMapper.getNamesAnnotatedWithXMLResultMap(parms);      assertEquals(2, names.size());      assertEquals(2, parms.get(\"totalRows\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCallLowHighWithResultSet", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCallLowHighWithResultSet() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      List<Name> names = spMapper.getNamesAnnotatedLowHighWithXMLResultMap(1, 1);      assertEquals(1, names.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testGetNamesWithArray_a1", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void testGetNamesWithArray_a1() throws SQLException {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      Array array = sqlSession.getConnection().createArrayOf(\"int\", new Integer[] { 1, 2, 5 });      Map<String, Object> parms = new HashMap<>();      parms.put(\"ids\", array);      List<Name> names = spMapper.getNamesWithArrayAnnotated(parms);      Object[] returnedIds = (Object[]) parms.get(\"returnedIds\");      assertEquals(4, returnedIds.length);      assertEquals(3, parms.get(\"requestedRows\"));      assertEquals(2, names.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testGetNamesWithArray_a2", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void testGetNamesWithArray_a2() throws SQLException {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      Array array = sqlSession.getConnection().createArrayOf(\"int\", new Integer[] { 1, 2, 5 });      Map<String, Object> parms = new HashMap<>();      parms.put(\"ids\", array);      List<Name> names = spMapper.getNamesWithArrayAnnotatedWithXMLResultMap(parms);      Object[] returnedIds = (Object[]) parms.get(\"returnedIds\");      assertEquals(4, returnedIds.length);      assertEquals(3, parms.get(\"requestedRows\"));      assertEquals(2, names.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testGetNamesAndItems_a2", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testGetNamesAndItems_a2() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      List<List<?>> results = spMapper.getNamesAndItemsAnnotatedWithXMLResultMap();      assertEquals(2, results.size());      assertEquals(4, results.get(0).size());      assertEquals(3, results.get(1).size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testGetNamesAndItems_a3", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testGetNamesAndItems_a3() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      List<List<?>> results = spMapper.getNamesAndItemsAnnotatedWithXMLResultMapArray();      assertEquals(2, results.size());      assertEquals(4, results.get(0).size());      assertEquals(3, results.get(1).size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testGetNamesAndItemsLinked", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testGetNamesAndItemsLinked() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      List<Name> names = spMapper.getNamesAndItemsLinked();      assertEquals(4, names.size());      assertEquals(2, names.get(0).getItems().size());      assertEquals(1, names.get(1).getItems().size());      assertNull(names.get(2).getItems());      assertNull(names.get(3).getItems());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testGetNamesAndItemsLinkedWithNoMatchingInfo", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testGetNamesAndItemsLinkedWithNoMatchingInfo() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      List<Name> names = spMapper.getNamesAndItemsLinkedById(0);      assertEquals(1, names.size());      assertEquals(2, names.get(0).getItems().size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testMultipleForeignKeys", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testMultipleForeignKeys() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      SPMapper spMapper = sqlSession.getMapper(SPMapper.class);      List<Book> books = spMapper.getBookAndGenre();      assertEquals(\"Book1\", books.get(0).getName());      assertEquals(\"Genre1\", books.get(0).getGenre().getName());      assertEquals(\"Book2\", books.get(1).getName());      assertEquals(\"Genre2\", books.get(1).getGenre().getName());      assertEquals(\"Book3\", books.get(2).getName());      assertEquals(\"Genre1\", books.get(2).getGenre().getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java", "stars": "15", "class": {"name": "SPTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getHiveQueryExecutor", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "HiveQueryExecutor", "snippet": "  public static HiveQueryExecutor getHiveQueryExecutor() {    HiveQueryExecutorModule hqem = new HiveQueryExecutorModule();    try {      return new RealHiveQueryExecutor(hqem.provideHiveConf(),          hqem.provideCliSessionState(), new CliDriver());    } catch (Exception e) {      throw new RuntimeException(e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/HiveUtils.java", "stars": "18", "class": {"name": "HiveUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "expandHiveAuxJarsPath", "params": ["String"], "throws": ["IOException"], "modifiers": ["static"], "return_type": "String", "snippet": "  static String expandHiveAuxJarsPath(String original) throws IOException {    if (original == null || original.contains(\".jar\"))      return original;    File[] files = new File(original).listFiles();    if (files == null || files.length == 0) {      LOG.info(\"No files in to expand in aux jar path. Returning original parameter\");      return original;    }    return filesToURIString(files);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/HiveUtils.java", "stars": "18", "class": {"name": "HiveUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "filesToURIString", "params": ["File"], "throws": ["IOException"], "modifiers": ["static"], "return_type": "String", "snippet": "  static String filesToURIString(File[] files) throws IOException {    StringBuffer sb = new StringBuffer();    for (int i = 0; i < files.length; i++) {      sb.append(\"file:///\").append(files[i].getCanonicalPath());      if (i != files.length - 1)        sb.append(\",\");    }    return sb.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/HiveUtils.java", "stars": "18", "class": {"name": "HiveUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid contextLoads() {\t}", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/test/java/com/github/taoroot/taoiot/TaoiotApplicationTests.java", "stars": "6", "class": {"name": "TaoiotApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/LabelRenderer.java", "stars": "2", "class": {"name": "LabelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/LabelRenderer.java", "stars": "2", "class": {"name": "LabelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/LabelRenderer.java", "stars": "2", "class": {"name": "LabelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onTouchEvent (android.view.MotionEvent p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/LabelRenderer.java", "stars": "2", "class": {"name": "LabelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/LabelRenderer.java", "stars": "2", "class": {"name": "LabelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/LabelRenderer.java", "stars": "2", "class": {"name": "LabelRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "firstName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "SignupUserRequest", "snippet": "  public SignupUserRequest firstName(String firstName) {    this.firstName = firstName;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFirstName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getFirstName() {    return firstName;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFirstName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFirstName(String firstName) {    this.firstName = firstName;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "lastName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "SignupUserRequest", "snippet": "  public SignupUserRequest lastName(String lastName) {    this.lastName = lastName;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getLastName() {    return lastName;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLastName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLastName(String lastName) {    this.lastName = lastName;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "emailAddress", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "SignupUserRequest", "snippet": "  public SignupUserRequest emailAddress(String emailAddress) {    this.emailAddress = emailAddress;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEmailAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getEmailAddress() {    return emailAddress;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEmailAddress", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setEmailAddress(String emailAddress) {    this.emailAddress = emailAddress;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "password", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "SignupUserRequest", "snippet": "  public SignupUserRequest password(String password) {    this.password = password;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getPassword() {    return password;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPassword(String password) {    this.password = password;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mobileNumber", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "SignupUserRequest", "snippet": "  public SignupUserRequest mobileNumber(String mobileNumber) {    this.mobileNumber = mobileNumber;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMobileNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getMobileNumber() {    return mobileNumber;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMobileNumber", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMobileNumber(String mobileNumber) {    this.mobileNumber = mobileNumber;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(java.lang.Object o) {    if (this == o) {      return true;    }    if (o == null || getClass() != o.getClass()) {      return false;    }    SignupUserRequest signupUserRequest = (SignupUserRequest) o;    return Objects.equals(this.firstName, signupUserRequest.firstName) &&        Objects.equals(this.lastName, signupUserRequest.lastName) &&        Objects.equals(this.emailAddress, signupUserRequest.emailAddress) &&        Objects.equals(this.password, signupUserRequest.password) &&        Objects.equals(this.mobileNumber, signupUserRequest.mobileNumber);  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return Objects.hash(firstName, lastName, emailAddress, password, mobileNumber);  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    StringBuilder sb = new StringBuilder();    sb.append(\"class SignupUserRequest {\\n\");        sb.append(\"    firstName: \").append(toIndentedString(firstName)).append(\"\\n\");    sb.append(\"    lastName: \").append(toIndentedString(lastName)).append(\"\\n\");    sb.append(\"    emailAddress: \").append(toIndentedString(emailAddress)).append(\"\\n\");    sb.append(\"    password: \").append(toIndentedString(password)).append(\"\\n\");    sb.append(\"    mobileNumber: \").append(toIndentedString(mobileNumber)).append(\"\\n\");    sb.append(\"}\");    return sb.toString();  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toIndentedString", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String toIndentedString(java.lang.Object o) {    if (o == null) {      return \"null\";    }    return o.toString().replace(\"\\n\", \"\\n    \");  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/SignupUserRequest.java", "stars": "2", "class": {"name": "SignupUserRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void test() {    // given:    @Cleanup var publisher = new SubmissionPublisher<String>();    var atomicInteger = new AtomicInteger();    var subscriber = new Flow.Subscriber<String>() {      @Override      public void onSubscribe(Flow.Subscription subscription) {        System.out.printf(\"on subscribe: %s%n\", subscription);        subscription.request(Integer.MAX_VALUE); // backpressure should comes here...      }      @Override      public void onNext(String item) {        System.out.printf(\"on next: %s%n\", item);        atomicInteger.incrementAndGet();      }      @Override      public void onError(Throwable throwable) {        System.out.printf(\"error: %s%n\", throwable.getLocalizedMessage());      }      @Override      public void onComplete() {        System.out.printf(\"done!%n\");      }    };    // when:    publisher.subscribe(subscriber);    List.of(\"ololo\", \"trololo\")        .forEach(publisher::submit);    // then:    await().atMost(Duration.TWO_SECONDS)           .until(() -> assertThat(atomicInteger.get()).isEqualTo(2));  }", "url": "https://raw.githubusercontent.com/daggerok/hands-on-reactive-programming-with-java-12/master/src/test/java/daggerok/_11/SubscriptionTest.java", "stars": "2", "class": {"name": "SubscriptionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "IconSubTitleViewHolder", "snippet": "    public IconSubTitleViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());        ItemlistIconSubTitleBinding binding = ItemlistIconSubTitleBinding.inflate(layoutInflater);        return new IconSubTitleViewHolder(binding);    }", "url": "https://raw.githubusercontent.com/aiqfome/aiqInput/master/aiqinput/src/main/java/com/aiqfome/aiqinput/IconSubTitleAdapter.java", "stars": "2", "class": {"name": "IconSubTitleAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onBindViewHolder", "params": ["IconSubTitleViewHolder", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(@NonNull IconSubTitleViewHolder holder, int position) {        IconSubTitleItem item = itemList.get(position);        holder.bind(item);        holder.itemView.setOnClickListener(itemClickListener(item));    }", "url": "https://raw.githubusercontent.com/aiqfome/aiqInput/master/aiqinput/src/main/java/com/aiqfome/aiqinput/IconSubTitleAdapter.java", "stars": "2", "class": {"name": "IconSubTitleAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return itemList != null ? itemList.size() : 0;    }", "url": "https://raw.githubusercontent.com/aiqfome/aiqInput/master/aiqinput/src/main/java/com/aiqfome/aiqinput/IconSubTitleAdapter.java", "stars": "2", "class": {"name": "IconSubTitleAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "itemClickListener", "params": ["IconSubTitleItem<Type>"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "View", "snippet": "    public abstract View.OnClickListener itemClickListener(IconSubTitleItem<Type> object);    static class IconSubTitleViewHolder extends RecyclerView.ViewHolder {        ItemlistIconSubTitleBinding binding;        IconSubTitleViewHolder(ItemlistIconSubTitleBinding binding) {            super(binding.getRoot());            this.binding = binding;        }        void bind(IconSubTitleItem viewObject) {            binding.setViewObject(viewObject);            binding.tvSubtitle.setVisibility                    (viewObject.getSubTitle().isEmpty() ? View.INVISIBLE : View.VISIBLE);            binding.ivIcon.setImageDrawable(viewObject.getIcon());            binding.executePendingBindings();        }    }", "url": "https://raw.githubusercontent.com/aiqfome/aiqInput/master/aiqinput/src/main/java/com/aiqfome/aiqinput/IconSubTitleAdapter.java", "stars": "2", "class": {"name": "IconSubTitleAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "bind", "params": ["IconSubTitleItem"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "        void bind(IconSubTitleItem viewObject) {            binding.setViewObject(viewObject);            binding.tvSubtitle.setVisibility                    (viewObject.getSubTitle().isEmpty() ? View.INVISIBLE : View.VISIBLE);            binding.ivIcon.setImageDrawable(viewObject.getIcon());            binding.executePendingBindings();        }", "url": "https://raw.githubusercontent.com/aiqfome/aiqInput/master/aiqinput/src/main/java/com/aiqfome/aiqinput/IconSubTitleAdapter.java", "stars": "2", "class": {"name": "IconSubTitleViewHolder", "extends": "RecyclerView", "implements": null, "modifiers": ["static"]}}, {"method_name": "insertExecutableQueue", "params": ["ExecutableFlow"], "throws": ["ExecutorManagerException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void insertExecutableQueue(final ExecutableFlow flow)            throws ExecutorManagerException {//        try {//            final String useExecutorParam =//                    flow.getExecutionOptions().getFlowParameters().get(ExecutionOptions.USE_EXECUTOR);//            final String executorId = StringUtils.isNotEmpty(useExecutorParam) ? useExecutorParam : flow.getExecutionId() + \"\";////            final String INSERT_EXECUTABLE_QUEUE = \"INSERT INTO execution_queue \"//                    + \"(exec_id, executor_id, status, error_count, update_time, flow_priority) \"//                    + \"values (?,?,?,?,?,?)\";//            final long submitTime = System.currentTimeMillis();//            flow.setSubmitTime(submitTime);////            int result = 0;//            result = dbOperator.update(INSERT_EXECUTABLE_QUEUE, flow.getExecutionId(),executorId, Status.READY, 0, flow.getUpdateTime(), 1);//        } catch (final SQLException e) {//            throw new ExecutorManagerException(\"insert executableFlow {} to distribute queue failed\" + flow.toString(), e);//        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionQueueDao.java", "stars": "18", "class": {"name": "ExecutionQueueDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "uploadExecutableQueue", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void uploadExecutableQueue(final ExecutableFlow flow){    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionQueueDao.java", "stars": "18", "class": {"name": "ExecutionQueueDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchExecutableQueue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "    public List<ExecutableFlow> fetchExecutableQueue(){//        try {//            return this.dbOperator.query(FetchExecutableQueueHandler.FETCH_QUEUED_EXECUTABLE_FLOW,//                    new FetchExecutableQueueHandler());//        } catch (final SQLException e) {//            throw new ExecutorManagerException(\"Error fetching active flows\", e);//        }        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionQueueDao.java", "stars": "18", "class": {"name": "ExecutionQueueDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteExecutableQueue", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void deleteExecutableQueue(ExecutableFlow flow){    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionQueueDao.java", "stars": "18", "class": {"name": "ExecutionQueueDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<Pair>", "snippet": "        public List<Pair<ExecutionReference, ExecutableFlow>> handle(final ResultSet rs)                throws SQLException {            if (!rs.next()) {                return Collections.emptyList();            }            final List<Pair<ExecutionReference, ExecutableFlow>> execFlows =                    new ArrayList<>();            do {                final int id = rs.getInt(1);                final int encodingType = rs.getInt(2);                final byte[] data = rs.getBytes(3);                if (data == null) {                    logger.error(\"Found a flow with empty data blob exec_id: \" + id);                } else {                    final EncodingType encType = EncodingType.fromInteger(encodingType);                    try {                        final ExecutableFlow exFlow =                                ExecutableFlow.createExecutableFlowFromObject(                                        GZIPUtils.transformBytesToObject(data, encType));                        final ExecutionReference ref = new ExecutionReference(id);                        execFlows.add(new Pair<>(ref, exFlow));                    } catch (final IOException e) {                        throw new SQLException(\"Error retrieving flow data \" + id, e);                    }                }            } while (rs.next());            return execFlows;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionQueueDao.java", "stars": "18", "class": {"name": "FetchExecutableQueueHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "getSpriteForSide", "params": ["Direction", "BlockRenderView", "BlockState", "BlockPos", "Random"], "throws": null, "modifiers": ["public"], "return_type": "Sprite", "snippet": "\tpublic Sprite getSpriteForSide(Direction side, BlockRenderView view, BlockState state, BlockPos pos, Random random) {\t\tBlockState[][] blocks = getAll(view, side, pos);\t\treturn this.connects[BITHACK_TO_CTM[awfulBitHack(blocks, state)]];\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/sprite/FullCTMSpriteProvider.java", "stars": "3", "class": {"name": "FullCTMSpriteProvider", "extends": "ConnectingSpriteProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "awfulBitHack", "params": ["BlockState", "BlockState"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "\tprivate int awfulBitHack(BlockState[][] blocks, BlockState state) {\t\tblocks[1][1] = state;\t\t//System.out.println(Arrays.deepToString(blocks));\t\tint result = 0;\t\tint i = 0;\t\tfor(int j = 0; j < blocks.length; j++) {\t\t\tfor(int k = 0; k < blocks.length; k++) {\t\t\t\tif(j == 1 && k == 1) {\t\t\t\t\tcontinue;\t\t\t\t}\t\t\t\tif(connectionMatcher.test(state, blocks[blocks.length - (k + 1)][blocks.length - (j + 1)])) {\t\t\t\t\tresult |= (1 << i);\t\t\t\t}\t\t\t\ti++;\t\t\t}\t\t}\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/sprite/FullCTMSpriteProvider.java", "stars": "3", "class": {"name": "FullCTMSpriteProvider", "extends": "ConnectingSpriteProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/maptypehandler/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/maptypehandler/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/maptypehandler/MapTypeHandlerTest.java", "stars": "15", "class": {"name": "MapTypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUserFromAnnotation", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUserFromAnnotation() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1, \"User1\");      Assertions.assertEquals(\"User1\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/maptypehandler/MapTypeHandlerTest.java", "stars": "15", "class": {"name": "MapTypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUserFromXML", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUserFromXML() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Map<String, Object> params = new HashMap<>();      params.put(\"id\", 1);      params.put(\"name\", \"User1\");      Assertions.assertThrows(PersistenceException.class, () -> mapper.getUserXML(params));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/maptypehandler/MapTypeHandlerTest.java", "stars": "15", "class": {"name": "MapTypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "secured", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String secured() {        log.info(\"Inside secured()\");        return \"Hello user !!! : \" + LocalDateTime.now();    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-config/src/main/java/com/soft1851/springboot/config/controller/SecuredServerController.java", "stars": "3", "class": {"name": "SecuredServerController", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return delegate.getId();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LruCache.java", "stars": "15", "class": {"name": "LruCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getSize() {    return delegate.getSize();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LruCache.java", "stars": "15", "class": {"name": "LruCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "setSize", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSize(final int size) {    keyMap = new LinkedHashMap<Object, Object>(size, .75F, true) {      private static final long serialVersionUID = 4267176411845948333L;      @Override      protected boolean removeEldestEntry(Map.Entry<Object, Object> eldest) {        boolean tooBig = size() > size;        if (tooBig) {          eldestKey = eldest.getKey();        }        return tooBig;      }    };  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LruCache.java", "stars": "15", "class": {"name": "LruCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "putObject", "params": ["Object", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void putObject(Object key, Object value) {    delegate.putObject(key, value);    cycleKeyList(key);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LruCache.java", "stars": "15", "class": {"name": "LruCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getObject", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getObject(Object key) {    keyMap.get(key); //touch    return delegate.getObject(key);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LruCache.java", "stars": "15", "class": {"name": "LruCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "removeObject", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object removeObject(Object key) {    return delegate.removeObject(key);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LruCache.java", "stars": "15", "class": {"name": "LruCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void clear() {    delegate.clear();    keyMap.clear();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LruCache.java", "stars": "15", "class": {"name": "LruCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "cycleKeyList", "params": ["Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void cycleKeyList(Object key) {    keyMap.put(key, key);    if (eldestKey != null) {      delegate.removeObject(eldestKey);      eldestKey = null;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LruCache.java", "stars": "15", "class": {"name": "LruCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\tpublic View getView(int position, View convertView, ViewGroup parent)\t{\t\t// holder pattern\t\tHolder holder = null;\t\tif (convertView == null)\t\t{\t\t\tholder = new Holder();\t\t\tconvertView = layoutInflater.inflate(R.layout.listview, null);\t\t\tholder.setTextView1((TextView) convertView.findViewById(R.id.textView1));\t\t\tholder.setTextView2((TextView) convertView.findViewById(R.id.textView2));\t\t\tconvertView.setTag(holder);\t\t}\t\telse\t\t{\t\t\tholder = (Holder) convertView.getTag();\t\t}\t\tholder.getTextView1().setText(getItem(position));\t\tholder.getTextView2().setText(getItem(position));\t\treturn convertView;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/CustomArrayAdapter.java", "stars": "74", "class": {"name": "CustomArrayAdapter", "extends": "ArrayAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onFocusChanged", "params": ["boolean", "int", "Rect"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onFocusChanged(boolean focused, int direction,            Rect previouslyFocusedRect) {        if (focused) {            super.onFocusChanged(focused, direction, previouslyFocusedRect);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/android-actionbar-master/actionbar/src/com/markupartist/android/widget/ScrollingTextView.java", "stars": "74", "class": {"name": "ScrollingTextView", "extends": "TextView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onWindowFocusChanged", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onWindowFocusChanged(boolean focused) {        if (focused) {            super.onWindowFocusChanged(focused);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/android-actionbar-master/actionbar/src/com/markupartist/android/widget/ScrollingTextView.java", "stars": "74", "class": {"name": "ScrollingTextView", "extends": "TextView", "implements": null, "modifiers": ["public"]}}, {"method_name": "isFocused", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFocused() {        return true;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/android-actionbar-master/actionbar/src/com/markupartist/android/widget/ScrollingTextView.java", "stars": "74", "class": {"name": "ScrollingTextView", "extends": "TextView", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleResult", "params": ["ResultContext<V>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void handleResult(ResultContext<? extends V> context) {    final V value = context.getResultObject();    final MetaObject mo = MetaObject.forObject(value, objectFactory, objectWrapperFactory, reflectorFactory);    // TODO is that assignment always true?    final K key = (K) mo.getValue(mapKey);    mappedResults.put(key, value);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/result/DefaultMapResultHandler.java", "stars": "15", "class": {"name": "DefaultMapResultHandler", "extends": null, "implements": ["ResultHandler"], "modifiers": ["public"]}}, {"method_name": "getMappedResults", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<K,V>", "snippet": "  public Map<K, V> getMappedResults() {    return mappedResults;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/result/DefaultMapResultHandler.java", "stars": "15", "class": {"name": "DefaultMapResultHandler", "extends": null, "implements": ["ResultHandler"], "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "SandwichViewHolder", "snippet": "    public SandwichViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.home_card_view,parent,false);        return new SandwichViewHolder(view);    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/Adapter/SandwichAdapter.java", "stars": "2", "class": {"name": "SandwichAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["SandwichViewHolder", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(@NonNull SandwichViewHolder holder, int position) {        Sandwich sandwich = mSandwichList.get(position);        holder.sandwichName.setText(sandwich.getMainName());        Picasso.get()                .load(sandwich.getImage())                .placeholder(R.drawable.placeholder)                .error(R.drawable.placeholder)                .into(holder.snadwichImage);    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/Adapter/SandwichAdapter.java", "stars": "2", "class": {"name": "SandwichAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return mSandwichList.size();    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/Adapter/SandwichAdapter.java", "stars": "2", "class": {"name": "SandwichAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "launchDetailActivity", "params": ["View", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void launchDetailActivity(View v, int position) {            Intent intent = new Intent(v.getContext(), DetailActivity.class);            intent.putExtra(DetailActivity.EXTRA_POSITION,position);            v.getContext().startActivity(intent);        }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/Adapter/SandwichAdapter.java", "stars": "2", "class": {"name": "SandwichViewHolder", "extends": "RecyclerView", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CollectionViewRenderer.java", "stars": "2", "class": {"name": "CollectionViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CollectionViewRenderer.java", "stars": "2", "class": {"name": "CollectionViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init() {            this.jobConf = super.getPluginJobConf();            this.validateParams();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prepare", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void prepare() {            ElasticRestClient restClient;            Map<String, Object> clientConfig = jobConf.getMap(ElasticKey.CLIENT_CONFIG);            if(StringUtils.isNotBlank(userName) && StringUtils.isNotBlank(password)){                restClient = ElasticRestClient.custom(endPoints, userName,                        password, clientConfig);            }else{                restClient = ElasticRestClient.custom(endPoints, clientConfig);            }            String indexName = this.jobConf.getNecessaryValue(ElasticKey.INDEX_NAME, ElasticWriterErrorCode.REQUIRE_VALUE);            String indexType = this.jobConf.getString(ElasticKey.INDEX_TYPE, \"\");            String columnNameSeparator = this.jobConf.getString(ElasticKey.COLUMN_NAME_SEPARATOR, ElasticColumn.DEFAULT_NAME_SPLIT);            List<Object> rawColumnList = jobConf                    .getList(ElasticKey.PROPS_COLUMN);            List<ElasticColumn> resolvedColumnList = new ArrayList<>();            Map<Object, Object> props = resolveColumn(restClient, indexName, indexType,                    rawColumnList, resolvedColumnList, columnNameSeparator);            this.jobConf.set(ElasticKey.PROPS_COLUMN, resolvedColumnList);            //clean up            if(jobConf.getBool(ElasticKey.CLEANUP, false) &&                    restClient.existIndices(indexName)){                if(!restClient.deleteIndices(indexName)){                    throw DataXException.asDataXException(ElasticWriterErrorCode.DELETE_INDEX_ERROR, \"cannot delete index:[\" + indexName +\"]\");                }            }            //if the index is not existed, create it            restClient.createIndex(indexName, indexType, jobConf.getMap(ElasticKey.SETTINGS),                    props);            restClient.close();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "split", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<Configuration>", "snippet": "        public List<Configuration> split(int mandatoryNumber) {            List<Configuration> configurations = new ArrayList<>();            for( int i = 0; i < mandatoryNumber; i++){                configurations.add(this.jobConf.clone());            }            return configurations;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "validateParams", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void validateParams(){            String endPoints = this.jobConf.getString(ElasticKey.ENDPOINTS);            if(StringUtils.isBlank(endPoints)){                throw DataXException.asDataXException(ElasticWriterErrorCode.REQUIRE_VALUE, \"'endPoints(elasticUrls)' is necessary\");            }            this.endPoints = endPoints.split(DEFAULT_ENDPOINT_SPLIT);            this.userName = this.jobConf.getString(ElasticKey.USERNAME, \"\");            this.password = this.jobConf.getString(ElasticKey.PASSWORD, \"\");            if(StringUtils.isNotBlank(this.password)){                try {                    this.password = (String)CryptoUtils.string2Object(this.password);                } catch (Exception e) {                    throw DataXException.asDataXException(ElasticWriterErrorCode.CONFIG_ERROR, \"decrypt password failed\");                }            }            this.jobConf.getNecessaryValue(ElasticKey.INDEX_NAME, ElasticWriterErrorCode.REQUIRE_VALUE);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "resolveColumn", "params": ["ElasticRestClient", "String", "String", "List<Object>", "List<ElasticColumn>", "String"], "throws": null, "modifiers": ["private"], "return_type": "Map<Object,Object>", "snippet": "        private Map<Object, Object> resolveColumn(ElasticRestClient client,                                                  String index, String type ,                                                  List<Object> rawColumnList, List<ElasticColumn> outputColumn,                                                  String columnNameSeparator){            Map<Object, Object> properties;            if(null != rawColumnList && !rawColumnList.isEmpty()) {                //allow to custom the fields of properties                properties = new HashMap<>(rawColumnList.size());                rawColumnList.forEach(columnRaw -> {                    String raw = columnRaw.toString();                    ElasticColumn column = JSONObject                            .parseObject(raw, ElasticColumn.class);                    if (StringUtils.isNotBlank(column.getName()) && StringUtils.isNotBlank(column.getType())) {                        outputColumn.add(column);                        if (!column.getName().equals(DEFAULT_ID) && ElasticFieldDataType.valueOf(column.getType().toUpperCase())                                != ElasticFieldDataType.ALIAS) {                            Map property = JSONObject.parseObject(raw, Map.class);                            property.remove(ElasticKey.PROPS_COLUMN_NAME);                            properties.put(column.getName(), property);                        }                    }                });            }else{                if(!client.existIndices(index)){                    throw DataXException.asDataXException(ElasticWriterErrorCode.INDEX_NOT_EXIST,                            \"cannot get columns from index:[\" + index +\"]\");                }                //get properties from index existed                properties = client.getProps(index, type);                resolveColumn(outputColumn, null, properties, columnNameSeparator);                //Reverse outputColumn                Collections.reverse(outputColumn);            }            return properties;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "resolveColumn", "params": ["List<ElasticColumn>", "ElasticColumn", "Map<Object,Object>", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void resolveColumn(List<ElasticColumn> outputColumn, ElasticColumn column,                                   Map<Object, Object> propsMap, String columnNameSeparator){            propsMap.forEach((key, value) ->{                if(value instanceof Map){                    Map metaMap = (Map)value;                    if(null != metaMap.get(ElasticKey.PROPS_COLUMN_TYPE)){                        ElasticColumn levelColumn = new ElasticColumn();                        if(null != column) {                            levelColumn.setName(column.getName() + columnNameSeparator + key);                        }else{                            levelColumn.setName(String.valueOf(key));                        }                        levelColumn.setType(String.valueOf(metaMap.get(ElasticKey.PROPS_COLUMN_TYPE)));                        if(null != metaMap.get(ElasticKey.PROPS_COLUMN_TIMEZONE)){                            levelColumn.setTimezone(String.valueOf(metaMap.get(ElasticKey.PROPS_COLUMN_TIMEZONE)));                        }                        if(null != metaMap.get(ElasticKey.PROPS_COLUMN_FORMAT)){                            levelColumn.setFormat(String.valueOf(metaMap.get(ElasticKey.PROPS_COLUMN_FORMAT)));                        }                        outputColumn.add(levelColumn);                    }else if(null != metaMap.get(ElasticRestClient.FIELD_PROPS)                            && metaMap.get(ElasticRestClient.FIELD_PROPS) instanceof Map){                        ElasticColumn levelColumn = column;                        if(null == levelColumn){                            levelColumn = new ElasticColumn();                            levelColumn.setName(String.valueOf(key));                        }else{                            levelColumn.setName(levelColumn.getName() + columnNameSeparator + key);                        }                        resolveColumn(outputColumn, levelColumn, (Map)metaMap.get(ElasticRestClient.FIELD_PROPS),                                columnNameSeparator);                    }                }            });        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init() {            this.taskConf = super.getPluginJobConf();            indexName = this.taskConf.getString(ElasticKey.INDEX_NAME);            typeName = this.taskConf.getString(ElasticKey.INDEX_TYPE, ElasticRestClient.MAPPING_TYPE_DEFAULT);            columnNameSeparator = this.taskConf.getString(ElasticKey.COLUMN_NAME_SEPARATOR, ElasticColumn.DEFAULT_NAME_SPLIT);            int batchSize = this.taskConf.getInt(ElasticKey.BULK_ACTIONS, 1000);            int bulkPerTask = this.taskConf.getInt(ElasticKey.BULK_PER_TASK, 1);            columns = JSON.parseObject(this.taskConf.getString(ElasticKey.PROPS_COLUMN), new TypeReference<List<ElasticColumn>>(){            });            String userName = this.taskConf.getString(ElasticKey.USERNAME, \"\");            String password = this.taskConf.getString(ElasticKey.PASSWORD, \"\");            if(StringUtils.isNotBlank(password)){                try {                    password = (String) CryptoUtils.string2Object(password);                } catch (Exception e) {                    throw DataXException.asDataXException(ElasticWriterErrorCode.CONFIG_ERROR, \"decrypt password failed\");                }            }            String[] endPoints = this.taskConf.getString(ElasticKey.ENDPOINTS).split(DEFAULT_ENDPOINT_SPLIT);            if(StringUtils.isNotBlank(userName) && StringUtils.isNotBlank(password)){                restClient = ElasticRestClient.custom(endPoints, userName,                        password, this.taskConf.getMap(ElasticKey.CLIENT_CONFIG));            }else{                restClient = ElasticRestClient.custom(endPoints, this.taskConf.getMap(ElasticKey.CLIENT_CONFIG));            }            this.bulkProcessor = restClient.createBulk(buildListener(getTaskPluginCollector()), batchSize, bulkPerTask);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startWrite", "params": ["BasicDataReceiver<Object>", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startWrite(BasicDataReceiver<Object> receiver, Class<?> type) {            if(type.equals(DocWriteRequest.class)){                logger.info(\"Begin to write record to ElasticSearch\");                long count = 0;                DocWriteRequest request = null;                while(null != (request = (DocWriteRequest) receiver.getFromReader())){                    request.index(indexName);                    request.type(typeName);                    if(bulkError){                        throw DataXException.asDataXException(ElasticWriterErrorCode.BULK_REQ_ERROR, \"\");                    }                    this.bulkProcessor.add(request);                    count += 1;                }                this.bulkProcessor.close();                getTaskPluginCollector().collectMessage(WRITE_SIZE, String.valueOf(count));                logger.info(\"End to write record to ElasticSearch\");            }else{                super.startWrite(receiver, type);            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startWrite", "params": ["RecordReceiver"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startWrite(RecordReceiver lineReceiver) {            logger.info(\"Begin to write record to ElasticSearch\");            Record record = null;            long count = 0;            while(null != (record = lineReceiver.getFromReader())){                Map<String, Object> data = ElasticColumn.toData(record, columns, columnNameSeparator);                IndexRequest request = new IndexRequest(indexName, typeName);                request.source(data);                if(bulkError){                    throw DataXException.asDataXException(ElasticWriterErrorCode.BULK_REQ_ERROR, \"\");                }                this.bulkProcessor.add(request);                count += 1;            }            this.bulkProcessor.close();            getTaskPluginCollector().collectMessage(WRITE_SIZE, String.valueOf(count));            logger.info(\"End to write record to ElasticSearch\");        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy() {            if(null != restClient){                restClient.close();            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "buildListener", "params": ["TaskPluginCollector"], "throws": null, "modifiers": ["private"], "return_type": "BulkProcessor", "snippet": "        private BulkProcessor.Listener buildListener(final TaskPluginCollector pluginCollector){            return new BulkProcessor.Listener() {                @Override                public void beforeBulk(long l, BulkRequest bulkRequest) {                    bulkRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.NONE);                    logger.trace(\"do_bulk: \" + bulkRequest.getDescription());                }                @Override                public void afterBulk(long l, BulkRequest bulkRequest, BulkResponse bulkResponse) {                    BulkItemResponse[] response = bulkResponse.getItems();                    for (BulkItemResponse itemResponse : response) {                        if (itemResponse.isFailed()) {                            List<String> message = new ArrayList<>();                            message.add(String.valueOf(itemResponse.getFailure().getStatus().getStatus()));                            message.add(itemResponse.getId());                            message.add(itemResponse.getFailureMessage());                            pluginCollector.collectDirtyRecord(new DirtyRecord(), null, JSON.toJSONString(message));                        }                    }                }                @Override                public void afterBulk(long l, BulkRequest bulkRequest, Throwable throwable) {                    //Ignore interrupted error                    if(!(throwable instanceof  InterruptedException)){                        logger.error(throwable.getMessage(), throwable);                    }                   bulkError = true;                }            };        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getNombreUsuario", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getNombreUsuario() {        return nombreUsuario;    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/registoUsuario.java", "stars": "2", "class": {"name": "registoUsuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNombreUsuario", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNombreUsuario(String nombreUsuario) {        this.nombreUsuario = nombreUsuario;    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/registoUsuario.java", "stars": "2", "class": {"name": "registoUsuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEdad", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getEdad() {        return edad;    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/registoUsuario.java", "stars": "2", "class": {"name": "registoUsuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEdad", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEdad(int edad) {        this.edad = edad;    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/registoUsuario.java", "stars": "2", "class": {"name": "registoUsuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"registoUsuario{\" + \"nombreUsuario=\" + nombreUsuario + \", edad=\" + edad + '}';    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/registoUsuario.java", "stars": "2", "class": {"name": "registoUsuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "actualizar", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "   public void actualizar(String nombre, int edad){              if(nombre.equals(this.nombreUsuario)){           System.out.println(\"ingrese edad y nombre nuevos\");            String a=\"juan\";             int  b=   4;                this.nombreUsuario=a;           this.edad=b;           toString();       } else{             System.out.println(\"el nombre no coincide con el ingresado anteriormente\");                         }       }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/registoUsuario.java", "stars": "2", "class": {"name": "registoUsuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "borrar", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "   public void borrar(String nombre, int edad){              if(nombre.equals(this.nombreUsuario)){           System.out.println(\"ingrese edad y nombre nuevos\");            String a=null;             int  b=   0;                this.nombreUsuario=a;           this.edad=b;           toString();       } else{             System.out.println(\"el nombre no coincide con el ingresado anteriormente\");                         }       }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/registoUsuario.java", "stars": "2", "class": {"name": "registoUsuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(final String[] args) throws Exception {    Properties jobProps = HadoopSecureWrapperUtils.loadAzkabanProps();    HadoopConfigurationInjector.injectResources(new Props(null, jobProps));    if (HadoopSecureWrapperUtils.shouldProxy(jobProps)) {      String tokenFile = System.getenv(HADOOP_TOKEN_FILE_LOCATION);      UserGroupInformation proxyUser =          HadoopSecureWrapperUtils.setupProxyUser(jobProps, tokenFile, logger);      proxyUser.doAs(new PrivilegedExceptionAction<Void>() {        @Override        public Void run() throws Exception {          runSpark(args);          return null;        }      });    } else {      runSpark(args);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureSparkWrapper.java", "stars": "18", "class": {"name": "HadoopSecureSparkWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "runSpark", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void runSpark(String[] args) {    if (args.length == 0) {      throw new RuntimeException(\"SparkSubmit cannot run with zero args\");    }    // Arg String passed to here are long strings delimited by SparkJobArg.delimiter    // merge everything together and repartition based by our ^Z character, instead of by the    // default \"space\" character    StringBuilder concat = new StringBuilder();    concat.append(args[0]);    for (int i = 1; i < args.length; i++) {      concat.append(\" \" + args[i]);    }    String[] newArgs = concat.toString().split(SparkJobArg.delimiter);    // Sample: [--driver-java-options, , --master, yarn-cluster, --class, myclass,    // --conf, queue=default, --executor-memory, 1g, --num-executors, 15, my.jar, myparams]    logger.info(\"Args before adjusting driver java opts: \" + Arrays.toString(newArgs));    // Adjust driver java opts param    handleDriverJavaOpts(newArgs);    // If dynamic allocation policy for this jobtype is turned on, adjust related param    handleDynamicResourceAllocation(newArgs);    // If yarn cluster enables node labeling, adjust related param    newArgs = handleNodeLabeling(newArgs);    // Realign params after adjustment    newArgs = removeNullsFromArgArray(newArgs);    logger.info(\"Args after adjusting driver java opts: \" + Arrays.toString(newArgs));    org.apache.spark.deploy.SparkSubmit$.MODULE$.main(newArgs);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureSparkWrapper.java", "stars": "18", "class": {"name": "HadoopSecureSparkWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleDriverJavaOpts", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void handleDriverJavaOpts(String[] argArray) {    Configuration conf = new Configuration();    // Driver java opts is always the first elem(param name) and second elem(value) in the argArray    // Get current driver java opts here    StringBuilder driverJavaOptions = new StringBuilder(argArray[1]);    // In spark-submit, when both --driver-java-options and conf spark.driver.extraJavaOptions is used,    // spark-submit will only pick --driver-java-options, an arg we always have    // So if user gives --conf spark.driver.extraJavaOptions=XX, we append the value in --driver-java-options    for (int i = 0; i < argArray.length; i++) {      if (argArray[i].equals(SparkJobArg.SPARK_CONF_PREFIX.sparkParamName)        && argArray[i+1].startsWith(SPARK_CONF_EXTRA_DRIVER_OPTIONS)) {        driverJavaOptions.append(\" \").append(argArray[++i].substring(SPARK_CONF_EXTRA_DRIVER_OPTIONS.length() + 1));      }    }    // Append addtional driver java opts about azkaban context    String[] requiredJavaOpts = { WORKFLOW_LINK, JOB_LINK, EXECUTION_LINK, ATTEMPT_LINK };    for (int i = 0; i < requiredJavaOpts.length; i++) {        driverJavaOptions.append(\" \").append(HadoopJobUtils.javaOptStringFromHadoopConfiguration(conf,                  requiredJavaOpts[i]));    }    // Update driver java opts    argArray[1] = driverJavaOptions.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureSparkWrapper.java", "stars": "18", "class": {"name": "HadoopSecureSparkWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleDynamicResourceAllocation", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void handleDynamicResourceAllocation(String[] argArray) {    // HadoopSparkJob will set env var on this process if we enforce dynamic allocation policy for spark jobtype.    // This policy can be enabled through spark jobtype plugin's conf property.    // Enabling dynamic allocation policy for azkaban spark jobtype is different from enabling dynamic allocation    // feature for Spark. This config inside Spark jobtype is to enforce dynamic allocation feature is used for all    // Spark applications submitted via Azkaban Spark job type.    String dynamicAllocProp = System.getenv(HadoopSparkJob.SPARK_DYNAMIC_RES_ENV_VAR);    boolean dynamicAllocEnabled = dynamicAllocProp != null && dynamicAllocProp.equals(Boolean.TRUE.toString());    if (dynamicAllocEnabled) {      for (int i = 0; i < argArray.length; i++) {        if (argArray[i] == null) continue;        // If user specifies num of executors, or if user tries to disable dynamic allocation for his application        // by setting some conf params to false, we need to ignore these settings to enforce the application        // uses dynamic allocation for spark        if (argArray[i].equals(SparkJobArg.NUM_EXECUTORS.sparkParamName) // --num-executors          || (            argArray[i].equals(SparkJobArg.SPARK_CONF_PREFIX.sparkParamName) // --conf            && (argArray[i+1].startsWith(SPARK_CONF_NUM_EXECUTORS) // spark.executor.instances              || argArray[i+1].startsWith(SPARK_CONF_SHUFFLE_SERVICE_ENABLED) // spark.shuffle.service.enabled              || argArray[i+1].startsWith(SPARK_CONF_DYNAMIC_ALLOC_ENABLED)) // spark.dynamicAllocation.enabled        )) {          logger.info(\"Azbakan enforces dynamic resource allocation. Ignore user param: \"            + argArray[i] + \" \" + argArray[i+1]);          argArray[i] = null;          argArray[++i] = null;        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureSparkWrapper.java", "stars": "18", "class": {"name": "HadoopSecureSparkWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleNodeLabeling", "params": ["String"], "throws": null, "modifiers": ["static", "protected"], "return_type": "String", "snippet": "  protected static String[] handleNodeLabeling(String[] argArray) {    // HadoopSparkJob will set env var on this process if we enable node labeling policy for spark jobtype.    // We also detect the yarn cluster settings has enable node labeling    // Enabling node labeling policy for spark job type is different from enabling node labeling    // feature for Yarn. This config inside Spark job type is to enforce node labeling feature for all    // Spark applications submitted via Azkaban Spark job type.    Configuration conf = new Configuration();    String sparkPropertyFile = HadoopSecureSparkWrapper.class.getClassLoader()        .getResource(\"spark-defaults.conf\").getPath();    boolean nodeLabelingYarn = conf.getBoolean(YARN_CONF_NODE_LABELING_ENABLED, false);    String nodeLabelingProp = System.getenv(HadoopSparkJob.SPARK_NODE_LABELING_ENV_VAR);    boolean nodeLabelingPolicy = nodeLabelingProp != null && nodeLabelingProp.equals(Boolean.TRUE.toString());    String autoNodeLabelProp = System.getenv(HadoopSparkJob.SPARK_AUTO_NODE_LABELING_ENV_VAR);    boolean autoNodeLabeling = autoNodeLabelProp != null && autoNodeLabelProp.equals(Boolean.TRUE.toString());    String desiredNodeLabel = System.getenv(HadoopSparkJob.SPARK_DESIRED_NODE_LABEL_ENV_VAR);    String minMemVcoreRatio = System.getenv(HadoopSparkJob.SPARK_MIN_MEM_VCORE_RATIO_ENV_VAR);    String executorMem = null;    String executorVcore = null;    String executorMemOverhead = null;    SparkConf sparkConf = new SparkConf(false);    sparkConf.setAll(Utils.getPropertiesFromFile(sparkPropertyFile));    if (nodeLabelingYarn && nodeLabelingPolicy) {      for (int i = 0; i < argArray.length; i++) {        if (argArray[i] == null) {          continue;        }        if (nodeLabelingPolicy) {          // If yarn cluster enables node labeling, applications should be submitted to a default          // queue by a default conf(spark.yarn.queue) in spark-defaults.conf          // We should ignore user-specified queue param to enforece the node labeling          // (--queue test or --conf spark.yarn.queue=test)          if ((argArray[i].equals(SparkJobArg.SPARK_CONF_PREFIX.sparkParamName) &&               argArray[i+1].startsWith(SPARK_CONF_QUEUE))              || (argArray[i].equals(SparkJobArg.QUEUE.sparkParamName))) {            logger.info(\"Azbakan enforces node labeling. Ignore user param: \"              + argArray[i] + \" \" + argArray[i+1]);            argArray[i] = null;            argArray[++i] = null;            continue;          }          if (autoNodeLabeling) {            // If auto node labeling is enabled, job type should ignore user supplied            // node label expression for Spark executors. This config will be automatically            // set by the job type based on the mem-to-vcore resource ratio requested by            // the user application.            if (argArray[i].equals(SparkJobArg.SPARK_CONF_PREFIX.sparkParamName) &&                argArray[i+1].startsWith(SPARK_EXECUTOR_NODE_LABEL_EXP)) {              logger.info(\"Azbakan auto-sets node label expression. Ignore user param: \"                + argArray[i] + \" \" + argArray[i+1]);              argArray[i] = null;              argArray[++i] = null;              continue;            }            if (argArray[i].equals(SparkJobArg.EXECUTOR_CORES.sparkParamName)) {              executorVcore = argArray[++i];            }            if (argArray[i].equals(SparkJobArg.EXECUTOR_MEMORY.sparkParamName)) {              executorMem = argArray[++i];            }            if (argArray[i].equals(SparkJobArg.SPARK_CONF_PREFIX.sparkParamName) &&                argArray[i+1].startsWith(SPARK_EXECUTOR_MEMORY_OVERHEAD)) {              executorMemOverhead = argArray[i+1].split(\"=\")[1].trim();            }          }        }      }      // If auto node labeling is enabled, automatically sets spark.yarn.executor.nodeLabelExpression      // config based on user requested resources.      if (autoNodeLabeling) {        double minRatio = Double.parseDouble(minMemVcoreRatio);        if (executorVcore == null) {          executorVcore = sparkConf.get(SPARK_EXECUTOR_CORES, SPARK_EXECUTOR_DEFAULT_CORES);        }        if (executorMem == null) {          executorMem = sparkConf.get(SPARK_EXECUTOR_MEMORY, SPARK_EXECUTOR_DEFAULT_MEMORY);        }        if (executorMemOverhead == null) {          executorMemOverhead = sparkConf.get(SPARK_EXECUTOR_MEMORY_OVERHEAD, null);        }        if (calculateMemVcoreRatio(executorMem, executorMemOverhead, executorVcore,            sparkConf, conf) > minRatio) {          LinkedList<String> argList = new LinkedList<String>(Arrays.asList(argArray));          argList.addFirst(SPARK_EXECUTOR_NODE_LABEL_EXP + \"=\" + desiredNodeLabel);          argList.addFirst(SparkJobArg.SPARK_CONF_PREFIX.sparkParamName);          argArray = argList.toArray(new String[argList.size()]);        }      }    }    return argArray;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureSparkWrapper.java", "stars": "18", "class": {"name": "HadoopSecureSparkWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "calculateMemVcoreRatio", "params": ["String", "String", "String", "SparkConf", "Configuration"], "throws": null, "modifiers": ["private", "static"], "return_type": "double", "snippet": "  private static double calculateMemVcoreRatio(String mem, String memOverhead, String vcore,      SparkConf sparkConf, Configuration config) {    int memoryMb = (int) JavaUtils.byteStringAsMb(mem);    if (memOverhead == null || !NumberUtils.isDigits(memOverhead)) {      memoryMb += Math.max(memoryMb / 10, 384);    } else {      memoryMb += Long.parseLong(memOverhead);    }    int increment = config.getInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);    int roundedMemoryMb = (int) (Math.ceil(memoryMb * 1.0 / increment) * increment);    return roundedMemoryMb / 1024.0 / Integer.parseInt(vcore);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureSparkWrapper.java", "stars": "18", "class": {"name": "HadoopSecureSparkWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeNullsFromArgArray", "params": ["String"], "throws": null, "modifiers": ["static", "protected"], "return_type": "String", "snippet": "  protected static String[] removeNullsFromArgArray(String[] argArray) {    List<String> argList = new ArrayList<String>(Arrays.asList(argArray));    argList.removeAll(Collections.singleton(null));    return argList.toArray(new String[argList.size()]);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureSparkWrapper.java", "stars": "18", "class": {"name": "HadoopSecureSparkWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "methodPointCut", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void methodPointCut() {    }", "url": "https://raw.githubusercontent.com/he303954106/AOP_Demo/master/app/src/main/java/com/netease/aop/login/aspect/RunnableAspect.java", "stars": "2", "class": {"name": "RunnableAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "jointPoint", "params": ["ProceedingJoinPoint"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object jointPoint(ProceedingJoinPoint joinPoint) throws Throwable {        Log.e(TAG, \"RunnableAspect Method Start >>> \" + Thread.currentThread().getName());        Log.e(TAG, \"RunnableAspect Method run >>> \" + Log.getStackTraceString(new Throwable()));        Log.e(TAG, \"RunnableAspect Method run >>> this: \" + joinPoint.getThis().getClass() + \" target: \" + joinPoint.getTarget().getClass());        joinPoint.proceed();        Log.e(TAG, \"RunnableAspect Method End >>> \");        return null;    }", "url": "https://raw.githubusercontent.com/he303954106/AOP_Demo/master/app/src/main/java/com/netease/aop/login/aspect/RunnableAspect.java", "stars": "2", "class": {"name": "RunnableAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isNotAdded", "params": ["Fragment"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isNotAdded(Fragment fragment) {        return !fragment.isAdded() || fragment.isDetached() || null == fragment.getActivity() || fragment.getActivity().isFinishing();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/FragmentUtil.java", "stars": "4", "class": {"name": "FragmentUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //int[] arr = null;        int[] arr = new int[3];        int e = getElement(arr,3);        System.out.println(e);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/05_ExceptionAndThread/src/com/itheima/demo01/Exception/Demo03Throw.java", "stars": "2", "class": {"name": "Demo03Throw", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getElement", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getElement(int[] arr,int index){        /*            \u6211\u4eec\u53ef\u4ee5\u5bf9\u4f20\u9012\u8fc7\u6765\u7684\u53c2\u6570\u6570\u7ec4,\u8fdb\u884c\u5408\u6cd5\u6027\u6821\u9a8c            \u5982\u679c\u6570\u7ec4arr\u7684\u503c\u662fnull            \u90a3\u4e48\u6211\u4eec\u5c31\u629b\u51fa\u7a7a\u6307\u9488\u5f02\u5e38,\u544a\u77e5\u65b9\u6cd5\u7684\u8c03\u7528\u8005\"\u4f20\u9012\u7684\u6570\u7ec4\u7684\u503c\u662fnull\"         */        if(arr == null){            throw new NullPointerException(\"\u4f20\u9012\u7684\u6570\u7ec4\u7684\u503c\u662fnull\");        }        /*            \u6211\u4eec\u53ef\u4ee5\u5bf9\u4f20\u9012\u8fc7\u6765\u7684\u53c2\u6570index\u8fdb\u884c\u5408\u6cd5\u6027\u6821\u9a8c            \u5982\u679cindex\u7684\u8303\u56f4\u4e0d\u5728\u6570\u7ec4\u7684\u7d22\u5f15\u8303\u56f4\u5185            \u90a3\u4e48\u6211\u4eec\u5c31\u629b\u51fa\u6570\u7ec4\u7d22\u5f15\u8d8a\u754c\u5f02\u5e38,\u544a\u77e5\u65b9\u6cd5\u7684\u8c03\u7528\u8005\"\u4f20\u9012\u7684\u7d22\u5f15\u8d85\u51fa\u4e86\u6570\u7ec4\u7684\u4f7f\u7528\u8303\u56f4\"         */        if(index<0 || index>arr.length-1){            throw new ArrayIndexOutOfBoundsException(\"\u4f20\u9012\u7684\u7d22\u5f15\u8d85\u51fa\u4e86\u6570\u7ec4\u7684\u4f7f\u7528\u8303\u56f4\");        }        int ele = arr[index];        return ele;    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/05_ExceptionAndThread/src/com/itheima/demo01/Exception/Demo03Throw.java", "stars": "2", "class": {"name": "Demo03Throw", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\tthis.getLeft().checkType();\t\tthis.getRight().checkType();\t\tgetLeft().getType().assertType(this, TypeCode.ARRAY);\t\tgetRight().getType().assertType(this, TypeCode.INTEGER);\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprARRAY.java", "stars": "3", "class": {"name": "ExprARRAY", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result;\t\tresult = getLeft().generateCode() + \"[\" + getRight().generateCode() + \"]\";\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprARRAY.java", "stars": "3", "class": {"name": "ExprARRAY", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "constEval", "params": ["Environment<ExprVALUE>"], "throws": ["EnvironmentException", "TypeException"], "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object constEval(Environment<ExprVALUE> environment) throws EnvironmentException, TypeException {\t\tthrow new TypeException(\"erreur syst\u00e8me\", line, column);\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprARRAY.java", "stars": "3", "class": {"name": "ExprARRAY", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn this.getLeft() + \"[\" + this.getRight() + \"]\";\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprARRAY.java", "stars": "3", "class": {"name": "ExprARRAY", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "keyGenerator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "KeyGenerator", "snippet": "    public KeyGenerator keyGenerator() {        return new KeyGenerator() {            @Override            public Object generate(Object target, Method method, Object... params) {                StringBuilder sb = new StringBuilder();                sb.append(target.getClass().getName());                sb.append(method.getName());                for (Object obj : params) {                    sb.append(obj.toString());                }                return sb.toString();            }        };    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/config/RedisConfig.java", "stars": "1", "class": {"name": "RedisConfig", "extends": "CachingConfigurerSupport", "implements": null, "modifiers": ["public"]}}, {"method_name": "redisTemplate", "params": ["RedisConnectionFactory"], "throws": null, "modifiers": ["public"], "return_type": "RedisTemplate<String,String>", "snippet": "    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {        RedisTemplate<String, String> template = new RedisTemplate<>();        RedisSerializer<String> redisSerializer = new StringRedisSerializer();        GenericJackson2JsonRedisSerializer genericJackson2JsonRedisSerializer=new GenericJackson2JsonRedisSerializer();        template.setConnectionFactory(factory);        //key\u5e8f\u5217\u5316\u65b9\u5f0f        template.setKeySerializer(redisSerializer);        //value\u5e8f\u5217\u5316        template.setValueSerializer(genericJackson2JsonRedisSerializer);        //value hashmap\u5e8f\u5217\u5316        template.setHashValueSerializer(genericJackson2JsonRedisSerializer);        return template;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/config/RedisConfig.java", "stars": "1", "class": {"name": "RedisConfig", "extends": "CachingConfigurerSupport", "implements": null, "modifiers": ["public"]}}, {"method_name": "cacheManager", "params": ["RedisConnectionFactory"], "throws": null, "modifiers": ["public"], "return_type": "CacheManager", "snippet": "    public CacheManager cacheManager(RedisConnectionFactory factory) {        RedisSerializer<String> redisSerializer = new StringRedisSerializer();        GenericJackson2JsonRedisSerializer genericJackson2JsonRedisSerializer=new GenericJackson2JsonRedisSerializer();        // \u914d\u7f6e\u5e8f\u5217\u5316        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig();        RedisCacheConfiguration redisCacheConfiguration = config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(genericJackson2JsonRedisSerializer));        redisCacheConfiguration.entryTtl(Duration.ofMinutes(2));        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)                .cacheDefaults(redisCacheConfiguration)                .build();        return cacheManager;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/config/RedisConfig.java", "stars": "1", "class": {"name": "RedisConfig", "extends": "CachingConfigurerSupport", "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["Props"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void initialize(final Props props) {    if (props == null) {      throw new NullPointerException(\"props argument can't be null\");    }    if (isInitialized) {      return;    }    instance = new JobCallbackRequestMaker(props);    isInitialized = true;    logger.info(\"Initialization for \" + JobCallbackRequestMaker.class.getName()        + \" is completed\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackRequestMaker.java", "stars": "18", "class": {"name": "JobCallbackRequestMaker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isInitialized", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean isInitialized() {    return isInitialized;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackRequestMaker.java", "stars": "18", "class": {"name": "JobCallbackRequestMaker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "JobCallbackRequestMaker", "snippet": "  public static JobCallbackRequestMaker getInstance() {    if (!isInitialized) {      throw new IllegalStateException(JobCallbackRequestMaker.class.getName()          + \" hasn't initialzied\");    }    return instance;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackRequestMaker.java", "stars": "18", "class": {"name": "JobCallbackRequestMaker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobcallbackMetrics", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FutureRequestExecutionMetrics", "snippet": "  public FutureRequestExecutionMetrics getJobcallbackMetrics() {    return this.futureRequestExecutionService.metrics();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackRequestMaker.java", "stars": "18", "class": {"name": "JobCallbackRequestMaker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "makeHttpRequest", "params": ["String", "Logger", "List<HttpRequestBase>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void makeHttpRequest(final String jobId, final Logger logger,      final List<HttpRequestBase> httpRequestList) {    if (httpRequestList == null || httpRequestList.isEmpty()) {      logger.info(\"No HTTP requests to make\");      return;    }    for (final HttpRequestBase httpRequest : httpRequestList) {      logger.info(\"Job callback http request: \" + httpRequest.toString());      logger.info(\"headers [\");      for (final Header header : httpRequest.getAllHeaders()) {        logger.info(String.format(\"  %s : %s\", header.getName(),            header.getValue()));      }      logger.info(\"]\");      final HttpRequestFutureTask<Integer> task =          this.futureRequestExecutionService.execute(httpRequest,              HttpClientContext.create(), new LoggingResponseHandler(logger));      try {        // get with timeout        final Integer statusCode =            task.get(this.responseWaitTimeoutMS, TimeUnit.MILLISECONDS);        logger.info(\"http callback status code: \" + statusCode);      } catch (final TimeoutException timeOutEx) {        logger            .warn(\"Job callback target took longer \"                    + (this.responseWaitTimeoutMS / 1000) + \" seconds to respond\",                timeOutEx);      } catch (final ExecutionException ee) {        if (ee.getCause() instanceof SocketTimeoutException) {          logger.warn(\"Job callback target took longer \"              + (this.responseWaitTimeoutMS / 1000) + \" seconds to respond\", ee);        } else {          logger.warn(              \"Encountered error while waiting for job callback to complete\",              ee);        }      } catch (final Throwable e) {        logger.warn(            \"Encountered error while waiting for job callback to complete\", e);      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackRequestMaker.java", "stars": "18", "class": {"name": "JobCallbackRequestMaker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleResponse", "params": ["HttpResponse"], "throws": ["ClientProtocolException", "IOException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer handleResponse(final HttpResponse response)        throws ClientProtocolException, IOException {      final int statusCode = response.getStatusLine().getStatusCode();      BufferedReader bufferedReader = null;      try {        final HttpEntity responseEntity = response.getEntity();        if (responseEntity != null) {          bufferedReader =              new BufferedReader(new InputStreamReader(                  responseEntity.getContent(), StandardCharsets.UTF_8));          String line = \"\";          int lineCount = 0;          this.logger.info(\"HTTP response [\");          while ((line = bufferedReader.readLine()) != null) {            this.logger.info(line);            lineCount++;            if (lineCount > MAX_RESPONSE_LINE_TO_PRINT) {              break;            }          }          this.logger.info(\"]\");        } else {          this.logger.info(\"No response\");        }      } catch (final Throwable t) {        this.logger.warn(            \"Encountered error while logging out job callback response\", t);      } finally {        if (bufferedReader != null) {          try {            bufferedReader.close();          } catch (final IOException ex) {            // don't care          }        }      }      return statusCode;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackRequestMaker.java", "stars": "18", "class": {"name": "LoggingResponseHandler", "extends": null, "implements": ["ResponseHandler"], "modifiers": ["private", "static", "final"]}}, {"method_name": "onPageScrolled", "params": ["int", "float", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {        if (mNavigator != null) {            mNavigator.onPageScrolled(position, positionOffset, positionOffsetPixels);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/MagicIndicator.java", "stars": "1", "class": {"name": "MagicIndicator", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPageSelected", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageSelected(int position) {        if (mNavigator != null) {            mNavigator.onPageSelected(position);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/MagicIndicator.java", "stars": "1", "class": {"name": "MagicIndicator", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPageScrollStateChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageScrollStateChanged(int state) {        if (mNavigator != null) {            mNavigator.onPageScrollStateChanged(state);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/MagicIndicator.java", "stars": "1", "class": {"name": "MagicIndicator", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNavigator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IPagerNavigator", "snippet": "    public IPagerNavigator getNavigator() {        return mNavigator;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/MagicIndicator.java", "stars": "1", "class": {"name": "MagicIndicator", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNavigator", "params": ["IPagerNavigator"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNavigator(IPagerNavigator navigator) {        if (mNavigator == navigator) {            return;        }        if (mNavigator != null) {            mNavigator.onDetachFromMagicIndicator();        }        mNavigator = navigator;        removeAllViews();        if (mNavigator instanceof View) {            LayoutParams lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);            addView((View) mNavigator, lp);            mNavigator.onAttachToMagicIndicator();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/MagicIndicator.java", "stars": "1", "class": {"name": "MagicIndicator", "extends": "FrameLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPerformSync", "params": ["Account", "Bundle", "String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onPerformSync(Account account, Bundle extras, String authority);}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncAdapter.java", "stars": "74", "class": {"name": "AbstractSyncAdapter", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "beforeExecute", "params": ["Thread", "Runnable"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void beforeExecute(final Thread t, final Runnable r) {    try {      this.executingListener.beforeExecute(r);    } catch (final Throwable e) {      // to ensure the listener doesn't cause any issues      logger.warn(\"Listener threw exception\", e);    }    super.beforeExecute(t, r);    this.inProgress.put(r, Boolean.TRUE);    this.startTime.set(Long.valueOf(System.currentTimeMillis()));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/TrackingThreadPool.java", "stars": "18", "class": {"name": "TrackingThreadPool", "extends": "ThreadPoolExecutor", "implements": null, "modifiers": ["public"]}}, {"method_name": "afterExecute", "params": ["Runnable", "Throwable"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void afterExecute(final Runnable r, final Throwable t) {    final long time = System.currentTimeMillis() - this.startTime.get().longValue();    synchronized (this) {      this.totalTime += time;      ++this.totalTasks;    }    this.inProgress.remove(r);    super.afterExecute(r, t);    try {      this.executingListener.afterExecute(r);    } catch (final Throwable e) {      // to ensure the listener doesn't cause any issues      logger.warn(\"Listener threw exception\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/TrackingThreadPool.java", "stars": "18", "class": {"name": "TrackingThreadPool", "extends": "ThreadPoolExecutor", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInProgressTasks", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<Runnable>", "snippet": "  public Set<Runnable> getInProgressTasks() {    return Collections.unmodifiableSet(this.inProgress.keySet());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/TrackingThreadPool.java", "stars": "18", "class": {"name": "TrackingThreadPool", "extends": "ThreadPoolExecutor", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTotalTasks", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "  public synchronized int getTotalTasks() {    return this.totalTasks;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/TrackingThreadPool.java", "stars": "18", "class": {"name": "TrackingThreadPool", "extends": "ThreadPoolExecutor", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAverageTaskTime", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "double", "snippet": "  public synchronized double getAverageTaskTime() {    return (this.totalTasks == 0) ? 0 : this.totalTime / this.totalTasks;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/TrackingThreadPool.java", "stars": "18", "class": {"name": "TrackingThreadPool", "extends": "ThreadPoolExecutor", "implements": null, "modifiers": ["public"]}}, {"method_name": "beforeExecute", "params": ["Runnable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void beforeExecute(final Runnable r) {    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/TrackingThreadPool.java", "stars": "18", "class": {"name": "NoOpThreadPoolExecutingListener", "extends": null, "implements": ["ThreadPoolExecutingListener"], "modifiers": ["private", "static"]}}, {"method_name": "afterExecute", "params": ["Runnable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterExecute(final Runnable r) {    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/TrackingThreadPool.java", "stars": "18", "class": {"name": "NoOpThreadPoolExecutingListener", "extends": null, "implements": ["ThreadPoolExecutingListener"], "modifiers": ["private", "static"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        canvas.drawCircle(200, 200, 200, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson2/Practice04BitmapShaderView.java", "stars": "2", "class": {"name": "Practice04BitmapShaderView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getProps() {    return this.props;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWebankUserByUserId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "WebankUser", "snippet": "  public WebankUser getWebankUserByUserId(String userId) {    WebankUser webankUser = null;    try {      webankUser = this.systemUserLoader.getWebankUserByUserId(userId);    } catch (SystemUserManagerException e) {      logger.error(\"Exception in query webank user by userId, caused by:{}\", e);    }    return webankUser;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadSystemManagerI18nData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "  private Map<String, String> loadSystemManagerI18nData() {    String languageType = LoadJsonUtils.getLanguageType();    Map<String, String> dataMap;    if (languageType.equalsIgnoreCase(\"zh_CN\")) {      dataMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-common-zh_CN.json\",          \"SystemManager\");    } else {      dataMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-common-en_US.json\",          \"SystemManager\");    }    return dataMap;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWebankUserByUserName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "WebankUser", "snippet": "  public WebankUser getWebankUserByUserName(String userName) {    WebankUser webankUser = null;    try {      webankUser = this.systemUserLoader.getWebankUserByUserName(userName);    } catch (SystemUserManagerException e) {      logger.error(\"Exception in query webank user by user name, caused by:{}\", e);    }    return webankUser;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findAllWebankUserList", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<WebankUser>", "snippet": "  public List<WebankUser> findAllWebankUserList(final String searchName) {    List<WebankUser> webankUserList = null;    try {      webankUserList = this.systemUserLoader.findAllWebankUserList(searchName);    } catch (SystemUserManagerException e) {      logger.error(\"Exception in query all webank user as user list, caused by:{}\", e);    }    return webankUserList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findAllWebankUserPageList", "params": ["String", "int", "int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<WebankUser>", "snippet": "  public List<WebankUser> findAllWebankUserPageList(final String searchName, final int pageNum, final int pageSize)      throws SystemUserManagerException {    List<WebankUser> webankUserList = null;    try {      webankUserList = this.systemUserLoader.findAllWebankUserPageList(searchName, pageNum, pageSize);    } catch (SystemUserManagerException e) {      logger.error(\"Exception in query all webank user as user page list, caused by:{}\", e);    }    return webankUserList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findSystemUserPage", "params": ["String", "String", "String", "int", "int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<WtssUser>", "snippet": "  public List<WtssUser> findSystemUserPage(final String userName, final String fullName      , final String departmentName, int start, int pageSize) throws SystemUserManagerException {    List<WtssUser> wtssUserList = this.systemUserLoader.findSystemUserPage(userName, fullName, departmentName, start, pageSize);    return wtssUserList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSystemUserTotal", "params": [], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getSystemUserTotal() throws SystemUserManagerException {    return this.systemUserLoader.getWtssUserTotal();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSystemUserTotal", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getSystemUserTotal(String username) throws SystemUserManagerException {    return this.systemUserLoader.getWtssUserTotal(username);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addSystemUser", "params": ["String", "String", "int", "String", "int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int addSystemUser(final String userId, final String password, final int roleId, final String proxyUser,      final int departmentId) throws SystemUserManagerException {    Map<String, String> dataMap = loadSystemManagerI18nData();    WtssUser wtssUser = new WtssUser();    WebankUser webankUser = this.systemUserLoader.getWebankUserByUserId(userId);    WebankDepartment webankDepartment = this.systemUserLoader.getWebankDepartmentByDpId(departmentId);    if (null != webankUser) {      wtssUser.setUserId(webankUser.userId);      wtssUser.setUsername(webankUser.urn);      wtssUser.setFullName(webankUser.fullName);      if (null != webankDepartment) {        wtssUser.setDepartmentId(webankDepartment.dpId);        wtssUser.setDepartmentName(webankDepartment.dpChName);      } else {        wtssUser.setDepartmentId(webankUser.departmentId);        wtssUser.setDepartmentName(webankUser.departmentName);      }      wtssUser.setEmail(webankUser.email);    } else {      wtssUser.setUserId(\"wtss_\" + userId);      wtssUser.setUsername(userId);      wtssUser.setFullName(userId);      if (null != webankDepartment) {        wtssUser.setDepartmentId(webankDepartment.dpId);        wtssUser.setDepartmentName(webankDepartment.dpChName);      }      wtssUser.setEmail(\"\");    }    String encodePwd = MD5Utils.md5(MD5Utils.md5(password) + wtssUser.getUserId());    wtssUser.setPassword(encodePwd);    if (null != proxyUser && !\"\".equals(proxyUser)) {      // \u4ee3\u7406\u7528\u6237\u6b63\u5219\u8868\u8fbe\u5f0f\u589e\u52a0\u4e0b\u5212\u7ebf\u6821\u9a8c\u901a\u8fc7      Pattern pattern = Pattern.compile(\"^[A-Za-z0-9_,]+$\");      if (!pattern.matcher(proxyUser).matches()) {        throw new SystemUserManagerException(dataMap.get(\"errorFormatProxy\"));      }      wtssUser.setProxyUsers(proxyUser);    } else {      wtssUser.setProxyUsers(wtssUser.getUsername());    }    wtssUser.setRoleId(roleId);    wtssUser.setUserType(WtssUser.UserType.ACTIVE.getUserTypeNum());    wtssUser.setCreateTime(System.currentTimeMillis());    wtssUser.setUpdateTime(System.currentTimeMillis());    wtssUser.setModifyInfo(\"Normal\");    wtssUser.setModifyType(\"0\");    // \u7528\u6237\u7c7b\u578b\u9ed8\u9ed8\u8ba4\u4e3a\u5b9e\u540d\u7528\u6237    String userCategory;    if (userId.startsWith(\"WTSS_\")) {      userCategory = \"ops\";    } else if (userId.startsWith(\"hduser\")) {      userCategory = \"system\";    } else {      userCategory = \"personal\";    }    wtssUser.setUserCategory(userCategory);    return this.systemUserLoader.addWtssUser(wtssUser);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWebankUserTotal", "params": [], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getWebankUserTotal() throws SystemUserManagerException {    return this.systemUserLoader.getWebankUserTotal();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSystemUserById", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WtssUser", "snippet": "  public WtssUser getSystemUserById(final String userId) throws SystemUserManagerException {    return this.systemUserLoader.getWtssUserByUserId(userId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateSystemUser", "params": ["WtssUser", "boolean"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int updateSystemUser(final WtssUser wtssUser, boolean synEsb) throws SystemUserManagerException {    return this.systemUserLoader.updateWtssUser(wtssUser, synEsb);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateSystemUserByName", "params": ["WtssUser", "boolean"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int updateSystemUserByName(final WtssUser wtssUser, boolean synEsb) throws SystemUserManagerException {    return this.systemUserLoader.updateWtssUserByName(wtssUser, synEsb);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateSystemUser", "params": ["String", "String", "int", "String", "int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int updateSystemUser(final String userId, final String password, final int roleId, final String proxyUser,      final int departmentId) throws SystemUserManagerException {    Map<String, String> dataMap = loadSystemManagerI18nData();    // wtssUser \u6570\u636e\u5e94\u8be5\u662f\u5148\u4ece\u67e5\u8be2\u539f\u8868\u4e2d\u67e5\u8be2\u51fa    WtssUser wtssUser = this.systemUserLoader.getWtssUserByUserId(userId);    if (null != wtssUser) {      // \u5224\u65ad\u662f\u7528\u6237\u5c5e\u4e8e webankUser \u8fd8\u662f\u6d4b\u8bd5\u6570\u636e      WebankUser webankUser = this.systemUserLoader.getWebankUserByUserId(userId);      // \u6821\u9a8c\u90e8\u95e8      if (null != webankUser) {        // \u80fd\u4ece\u603b\u6570\u636e\u8868\u4e2d\u67e5\u8be2\u5230,\u8bf4\u660e\u662f\u771f\u5b9e\u6570\u636e        wtssUser.setUserId(webankUser.userId);      } else {        // \u5426\u5219\u5c31\u662f\u6d4b\u8bd5\u6570\u636e,\u5c31\u6309\u7167\u6d4b\u8bd5\u6570\u636e\u6765\u8bbe\u7f6e\u5c31\u884c        wtssUser.setUserId(userId);      }      WebankDepartment webankDepartment = this.systemUserLoader.getWebankDepartmentByDpId(departmentId);      wtssUser.setDepartmentId(departmentId);      if (webankDepartment != null) {        // \u80fd\u4ece\u603b\u6570\u636e\u8868\u4e2d\u67e5\u8be2\u5230,\u8bf4\u660e\u662f\u771f\u5b9e\u6570\u636e        wtssUser.setDepartmentName(webankDepartment.dpChName);      } else {        // \u5426\u5219\u5c31\u662f\u6d4b\u8bd5\u6570\u636e,\u5c31\u6309\u7167\u6d4b\u8bd5\u6570\u636e\u6765\u8bbe\u7f6e\u5c31\u884c        wtssUser.setDepartmentName(wtssUser.getDepartmentName());      }      // \u56e0\u4e3a\u524d\u7aef\u56de\u663e\u7684\u65f6\u5019\u56de\u663e\u7684\u662f\u6570\u636e\u5e93\u52a0\u5bc6\u4e4b\u540e\u7684\u5bc6\u7801,\u6240\u4ee5\u4fee\u6539\u5bc6\u7801\u7684\u65f6\u5019\u5982\u679c\u4e0d\u6539,      // \u5219\u7528\u6570\u636e\u5e93\u4e2d\u52a0\u5bc6\u7684\u5bc6\u7801\u548c\u73b0\u5728\u7684\u5bc6\u7801\u8fdb\u884c\u6bd4\u8f83,\u5982\u679c\u76f8\u540c,\u5219\u4e0d\u505a\u4fee\u6539,\u4e0d\u76f8\u540c\u5219\u4fee\u6539      String passwordDb = wtssUser.getPassword();      if (!passwordDb.equals(password)) {        String encodePwd = MD5Utils.md5(MD5Utils.md5(password) + wtssUser.getUserId());        wtssUser.setPassword(encodePwd);      }      if (null != proxyUser && !\"\".equals(proxyUser)) {        Pattern pattern = Pattern.compile(\"^[A-Za-z0-9_,]+$\");        if (!pattern.matcher(proxyUser).matches()) {          throw new SystemUserManagerException(dataMap.get(\"errorFormatProxy\"));        }        wtssUser.setProxyUsers(proxyUser);      } else {        wtssUser.setProxyUsers(wtssUser.getUsername());      }      wtssUser.setRoleId(roleId);      wtssUser.setUserType(WtssUser.UserType.ACTIVE.getUserTypeNum());      wtssUser.setUpdateTime(System.currentTimeMillis());      String userCategory;      if (Pattern.compile(\"^[0-9]+$\").matcher(userId).matches()) {        userCategory = \"personal\";      } else if (userId.startsWith(\"wtss_hduser\")) {        userCategory = \"system\";      } else if (userId.startsWith(\"wtss_WTSS\")) {        userCategory = \"ops\";      } else {        // \u9488\u5bf9\u6d4b\u8bd5\u6570\u636e\u7684\u6807\u8bc6        userCategory = \"test\";      }      wtssUser.setUserCategory(userCategory);      return this.systemUserLoader.updateWtssUser(wtssUser);    } else {      throw new SystemUserManagerException(\"Unregistered User, Please register this user.\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWtssRoleById", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "WtssRole", "snippet": "  public WtssRole getWtssRoleById(int roleId) {    try {      return this.systemUserLoader.getWtssRoleById(roleId);    } catch (SystemUserManagerException e) {      logger.error(\"get wtss user role by roleId fail, caused by:{}\", e);      return null;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserPermission", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUserPermission(int roleId) {    String userPermString = \"\";    try {      //\u83b7\u53d6\u7528\u6237\u5bf9\u5e94\u7684\u89d2\u8272      final WtssRole wtssRole = this.systemUserLoader.getWtssRoleById(roleId);      if (wtssRole != null) {        List<WtssPermissions> wtssPermissionsList = this.systemUserLoader.getWtssPermissionsListByIds(wtssRole.getPermissionsIds());        //\u83b7\u53d6\u89d2\u8272\u5bf9\u5e94\u7684\u6743\u9650        List<String> permissionsNameList = wtssPermissionsList.stream()            .map(WtssPermissions::getPermissionsName).collect(Collectors.toList());        userPermString = String.join(\",\", permissionsNameList);      }    } catch (SystemUserManagerException e) {      logger.error(\"getUserPermission by roleId failed, caused by:{}\", e);    }    return userPermString;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findAllWebankDepartmentPageList", "params": ["String", "int", "int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<WebankDepartment>", "snippet": "  public List<WebankDepartment> findAllWebankDepartmentPageList(final String searchName, final int pageNum, final int pageSize)      throws SystemUserManagerException {    List<WebankDepartment> webankDepartmentList = null;    try {      webankDepartmentList = this.systemUserLoader.findAllWebankDepartmentPageList(searchName, pageNum, pageSize);    } catch (SystemUserManagerException e) {      logger.error(\"Exception in query webank department as page list, caused by:{}\", e);    }    return webankDepartmentList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWebankDepartmentTotal", "params": [], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getWebankDepartmentTotal() throws SystemUserManagerException {    return this.systemUserLoader.getWebankDepartmentTotal();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findAllWebankDepartmentList", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<WebankDepartment>", "snippet": "  public List<WebankDepartment> findAllWebankDepartmentList(final String searchName)      throws SystemUserManagerException {    List<WebankDepartment> webankDepartmentList = null;    try {      webankDepartmentList = this.systemUserLoader.findAllWebankDepartmentList(searchName);    } catch (SystemUserManagerException e) {      throw new SystemUserManagerException(e);    }    return webankDepartmentList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWebankDepartmentByDpId", "params": ["int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WebankDepartment", "snippet": "  public WebankDepartment getWebankDepartmentByDpId(final int dpId)      throws SystemUserManagerException {    return this.systemUserLoader.getWebankDepartmentByDpId(dpId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findAllWebankDepartmentPageOrSearch", "params": ["String", "int", "int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<WebankDepartment>", "snippet": "  public List<WebankDepartment> findAllWebankDepartmentPageOrSearch(final String searchName, int pageNum      , int pageSize)      throws SystemUserManagerException {    List<WebankDepartment> webankDepartmentList = null;    try {      webankDepartmentList = this.systemUserLoader.findAllWebankDepartmentPageOrSearch(searchName, pageNum, pageSize);    } catch (SystemUserManagerException e) {      throw new SystemUserManagerException(e);    }    return webankDepartmentList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteSystemUser", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int deleteSystemUser(final String userId) throws SystemUserManagerException {    return this.systemUserLoader.deleteWtssUser(userId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addXmlUserToDB", "params": [], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void addXmlUserToDB() throws SystemUserManagerException {    //\u83b7\u53d6xml\u7528\u6237\u6570\u636e    XmlUsersSync xmlUsersSync = new XmlUsersSync(this.props);    for (String username : xmlUsersSync.getXmlUserMap().keySet()) {      User user = xmlUsersSync.getXmlUserMap().get(username);      WtssUser existUser = this.systemUserLoader.getWtssUserByUsername(user.getUserId());      WtssUser wtssUser = new WtssUser();      WebankUser webankUser = this.systemUserLoader.getWebankUserByUsername(user.getUserId());      if (null != webankUser && null == existUser) {        wtssUser.setUserId(webankUser.userId);        wtssUser.setUsername(webankUser.urn);        wtssUser.setFullName(webankUser.fullName);        wtssUser.setDepartmentId(webankUser.departmentId);        wtssUser.setDepartmentName(webankUser.departmentName);        wtssUser.setEmail(webankUser.email);        wtssUser.setPassword(\"\");      } else if (null == existUser) {        wtssUser.setUserId(\"wtss_\" + username);        wtssUser.setUsername(username);        wtssUser.setFullName(username);        wtssUser.setEmail(\"\");        wtssUser.setPassword(\"Abcd1234\");      }      if (null == existUser) {        List<String> proxyUsers = user.getProxyUsers();        String proxyUser = \"\";        for (int i = 0; i < proxyUsers.size(); i++) {          proxyUser = proxyUser + proxyUsers.get(i) + \",\";        }        if (!\"\".equals(proxyUser)) {          proxyUser = proxyUser.substring(0, proxyUser.length() - 1);        } else {          proxyUser = wtssUser.getUsername();        }        wtssUser.setProxyUsers(proxyUser);        int roleId = 0;        if (user.getGroups().contains(\"bdp-admin\")) {          roleId = 1;        } else {          roleId = 2;        }        wtssUser.setRoleId(roleId);        wtssUser.setUserType(WtssUser.UserType.ACTIVE.getUserTypeNum());        wtssUser.setCreateTime(System.currentTimeMillis());        wtssUser.setUpdateTime(System.currentTimeMillis());        wtssUser.setModifyInfo(\"Normal\");        wtssUser.setModifyType(\"0\");        // \u7528\u6237\u7c7b\u578b\u9ed8\u9ed8\u8ba4\u4e3a\u5b9e\u540d\u7528\u6237        String userId = user.getUserId();        String userCategory;        if (userId.startsWith(\"WTSS_\")) {          userCategory = \"ops\";        } else if (userId.startsWith(\"hduser\")) {          userCategory = \"system\";        } else {          userCategory = \"personal\";        }        wtssUser.setUserCategory(userCategory);        try {          this.systemUserLoader.addWtssUser(wtssUser);        } catch (SystemUserManagerException e) {          e.printStackTrace();        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParentDepartmentByPId", "params": ["int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WebankDepartment", "snippet": "  public WebankDepartment getParentDepartmentByPId(final int pid) throws SystemUserManagerException {    return this.systemUserLoader.getParentDepartmentByPId(pid);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDeparmentById", "params": ["int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WebankDepartment", "snippet": "  public WebankDepartment getDeparmentById(final int dpId) throws SystemUserManagerException {    return this.systemUserLoader.getWebankDepartmentByDpId(dpId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addDeparment", "params": ["int", "int", "String", "String", "int", "String", "String", "Integer", "Integer"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int addDeparment(final int dpId, final int pid, final String dpName, final String dpChName,      final int orgId, final String orgName, final String division, final Integer groupId,      final Integer uploadFlag) throws SystemUserManagerException {    WebankDepartment webankDepartment = new WebankDepartment();    webankDepartment.setDpId((long) dpId);    webankDepartment.setPid((long) pid);    webankDepartment.setDpName(dpName);    webankDepartment.setDpChName(dpChName);    webankDepartment.setOrgId((long) orgId);    webankDepartment.setOrgName(orgName);    webankDepartment.setDivision(division);    webankDepartment.setGroupId(groupId);    webankDepartment.setUploadFlag(uploadFlag);    return this.systemUserLoader.addDeparment(webankDepartment);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateDeparment", "params": ["int", "int", "String", "String", "int", "String", "String", "Integer", "Integer"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int updateDeparment(final int dpId, final int pid, final String dpName, final String dpChName,      final int orgId, final String orgName, final String division, final Integer groupId,      final Integer uploadFlag  ) throws SystemUserManagerException {    WebankDepartment webankDepartment = new WebankDepartment();    webankDepartment.setDpId((long) dpId);    webankDepartment.setPid((long) pid);    webankDepartment.setDpName(dpName);    webankDepartment.setDpChName(dpChName);    webankDepartment.setOrgId((long) orgId);    webankDepartment.setOrgName(orgName);    webankDepartment.setDivision(division);    webankDepartment.setGroupId(groupId);    // \u65b0\u589e\u5b57\u6bb5 upload_flag, \u7528\u4e8e\u533a\u522b\u90e8\u95e8\u662f\u5426\u6709\u4e0a\u4f20\u9879\u76ee\u6743\u9650    webankDepartment.setUploadFlag(uploadFlag);    return this.systemUserLoader.updateDeparment(webankDepartment);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteDeparment", "params": ["int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int deleteDeparment(final int dpId) throws SystemUserManagerException {    return this.systemUserLoader.deleteDeparment(dpId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWebankDepartmentTotal", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getWebankDepartmentTotal(final String searchterm) throws SystemUserManagerException {    return this.systemUserLoader.getWebankDepartmentTotal(searchterm);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserDepartmentByUsername", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUserDepartmentByUsername(final String userName) throws SystemUserManagerException {    String department = \"Submitter\";    WtssUser wtssUser = this.systemUserLoader.getWtssUserByUsername(userName);    if (null != wtssUser) {      String userDepartment = wtssUser.getDepartmentName();      if (null != userDepartment && !userDepartment.isEmpty()) {        return userDepartment;      }    }    return department;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchAllDepartmentGroup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<DepartmentGroup>", "snippet": "  public List<DepartmentGroup> fetchAllDepartmentGroup() {    List<DepartmentGroup> departmentGroups = new ArrayList<>();    try {      departmentGroups = jdbcExecutorLoader.fetchAllDepartmentGroup();    } catch (ExecutorManagerException e) {      logger.error(\"fetch All Department Group failed.\");    }    return departmentGroups;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addDepartmentGroup", "params": ["DepartmentGroup"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean addDepartmentGroup(DepartmentGroup departmentGroup) {    boolean ret = false;    try {      jdbcExecutorLoader.addDepartmentGroup(departmentGroup);      ret = true;    } catch (ExecutorManagerException e) {      logger.error(\"add Department Group failed\");    }    return ret;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkGroupNameIsExist", "params": ["DepartmentGroup"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean checkGroupNameIsExist(DepartmentGroup departmentGroup) {    try {      return jdbcExecutorLoader.checkGroupNameIsExist(departmentGroup);    } catch (ExecutorManagerException e) {      logger.error(\"checkGroupNameIsExist: {}\", e);    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkExecutorIsUsed", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean checkExecutorIsUsed(int executorId) {    try {      return jdbcExecutorLoader.checkExecutorIsUsed(executorId);    } catch (ExecutorManagerException e) {      logger.error(\"checkExecutorIsUsed: {}\", e);    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteDepartmentGroup", "params": ["DepartmentGroup"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean deleteDepartmentGroup(DepartmentGroup departmentGroup) {    int ret = 0;    try {      ret = jdbcExecutorLoader.deleteDepartmentGroup(departmentGroup);    } catch (ExecutorManagerException e) {      logger.error(\"delete Department Group failed\");    }    if (ret != 0) {      return true;    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateDepartmentGroup", "params": ["DepartmentGroup"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean updateDepartmentGroup(DepartmentGroup departmentGroup) {    int ret = 0;    try {      ret = jdbcExecutorLoader.updateDepartmentGroup(departmentGroup);    } catch (ExecutorManagerException e) {      logger.error(\"update Department Group failed\");    }    if (ret != 0) {      return true;    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "groupIdIsExist", "params": ["DepartmentGroup"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean groupIdIsExist(DepartmentGroup departmentGroup) {    int count = -1;    boolean ret = false;    try {      count = jdbcExecutorLoader.groupIdIsExist(departmentGroup);    } catch (ExecutorManagerException e) {      logger.error(e.getMessage());    }    if (count > 0) {      ret = true;    }    return ret;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDepartmentGroupById", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "DepartmentGroup", "snippet": "  public DepartmentGroup getDepartmentGroupById(Integer id) {    DepartmentGroup departmentGroup = null;    try {      departmentGroup = jdbcExecutorLoader.fetchDepartmentGroupById(id);    } catch (ExecutorManagerException e) {      logger.error(\"get Department Group by id failed\");    }    return departmentGroup;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchAllExecutors", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Executor>", "snippet": "  public List<Executor> fetchAllExecutors() {    List<Executor> executors = null;    try {      executors = jdbcExecutorLoader.fetchAllExecutors();    } catch (ExecutorManagerException e) {      logger.error(\"get Executor failed\");    }    return executors;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSystemUserByDepartmentId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<WtssUser>", "snippet": "  public List<WtssUser> getSystemUserByDepartmentId(int dpId) {    List<WtssUser> wtssUserList = null;    try {      wtssUserList = this.systemUserLoader.getSystemUserByDepartmentId(dpId);    } catch (SystemUserManagerException e) {      logger.error(\"get SystemUser By DepartmentId failed, caused by:{}\", e);    }    return wtssUserList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getModifySystemUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<WtssUser>", "snippet": "  public List<WtssUser> getModifySystemUser(String modifyType) {    List<WtssUser> wtssUserList = null;    try {      wtssUserList = this.systemUserLoader.getModifySystemUser(modifyType);    } catch (SystemUserManagerException e) {      logger.error(\"get Modify SystemUser By modifyType failed, caused by:{}\", e);    }    return wtssUserList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getModifySystemUser", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<WtssUser>", "snippet": "  public List<WtssUser> getModifySystemUser(int start, int pageSize) {    List<WtssUser> wtssUserList = null;    try {      wtssUserList = this.systemUserLoader.getModifySystemUser(start, pageSize);    } catch (SystemUserManagerException e) {      logger.error(\"get Modify SystemUser By modifyType failed, caused by:{}\", e);    }    return wtssUserList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getModifySystemUser", "params": ["String", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<WtssUser>", "snippet": "  public List<WtssUser> getModifySystemUser(String searchterm, int start, int pageSize) {    List<WtssUser> wtssUserList = null;    try {      wtssUserList = this.systemUserLoader.getModifySystemUser(searchterm, start, pageSize);    } catch (SystemUserManagerException e) {      logger.error(\"get Modify SystemUser By modifyType failed, caused by:{}\", e);    }    return wtssUserList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getModifyInfoSystemUserById", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getModifyInfoSystemUserById(String userId) {    String modifyInfoById = \"\";    try {      modifyInfoById = this.systemUserLoader.getModifyInfoSystemUserById(userId);    } catch (SystemUserManagerException e) {      logger.error(\"get Single Modify SystemUser Info By userId failed, caused by:{}\", e);    }    return modifyInfoById;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSystemUserByUserName", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "WtssUser", "snippet": "  public WtssUser getSystemUserByUserName(String userName) throws SystemUserManagerException {    return this.systemUserLoader.getSystemUserByUserName(userName);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDepartmentMaintainerList", "params": ["int", "int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<DepartmentMaintainer>", "snippet": "  public List<DepartmentMaintainer> getDepartmentMaintainerList(int start, int pageSize) throws SystemUserManagerException {    return this.systemUserLoader.getDepartmentMaintainerList(start, pageSize);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDepartmentMaintainerTotal", "params": [], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getDepartmentMaintainerTotal() throws SystemUserManagerException {    return this.systemUserLoader.getDepartmentMaintainerTotal();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDepartmentMaintainerList", "params": ["String", "int", "int"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<DepartmentMaintainer>", "snippet": "  public List<DepartmentMaintainer> getDepartmentMaintainerList(String searchterm, int start, int pageSize) throws SystemUserManagerException {    return this.systemUserLoader.getDepartmentMaintainerList(searchterm, start, pageSize);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addDepartmentMaintainer", "params": ["long", "String", "String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int addDepartmentMaintainer(long departmentId, String departmentName, String userName) throws SystemUserManagerException {    return this.systemUserLoader.addDepartmentMaintainer(departmentId, departmentName, userName);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDepMaintainerByDepId", "params": ["long"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "DepartmentMaintainer", "snippet": "  public DepartmentMaintainer getDepMaintainerByDepId(long departmentId) throws SystemUserManagerException {    return this.systemUserLoader.getDepMaintainerByDepId(departmentId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateDepartmentMaintainer", "params": ["long", "String", "String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int updateDepartmentMaintainer(long departmentId, String departmentName, String depMaintainer) throws SystemUserManagerException {    return this.systemUserLoader.updateDepartmentMaintainer(departmentId, departmentName, depMaintainer);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteDepartmentMaintainer", "params": ["Integer"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int deleteDepartmentMaintainer(Integer departmentId) throws SystemUserManagerException {    return this.systemUserLoader.deleteDepartmentMaintainer(departmentId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDepartmentMaintainerDepListByUserName", "params": ["String"], "throws": ["SystemUserManagerException"], "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "  public List<Integer> getDepartmentMaintainerDepListByUserName(String loginUserName) throws SystemUserManagerException {    return this.systemUserLoader.getDepartmentMaintainerDepListByUserName(loginUserName);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDepartmentMaintainer", "params": ["User"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isDepartmentMaintainer(User user) {    try {      return CollectionUtils.isNotEmpty(getDepartmentMaintainerDepListByUserName(user.getUserId()));    } catch (SystemUserManagerException e) {      return false;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMaintainedProjects", "params": ["User"], "throws": null, "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "  public List<Integer> getMaintainedProjects(User user) {    try {      return this.systemUserLoader.getMaintainedProjects(user.getUserId());    } catch (SystemUserManagerException e ) {      return Collections.emptyList();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isMaintainedProject", "params": ["Project", "List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isMaintainedProject(Project project, List<Integer> projectIds) {    return projectIds.contains(project.getId());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/SystemManager.java", "stars": "18", "class": {"name": "SystemManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getCount() {        return commentsMapper.getCount();    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/CommentsServiceImpl.java", "stars": "1", "class": {"name": "CommentsServiceImpl", "extends": null, "implements": ["CommentsService"], "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(SquareDelegate.measureWidth(widthMeasureSpec, heightMeasureSpec),                SquareDelegate.measureHeight(widthMeasureSpec, heightMeasureSpec));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/square/SquareTextView.java", "stars": "1", "class": {"name": "SquareTextView", "extends": "AppCompatTextView", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "request", "params": ["String"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "JsonObject", "snippet": "    private JsonObject request(String URL) throws IOException {        java.net.URL url = new URL(URL);        URLConnection urlConn = url.openConnection();        urlConn.addRequestProperty(\"User-Agent\", \"Mozilla\");        InputStream inStream = urlConn.getInputStream();        JsonParser jp = new JsonParser();        JsonElement root = jp.parse(new InputStreamReader((InputStream) urlConn.getContent()));        inStream.close();        return root.getAsJsonObject();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/translate/TranslationManager.java", "stars": "12", "class": {"name": "TranslationManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "translate", "params": ["String", "Language", "Language"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String translate(String text, Language sourceLang, Language lang) throws IOException {        return request(\"https://translate.yandex.net/api/v1.5/tr.json/translate?key=\" + API_KEY + \"&text=\" + text.replace(\" \", \"%20\") + \"&lang=\" + sourceLang.getCode() + \"-\" + lang.getCode()).get(\"text\").getAsString();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/translate/TranslationManager.java", "stars": "12", "class": {"name": "TranslationManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "detectLanguage", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Language", "snippet": "    public Language detectLanguage(String text) throws IOException {        String response = request(\"https://translate.yandex.net/api/v1.5/tr.json/detect?key=\" + API_KEY + \"&text=\" + text.replace(\" \", \"%20\")).get(\"lang\").getAsString();        return Language.getByCode(response);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/translate/TranslationManager.java", "stars": "12", "class": {"name": "TranslationManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["SQLException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws SQLException {        //1\u3001\u83b7\u53d6DataSource\uff0c\u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e        ComboPooledDataSource ds = new ComboPooledDataSource();        //2\u3001\u83b7\u53d6\u8fde\u63a5        for(int i = 1; i <= 11; i++){            Connection conn = ds.getConnection();            System.out.println(i + \":\" +conn);            if(i == 5){                conn.close();//\u5f52\u8fd8\u8fde\u63a5\u5230\u8fde\u63a5\u6c60            }        }        testNamedConfig();    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/datasource/c3p0/C3P0Demo2.java", "stars": "2", "class": {"name": "C3P0Demo2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testNamedConfig", "params": [], "throws": ["SQLException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void testNamedConfig() throws SQLException {        //1\u3001\u83b7\u53d6DataSource\uff0c\u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e        ComboPooledDataSource ds = new ComboPooledDataSource(\"otherc3p0\");        //2\u3001\u83b7\u53d6\u8fde\u63a5        for(int i = 1; i <= 10; i++){            Connection conn = ds.getConnection();            System.out.println(i + \":\" +conn);            if(i == 5){                conn.close();//\u5f52\u8fd8\u8fde\u63a5\u5230\u8fde\u63a5\u6c60            }        }    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/datasource/c3p0/C3P0Demo2.java", "stars": "2", "class": {"name": "C3P0Demo2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String", "Map<String,String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String get(String host, Map<String, String> params) {        try {            // \u8bbe\u7f6eSSLContext            SSLContext sslcontext = SSLContext.getInstance(\"TLS\");            sslcontext.init(null, new TrustManager[] { myX509TrustManager }, null);            String sendUrl = getUrlWithQueryString(host, params);            // System.out.println(\"URL:\" + sendUrl);            URL uri = new URL(sendUrl); // \u521b\u5efaURL\u5bf9\u8c61            HttpURLConnection conn = (HttpURLConnection) uri.openConnection();            if (conn instanceof HttpsURLConnection) {                ((HttpsURLConnection) conn).setSSLSocketFactory(sslcontext.getSocketFactory());            }            conn.setConnectTimeout(SOCKET_TIMEOUT); // \u8bbe\u7f6e\u76f8\u5e94\u8d85\u65f6            conn.setRequestMethod(GET);            int statusCode = conn.getResponseCode();            if (statusCode != HttpURLConnection.HTTP_OK) {                System.out.println(\"Http\u9519\u8bef\u7801\uff1a\" + statusCode);            }            // \u8bfb\u53d6\u670d\u52a1\u5668\u7684\u6570\u636e            InputStream is = conn.getInputStream();            BufferedReader br = new BufferedReader(new InputStreamReader(is));            StringBuilder builder = new StringBuilder();            String line = null;            while ((line = br.readLine()) != null) {                builder.append(line);            }            String text = builder.toString();            close(br); // \u5173\u95ed\u6570\u636e\u6d41            close(is); // \u5173\u95ed\u6570\u636e\u6d41            conn.disconnect(); // \u65ad\u5f00\u8fde\u63a5            return text;        } catch (MalformedURLException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        } catch (KeyManagementException e) {            e.printStackTrace();        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/baidu/translate/demo/HttpGet.java", "stars": "1", "class": {"name": "HttpGet", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getUrlWithQueryString", "params": ["String", "Map<String,String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getUrlWithQueryString(String url, Map<String, String> params) {        if (params == null) {            return url;        }        StringBuilder builder = new StringBuilder(url);        if (url.contains(\"?\")) {            builder.append(\"&\");        } else {            builder.append(\"?\");        }        int i = 0;        for (String key : params.keySet()) {            String value = params.get(key);            if (value == null) { // \u8fc7\u6ee4\u7a7a\u7684key                continue;            }            if (i != 0) {                builder.append('&');            }            builder.append(key);            builder.append('=');            builder.append(encode(value));            i++;        }        return builder.toString();    }", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/baidu/translate/demo/HttpGet.java", "stars": "1", "class": {"name": "HttpGet", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "close", "params": ["Closeable"], "throws": null, "modifiers": ["static", "protected"], "return_type": "void", "snippet": "    protected static void close(Closeable closeable) {        if (closeable != null) {            try {                closeable.close();            } catch (IOException e) {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/baidu/translate/demo/HttpGet.java", "stars": "1", "class": {"name": "HttpGet", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "encode", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String encode(String input) {        if (input == null) {            return \"\";        }        try {            return URLEncoder.encode(input, \"utf-8\");        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        return input;    }", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/baidu/translate/demo/HttpGet.java", "stars": "1", "class": {"name": "HttpGet", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/discriminator/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),      \"org/apache/ibatis/submitted/discriminator/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/discriminator/DiscriminatorTest.java", "stars": "15", "class": {"name": "DiscriminatorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSwitchResultType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSwitchResultType() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<Vehicle> vehicles = mapper.selectVehicles();      assertEquals(Car.class, vehicles.get(0).getClass());      assertEquals(Integer.valueOf(5), ((Car)vehicles.get(0)).getDoorCount());      assertEquals(Truck.class, vehicles.get(1).getClass());      assertEquals(Float.valueOf(1.5f), ((Truck)vehicles.get(1)).getCarryingCapacity());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/discriminator/DiscriminatorTest.java", "stars": "15", "class": {"name": "DiscriminatorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldInheritResultType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldInheritResultType() {    // #486    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<Owner> owners = mapper.selectOwnersWithAVehicle();      assertEquals(Truck.class, owners.get(0).getVehicle().getClass());      assertEquals(Car.class, owners.get(1).getVehicle().getClass());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/discriminator/DiscriminatorTest.java", "stars": "15", "class": {"name": "DiscriminatorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState, int layoutId) {        String language = PrefUtils.get(this, Prefs.LOCALE, ButterApplication.getSystemLanguage());        LocaleUtils.setCurrent(this, LocaleUtils.toLocale(language));        super.onCreate(savedInstanceState);        setContentView(layoutId);        ButterKnife.bind(this);        mHandler = new Handler(getMainLooper());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        TorrentService.bindHere(this, this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        super.onPause();        if (null != mService) {            mService.removeListener(this);            unbindService(this);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "setContentView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setContentView(int layoutResID) {        String language = PrefUtils.get(this, Prefs.LOCALE, ButterApplication.getSystemLanguage());        LocaleUtils.setCurrent(this, LocaleUtils.toLocale(language));        super.setContentView(layoutResID);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "getApp", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "ButterApplication", "snippet": "    protected ButterApplication getApp() {        return (ButterApplication) getApplication();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "getTorrentService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TorrentService", "snippet": "    public TorrentService getTorrentService() {        return mService;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "onServiceConnected", "params": ["ComponentName", "IBinder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onServiceConnected(ComponentName name, IBinder service) {        mService = ((TorrentService.ServiceBinder) service).getService();        mService.addListener(this);        mService.setCurrentActivity(this);        onTorrentServiceConnected();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "onServiceDisconnected", "params": ["ComponentName"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onServiceDisconnected(ComponentName name) {        mService.removeListener(this);        mService = null;        onTorrentServiceDisconnected();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "onTorrentServiceConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTorrentServiceConnected() {        // Placeholder    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "onTorrentServiceDisconnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTorrentServiceDisconnected() {        // Placeholder    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStreamPrepared", "params": ["Torrent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamPrepared(Torrent torrent) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStreamStarted", "params": ["Torrent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamStarted(Torrent torrent) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStreamError", "params": ["Torrent", "Exception"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamError(Torrent torrent, Exception e) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStreamReady", "params": ["Torrent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamReady(Torrent torrent) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "onServerReady", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onServerReady(String url) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStreamProgress", "params": ["Torrent", "StreamStatus"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamProgress(Torrent torrent, StreamStatus streamStatus) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStreamStopped", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamStopped() {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/base/TVTorrentBaseActivity.java", "stars": "4", "class": {"name": "TVTorrentBaseActivity", "extends": "FragmentActivity", "implements": ["TorrentServerListener", "TorrentActivity", "ServiceConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/automapping/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/automapping/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java", "stars": "15", "class": {"name": "AutomappingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1);      Assertions.assertEquals(\"User1\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java", "stars": "15", "class": {"name": "AutomappingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUserWhithPhoneNumber", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUserWhithPhoneNumber() {    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUserWithPhoneNumber(1);      Assertions.assertEquals(\"User1\", user.getName());      Assertions.assertEquals(Long.valueOf(12345678901L), user.getPhone());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java", "stars": "15", "class": {"name": "AutomappingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldNotInheritAutoMappingInherited_InlineNestedResultMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldNotInheritAutoMappingInherited_InlineNestedResultMap() {    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUserWithPets_Inline(2);      Assertions.assertEquals(Integer.valueOf(2), user.getId());      Assertions.assertEquals(\"User2\", user.getName());      Assertions.assertNull(user.getPets().get(0).getPetName(), \"should not inherit auto-mapping\");      Assertions.assertEquals(\"John\", user.getPets().get(0).getBreeder().getBreederName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java", "stars": "15", "class": {"name": "AutomappingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldNotInheritAutoMappingInherited_ExternalNestedResultMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldNotInheritAutoMappingInherited_ExternalNestedResultMap() {    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUserWithPets_External(2);      Assertions.assertEquals(Integer.valueOf(2), user.getId());      Assertions.assertEquals(\"User2\", user.getName());      Assertions.assertNull(user.getPets().get(0).getPetName(), \"should not inherit auto-mapping\");      Assertions.assertEquals(\"John\", user.getPets().get(0).getBreeder().getBreederName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java", "stars": "15", "class": {"name": "AutomappingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldIgnorePartialAutoMappingBehavior_InlineNestedResultMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldIgnorePartialAutoMappingBehavior_InlineNestedResultMap() {    // For nested resultMaps, PARTIAL works the same as NONE    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.PARTIAL);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUserWithPets_Inline(2);      Assertions.assertEquals(Integer.valueOf(2), user.getId());      Assertions.assertEquals(\"User2\", user.getName());      Assertions.assertNull(user.getPets().get(0).getPetName(), \"should not inherit auto-mapping\");      Assertions.assertEquals(\"John\", user.getPets().get(0).getBreeder().getBreederName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java", "stars": "15", "class": {"name": "AutomappingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldRespectFullAutoMappingBehavior_InlineNestedResultMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldRespectFullAutoMappingBehavior_InlineNestedResultMap() {    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.FULL);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUserWithPets_Inline(2);      Assertions.assertEquals(Integer.valueOf(2), user.getId());      Assertions.assertEquals(\"User2\", user.getName());      Assertions.assertEquals(\"Chien\", user.getPets().get(0).getPetName());      Assertions.assertEquals(\"John\", user.getPets().get(0).getBreeder().getBreederName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java", "stars": "15", "class": {"name": "AutomappingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldIgnorePartialAutoMappingBehavior_ExternalNestedResultMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldIgnorePartialAutoMappingBehavior_ExternalNestedResultMap() {    // For nested resultMaps, PARTIAL works the same as NONE    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.PARTIAL);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUserWithPets_External(2);      Assertions.assertEquals(Integer.valueOf(2), user.getId());      Assertions.assertEquals(\"User2\", user.getName());      Assertions.assertNull(user.getPets().get(0).getPetName(), \"should not inherit auto-mapping\");      Assertions.assertEquals(\"John\", user.getPets().get(0).getBreeder().getBreederName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java", "stars": "15", "class": {"name": "AutomappingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldRespectFullAutoMappingBehavior_ExternalNestedResultMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldRespectFullAutoMappingBehavior_ExternalNestedResultMap() {    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.FULL);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUserWithPets_External(2);      Assertions.assertEquals(Integer.valueOf(2), user.getId());      Assertions.assertEquals(\"User2\", user.getName());      Assertions.assertEquals(\"Chien\", user.getPets().get(0).getPetName());      Assertions.assertEquals(\"John\", user.getPets().get(0).getBreeder().getBreederName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java", "stars": "15", "class": {"name": "AutomappingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetBooks", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetBooks() {    // set automapping to default partial    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.PARTIAL);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      // no errors throw      List<Book> books = mapper.getBooks();      Assertions.assertTrue(!books.isEmpty(), \"should return results,no errors throw\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java", "stars": "15", "class": {"name": "AutomappingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldUpdateFinalField", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUpdateFinalField() {    // set automapping to default partial    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.PARTIAL);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Article article = mapper.getArticle();      // Java Language Specification 17.5.3 Subsequent Modification of Final Fields      // http://docs.oracle.com/javase/specs/jls/se5.0/html/memory.html#17.5.3      // The final field should be updated in mapping      Assertions.assertTrue(article.version > 0, \"should update version in mapping\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java", "stars": "15", "class": {"name": "AutomappingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // this property value should be replaced on all mapper files    Properties p = new Properties();    p.put(\"property\", \"id\");    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/propertiesinmapperfiles/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader, p);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/propertiesinmapperfiles/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/propertiesinmapperfiles/PropertiesInMappersTest.java", "stars": "15", "class": {"name": "PropertiesInMappersTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1);      Assertions.assertEquals(\"User1\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/propertiesinmapperfiles/PropertiesInMappersTest.java", "stars": "15", "class": {"name": "PropertiesInMappersTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "run", "params": ["InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run(InitConfigEntity configEntity) {        DiffHostConfigs removedNodeConfigs = getRemovedNodes(configEntity);        DiffHostConfigs addedNodeConfigs = getAddedNodes(configEntity);        if (removedNodeConfigs == null && addedNodeConfigs == null                || (CollectionUtils.isEmpty(removedNodeConfigs.getOrdererHostConfig())                && CollectionUtils.isEmpty(removedNodeConfigs.getPeerHostConfig())                && CollectionUtils.isEmpty(addedNodeConfigs.getOrdererHostConfig())                && CollectionUtils.isEmpty(addedNodeConfigs.getPeerHostConfig()))) {            // log.info(\"\u672a\u53d1\u73b0\u4e0e\u4e0a\u6b21\u5b89\u88c5\u7684\u5dee\u5f02\uff0c\u65e0\u9700\u5b89\u88c5\u4efb\u4f55\u8282\u70b9\");            log.info(\"Did not find the difference from the last installation, no need to install any node\");            return;        }        doRemoveNodes(removedNodeConfigs, configEntity);        doNewNodesInstall(addedNodeConfigs, configEntity);        // \u901a\u77e5\u7ed3\u675f        Set<String> serverUrls = new HashSet<>();        parseServerUrl(serverUrls, removedNodeConfigs.getOrdererHostConfig());        parseServerUrl(serverUrls, removedNodeConfigs.getPeerHostConfig());        parseServerUrl(serverUrls, addedNodeConfigs.getOrdererHostConfig());        parseServerUrl(serverUrls, addedNodeConfigs.getPeerHostConfig());        remoteService.notifyNodesToEnd(serverUrls);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/UpdateNetworkBiz.java", "stars": "7", "class": {"name": "UpdateNetworkBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "getRemovedNodes", "params": ["InitConfigEntity"], "throws": null, "modifiers": ["private"], "return_type": "DiffHostConfigs", "snippet": "    private DiffHostConfigs getRemovedNodes(InitConfigEntity configEntity) {        DiffHostConfigs removedNodes = new DiffHostConfigs();        // \u6570\u636e\u5e93\u4e2d\u641c\u7d22\u6240\u6709 orderer \u8282\u70b9        List<NodeDO> nodes = queryNodes(configEntity.getOrgMSPID(), RoleEnum.ORDER);        removedNodes.setOrdererHostConfig(checkRemovedNodes(nodes, configEntity.getOrdererHostConfig()));        nodes = queryNodes(configEntity.getOrgMSPID(), RoleEnum.PEER);        removedNodes.setPeerHostConfig(checkRemovedNodes(nodes, configEntity.getPeerHostConfig()));        return removedNodes;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/UpdateNetworkBiz.java", "stars": "7", "class": {"name": "UpdateNetworkBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "checkRemovedNodes", "params": ["List<NodeDO>", "Map<String,String>"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "    private Map<String, String> checkRemovedNodes(List<NodeDO> prevNodes, Map<String, String> newHostConfig) {        Map<String, String> removedHostConfig = new HashMap<>();        for (NodeDO node : prevNodes) {            if (!newHostConfig.containsKey(node.getHostName())) {                removedHostConfig.put(node.getHostName(), node.getIp() + \":\" + node.getPort());            }        }        return removedHostConfig;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/UpdateNetworkBiz.java", "stars": "7", "class": {"name": "UpdateNetworkBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "getAddedNodes", "params": ["InitConfigEntity"], "throws": null, "modifiers": ["private"], "return_type": "DiffHostConfigs", "snippet": "    private DiffHostConfigs getAddedNodes(InitConfigEntity configEntity) {        DiffHostConfigs addedNodes = new DiffHostConfigs();        List<NodeDO> nodes = queryNodes(configEntity.getOrgMSPID(), RoleEnum.ORDER);        addedNodes.setOrdererHostConfig(checkAddedNodes(nodes, configEntity.getOrdererHostConfig()));        nodes = queryNodes(configEntity.getOrgMSPID(), RoleEnum.PEER);        addedNodes.setPeerHostConfig(checkAddedNodes(nodes, configEntity.getPeerHostConfig()));        return addedNodes;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/UpdateNetworkBiz.java", "stars": "7", "class": {"name": "UpdateNetworkBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "checkAddedNodes", "params": ["List<NodeDO>", "Map<String,String>"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "    private Map<String, String> checkAddedNodes(List<NodeDO> prevNodes, Map<String, String> newHostConfig) {        Map<String, String> addedHostConfig = new HashMap<>();        for (String hostName : newHostConfig.keySet()) {            if (prevNodes.stream().noneMatch(n -> n.getHostName().equalsIgnoreCase(hostName))) {                addedHostConfig.put(hostName, newHostConfig.get(hostName));            }        }        return addedHostConfig;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/UpdateNetworkBiz.java", "stars": "7", "class": {"name": "UpdateNetworkBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "doRemoveNodes", "params": ["DiffHostConfigs", "InitConfigEntity"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void doRemoveNodes(DiffHostConfigs removedNodeConfigs, InitConfigEntity configEntity) {        // Orderer        if (!CollectionUtils.isEmpty(removedNodeConfigs.getOrdererHostConfig())) {            ordererRemoveBiz.ordererRemove(removedNodeConfigs.getOrdererHostConfig(), configEntity);        }        // peer        if (!CollectionUtils.isEmpty(removedNodeConfigs.getPeerHostConfig())) {            peerRemoveBiz.peerRemove(removedNodeConfigs.getPeerHostConfig(), configEntity);        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/UpdateNetworkBiz.java", "stars": "7", "class": {"name": "UpdateNetworkBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "doNewNodesInstall", "params": ["DiffHostConfigs", "InitConfigEntity"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void doNewNodesInstall(DiffHostConfigs addedNodeConfigs, InitConfigEntity configEntity) {        if (!CollectionUtils.isEmpty(addedNodeConfigs.getOrdererHostConfig())) {            ordererExtendBiz.ordererExtend(addedNodeConfigs.getOrdererHostConfig(), configEntity);        }        if (!CollectionUtils.isEmpty(addedNodeConfigs.getPeerHostConfig())) {            peerExtendBiz.peerExtend(addedNodeConfigs.getPeerHostConfig(), configEntity);        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/UpdateNetworkBiz.java", "stars": "7", "class": {"name": "UpdateNetworkBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "parseServerUrl", "params": ["Set<String>", "Map<String,String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void parseServerUrl(Set<String> serverUrls, Map<String, String> hostConfig) {        if (CollectionUtils.isEmpty(hostConfig)) {            return;        }        for (String host : hostConfig.keySet()) {            String ip = hostConfig.get(host);            ip = ip.substring(0, ip.lastIndexOf(\":\"));            serverUrls.add(\"http://\" + ip + \":8080/\");        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/UpdateNetworkBiz.java", "stars": "7", "class": {"name": "UpdateNetworkBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "queryNodes", "params": ["String", "RoleEnum"], "throws": null, "modifiers": ["private"], "return_type": "List<NodeDO>", "snippet": "    private List<NodeDO> queryNodes(String orgMspID, RoleEnum role) {        NodeDO nodeDO = new NodeDO();        nodeDO.setOrgMspId(orgMspID);        nodeDO.setRole(role);        try {            return this.checkPointDb.find(nodeDO);        } catch (SQLException e) {            // log.error(\"\u67e5\u8be2\u6570\u636e\u5e93\u5f02\u5e38\", e);            log.error(\"Exception when querying the database\", e);            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/UpdateNetworkBiz.java", "stars": "7", "class": {"name": "UpdateNetworkBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "initLibVLC", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initLibVLC() {        sLibVLC = new LibVLC();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "onInitializeAccessibilityEvent", "params": ["AccessibilityEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onInitializeAccessibilityEvent(AccessibilityEvent event) {        super.onInitializeAccessibilityEvent(event);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "onInitializeAccessibilityNodeInfo", "params": ["AccessibilityNodeInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) {        super.onInitializeAccessibilityNodeInfo(info);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "resolveAdjustedSize", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int resolveAdjustedSize(int desiredSize, int measureSpec) {        return getDefaultSize(desiredSize, measureSpec);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "setVideoPath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoPath(String path) {        initLibVLC();        final Media media = new Media(sLibVLC, path);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "setVideoURI", "params": ["Uri"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoURI(Uri uri) {        initLibVLC();        final Media media = new Media(sLibVLC, uri);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "setVideoURI", "params": ["Uri", "Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoURI(Uri uri, Map<String, String> headers) {        setVideoURI(uri);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "addSubtitleSource", "params": ["InputStream", "MediaFormat"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addSubtitleSource(InputStream is, MediaFormat format) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "setMediaController", "params": ["MediaController"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMediaController(MediaController controller) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "setOnPreparedListener", "params": ["OnPreparedListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnPreparedListener(OnPreparedListener l) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "setOnCompletionListener", "params": ["OnCompletionListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnCompletionListener(OnCompletionListener l) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "setOnErrorListener", "params": ["OnErrorListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnErrorListener(OnErrorListener l) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "setOnInfoListener", "params": ["OnInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnInfoListener(OnInfoListener l) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "onTouchEvent", "params": ["MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onTouchEvent(MotionEvent ev) {        return super.onTouchEvent(ev);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "onTrackballEvent", "params": ["MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onTrackballEvent(MotionEvent ev) {        return super.onTrackballEvent(ev);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "onKeyDown", "params": ["int", "KeyEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onKeyDown(int keyCode, KeyEvent event) {        return super.onKeyDown(keyCode, event);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "pause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pause() {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "stopPlayback", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stopPlayback() {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "suspend", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void suspend() {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "resume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void resume() {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "getDuration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getDuration() {        return -1;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "getCurrentPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentPosition() {        return 0;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "seekTo", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void seekTo(int msec) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "isPlaying", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isPlaying() {        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "getBufferPercentage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getBufferPercentage() {        return 0;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "canPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean canPause() {        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "canSeekBackward", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean canSeekBackward() {        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "canSeekForward", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean canSeekForward() {        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "getAudioSessionId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getAudioSessionId() {        return 0;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onAttachedToWindow() {        super.onAttachedToWindow();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDetachedFromWindow() {        super.onDetachedFromWindow();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "draw", "params": ["Canvas"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void draw(Canvas canvas) {        super.draw(canvas);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {        super.onLayout(changed, left, top, right, bottom);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/media/VideoView.java", "stars": "4", "class": {"name": "VideoView", "extends": "SurfaceView", "implements": ["MediaController"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        // Eingabe:        int[] zuSortieren = {12, 14, 125, 1, 9, 28, 3};        // Ausgabe: Sortierte Liste        int tmp;        for (int i = 0; i < zuSortieren.length; i++) {            for (int j = i; j < zuSortieren.length; j++) {                if (zuSortieren[j] < zuSortieren[i]) {                    tmp = zuSortieren[i];                    zuSortieren[i] = zuSortieren[j];                    zuSortieren[j] = tmp;                }            }        }        for (int ausgabe: zuSortieren) {            System.out.println(ausgabe);        }    }", "url": "https://raw.githubusercontent.com/unterstein/dhbw-java-2020/master/src/SortierungLoesung.java", "stars": "3", "class": {"name": "SortierungLoesung", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hibernatePropertiesCustomizer", "params": ["javax"], "throws": null, "modifiers": ["public"], "return_type": "HibernatePropertiesCustomizer", "snippet": "    public HibernatePropertiesCustomizer hibernatePropertiesCustomizer(javax.cache.CacheManager cacheManager) {        return hibernateProperties -> hibernateProperties.put(ConfigSettings.CACHE_MANAGER, cacheManager);    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/config/CacheConfiguration.java", "stars": "2", "class": {"name": "CacheConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cacheManagerCustomizer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JCacheManagerCustomizer", "snippet": "    public JCacheManagerCustomizer cacheManagerCustomizer() {        return cm -> {            createCache(cm, com.meimos.myapp.repository.UserRepository.USERS_BY_LOGIN_CACHE);            createCache(cm, com.meimos.myapp.repository.UserRepository.USERS_BY_EMAIL_CACHE);            createCache(cm, com.meimos.myapp.domain.User.class.getName());            createCache(cm, com.meimos.myapp.domain.Authority.class.getName());            createCache(cm, com.meimos.myapp.domain.User.class.getName() + \".authorities\");            // jhipster-needle-ehcache-add-entry        };    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/config/CacheConfiguration.java", "stars": "2", "class": {"name": "CacheConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCache", "params": ["javax", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createCache(javax.cache.CacheManager cm, String cacheName) {        javax.cache.Cache<Object, Object> cache = cm.getCache(cacheName);        if (cache == null) {            cm.createCache(cacheName, jcacheConfiguration);        }    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/config/CacheConfiguration.java", "stars": "2", "class": {"name": "CacheConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_detail_player);        ButterKnife.bind(this);        String url =  getUrl();        //detailPlayer.setUp(url, false, null, \"\u6d4b\u8bd5\u89c6\u9891\");        //detailPlayer.setLooping(true);        //detailPlayer.setShowPauseCover(false);        //\u5982\u679c\u89c6\u9891\u5e27\u6570\u592a\u9ad8\u5bfc\u81f4\u5361\u753b\u9762\u4e0d\u540c\u6b65        //VideoOptionModel videoOptionModel = new VideoOptionModel(IjkMediaPlayer.OPT_CATEGORY_PLAYER, \"framedrop\", 30);        //\u5982\u679c\u89c6\u9891seek\u4e4b\u540e\u4ece\u5934\u64ad\u653e        //VideoOptionModel videoOptionModel = new VideoOptionModel(IjkMediaPlayer.OPT_CATEGORY_PLAYER, \"enable-accurate-seek\", 1);        //list<VideoOptionModel> list = new ArrayList<>();        //list.add(videoOptionModel);        //GSYVideoManager.instance().setOptionModelList(list);        //GSYVideoManager.instance().setTimeOut(4000, true);//        VideoOptionModel videoOptionModel =//                new VideoOptionModel(IjkMediaPlayer.OPT_CATEGORY_FORMAT, \"dns_cache_clear\", 1);//        List<VideoOptionModel> list = new ArrayList<>();//        list.add(videoOptionModel);//        VideoOptionModel videoOptionModel2 = new VideoOptionModel(IjkMediaPlayer.OPT_CATEGORY_FORMAT, \"dns_cache_timeout\", -1);//        list.add(videoOptionModel2);//        GSYVideoManager.instance().setOptionModelList(list);        //\u589e\u52a0\u5c01\u9762        ImageView imageView = new ImageView(this);        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        imageView.setImageResource(R.mipmap.xxx1);        //detailPlayer.setThumbImageView(imageView);        resolveNormalVideoUI();        //\u5916\u90e8\u8f85\u52a9\u7684\u65cb\u8f6c\uff0c\u5e2e\u52a9\u5168\u5c4f        orientationUtils = new OrientationUtils(this, detailPlayer);        //\u521d\u59cb\u5316\u4e0d\u6253\u5f00\u5916\u90e8\u7684\u65cb\u8f6c        orientationUtils.setEnable(false);        /**\u4ec5\u4ec5\u6a2a\u5c4f\u65cb\u8f6c\uff0c\u4e0d\u53d8\u76f4*/        orientationUtils.setOnlyRotateLand(true);        Map<String, String> header = new HashMap<>();        header.put(\"ee\", \"33\");        header.put(\"allowCrossProtocolRedirects\", \"true\");        GSYVideoOptionBuilder gsyVideoOption = new GSYVideoOptionBuilder();        gsyVideoOption.setThumbImageView(imageView)                .setIsTouchWiget(true)                .setRotateViewAuto(false)                //\u4ec5\u4ec5\u6a2a\u5c4f\u65cb\u8f6c\uff0c\u4e0d\u53d8\u76f4                .setOnlyRotateLand(true)                .setLockLand(false)                .setAutoFullWithSize(false)                .setShowFullAnimation(false)                .setNeedLockFull(true)                .setUrl(url)                .setMapHeadData(header)                .setCacheWithPlay(false)                .setVideoTitle(\"\u6d4b\u8bd5\u89c6\u9891\")                .setVideoAllCallBack(new GSYSampleCallBack() {                    @Override                    public void onPrepared(String url, Object... objects) {                        Debuger.printfError(\"***** onPrepared **** \" + objects[0]);                        Debuger.printfError(\"***** onPrepared **** \" + objects[1]);                        super.onPrepared(url, objects);                        //\u5f00\u59cb\u64ad\u653e\u4e86\u624d\u80fd\u65cb\u8f6c\u548c\u5168\u5c4f                        orientationUtils.setEnable(true);                        isPlay = true;                        //\u8bbe\u7f6e seek \u7684\u4e34\u8fd1\u5e27\u3002                        if(detailPlayer.getGSYVideoManager().getPlayer() instanceof Exo2PlayerManager) {                            ((Exo2PlayerManager) detailPlayer.getGSYVideoManager().getPlayer()).setSeekParameter(SeekParameters.NEXT_SYNC);                            Debuger.printfError(\"***** setSeekParameter **** \");                        }                    }                    @Override                    public void onEnterFullscreen(String url, Object... objects) {                        super.onEnterFullscreen(url, objects);                        Debuger.printfError(\"***** onEnterFullscreen **** \" + objects[0]);//title                        Debuger.printfError(\"***** onEnterFullscreen **** \" + objects[1]);//\u5f53\u524d\u5168\u5c4fplayer                    }                    @Override                    public void onAutoComplete(String url, Object... objects) {                        super.onAutoComplete(url, objects);                    }                    @Override                    public void onClickStartError(String url, Object... objects) {                        super.onClickStartError(url, objects);                    }                    @Override                    public void onQuitFullscreen(String url, Object... objects) {                        super.onQuitFullscreen(url, objects);                        Debuger.printfError(\"***** onQuitFullscreen **** \" + objects[0]);//title                        Debuger.printfError(\"***** onQuitFullscreen **** \" + objects[1]);//\u5f53\u524d\u975e\u5168\u5c4fplayer                        if (orientationUtils != null) {                            orientationUtils.backToProtVideo();                        }                    }                })                .setLockClickListener(new LockClickListener() {                    @Override                    public void onClick(View view, boolean lock) {                        if (orientationUtils != null) {                            //\u914d\u5408\u4e0b\u65b9\u7684onConfigurationChanged                            orientationUtils.setEnable(!lock);                        }                    }                })                .setGSYVideoProgressListener(new GSYVideoProgressListener() {                    @Override                    public void onProgress(int progress, int secProgress, int currentPosition, int duration) {                        Debuger.printfLog(\" progress \" + progress + \" secProgress \" + secProgress + \" currentPosition \" + currentPosition + \" duration \" + duration);                    }                })                .build(detailPlayer);        detailPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //\u76f4\u63a5\u6a2a\u5c4f                orientationUtils.resolveByClick();                //\u7b2c\u4e00\u4e2atrue\u662f\u5426\u9700\u8981\u9690\u85cfactionbar\uff0c\u7b2c\u4e8c\u4e2atrue\u662f\u5426\u9700\u8981\u9690\u85cfstatusbar                detailPlayer.startWindowFullscreen(DetailPlayer.this, true, true);            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailPlayer.java", "stars": "2", "class": {"name": "DetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (orientationUtils != null) {            orientationUtils.backToProtVideo();        }        if (GSYVideoManager.backFromWindowFull(this)) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailPlayer.java", "stars": "2", "class": {"name": "DetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        getCurPlay().onVideoPause();        super.onPause();        isPause = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailPlayer.java", "stars": "2", "class": {"name": "DetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        getCurPlay().onVideoResume(false);        super.onResume();        isPause = false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailPlayer.java", "stars": "2", "class": {"name": "DetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        if (isPlay) {            getCurPlay().release();        }        //GSYPreViewManager.instance().releaseMediaPlayer();        if (orientationUtils != null)            orientationUtils.releaseListener();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailPlayer.java", "stars": "2", "class": {"name": "DetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onConfigurationChanged", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        //\u5982\u679c\u65cb\u8f6c\u4e86\u5c31\u5168\u5c4f        if (isPlay && !isPause) {            detailPlayer.onConfigurationChanged(this, newConfig, orientationUtils, true, true);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailPlayer.java", "stars": "2", "class": {"name": "DetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveNormalVideoUI", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveNormalVideoUI() {        //\u589e\u52a0title        detailPlayer.getTitleTextView().setVisibility(View.GONE);        detailPlayer.getBackButton().setVisibility(View.GONE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailPlayer.java", "stars": "2", "class": {"name": "DetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurPlay", "params": [], "throws": null, "modifiers": ["private"], "return_type": "GSYVideoPlayer", "snippet": "    private GSYVideoPlayer getCurPlay() {        if (detailPlayer.getFullWindowPlayer() != null) {            return  detailPlayer.getFullWindowPlayer();        }        return detailPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailPlayer.java", "stars": "2", "class": {"name": "DetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getUrl() {        //String url = \"android.resource://\" + getPackageName() + \"/\" + R.raw.test;        //\u6ce8\u610f\uff0c\u7528ijk\u6a21\u5f0f\u64ad\u653eraw\u89c6\u9891\uff0c\u8fd9\u4e2a\u5fc5\u987b\u6253\u5f00        //GSYVideoManager.instance().enableRawPlay(getApplicationContext());        ///exo raw \u652f\u6301        //String url =  RawResourceDataSource.buildRawResourceUri(R.raw.test).toString();        //\u65ad\u7f51\u81ea\u52a8\u91cd\u65b0\u94fe\u63a5\uff0curl\u524d\u63a5\u4e0aijkhttphook:        //String url = \"ijkhttphook:https://res.exexm.com/cw_145225549855002\";        //String url = \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";        //String url = \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";        //String url = \"http://7xjmzj.com1.z0.glb.clouddn.com/20171026175005_JObCxCE2.mp4\";        //String url = \"http://hjq-1257036536.cos.ap-shanghai.myqcloud.com/m3u8/m1/out2.m3u8\";        //String url = \"http://223.110.243.138/PLTV/2510088/224/3221227177/index.m3u8\";        //String url = \"http://qiniu.carmmi.com/image/132451525666042.mp4\";        //String url = \"http://ucp.wn.sunmath.cn/file-upload/gYQJHxK9iNQKJeWyS/V80418-103803.mp4?rc_uid=7sCFCGoaF2iTc9vH9&rc_token=prJK-xGutKmy2LDQO-OZASjob0o1u_s3e5SgMHmgjtn\";        //String url = \"http://7xse1z.com1.z0.glb.clouddn.com/1491813192\";        //String url = \"file://\"+ Environment.getExternalStorageDirectory().getPath() + \"Download/132451525666042.mp4\";        //String url =  \"http://ipsimg-huabei2.speiyou.cn/010/video/other/20180427/40288b156241ec6301624243bdf7021e/40288b156290270d0162a3e7eb2e0726/1524814477/movie.mp4\";        //String url =  \"http://ipsimg-huabei2.speiyou.cn/010/video/other/20180424/40288b156290270d0162a3db8cdd033e/40288b156290270d0162a3e8207f074f/e787a64c-f2d0-48fe-896d-246af05f111a.mp4\";        //String url =  \"http://video.7k.cn/app_video/20171202/6c8cf3ea/v.m3u8.mp4\";        //String url =  \"http://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/bipbop_4x3_variant.m3u8\";        String url =  \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";        //String url =  \"https://cdn61.ytbbs.tv/cn/tv/55550/55550-1/play.m3u8?md5=v4sI4lWlo4XojzeAjgBGaQ&expires=1521204012&token=55550\";        //String url =  \"http://1253492636.vod2.myqcloud.com/2e5fc148vodgzp1253492636/d08af82d4564972819086152830/plHZZoSkje0A.mp4\";        //String url = \"rtsp://ajj:12345678@218.21.217.122:65523/h264/ch40/sub/av_stream\";        //String url = \"rtsp://ajj:ajj12345678@218.21.217.122:65522/h264/ch15/sub/av_stream\";//String url =  \"rtsp://cloud.easydarwin.org:554/stream0.sdp\";        //String url = \"http://s.swao.cn/o_1c4gm8o1nniu1had13bk1t0l1rq64m.mov\";        //String url = \"http://api.ciguang.tv/avideo/play?num=02-041-0491&type=flv&v=1&client=android\";        //String url = \"http://video.7k.cn/app_video/20171213/276d8195/v.m3u8.mp4\";        //String url = \"http://103.233.191.21/riak/riak-bucket/6469ac502e813a4c1df7c99f364e70c1.mp4\";        //String url = \"http://7xjmzj.com1.z0.glb.clouddn.com/20171026175005_JObCxCE2.mp4\";        //String url = \"https://media6.smartstudy.com/ae/07/3997/2/dest.m3u8\";        //String url = \"http://cdn.tiaobatiaoba.com/Upload/square/2017-11-02/1509585140_1279.mp4\";        //String url = \"http://hcjs2ra2rytd8v8np1q.exp.bcevod.com/mda-hegtjx8n5e8jt9zv/mda-hegtjx8n5e8jt9zv.m3u8\";        //String url = \"http://7xse1z.com1.z0.glb.clouddn.com/1491813192\";        //String url = \"http://ocgk7i2aj.bkt.clouddn.com/17651ac2-693c-47e9-b2d2-b731571bad37\";        //String url = \"http://111.198.24.133:83/yyy_login_server/pic/YB059284/97778276040859/1.mp4\";        //String url = \"http://vr.tudou.com/v2proxy/v?sid=95001&id=496378919&st=3&pw=\";        //String url = \"http://pl-ali.youku.com/playlist/m3u8?type=mp4&ts=1490185963&keyframe=0&vid=XMjYxOTQ1Mzg2MA==&ep=ciadGkiFU8cF4SvajD8bYyuwJiYHXJZ3rHbN%2FrYDAcZuH%2BrC6DPcqJ21TPs%3D&sid=04901859548541247bba8&token=0524&ctype=12&ev=1&oip=976319194\";        //String url = \"http://hls.ciguang.tv/hdtv/video.m3u8\";        //String url = \"https://res.exexm.com/cw_145225549855002\";        //String url = \"http://storage.gzstv.net/uploads/media/huangmeiyan/jr05-09.mp4\";//mepg        //String url = \"https://zh-files.oss-cn-qingdao.aliyuncs.com/20170808223928mJ1P3n57.mp4\";//90\u5ea6        return url;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailPlayer.java", "stars": "2", "class": {"name": "DetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAttr1", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getAttr1() {        return attr1;    }", "url": "https://raw.githubusercontent.com/falvojr/stackoverflow-61560293/master/src/main/java/com/falvojr/domain/MyClass2.java", "stars": "1", "class": {"name": "MyClass2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAttr1", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAttr1(Long attr1) {        this.attr1 = attr1;    }", "url": "https://raw.githubusercontent.com/falvojr/stackoverflow-61560293/master/src/main/java/com/falvojr/domain/MyClass2.java", "stars": "1", "class": {"name": "MyClass2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkString", "params": ["String", "Predicate<String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean checkString(String s, Predicate<String> pre){        return  pre.test(s);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo06/Predicate/Demo01Predicate.java", "stars": "2", "class": {"name": "Demo01Predicate", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32        String s = \"abcdef\";        //\u8c03\u7528checkString\u65b9\u6cd5\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u6821\u9a8c,\u53c2\u6570\u4f20\u9012\u5b57\u7b26\u4e32\u548cLambda\u8868\u8fbe\u5f0f        /*boolean b = checkString(s,(String str)->{            //\u5bf9\u53c2\u6570\u4f20\u9012\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u5224\u65ad,\u5224\u65ad\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f\u5426\u5927\u4e8e5,\u5e76\u628a\u5224\u65ad\u7684\u7ed3\u679c\u8fd4\u56de            return str.length()>5;        });*/        //\u4f18\u5316Lambda\u8868\u8fbe\u5f0f        boolean b = checkString(s,str->str.length()>5);        System.out.println(b);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo06/Predicate/Demo01Predicate.java", "stars": "2", "class": {"name": "Demo01Predicate", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getStatus() {        return status;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/data/BleConnectStateParameter.java", "stars": "2", "class": {"name": "BleConnectStateParameter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatus(int status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/data/BleConnectStateParameter.java", "stars": "2", "class": {"name": "BleConnectStateParameter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isActive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isActive() {        return isActive;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/data/BleConnectStateParameter.java", "stars": "2", "class": {"name": "BleConnectStateParameter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setActive", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setActive(boolean active) {        isActive = active;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/data/BleConnectStateParameter.java", "stars": "2", "class": {"name": "BleConnectStateParameter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Activity", "StreamInfo"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "    public static Intent startActivity(Activity activity, StreamInfo info) {        Intent i = new Intent(activity, StreamLoadingActivity.class);        i.putExtra(EXTRA_INFO, info);        activity.startActivity(i);        return i;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/StreamLoadingActivity.java", "stars": "4", "class": {"name": "StreamLoadingActivity", "extends": "ButterBaseActivity", "implements": ["StreamLoadingFragment"], "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Activity", "StreamInfo", "Pair<View,String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "    public static Intent startActivity(Activity activity, StreamInfo info, Pair<View, String>... elements) {        Intent i = new Intent(activity, StreamLoadingActivity.class);        i.putExtra(EXTRA_INFO, info);        ActivityOptionsCompat options =                ActivityOptionsCompat.makeSceneTransitionAnimation(activity, elements);        ActivityCompat.startActivity(activity, i, options.toBundle());        return i;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/StreamLoadingActivity.java", "stars": "4", "class": {"name": "StreamLoadingActivity", "extends": "ButterBaseActivity", "implements": ["StreamLoadingFragment"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);        getWindow().setBackgroundDrawableResource(R.color.bg);        MobileButterApplication.getAppContext()                .getComponent()                .inject(this);        super.onCreate(savedInstanceState, R.layout.activity_streamloading);        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        if (!getIntent().hasExtra(EXTRA_INFO)) finish();        mInfo = getIntent().getParcelableExtra(EXTRA_INFO);        mFragment = (StreamLoadingFragment) getSupportFragmentManager().findFragmentById(R.id.fragment);        mFragment.setStreamLoadingActivityContext(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/StreamLoadingActivity.java", "stars": "4", "class": {"name": "StreamLoadingActivity", "extends": "ButterBaseActivity", "implements": ["StreamLoadingFragment"], "modifiers": ["public"]}}, {"method_name": "onTorrentServiceConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTorrentServiceConnected() {        super.onTorrentServiceConnected();        if (null != mFragment) {            mFragment.onTorrentServiceConnected();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/StreamLoadingActivity.java", "stars": "4", "class": {"name": "StreamLoadingActivity", "extends": "ButterBaseActivity", "implements": ["StreamLoadingFragment"], "modifiers": ["public"]}}, {"method_name": "onTorrentServiceDisconnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTorrentServiceDisconnected() {        super.onTorrentServiceDisconnected();        if (null != mFragment) {            mFragment.onTorrentServiceDisconnected();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/StreamLoadingActivity.java", "stars": "4", "class": {"name": "StreamLoadingActivity", "extends": "ButterBaseActivity", "implements": ["StreamLoadingFragment"], "modifiers": ["public"]}}, {"method_name": "getStreamInformation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StreamInfo", "snippet": "    public StreamInfo getStreamInformation() {        return mInfo;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/StreamLoadingActivity.java", "stars": "4", "class": {"name": "StreamLoadingActivity", "extends": "ButterBaseActivity", "implements": ["StreamLoadingFragment"], "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (mFragment != null) {            mFragment.cancelStream();        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/StreamLoadingActivity.java", "stars": "4", "class": {"name": "StreamLoadingActivity", "extends": "ButterBaseActivity", "implements": ["StreamLoadingFragment"], "modifiers": ["public"]}}, {"method_name": "dispose", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dispose() {        this.parserClass = null;        this.parser = null;        this.connection = null;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageEvent.java", "stars": "2", "class": {"name": "MessageEvent", "extends": null, "implements": ["IMessageEvent"], "modifiers": ["public"]}}, {"method_name": "getMessageCallback", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Method", "snippet": "    public Method getMessageCallback() {        return this.messageCallback;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageEvent.java", "stars": "2", "class": {"name": "MessageEvent", "extends": null, "implements": ["IMessageEvent"], "modifiers": ["public"]}}, {"method_name": "getMessageListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IMessageListener", "snippet": "    public IMessageListener getMessageListener() {        return this.messageListener;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageEvent.java", "stars": "2", "class": {"name": "MessageEvent", "extends": null, "implements": ["IMessageEvent"], "modifiers": ["public"]}}, {"method_name": "setMessageListener", "params": ["IMessageListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMessageListener(IMessageListener listener) {        this.messageListener = listener;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageEvent.java", "stars": "2", "class": {"name": "MessageEvent", "extends": null, "implements": ["IMessageEvent"], "modifiers": ["public"]}}, {"method_name": "getParserClass", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Class<IMessageParser>", "snippet": "    public Class<? extends IMessageParser> getParserClass() {        return this.parserClass;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageEvent.java", "stars": "2", "class": {"name": "MessageEvent", "extends": null, "implements": ["IMessageEvent"], "modifiers": ["public"]}}, {"method_name": "getParser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IMessageParser", "snippet": "    public IMessageParser getParser() {        return this.parser;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageEvent.java", "stars": "2", "class": {"name": "MessageEvent", "extends": null, "implements": ["IMessageEvent"], "modifiers": ["public"]}}, {"method_name": "setParser", "params": ["IMessageParser"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setParser(IMessageParser parser) {        this.parser = parser;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageEvent.java", "stars": "2", "class": {"name": "MessageEvent", "extends": null, "implements": ["IMessageEvent"], "modifiers": ["public"]}}, {"method_name": "getConnection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IConnection", "snippet": "    public IConnection getConnection() {        return this.connection;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageEvent.java", "stars": "2", "class": {"name": "MessageEvent", "extends": null, "implements": ["IMessageEvent"], "modifiers": ["public"]}}, {"method_name": "setConnection", "params": ["IConnection"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setConnection(IConnection connection) {        this.connection = connection;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageEvent.java", "stars": "2", "class": {"name": "MessageEvent", "extends": null, "implements": ["IMessageEvent"], "modifiers": ["public"]}}, {"method_name": "paint", "params": ["Graphics"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void paint(Graphics g) {        g.setColor(Color.BLUE);        g.fillRect(0, 0, Utils.ENEMEY2_SIZE, Utils.ENEMEY2_SIZE);    }", "url": "https://raw.githubusercontent.com/radudioane99/Shape-Storm/master/Enemy2.java", "stars": "2", "class": {"name": "Enemy2", "extends": "JComponent", "implements": null, "modifiers": ["public"]}}, {"method_name": "isRefreshing", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isRefreshing ()\t{\t\treturn n_isRefreshing ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/RefreshViewRenderer.java", "stars": "2", "class": {"name": "RefreshViewRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_isRefreshing", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_isRefreshing ();\tpublic void setRefreshing (boolean p0)\t{\t\tn_setRefreshing (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/RefreshViewRenderer.java", "stars": "2", "class": {"name": "RefreshViewRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "setRefreshing", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setRefreshing (boolean p0)\t{\t\tn_setRefreshing (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/RefreshViewRenderer.java", "stars": "2", "class": {"name": "RefreshViewRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_setRefreshing", "params": ["boolean"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_setRefreshing (boolean p0);\tpublic boolean canChildScrollUp ()\t{\t\treturn n_canChildScrollUp ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/RefreshViewRenderer.java", "stars": "2", "class": {"name": "RefreshViewRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "canChildScrollUp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean canChildScrollUp ()\t{\t\treturn n_canChildScrollUp ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/RefreshViewRenderer.java", "stars": "2", "class": {"name": "RefreshViewRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_canChildScrollUp", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_canChildScrollUp ();\tpublic void onRefresh ()\t{\t\tn_onRefresh ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/RefreshViewRenderer.java", "stars": "2", "class": {"name": "RefreshViewRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onRefresh", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onRefresh ()\t{\t\tn_onRefresh ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/RefreshViewRenderer.java", "stars": "2", "class": {"name": "RefreshViewRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onRefresh", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onRefresh ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/RefreshViewRenderer.java", "stars": "2", "class": {"name": "RefreshViewRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/RefreshViewRenderer.java", "stars": "2", "class": {"name": "RefreshViewRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/RefreshViewRenderer.java", "stars": "2", "class": {"name": "RefreshViewRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new BlockCustomFlower());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.DECORATIONS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/LavenderBlock.java", "stars": "2", "class": {"name": "LavenderBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/LavenderBlock.java", "stars": "2", "class": {"name": "LavenderBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["FMLCommonSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init(FMLCommonSetupEvent event) {\t\tFlowersFeature feature = new DefaultFlowersFeature(BlockClusterFeatureConfig::func_227300_a_) {\t\t\t@Override\t\t\tpublic BlockState getFlowerToPlace(Random random, BlockPos bp, BlockClusterFeatureConfig fc) {\t\t\t\treturn block.getDefaultState();\t\t\t}\t\t\t@Override\t\t\tpublic boolean place(IWorld world, ChunkGenerator generator, Random random, BlockPos pos, BlockClusterFeatureConfig config) {\t\t\t\tDimensionType dimensionType = world.getDimension().getType();\t\t\t\tboolean dimensionCriteria = false;\t\t\t\tif (dimensionType == DimensionType.OVERWORLD)\t\t\t\t\tdimensionCriteria = true;\t\t\t\tif (!dimensionCriteria)\t\t\t\t\treturn false;\t\t\t\treturn super.place(world, generator, random, pos, config);\t\t\t}\t\t};\t\tfor (Biome biome : ForgeRegistries.BIOMES.getValues()) {\t\t\tboolean biomeCriteria = false;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"savanna\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"savanna_plateau\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"shattered_savanna\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"shattered_savanna_plateau\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (!biomeCriteria)\t\t\t\tcontinue;\t\t\tbiome.addFeature(GenerationStage.Decoration.VEGETAL_DECORATION,\t\t\t\t\tfeature.withConfiguration(\t\t\t\t\t\t\t(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(block.getDefaultState()), new SimpleBlockPlacer()))\t\t\t\t\t\t\t\t\t.tries(64).build())\t\t\t\t\t\t\t.withPlacement(Placement.COUNT_HEIGHTMAP_32.configure(new FrequencyConfig(1))));\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/LavenderBlock.java", "stars": "2", "class": {"name": "LavenderBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(LavenderBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/LavenderBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(LavenderBlock.block, (int) (1)));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/LavenderBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPlantType", "params": ["IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "PlantType", "snippet": "\t\tpublic PlantType getPlantType(IBlockReader world, BlockPos pos) {\t\t\treturn PlantType.Plains;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/LavenderBlock.java", "stars": "2", "class": {"name": "BlockCustomFlower", "extends": "FlowerBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        Stripe.apiKey = this.privateKey;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/StripeService.java", "stars": "2", "class": {"name": "StripeService", "extends": null, "implements": ["PaymentProviderService"], "modifiers": ["public"]}}, {"method_name": "createCheckoutSession", "params": ["CreatorLeasingDTO"], "throws": null, "modifiers": ["public"], "return_type": "AbstractCheckoutDTO", "snippet": "    public AbstractCheckoutDTO createCheckoutSession(final CreatorLeasingDTO creatorLeasingDTO) {        if (creatorLeasingDTO == null) {            throw new IllegalArgumentException(\"payment dto null\");        }        try {            Session session = this.stripeClient.createCheckoutSession(                createCheckoutSessionRequestParamsFromCreatorLeasingDTO(creatorLeasingDTO));            AbstractCheckoutDTO abstractCheckoutDTO = new AbstractCheckoutDTO();            abstractCheckoutDTO.setId(session.getId());            return abstractCheckoutDTO;        } catch (StripeException e) {            e.printStackTrace();            throw new StripeServiceException(e.getMessage(), e.getCause());        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/StripeService.java", "stars": "2", "class": {"name": "StripeService", "extends": null, "implements": ["PaymentProviderService"], "modifiers": ["public"]}}, {"method_name": "cancelPayment", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cancelPayment(final String checkoutSessionId) {        try {            this.stripeClient.cancelPaymentIntent(checkoutSessionId);        } catch (StripeException e) {            throw new StripeServiceException(e.getMessage(), e.getCause());        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/StripeService.java", "stars": "2", "class": {"name": "StripeService", "extends": null, "implements": ["PaymentProviderService"], "modifiers": ["public"]}}, {"method_name": "finalizePayment", "params": ["FinalizePaymentAtPaymentProviderDTO"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void finalizePayment(@NotNull final FinalizePaymentAtPaymentProviderDTO finalizePaymentAtPaymentProviderDTO) {        try {            this.stripeClient.capturePaymentIntent(finalizePaymentAtPaymentProviderDTO.getLeasing().getPaymentSessionId());//            this.payout(finalizePaymentAtPaymentProviderDTO.getAccountId(), finalizePaymentAtPaymentProviderDTO.getLeasing().getPriceSumInCents());        } catch (StripeException e) {            throw new StripeServiceException(e.getMessage(), e.getCause());        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/StripeService.java", "stars": "2", "class": {"name": "StripeService", "extends": null, "implements": ["PaymentProviderService"], "modifiers": ["public"]}}, {"method_name": "createAccount", "params": ["CreatePaymentProviderAccountDTO"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String createAccount(final CreatePaymentProviderAccountDTO createPaymentProviderAccountDTO) {        Map<String, Object> params = new HashMap<>();        Map<String, Object> externalAccountInfo = new HashMap<>();        externalAccountInfo.put(\"object\", \"bank_account\");        externalAccountInfo.put(\"country\", \"AT\");        externalAccountInfo.put(\"currency\", \"eur\");        externalAccountInfo.put(\"account_number\", createPaymentProviderAccountDTO.getBankAccountIBAN());        params.put(\"country\", \"AT\");        params.put(\"type\", \"custom\");        params.put(\"requested_capabilities\", Arrays.asList(\"card_payments\", \"transfers\"));        params.put(\"external_account\", externalAccountInfo);        params.put(\"business_type\", \"individual\");        Map<String, Object> individualInfo = new HashMap<>(); // needed by stripe, since businesstype is individual https://stripe.com/docs/connect/custom-accounts        individualInfo.put(\"email\", createPaymentProviderAccountDTO.getEmail());        params.put(\"individual\", individualInfo);        try {            log.debug(\"creating account with info: {}\", params);            return this.stripeClient.createAccount(params).getId();        } catch (StripeException e) {            throw new StripeServiceException(e.getMessage(), e.getCause());        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/StripeService.java", "stars": "2", "class": {"name": "StripeService", "extends": null, "implements": ["PaymentProviderService"], "modifiers": ["public"]}}, {"method_name": "getAccountLinkUrl", "params": ["GetStripeAccountLinkUrlDTO"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAccountLinkUrl(@NotNull final GetStripeAccountLinkUrlDTO getStripeAccountLinkUrlDTO) {        Map<String, Object> params = new HashMap<>();        params.put(\"account\", getStripeAccountLinkUrlDTO.getStripeAccountId());        params.put(\"failure_url\", accountFailureUrl);        params.put(\"success_url\", accountSuccessUrl + \"?stripeVerificationKey=\" + getStripeAccountLinkUrlDTO.getStripeVerificationKey());        params.put(\"type\", \"custom_account_verification\");        params.put(\"collect\", \"eventually_due\");        try {            return this.stripeClient.getAccountLink(params);        } catch (StripeException e) {            throw new StripeServiceException(e.getMessage(), e.getCause());        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/StripeService.java", "stars": "2", "class": {"name": "StripeService", "extends": null, "implements": ["PaymentProviderService"], "modifiers": ["public"]}}, {"method_name": "payout", "params": ["String", "Integer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void payout(final String accountId, final Integer amount) {        log.debug(\"Payout for \" + accountId + \" with amount \" + amount + \" triggered\");        RequestOptions requestOptions = RequestOptions.builder().setStripeAccount(accountId).build();        Map<String, Object> params = new HashMap<>();        params.put(\"amount\", amount);        params.put(\"currency\", \"eur\");        try {            this.stripeClient.doPayout(params, requestOptions);            log.debug(\"Payout was successful\");        } catch (StripeException e) {            throw new StripeServiceException(e.getMessage(), e.getCause());        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/StripeService.java", "stars": "2", "class": {"name": "StripeService", "extends": null, "implements": ["PaymentProviderService"], "modifiers": ["public"]}}, {"method_name": "createCheckoutSessionRequestParamsFromCreatorLeasingDTO", "params": ["CreatorLeasingDTO"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,Object>", "snippet": "    private Map<String, Object> createCheckoutSessionRequestParamsFromCreatorLeasingDTO(final CreatorLeasingDTO creatorLeasingDTO) {        Map<String, Object> paymentIntentData = new HashMap<>();        paymentIntentData.put(\"capture_method\", \"manual\");        Map<String, String> paymentIntentMetaData = new HashMap<>();        paymentIntentMetaData.put(\"leasing_from\", creatorLeasingDTO.getFrom().toString());        paymentIntentMetaData.put(\"leasing_to\", creatorLeasingDTO.getTo().toString());        paymentIntentMetaData.put(\"leasing_gardenfield_id\", creatorLeasingDTO.getGardenFieldId().toString());        paymentIntentMetaData.put(\"leasing_requester_id\", securityHelperService.getLoggedInUser().getId().toString());        paymentIntentData.put(\"metadata\", paymentIntentMetaData);        List<Object> paymentMethodTypes = new ArrayList<>();        paymentMethodTypes.add(\"card\");        List<Object> lineItems = new ArrayList<>();        Map<String, Object> lineItem1 = new HashMap<>();        lineItem1.put(\"name\", creatorLeasingDTO.getGardenFieldName());        lineItem1.put(\"amount\", creatorLeasingMapper.toEntity(creatorLeasingDTO).getPriceSumInCents());        lineItem1.put(\"currency\", \"eur\");        lineItem1.put(\"quantity\", 1);        lineItems.add(lineItem1);        Map<String, Object> params = new HashMap<>();        params.put(\"success_url\", paymentSuccessUrl);        params.put(\"cancel_url\", paymentCancelUrl);        params.put(\"payment_method_types\", paymentMethodTypes);        params.put(\"line_items\", lineItems);        params.put(\"payment_intent_data\", paymentIntentData);        return params;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/StripeService.java", "stars": "2", "class": {"name": "StripeService", "extends": null, "implements": ["PaymentProviderService"], "modifiers": ["public"]}}, {"method_name": "checkWebhookSignature", "params": ["CheckStripeWebhookSignatureDTO"], "throws": null, "modifiers": ["public"], "return_type": "Optional<Event>", "snippet": "    public Optional<Event> checkWebhookSignature(@NotNull final CheckStripeWebhookSignatureDTO checkStripeWebhookSignatureDTO) {        try {            return Optional.of(this.stripeClient.checkWebhookSignature(                checkStripeWebhookSignatureDTO.getPayload(), checkStripeWebhookSignatureDTO.getStripeSignatureHeader(),                checkStripeWebhookSignatureDTO.getEndpointSecret()));        } catch (SignatureVerificationException e) {            throw new StripeServiceException(e.getMessage(), e.getCause());        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/StripeService.java", "stars": "2", "class": {"name": "StripeService", "extends": null, "implements": ["PaymentProviderService"], "modifiers": ["public"]}}, {"method_name": "getPaymentIntentForId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Optional<PaymentIntent>", "snippet": "    public Optional<PaymentIntent> getPaymentIntentForId(@Nullable final String paymentIntentId) {        try {            return Optional.of(this.stripeClient.retreivePaymentIntentForId(paymentIntentId));        } catch (StripeException e) {            throw new StripeServiceException(e.getMessage(), e.getCause());        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/StripeService.java", "stars": "2", "class": {"name": "StripeService", "extends": null, "implements": ["PaymentProviderService"], "modifiers": ["public"]}}, {"method_name": "flowFromObject", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "Flow", "snippet": "  public static Flow flowFromObject(final Object object) {    final Map<String, Object> flowObject = (Map<String, Object>) object;    final String id = (String) flowObject.get(\"id\");    final Boolean layedout = (Boolean) flowObject.get(\"layedout\");    final Boolean isEmbeddedFlow = (Boolean) flowObject.get(\"embeddedFlow\");    final Double azkabanFlowVersion = (Double) flowObject.get(\"azkabanFlowVersion\");    final String condition = (String) flowObject.get(\"condition\");    final Flow flow = new Flow(id);    if (layedout != null) {      flow.setLayedOut(layedout);    }    if (isEmbeddedFlow != null) {      flow.setEmbeddedFlow(isEmbeddedFlow);    }    if (azkabanFlowVersion != null) {      flow.setAzkabanFlowVersion(azkabanFlowVersion);    }    if (condition != null) {      flow.setCondition(condition);    }    final int projId = (Integer) flowObject.get(\"project.id\");    flow.setProjectId(projId);    final int version = (Integer) flowObject.get(\"version\");    flow.setVersion(version);    // Loading projects    final List<Object> propertiesList = (List<Object>) flowObject.get(\"props\");    final Map<String, FlowProps> properties =        loadPropertiesFromObject(propertiesList);    flow.addAllFlowProperties(properties.values());    // Loading nodes    final List<Object> nodeList = (List<Object>) flowObject.get(\"nodes\");    final Map<String, Node> nodes = loadNodesFromObjects(nodeList);    flow.addAllNodes(nodes.values());    // Loading edges    final List<Object> edgeList = (List<Object>) flowObject.get(\"edges\");    final List<Edge> edges = loadEdgeFromObjects(edgeList, nodes);    flow.addAllEdges(edges);    final Map<String, Object> metadata =        (Map<String, Object>) flowObject.get(\"metadata\");    if (metadata != null) {      flow.setMetadata(metadata);    }    flow.failureEmail = (List<String>) flowObject.get(\"failure.email\");    flow.successEmail = (List<String>) flowObject.get(\"success.email\");    if (flowObject.containsKey(\"mailCreator\")) {      flow.mailCreator = flowObject.get(\"mailCreator\").toString();    }    return flow;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadNodesFromObjects", "params": ["List<Object>"], "throws": null, "modifiers": ["private", "static"], "return_type": "Map<String,Node>", "snippet": "  private static Map<String, Node> loadNodesFromObjects(final List<Object> nodeList) {    final Map<String, Node> nodeMap = new HashMap<>();    for (final Object obj : nodeList) {      final Node node = Node.fromObject(obj);      nodeMap.put(node.getId(), node);    }    return nodeMap;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadEdgeFromObjects", "params": ["List<Object>", "Map<String,Node>"], "throws": null, "modifiers": ["private", "static"], "return_type": "List<Edge>", "snippet": "  private static List<Edge> loadEdgeFromObjects(final List<Object> edgeList,      final Map<String, Node> nodes) {    final List<Edge> edgeResult = new ArrayList<>();    for (final Object obj : edgeList) {      final Edge edge = Edge.fromObject(obj);      edgeResult.add(edge);    }    return edgeResult;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadPropertiesFromObject", "params": ["List<Object>"], "throws": null, "modifiers": ["private", "static"], "return_type": "Map<String,FlowProps>", "snippet": "  private static Map<String, FlowProps> loadPropertiesFromObject(      final List<Object> propertyObjectList) {    final Map<String, FlowProps> properties = new HashMap<>();    for (final Object propObj : propertyObjectList) {      final FlowProps prop = FlowProps.fromObject(propObj);      properties.put(prop.getSource(), prop);    }    return properties;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getVersion() {    return this.version;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVersion", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setVersion(final int version) {    this.version = version;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void initialize() {    if (this.startNodes == null) {      this.startNodes = new ArrayList<>();      this.endNodes = new ArrayList<>();      for (final Node node : this.nodes.values()) {        // If it doesn't have any incoming edges, its a start node        if (!this.inEdges.containsKey(node.getId())) {          this.startNodes.add(node);        }        // If it doesn't contain any outgoing edges, its an end node.        if (!this.outEdges.containsKey(node.getId())) {          this.endNodes.add(node);        }      }      setLevelsAndEdgeNodes(new HashSet<>(this.startNodes), 0);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLevelsAndEdgeNodes", "params": ["Set<Node>", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setLevelsAndEdgeNodes(final Set<Node> levelNodes, final int level) {    final Set<Node> nextLevelNodes = new HashSet<>();    for (final Node node : levelNodes) {      node.setLevel(level);      //\u4e00\u4e2a\u4f5c\u4e1a\u6d41\uff0c\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5176\u4ed6\u5c31\u662foutEdges\u8282\u70b9      final Set<Edge> edges = this.outEdges.get(node.getId());      if (edges != null) {        edges.forEach(edge -> {          edge.setSource(node);          edge.setTarget(this.nodes.get(edge.getTargetId()));          nextLevelNodes.add(edge.getTarget());        });      }    }    this.numLevels = level;    if (!nextLevelNodes.isEmpty()) {      setLevelsAndEdgeNodes(nextLevelNodes, level + 1);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Node", "snippet": "  public Node getNode(final String nodeId) {    return this.nodes.get(nodeId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSuccessEmails", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getSuccessEmails() {    return this.successEmail;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMailCreator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getMailCreator() {    return this.mailCreator;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMailCreator", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMailCreator(final String mailCreator) {    this.mailCreator = mailCreator;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFailureEmails", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getFailureEmails() {    return this.failureEmail;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addSuccessEmails", "params": ["Collection<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addSuccessEmails(final Collection<String> emails) {    this.successEmail.addAll(emails);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addFailureEmails", "params": ["Collection<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addFailureEmails(final Collection<String> emails) {    this.failureEmail.addAll(emails);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNumLevels", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getNumLevels() {    return this.numLevels;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartNodes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Node>", "snippet": "  public List<Node> getStartNodes() {    return this.startNodes;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEndNodes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Node>", "snippet": "  public List<Node> getEndNodes() {    return this.endNodes;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInEdges", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Set<Edge>", "snippet": "  public Set<Edge> getInEdges(final String id) {    return this.inEdges.get(id);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOutEdges", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Set<Edge>", "snippet": "  public Set<Edge> getOutEdges(final String id) {    return this.outEdges.get(id);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addAllNodes", "params": ["Collection<Node>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addAllNodes(final Collection<Node> nodes) {    for (final Node node : nodes) {      addNode(node);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addNode", "params": ["Node"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addNode(final Node node) {    this.nodes.put(node.getId(), node);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addAllFlowProperties", "params": ["Collection<FlowProps>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addAllFlowProperties(final Collection<FlowProps> props) {    for (final FlowProps prop : props) {      this.flowProps.put(prop.getSource(), prop);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return this.id;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addError", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addError(final String error) {    if (this.errors == null) {      this.errors = new ArrayList<>();    }    this.errors.add(error);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getErrors", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getErrors() {    return this.errors;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasErrors", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasErrors() {    return this.errors != null && !this.errors.isEmpty();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNodes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<Node>", "snippet": "  public Collection<Node> getNodes() {    return this.nodes.values();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEdges", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<Edge>", "snippet": "  public Collection<Edge> getEdges() {    return this.edges.values();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addAllEdges", "params": ["Collection<Edge>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addAllEdges(final Collection<Edge> edges) {    for (final Edge edge : edges) {      addEdge(edge);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addEdge", "params": ["Edge"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addEdge(final Edge edge) {    final String source = edge.getSourceId();    final String target = edge.getTargetId();    if (edge.hasError()) {      addError(\"Error on \" + edge.getId() + \". \" + edge.getError());    }    final Set<Edge> sourceSet = getEdgeSet(this.outEdges, source);    sourceSet.add(edge);    final Set<Edge> targetSet = getEdgeSet(this.inEdges, target);    targetSet.add(edge);    this.edges.put(edge.getId(), edge);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEdgeSet", "params": ["HashMap<String,Set>", "String"], "throws": null, "modifiers": ["private"], "return_type": "Set<Edge>", "snippet": "  private Set<Edge> getEdgeSet(final HashMap<String, Set<Edge>> map, final String id) {    Set<Edge> edges = map.get(id);    if (edges == null) {      edges = new HashSet<>();      map.put(id, edges);    }    return edges;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> toObject() {    final HashMap<String, Object> flowObj = new HashMap<>();    flowObj.put(\"type\", \"flow\");    flowObj.put(\"id\", getId());    flowObj.put(\"project.id\", this.projectId);    flowObj.put(\"version\", this.version);    flowObj.put(\"props\", objectizeProperties());    flowObj.put(\"nodes\", objectizeNodes());    flowObj.put(\"edges\", objectizeEdges());    flowObj.put(\"failure.email\", this.failureEmail);    flowObj.put(\"success.email\", this.successEmail);    flowObj.put(\"mailCreator\", this.mailCreator);    flowObj.put(\"layedout\", this.isLayedOut);    flowObj.put(\"embeddedFlow\", this.isEmbeddedFlow);    flowObj.put(\"azkabanFlowVersion\", this.azkabanFlowVersion);    flowObj.put(\"condition\", this.condition);    if (this.errors != null) {      flowObj.put(\"errors\", this.errors);    }    if (this.metadata != null) {      flowObj.put(\"metadata\", this.metadata);    }    return flowObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "objectizeProperties", "params": [], "throws": null, "modifiers": ["private"], "return_type": "List<Object>", "snippet": "  private List<Object> objectizeProperties() {    final ArrayList<Object> result = new ArrayList<>();    for (final FlowProps props : this.flowProps.values()) {      final Object objProps = props.toObject();      result.add(objProps);    }    return result;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "objectizeNodes", "params": [], "throws": null, "modifiers": ["private"], "return_type": "List<Object>", "snippet": "  private List<Object> objectizeNodes() {    final ArrayList<Object> result = new ArrayList<>();    for (final Node node : getNodes()) {      final Object nodeObj = node.toObject();      result.add(nodeObj);    }    return result;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "objectizeEdges", "params": [], "throws": null, "modifiers": ["private"], "return_type": "List<Object>", "snippet": "  private List<Object> objectizeEdges() {    final ArrayList<Object> result = new ArrayList<>();    for (final Edge edge : getEdges()) {      final Object edgeObj = edge.toObject();      result.add(edgeObj);    }    return result;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isLayedOut", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isLayedOut() {    return this.isLayedOut;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLayedOut", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLayedOut(final boolean layedOut) {    this.isLayedOut = layedOut;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEmbeddedFlow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isEmbeddedFlow() {    return this.isEmbeddedFlow;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEmbeddedFlow", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setEmbeddedFlow(final boolean embeddedFlow) {    this.isEmbeddedFlow = embeddedFlow;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAzkabanFlowVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "  public double getAzkabanFlowVersion() {    return this.azkabanFlowVersion;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAzkabanFlowVersion", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAzkabanFlowVersion(final double azkabanFlowVersion) {    this.azkabanFlowVersion = azkabanFlowVersion;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCondition() {    return this.condition;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCondition", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCondition(final String condition) {    this.condition = condition;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMetadata", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> getMetadata() {    if (this.metadata == null) {      this.metadata = new HashMap<>();    }    return this.metadata;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMetadata", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMetadata(final Map<String, Object> metadata) {    this.metadata = metadata;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNodeMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Node>", "snippet": "  public Map<String, Node> getNodeMap() {    return this.nodes;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOutEdgeMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Set>", "snippet": "  public Map<String, Set<Edge>> getOutEdgeMap() {    return this.outEdges;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInEdgeMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Set>", "snippet": "  public Map<String, Set<Edge>> getInEdgeMap() {    return this.inEdges;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowProps", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "FlowProps", "snippet": "  public FlowProps getFlowProps(final String propSource) {    return this.flowProps.get(propSource);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllFlowProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,FlowProps>", "snippet": "  public Map<String, FlowProps> getAllFlowProps() {    return this.flowProps;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getProjectId() {    return this.projectId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProjectId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setProjectId(final int projectId) {    this.projectId = projectId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/flow/Flow.java", "stars": "18", "class": {"name": "Flow", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleResult", "params": ["ResultContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void handleResult(ResultContext context) {    User user = (User) context.getResultObject();    users.add(user);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/result_handler/UserResultHandler.java", "stars": "15", "class": {"name": "UserResultHandler", "extends": null, "implements": ["ResultHandler"], "modifiers": ["public"]}}, {"method_name": "getUsers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<User>", "snippet": "  public List<User> getUsers() {    return users;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/result_handler/UserResultHandler.java", "stars": "15", "class": {"name": "UserResultHandler", "extends": null, "implements": ["ResultHandler"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\t\t\tsetContentView(R.layout.esign_main);\t\t\t\t\t\t\t\tButton donebutton = (Button) findViewById(R.id.DoneButton);\t\tdonebutton.setText(\"Done\");\t\tButton clearButton = (Button) findViewById(R.id.ClearButton);\t\tclearButton.setText(\"Clear\");\t\t\t\tpath=Environment.getExternalStorageDirectory()+\"/signature.png\";\t\tfile = new File(path);\t\tfile.delete();\t\tgestureView = (GestureOverlayView) findViewById(R.id.signaturePad);\t\tgestureView.setDrawingCacheEnabled(true);\t\tgestureView.setAlwaysDrawnWithCacheEnabled(true);\t\tgestureView.setHapticFeedbackEnabled(false);\t\tgestureView.cancelLongPress();\t\tgestureView.cancelClearAnimation();\t\tgestureView.addOnGestureListener(new OnGestureListener() {\t\t\t@Override\t\t\tpublic void onGesture(GestureOverlayView arg0, MotionEvent arg1) {\t\t\t\t// TODO Auto-generated method stub\t\t\t\t\t\t\t}\t\t\t@Override\t\t\tpublic void onGestureCancelled(GestureOverlayView arg0,\t\t\t\t\tMotionEvent arg1) {\t\t\t\t// TODO Auto-generated method stub\t\t\t\t\t\t\t}\t\t\t@Override\t\t\tpublic void onGestureEnded(GestureOverlayView arg0, MotionEvent arg1) {\t\t\t\t// TODO Auto-generated method stub\t\t\t\t\t\t\t}\t\t\t@Override\t\t\tpublic void onGestureStarted(GestureOverlayView arg0,\t\t\t\t\tMotionEvent arg1) {\t\t\t\t// TODO Auto-generated method stub\t\t\t\tif (arg1.getAction()==MotionEvent.ACTION_MOVE){                 \tgestureTouch=false; \t\t\t\t\t             }             else              {             \t\tgestureTouch=true;\t\t\t}\t\t\t}});\t\t\t\tdonebutton.setOnClickListener(new OnClickListener() {\t\t\t@Override\t\t\tpublic void onClick(View v) {\t\t\t\t// TODO Auto-generated method stub\t\t\t\ttry {\t\t\t\t\tbitmap = Bitmap.createBitmap(gestureView.getDrawingCache());\t\t\t\t\tfile.createNewFile();\t\t\t\t\tFileOutputStream fos = new FileOutputStream(file);\t\t\t\t\tfos = new FileOutputStream(file);\t\t\t\t\t// compress to specified format (PNG), quality - which is\t\t\t\t\t// ignored for PNG, and out stream\t\t\t\t\tbitmap.compress(Bitmap.CompressFormat.PNG, 100, fos);\t\t\t\t\tfos.close();\t\t\t\t} catch (Exception e) {\t\t\t\t\te.printStackTrace();\t\t\t\t}\t\t\tif(gestureTouch==false)\t\t\t{\t\t\t\tsetResult(0);\t\t\t\tfinish();\t\t\t}\t\t\telse\t\t\t{\t\t\t\tsetResult(1);\t\t\t\tfinish();\t\t\t}\t\t\t}\t\t});\t\t\t\tclearButton.setOnClickListener(new OnClickListener() {\t\t\t\t\t\t@Override\t\t\tpublic void onClick(View arg0) {\t\t\t\t// TODO Auto-generated method stub\t\t\t\tgestureView.invalidate();\t\t\t\tgestureView.clear(true);\t\t\t\tgestureView.clearAnimation();\t\t\t\tgestureView.cancelClearAnimation();\t\t\t}\t\t});\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/signature/src/com/example/signature/Esignature.java", "stars": "74", "class": {"name": "Esignature", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initialize(Object ... params) {\t\tthis.size = (Integer)params[0];\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedVsFloatingPoint.java", "stars": "2", "class": {"name": "CPUFixedVsFloatingPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "warmUp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void warmUp() {\t\t\t\tfor (int i = 0; i < size; ++i) {\t\t\tresult = i/256; // fixed\t\t\tresult = (int) (i/256.0); // floating\t\t}\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedVsFloatingPoint.java", "stars": "2", "class": {"name": "CPUFixedVsFloatingPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run() {\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedVsFloatingPoint.java", "stars": "2", "class": {"name": "CPUFixedVsFloatingPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "run", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run(Object ...options) {\t\tresult = 0;\t\t\t\tswitch ((NumberRepresentation) options[0]) {\t\tcase FLOATING:\t\t\tfor (int i = 0; i < size; ++i)\t\t\t\tresult += i/256.0;/**/\t\t\tbreak;\t\tcase FIXED:\t\t\tfor (int i = 0; i < size; ++i)\t\t\t\t\t\t\t\tresult += i/256;/**/\t\t\tbreak;\t\tdefault:\t\t\tbreak;\t\t}\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedVsFloatingPoint.java", "stars": "2", "class": {"name": "CPUFixedVsFloatingPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "cancel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void cancel() {\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedVsFloatingPoint.java", "stars": "2", "class": {"name": "CPUFixedVsFloatingPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "clean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clean() {\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedVsFloatingPoint.java", "stars": "2", "class": {"name": "CPUFixedVsFloatingPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getResult() {\t\treturn String.valueOf(result);\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedVsFloatingPoint.java", "stars": "2", "class": {"name": "CPUFixedVsFloatingPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/xamarin/essentials/fileProvider.java", "stars": "2", "class": {"name": "fileProvider", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/xamarin/essentials/fileProvider.java", "stars": "2", "class": {"name": "fileProvider", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "createMessage", "params": ["MessageDTO"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<MessageDTO>", "snippet": "    public ResponseEntity<MessageDTO> createMessage(@RequestBody @Valid MessageDTO messageDTO) {        log.debug(\"REST request to save Message : {}\", messageDTO);        MessageDTO result = messageService.save(messageDTO);        return ResponseEntity.status(HttpStatus.CREATED).body(result);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/MessageController.java", "stars": "2", "class": {"name": "MessageController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessagesByThread", "params": ["UUID", "Pageable", "UriComponentsBuilder"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Page>", "snippet": "    public ResponseEntity<Page<MessageDTO>> getMessagesByThread(@PathVariable(\"id\") UUID threadId, Pageable pageable, UriComponentsBuilder uriBuilder) {        log.debug(\"REST request to get Message with thread id : {}\", threadId);        Page<MessageDTO> page = messageService.findByThread(threadId, pageable);        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(uriBuilder, page);        return ResponseEntity.ok().headers(headers).body(page);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/MessageController.java", "stars": "2", "class": {"name": "MessageController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLatestMessageInThreads", "params": ["Pageable", "UriComponentsBuilder"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Page>", "snippet": "    public ResponseEntity<Page<MessageDTO>> getLatestMessageInThreads(Pageable pageable, UriComponentsBuilder uriBuilder) {        log.debug(\"REST request to get all new Messages\");        Page<MessageDTO> page = messageService.getLatestThreadMessagesForLoggedInUser(pageable);        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(uriBuilder, page);        return ResponseEntity.ok().headers(headers).body(page);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/MessageController.java", "stars": "2", "class": {"name": "MessageController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateThreadToOpenedForUser", "params": ["UUID"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Void>", "snippet": "    public ResponseEntity<Void> updateThreadToOpenedForUser(@PathVariable(\"id\") UUID threadId) {        log.debug(\"REST request to open Messages in a thread\");        messageService.updateThreadToOpenedForUser(threadId);        return ResponseEntity.ok().build();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/MessageController.java", "stars": "2", "class": {"name": "MessageController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateSystemMessagesToOpenedForLoggedInUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Void>", "snippet": "    public ResponseEntity<Void> updateSystemMessagesToOpenedForLoggedInUser() {        log.debug(\"REST request to open system messages for logged in user\");        messageService.updateAllSystemNotificationsToOpenedForLoggedInUser();        return ResponseEntity.ok().build();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/MessageController.java", "stars": "2", "class": {"name": "MessageController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUnreadNotificationsForLoggedInUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<List>", "snippet": "    public ResponseEntity<List<MessageDTO>> getUnreadNotificationsForLoggedInUser() {        log.debug(\"REST request for unread notifications\");        List<MessageDTO> result = messageService.getUnreadNotificationsForLoggedInUser();        return ResponseEntity.ok(result);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/MessageController.java", "stars": "2", "class": {"name": "MessageController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //JDK1.7\u7248\u672c\u4e4b\u524d,\u521b\u5efa\u96c6\u5408\u5bf9\u8c61\u5fc5\u987b\u628a\u524d\u540e\u7684\u6cdb\u578b\u90fd\u5199\u4e0a        ArrayList<String> list01 = new ArrayList<String>();        //JDK1.7\u7248\u672c\u4e4b\u540e,=\u53f7\u540e\u8fb9\u7684\u6cdb\u578b\u53ef\u4ee5\u7701\u7565,\u540e\u8fb9\u7684\u6cdb\u578b\u53ef\u4ee5\u6839\u636e\u524d\u8fb9\u7684\u6cdb\u578b\u63a8\u5bfc\u51fa\u6765        ArrayList<String> list02 = new ArrayList<>();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/18.%E3%80%90%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%91-%E7%AC%94%E8%AE%B0/code/07_ThreadAndLambda/src/com/itheima/demo07/Lambda/Demo01ArrayList.java", "stars": "2", "class": {"name": "Demo01ArrayList", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "play", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void play() {        System.out.println(\"\u89c6\u9891\u6b63\u5904\u5728\u64ad\u653e\u72b6\u6001\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoPlayState.java", "stars": "2", "class": {"name": "VideoPlayState", "extends": "VideoState", "implements": null, "modifiers": ["public"]}}, {"method_name": "pause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pause() {        super.videoContext.setVideoState(VideoContext.VIDEO_PAUSE_STATE);    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoPlayState.java", "stars": "2", "class": {"name": "VideoPlayState", "extends": "VideoState", "implements": null, "modifiers": ["public"]}}, {"method_name": "speed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void speed() {        super.videoContext.setVideoState(VideoContext.VIDEO_SPEED_STATE);    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoPlayState.java", "stars": "2", "class": {"name": "VideoPlayState", "extends": "VideoState", "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void close() {        super.videoContext.setVideoState(VideoContext.VIDEO_CLOSE_STATE);    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoPlayState.java", "stars": "2", "class": {"name": "VideoPlayState", "extends": "VideoState", "implements": null, "modifiers": ["public"]}}, {"method_name": "argumentsMustNotBeNull", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid argumentsMustNotBeNull() {\t\tassertThatIllegalArgumentException().isThrownBy(() -> new DefaultApplicationArguments((String[]) null))\t\t\t\t.withMessageContaining(\"Args must not be null\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/DefaultApplicationArgumentsTests.java", "stars": "47572", "class": {"name": "DefaultApplicationArgumentsTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getArgs", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid getArgs() {\t\tApplicationArguments arguments = new DefaultApplicationArguments(ARGS);\t\tassertThat(arguments.getSourceArgs()).isEqualTo(ARGS);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/DefaultApplicationArgumentsTests.java", "stars": "47572", "class": {"name": "DefaultApplicationArgumentsTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "optionNames", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid optionNames() {\t\tApplicationArguments arguments = new DefaultApplicationArguments(ARGS);\t\tSet<String> expected = new HashSet<>(Arrays.asList(\"foo\", \"debug\"));\t\tassertThat(arguments.getOptionNames()).isEqualTo(expected);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/DefaultApplicationArgumentsTests.java", "stars": "47572", "class": {"name": "DefaultApplicationArgumentsTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "containsOption", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid containsOption() {\t\tApplicationArguments arguments = new DefaultApplicationArguments(ARGS);\t\tassertThat(arguments.containsOption(\"foo\")).isTrue();\t\tassertThat(arguments.containsOption(\"debug\")).isTrue();\t\tassertThat(arguments.containsOption(\"spring\")).isFalse();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/DefaultApplicationArgumentsTests.java", "stars": "47572", "class": {"name": "DefaultApplicationArgumentsTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getOptionValues", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid getOptionValues() {\t\tApplicationArguments arguments = new DefaultApplicationArguments(ARGS);\t\tassertThat(arguments.getOptionValues(\"foo\")).isEqualTo(Arrays.asList(\"bar\", \"baz\"));\t\tassertThat(arguments.getOptionValues(\"debug\")).isEmpty();\t\tassertThat(arguments.getOptionValues(\"spring\")).isNull();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/DefaultApplicationArgumentsTests.java", "stars": "47572", "class": {"name": "DefaultApplicationArgumentsTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getNonOptionArgs", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid getNonOptionArgs() {\t\tApplicationArguments arguments = new DefaultApplicationArguments(ARGS);\t\tassertThat(arguments.getNonOptionArgs()).containsExactly(\"spring\", \"boot\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/DefaultApplicationArgumentsTests.java", "stars": "47572", "class": {"name": "DefaultApplicationArgumentsTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getNoNonOptionArgs", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid getNoNonOptionArgs() {\t\tApplicationArguments arguments = new DefaultApplicationArguments(\"--debug\");\t\tassertThat(arguments.getNonOptionArgs()).isEmpty();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/DefaultApplicationArgumentsTests.java", "stars": "47572", "class": {"name": "DefaultApplicationArgumentsTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void init() {        sHandler.getLooper();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setDefaultExecutor", "params": ["Executor"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setDefaultExecutor(Executor exec) {        sDefaultExecutor = exec;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "postResultIfNotInvoked", "params": ["Result"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void postResultIfNotInvoked(Result result) {        final boolean wasTaskInvoked = mTaskInvoked.get();        if (!wasTaskInvoked) {            postResult(result);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "postResult", "params": ["Result"], "throws": null, "modifiers": ["private"], "return_type": "Result", "snippet": "    private Result postResult(Result result) {        @SuppressWarnings(\"unchecked\")        Message message = sHandler.obtainMessage(MESSAGE_POST_RESULT,                new AsyncTaskResult<Result>(this, result));        message.sendToTarget();        return result;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "Status", "snippet": "    public final Status getStatus() {        return mStatus;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "doInBackground", "params": ["Params"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "Result", "snippet": "    protected abstract Result doInBackground(Params... params);    /**     * Runs on the UI thread before {@link #doInBackground}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onPreExecute", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPreExecute() {    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onPostExecute", "params": ["Result"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPostExecute(Result result) {    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onProgressUpdate", "params": ["Progress"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onProgressUpdate(Progress... values) {    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onCancelled", "params": ["Result"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCancelled(Result result) {        onCancelled();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onCancelled", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCancelled() {    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isCancelled", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "boolean", "snippet": "    public final boolean isCancelled() {        return mCancelled.get();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "cancel", "params": ["boolean"], "throws": null, "modifiers": ["public", "final"], "return_type": "boolean", "snippet": "    public final boolean cancel(boolean mayInterruptIfRunning) {        mCancelled.set(true);        return mFuture.cancel(mayInterruptIfRunning);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "get", "params": [], "throws": ["InterruptedException", "ExecutionException"], "modifiers": ["public", "final"], "return_type": "Result", "snippet": "    public final Result get() throws InterruptedException, ExecutionException {        return mFuture.get();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "get", "params": ["long", "TimeUnit"], "throws": ["InterruptedException", "ExecutionException", "TimeoutException"], "modifiers": ["public", "final"], "return_type": "Result", "snippet": "    public final Result get(long timeout, TimeUnit unit) throws InterruptedException,            ExecutionException, TimeoutException {        return mFuture.get(timeout, unit);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "execute", "params": ["Params"], "throws": null, "modifiers": ["public", "final"], "return_type": "AsyncTask<Params,Progress,Result>", "snippet": "    public final AsyncTask<Params, Progress, Result> execute(Params... params) {        return executeOnExecutor(sDefaultExecutor, params);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "executeOnExecutor", "params": ["Executor", "Params"], "throws": null, "modifiers": ["public", "final"], "return_type": "AsyncTask<Params,Progress,Result>", "snippet": "    public final AsyncTask<Params, Progress, Result> executeOnExecutor(Executor exec,            Params... params) {        if (mStatus != Status.PENDING) {            switch (mStatus) {                case RUNNING:                    throw new IllegalStateException(\"Cannot execute task:\"                            + \" the task is already running.\");                case FINISHED:                    throw new IllegalStateException(\"Cannot execute task:\"                            + \" the task has already been executed \"                            + \"(a task can be executed only once)\");            }        }        mStatus = Status.RUNNING;        onPreExecute();        mWorker.mParams = params;        exec.execute(mFuture);        return this;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "execute", "params": ["Runnable"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void execute(Runnable runnable) {        sDefaultExecutor.execute(runnable);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "publishProgress", "params": ["Progress"], "throws": null, "modifiers": ["final", "protected"], "return_type": "void", "snippet": "    protected final void publishProgress(Progress... values) {        if (!isCancelled()) {            sHandler.obtainMessage(MESSAGE_POST_PROGRESS,                    new AsyncTaskResult<Progress>(this, values)).sendToTarget();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "finish", "params": ["Result"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void finish(Result result) {        if (isCancelled()) {            onCancelled(result);        } else {            onPostExecute(result);        }        mStatus = Status.FINISHED;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "AsyncTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "execute", "params": ["Runnable"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "        public synchronized void execute(final Runnable r) {            mTasks.offer(new Runnable() {                public void run() {                    try {                        r.run();                    } finally {                        scheduleNext();                    }                }            });            if (mActive == null) {                scheduleNext();            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "SerialExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["private", "static"]}}, {"method_name": "scheduleNext", "params": [], "throws": null, "modifiers": ["synchronized", "protected"], "return_type": "void", "snippet": "        protected synchronized void scheduleNext() {            if ((mActive = mTasks.poll()) != null) {                THREAD_POOL_EXECUTOR.execute(mActive);            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "SerialExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["private", "static"]}}, {"method_name": "handleMessage", "params": ["Message"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void handleMessage(Message msg) {            AsyncTaskResult result = (AsyncTaskResult) msg.obj;            switch (msg.what) {                case MESSAGE_POST_RESULT:                    // There is only one result                    result.mTask.finish(result.mData[0]);                    break;                case MESSAGE_POST_PROGRESS:                    result.mTask.onProgressUpdate(result.mData);                    break;            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/AsyncTask.java", "stars": "74", "class": {"name": "InternalHandler", "extends": "Handler", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "initAttr", "params": ["Context", "AttributeSet"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initAttr(Context context, AttributeSet attrs) {        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.LightProgressView);        mHaloHeight = dp2px(mHaloHeight);        mHaloWidth = dp2px(mHaloWidth);        mHaloHeight = ta.getDimension(R.styleable.LightProgressView_lpv_halo_height, mHaloHeight);        mHaloWidth = ta.getDimension(R.styleable.LightProgressView_lpv_halo_width, mHaloWidth);        mNumOfHalo = ta.getInteger(R.styleable.LightProgressView_lpv_num_of_halo, mNumOfHalo);        magicNum = ta.getFloat(R.styleable.LightProgressView_lpv_magicnum, magicNum);        mMoonColor = ta.getColor(R.styleable.LightProgressView_lpv_moon_color, mMoonColor);        mHaloColor = ta.getColor(R.styleable.LightProgressView_lpv_halo_color, mHaloColor);        ta.recycle();    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/LightProgressView.java", "stars": "32", "class": {"name": "LightProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        mMeasure = new PathMeasure();        mQuadPath = new Path();        mCirclePath = new Path();        mLayer = new RectF();        mPaint = new Paint();        mPaint.setColor(mMoonColor);        mPaint.setAntiAlias(true);        mPaint.setStyle(Paint.Style.FILL);        mOpPaint = new Paint();        mOpPaint.setColor(mMoonColor);        mOpPaint.setAntiAlias(true);        mOpPaint.setStyle(Paint.Style.FILL);        mOpPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));        setWillNotDraw(false);    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/LightProgressView.java", "stars": "32", "class": {"name": "LightProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSizeChanged", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onSizeChanged(int w, int h, int oldw, int oldh) {        super.onSizeChanged(w, h, oldw, oldh);        float paddingLeft = getPaddingLeft();        float paddingRight = getPaddingRight();        float paddingTop = getPaddingTop();        float paddingBottom = getPaddingBottom();        // \u592a\u9633/\u6708\u4eae \u5230\u5149\u6655\u7684\u95f4\u9694\u662f\u4e24\u500d\u5149\u6655\u7684\u5bbd\u5ea6        float margin = mHaloHeight + mHaloWidth * 2;        //\u5b9e\u9645\u4e0a\u592a\u9633/\u6708\u4eae \u5177\u4f53\u5bbd\u9ad8        mLayer.set(margin + paddingLeft, margin + paddingTop,                w - margin - paddingRight, h - margin - paddingBottom);        mCirclePath.reset();        //\u53d6\u5bbd\u9ad8\u4e2d \u6700\u77ed\u7684\u6700\u4e3a\u592a\u9633\u7684\u534a\u5f84        circleR = w > h ? (h - 2 * margin - paddingTop - paddingBottom) / 2.0f :                (w - 2 * margin - paddingLeft - paddingRight) / 2.0f;        //\u987a\u65f6\u949f\u753b\u5706\uff0c\u5706\u7684\u8d77\u59cb\u4f4d\u7f6e\u5728\u53f3\u4fa7\u4e2d\u95f4        mCirclePath.addCircle(mLayer.centerX(), mLayer.centerY(), circleR, Path.Direction.CW);        //\u628a\u753b\u597d\u5706\u7684 path \u6dfb\u52a0\u5230 PathMeasure\uff0c\u5f85\u4f1a\u53ef\u4ee5\u88ab getPosTan \u4f7f\u7528        mMeasure.setPath(mCirclePath, false);    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/LightProgressView.java", "stars": "32", "class": {"name": "LightProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        drawPath(canvas);    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/LightProgressView.java", "stars": "32", "class": {"name": "LightProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawPath", "params": ["Canvas"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void drawPath(Canvas canvas) {        float progress = mProgress;        float[] mBeginPoint = {0f, 0f};//\u8d1d\u8d5b\u5c14\u66f2\u7ebf\u7684\u7b2c\u4e00\u4e2a\u5b9a\u70b9        float[] mSecondPoint = {0f, 0f}; //\u8d1d\u8d5b\u5c14\u66f2\u7ebf\u7684\u7b2c\u4e8c\u4e2a\u5b9a\u70b9        //\u627e\u5230\u7b2c\u4e00\u4e2a\u5b9a\u70b9        getBeginPoint(progress, mBeginPoint);        //\u627e\u5230\u7b2c\u4e8c\u4e2a\u5b9a\u70b9        getSecondPoint(progress, mSecondPoint);        mQuadPath.reset();        mQuadPath.moveTo(mBeginPoint[0], mBeginPoint[1]);        float[] begin = {mBeginPoint[0], mBeginPoint[1]};        //\u627e\u5230\u62df\u5408\u5706\u7684\u8d1d\u8d5b\u5c14\u66f2\u7ebf\u63a7\u5236\u70b9        float[] contrlPoint = getContrlPoint(begin, mSecondPoint);        //\u753b\u8d1d\u8d5b\u5c14\u66f2\u7ebf        mQuadPath.quadTo(contrlPoint[0], contrlPoint[1], mSecondPoint[0], mSecondPoint[1]);        //\u627e\u5230\u5706\u5f27\u7684\u8d77\u59cb\u89d2\u5ea6\u548c\u626b\u8fc7\u7684\u89d2\u5ea6        Pair<Float, Float> degrees = getAngle(mBeginPoint, mSecondPoint);        //\u5706\u5f27\u753b\u5927\u4e00\u70b9\u3002\u8fb9\u754c\u624d\u4e0d\u4f1a\u6709\u9057\u6f0f        RectF curRecf = new RectF(mLayer);        curRecf.left -= 2;        curRecf.top -= 2;        curRecf.right += 2;        curRecf.bottom += 2;        //\u753b\u5706\u5f27        mQuadPath.arcTo(curRecf, degrees.first, degrees.second);        mQuadPath.moveTo(mBeginPoint[0], mBeginPoint[1]);        mQuadPath.close();        //\u65b0\u5efa\u753b\u5e03\u5c42        canvas.saveLayer(mLayer, null, Canvas.ALL_SAVE_FLAG);        //\u753b\u5927\u5706        mPaint.setColor(mMoonColor);        canvas.drawPath(mCirclePath, mPaint);        //\u753bop\u64cd\u4f5c\u540e\u7684\u6708\u4eae        canvas.drawPath(mQuadPath, mOpPaint);        canvas.restore();        //\u753b\u5149\u6655        canvas.save();        //\u753b\u5e03\u5e73\u79fb\u5230\u4e2d\u95f4\uff0c\u4e3a\u4e86\u7b49\u4e0b\u65cb\u8f6c\u4f7f\u7528        canvas.translate(mLayer.centerX(), mLayer.centerY());        //\u8ba1\u7b97\u51fa\u5f53\u524d\u8fdb\u5ea6\u9700\u8981\u753b\u591a\u5c11\u4e2a\u5149\u6655        int count = mNumOfHalo - (int) (progress / mOneOFHaleProgress);        float mHalfHaloWidth = mHaloWidth / 2;        //\u5f00\u59cb\u753b\u5149\u6655        mPaint.setColor(mHaloColor);        for (int i = 0; i < count; i++) {            canvas.drawRoundRect(new RectF(-mHalfHaloWidth, -mLayer.centerY() + getPaddingTop(), mHalfHaloWidth,                    mHaloHeight - mLayer.centerY() + getPaddingTop()), mHalfHaloWidth, mHalfHaloWidth, mPaint);            canvas.rotate(mOneOFHaleDegrees);        }        canvas.restore();    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/LightProgressView.java", "stars": "32", "class": {"name": "LightProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBeginPoint", "params": ["float", "float"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getBeginPoint(float progress, float[] point) {        if (progress <= 0.5) {            //A \u5b9a\u70b9 \u57280.5 progress \u4e4b\u524d\u90fd\u662f\u5728\u7b2c\u56db            mMeasure.getPosTan(mMeasure.getLength() * (-0.2f * progress + 0.1f), point, null);        } else {            mMeasure.getPosTan(mMeasure.getLength() * (-0.2f * progress + 1.1f), point, null);        }    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/LightProgressView.java", "stars": "32", "class": {"name": "LightProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSecondPoint", "params": ["float", "float"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getSecondPoint(float progress, float[] point) {        if (progress <= 0.1) {            mMeasure.getPosTan(mMeasure.getLength() * (-1.0f * progress + 0.1f), point, null);        } else {            mMeasure.getPosTan(mMeasure.getLength() * (-7.0f / 9.0f * progress + 9.7f / 9f), point, null);        }    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/LightProgressView.java", "stars": "32", "class": {"name": "LightProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAngle", "params": ["float", "float"], "throws": null, "modifiers": ["private"], "return_type": "Pair<Float,Float>", "snippet": "    private Pair<Float, Float> getAngle(float[] point1, float[] point2) {        float centerX = mLayer.centerX();        float centerY = mLayer.centerY();        float diffY;        float degrees1 = 0;        float degrees2;        float startAngle;        float sweepAngle;        if (point2[0] > centerX && point2[1] > centerY) {            degrees1 = (float) Math.toDegrees(Math.asin((point2[1] - centerY) / circleR));            degrees2 = (float) Math.toDegrees(Math.asin((point1[1] - centerY) / circleR));            startAngle = degrees1;            sweepAngle = degrees2 - degrees1;        } else {            if (point2[0] > centerX) { //\u4e00 \u8c61\u9650                if (point2[1] < centerY) {                    diffY = centerY - point2[1];                    degrees1 = (float) Math.toDegrees(Math.asin(diffY / circleR));                }            } else { // 2 3 \u8c61\u9650                if (point2[1] < centerY) {                    diffY = centerY - point2[1];                    degrees1 = 180 - (float) Math.toDegrees(Math.asin(diffY / circleR));                } else {                    diffY = point2[1] - centerY;                    degrees1 = (float) Math.toDegrees(Math.asin(diffY / circleR)) + 180;                }            }            degrees2 = (float) Math.toDegrees(Math.asin((centerY - point1[1]) / circleR));            startAngle = 360 - degrees1;            sweepAngle = degrees1 - degrees2;        }        return new Pair<>(startAngle, sweepAngle);    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/LightProgressView.java", "stars": "32", "class": {"name": "LightProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getContrlPoint", "params": ["float", "float"], "throws": null, "modifiers": ["private"], "return_type": "float", "snippet": "    private float[] getContrlPoint(float[] point1, float[] point2) {        float centerX = mLayer.centerX();        float centerY = mLayer.centerY();        float diffDis = (float) Math.sqrt((point1[0] - point2[0]) * (point1[0] - point2[0]) + (point1[1] - point2[1]) * (point1[1] - point2[1]));        //\u4e2d\u5782\u7ebf\u51fd\u6570 y = kx+b \u4e2d\u7684 k        float k = (point1[0] - point2[0]) / (point2[1] - point1[1]);        //\u4e2d\u5782\u7ebf\u51fd\u6570 y = kx+b \u4e2d\u7684 b        float b = (point1[1] + point2[1]) / 2.0f - (point1[0] * point1[0] - point2[0] * point2[0]) / 2.0f / (point2[1] - point1[1]);        float[] point = {0f, 0f};        // cos\u03b1 \u7684\u503c        float cosDegrees = (float) (1 / Math.sqrt(1 + k * k));        if (k < 0) {            //magicNum \u4e3a0.43            point[0] = (point1[0] + point2[0]) / 2.0f - (cosDegrees * diffDis * magicNum);        } else if (k > 0) {            if (point1[0] > centerX && point1[1] > centerY && point2[0] > centerX) {                point[0] = (point1[0] + point2[0]) / 2.0f - (cosDegrees * diffDis * magicNum);            } else {                point[0] = (point1[0] + point2[0]) / 2.0f + (cosDegrees * diffDis * magicNum);            }        } else {            point[0] = (point1[0] + point2[0]) / 2.0f;        }        point[1] = k * point[0] + b;        return point;    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/LightProgressView.java", "stars": "32", "class": {"name": "LightProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "dp2px", "params": ["float"], "throws": null, "modifiers": ["private"], "return_type": "float", "snippet": "    private float dp2px(float dp) {        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp,                getContext().getResources().getDisplayMetrics());    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/LightProgressView.java", "stars": "32", "class": {"name": "LightProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "setProgress", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProgress(float progress) {        this.mProgress = 1.0f - progress;        postInvalidate();    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/LightProgressView.java", "stars": "32", "class": {"name": "LightProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": ["RecyclerView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAttachedToWindow(RecyclerView recyclerView) {        super.onAttachedToWindow(recyclerView);        mRecyclerView = recyclerView;        // \u8bbe\u7f6e\u5b50\u63a7\u4ef6\u7684\u8fb9\u754c\u53ef\u4ee5\u8d85\u8fc7\u7236\u5e03\u5c40\u7684\u8303\u56f4        mRecyclerView.setClipToPadding(false);        // \u6dfb\u52a0 LinearSnapHelper        mLinearSnapHelper.attachToRecyclerView(mRecyclerView);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "PickerLayoutManager", "extends": "LinearLayoutManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": ["RecyclerView", "RecyclerView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDetachedFromWindow(RecyclerView recyclerView, RecyclerView.Recycler recycler) {        super.onDetachedFromWindow(recyclerView, recycler);        mRecyclerView = null;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "PickerLayoutManager", "extends": "LinearLayoutManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "isAutoMeasureEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAutoMeasureEnabled() {        return mMaxItem == 0;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "PickerLayoutManager", "extends": "LinearLayoutManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["RecyclerView", "RecyclerView", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onMeasure(@NonNull RecyclerView.Recycler recycler, @NonNull RecyclerView.State state, int widthSpec, int heightSpec) {        int width = RecyclerView.LayoutManager.chooseSize(widthSpec,                getPaddingLeft() + getPaddingRight(),                ViewCompat.getMinimumWidth(mRecyclerView));        int height = RecyclerView.LayoutManager.chooseSize(heightSpec,                getPaddingTop() + getPaddingBottom(),                ViewCompat.getMinimumHeight(mRecyclerView));        if (state.getItemCount() != 0 && mMaxItem != 0) {            View itemView = recycler.getViewForPosition(0);            measureChildWithMargins(itemView, widthSpec, heightSpec);            if (mOrientation == HORIZONTAL) {                int measuredWidth = itemView.getMeasuredWidth();                int paddingHorizontal = (mMaxItem - 1) / 2 * measuredWidth;                mRecyclerView.setPadding(paddingHorizontal,0, paddingHorizontal,0);                width = measuredWidth * mMaxItem;            } else if (mOrientation == VERTICAL) {                int measuredHeight = itemView.getMeasuredHeight();                int paddingVertical = (mMaxItem - 1) / 2 * measuredHeight;                mRecyclerView.setPadding(0, paddingVertical,0, paddingVertical);                height = measuredHeight * mMaxItem;            }        }        setMeasuredDimension(width, height);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "PickerLayoutManager", "extends": "LinearLayoutManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onScrollStateChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onScrollStateChanged(int state) {        super.onScrollStateChanged(state);        // \u5f53 RecyclerView \u505c\u6b62\u6eda\u52a8\u65f6        if (state == RecyclerView.SCROLL_STATE_IDLE) {            if (mListener != null) {                mListener.onPicked(mRecyclerView, getPickedPosition());            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "PickerLayoutManager", "extends": "LinearLayoutManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onLayoutChildren", "params": ["RecyclerView", "RecyclerView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {        super.onLayoutChildren(recycler, state);        if (getItemCount() < 0 || state.isPreLayout()) {            return;        }        if (mOrientation == HORIZONTAL){            scaleHorizontalChildView();        }else if (mOrientation == VERTICAL){            scaleVerticalChildView();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "PickerLayoutManager", "extends": "LinearLayoutManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "scrollHorizontallyBy", "params": ["int", "RecyclerView", "RecyclerView"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int scrollHorizontallyBy(int dx, RecyclerView.Recycler recycler, RecyclerView.State state) {        scaleHorizontalChildView();        return super.scrollHorizontallyBy(dx, recycler, state);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "PickerLayoutManager", "extends": "LinearLayoutManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "scrollVerticallyBy", "params": ["int", "RecyclerView", "RecyclerView"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State state) {        scaleVerticalChildView();        return super.scrollVerticallyBy(dy, recycler, state);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "PickerLayoutManager", "extends": "LinearLayoutManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "scaleHorizontalChildView", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void scaleHorizontalChildView() {        float mid = getWidth() / 2.0f;        for (int i = 0; i < getChildCount(); i++) {            View childView =  getChildAt(i);            if (childView != null) {                float childMid = (getDecoratedLeft(childView) + getDecoratedRight(childView)) / 2.0f;                float scale = 1.0f + (-1 * (1 - mScale)) * (Math.min(mid, Math.abs(mid - childMid))) / mid;                childView.setScaleX(scale);                childView.setScaleY(scale);                if (mAlpha) {                    childView.setAlpha(scale);                }            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "PickerLayoutManager", "extends": "LinearLayoutManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "scaleVerticalChildView", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void scaleVerticalChildView(){        float mid = getHeight() / 2.0f;        for (int i = 0; i < getChildCount(); i++) {            View childView =  getChildAt(i);            if (childView != null) {                float childMid = (getDecoratedTop(childView) + getDecoratedBottom(childView)) / 2.0f;                float scale = 1.0f + (-1 *  (1 - mScale)) * (Math.min(mid, Math.abs(mid - childMid))) / mid;                childView.setScaleX(scale);                childView.setScaleY(scale);                if (mAlpha) {                    childView.setAlpha(scale);                }            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "PickerLayoutManager", "extends": "LinearLayoutManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPickedPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPickedPosition() {        View itemView = mLinearSnapHelper.findSnapView(this);        if(itemView != null) {            return getPosition(itemView);        }        return 0;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "PickerLayoutManager", "extends": "LinearLayoutManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnPickerListener", "params": ["OnPickerListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnPickerListener(OnPickerListener listener) {        mListener = listener;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "PickerLayoutManager", "extends": "LinearLayoutManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOrientation", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setOrientation(@RecyclerView.Orientation int orientation) {            mOrientation = orientation;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setReverseLayout", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setReverseLayout(boolean reverseLayout) {            mReverseLayout = reverseLayout;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setMaxItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setMaxItem(int maxItem) {            mMaxItem = maxItem;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setScale", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setScale(float scale) {            mScale = scale;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setAlpha", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setAlpha(boolean alpha) {            mAlpha = alpha;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setOnPickerListener", "params": ["OnPickerListener"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setOnPickerListener(OnPickerListener listener) {            mListener = listener;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PickerLayoutManager", "snippet": "        public PickerLayoutManager build() {            PickerLayoutManager layoutManager = new PickerLayoutManager(mContext, mOrientation, mReverseLayout, mMaxItem, mScale, mAlpha);            if (mListener != null) {                layoutManager.setOnPickerListener(mListener);            }            return layoutManager;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "into", "params": ["RecyclerView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void into(RecyclerView recyclerView) {            recyclerView.setLayoutManager(build());        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/other/PickerLayoutManager.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setup", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setup() throws Exception {    BaseDataTest.runScript(IbatisConfig.getSqlSessionFactory().getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/primitive_result_type/create.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitive_result_type/PrimitiveResultTypeTest.java", "stars": "15", "class": {"name": "PrimitiveResultTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldReturnProperPrimitiveType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldReturnProperPrimitiveType() {    List<Integer> codes = ProductDAO.selectProductCodes();    for (Object code : codes) {      assertTrue(code instanceof Integer);    }    List<Long> lcodes = ProductDAO.selectProductCodesL();    for (Object lcode : lcodes) {      assertTrue(!(lcode instanceof Integer));    }    List<BigDecimal> bcodes = ProductDAO.selectProductCodesB();    for (Object bcode : bcodes) {      assertTrue(bcode instanceof BigDecimal);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitive_result_type/PrimitiveResultTypeTest.java", "stars": "15", "class": {"name": "PrimitiveResultTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "noErrorThrowOut", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void noErrorThrowOut(){      List<Product> products=ProductDAO.selectAllProducts();    assertEquals(4, products.size(), \"should return 4 results\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitive_result_type/PrimitiveResultTypeTest.java", "stars": "15", "class": {"name": "PrimitiveResultTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "checkAllNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean checkAllNull() {        return (locationFilterCriteria == null || locationFilterCriteria.checkAllNull()) &&            minPricePerM2 == null && maxPricePerM2 == null &&            sizeInM2LowerBound == null &&            sizeInM2UpperBound == null && roofed == null &&            leasingTimeFrom == null && leasingTimeTo == null &&            keywords == null && electricity == null && water == null &&            high == null && glassHouse == null;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/criteria/GardenFieldFilterCriteria.java", "stars": "2", "class": {"name": "GardenFieldFilterCriteria", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testClasses", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testClasses(String classPath) {\t\tClassNode node = getFromName(classPath);\t\tfor (MethodNode mn : node.methods)\t\t\tassertThrows(AnalyzerException.class, () -> TestUtils.getFrames(node.name, mn));\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/java/me/coley/analysis/validation/fail/TestCustomIllegalClasses.java", "stars": "12", "class": {"name": "TestCustomIllegalClasses", "extends": "TestUtils", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserInfo", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "User", "snippet": "    public static User getUserInfo(){        Optional<Object> principal = Optional.ofNullable(SecurityContextHolder.getContext().getAuthentication().getPrincipal());        User user = principal.map(obj -> (User) obj)                .orElseThrow(() -> new BusinessException(ApiResponseEnum.NO_AUTHENTICATED_USER_ERROR));        return user;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/base/AuthenticatedUserUtil.java", "stars": "3", "class": {"name": "AuthenticatedUserUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserId", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "    public static Long getUserId(){        return getUserInfo().getId();    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/base/AuthenticatedUserUtil.java", "stars": "3", "class": {"name": "AuthenticatedUserUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadTableInfo", "params": [], "throws": ["IOException", "SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void loadTableInfo() throws IOException, SQLException {    this.tables = new HashMap<>();    this.installedVersions = new HashMap<>();    this.missingTables = new HashSet<>();    this.upgradeList = new HashMap<>();    final Props dbProps = loadDBProps();    this.version = dbProps.getString(\"version\");    loadInstalledTables();    loadTableVersion();    findMissingTables();    findOutOfDateTables();    this.needsUpdating = !this.upgradeList.isEmpty() || !this.missingTables.isEmpty();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseSetup.java", "stars": "18", "class": {"name": "AzkabanDatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "needsUpdating", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean needsUpdating() {    if (this.version == null) {      throw new RuntimeException(\"Uninitialized. Call loadTableInfo first.\");    }    return this.needsUpdating;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseSetup.java", "stars": "18", "class": {"name": "AzkabanDatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printUpgradePlan", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void printUpgradePlan() {    if (!this.tables.isEmpty()) {      logger.info(\"The following are installed tables\");      for (final Map.Entry<String, String> installedTable : this.tables.entrySet()) {        logger.info(\" \" + installedTable.getKey() + \" version:\"            + installedTable.getValue());      }    } else {      logger.info(\"No installed tables found.\");    }    if (!this.missingTables.isEmpty()) {      logger.info(\"The following are missing tables that need to be installed\");      for (final String table : this.missingTables) {        logger.info(\" \" + table);      }    } else {      logger.info(\"There are no missing tables.\");    }    if (!this.upgradeList.isEmpty()) {      logger.info(\"The following tables need to be updated.\");      for (final Map.Entry<String, List<String>> upgradeTable : this.upgradeList          .entrySet()) {        String tableInfo = \" \" + upgradeTable.getKey() + \" versions:\";        for (final String upVersion : upgradeTable.getValue()) {          tableInfo += upVersion + \",\";        }        logger.info(tableInfo);      }    } else {      logger.info(\"No tables need to be updated.\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseSetup.java", "stars": "18", "class": {"name": "AzkabanDatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateDatabase", "params": ["boolean", "boolean"], "throws": ["SQLException", "IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateDatabase(final boolean createTable, final boolean updateTable)      throws SQLException, IOException {    // We call this because it has an unitialize check.    if (!needsUpdating()) {      logger.info(\"Nothing to be done.\");      return;    }    if (createTable && !this.missingTables.isEmpty()) {      createNewTables();    }    if (updateTable && !this.upgradeList.isEmpty()) {      updateTables();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseSetup.java", "stars": "18", "class": {"name": "AzkabanDatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadDBProps", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Props", "snippet": "  private Props loadDBProps() throws IOException {    final File dbPropsFile = new File(this.scriptPath, \"database.properties\");    if (!dbPropsFile.exists()) {      throw new IOException(          \"Cannot find 'database.properties' file in \" + dbPropsFile.getAbsolutePath());    }    return new Props(null, dbPropsFile);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseSetup.java", "stars": "18", "class": {"name": "AzkabanDatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadTableVersion", "params": [], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void loadTableVersion() throws SQLException {    logger.info(\"Searching for table versions in the properties table\");    if (this.tables.containsKey(\"properties\")) {      // Load version from settings      final QueryRunner runner = new QueryRunner(this.dataSource);      final Map<String, String> map =          runner.query(FETCH_PROPERTY_BY_TYPE, new PropertiesHandler(),              PropertyType.DB.getNumVal());      for (final String key : map.keySet()) {        final String value = map.get(key);        if (key.endsWith(\".version\")) {          final String tableName =              key.substring(0, key.length() - \".version\".length());          this.installedVersions.put(tableName, value);          if (this.tables.containsKey(tableName)) {            this.tables.put(tableName, value);          }        }      }    } else {      logger.info(\"Properties table doesn't exist.\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseSetup.java", "stars": "18", "class": {"name": "AzkabanDatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadInstalledTables", "params": [], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void loadInstalledTables() throws SQLException {    logger.info(\"Searching for installed tables\");    Connection conn = null;    try {      conn = this.dataSource.getConnection();      final ResultSet rs =          conn.getMetaData().getTables(conn.getCatalog(), null, null,              new String[]{\"TABLE\"});      while (rs.next()) {        this.tables.put(rs.getString(\"TABLE_NAME\").toLowerCase(), \"2.1\");      }    } finally {      DbUtils.commitAndCloseQuietly(conn);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseSetup.java", "stars": "18", "class": {"name": "AzkabanDatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findMissingTables", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void findMissingTables() {    final File directory = new File(this.scriptPath);    final File[] createScripts =        directory.listFiles(new FileIOUtils.PrefixSuffixFileFilter(            CREATE_SCRIPT_PREFIX, SQL_SCRIPT_SUFFIX));    if (createScripts != null) {      for (final File script : createScripts) {        final String name = script.getName();        final String[] nameSplit = name.split(\"\\\\.\");        final String tableName = nameSplit[1];        // TODO temporary fix for Issue #1569:        // \"Startup fails: missing tables that need to be installed: quartz-tables-all\"        // this doesn't work because the file actually contains multiple tables and the file name        // pattern doesn't match with any of those. Until this new file the convention has been that        // each file has a single table and the file name matches the table name.        if (\"quartz-tables-all\".equals(tableName)) {          continue;        }        if (!this.tables.containsKey(tableName)) {          this.missingTables.add(tableName);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseSetup.java", "stars": "18", "class": {"name": "AzkabanDatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findOutOfDateTables", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void findOutOfDateTables() {    for (final String key : this.tables.keySet()) {      final String version = this.tables.get(key);      final List<String> upgradeVersions = findOutOfDateTable(key, version);      if (upgradeVersions != null && !upgradeVersions.isEmpty()) {        this.upgradeList.put(key, upgradeVersions);      }    }    for (final String key : this.missingTables) {      final List<String> upgradeVersions = findOutOfDateTable(key, \"\");      if (upgradeVersions != null && !upgradeVersions.isEmpty()) {        this.upgradeList.put(key, upgradeVersions);      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseSetup.java", "stars": "18", "class": {"name": "AzkabanDatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findOutOfDateTable", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "  private List<String> findOutOfDateTable(final String table, final String currentVersion) {    final File directory = new File(this.scriptPath);    final ArrayList<String> versions = new ArrayList<>();    final File[] createScripts =        directory.listFiles(new FileIOUtils.PrefixSuffixFileFilter(            UPDATE_SCRIPT_PREFIX + table, SQL_SCRIPT_SUFFIX));    if (createScripts == null || createScripts.length == 0) {      return null;    }    final String updateFileNameVersion = UPDATE_SCRIPT_PREFIX + table + \".\" + currentVersion;    for (final File file : createScripts) {      final String fileName = file.getName();      if (fileName.compareTo(updateFileNameVersion) > 0) {        final String[] split = fileName.split(\"\\\\.\");        String updateScriptVersion = \"\";        for (int i = 2; i < split.length - 1; ++i) {          try {            Integer.parseInt(split[i]);            updateScriptVersion += split[i] + \".\";          } catch (final NumberFormatException e) {            break;          }        }        if (updateScriptVersion.endsWith(\".\")) {          updateScriptVersion = updateScriptVersion.substring(0, updateScriptVersion.length() - 1);          // add to update list if updateScript will update above current          // version and upto targetVersion in database.properties          if (updateScriptVersion.compareTo(currentVersion) > 0              && updateScriptVersion.compareTo(this.version) <= 0) {            versions.add(updateScriptVersion);          }        }      }    }    Collections.sort(versions);    return versions;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseSetup.java", "stars": "18", "class": {"name": "AzkabanDatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createNewTables", "params": [], "throws": ["SQLException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void createNewTables() throws SQLException, IOException {    final Connection conn = this.dataSource.getConnection();    conn.setAutoCommit(false);    try {      // Make sure that properties table is created first.      if (this.missingTables.contains(\"properties\")) {        runTableScripts(conn, \"properties\", this.version, this.dataSource.getDBType(),            false);      }      for (final String table : this.missingTables) {        if (!table.equals(\"properties\")) {          runTableScripts(conn, table, this.version, this.dataSource.getDBType(), false);          // update version as we have create a new table          this.installedVersions.put(table, this.version);        }      }    } finally {      conn.close();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseSetup.java", "stars": "18", "class": {"name": "AzkabanDatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateTables", "params": [], "throws": ["SQLException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void updateTables() throws SQLException, IOException {    final Connection conn = this.dataSource.getConnection();    conn.setAutoCommit(false);    try {      // Make sure that properties table is created first.      if (this.upgradeList.containsKey(\"properties\")) {        for (final String version : this.upgradeList.get(\"properties\")) {          runTableScripts(conn, \"properties\", version, this.dataSource.getDBType(),              true);        }      }      for (final String table : this.upgradeList.keySet()) {        if (!table.equals(\"properties\")) {          for (final String version : this.upgradeList.get(table)) {            runTableScripts(conn, table, version, this.dataSource.getDBType(), true);          }        }      }    } finally {      conn.close();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseSetup.java", "stars": "18", "class": {"name": "AzkabanDatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "runTableScripts", "params": ["Connection", "String", "String", "String", "boolean"], "throws": ["IOException", "SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void runTableScripts(final Connection conn, final String table, final String version,      final String dbType, final boolean update) throws IOException, SQLException {    String scriptName = \"\";    if (update) {      scriptName = \"update.\" + table + \".\" + version;      logger.info(\"Update table \" + table + \" to version \" + version);    } else {      scriptName = \"create.\" + table;      logger.info(\"Creating new table \" + table + \" version \" + version);    }    final String dbSpecificScript = scriptName + \".\" + dbType + \".sql\";    File script = new File(this.scriptPath, dbSpecificScript);    if (!script.exists()) {      final String dbScript = scriptName + \".sql\";      script = new File(this.scriptPath, dbScript);      if (!script.exists()) {        throw new IOException(\"Creation files do not exist for table \" + table);      }    }    BufferedInputStream buff = null;    try {      buff = new BufferedInputStream(new FileInputStream(script));      final String queryStr = IOUtils.toString(buff);      final String[] splitQuery = queryStr.split(\";\\\\s*\\n\");      final QueryRunner runner = new QueryRunner();      for (final String query : splitQuery) {        runner.update(conn, query);      }      // If it's properties, then we want to commit the table before we update      // it      if (table.equals(\"properties\")) {        conn.commit();      }      final String propertyName = table + \".version\";      if (!this.installedVersions.containsKey(table)) {        runner.update(conn, INSERT_DB_PROPERTY, propertyName,            DataSourceUtils.PropertyType.DB.getNumVal(), version,            System.currentTimeMillis());      } else {        runner.update(conn, UPDATE_DB_PROPERTY, version,            System.currentTimeMillis(), propertyName,            DataSourceUtils.PropertyType.DB.getNumVal());      }      conn.commit();    } finally {      IOUtils.closeQuietly(buff);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseSetup.java", "stars": "18", "class": {"name": "AzkabanDatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "    public Map<String, String> handle(final ResultSet rs) throws SQLException {      final Map<String, String> results = new HashMap<>();      while (rs.next()) {        final String key = rs.getString(1);        final String value = rs.getString(2);        results.put(key, value);      }      return results;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseSetup.java", "stars": "18", "class": {"name": "PropertiesHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "ItemStockDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "ItemStockDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "ItemStockDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "ItemStockDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "ItemStockDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "ItemStockDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "ItemStockDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "ItemStockDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "ItemStockDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "ItemStockDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNull() {            addCriterion(\"id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNotNull() {            addCriterion(\"id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdEqualTo(Integer value) {            addCriterion(\"id =\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotEqualTo(Integer value) {            addCriterion(\"id <>\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThan(Integer value) {            addCriterion(\"id >\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThanOrEqualTo(Integer value) {            addCriterion(\"id >=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThan(Integer value) {            addCriterion(\"id <\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThanOrEqualTo(Integer value) {            addCriterion(\"id <=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIn(List<Integer> values) {            addCriterion(\"id in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotIn(List<Integer> values) {            addCriterion(\"id not in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdBetween(Integer value1, Integer value2) {            addCriterion(\"id between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotBetween(Integer value1, Integer value2) {            addCriterion(\"id not between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockIsNull() {            addCriterion(\"stock is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockIsNotNull() {            addCriterion(\"stock is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockEqualTo(Integer value) {            addCriterion(\"stock =\", value, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockNotEqualTo(Integer value) {            addCriterion(\"stock <>\", value, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockGreaterThan(Integer value) {            addCriterion(\"stock >\", value, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockGreaterThanOrEqualTo(Integer value) {            addCriterion(\"stock >=\", value, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockLessThan(Integer value) {            addCriterion(\"stock <\", value, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockLessThanOrEqualTo(Integer value) {            addCriterion(\"stock <=\", value, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockIn(List<Integer> values) {            addCriterion(\"stock in\", values, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockNotIn(List<Integer> values) {            addCriterion(\"stock not in\", values, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockBetween(Integer value1, Integer value2) {            addCriterion(\"stock between\", value1, value2, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStockNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStockNotBetween(Integer value1, Integer value2) {            addCriterion(\"stock not between\", value1, value2, \"stock\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdIsNull() {            addCriterion(\"item_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdIsNotNull() {            addCriterion(\"item_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdEqualTo(Integer value) {            addCriterion(\"item_id =\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdNotEqualTo(Integer value) {            addCriterion(\"item_id <>\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdGreaterThan(Integer value) {            addCriterion(\"item_id >\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdGreaterThanOrEqualTo(Integer value) {            addCriterion(\"item_id >=\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdLessThan(Integer value) {            addCriterion(\"item_id <\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdLessThanOrEqualTo(Integer value) {            addCriterion(\"item_id <=\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdIn(List<Integer> values) {            addCriterion(\"item_id in\", values, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdNotIn(List<Integer> values) {            addCriterion(\"item_id not in\", values, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdBetween(Integer value1, Integer value2) {            addCriterion(\"item_id between\", value1, value2, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdNotBetween(Integer value1, Integer value2) {            addCriterion(\"item_id not between\", value1, value2, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemStockDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getGaugeValue", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getGaugeValue(final String name) {    // Assume that the gauge value can be converted to type long.    return (long) this.registry.getGauges().get(name).getValue();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/test/java/azkaban/metrics/MetricsTestUtility.java", "stars": "18", "class": {"name": "MetricsTestUtility", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubHeaders", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Map<String,String>", "snippet": "\tpublic static Map<String, String> getSubHeaders() {\t\tMap<String, String> map = getHeaders();\t\tmap.put(\"CpdailyStandAlone\", \"0\");\t\tmap.put(\"extension\", \"1\");\t\tmap.put(\"Cpdaily-Extension\",\t\t\t\t\"pHOOGjwfjlaj58u9gy81uhgiydfL42LmpjgBDFcbU+kEqAptH9XxFXqW5Ao8R9c xflkajgiofj9u58ghs788fshgo3My2oySUl8QPIbvbnD/CXOa+Blv01iFxgqgiiy 5clnHfdjlaj1eifd5h/gf+zI8EhyufCpcvfysmZiHyT8NWYNQuEy1nrK Ei2LtZtKxrx+37tNQ2tRHSEI5a+HXrm2Q6Y15+0BHHyg7EjIm1kymMTOcgAm imVlgyaeFHJ05Wd2\");\t\treturn map;\t}", "url": "https://raw.githubusercontent.com/meethigher/cpdaily-submit/master/Data.java", "stars": "2", "class": {"name": "Data", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHeaders", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Map<String,String>", "snippet": "\tpublic static Map<String, String> getHeaders() {\t\tMap<String, String> map = new LinkedHashMap<String, String>();\t\tmap.put(\"tenantId\", \"ccut\");\t\tmap.put(\"User-Agent\",\t\t\t\t\"Mozilla/5.0 (Linux; Android 10; MI 9 Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/33.0.0.0 Mobile Safari/537.36 okhttp/3.8.1\");\t\tmap.put(\"Content-Type\", \"application/json;charset=utf-8\");\t\tmap.put(\"Host\", \"ccut.campusphere.net\");\t\tmap.put(\"Connection\", \"Keep-Alive\");\t\tmap.put(\"Accept-Encoding\", \"gzip\");\t\tmap.put(\"Cookie\",\t\t\t\t\"acw_tc=76b20fef15888014645921542e22c988f6643e4fde483d65f1e96045a37fc1; MOD_AUTH_CAS=ST-iap:10146111491819107:ST:895u9820c5-01a0-4763-a33d-b0ca9c9458a1:20200506131817; CASTGC=iap-10146111491819107-TGT-87fafa55-83cf-46e2-b01b-c6c0109754a9; AUTHTGC=iap-10146111491819107-TGT-87fafa55-83cf-46e2-b01b-c6c0109754a9\");\t\treturn map;\t}", "url": "https://raw.githubusercontent.com/meethigher/cpdaily-submit/master/Data.java", "stars": "2", "class": {"name": "Data", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "put", "params": ["String", "URL"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void put(String uri, URL url) {        URL_LIST.put(uri, url);    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Container.java", "stars": "2", "class": {"name": "Container", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "contains", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean contains(String uri) {        return URL_LIST.containsKey(uri);    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Container.java", "stars": "2", "class": {"name": "Container", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "URL", "snippet": "    public static URL get(String uri) {        return URL_LIST.get(uri);    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Container.java", "stars": "2", "class": {"name": "Container", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": ["URL"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void update(URL url) {        if (contains(url.uri)) {            URL_LIST.put(url.uri, url);        }    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Container.java", "stars": "2", "class": {"name": "Container", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void delete(String uri){        URL url = URL_LIST.get(uri);        URL_LIST.remove(uri);    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Container.java", "stars": "2", "class": {"name": "Container", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "list", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "List<URL>", "snippet": "    public static List<URL> list(){        return new ArrayList<>(URL_LIST.values());    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Container.java", "stars": "2", "class": {"name": "Container", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t// x*x + 3*x - 4 = 0\t\tdouble a = 1.0;\t\tdouble b = 3.0;\t\tdouble c = -4.0;\t\t// \u6c42\u5e73\u65b9\u6839\u53ef\u7528 Math.sqrt():\t\t// double x = Math.sqrt(2)); // ==> 1.414\t\t// TODO:if\u5224\u5b9a\u6839\u6570\u91cf\u7136\u540e\u6c42\u89e3\t\tdouble d=b * b - 4 * a * c;\t\tif(d > 0) {\t\t\tdouble r1 = (-b + Math.sqrt(d)) / (2 * a);\t\t\tdouble r2 = (-b - Math.sqrt(d)) / (2 * a);\t\t\tSystem.out.println(r1 + \", \" + r2);\t\t\tSystem.out.println(r1 == 1 && r2 == -4 ? \"\u6d4b\u8bd5\u901a\u8fc7\" : \"\u6d4b\u8bd5\u5931\u8d25\");\t\t}\t\telse if(d == 0) {\t\t\tdouble r = (-b + Math.sqrt(d)) / (2 * a);\t\t\tSystem.out.println(r);\t\t}\t\telse {\t\t\tSystem.out.println(\"\u65e0\u89e3\");\t\t}\t\t}", "url": "https://raw.githubusercontent.com/IzzyPrime/JavaWorkspace/master/JavaPractice/part1/src/com/basic/javapractice/EquationOfFloat.java", "stars": "2", "class": {"name": "EquationOfFloat", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setting", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String setting(HttpServletRequest request){        List<OptionsDomain> optionsList = optionService.getOptions();        Map<String, String> options = new HashMap<>();        optionsList.forEach((option) -> {            options.put(option.getName(), option.getValue());        });        request.setAttribute(\"options\", options);        return \"admin/setting\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/SettingController.java", "stars": "2", "class": {"name": "SettingController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "saveSetting", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "APIResponse", "snippet": "    public APIResponse saveSetting(HttpServletRequest request) {        try {            Map<String, String[]> parameterMap = request.getParameterMap();            Map<String, String> querys = new HashMap<>();            parameterMap.forEach((key, value) -> {                querys.put(key, join(value));            });            optionService.saveOptions(querys);            WebConst.initConfig = querys;            logService.addLog(LogActions.SYS_SETTING.getAction(), GsonUtils.toJsonString(querys), request.getRemoteAddr(), this.getUid(request));            return APIResponse.success();        } catch (Exception e) {            String msg = \"\u4fdd\u5b58\u8bbe\u7f6e\u5931\u8d25\";            return APIResponse.fail(e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/SettingController.java", "stars": "2", "class": {"name": "SettingController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRegister", "params": ["Device"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onRegister(Device device) {\t\t// TODO \u540e\u7eed\u5904\u7406\uff0c\u53ea\u6709\u7b2c\u4e00\u6b21\u6ce8\u518c\u65f6\u8c03\u7528\u67e5\u8be2\u8bbe\u5907\u4fe1\u606f\uff0c\u5982\u9700\u66f4\u65b0\u8c03\u7528\u66f4\u65b0API\u63a5\u53e3\t\tcmder.deviceInfoQuery(device);\t\t\t\tcmder.catalogQuery(device);\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/auth/RegisterLogicHandler.java", "stars": "29", "class": {"name": "RegisterLogicHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(XxlJobAdminApplication.class, args);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/XxlJobAdminApplication.java", "stars": "1", "class": {"name": "XxlJobAdminApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "searchInsert", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int searchInsert(int[] nums, int target) {        if (target>nums[nums.length-1]) {            return nums.length;        }        int left=0;        int right=nums.length-1;        while (left < right) {            int mid = (left + right) / 2;            if (nums[mid] < target) {                left = mid + 1;            } else {                right = mid;            }        }        return left;    }", "url": "https://raw.githubusercontent.com/MisterBooo/LeetCodeAnimation/master/0035-search-insert-position/Code/2.java", "stars": "53778", "class": {"name": "Solution2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "calcularCostoFabricacion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float calcularCostoFabricacion(){        int contador = 0;        for(int i=0; i < getReceta().getListaingrediente().size();i++){            contador += getReceta().getListaingrediente().get(i).getPrecioUnidad();        }        contador += contador * (getPorcentajeComplejidad()/100);        return contador;    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/Negra.java", "stars": "2", "class": {"name": "Negra", "extends": "TipoCerveza", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Negra{}\"+super.toString();    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/Negra.java", "stars": "2", "class": {"name": "Negra", "extends": "TipoCerveza", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u83b7\u53d6\u4e00\u4e2aStream\u6d41        ArrayList<Integer> list = new ArrayList<>();        list.add(1);        list.add(2);        list.add(3);        list.add(4);        list.add(5);        list.add(6);        list.add(7);        Stream<Integer> stream = list.stream();        long count = stream.count();        System.out.println(count);//7    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/24.%E3%80%90Stream%E6%B5%81%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%91%E7%AC%94%E8%AE%B0/code/13_StreamAndMethodReference/src/com/itheima/demo02/Stream/Demo05Stream_count.java", "stars": "2", "class": {"name": "Demo05Stream_count", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\tthis.getLeft().checkType();\t\tthis.getRight().checkType();\t\tTypeCode[] typeCodes = {TypeCode.INTEGER, TypeCode.FLOAT, TypeCode.STRING, TypeCode.BOOLEAN, TypeCode.ENUM};\t\tgetLeft().getType().assertType(this, typeCodes);\t\tgetLeft().getType().assertType(this, getRight().getType());\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprEQ.java", "stars": "3", "class": {"name": "ExprEQ", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result;\t\tresult = \"(\" + getLeft().generateCode() \t\t\t\t+ \" == \" + getRight().generateCode() + \")\";\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprEQ.java", "stars": "3", "class": {"name": "ExprEQ", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "constEval", "params": ["Environment<ExprVALUE>"], "throws": ["EnvironmentException", "TypeException"], "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object constEval(Environment<ExprVALUE> environment) throws EnvironmentException, TypeException {\t\tObject o1 = getLeft().constEval(environment);\t\tObject o2 = getRight().constEval(environment);\t\tif ((o1 instanceof Integer) && (o2 instanceof Integer)) \t\t\treturn new Boolean((Integer)o1 == (Integer)o2);\t\telse if ((o1 instanceof Float) && (o2 instanceof Float)) \t\t\treturn new Boolean((Float)o1 == (Float)o2);\t\telse if ((o1 instanceof String) && (o2 instanceof String)) \t\t\treturn new Boolean(((String)o1).equals(o2));\t\telse if ((o1 instanceof Boolean) && (o2 instanceof Boolean)) \t\t\treturn new Boolean((Float)o1 == (Float)o2);\t\telse\t\t\tthrow new TypeException(\"Impossible de calculer la constante, erreur de type\", line, column);\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprEQ.java", "stars": "3", "class": {"name": "ExprEQ", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"(\" + this.getLeft() + \" == \" + this.getRight() + \")\";\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprEQ.java", "stars": "3", "class": {"name": "ExprEQ", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void init(Context context) {        super.init(context);        initView();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/PreViewGSYVideoPlayer.java", "stars": "2", "class": {"name": "PreViewGSYVideoPlayer", "extends": "NormalGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initView() {        mPreviewLayout = (RelativeLayout) findViewById(R.id.preview_layout);        mPreView = (ImageView) findViewById(R.id.preview_image);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/PreViewGSYVideoPlayer.java", "stars": "2", "class": {"name": "PreViewGSYVideoPlayer", "extends": "NormalGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLayoutId() {        return R.layout.video_layout_preview;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/PreViewGSYVideoPlayer.java", "stars": "2", "class": {"name": "PreViewGSYVideoPlayer", "extends": "NormalGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "prepareVideo", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void prepareVideo() {        super.prepareVideo();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/PreViewGSYVideoPlayer.java", "stars": "2", "class": {"name": "PreViewGSYVideoPlayer", "extends": "NormalGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onProgressChanged", "params": ["SeekBar", "int", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onProgressChanged(SeekBar seekBar, final int progress, boolean fromUser) {        super.onProgressChanged(seekBar, progress, fromUser);        if (fromUser && mOpenPreView) {            int width = seekBar.getWidth();            int time = progress * getDuration() / 100;            int offset = (int) (width - (getResources().getDimension(R.dimen.seek_bar_image) / 2)) / 100 * progress;            Debuger.printfError(\"***************** \" + progress);            Debuger.printfError(\"***************** \" + time);            showPreView(mOriginUrl, time);            RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) mPreviewLayout.getLayoutParams();            layoutParams.leftMargin = offset;            //\u8bbe\u7f6e\u5e27\u9884\u89c8\u56fe\u7684\u663e\u793a\u4f4d\u7f6e            mPreviewLayout.setLayoutParams(layoutParams);            if (mHadPlay && mOpenPreView) {                mPreProgress = progress;            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/PreViewGSYVideoPlayer.java", "stars": "2", "class": {"name": "PreViewGSYVideoPlayer", "extends": "NormalGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStartTrackingTouch", "params": ["SeekBar"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStartTrackingTouch(SeekBar seekBar) {        super.onStartTrackingTouch(seekBar);        if (mOpenPreView) {            mIsFromUser = true;            mPreviewLayout.setVisibility(VISIBLE);            mPreProgress = -2;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/PreViewGSYVideoPlayer.java", "stars": "2", "class": {"name": "PreViewGSYVideoPlayer", "extends": "NormalGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStopTrackingTouch", "params": ["SeekBar"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStopTrackingTouch(SeekBar seekBar) {        if (mOpenPreView) {            if (mPreProgress >= 0) {                seekBar.setProgress(mPreProgress);            }            super.onStopTrackingTouch(seekBar);            mIsFromUser = false;            mPreviewLayout.setVisibility(GONE);        } else {            super.onStopTrackingTouch(seekBar);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/PreViewGSYVideoPlayer.java", "stars": "2", "class": {"name": "PreViewGSYVideoPlayer", "extends": "NormalGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTextAndProgress", "params": ["int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setTextAndProgress(int secProgress) {        if (mIsFromUser) {            return;        }        super.setTextAndProgress(secProgress);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/PreViewGSYVideoPlayer.java", "stars": "2", "class": {"name": "PreViewGSYVideoPlayer", "extends": "NormalGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "startWindowFullscreen", "params": ["Context", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYBaseVideoPlayer", "snippet": "    public GSYBaseVideoPlayer startWindowFullscreen(Context context, boolean actionBar, boolean statusBar) {        GSYBaseVideoPlayer gsyBaseVideoPlayer = super.startWindowFullscreen(context, actionBar, statusBar);        PreViewGSYVideoPlayer customGSYVideoPlayer = (PreViewGSYVideoPlayer) gsyBaseVideoPlayer;        customGSYVideoPlayer.mOpenPreView = mOpenPreView;        return gsyBaseVideoPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/PreViewGSYVideoPlayer.java", "stars": "2", "class": {"name": "PreViewGSYVideoPlayer", "extends": "NormalGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPrepared", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPrepared() {        super.onPrepared();        startDownFrame(mOriginUrl);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/PreViewGSYVideoPlayer.java", "stars": "2", "class": {"name": "PreViewGSYVideoPlayer", "extends": "NormalGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "isOpenPreView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isOpenPreView() {        return mOpenPreView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/PreViewGSYVideoPlayer.java", "stars": "2", "class": {"name": "PreViewGSYVideoPlayer", "extends": "NormalGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOpenPreView", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOpenPreView(boolean localFile) {        this.mOpenPreView = localFile;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/PreViewGSYVideoPlayer.java", "stars": "2", "class": {"name": "PreViewGSYVideoPlayer", "extends": "NormalGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "showPreView", "params": ["String", "long"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void showPreView(String url, long time) {        int width = CommonUtil.dip2px(getContext(), 150);        int height = CommonUtil.dip2px(getContext(), 100);        Glide.with(getContext().getApplicationContext())                .setDefaultRequestOptions(                        new RequestOptions()                                //\u8fd9\u91cc\u9650\u5236\u4e86\u53ea\u4ece\u7f13\u5b58\u8bfb\u53d6                                .onlyRetrieveFromCache(true)                                .frame(1000 * time)                                .override(width, height)                                .dontAnimate()                                .centerCrop())                .load(url)                .into(mPreView);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/PreViewGSYVideoPlayer.java", "stars": "2", "class": {"name": "PreViewGSYVideoPlayer", "extends": "NormalGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "startDownFrame", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startDownFrame(String url) {        for (int i = 1; i <= 100; i++) {            int time = i * getDuration() / 100;            int width = CommonUtil.dip2px(getContext(), 150);            int height = CommonUtil.dip2px(getContext(), 100);            Glide.with(getContext().getApplicationContext())                    .setDefaultRequestOptions(                            new RequestOptions()                                    .frame(1000 * time)                                    .override(width, height)                                    .centerCrop())                    .load(url).preload(width, height);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/PreViewGSYVideoPlayer.java", "stars": "2", "class": {"name": "PreViewGSYVideoPlayer", "extends": "NormalGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "createSyncAdapter", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "AbstractSyncAdapter", "snippet": "    protected abstract AbstractSyncAdapter createSyncAdapter();    /**     * Returns the notification title.     *     * @see Notification#setLatestEventInfo(Context, CharSequence, CharSequence,     *      PendingIntent)     */    protected abstract CharSequence createNotificationTitle();    /**     * Returns the notification text.     *     * @see Notification#setLatestEventInfo(Context, CharSequence, CharSequence,     *      PendingIntent)     */    protected abstract CharSequence createNotificationText();    /**     * Returns the notification {@link Intent}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "AbstractSyncService", "extends": "IntentService", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createNotificationTitle", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "CharSequence", "snippet": "    protected abstract CharSequence createNotificationTitle();    /**     * Returns the notification text.     *     * @see Notification#setLatestEventInfo(Context, CharSequence, CharSequence,     *      PendingIntent)     */    protected abstract CharSequence createNotificationText();    /**     * Returns the notification {@link Intent}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "AbstractSyncService", "extends": "IntentService", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createNotificationText", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "CharSequence", "snippet": "    protected abstract CharSequence createNotificationText();    /**     * Returns the notification {@link Intent}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "AbstractSyncService", "extends": "IntentService", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createNotificationIntent", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "PendingIntent", "snippet": "    protected PendingIntent createNotificationIntent() {        Context context = this;        int requestCode = 0;        Intent intent = new Intent();        int flags = 0;        return PendingIntent.getBroadcast(context, requestCode, intent, flags);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "AbstractSyncService", "extends": "IntentService", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isSyncEnabled", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isSyncEnabled() {        // SystemProperties is not accessible to third-party applications,        // so assume that sync is always enabled.        return true;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "AbstractSyncService", "extends": "IntentService", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onHandleIntent", "params": ["Intent"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onHandleIntent(Intent intent) {        String action = intent.getAction();        if (ACTION_REQUEST_SYNC.equals(action)) {            String accountName = intent.getStringExtra(EXTRA_ACCOUNT_NAME);            String accountType = intent.getStringExtra(EXTRA_ACCOUNT_TYPE);            String authority = intent.getStringExtra(EXTRA_AUTHORITY);            boolean supportsUploading = intent.getBooleanExtra(EXTRA_SUPPORTS_UPLOADING, false);            Bundle extras = intent.getBundleExtra(EXTRA_BUNDLE);            performSync(accountName, accountType, authority, supportsUploading, extras);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "AbstractSyncService", "extends": "IntentService", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "performSync", "params": ["String", "String", "String", "boolean", "Bundle"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void performSync(String accountName, String accountType, String authority,            boolean supportsUploading, Bundle extras) {        if (accountName == null || accountType == null) {            Log.e(mTag, \"not syncing because account was not specified\");            return;        }        if (authority == null) {            Log.e(mTag, \"not syncing because authority was not specified\");            return;        }        if (!isSyncEnabled()) {            Log.v(mTag, \"not syncing because sync is disabled\");            return;        }        Object service = getSystemService(CONNECTIVITY_SERVICE);        ConnectivityManager cm = (ConnectivityManager) service;        boolean backgroundDataUsageAllowed = cm.getBackgroundDataSetting();        if (extras == null) {            extras = new Bundle();        }        boolean uploadOnly = extras.getBoolean(ContentResolver.SYNC_EXTRAS_UPLOAD, false);        boolean manualSync = extras.getBoolean(ContentResolver.SYNC_EXTRAS_FORCE, false);        Context context = this;        ContentSyncer cs = ContentSyncer.get(context);        Account account = new Account(accountName, accountType);        int isSyncable = cs.getIsSyncable(account, authority);        if (isSyncable == 0) {            Log.v(mTag, \"not syncing because account is not syncable for authority\");            return;        }        if (!supportsUploading && uploadOnly) {            Log.v(mTag, \"not syncing because adapter does not support uploading\");            return;        }        boolean syncAutomatically = cs.getSyncAutomatically(account, authority);        boolean syncAllowed = manualSync || (backgroundDataUsageAllowed && syncAutomatically);        Bundle extrasCopy = extras;        if (isSyncable < 0) {            extrasCopy = new Bundle(extras);            // ContentResolver.SYNC_EXTRAS_INITIALIZE            // is not defined until API level 5            final String SYNC_EXTRAS_INITIALIZE = \"initialize\";            extrasCopy.putBoolean(SYNC_EXTRAS_INITIALIZE, true);        } else {            if (!syncAllowed) {                if (Log.isLoggable(mTag, Log.DEBUG)) {                    Log.v(mTag, \"sync of \" + account + \", \" + authority                            + \" is not allowed, dropping request\");                } else {                    Log.v(mTag, \"sync of account is not allowed, dropping request\");                }                return;            }        }        // Prevent the system from killing the process while a notification is        // shown, otherwise the notification will remain visible if the service        // is killed in the middle of a sync operation.        startForegroundCompat(mNotificationId, createNotification(authority));        try {            AbstractSyncAdapter syncAdapter = createSyncAdapter();            syncAdapter.onPerformSync(account, extras, authority);        } finally {            stopForegroundCompat(mNotificationId);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "AbstractSyncService", "extends": "IntentService", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createNotification", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Notification", "snippet": "    private Notification createNotification(String authority) {        int icon = android.R.drawable.stat_notify_sync;        String tickerText = null;        long when = 0;        Notification notification = new Notification(icon, tickerText, when);        Context context = this;        CharSequence contentTitle = createNotificationTitle();        CharSequence contentText = createNotificationText();        PendingIntent contentIntent = createNotificationIntent();        notification.when = System.currentTimeMillis();        notification.flags |= Notification.FLAG_ONGOING_EVENT;        notification.setLatestEventInfo(context, contentTitle, contentText, contentIntent);        return notification;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "AbstractSyncService", "extends": "IntentService", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        stopForegroundCompat(mNotificationId);        super.onDestroy();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "AbstractSyncService", "extends": "IntentService", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onBind", "params": ["Intent"], "throws": null, "modifiers": ["public"], "return_type": "IBinder", "snippet": "    public IBinder onBind(Intent intent) {        if (SDK >= ECLAIR) {            Context context = this;            AbstractSyncAdapter adapter = createSyncAdapter();            return new Adapter(context, adapter).getSyncAdapterBinder();        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "AbstractSyncService", "extends": "IntentService", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "convertAccount", "params": ["android"], "throws": null, "modifiers": ["private", "static"], "return_type": "Account", "snippet": "    private static Account convertAccount(android.accounts.Account account) {        return new Account(account.name, account.type);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "Adapter", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSyncAdapterBinder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IBinder", "snippet": "    public IBinder getSyncAdapterBinder() {        return new AbstractThreadedSyncAdapter(mContext, AUTO_INITIALIZE) {            @Override            public void onPerformSync(android.accounts.Account account, Bundle extras,                    String authority, ContentProviderClient provider, SyncResult syncResult) {                mSyncAdapter.onPerformSync(convertAccount(account), extras, authority);            }        }.getSyncAdapterBinder();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "Adapter", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate() {        super.onCreate();        HandlerThread thread = new HandlerThread(\"IntentService[\" + mName + \"]\", mPriority);        thread.start();        mServiceLooper = thread.getLooper();        mServiceHandler = new ServiceHandler(mServiceLooper);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "IntentService", "extends": "CompatService", "implements": null, "modifiers": ["abstract"]}}, {"method_name": "onStart", "params": ["Intent", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStart(Intent intent, int startId) {        super.onStart(intent, startId);        Message msg = mServiceHandler.obtainMessage();        msg.arg1 = startId;        msg.obj = intent;        mServiceHandler.sendMessage(msg);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "IntentService", "extends": "CompatService", "implements": null, "modifiers": ["abstract"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        mServiceLooper.quit();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "IntentService", "extends": "CompatService", "implements": null, "modifiers": ["abstract"]}}, {"method_name": "onBind", "params": ["Intent"], "throws": null, "modifiers": ["public"], "return_type": "IBinder", "snippet": "    public IBinder onBind(Intent intent) {        return null;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "IntentService", "extends": "CompatService", "implements": null, "modifiers": ["abstract"]}}, {"method_name": "onHandleIntent", "params": ["Intent"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void onHandleIntent(Intent intent);}// http://developer.android.com/reference/android/app/Service.html#startForeground(int, android.app.Notification)abstract class CompatService extends Service {", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "IntentService", "extends": "CompatService", "implements": null, "modifiers": ["abstract"]}}, {"method_name": "handleMessage", "params": ["Message"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void handleMessage(Message msg) {            onHandleIntent((Intent) msg.obj);            stopSelf(msg.arg1);        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "ServiceHandler", "extends": "Handler", "implements": null, "modifiers": ["private", "final"]}}, {"method_name": "onCreate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate() {        mNotificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);        mStartForeground = getMethod(\"startForeground\", int.class, Notification.class);        mStopForeground = getMethod(\"stopForeground\", boolean.class);        mSetForeground = getMethod(\"setForeground\", boolean.class);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "CompatService", "extends": "Service", "implements": null, "modifiers": ["abstract"]}}, {"method_name": "startForegroundCompat", "params": ["int", "Notification"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startForegroundCompat(int id, Notification notification) {        if (mStartForeground != null) {            invokeMethod(mStartForeground, Integer.valueOf(id), notification);        } else {            invokeMethod(mSetForeground, Boolean.TRUE);            mNotificationManager.notify(id, notification);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "CompatService", "extends": "Service", "implements": null, "modifiers": ["abstract"]}}, {"method_name": "stopForegroundCompat", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stopForegroundCompat(int id) {        if (mStopForeground != null) {            Boolean removeNotification = Boolean.TRUE;            invokeMethod(mStopForeground, removeNotification);        } else {            mNotificationManager.cancel(id);            invokeMethod(mSetForeground, Boolean.FALSE);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "CompatService", "extends": "Service", "implements": null, "modifiers": ["abstract"]}}, {"method_name": "getMethod", "params": ["String", "Class<?>"], "throws": null, "modifiers": ["private"], "return_type": "Method", "snippet": "    private Method getMethod(String name, Class<?>... parameterTypes) {        try {            return Service.class.getMethod(name, parameterTypes);        } catch (SecurityException e) {            return null;        } catch (NoSuchMethodException e) {            return null;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "CompatService", "extends": "Service", "implements": null, "modifiers": ["abstract"]}}, {"method_name": "invokeMethod", "params": ["Method", "Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void invokeMethod(Method method, Object... args) {        try {            Object receiver = this;            method.invoke(receiver, args);        } catch (InvocationTargetException e) {            throw (Error) new AssertionError().initCause(e);        } catch (IllegalAccessException e) {            throw (Error) new AssertionError().initCause(e);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AbstractSyncService.java", "stars": "74", "class": {"name": "CompatService", "extends": "Service", "implements": null, "modifiers": ["abstract"]}}, {"method_name": "loadUserByUsername", "params": ["String"], "throws": ["UsernameNotFoundException"], "modifiers": ["public"], "return_type": "UserDetails", "snippet": "    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {        User user = userRepository.findUserByName(username);        if(user == null){            return null;        }        List<Role> roleList = Optional.ofNullable(roleRepository.findRolesByUserId(user.getId()))                .orElseThrow(() -> new DisabledException(ApiResponseEnum.NO_PRIORITY_ERROR.getMessage()));        Set<GrantedAuthority> authorities = new HashSet<>();        roleList.forEach(role -> authorities.add(new SimpleGrantedAuthority(\"ROLE_\" + role.getName())));        user.setAuthorities(authorities);        return user;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/security/RentHouseUserDetailService.java", "stars": "3", "class": {"name": "RentHouseUserDetailService", "extends": null, "implements": ["UserDetailsService"], "modifiers": ["public"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<Project>", "snippet": "    public List<Project> handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return Collections.emptyList();      }      final ArrayList<Project> projects = new ArrayList<>();      do {        final int id = rs.getInt(1);        final String name = rs.getString(2);        final boolean active = rs.getBoolean(3);        final long modifiedTime = rs.getLong(4);        final long createTime = rs.getLong(5);        final int version = rs.getInt(6);        final String lastModifiedBy = rs.getString(7);        final String description = rs.getString(8);        final String createUser = rs.getString(9);        final int encodingType = rs.getInt(10);        final byte[] data = rs.getBytes(11);        final Project project;        if (data != null) {          final EncodingType encType = EncodingType.fromInteger(encodingType);          final Object blobObj;          try {            // Convoluted way to inflate strings. Should find common package or            // helper function.            if (encType == EncodingType.GZIP) {              // Decompress the sucker.              final String jsonString = GZIPUtils.unGzipString(data, \"UTF-8\");              blobObj = JSONUtils.parseJSONFromString(jsonString);            } else {              final String jsonString = new String(data, \"UTF-8\");              blobObj = JSONUtils.parseJSONFromString(jsonString);            }            project = Project.projectFromObject(blobObj);          } catch (final IOException e) {            throw new SQLException(\"Failed to get project.\", e);          }        } else {          project = new Project(id, name);        }        // update the fields as they may have changed        project.setActive(active);        project.setLastModifiedTimestamp(modifiedTime);        project.setCreateTimestamp(createTime);        project.setVersion(version);        project.setLastModifiedUser(lastModifiedBy);        project.setDescription(description);        project.setCreateUser(createUser);        projects.add(project);      } while (rs.next());      return projects;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectHandlerSet.java", "stars": "18", "class": {"name": "ProjectResultHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<Triple>", "snippet": "    public List<Triple<String, Boolean, Permission>> handle(final ResultSet rs)        throws SQLException {      if (!rs.next()) {        return Collections.emptyList();      }      final List<Triple<String, Boolean, Permission>> permissions = new ArrayList<>();      do {        final String username = rs.getString(3);        final int permissionFlag = rs.getInt(4);        final boolean val = rs.getBoolean(5);        final Permission perm = new Permission(permissionFlag);        permissions.add(new Triple<>(username, val, perm));      } while (rs.next());      return permissions;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectHandlerSet.java", "stars": "18", "class": {"name": "ProjectPermissionsResultHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<Flow>", "snippet": "    public List<Flow> handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return Collections.emptyList();      }      final ArrayList<Flow> flows = new ArrayList<>();      do {        final String flowId = rs.getString(3);        final int encodingType = rs.getInt(5);        final byte[] dataBytes = rs.getBytes(6);        if (dataBytes == null) {          continue;        }        final EncodingType encType = EncodingType.fromInteger(encodingType);        Object flowObj = null;        try {          // Convoluted way to inflate strings. Should find common package or          // helper function.          if (encType == EncodingType.GZIP) {            // Decompress the sucker.            final String jsonString = GZIPUtils.unGzipString(dataBytes, \"UTF-8\");            flowObj = JSONUtils.parseJSONFromString(jsonString);          } else {            final String jsonString = new String(dataBytes, \"UTF-8\");            flowObj = JSONUtils.parseJSONFromString(jsonString);          }          final Flow flow = Flow.flowFromObject(flowObj);          flows.add(flow);        } catch (final IOException e) {          throw new SQLException(\"Error retrieving flow data \" + flowId, e);        }      } while (rs.next());      return flows;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectHandlerSet.java", "stars": "18", "class": {"name": "ProjectFlowsResultHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<Pair>", "snippet": "    public List<Pair<String, Props>> handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return Collections.emptyList();      }      final List<Pair<String, Props>> properties = new ArrayList<>();      do {        final String name = rs.getString(3);        final int eventType = rs.getInt(5);        final byte[] dataBytes = rs.getBytes(6);        final EncodingType encType = EncodingType.fromInteger(eventType);        String propertyString = null;        try {          if (encType == EncodingType.GZIP) {            // Decompress the sucker.            propertyString = GZIPUtils.unGzipString(dataBytes, \"UTF-8\");          } else {            propertyString = new String(dataBytes, \"UTF-8\");          }          final Props props = PropsUtils.fromJSONString(propertyString);          props.setSource(name);          properties.add(new Pair<>(name, props));        } catch (final IOException e) {          throw new SQLException(e);        }      } while (rs.next());      return properties;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectHandlerSet.java", "stars": "18", "class": {"name": "ProjectPropertiesResultsHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<ProjectLogEvent>", "snippet": "    public List<ProjectLogEvent> handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return Collections.emptyList();      }      final ArrayList<ProjectLogEvent> events = new ArrayList<>();      do {        final int projectId = rs.getInt(1);        final int eventType = rs.getInt(2);        final long eventTime = rs.getLong(3);        final String username = rs.getString(4);        final String message = rs.getString(5);        final ProjectLogEvent event =            new ProjectLogEvent(projectId, ProjectLogEvent.EventType.fromInteger(eventType),                eventTime, username,                message);        events.add(event);      } while (rs.next());      return events;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectHandlerSet.java", "stars": "18", "class": {"name": "ProjectLogsResultHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<byte>", "snippet": "    public List<byte[]> handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return Collections.emptyList();      }      final ArrayList<byte[]> data = new ArrayList<>();      do {        final byte[] bytes = rs.getBytes(5);        data.add(bytes);      } while (rs.next());      return data;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectHandlerSet.java", "stars": "18", "class": {"name": "ProjectFileChunkResultHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<ProjectFileHandler>", "snippet": "    public List<ProjectFileHandler> handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return null;      }      final List<ProjectFileHandler> handlers = new ArrayList<>();      do {        final int projectId = rs.getInt(1);        final int version = rs.getInt(2);        final long uploadTime = rs.getLong(3);        final String uploader = rs.getString(4);        final String fileType = rs.getString(5);        final String fileName = rs.getString(6);        final byte[] md5 = rs.getBytes(7);        final int numChunks = rs.getInt(8);        final String resourceId = rs.getString(9);        final ProjectFileHandler handler =            new ProjectFileHandler(projectId, version, uploadTime, uploader, fileType, fileName,                numChunks, md5,                resourceId);        handlers.add(handler);      } while (rs.next());      return handlers;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectHandlerSet.java", "stars": "18", "class": {"name": "ProjectVersionResultHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<Flow>", "snippet": "    public List<Flow> handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return null;      }      final List<Flow> handlers = new ArrayList<>();      do {        final int execId = rs.getInt(1);        final String flowId = rs.getString(2);        final Flow handler = new Flow(flowId);        handlers.add(handler);      } while (rs.next());      return handlers;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectHandlerSet.java", "stars": "18", "class": {"name": "ProjectRunningFlowHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return 0;      }      return rs.getInt(1);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectHandlerSet.java", "stars": "18", "class": {"name": "IntHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<byte>", "snippet": "    public List<byte[]> handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return Collections.emptyList();      }      final List<byte[]> data = new ArrayList<>();      do {        final byte[] bytes = rs.getBytes(1);        data.add(bytes);      } while (rs.next());      return data;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectHandlerSet.java", "stars": "18", "class": {"name": "FlowFileResultHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<ProjectPermission>", "snippet": "    public List<ProjectPermission> handle(final ResultSet rs)        throws SQLException {      if (!rs.next()) {        return Collections.emptyList();      }      final List<ProjectPermission> projectPermissionList = new ArrayList<>();      do {        final int projectId = rs.getInt(1);        final String username = rs.getString(3);        final int permissionFlag = rs.getInt(4);        final boolean isGroup = rs.getBoolean(5);        final String group = rs.getString(6);        final Permission perm = new Permission(permissionFlag);        ProjectPermission projectPermission = new ProjectPermission();        projectPermission.setProjectId(projectId);        projectPermission.setUsername(username);        projectPermission.setPermission(perm);        projectPermission.setIsGroup(isGroup);        projectPermission.setProjectGroup(group);        projectPermissionList.add(projectPermission);      } while (rs.next());      return projectPermissionList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectHandlerSet.java", "stars": "18", "class": {"name": "ProjectAllPermissionsResultHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, new BigDecimal(1), null);    verify(ps).setBigDecimal(1, new BigDecimal(1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BigDecimalTypeHandlerTest.java", "stars": "15", "class": {"name": "BigDecimalTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getBigDecimal(\"column\")).thenReturn(new BigDecimal(1));    assertEquals(new BigDecimal(1), TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BigDecimalTypeHandlerTest.java", "stars": "15", "class": {"name": "BigDecimalTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    // Unnecessary  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BigDecimalTypeHandlerTest.java", "stars": "15", "class": {"name": "BigDecimalTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getBigDecimal(1)).thenReturn(new BigDecimal(1));    assertEquals(new BigDecimal(1), TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BigDecimalTypeHandlerTest.java", "stars": "15", "class": {"name": "BigDecimalTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    // Unnecessary  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BigDecimalTypeHandlerTest.java", "stars": "15", "class": {"name": "BigDecimalTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getBigDecimal(1)).thenReturn(new BigDecimal(1));    assertEquals(new BigDecimal(1), TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BigDecimalTypeHandlerTest.java", "stars": "15", "class": {"name": "BigDecimalTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    // Unnecessary  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BigDecimalTypeHandlerTest.java", "stars": "15", "class": {"name": "BigDecimalTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "getField1", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "  public Long getField1() {    return field1;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/overwritingproperties/Foo.java", "stars": "15", "class": {"name": "Foo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setField1", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setField1(Long field1) {    this.field1 = field1;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/overwritingproperties/Foo.java", "stars": "15", "class": {"name": "Foo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getField2", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Bar", "snippet": "  public Bar getField2() {    return field2;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/overwritingproperties/Foo.java", "stars": "15", "class": {"name": "Foo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setField2", "params": ["Bar"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setField2(Bar field2) {    this.field2 = field2;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/overwritingproperties/Foo.java", "stars": "15", "class": {"name": "Foo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getField3", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getField3() {    return field3;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/overwritingproperties/Foo.java", "stars": "15", "class": {"name": "Foo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setField3", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setField3(Integer field3) {    this.field3 = field3;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/overwritingproperties/Foo.java", "stars": "15", "class": {"name": "Foo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getField4", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getField4() {    return field4;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/overwritingproperties/Foo.java", "stars": "15", "class": {"name": "Foo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setField4", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setField4(Integer field4) {    this.field4 = field4;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/overwritingproperties/Foo.java", "stars": "15", "class": {"name": "Foo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "execute", "params": ["LibraryData"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute(LibraryData data) {        // nothing to do here    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/ExitCmd.java", "stars": "6", "class": {"name": "ExitCmd", "extends": "LibraryCommand", "implements": null, "modifiers": ["public"]}}, {"method_name": "mappedStatementWithOptions", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void mappedStatementWithOptions() throws Exception {    // System.setProperty(XPathParser.KEY_USE_XSD, \"true\");    Configuration configuration = new Configuration();    String resource = \"org/apache/ibatis/builder/xsd/AuthorMapper.xml\";    try (InputStream inputStream = Resources.getResourceAsStream(resource)) {      XMLMapperBuilder builder = new XMLMapperBuilder(inputStream, configuration, resource, configuration.getSqlFragments());      builder.parse();      MappedStatement mappedStatement = configuration.getMappedStatement(\"selectWithOptions\");      Assertions.assertEquals(Integer.valueOf(200), mappedStatement.getFetchSize());      Assertions.assertEquals(Integer.valueOf(10), mappedStatement.getTimeout());      Assertions.assertEquals(StatementType.PREPARED, mappedStatement.getStatementType());      Assertions.assertEquals(ResultSetType.SCROLL_SENSITIVE, mappedStatement.getResultSetType());      Assertions.assertFalse(mappedStatement.isFlushCacheRequired());      Assertions.assertFalse(mappedStatement.isUseCache());    } finally {      // System.clearProperty(XPathParser.KEY_USE_XSD);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/xsd/XmlMapperBuilderTest.java", "stars": "15", "class": {"name": "XmlMapperBuilderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "jumperPB7andPB6", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void jumperPB7andPB6() {        setPortB(6, inputPortB(7));    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100R6522.java", "stars": "4", "class": {"name": "JR100R6522", "extends": "R6522", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "storeORB_option", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void storeORB_option() {        JR100Display d = (JR100Display)computer.getHardware().getDisplay();        if ((inputPortB() & 0x20) == 0x20) {            d.setCurrentFont(JR100Display.FONT_USER_DEFINED);        }        else {            d.setCurrentFont(JR100Display.FONT_NORMAL);        }        jumperPB7andPB6();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100R6522.java", "stars": "4", "class": {"name": "JR100R6522", "extends": "R6522", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "storeIORA_option", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void storeIORA_option() {        int[] m = ((JR100Keyboard)computer.getHardware().getKeyboard()).getKeyMatrix();        byte value = inputPortB();        value &= 0xe0;        value |= (~m[ORA & 0x0f]) & 0x1f;        setPortB(value);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100R6522.java", "stars": "4", "class": {"name": "JR100R6522", "extends": "R6522", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "storeT1CH_option", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void storeT1CH_option() {        AbstractSoundProcessor sp = computer.getHardware().getSoundProcessor();        if ((ACR & 0xc0) == 0xc0) {            double frequency = (double)(894886.25 / (timer1 + 2) / 2);            if (frequency == prevFrequency) {                sp.setLineOn();                return ;            }            prevFrequency = frequency;            sp.setFrequency(                    currentClock * 1000000000 / JR100.getPropertyOfCpuClockFrequency() + computer.getBaseTime(),                    frequency);            sp.setLineOn();        }        else {            sp.setLineOff();        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100R6522.java", "stars": "4", "class": {"name": "JR100R6522", "extends": "R6522", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "timer1TimeoutMode0_option", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void timer1TimeoutMode0_option() {        computer.getHardware().getSoundProcessor().setLineOff();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100R6522.java", "stars": "4", "class": {"name": "JR100R6522", "extends": "R6522", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "timer1TimeoutMode2_option", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void timer1TimeoutMode2_option() {        jumperPB7andPB6();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100R6522.java", "stars": "4", "class": {"name": "JR100R6522", "extends": "R6522", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "timer1TimeoutMode3_option", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void timer1TimeoutMode3_option() {        jumperPB7andPB6();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100R6522.java", "stars": "4", "class": {"name": "JR100R6522", "extends": "R6522", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getCount ()\t{\t\treturn n_getCount ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_getCount", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getCount ();\tpublic void destroyItem (android.view.ViewGroup p0, int p1, java.lang.Object p2)\t{\t\tn_destroyItem (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "destroyItem", "params": ["android", "int", "java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void destroyItem (android.view.ViewGroup p0, int p1, java.lang.Object p2)\t{\t\tn_destroyItem (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_destroyItem", "params": ["android", "int", "java"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_destroyItem (android.view.ViewGroup p0, int p1, java.lang.Object p2);\tpublic int getItemPosition (java.lang.Object p0)\t{\t\treturn n_getItemPosition (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "getItemPosition", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getItemPosition (java.lang.Object p0)\t{\t\treturn n_getItemPosition (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_getItemPosition", "params": ["java"], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getItemPosition (java.lang.Object p0);\tpublic java.lang.Object instantiateItem (android.view.ViewGroup p0, int p1)\t{\t\treturn n_instantiateItem (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "instantiateItem", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "java", "snippet": "\tpublic java.lang.Object instantiateItem (android.view.ViewGroup p0, int p1)\t{\t\treturn n_instantiateItem (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_instantiateItem", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "java", "snippet": "\tprivate native java.lang.Object n_instantiateItem (android.view.ViewGroup p0, int p1);\tpublic boolean isViewFromObject (android.view.View p0, java.lang.Object p1)\t{\t\treturn n_isViewFromObject (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "isViewFromObject", "params": ["android", "java"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isViewFromObject (android.view.View p0, java.lang.Object p1)\t{\t\treturn n_isViewFromObject (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_isViewFromObject", "params": ["android", "java"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_isViewFromObject (android.view.View p0, java.lang.Object p1);\tpublic void onPageScrollStateChanged (int p0)\t{\t\tn_onPageScrollStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onPageScrollStateChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPageScrollStateChanged (int p0)\t{\t\tn_onPageScrollStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onPageScrollStateChanged", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onPageScrollStateChanged (int p0);\tpublic void onPageScrolled (int p0, float p1, int p2)\t{\t\tn_onPageScrolled (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onPageScrolled", "params": ["int", "float", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPageScrolled (int p0, float p1, int p2)\t{\t\tn_onPageScrolled (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onPageScrolled", "params": ["int", "float", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onPageScrolled (int p0, float p1, int p2);\tpublic void onPageSelected (int p0)\t{\t\tn_onPageSelected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onPageSelected", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPageSelected (int p0)\t{\t\tn_onPageSelected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onPageSelected", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onPageSelected (int p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CarouselPageAdapter.java", "stars": "2", "class": {"name": "CarouselPageAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "visit", "params": ["Node", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void visit(Node node, int indent) {        String i = \"\";        for (int j = 0; j < indent; j++) {            i += \"  \";        }        System.out.println(i + node.toAstString(true));        node.getChildIterator().forEachRemaining(n -> this.visit(n, indent + 1));    }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/test/java/org/bsplines/languagetool_languageserver/markdown/PrintAstVisitor.java", "stars": "3", "class": {"name": "PrintAstVisitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getEntityName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEntityName() {        return entityName;    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/errors/BadRequestAlertException.java", "stars": "2", "class": {"name": "BadRequestAlertException", "extends": "AbstractThrowableProblem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getErrorKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getErrorKey() {        return errorKey;    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/errors/BadRequestAlertException.java", "stars": "2", "class": {"name": "BadRequestAlertException", "extends": "AbstractThrowableProblem", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAlertParameters", "params": ["String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "Map<String,Object>", "snippet": "    private static Map<String, Object> getAlertParameters(String entityName, String errorKey) {        Map<String, Object> parameters = new HashMap<>();        parameters.put(\"message\", \"error.\" + errorKey);        parameters.put(\"params\", entityName);        return parameters;    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/errors/BadRequestAlertException.java", "stars": "2", "class": {"name": "BadRequestAlertException", "extends": "AbstractThrowableProblem", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Object", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Object parameter, JdbcType jdbcType)      throws SQLException {    TypeHandler handler = resolveTypeHandler(parameter, jdbcType);    handler.setParameter(ps, i, parameter, jdbcType);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/UnknownTypeHandler.java", "stars": "15", "class": {"name": "UnknownTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getNullableResult(ResultSet rs, String columnName)      throws SQLException {    TypeHandler<?> handler = resolveTypeHandler(rs, columnName);    return handler.getResult(rs, columnName);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/UnknownTypeHandler.java", "stars": "15", "class": {"name": "UnknownTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    TypeHandler<?> handler = resolveTypeHandler(rs.getMetaData(), columnIndex);    if (handler == null || handler instanceof UnknownTypeHandler) {      handler = OBJECT_TYPE_HANDLER;    }    return handler.getResult(rs, columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/UnknownTypeHandler.java", "stars": "15", "class": {"name": "UnknownTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    return cs.getObject(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/UnknownTypeHandler.java", "stars": "15", "class": {"name": "UnknownTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveTypeHandler", "params": ["Object", "JdbcType"], "throws": null, "modifiers": ["private"], "return_type": "TypeHandler<?>", "snippet": "  private TypeHandler<?> resolveTypeHandler(Object parameter, JdbcType jdbcType) {    TypeHandler<?> handler;    if (parameter == null) {      handler = OBJECT_TYPE_HANDLER;    } else {      handler = typeHandlerRegistrySupplier.get().getTypeHandler(parameter.getClass(), jdbcType);      // check if handler is null (issue #270)      if (handler == null || handler instanceof UnknownTypeHandler) {        handler = OBJECT_TYPE_HANDLER;      }    }    return handler;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/UnknownTypeHandler.java", "stars": "15", "class": {"name": "UnknownTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveTypeHandler", "params": ["ResultSet", "String"], "throws": null, "modifiers": ["private"], "return_type": "TypeHandler<?>", "snippet": "  private TypeHandler<?> resolveTypeHandler(ResultSet rs, String column) {    try {      Map<String,Integer> columnIndexLookup;      columnIndexLookup = new HashMap<>();      ResultSetMetaData rsmd = rs.getMetaData();      int count = rsmd.getColumnCount();      boolean useColumnLabel = config.isUseColumnLabel();      for (int i = 1; i <= count; i++) {        String name = useColumnLabel ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i);        columnIndexLookup.put(name,i);      }      Integer columnIndex = columnIndexLookup.get(column);      TypeHandler<?> handler = null;      if (columnIndex != null) {        handler = resolveTypeHandler(rsmd, columnIndex);      }      if (handler == null || handler instanceof UnknownTypeHandler) {        handler = OBJECT_TYPE_HANDLER;      }      return handler;    } catch (SQLException e) {      throw new TypeException(\"Error determining JDBC type for column \" + column + \".  Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/UnknownTypeHandler.java", "stars": "15", "class": {"name": "UnknownTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveTypeHandler", "params": ["ResultSetMetaData", "Integer"], "throws": null, "modifiers": ["private"], "return_type": "TypeHandler<?>", "snippet": "  private TypeHandler<?> resolveTypeHandler(ResultSetMetaData rsmd, Integer columnIndex) {    TypeHandler<?> handler = null;    JdbcType jdbcType = safeGetJdbcTypeForColumn(rsmd, columnIndex);    Class<?> javaType = safeGetClassForColumn(rsmd, columnIndex);    if (javaType != null && jdbcType != null) {      handler = typeHandlerRegistrySupplier.get().getTypeHandler(javaType, jdbcType);    } else if (javaType != null) {      handler = typeHandlerRegistrySupplier.get().getTypeHandler(javaType);    } else if (jdbcType != null) {      handler = typeHandlerRegistrySupplier.get().getTypeHandler(jdbcType);    }    return handler;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/UnknownTypeHandler.java", "stars": "15", "class": {"name": "UnknownTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "safeGetJdbcTypeForColumn", "params": ["ResultSetMetaData", "Integer"], "throws": null, "modifiers": ["private"], "return_type": "JdbcType", "snippet": "  private JdbcType safeGetJdbcTypeForColumn(ResultSetMetaData rsmd, Integer columnIndex) {    try {      return JdbcType.forCode(rsmd.getColumnType(columnIndex));    } catch (Exception e) {      return null;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/UnknownTypeHandler.java", "stars": "15", "class": {"name": "UnknownTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "safeGetClassForColumn", "params": ["ResultSetMetaData", "Integer"], "throws": null, "modifiers": ["private"], "return_type": "Class<?>", "snippet": "  private Class<?> safeGetClassForColumn(ResultSetMetaData rsmd, Integer columnIndex) {    try {      return Resources.classForName(rsmd.getColumnClassName(columnIndex));    } catch (Exception e) {      return null;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/UnknownTypeHandler.java", "stars": "15", "class": {"name": "UnknownTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "attachTo", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void attachTo(Activity activity) {        attachTo(activity, false, null);    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogManager.java", "stars": "7", "class": {"name": "ErrorDialogManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "attachTo", "params": ["Activity", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void attachTo(Activity activity, boolean finishAfterDialog) {        attachTo(activity, finishAfterDialog, null);    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogManager.java", "stars": "7", "class": {"name": "ErrorDialogManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "attachTo", "params": ["Activity", "boolean", "Bundle"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void attachTo(Activity activity, boolean finishAfterDialog, Bundle argumentsForErrorDialog) {        Object executionScope = activity.getClass();        attachTo(activity, executionScope, finishAfterDialog, argumentsForErrorDialog);    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogManager.java", "stars": "7", "class": {"name": "ErrorDialogManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "attachTo", "params": ["Activity", "Object", "boolean", "Bundle"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void attachTo(Activity activity, Object executionScope, boolean finishAfterDialog, Bundle argumentsForErrorDialog) {        if (factory == null) {            throw new RuntimeException(\"You must set the static factory field to configure error dialogs for your app.\");        }        if (isSupportActivity(activity)) {            SupportManagerFragment.attachTo(activity, executionScope, finishAfterDialog, argumentsForErrorDialog);        } else {            HoneycombManagerFragment.attachTo(activity, executionScope, finishAfterDialog, argumentsForErrorDialog);        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogManager.java", "stars": "7", "class": {"name": "ErrorDialogManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSupportActivity", "params": ["Activity"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean isSupportActivity(Activity activity) {        boolean isSupport = false;        for (Class<?> c = activity.getClass().getSuperclass();; c = c.getSuperclass()) {            if (c == null) {                throw new RuntimeException(\"Illegal activity type: \" + activity.getClass());            }            String name = c.getName();            if (name.equals(\"android.support.v4.app.FragmentActivity\")) {                isSupport = true;                break;            } else if (name.startsWith(\"com.actionbarsherlock.app\")                    && (name.endsWith(\".SherlockActivity\") || name.endsWith(\".SherlockListActivity\") || name                            .endsWith(\".SherlockPreferenceActivity\"))) {                throw new RuntimeException(\"Please use SherlockFragmentActivity. Illegal activity: \" + name);            } else if (name.equals(\"android.app.Activity\")) {                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {                    throw new RuntimeException(                            \"Illegal activity without fragment support. Either use Android 3.0+ or android.support.v4.app.FragmentActivity.\");                }                break;            }        }        return isSupport;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogManager.java", "stars": "7", "class": {"name": "ErrorDialogManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkLogException", "params": ["ThrowableFailureEvent"], "throws": null, "modifiers": ["static", "protected"], "return_type": "void", "snippet": "    protected static void checkLogException(ThrowableFailureEvent event) {        if (factory.config.logExceptions) {            String tag = factory.config.tagForLoggingExceptions;            if (tag == null) {                tag = KeventBus.TAG;            }            Log.i(tag, \"Error dialog manager received exception\", event.throwable);        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogManager.java", "stars": "7", "class": {"name": "ErrorDialogManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isInExecutionScope", "params": ["Object", "ThrowableFailureEvent"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean isInExecutionScope(Object executionScope, ThrowableFailureEvent event) {        if (event != null) {            Object eventExecutionScope = event.getExecutionScope();            if (eventExecutionScope != null && !eventExecutionScope.equals(executionScope)) {                // Event not in our scope, do nothing                return false;            }        }        return true;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogManager.java", "stars": "7", "class": {"name": "ErrorDialogManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onCreate(Bundle savedInstanceState) {            super.onCreate(savedInstanceState);            eventBus = ErrorDialogManager.factory.config.getEventBus();            eventBus.register(this);            skipRegisterOnNextResume = true;        }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogManager.java", "stars": "7", "class": {"name": "SupportManagerFragment", "extends": "Fragment", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onResume() {            super.onResume();            if (skipRegisterOnNextResume) {                // registered in onCreate, skip registration in this run                skipRegisterOnNextResume = false;            } else {                eventBus = ErrorDialogManager.factory.config.getEventBus();                eventBus.register(this);            }        }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogManager.java", "stars": "7", "class": {"name": "SupportManagerFragment", "extends": "Fragment", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onPause() {            eventBus.unregister(this);            super.onPause();        }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogManager.java", "stars": "7", "class": {"name": "SupportManagerFragment", "extends": "Fragment", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onEventMainThread", "params": ["ThrowableFailureEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onEventMainThread(ThrowableFailureEvent event) {            if (!isInExecutionScope(executionScope, event)) {                return;            }            checkLogException(event);            // Execute pending commits before finding to avoid multiple error fragments being shown            FragmentManager fm = getFragmentManager();            fm.executePendingTransactions();            DialogFragment existingFragment = (DialogFragment) fm.findFragmentByTag(TAG_ERROR_DIALOG);            if (existingFragment != null) {                // Just show the latest error                existingFragment.dismiss();            }            DialogFragment errorFragment = (DialogFragment) factory                    .prepareErrorFragment(event, finishAfterDialog, argumentsForErrorDialog);            if (errorFragment != null) {                errorFragment.show(fm, TAG_ERROR_DIALOG);            }        }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogManager.java", "stars": "7", "class": {"name": "SupportManagerFragment", "extends": "Fragment", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "attachTo", "params": ["Activity", "Object", "boolean", "Bundle"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "        public static void attachTo(Activity activity, Object executionScope, boolean finishAfterDialog,                Bundle argumentsForErrorDialog) {            FragmentManager fm = ((FragmentActivity) activity).getSupportFragmentManager();            SupportManagerFragment fragment = (SupportManagerFragment) fm.findFragmentByTag(TAG_ERROR_DIALOG_MANAGER);            if (fragment == null) {                fragment = new SupportManagerFragment();                fm.beginTransaction().add(fragment, TAG_ERROR_DIALOG_MANAGER).commit();                fm.executePendingTransactions();            }            fragment.finishAfterDialog = finishAfterDialog;            fragment.argumentsForErrorDialog = argumentsForErrorDialog;            fragment.executionScope = executionScope;        }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogManager.java", "stars": "7", "class": {"name": "SupportManagerFragment", "extends": "Fragment", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onResume() {            super.onResume();            eventBus = ErrorDialogManager.factory.config.getEventBus();            eventBus.register(this);        }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogManager.java", "stars": "7", "class": {"name": "HoneycombManagerFragment", "extends": "android", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onPause() {            eventBus.unregister(this);            super.onPause();        }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogManager.java", "stars": "7", "class": {"name": "HoneycombManagerFragment", "extends": "android", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onEventMainThread", "params": ["ThrowableFailureEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onEventMainThread(ThrowableFailureEvent event) {            if (!isInExecutionScope(executionScope, event)) {                return;            }            checkLogException(event);            // Execute pending commits before finding to avoid multiple error fragments being shown            android.app.FragmentManager fm = getFragmentManager();            fm.executePendingTransactions();            android.app.DialogFragment existingFragment = (android.app.DialogFragment) fm                    .findFragmentByTag(TAG_ERROR_DIALOG);            if (existingFragment != null) {                // Just show the latest error                existingFragment.dismiss();            }            android.app.DialogFragment errorFragment = (android.app.DialogFragment) factory.prepareErrorFragment(event,                    finishAfterDialog, argumentsForErrorDialog);            if (errorFragment != null) {                errorFragment.show(fm, TAG_ERROR_DIALOG);            }        }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogManager.java", "stars": "7", "class": {"name": "HoneycombManagerFragment", "extends": "android", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "attachTo", "params": ["Activity", "Object", "boolean", "Bundle"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "        public static void attachTo(Activity activity, Object executionScope, boolean finishAfterDialog, Bundle argumentsForErrorDialog) {            android.app.FragmentManager fm = activity.getFragmentManager();            HoneycombManagerFragment fragment = (HoneycombManagerFragment) fm                    .findFragmentByTag(TAG_ERROR_DIALOG_MANAGER);            if (fragment == null) {                fragment = new HoneycombManagerFragment();                fm.beginTransaction().add(fragment, TAG_ERROR_DIALOG_MANAGER).commit();                fm.executePendingTransactions();            }            fragment.finishAfterDialog = finishAfterDialog;            fragment.argumentsForErrorDialog = argumentsForErrorDialog;            fragment.executionScope = executionScope;        }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ErrorDialogManager.java", "stars": "7", "class": {"name": "HoneycombManagerFragment", "extends": "android", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "valueChanged", "params": ["ListSelectionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void valueChanged(ListSelectionEvent e) {        String path=ProjectViewer.itemString+\"\\\\\"+GUI.pvv1.elementAt(GUI.pvl1.getSelectedIndex()).toString();        File file=new File(path);        StringBuilder result = new StringBuilder();        BufferedReader bf= null;        System.out.println(path);       try {            bf = new BufferedReader(new FileReader(file));            String s;                BufferedReader bf1=new BufferedReader(new FileReader(file));                String s1;                while((s1 = bf1.readLine())!=null){                    result.append(System.lineSeparator()+s1);                }                bf.close();                GUI.jt1.setText(result.toString());            } catch (IOException ex) {                ex.printStackTrace();            }        }", "url": "https://raw.githubusercontent.com/4156/MindustryModMaker/master/src/Listener/ItemProjectListener.java", "stars": "2", "class": {"name": "ItemProjectListener", "extends": null, "implements": ["ListSelectionListener"], "modifiers": ["public"]}}, {"method_name": "parse", "params": ["File"], "throws": null, "modifiers": ["static"], "return_type": "XMLStatement", "snippet": "    static XMLStatement parse(File file) {        XMLStatement statement = null;        try {            Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(file);            // \u89e3\u6790\u6839\u8282\u70b9            statement = parseRoot(document);            // \u89e3\u6790\u9a8c\u8bc1\u8282\u70b9            parseValidateStatement(document.getElementsByTagName(\"validate\"), statement);            // \u89e3\u6790select/insert/update/delete\u8282\u70b9            for (String tagName : TAG_NAMES) {                statement.addStatement(parseSqlStatement(statement, tagName, document));            }            // \u89e3\u6790functionStatement            statement.addStatement(parseFunctionStatement(statement, document.getElementsByTagName(\"function\")));        } catch (SAXException | IOException | ParserConfigurationException e) {            logger.error(\"\u89e3\u6790S8XML\u6587\u4ef6\u51fa\u9519\", e);        }        return statement;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/utils/S8XMLFileParser.java", "stars": "13", "class": {"name": "S8XMLFileParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseFunctionStatement", "params": ["XMLStatement", "NodeList"], "throws": null, "modifiers": ["private", "static"], "return_type": "List<Statement>", "snippet": "    private static List<Statement> parseFunctionStatement(XMLStatement xmlStatement, NodeList nodeList) {        List<Statement> statements = new ArrayList<>();        for (int i = 0, len = nodeList.getLength(); i < len; i++) {            Node node = nodeList.item(i);            FunctionStatement functionStatement = new FunctionStatement();            parseStatement(functionStatement, node, xmlStatement);            // TODO \u8fd9\u91cc\u540e\u7eed\u9700\u8981\u6539\u8fdb            // \u8bbe\u7f6e\u5b50\u8282\u70b9\uff0c\u4e0d\u8fdb\u884c\u6df1\u5c42\u89e3\u6790\uff0c\u6267\u884c\u65f6\u5728\u89e3\u6790            functionStatement.setNodeList((NodeList) DomUtils.evaluate(\"*\", node, XPathConstants.NODESET));            statements.add(functionStatement);        }        return statements;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/utils/S8XMLFileParser.java", "stars": "13", "class": {"name": "S8XMLFileParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseStatement", "params": ["Statement", "Node", "XMLStatement"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void parseStatement(Statement statement, Node node, XMLStatement xmlStatement) {        // \u8bbe\u7f6e\u662f\u5426\u652f\u6301RequestBody        statement.setRequestBody(\"true\".equalsIgnoreCase(DomUtils.getNodeAttributeValue(node, \"request-body\")));        String requestMapping = DomUtils.getNodeAttributeValue(node, \"request-mapping\");        if (StringUtils.isNotBlank(requestMapping)) {            // \u8bbe\u7f6e\u8bf7\u6c42\u8def\u5f84            statement.setRequestMapping(StringUtils.defaultString(xmlStatement.getRequestMapping()) + requestMapping);            // \u8bbe\u7f6e\u8bf7\u6c42\u65b9\u6cd5            statement.setRequestMethod(DomUtils.getNodeAttributeValue(node, \"request-method\"));        }        // \u8bbe\u7f6e\u8282\u70b9        statement.setNode(node);        // \u8bbe\u7f6eID        statement.setId(DomUtils.getNodeAttributeValue(node, \"id\"));        // \u8bbe\u7f6eXMLStatement        statement.setXmlStatement(xmlStatement);        // \u89e3\u6790\u9a8c\u8bc1        String validate = DomUtils.getNodeAttributeValue(node, \"validate\");        if (StringUtils.isNotBlank(validate)) {            // \u652f\u6301\u591a\u4e2a\u9a8c\u8bc1            for (String validateId : validate.split(\",\")) {                Assert.isTrue(xmlStatement.containsValidateStatement(validateId), String.format(\"\u627e\u4e0d\u5230\u9a8c\u8bc1\u8282\u70b9[%s]\", validateId));                statement.addValidate(validateId);            }        }    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/utils/S8XMLFileParser.java", "stars": "13", "class": {"name": "S8XMLFileParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseValidateStatement", "params": ["NodeList", "XMLStatement"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void parseValidateStatement(NodeList nodeList, XMLStatement xmlStatement) {        for (int i = 0, len = nodeList.getLength(); i < len; i++) {            Node node = nodeList.item(i);            String id = DomUtils.getNodeAttributeValue(node, \"id\");            Assert.isNotBlank(id, \"validate\u8282\u70b9\u5fc5\u987b\u8981\u6709id\u5c5e\u6027\");            String code = DomUtils.getNodeAttributeValue(node, \"code\");            String message = DomUtils.getNodeAttributeValue(node, \"message\");            message = StringUtils.isBlank(message) ? \"\u53c2\u6570\u6821\u9a8c\u5931\u8d25\" : message;            xmlStatement.addValidateStatement(new ValidateStatement(id, NumberUtils.toInt(code, 0), message, (NodeList) DomUtils.evaluate(\"param\", node, XPathConstants.NODESET)));        }    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/utils/S8XMLFileParser.java", "stars": "13", "class": {"name": "S8XMLFileParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseRoot", "params": ["Document"], "throws": null, "modifiers": ["private", "static"], "return_type": "XMLStatement", "snippet": "    private static XMLStatement parseRoot(Document document) {        XMLStatement statement = new XMLStatement();        //\u89e3\u6790\u8bf7\u6c42\u8def\u5f84        statement.setRequestMapping(document.getDocumentElement().getAttribute(\"request-mapping\"));        return statement;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/utils/S8XMLFileParser.java", "stars": "13", "class": {"name": "S8XMLFileParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseSqlStatement", "params": ["XMLStatement", "String", "Document"], "throws": null, "modifiers": ["private", "static"], "return_type": "List<Statement>", "snippet": "    private static List<Statement> parseSqlStatement(XMLStatement xmlStatement, String tagName, Document document) {        List<Statement> sqlStatements = new ArrayList<>();        NodeList nodeList = document.getElementsByTagName(tagName);        for (int i = 0, len = nodeList.getLength(); i < len; i++) {            Node item = nodeList.item(i);            SqlStatement sqlStatement = new SqlStatement();            parseStatement(sqlStatement, item, xmlStatement);            sqlStatement.setDataSourceName(DomUtils.getNodeAttributeValue(item, \"datasource\"));            // \u8bbe\u7f6eSqlMode            sqlStatement.setSqlMode(SqlMode.valueOf(item.getNodeName().toUpperCase().replace(\"-\", \"_\")));            String returnType = DomUtils.getNodeAttributeValue(item, \"return-type\");            if (\"int\".equalsIgnoreCase(returnType)) {                sqlStatement.setReturnType(Integer.class);            } else if (\"double\".equalsIgnoreCase(returnType)) {                sqlStatement.setReturnType(Double.class);            } else if (\"long\".equalsIgnoreCase(returnType)) {                sqlStatement.setReturnType(Long.class);            } else if (\"string\".equalsIgnoreCase(returnType)) {                sqlStatement.setReturnType(String.class);            } else if (\"boolean\".equalsIgnoreCase(returnType)) {                sqlStatement.setReturnType(Boolean.class);            } else if (\"pk\".equalsIgnoreCase(returnType)) {                sqlStatement.setSqlMode(SqlMode.INSERT_WITH_PK);                Node selectKey = (Node) DomUtils.evaluate(\"select-key\", item, XPathConstants.NODE);                sqlStatement.setSelectKey(selectKey);                if(selectKey != null && selectKey.hasChildNodes()){                    SqlNode root = new TextSqlNode(\"\");                    parseNodeList(root,document,selectKey.getChildNodes());                    sqlStatement.setSelectKeySqlNode(root);                }                sqlStatement.setReturnType(Long.class);            } else {                sqlStatement.setReturnType(Map.class);            }            if (SqlMode.SELECT_LIST == sqlStatement.getSqlMode()) {                //\u8bbe\u7f6e\u662f\u5426\u662f\u5206\u9875                sqlStatement.setPagination(\"true\".equalsIgnoreCase(DomUtils.getNodeAttributeValue(item, \"page\")));            }            SqlNode root = new TextSqlNode(\"\");            // \u89e3\u6790sql\u8bed\u53e5            parseNodeList(root, document, item.getChildNodes());            sqlStatement.setSqlNode(root);            sqlStatements.add(sqlStatement);        }        return sqlStatements;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/utils/S8XMLFileParser.java", "stars": "13", "class": {"name": "S8XMLFileParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseNodeList", "params": ["SqlNode", "Document", "NodeList"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void parseNodeList(SqlNode sqlNode, Document document, NodeList nodeList) {        for (int i = 0, len = nodeList.getLength(); i < len; i++) {            Node node = nodeList.item(i);            if (node.getNodeType() == Node.TEXT_NODE) {                sqlNode.addChildNode(new TextSqlNode(node.getNodeValue().trim()));            } else if (node.getNodeType() != Node.COMMENT_NODE) {                String nodeName = node.getNodeName();                SqlNode childNode;                if (\"foreach\".equalsIgnoreCase(nodeName)) {                    childNode = parseForeachSqlNode(node);                } else if (\"if\".equalsIgnoreCase(nodeName)) {                    childNode = parseIfSqlNode(node);                } else if (\"include\".equalsIgnoreCase(nodeName)) {                    String refId = DomUtils.getNodeAttributeValue(node, \"refid\");                    Assert.isNotBlank(refId, \"refid \u4e0d\u80fd\u4e3a\u7a7a\uff01\");                    Node refSqlNode = (Node) DomUtils.evaluate(String.format(\"//sql[@id=\\\"%s\\\"]\", refId), document, XPathConstants.NODE);                    Assert.isNotNull(refSqlNode, \"\u627e\u4e0d\u5230sql[\" + refId + \"]\");                    childNode = new TextSqlNode(refSqlNode.getTextContent().trim());                } else if (\"select-key\".equalsIgnoreCase(nodeName)) { //\u8df3\u8fc7selectKey\u6807\u7b7e                    continue;                } else {                    logger.error(\"\u4e0d\u652f\u6301\u7684\u6807\u7b7e:[{}]\", nodeName);                    return;                }                sqlNode.addChildNode(childNode);                if (node.hasChildNodes()) {                    parseNodeList(childNode, document, node.getChildNodes());                }            }        }    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/utils/S8XMLFileParser.java", "stars": "13", "class": {"name": "S8XMLFileParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseForeachSqlNode", "params": ["Node"], "throws": null, "modifiers": ["private", "static"], "return_type": "ForeachSqlNode", "snippet": "    private static ForeachSqlNode parseForeachSqlNode(Node node) {        ForeachSqlNode foreachSqlNode = new ForeachSqlNode();        foreachSqlNode.setCollection(DomUtils.getNodeAttributeValue(node, \"collection\"));        foreachSqlNode.setSeparator(DomUtils.getNodeAttributeValue(node, \"separator\"));        foreachSqlNode.setClose(DomUtils.getNodeAttributeValue(node, \"close\"));        foreachSqlNode.setOpen(DomUtils.getNodeAttributeValue(node, \"open\"));        foreachSqlNode.setItem(DomUtils.getNodeAttributeValue(node, \"item\"));        return foreachSqlNode;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/utils/S8XMLFileParser.java", "stars": "13", "class": {"name": "S8XMLFileParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseIfSqlNode", "params": ["Node"], "throws": null, "modifiers": ["private", "static"], "return_type": "IfSqlNode", "snippet": "    private static IfSqlNode parseIfSqlNode(Node node) {        return new IfSqlNode(DomUtils.getNodeAttributeValue(node, \"test\"));    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/utils/S8XMLFileParser.java", "stars": "13", "class": {"name": "S8XMLFileParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.own_diary_page);    }", "url": "https://raw.githubusercontent.com/RotonNorrison/StirDiary/master/app/src/main/java/com/example/stirdiary/OwnDiary.java", "stars": "2", "class": {"name": "OwnDiary", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjects", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Project>", "snippet": "    public ArrayList<Project> getProjects() {        return projects;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/item/Projects.java", "stars": "4", "class": {"name": "Projects", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectsDesc", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getProjectsDesc() {        return projectsDesc;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/item/Projects.java", "stars": "4", "class": {"name": "Projects", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectsName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getProjectsName() {        return projectsName;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/item/Projects.java", "stars": "4", "class": {"name": "Projects", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProjects", "params": ["ArrayList<Project>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProjects(ArrayList<Project> projects) {        this.projects = projects;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/item/Projects.java", "stars": "4", "class": {"name": "Projects", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProjectsDesc", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProjectsDesc(String projectsDesc) {        this.projectsDesc = projectsDesc;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/item/Projects.java", "stars": "4", "class": {"name": "Projects", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProjectsName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProjectsName(String projectsName) {        this.projectsName = projectsName;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/item/Projects.java", "stars": "4", "class": {"name": "Projects", "extends": null, "implements": null, "modifiers": ["public"]}}]